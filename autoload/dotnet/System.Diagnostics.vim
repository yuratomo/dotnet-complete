
call dotnet#class('ConditionalAttribute', 'Attribute', [ 
  \ dotnet#method('ConditionalAttribute(', ''),
  \ dotnet#method('get_ConditionString(', ''),
  \ dotnet#prop('ConditionString', 'string'),
  \ ])

call dotnet#class('Debugger', 'Object', [ 
  \ dotnet#method('Debugger(', ''),
  \ dotnet#method('Break(', ''),
  \ dotnet#method('Launch(', ''),
  \ dotnet#method('NotifyOfCrossThreadDependency(', ''),
  \ dotnet#method('get_IsAttached(', ''),
  \ dotnet#method('Log(', ''),
  \ dotnet#method('IsLogging(', ''),
  \ dotnet#prop('IsAttached', 'bool'),
  \ ])

call dotnet#class('DebuggerStepThroughAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerStepThroughAttribute(', ''),
  \ ])

call dotnet#class('DebuggerStepperBoundaryAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerStepperBoundaryAttribute(', ''),
  \ ])

call dotnet#class('DebuggerHiddenAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerHiddenAttribute(', ''),
  \ ])

call dotnet#class('DebuggerNonUserCodeAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerNonUserCodeAttribute(', ''),
  \ ])

call dotnet#class('DebuggableAttribute', 'Attribute', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('DebuggableAttribute(', ''),
  \ dotnet#method('get_IsJITTrackingEnabled(', ''),
  \ dotnet#method('get_IsJITOptimizerDisabled(', ''),
  \ dotnet#method('get_DebuggingFlags(', ''),
  \ dotnet#prop('IsJITTrackingEnabled', 'bool'),
  \ dotnet#prop('IsJITOptimizerDisabled', 'bool'),
  \ dotnet#prop('DebuggingFlags', 'DebuggableAttribute/DebuggingModes'),
  \ ])

call dotnet#class('DebuggerBrowsableAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerBrowsableAttribute(', ''),
  \ dotnet#method('get_State(', ''),
  \ dotnet#prop('State', 'DebuggerBrowsableState'),
  \ ])

call dotnet#class('DebuggerTypeProxyAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerTypeProxyAttribute(', ''),
  \ dotnet#method('get_ProxyTypeName(', ''),
  \ dotnet#method('set_Target(', ''),
  \ dotnet#method('get_Target(', ''),
  \ dotnet#method('get_TargetTypeName(', ''),
  \ dotnet#method('set_TargetTypeName(', ''),
  \ dotnet#prop('ProxyTypeName', 'string'),
  \ dotnet#prop('Target', 'Type'),
  \ dotnet#prop('TargetTypeName', 'string'),
  \ ])

call dotnet#class('DebuggerDisplayAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerDisplayAttribute(', ''),
  \ dotnet#method('get_Value(', ''),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('set_Name(', ''),
  \ dotnet#method('get_Type(', ''),
  \ dotnet#method('set_Type(', ''),
  \ dotnet#method('set_Target(', ''),
  \ dotnet#method('get_Target(', ''),
  \ dotnet#method('get_TargetTypeName(', ''),
  \ dotnet#method('set_TargetTypeName(', ''),
  \ dotnet#prop('Value', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Type', 'string'),
  \ dotnet#prop('Target', 'Type'),
  \ dotnet#prop('TargetTypeName', 'string'),
  \ ])

call dotnet#class('DebuggerVisualizerAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerVisualizerAttribute(', ''),
  \ dotnet#method('get_VisualizerObjectSourceTypeName(', ''),
  \ dotnet#method('get_VisualizerTypeName(', ''),
  \ dotnet#method('get_Description(', ''),
  \ dotnet#method('set_Description(', ''),
  \ dotnet#method('set_Target(', ''),
  \ dotnet#method('get_Target(', ''),
  \ dotnet#method('set_TargetTypeName(', ''),
  \ dotnet#method('get_TargetTypeName(', ''),
  \ dotnet#prop('VisualizerObjectSourceTypeName', 'string'),
  \ dotnet#prop('VisualizerTypeName', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ dotnet#prop('Target', 'Type'),
  \ dotnet#prop('TargetTypeName', 'string'),
  \ ])

call dotnet#class('StackTrace', 'Object', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('StackTrace(', ''),
  \ dotnet#method('GetStackFramesInternal(', ''),
  \ dotnet#method('CalculateFramesToSkip(', ''),
  \ dotnet#method('get_FrameCount(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#prop('FrameCount', 'int32'),
  \ ])

call dotnet#class('StackFrame', 'Object', [ 
  \ dotnet#method('InitMembers(', ''),
  \ dotnet#method('StackFrame(', ''),
  \ dotnet#method('SetMethodBase(', ''),
  \ dotnet#method('SetOffset(', ''),
  \ dotnet#method('SetILOffset(', ''),
  \ dotnet#method('SetFileName(', ''),
  \ dotnet#method('SetLineNumber(', ''),
  \ dotnet#method('SetColumnNumber(', ''),
  \ dotnet#method('GetNativeOffset(', ''),
  \ dotnet#method('GetILOffset(', ''),
  \ dotnet#method('GetFileName(', ''),
  \ dotnet#method('GetFileLineNumber(', ''),
  \ dotnet#method('GetFileColumnNumber(', ''),
  \ dotnet#method('ToString(', ''),
  \ ])

call dotnet#class('PresentationTraceSources', 'Object', [ 
  \ dotnet#method('GetTraceLevel(', ''),
  \ dotnet#method('SetTraceLevel(', ''),
  \ dotnet#method('Refresh(', ''),
  \ dotnet#method('add_TraceRefresh(', ''),
  \ dotnet#method('remove_TraceRefresh(', ''),
  \ dotnet#method('PresentationTraceSources(', ''),
  \ dotnet#event('TraceRefresh', 'TraceRefreshEventHandler'),
  \ dotnet#prop('DependencyPropertySource', 'TraceSource'),
  \ dotnet#prop('FreezableSource', 'TraceSource'),
  \ dotnet#prop('NameScopeSource', 'TraceSource'),
  \ dotnet#prop('RoutedEventSource', 'TraceSource'),
  \ dotnet#prop('AnimationSource', 'TraceSource'),
  \ dotnet#prop('DataBindingSource', 'TraceSource'),
  \ dotnet#prop('DocumentsSource', 'TraceSource'),
  \ dotnet#prop('ResourceDictionarySource', 'TraceSource'),
  \ dotnet#prop('MarkupSource', 'TraceSource'),
  \ dotnet#prop('HwndHostSource', 'TraceSource'),
  \ dotnet#prop('ShellSource', 'TraceSource'),
  \ ])

call dotnet#class('EventSchemaTraceListener', 'TextWriterTraceListener', [ 
  \ dotnet#method('EventSchemaTraceListener(', ''),
  \ dotnet#method('get_Writer(', ''),
  \ dotnet#method('set_Writer(', ''),
  \ dotnet#method('get_IsThreadSafe(', ''),
  \ dotnet#method('get_BufferSize(', ''),
  \ dotnet#method('get_TraceLogRetentionOption(', ''),
  \ dotnet#method('get_MaximumFileSize(', ''),
  \ dotnet#method('get_MaximumNumberOfFiles(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('Flush(', ''),
  \ dotnet#method('Write(', ''),
  \ dotnet#method('WriteLine(', ''),
  \ dotnet#method('Fail(', ''),
  \ dotnet#method('TraceEvent(', ''),
  \ dotnet#method('TraceData(', ''),
  \ dotnet#method('TraceTransfer(', ''),
  \ dotnet#method('GetSupportedAttributes(', ''),
  \ dotnet#prop('Writer', 'TextWriter'),
  \ dotnet#prop('IsThreadSafe', 'bool'),
  \ dotnet#prop('BufferSize', 'int32'),
  \ dotnet#prop('TraceLogRetentionOption', 'TraceLogRetentionOption'),
  \ dotnet#prop('MaximumFileSize', 'int64'),
  \ dotnet#prop('MaximumNumberOfFiles', 'int32'),
  \ ])

call dotnet#class('UnescapedXmlDiagnosticData', 'Object', [ 
  \ dotnet#method('UnescapedXmlDiagnosticData(', ''),
  \ dotnet#method('get_UnescapedXml(', ''),
  \ dotnet#method('set_UnescapedXml(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#prop('UnescapedXml', 'string'),
  \ ])

call dotnet#class('Switch', 'Object', [ 
  \ dotnet#method('Switch(', ''),
  \ dotnet#method('get_Attributes(', ''),
  \ dotnet#method('get_DisplayName(', ''),
  \ dotnet#method('get_Description(', ''),
  \ dotnet#method('get_SwitchSetting(', ''),
  \ dotnet#method('set_SwitchSetting(', ''),
  \ dotnet#method('get_Value(', ''),
  \ dotnet#method('set_Value(', ''),
  \ dotnet#method('GetSupportedAttributes(', ''),
  \ dotnet#method('OnSwitchSettingChanged(', ''),
  \ dotnet#method('OnValueChanged(', ''),
  \ dotnet#prop('Attributes', 'StringDictionary'),
  \ dotnet#prop('DisplayName', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ dotnet#prop('SwitchSetting', 'int32'),
  \ dotnet#prop('Value', 'string'),
  \ ])

call dotnet#class('BooleanSwitch', 'Switch', [ 
  \ dotnet#method('BooleanSwitch(', ''),
  \ dotnet#method('get_Enabled(', ''),
  \ dotnet#method('set_Enabled(', ''),
  \ dotnet#method('OnValueChanged(', ''),
  \ dotnet#prop('Enabled', 'bool'),
  \ ])

call dotnet#class('TraceListener', 'MarshalByRefObject', [ 
  \ dotnet#method('TraceListener(', ''),
  \ dotnet#method('get_Attributes(', ''),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('set_Name(', ''),
  \ dotnet#method('get_IsThreadSafe(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('Flush(', ''),
  \ dotnet#method('get_IndentLevel(', ''),
  \ dotnet#method('set_IndentLevel(', ''),
  \ dotnet#method('get_IndentSize(', ''),
  \ dotnet#method('set_IndentSize(', ''),
  \ dotnet#method('get_Filter(', ''),
  \ dotnet#method('set_Filter(', ''),
  \ dotnet#method('get_NeedIndent(', ''),
  \ dotnet#method('set_NeedIndent(', ''),
  \ dotnet#method('get_TraceOutputOptions(', ''),
  \ dotnet#method('set_TraceOutputOptions(', ''),
  \ dotnet#method('Fail(', ''),
  \ dotnet#method('GetSupportedAttributes(', ''),
  \ dotnet#method('Write(', ''),
  \ dotnet#method('WriteIndent(', ''),
  \ dotnet#method('WriteLine(', ''),
  \ dotnet#method('TraceData(', ''),
  \ dotnet#method('TraceEvent(', ''),
  \ dotnet#method('TraceTransfer(', ''),
  \ dotnet#prop('Attributes', 'StringDictionary'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('IsThreadSafe', 'bool'),
  \ dotnet#prop('IndentLevel', 'int32'),
  \ dotnet#prop('IndentSize', 'int32'),
  \ dotnet#prop('Filter', 'TraceFilter'),
  \ dotnet#prop('NeedIndent', 'bool'),
  \ dotnet#prop('TraceOutputOptions', 'TraceOptions'),
  \ ])

call dotnet#class('TextWriterTraceListener', 'TraceListener', [ 
  \ dotnet#method('TextWriterTraceListener(', ''),
  \ dotnet#method('get_Writer(', ''),
  \ dotnet#method('set_Writer(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('Flush(', ''),
  \ dotnet#method('Write(', ''),
  \ dotnet#method('WriteLine(', ''),
  \ dotnet#prop('Writer', 'TextWriter'),
  \ ])

call dotnet#class('ConsoleTraceListener', 'TextWriterTraceListener', [ 
  \ dotnet#method('ConsoleTraceListener(', ''),
  \ dotnet#method('Close(', ''),
  \ ])

call dotnet#class('CorrelationManager', 'Object', [ 
  \ dotnet#method('get_ActivityId(', ''),
  \ dotnet#method('set_ActivityId(', ''),
  \ dotnet#method('get_LogicalOperationStack(', ''),
  \ dotnet#method('StartLogicalOperation(', ''),
  \ dotnet#method('StopLogicalOperation(', ''),
  \ dotnet#method('CorrelationManager(', ''),
  \ dotnet#prop('ActivityId', 'Guid'),
  \ dotnet#prop('LogicalOperationStack', 'Stack'),
  \ ])

call dotnet#class('Debug', 'Object', [ 
  \ dotnet#method('get_AutoFlush(', ''),
  \ dotnet#method('set_AutoFlush(', ''),
  \ dotnet#method('get_IndentLevel(', ''),
  \ dotnet#method('set_IndentLevel(', ''),
  \ dotnet#method('get_IndentSize(', ''),
  \ dotnet#method('set_IndentSize(', ''),
  \ dotnet#method('Flush(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('Assert(', ''),
  \ dotnet#method('Fail(', ''),
  \ dotnet#method('Print(', ''),
  \ dotnet#method('Write(', ''),
  \ dotnet#method('WriteLine(', ''),
  \ dotnet#method('WriteIf(', ''),
  \ dotnet#method('WriteLineIf(', ''),
  \ dotnet#method('Indent(', ''),
  \ dotnet#method('Unindent(', ''),
  \ dotnet#prop('Listeners', 'TraceListenerCollection'),
  \ dotnet#prop('AutoFlush', 'bool'),
  \ dotnet#prop('IndentLevel', 'int32'),
  \ dotnet#prop('IndentSize', 'int32'),
  \ ])

call dotnet#class('DefaultTraceListener', 'TraceListener', [ 
  \ dotnet#method('DefaultTraceListener(', ''),
  \ dotnet#method('get_AssertUiEnabled(', ''),
  \ dotnet#method('set_AssertUiEnabled(', ''),
  \ dotnet#method('get_LogFileName(', ''),
  \ dotnet#method('set_LogFileName(', ''),
  \ dotnet#method('Fail(', ''),
  \ dotnet#method('Write(', ''),
  \ dotnet#method('WriteLine(', ''),
  \ dotnet#prop('AssertUiEnabled', 'bool'),
  \ dotnet#prop('LogFileName', 'string'),
  \ ])

call dotnet#class('DelimitedListTraceListener', 'TextWriterTraceListener', [ 
  \ dotnet#method('DelimitedListTraceListener(', ''),
  \ dotnet#method('get_Delimiter(', ''),
  \ dotnet#method('set_Delimiter(', ''),
  \ dotnet#method('GetSupportedAttributes(', ''),
  \ dotnet#method('TraceEvent(', ''),
  \ dotnet#method('TraceData(', ''),
  \ dotnet#prop('Delimiter', 'string'),
  \ ])

call dotnet#class('TraceFilter', 'Object', [ 
  \ dotnet#method('ShouldTrace(', ''),
  \ dotnet#method('TraceFilter(', ''),
  \ ])

call dotnet#class('EventTypeFilter', 'TraceFilter', [ 
  \ dotnet#method('EventTypeFilter(', ''),
  \ dotnet#method('ShouldTrace(', ''),
  \ dotnet#method('get_EventType(', ''),
  \ dotnet#method('set_EventType(', ''),
  \ dotnet#prop('EventType', 'SourceLevels'),
  \ ])

call dotnet#class('SourceFilter', 'TraceFilter', [ 
  \ dotnet#method('SourceFilter(', ''),
  \ dotnet#method('ShouldTrace(', ''),
  \ dotnet#method('get_Source(', ''),
  \ dotnet#method('set_Source(', ''),
  \ dotnet#prop('Source', 'string'),
  \ ])

call dotnet#class('SourceSwitch', 'Switch', [ 
  \ dotnet#method('SourceSwitch(', ''),
  \ dotnet#method('get_Level(', ''),
  \ dotnet#method('set_Level(', ''),
  \ dotnet#method('ShouldTrace(', ''),
  \ dotnet#method('OnValueChanged(', ''),
  \ dotnet#prop('Level', 'SourceLevels'),
  \ ])

call dotnet#class('SwitchAttribute', 'Attribute', [ 
  \ dotnet#method('SwitchAttribute(', ''),
  \ dotnet#method('get_SwitchName(', ''),
  \ dotnet#method('set_SwitchName(', ''),
  \ dotnet#method('get_SwitchType(', ''),
  \ dotnet#method('set_SwitchType(', ''),
  \ dotnet#method('get_SwitchDescription(', ''),
  \ dotnet#method('set_SwitchDescription(', ''),
  \ dotnet#method('GetAll(', ''),
  \ dotnet#prop('SwitchName', 'string'),
  \ dotnet#prop('SwitchType', 'Type'),
  \ dotnet#prop('SwitchDescription', 'string'),
  \ ])

call dotnet#class('SwitchLevelAttribute', 'Attribute', [ 
  \ dotnet#method('SwitchLevelAttribute(', ''),
  \ dotnet#method('get_SwitchLevelType(', ''),
  \ dotnet#method('set_SwitchLevelType(', ''),
  \ dotnet#prop('SwitchLevelType', 'Type'),
  \ ])

call dotnet#class('Trace', 'Object', [ 
  \ dotnet#method('get_AutoFlush(', ''),
  \ dotnet#method('set_AutoFlush(', ''),
  \ dotnet#method('get_UseGlobalLock(', ''),
  \ dotnet#method('set_UseGlobalLock(', ''),
  \ dotnet#method('get_IndentLevel(', ''),
  \ dotnet#method('set_IndentLevel(', ''),
  \ dotnet#method('get_IndentSize(', ''),
  \ dotnet#method('set_IndentSize(', ''),
  \ dotnet#method('Flush(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('Assert(', ''),
  \ dotnet#method('Fail(', ''),
  \ dotnet#method('Refresh(', ''),
  \ dotnet#method('TraceInformation(', ''),
  \ dotnet#method('TraceWarning(', ''),
  \ dotnet#method('TraceError(', ''),
  \ dotnet#method('Write(', ''),
  \ dotnet#method('WriteLine(', ''),
  \ dotnet#method('WriteIf(', ''),
  \ dotnet#method('WriteLineIf(', ''),
  \ dotnet#method('Indent(', ''),
  \ dotnet#method('Unindent(', ''),
  \ dotnet#method('Trace(', ''),
  \ dotnet#prop('Listeners', 'TraceListenerCollection'),
  \ dotnet#prop('AutoFlush', 'bool'),
  \ dotnet#prop('UseGlobalLock', 'bool'),
  \ dotnet#prop('CorrelationManager', 'CorrelationManager'),
  \ dotnet#prop('IndentLevel', 'int32'),
  \ dotnet#prop('IndentSize', 'int32'),
  \ ])

call dotnet#class('TraceEventCache', 'Object', [ 
  \ dotnet#method('get_Callstack(', ''),
  \ dotnet#method('get_LogicalOperationStack(', ''),
  \ dotnet#method('get_DateTime(', ''),
  \ dotnet#method('get_ProcessId(', ''),
  \ dotnet#method('get_ThreadId(', ''),
  \ dotnet#method('get_Timestamp(', ''),
  \ dotnet#method('TraceEventCache(', ''),
  \ dotnet#prop('Callstack', 'string'),
  \ dotnet#prop('LogicalOperationStack', 'Stack'),
  \ dotnet#prop('DateTime', 'DateTime'),
  \ dotnet#prop('ProcessId', 'int32'),
  \ dotnet#prop('ThreadId', 'string'),
  \ dotnet#prop('Timestamp', 'int64'),
  \ ])

call dotnet#class('TraceListenerCollection', 'Object', [ 
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('AddRange(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('TraceListenerCollection(', ''),
  \ dotnet#prop('Item(int32)', 'TraceListener'),
  \ dotnet#prop('Item(string)', 'TraceListener'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ ])

call dotnet#class('TraceSource', 'Object', [ 
  \ dotnet#method('TraceSource(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('Flush(', ''),
  \ dotnet#method('GetSupportedAttributes(', ''),
  \ dotnet#method('TraceEvent(', ''),
  \ dotnet#method('TraceData(', ''),
  \ dotnet#method('TraceInformation(', ''),
  \ dotnet#method('TraceTransfer(', ''),
  \ dotnet#method('get_Attributes(', ''),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('get_Listeners(', ''),
  \ dotnet#method('get_Switch(', ''),
  \ dotnet#method('set_Switch(', ''),
  \ dotnet#prop('Attributes', 'StringDictionary'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Listeners', 'TraceListenerCollection'),
  \ dotnet#prop('Switch', 'SourceSwitch'),
  \ ])

call dotnet#class('TraceSwitch', 'Switch', [ 
  \ dotnet#method('TraceSwitch(', ''),
  \ dotnet#method('get_Level(', ''),
  \ dotnet#method('set_Level(', ''),
  \ dotnet#method('get_TraceError(', ''),
  \ dotnet#method('get_TraceWarning(', ''),
  \ dotnet#method('get_TraceInfo(', ''),
  \ dotnet#method('get_TraceVerbose(', ''),
  \ dotnet#method('OnSwitchSettingChanged(', ''),
  \ dotnet#method('OnValueChanged(', ''),
  \ dotnet#prop('Level', 'TraceLevel'),
  \ dotnet#prop('TraceError', 'bool'),
  \ dotnet#prop('TraceWarning', 'bool'),
  \ dotnet#prop('TraceInfo', 'bool'),
  \ dotnet#prop('TraceVerbose', 'bool'),
  \ ])

call dotnet#class('XmlWriterTraceListener', 'TextWriterTraceListener', [ 
  \ dotnet#method('XmlWriterTraceListener(', ''),
  \ dotnet#method('Write(', ''),
  \ dotnet#method('WriteLine(', ''),
  \ dotnet#method('Fail(', ''),
  \ dotnet#method('TraceEvent(', ''),
  \ dotnet#method('TraceData(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('TraceTransfer(', ''),
  \ ])

call dotnet#class('CounterCreationData', 'Object', [ 
  \ dotnet#method('CounterCreationData(', ''),
  \ dotnet#method('get_CounterType(', ''),
  \ dotnet#method('set_CounterType(', ''),
  \ dotnet#method('get_CounterName(', ''),
  \ dotnet#method('set_CounterName(', ''),
  \ dotnet#method('get_CounterHelp(', ''),
  \ dotnet#method('set_CounterHelp(', ''),
  \ dotnet#prop('CounterType', 'PerformanceCounterType'),
  \ dotnet#prop('CounterName', 'string'),
  \ dotnet#prop('CounterHelp', 'string'),
  \ ])

call dotnet#class('CounterCreationDataCollection', 'CollectionBase', [ 
  \ dotnet#method('CounterCreationDataCollection(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('AddRange(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('OnValidate(', ''),
  \ dotnet#prop('Item(int32)', 'CounterCreationData'),
  \ ])

call dotnet#class('CounterSample', 'ValueType', [ 
  \ dotnet#field('rawValue', 'int64'),
  \ dotnet#field('baseValue', 'int64'),
  \ dotnet#field('timeStamp', 'int64'),
  \ dotnet#field('counterFrequency', 'int64'),
  \ dotnet#field('counterType', 'PerformanceCounterType'),
  \ dotnet#field('timeStamp100nSec', 'int64'),
  \ dotnet#field('systemFrequency', 'int64'),
  \ dotnet#field('counterTimeStamp', 'int64'),
  \ dotnet#method('CounterSample(', ''),
  \ dotnet#method('get_RawValue(', ''),
  \ dotnet#method('get_BaseValue(', ''),
  \ dotnet#method('get_SystemFrequency(', ''),
  \ dotnet#method('get_CounterFrequency(', ''),
  \ dotnet#method('get_CounterTimeStamp(', ''),
  \ dotnet#method('get_TimeStamp(', ''),
  \ dotnet#method('get_TimeStamp100nSec(', ''),
  \ dotnet#method('get_CounterType(', ''),
  \ dotnet#method('Calculate(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('op_Equality(', ''),
  \ dotnet#method('op_Inequality(', ''),
  \ dotnet#prop('RawValue', 'int64'),
  \ dotnet#prop('BaseValue', 'int64'),
  \ dotnet#prop('SystemFrequency', 'int64'),
  \ dotnet#prop('CounterFrequency', 'int64'),
  \ dotnet#prop('CounterTimeStamp', 'int64'),
  \ dotnet#prop('TimeStamp', 'int64'),
  \ dotnet#prop('TimeStamp100nSec', 'int64'),
  \ dotnet#prop('CounterType', 'PerformanceCounterType'),
  \ ])

call dotnet#class('CounterSampleCalculator', 'Object', [ 
  \ dotnet#method('ComputeCounterValue(', ''),
  \ dotnet#method('CounterSampleCalculator(', ''),
  \ ])

call dotnet#class('DataReceivedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DataReceivedEventHandler(', ''),
  \ dotnet#method('Invoke(', ''),
  \ dotnet#method('EndInvoke(', ''),
  \ ])

call dotnet#class('DataReceivedEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_Data(', ''),
  \ dotnet#prop('Data', 'string'),
  \ ])

call dotnet#class('DiagnosticsConfigurationHandler', 'Object', [ 
  \ dotnet#method('Create(', ''),
  \ dotnet#method('DiagnosticsConfigurationHandler(', ''),
  \ ])

call dotnet#class('EntryWrittenEventArgs', 'EventArgs', [ 
  \ dotnet#method('EntryWrittenEventArgs(', ''),
  \ dotnet#method('get_Entry(', ''),
  \ dotnet#prop('Entry', 'EventLogEntry'),
  \ ])

call dotnet#class('EntryWrittenEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('EntryWrittenEventHandler(', ''),
  \ dotnet#method('Invoke(', ''),
  \ dotnet#method('EndInvoke(', ''),
  \ ])

call dotnet#class('EventInstance', 'Object', [ 
  \ dotnet#method('EventInstance(', ''),
  \ dotnet#method('get_CategoryId(', ''),
  \ dotnet#method('set_CategoryId(', ''),
  \ dotnet#method('get_EntryType(', ''),
  \ dotnet#method('set_EntryType(', ''),
  \ dotnet#method('get_InstanceId(', ''),
  \ dotnet#method('set_InstanceId(', ''),
  \ dotnet#prop('CategoryId', 'int32'),
  \ dotnet#prop('EntryType', 'EventLogEntryType'),
  \ dotnet#prop('InstanceId', 'int64'),
  \ ])

call dotnet#class('EventLog', 'Component', [ 
  \ dotnet#method('EventLog(', ''),
  \ dotnet#method('get_Entries(', ''),
  \ dotnet#method('get_LogDisplayName(', ''),
  \ dotnet#method('get_Log(', ''),
  \ dotnet#method('set_Log(', ''),
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('set_MachineName(', ''),
  \ dotnet#method('get_MaximumKilobytes(', ''),
  \ dotnet#method('set_MaximumKilobytes(', ''),
  \ dotnet#method('get_OverflowAction(', ''),
  \ dotnet#method('get_MinimumRetentionDays(', ''),
  \ dotnet#method('get_EnableRaisingEvents(', ''),
  \ dotnet#method('set_EnableRaisingEvents(', ''),
  \ dotnet#method('get_SynchronizingObject(', ''),
  \ dotnet#method('set_SynchronizingObject(', ''),
  \ dotnet#method('get_Source(', ''),
  \ dotnet#method('set_Source(', ''),
  \ dotnet#method('add_EntryWritten(', ''),
  \ dotnet#method('remove_EntryWritten(', ''),
  \ dotnet#method('BeginInit(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('CreateEventSource(', ''),
  \ dotnet#method('Delete(', ''),
  \ dotnet#method('DeleteEventSource(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('EndInit(', ''),
  \ dotnet#method('Exists(', ''),
  \ dotnet#method('GetEventLogs(', ''),
  \ dotnet#method('SourceExists(', ''),
  \ dotnet#method('LogNameFromSourceName(', ''),
  \ dotnet#method('ModifyOverflowPolicy(', ''),
  \ dotnet#method('RegisterDisplayName(', ''),
  \ dotnet#method('WriteEntry(', ''),
  \ dotnet#method('WriteEvent(', ''),
  \ dotnet#event('EntryWritten', 'EntryWrittenEventHandler'),
  \ dotnet#prop('Entries', 'EventLogEntryCollection'),
  \ dotnet#prop('LogDisplayName', 'string'),
  \ dotnet#prop('Log', 'string'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('MaximumKilobytes', 'int64'),
  \ dotnet#prop('OverflowAction', 'OverflowAction'),
  \ dotnet#prop('MinimumRetentionDays', 'int32'),
  \ dotnet#prop('EnableRaisingEvents', 'bool'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ dotnet#prop('Source', 'string'),
  \ ])

call dotnet#class('EventLogEntry', 'Component', [ 
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('get_Data(', ''),
  \ dotnet#method('get_Index(', ''),
  \ dotnet#method('get_Category(', ''),
  \ dotnet#method('get_CategoryNumber(', ''),
  \ dotnet#method('get_EventID(', ''),
  \ dotnet#method('get_EntryType(', ''),
  \ dotnet#method('get_Message(', ''),
  \ dotnet#method('get_Source(', ''),
  \ dotnet#method('get_ReplacementStrings(', ''),
  \ dotnet#method('get_InstanceId(', ''),
  \ dotnet#method('get_TimeGenerated(', ''),
  \ dotnet#method('get_TimeWritten(', ''),
  \ dotnet#method('get_UserName(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetObjectData(', ''),
  \ dotnet#method('EventLogEntry(', ''),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('Data', 'uint8[]'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('Category', 'string'),
  \ dotnet#prop('CategoryNumber', 'int16'),
  \ dotnet#prop('EventID', 'int32'),
  \ dotnet#prop('EntryType', 'EventLogEntryType'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('Source', 'string'),
  \ dotnet#prop('ReplacementStrings', 'string[]'),
  \ dotnet#prop('InstanceId', 'int64'),
  \ dotnet#prop('TimeGenerated', 'DateTime'),
  \ dotnet#prop('TimeWritten', 'DateTime'),
  \ dotnet#prop('UserName', 'string'),
  \ ])

call dotnet#class('EventLogEntryCollection', 'Object', [ 
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'EventLogEntry'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('EventLogPermission', 'ResourcePermissionBase', [ 
  \ dotnet#method('EventLogPermission(', ''),
  \ dotnet#method('get_PermissionEntries(', ''),
  \ dotnet#prop('PermissionEntries', 'EventLogPermissionEntryCollection'),
  \ ])

call dotnet#class('EventLogPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('EventLogPermissionAttribute(', ''),
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('set_MachineName(', ''),
  \ dotnet#method('get_PermissionAccess(', ''),
  \ dotnet#method('set_PermissionAccess(', ''),
  \ dotnet#method('CreatePermission(', ''),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('PermissionAccess', 'EventLogPermissionAccess'),
  \ ])

call dotnet#class('EventLogPermissionEntry', 'Object', [ 
  \ dotnet#method('EventLogPermissionEntry(', ''),
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('get_PermissionAccess(', ''),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('PermissionAccess', 'EventLogPermissionAccess'),
  \ ])

call dotnet#class('EventLogPermissionEntryCollection', 'CollectionBase', [ 
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('AddRange(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('OnClear(', ''),
  \ dotnet#method('OnInsert(', ''),
  \ dotnet#method('OnRemove(', ''),
  \ dotnet#method('OnSet(', ''),
  \ dotnet#prop('Item(int32)', 'EventLogPermissionEntry'),
  \ ])

call dotnet#class('EventLogTraceListener', 'TraceListener', [ 
  \ dotnet#method('EventLogTraceListener(', ''),
  \ dotnet#method('get_EventLog(', ''),
  \ dotnet#method('set_EventLog(', ''),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('set_Name(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('Write(', ''),
  \ dotnet#method('WriteLine(', ''),
  \ dotnet#method('TraceEvent(', ''),
  \ dotnet#method('TraceData(', ''),
  \ dotnet#prop('EventLog', 'EventLog'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('EventSourceCreationData', 'Object', [ 
  \ dotnet#method('EventSourceCreationData(', ''),
  \ dotnet#method('get_LogName(', ''),
  \ dotnet#method('set_LogName(', ''),
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('set_MachineName(', ''),
  \ dotnet#method('get_Source(', ''),
  \ dotnet#method('set_Source(', ''),
  \ dotnet#method('get_MessageResourceFile(', ''),
  \ dotnet#method('set_MessageResourceFile(', ''),
  \ dotnet#method('get_ParameterResourceFile(', ''),
  \ dotnet#method('set_ParameterResourceFile(', ''),
  \ dotnet#method('get_CategoryResourceFile(', ''),
  \ dotnet#method('set_CategoryResourceFile(', ''),
  \ dotnet#method('get_CategoryCount(', ''),
  \ dotnet#method('set_CategoryCount(', ''),
  \ dotnet#prop('LogName', 'string'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('Source', 'string'),
  \ dotnet#prop('MessageResourceFile', 'string'),
  \ dotnet#prop('ParameterResourceFile', 'string'),
  \ dotnet#prop('CategoryResourceFile', 'string'),
  \ dotnet#prop('CategoryCount', 'int32'),
  \ ])

call dotnet#class('FileVersionInfo', 'Object', [ 
  \ dotnet#method('get_Comments(', ''),
  \ dotnet#method('get_CompanyName(', ''),
  \ dotnet#method('get_FileBuildPart(', ''),
  \ dotnet#method('get_FileDescription(', ''),
  \ dotnet#method('get_FileMajorPart(', ''),
  \ dotnet#method('get_FileMinorPart(', ''),
  \ dotnet#method('get_FileName(', ''),
  \ dotnet#method('get_FilePrivatePart(', ''),
  \ dotnet#method('get_FileVersion(', ''),
  \ dotnet#method('get_InternalName(', ''),
  \ dotnet#method('get_IsDebug(', ''),
  \ dotnet#method('get_IsPatched(', ''),
  \ dotnet#method('get_IsPrivateBuild(', ''),
  \ dotnet#method('get_IsPreRelease(', ''),
  \ dotnet#method('get_IsSpecialBuild(', ''),
  \ dotnet#method('get_Language(', ''),
  \ dotnet#method('get_LegalCopyright(', ''),
  \ dotnet#method('get_LegalTrademarks(', ''),
  \ dotnet#method('get_OriginalFilename(', ''),
  \ dotnet#method('get_PrivateBuild(', ''),
  \ dotnet#method('get_ProductBuildPart(', ''),
  \ dotnet#method('get_ProductMajorPart(', ''),
  \ dotnet#method('get_ProductMinorPart(', ''),
  \ dotnet#method('get_ProductName(', ''),
  \ dotnet#method('get_ProductPrivatePart(', ''),
  \ dotnet#method('get_ProductVersion(', ''),
  \ dotnet#method('get_SpecialBuild(', ''),
  \ dotnet#method('GetVersionInfo(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#prop('Comments', 'string'),
  \ dotnet#prop('CompanyName', 'string'),
  \ dotnet#prop('FileBuildPart', 'int32'),
  \ dotnet#prop('FileDescription', 'string'),
  \ dotnet#prop('FileMajorPart', 'int32'),
  \ dotnet#prop('FileMinorPart', 'int32'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('FilePrivatePart', 'int32'),
  \ dotnet#prop('FileVersion', 'string'),
  \ dotnet#prop('InternalName', 'string'),
  \ dotnet#prop('IsDebug', 'bool'),
  \ dotnet#prop('IsPatched', 'bool'),
  \ dotnet#prop('IsPrivateBuild', 'bool'),
  \ dotnet#prop('IsPreRelease', 'bool'),
  \ dotnet#prop('IsSpecialBuild', 'bool'),
  \ dotnet#prop('Language', 'string'),
  \ dotnet#prop('LegalCopyright', 'string'),
  \ dotnet#prop('LegalTrademarks', 'string'),
  \ dotnet#prop('OriginalFilename', 'string'),
  \ dotnet#prop('PrivateBuild', 'string'),
  \ dotnet#prop('ProductBuildPart', 'int32'),
  \ dotnet#prop('ProductMajorPart', 'int32'),
  \ dotnet#prop('ProductMinorPart', 'int32'),
  \ dotnet#prop('ProductName', 'string'),
  \ dotnet#prop('ProductPrivatePart', 'int32'),
  \ dotnet#prop('ProductVersion', 'string'),
  \ dotnet#prop('SpecialBuild', 'string'),
  \ ])

call dotnet#class('InstanceData', 'Object', [ 
  \ dotnet#method('InstanceData(', ''),
  \ dotnet#method('get_InstanceName(', ''),
  \ dotnet#method('get_Sample(', ''),
  \ dotnet#method('get_RawValue(', ''),
  \ dotnet#prop('InstanceName', 'string'),
  \ dotnet#prop('Sample', 'CounterSample'),
  \ dotnet#prop('RawValue', 'int64'),
  \ ])

call dotnet#class('InstanceDataCollection', 'DictionaryBase', [ 
  \ dotnet#method('InstanceDataCollection(', ''),
  \ dotnet#method('get_CounterName(', ''),
  \ dotnet#method('get_Keys(', ''),
  \ dotnet#method('get_Values(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#prop('CounterName', 'string'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('Item(string)', 'InstanceData'),
  \ ])

call dotnet#class('InstanceDataCollectionCollection', 'DictionaryBase', [ 
  \ dotnet#method('InstanceDataCollectionCollection(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_Keys(', ''),
  \ dotnet#method('get_Values(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#prop('Item(string)', 'InstanceDataCollection'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('MonitoringDescriptionAttribute', 'DescriptionAttribute', [ 
  \ dotnet#method('MonitoringDescriptionAttribute(', ''),
  \ dotnet#method('get_Description(', ''),
  \ dotnet#prop('Description', 'string'),
  \ ])

call dotnet#class('PerformanceCounter', 'Component', [ 
  \ dotnet#method('PerformanceCounter(', ''),
  \ dotnet#method('get_CategoryName(', ''),
  \ dotnet#method('set_CategoryName(', ''),
  \ dotnet#method('get_CounterHelp(', ''),
  \ dotnet#method('get_CounterName(', ''),
  \ dotnet#method('set_CounterName(', ''),
  \ dotnet#method('get_CounterType(', ''),
  \ dotnet#method('get_InstanceLifetime(', ''),
  \ dotnet#method('set_InstanceLifetime(', ''),
  \ dotnet#method('get_InstanceName(', ''),
  \ dotnet#method('set_InstanceName(', ''),
  \ dotnet#method('get_ReadOnly(', ''),
  \ dotnet#method('set_ReadOnly(', ''),
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('set_MachineName(', ''),
  \ dotnet#method('get_RawValue(', ''),
  \ dotnet#method('set_RawValue(', ''),
  \ dotnet#method('BeginInit(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('CloseSharedResources(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('Decrement(', ''),
  \ dotnet#method('EndInit(', ''),
  \ dotnet#method('IncrementBy(', ''),
  \ dotnet#method('Increment(', ''),
  \ dotnet#method('NextSample(', ''),
  \ dotnet#method('NextValue(', ''),
  \ dotnet#method('RemoveInstance(', ''),
  \ dotnet#prop('CategoryName', 'string'),
  \ dotnet#prop('CounterHelp', 'string'),
  \ dotnet#prop('CounterName', 'string'),
  \ dotnet#prop('CounterType', 'PerformanceCounterType'),
  \ dotnet#prop('InstanceLifetime', 'PerformanceCounterInstanceLifetime'),
  \ dotnet#prop('InstanceName', 'string'),
  \ dotnet#prop('ReadOnly', 'bool'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('RawValue', 'int64'),
  \ ])

call dotnet#class('PerformanceCounterCategory', 'Object', [ 
  \ dotnet#method('PerformanceCounterCategory(', ''),
  \ dotnet#method('get_CategoryName(', ''),
  \ dotnet#method('set_CategoryName(', ''),
  \ dotnet#method('get_CategoryHelp(', ''),
  \ dotnet#method('get_CategoryType(', ''),
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('set_MachineName(', ''),
  \ dotnet#method('CounterExists(', ''),
  \ dotnet#method('Create(', ''),
  \ dotnet#method('Delete(', ''),
  \ dotnet#method('Exists(', ''),
  \ dotnet#method('GetCounters(', ''),
  \ dotnet#method('GetCategories(', ''),
  \ dotnet#method('GetInstanceNames(', ''),
  \ dotnet#method('InstanceExists(', ''),
  \ dotnet#method('ReadCategory(', ''),
  \ dotnet#prop('CategoryName', 'string'),
  \ dotnet#prop('CategoryHelp', 'string'),
  \ dotnet#prop('CategoryType', 'PerformanceCounterCategoryType'),
  \ dotnet#prop('MachineName', 'string'),
  \ ])

call dotnet#class('PerformanceCounterManager', 'Object', [ 
  \ dotnet#method('PerformanceCounterManager(', ''),
  \ dotnet#method('CollectData(', ''),
  \ dotnet#method('CloseData(', ''),
  \ ])

call dotnet#class('PerformanceCounterPermission', 'ResourcePermissionBase', [ 
  \ dotnet#method('PerformanceCounterPermission(', ''),
  \ dotnet#method('get_PermissionEntries(', ''),
  \ dotnet#prop('PermissionEntries', 'PerformanceCounterPermissionEntryCollection'),
  \ ])

call dotnet#class('PerformanceCounterPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('PerformanceCounterPermissionAttribute(', ''),
  \ dotnet#method('get_CategoryName(', ''),
  \ dotnet#method('set_CategoryName(', ''),
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('set_MachineName(', ''),
  \ dotnet#method('get_PermissionAccess(', ''),
  \ dotnet#method('set_PermissionAccess(', ''),
  \ dotnet#method('CreatePermission(', ''),
  \ dotnet#prop('CategoryName', 'string'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('PermissionAccess', 'PerformanceCounterPermissionAccess'),
  \ ])

call dotnet#class('PerformanceCounterPermissionEntry', 'Object', [ 
  \ dotnet#method('PerformanceCounterPermissionEntry(', ''),
  \ dotnet#method('get_CategoryName(', ''),
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('get_PermissionAccess(', ''),
  \ dotnet#prop('CategoryName', 'string'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('PermissionAccess', 'PerformanceCounterPermissionAccess'),
  \ ])

call dotnet#class('PerformanceCounterPermissionEntryCollection', 'CollectionBase', [ 
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('AddRange(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('OnClear(', ''),
  \ dotnet#method('OnInsert(', ''),
  \ dotnet#method('OnRemove(', ''),
  \ dotnet#method('OnSet(', ''),
  \ dotnet#prop('Item(int32)', 'PerformanceCounterPermissionEntry'),
  \ ])

call dotnet#class('Process', 'Component', [ 
  \ dotnet#method('add_OutputDataReceived(', ''),
  \ dotnet#method('remove_OutputDataReceived(', ''),
  \ dotnet#method('add_ErrorDataReceived(', ''),
  \ dotnet#method('remove_ErrorDataReceived(', ''),
  \ dotnet#method('Process(', ''),
  \ dotnet#method('get_BasePriority(', ''),
  \ dotnet#method('get_ExitCode(', ''),
  \ dotnet#method('get_HasExited(', ''),
  \ dotnet#method('get_ExitTime(', ''),
  \ dotnet#method('get_Handle(', ''),
  \ dotnet#method('get_HandleCount(', ''),
  \ dotnet#method('get_Id(', ''),
  \ dotnet#method('get_MachineName(', ''),
  \ dotnet#method('get_MainWindowHandle(', ''),
  \ dotnet#method('get_MainWindowTitle(', ''),
  \ dotnet#method('get_MainModule(', ''),
  \ dotnet#method('get_MaxWorkingSet(', ''),
  \ dotnet#method('set_MaxWorkingSet(', ''),
  \ dotnet#method('get_MinWorkingSet(', ''),
  \ dotnet#method('set_MinWorkingSet(', ''),
  \ dotnet#method('get_Modules(', ''),
  \ dotnet#method('get_NonpagedSystemMemorySize(', ''),
  \ dotnet#method('get_NonpagedSystemMemorySize64(', ''),
  \ dotnet#method('get_PagedMemorySize(', ''),
  \ dotnet#method('get_PagedMemorySize64(', ''),
  \ dotnet#method('get_PagedSystemMemorySize(', ''),
  \ dotnet#method('get_PagedSystemMemorySize64(', ''),
  \ dotnet#method('get_PeakPagedMemorySize(', ''),
  \ dotnet#method('get_PeakPagedMemorySize64(', ''),
  \ dotnet#method('get_PeakWorkingSet(', ''),
  \ dotnet#method('get_PeakWorkingSet64(', ''),
  \ dotnet#method('get_PeakVirtualMemorySize(', ''),
  \ dotnet#method('get_PeakVirtualMemorySize64(', ''),
  \ dotnet#method('get_PriorityBoostEnabled(', ''),
  \ dotnet#method('set_PriorityBoostEnabled(', ''),
  \ dotnet#method('get_PriorityClass(', ''),
  \ dotnet#method('set_PriorityClass(', ''),
  \ dotnet#method('get_PrivateMemorySize(', ''),
  \ dotnet#method('get_PrivateMemorySize64(', ''),
  \ dotnet#method('get_PrivilegedProcessorTime(', ''),
  \ dotnet#method('get_ProcessName(', ''),
  \ dotnet#method('get_ProcessorAffinity(', ''),
  \ dotnet#method('set_ProcessorAffinity(', ''),
  \ dotnet#method('get_Responding(', ''),
  \ dotnet#method('get_SessionId(', ''),
  \ dotnet#method('get_StartInfo(', ''),
  \ dotnet#method('set_StartInfo(', ''),
  \ dotnet#method('get_StartTime(', ''),
  \ dotnet#method('get_SynchronizingObject(', ''),
  \ dotnet#method('set_SynchronizingObject(', ''),
  \ dotnet#method('get_Threads(', ''),
  \ dotnet#method('get_TotalProcessorTime(', ''),
  \ dotnet#method('get_UserProcessorTime(', ''),
  \ dotnet#method('get_VirtualMemorySize(', ''),
  \ dotnet#method('get_VirtualMemorySize64(', ''),
  \ dotnet#method('get_EnableRaisingEvents(', ''),
  \ dotnet#method('set_EnableRaisingEvents(', ''),
  \ dotnet#method('get_StandardInput(', ''),
  \ dotnet#method('get_StandardOutput(', ''),
  \ dotnet#method('get_StandardError(', ''),
  \ dotnet#method('get_WorkingSet(', ''),
  \ dotnet#method('get_WorkingSet64(', ''),
  \ dotnet#method('add_Exited(', ''),
  \ dotnet#method('remove_Exited(', ''),
  \ dotnet#method('CloseMainWindow(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('EnterDebugMode(', ''),
  \ dotnet#method('LeaveDebugMode(', ''),
  \ dotnet#method('GetProcessById(', ''),
  \ dotnet#method('GetProcessesByName(', ''),
  \ dotnet#method('GetProcesses(', ''),
  \ dotnet#method('GetCurrentProcess(', ''),
  \ dotnet#method('OnExited(', ''),
  \ dotnet#method('Refresh(', ''),
  \ dotnet#method('Start(', ''),
  \ dotnet#method('Kill(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('WaitForExit(', ''),
  \ dotnet#method('WaitForInputIdle(', ''),
  \ dotnet#method('BeginOutputReadLine(', ''),
  \ dotnet#method('BeginErrorReadLine(', ''),
  \ dotnet#method('CancelOutputRead(', ''),
  \ dotnet#method('CancelErrorRead(', ''),
  \ dotnet#event('OutputDataReceived', 'DataReceivedEventHandler'),
  \ dotnet#event('ErrorDataReceived', 'DataReceivedEventHandler'),
  \ dotnet#event('Exited', 'EventHandler'),
  \ dotnet#prop('BasePriority', 'int32'),
  \ dotnet#prop('ExitCode', 'int32'),
  \ dotnet#prop('HasExited', 'bool'),
  \ dotnet#prop('ExitTime', 'DateTime'),
  \ dotnet#prop('Handle', 'int'),
  \ dotnet#prop('HandleCount', 'int32'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('MainWindowHandle', 'int'),
  \ dotnet#prop('MainWindowTitle', 'string'),
  \ dotnet#prop('MainModule', 'ProcessModule'),
  \ dotnet#prop('MaxWorkingSet', 'int'),
  \ dotnet#prop('MinWorkingSet', 'int'),
  \ dotnet#prop('Modules', 'ProcessModuleCollection'),
  \ dotnet#prop('NonpagedSystemMemorySize', 'int32'),
  \ dotnet#prop('NonpagedSystemMemorySize64', 'int64'),
  \ dotnet#prop('PagedMemorySize', 'int32'),
  \ dotnet#prop('PagedMemorySize64', 'int64'),
  \ dotnet#prop('PagedSystemMemorySize', 'int32'),
  \ dotnet#prop('PagedSystemMemorySize64', 'int64'),
  \ dotnet#prop('PeakPagedMemorySize', 'int32'),
  \ dotnet#prop('PeakPagedMemorySize64', 'int64'),
  \ dotnet#prop('PeakWorkingSet', 'int32'),
  \ dotnet#prop('PeakWorkingSet64', 'int64'),
  \ dotnet#prop('PeakVirtualMemorySize', 'int32'),
  \ dotnet#prop('PeakVirtualMemorySize64', 'int64'),
  \ dotnet#prop('PriorityBoostEnabled', 'bool'),
  \ dotnet#prop('PriorityClass', 'ProcessPriorityClass'),
  \ dotnet#prop('PrivateMemorySize', 'int32'),
  \ dotnet#prop('PrivateMemorySize64', 'int64'),
  \ dotnet#prop('PrivilegedProcessorTime', 'TimeSpan'),
  \ dotnet#prop('ProcessName', 'string'),
  \ dotnet#prop('ProcessorAffinity', 'int'),
  \ dotnet#prop('Responding', 'bool'),
  \ dotnet#prop('SessionId', 'int32'),
  \ dotnet#prop('StartInfo', 'ProcessStartInfo'),
  \ dotnet#prop('StartTime', 'DateTime'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ dotnet#prop('Threads', 'ProcessThreadCollection'),
  \ dotnet#prop('TotalProcessorTime', 'TimeSpan'),
  \ dotnet#prop('UserProcessorTime', 'TimeSpan'),
  \ dotnet#prop('VirtualMemorySize', 'int32'),
  \ dotnet#prop('VirtualMemorySize64', 'int64'),
  \ dotnet#prop('EnableRaisingEvents', 'bool'),
  \ dotnet#prop('StandardInput', 'StreamWriter'),
  \ dotnet#prop('StandardOutput', 'StreamReader'),
  \ dotnet#prop('StandardError', 'StreamReader'),
  \ dotnet#prop('WorkingSet', 'int32'),
  \ dotnet#prop('WorkingSet64', 'int64'),
  \ ])

call dotnet#class('ProcessModule', 'Component', [ 
  \ dotnet#method('get_ModuleName(', ''),
  \ dotnet#method('get_FileName(', ''),
  \ dotnet#method('get_BaseAddress(', ''),
  \ dotnet#method('get_ModuleMemorySize(', ''),
  \ dotnet#method('get_EntryPointAddress(', ''),
  \ dotnet#method('get_FileVersionInfo(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#prop('ModuleName', 'string'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('BaseAddress', 'int'),
  \ dotnet#prop('ModuleMemorySize', 'int32'),
  \ dotnet#prop('EntryPointAddress', 'int'),
  \ dotnet#prop('FileVersionInfo', 'FileVersionInfo'),
  \ ])

call dotnet#class('ProcessModuleCollection', 'ReadOnlyCollectionBase', [ 
  \ dotnet#method('ProcessModuleCollection(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#prop('Item(int32)', 'ProcessModule'),
  \ ])

call dotnet#class('ProcessStartInfo', 'Object', [ 
  \ dotnet#method('ProcessStartInfo(', ''),
  \ dotnet#method('get_Verb(', ''),
  \ dotnet#method('set_Verb(', ''),
  \ dotnet#method('get_Arguments(', ''),
  \ dotnet#method('set_Arguments(', ''),
  \ dotnet#method('get_CreateNoWindow(', ''),
  \ dotnet#method('set_CreateNoWindow(', ''),
  \ dotnet#method('get_EnvironmentVariables(', ''),
  \ dotnet#method('get_RedirectStandardInput(', ''),
  \ dotnet#method('set_RedirectStandardInput(', ''),
  \ dotnet#method('get_RedirectStandardOutput(', ''),
  \ dotnet#method('set_RedirectStandardOutput(', ''),
  \ dotnet#method('get_RedirectStandardError(', ''),
  \ dotnet#method('set_RedirectStandardError(', ''),
  \ dotnet#method('get_StandardErrorEncoding(', ''),
  \ dotnet#method('set_StandardErrorEncoding(', ''),
  \ dotnet#method('get_StandardOutputEncoding(', ''),
  \ dotnet#method('set_StandardOutputEncoding(', ''),
  \ dotnet#method('get_UseShellExecute(', ''),
  \ dotnet#method('set_UseShellExecute(', ''),
  \ dotnet#method('get_Verbs(', ''),
  \ dotnet#method('get_UserName(', ''),
  \ dotnet#method('set_UserName(', ''),
  \ dotnet#method('get_Password(', ''),
  \ dotnet#method('set_Password(', ''),
  \ dotnet#method('get_Domain(', ''),
  \ dotnet#method('set_Domain(', ''),
  \ dotnet#method('get_LoadUserProfile(', ''),
  \ dotnet#method('set_LoadUserProfile(', ''),
  \ dotnet#method('get_FileName(', ''),
  \ dotnet#method('set_FileName(', ''),
  \ dotnet#method('get_WorkingDirProcessStartInfoy(', ''),
  \ dotnet#method('set_WorkingDirProcessStartInfoy(', ''),
  \ dotnet#method('get_ErrorDialog(', ''),
  \ dotnet#method('set_ErrorDialog(', ''),
  \ dotnet#method('get_ErrorDialogParentHandle(', ''),
  \ dotnet#method('set_ErrorDialogParentHandle(', ''),
  \ dotnet#method('get_WindowStyle(', ''),
  \ dotnet#method('set_WindowStyle(', ''),
  \ dotnet#prop('Verb', 'string'),
  \ dotnet#prop('Arguments', 'string'),
  \ dotnet#prop('CreateNoWindow', 'bool'),
  \ dotnet#prop('EnvironmentVariables', 'StringDictionary'),
  \ dotnet#prop('RedirectStandardInput', 'bool'),
  \ dotnet#prop('RedirectStandardOutput', 'bool'),
  \ dotnet#prop('RedirectStandardError', 'bool'),
  \ dotnet#prop('StandardErrorEncoding', 'Encoding'),
  \ dotnet#prop('StandardOutputEncoding', 'Encoding'),
  \ dotnet#prop('UseShellExecute', 'bool'),
  \ dotnet#prop('Verbs', 'string[]'),
  \ dotnet#prop('UserName', 'string'),
  \ dotnet#prop('Password', 'SecureString'),
  \ dotnet#prop('Domain', 'string'),
  \ dotnet#prop('LoadUserProfile', 'bool'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('WorkingDirProcessStartInfoy', 'string'),
  \ dotnet#prop('ErrorDialog', 'bool'),
  \ dotnet#prop('ErrorDialogParentHandle', 'int'),
  \ dotnet#prop('WindowStyle', 'ProcessWindowStyle'),
  \ ])

call dotnet#class('ProcessThread', 'Component', [ 
  \ dotnet#method('get_BasePriority(', ''),
  \ dotnet#method('get_CurrentPriority(', ''),
  \ dotnet#method('get_Id(', ''),
  \ dotnet#method('set_IdealProcessor(', ''),
  \ dotnet#method('get_PriorityBoostEnabled(', ''),
  \ dotnet#method('set_PriorityBoostEnabled(', ''),
  \ dotnet#method('get_PriorityLevel(', ''),
  \ dotnet#method('set_PriorityLevel(', ''),
  \ dotnet#method('get_PrivilegedProcessorTime(', ''),
  \ dotnet#method('get_StartAddress(', ''),
  \ dotnet#method('get_StartTime(', ''),
  \ dotnet#method('get_ThreadState(', ''),
  \ dotnet#method('get_TotalProcessorTime(', ''),
  \ dotnet#method('get_UserProcessorTime(', ''),
  \ dotnet#method('get_WaitReason(', ''),
  \ dotnet#method('ResetIdealProcessor(', ''),
  \ dotnet#method('set_ProcessorAffinity(', ''),
  \ dotnet#prop('BasePriority', 'int32'),
  \ dotnet#prop('CurrentPriority', 'int32'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('IdealProcessor', 'int32'),
  \ dotnet#prop('PriorityBoostEnabled', 'bool'),
  \ dotnet#prop('PriorityLevel', 'ThreadPriorityLevel'),
  \ dotnet#prop('PrivilegedProcessorTime', 'TimeSpan'),
  \ dotnet#prop('StartAddress', 'int'),
  \ dotnet#prop('StartTime', 'DateTime'),
  \ dotnet#prop('ThreadState', 'ThreadState'),
  \ dotnet#prop('TotalProcessorTime', 'TimeSpan'),
  \ dotnet#prop('UserProcessorTime', 'TimeSpan'),
  \ dotnet#prop('WaitReason', 'ThreadWaitReason'),
  \ dotnet#prop('ProcessorAffinity', 'int'),
  \ ])

call dotnet#class('ProcessThreadCollection', 'ReadOnlyCollectionBase', [ 
  \ dotnet#method('ProcessThreadCollection(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#prop('Item(int32)', 'ProcessThread'),
  \ ])

call dotnet#class('Stopwatch', 'Object', [ 
  \ dotnet#method('Stopwatch(', ''),
  \ dotnet#method('Start(', ''),
  \ dotnet#method('StartNew(', ''),
  \ dotnet#method('Stop(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('Restart(', ''),
  \ dotnet#method('get_IsRunning(', ''),
  \ dotnet#method('get_Elapsed(', ''),
  \ dotnet#method('get_ElapsedMilliseconds(', ''),
  \ dotnet#method('get_ElapsedTicks(', ''),
  \ dotnet#method('GetTimestamp(', ''),
  \ dotnet#prop('IsRunning', 'bool'),
  \ dotnet#prop('Elapsed', 'TimeSpan'),
  \ dotnet#prop('ElapsedMilliseconds', 'int64'),
  \ dotnet#prop('ElapsedTicks', 'int64'),
  \ ])

