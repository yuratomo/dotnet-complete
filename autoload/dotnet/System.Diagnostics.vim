call dotnet#namespace('System.Diagnostics')

call dotnet#class('ConditionalAttribute', 'Attribute', [ 
  \ dotnet#method('ConditionalAttribute(', 'string conditionString)', 'void'),
  \ dotnet#method('get_ConditionString(', ')', 'string'),
  \ dotnet#prop('ConditionString', 'string'),
  \ ])

call dotnet#class('Debugger', 'Object', [ 
  \ dotnet#method('Debugger(', ')', 'void'),
  \ dotnet#method('Break(', ')', 'static void'),
  \ dotnet#method('Launch(', ')', 'static bool'),
  \ dotnet#method('NotifyOfCrossThreadDependency(', ')', 'static void'),
  \ dotnet#method('get_IsAttached(', ')', 'static bool'),
  \ dotnet#method('Log(', 'int32 level, string category, string message) internalcall', 'static void'),
  \ dotnet#method('IsLogging(', ') internalcall', 'static bool'),
  \ dotnet#method('Debugger(', ')', 'static void .'),
  \ dotnet#prop('IsAttached', 'bool'),
  \ ])

call dotnet#class('DebuggerStepThroughAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerStepThroughAttribute(', ')', 'void'),
  \ ])

call dotnet#class('DebuggerStepperBoundaryAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerStepperBoundaryAttribute(', ')', 'void'),
  \ ])

call dotnet#class('DebuggerHiddenAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerHiddenAttribute(', ')', 'void'),
  \ ])

call dotnet#class('DebuggerNonUserCodeAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerNonUserCodeAttribute(', ')', 'void'),
  \ ])

call dotnet#class('DebuggableAttribute', 'Attribute', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('DebuggableAttribute(', 'bool isJITTrackingEnabled, bool isJITOptimizerDisabled)', 'void'),
  \ dotnet#method('DebuggableAttribute(', 'DebuggableAttribute/DebuggingModes modes)', 'void'),
  \ dotnet#method('get_IsJITTrackingEnabled(', ')', 'bool'),
  \ dotnet#method('get_IsJITOptimizerDisabled(', ')', 'bool'),
  \ dotnet#method('get_DebuggingFlags(', ')', 'DebuggableAttribute/DebuggingModes'),
  \ dotnet#prop('IsJITTrackingEnabled', 'bool'),
  \ dotnet#prop('IsJITOptimizerDisabled', 'bool'),
  \ dotnet#prop('DebuggingFlags', 'DebuggableAttribute/DebuggingModes'),
  \ ])

call dotnet#class('DebuggerBrowsableAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerBrowsableAttribute(', 'DebuggerBrowsableState state)', 'void'),
  \ dotnet#method('get_State(', ')', 'DebuggerBrowsableState'),
  \ dotnet#prop('State', 'DebuggerBrowsableState'),
  \ ])

call dotnet#class('DebuggerTypeProxyAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerTypeProxyAttribute(', 'class Type type)', 'void'),
  \ dotnet#method('DebuggerTypeProxyAttribute(', 'string typeName)', 'void'),
  \ dotnet#method('get_ProxyTypeName(', ')', 'string'),
  \ dotnet#method('set_Target(', 'class Type value)', 'void'),
  \ dotnet#method('get_Target(', ')', 'Type'),
  \ dotnet#method('get_TargetTypeName(', ')', 'string'),
  \ dotnet#method('set_TargetTypeName(', 'string value)', 'void'),
  \ dotnet#prop('ProxyTypeName', 'string'),
  \ dotnet#prop('Target', 'Type'),
  \ dotnet#prop('TargetTypeName', 'string'),
  \ ])

call dotnet#class('DebuggerDisplayAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerDisplayAttribute(', 'string value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'string'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Type(', ')', 'string'),
  \ dotnet#method('set_Type(', 'string value)', 'void'),
  \ dotnet#method('set_Target(', 'class Type value)', 'void'),
  \ dotnet#method('get_Target(', ')', 'Type'),
  \ dotnet#method('get_TargetTypeName(', ')', 'string'),
  \ dotnet#method('set_TargetTypeName(', 'string value)', 'void'),
  \ dotnet#prop('Value', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Type', 'string'),
  \ dotnet#prop('Target', 'Type'),
  \ dotnet#prop('TargetTypeName', 'string'),
  \ ])

call dotnet#class('DebuggerVisualizerAttribute', 'Attribute', [ 
  \ dotnet#method('DebuggerVisualizerAttribute(', 'string visualizerTypeName)', 'void'),
  \ dotnet#method('DebuggerVisualizerAttribute(', 'string visualizerTypeName, string visualizerObjectSourceTypeName)', 'void'),
  \ dotnet#method('DebuggerVisualizerAttribute(', 'string visualizerTypeName, Type visualizerObjectSource)', 'void'),
  \ dotnet#method('DebuggerVisualizerAttribute(', 'class Type visualizer)', 'void'),
  \ dotnet#method('DebuggerVisualizerAttribute(', 'class Type visualizer, Type visualizerObjectSource)', 'void'),
  \ dotnet#method('DebuggerVisualizerAttribute(', 'class Type visualizer, string visualizerObjectSourceTypeName)', 'void'),
  \ dotnet#method('get_VisualizerObjectSourceTypeName(', ')', 'string'),
  \ dotnet#method('get_VisualizerTypeName(', ')', 'string'),
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#method('set_Description(', 'string value)', 'void'),
  \ dotnet#method('set_Target(', 'class Type value)', 'void'),
  \ dotnet#method('get_Target(', ')', 'Type'),
  \ dotnet#method('set_TargetTypeName(', 'string value)', 'void'),
  \ dotnet#method('get_TargetTypeName(', ')', 'string'),
  \ dotnet#prop('VisualizerObjectSourceTypeName', 'string'),
  \ dotnet#prop('VisualizerTypeName', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ dotnet#prop('Target', 'Type'),
  \ dotnet#prop('TargetTypeName', 'string'),
  \ ])

call dotnet#class('StackTrace', 'Object', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('StackTrace(', ')', 'void'),
  \ dotnet#method('StackTrace(', 'bool fNeedFileInfo)', 'void'),
  \ dotnet#method('StackTrace(', 'int32 skipFrames)', 'void'),
  \ dotnet#method('StackTrace(', 'int32 skipFrames, bool fNeedFileInfo)', 'void'),
  \ dotnet#method('StackTrace(', 'class Exception e)', 'void'),
  \ dotnet#method('StackTrace(', 'class Exception e, bool fNeedFileInfo)', 'void'),
  \ dotnet#method('StackTrace(', 'class Exception e, int32 skipFrames)', 'void'),
  \ dotnet#method('StackTrace(', 'class Exception e, int32 skipFrames, bool fNeedFileInfo)', 'void'),
  \ dotnet#method('StackTrace(', 'class StackFrame frame)', 'void'),
  \ dotnet#method('StackTrace(', 'class Thread targetThread, bool needFileInfo)', 'void'),
  \ dotnet#method('GetStackFramesInternal(', 'class StackFrameHelper sfh, int32 iSkip, Exception e) internalcall', 'static void'),
  \ dotnet#method('CalculateFramesToSkip(', 'class StackFrameHelper StackF, int32 iNumFrames)', 'static int32'),
  \ dotnet#method('get_FrameCount(', ')', 'int32'),
  \ dotnet#method('GetFrame(', 'int32 index)', ''),
  \ dotnet#method('GetFrames(', ')', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'StackTrace/TraceFormat traceFormat)', 'string'),
  \ dotnet#prop('FrameCount', 'int32'),
  \ ])

call dotnet#class('StackFrame', 'Object', [ 
  \ dotnet#method('InitMembers(', ')', 'void'),
  \ dotnet#method('StackFrame(', ')', 'void'),
  \ dotnet#method('StackFrame(', 'bool fNeedFileInfo)', 'void'),
  \ dotnet#method('StackFrame(', 'int32 skipFrames)', 'void'),
  \ dotnet#method('StackFrame(', 'int32 skipFrames, bool fNeedFileInfo)', 'void'),
  \ dotnet#method('StackFrame(', 'bool DummyFlag1, bool DummyFlag2)', 'void'),
  \ dotnet#method('StackFrame(', 'string fileName, int32 lineNumber)', 'void'),
  \ dotnet#method('StackFrame(', 'string fileName, int32 lineNumber, int32 colNumber)', 'void'),
  \ dotnet#method('SetMethodBase(', 'class MethodBase mb)', 'strict void'),
  \ dotnet#method('SetOffset(', 'int32 iOffset)', 'strict void'),
  \ dotnet#method('SetILOffset(', 'int32 iOffset)', 'strict void'),
  \ dotnet#method('SetFileName(', 'string strFName)', 'strict void'),
  \ dotnet#method('SetLineNumber(', 'int32 iLine)', 'strict void'),
  \ dotnet#method('SetColumnNumber(', 'int32 iCol)', 'strict void'),
  \ dotnet#method('GetMethod(', ')', ''),
  \ dotnet#method('GetNativeOffset(', ')', 'int32'),
  \ dotnet#method('GetILOffset(', ')', 'int32'),
  \ dotnet#method('GetFileName(', ')', 'string'),
  \ dotnet#method('GetFileLineNumber(', ')', 'int32'),
  \ dotnet#method('GetFileColumnNumber(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ ])

call dotnet#class('PresentationTraceSources', 'Object', [ 
  \ dotnet#method('GetTraceLevel(', 'object element)', 'static PresentationTraceLevel'),
  \ dotnet#method('SetTraceLevel(', 'object element, PresentationTraceLevel traceLevel)', 'static void'),
  \ dotnet#method('Refresh(', ')', 'static void'),
  \ dotnet#method('add_TraceRefresh(', 'class TraceRefreshEventHandler value)', 'static void'),
  \ dotnet#method('remove_TraceRefresh(', 'class TraceRefreshEventHandler value)', 'static void'),
  \ dotnet#method('get_DependencyPropertySource(', ')', 'static'),
  \ dotnet#method('get_FreezableSource(', ')', 'static'),
  \ dotnet#method('get_NameScopeSource(', ')', 'static'),
  \ dotnet#method('get_RoutedEventSource(', ')', 'static'),
  \ dotnet#method('get_AnimationSource(', ')', 'static'),
  \ dotnet#method('get_DataBindingSource(', ')', 'static'),
  \ dotnet#method('get_DocumentsSource(', ')', 'static'),
  \ dotnet#method('get_ResourceDictionarySource(', ')', 'static'),
  \ dotnet#method('get_MarkupSource(', ')', 'static'),
  \ dotnet#method('get_HwndHostSource(', ')', 'static'),
  \ dotnet#method('get_ShellSource(', ')', 'static'),
  \ dotnet#method('PresentationTraceSources(', ')', 'static void .'),
  \ dotnet#event('TraceRefresh', 'TraceRefreshEventHandler'),
  \ dotnet#prop('DependencyPropertySource', 'TraceSource'),
  \ dotnet#prop('FreezableSource', 'TraceSource'),
  \ dotnet#prop('NameScopeSource', 'TraceSource'),
  \ dotnet#prop('RoutedEventSource', 'TraceSource'),
  \ dotnet#prop('AnimationSource', 'TraceSource'),
  \ dotnet#prop('DataBindingSource', 'TraceSource'),
  \ dotnet#prop('DocumentsSource', 'TraceSource'),
  \ dotnet#prop('ResourceDictionarySource', 'TraceSource'),
  \ dotnet#prop('MarkupSource', 'TraceSource'),
  \ dotnet#prop('HwndHostSource', 'TraceSource'),
  \ dotnet#prop('ShellSource', 'TraceSource'),
  \ ])

call dotnet#class('EventSchemaTraceListener', 'TextWriterTraceListener', [ 
  \ dotnet#method('EventSchemaTraceListener(', 'string fileName)', 'void'),
  \ dotnet#method('EventSchemaTraceListener(', 'string fileName, string name)', 'void'),
  \ dotnet#method('EventSchemaTraceListener(', 'string fileName, string name, int32 bufferSize)', 'void'),
  \ dotnet#method('EventSchemaTraceListener(', 'string fileName, string name, int32 bufferSize, TraceLogRetentionOption logRetentionOption)', 'void'),
  \ dotnet#method('EventSchemaTraceListener(', 'string fileName, string name, int32 bufferSize, TraceLogRetentionOption logRetentionOption, int64 maximumFileSize)', 'void'),
  \ dotnet#method('EventSchemaTraceListener(', 'string fileName, string name, int32 bufferSize, TraceLogRetentionOption logRetentionOption, int64 maximumFileSize, int32 maximumNumberOfFiles)', 'void'),
  \ dotnet#method('get_Writer(', ')', 'TextWriter'),
  \ dotnet#method('set_Writer(', 'class TextWriter value)', 'void'),
  \ dotnet#method('get_IsThreadSafe(', ')', 'bool'),
  \ dotnet#method('get_BufferSize(', ')', 'int32'),
  \ dotnet#method('get_TraceLogRetentionOption(', ')', 'TraceLogRetentionOption'),
  \ dotnet#method('get_MaximumFileSize(', ')', 'int64'),
  \ dotnet#method('get_MaximumNumberOfFiles(', ')', 'int32'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Write(', 'string message)', 'void'),
  \ dotnet#method('WriteLine(', 'string message)', 'void'),
  \ dotnet#method('Fail(', 'string message, string detailMessage)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, string format, object[] args)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, string message)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, object data)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, object[] data)', 'void'),
  \ dotnet#method('TraceTransfer(', 'class TraceEventCache eventCache, string source, int32 id, string message, Guid relatedActivityId)', 'void'),
  \ dotnet#method('GetSupportedAttributes(', ')', 'string[]'),
  \ dotnet#method('EventSchemaTraceListener(', ')', 'static void .'),
  \ dotnet#prop('Writer', 'TextWriter'),
  \ dotnet#prop('IsThreadSafe', 'bool'),
  \ dotnet#prop('BufferSize', 'int32'),
  \ dotnet#prop('TraceLogRetentionOption', 'TraceLogRetentionOption'),
  \ dotnet#prop('MaximumFileSize', 'int64'),
  \ dotnet#prop('MaximumNumberOfFiles', 'int32'),
  \ ])

call dotnet#class('UnescapedXmlDiagnosticData', 'Object', [ 
  \ dotnet#method('UnescapedXmlDiagnosticData(', 'string xmlPayload)', 'void'),
  \ dotnet#method('get_UnescapedXml(', ')', 'string'),
  \ dotnet#method('set_UnescapedXml(', 'string value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('UnescapedXml', 'string'),
  \ ])

call dotnet#class('Switch', 'Object', [ 
  \ dotnet#method('Switch(', 'string displayName, string description)', 'void'),
  \ dotnet#method('Switch(', 'string displayName, string description, string defaultSwitchValue)', 'void'),
  \ dotnet#method('get_Attributes(', ')', 'StringDictionary'),
  \ dotnet#method('get_DisplayName(', ')', 'string'),
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#method('get_SwitchSetting(', ')', 'int32'),
  \ dotnet#method('set_SwitchSetting(', 'int32 value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'string'),
  \ dotnet#method('set_Value(', 'string value)', 'void'),
  \ dotnet#method('GetSupportedAttributes(', ')', 'famorassem string[]'),
  \ dotnet#method('OnSwitchSettingChanged(', ')', 'void'),
  \ dotnet#method('OnValueChanged(', ')', 'void'),
  \ dotnet#method('Switch(', ')', 'static void .'),
  \ dotnet#prop('Attributes', 'StringDictionary'),
  \ dotnet#prop('DisplayName', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ dotnet#prop('SwitchSetting', 'int32'),
  \ dotnet#prop('Value', 'string'),
  \ ])

call dotnet#class('BooleanSwitch', 'Switch', [ 
  \ dotnet#method('BooleanSwitch(', 'string displayName, string description)', 'void'),
  \ dotnet#method('BooleanSwitch(', 'string displayName, string description, string defaultSwitchValue)', 'void'),
  \ dotnet#method('get_Enabled(', ')', 'bool'),
  \ dotnet#method('set_Enabled(', 'bool value)', 'void'),
  \ dotnet#method('OnValueChanged(', ')', 'void'),
  \ dotnet#prop('Enabled', 'bool'),
  \ ])

call dotnet#class('TraceListener', 'MarshalByRefObject', [ 
  \ dotnet#method('TraceListener(', ')', 'void'),
  \ dotnet#method('TraceListener(', 'string name)', 'void'),
  \ dotnet#method('get_Attributes(', ')', 'StringDictionary'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_IsThreadSafe(', ')', 'bool'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('get_IndentLevel(', ')', 'int32'),
  \ dotnet#method('set_IndentLevel(', 'int32 value)', 'void'),
  \ dotnet#method('get_IndentSize(', ')', 'int32'),
  \ dotnet#method('set_IndentSize(', 'int32 value)', 'void'),
  \ dotnet#method('get_Filter(', ')', 'TraceFilter'),
  \ dotnet#method('set_Filter(', 'class TraceFilter value)', 'void'),
  \ dotnet#method('get_NeedIndent(', ')', 'bool'),
  \ dotnet#method('set_NeedIndent(', 'bool value)', 'void'),
  \ dotnet#method('get_TraceOutputOptions(', ')', 'TraceOptions'),
  \ dotnet#method('set_TraceOutputOptions(', 'TraceOptions value)', 'void'),
  \ dotnet#method('Fail(', 'string message)', 'void'),
  \ dotnet#method('Fail(', 'string message, string detailMessage)', 'void'),
  \ dotnet#method('GetSupportedAttributes(', ')', 'famorassem string[]'),
  \ dotnet#method('Write(', 'string message)', 'abstract void'),
  \ dotnet#method('Write(', 'object o)', 'void'),
  \ dotnet#method('Write(', 'string message, string category)', 'void'),
  \ dotnet#method('Write(', 'object o, string category)', 'void'),
  \ dotnet#method('WriteIndent(', ')', 'void'),
  \ dotnet#method('WriteLine(', 'string message)', 'abstract void'),
  \ dotnet#method('WriteLine(', 'object o)', 'void'),
  \ dotnet#method('WriteLine(', 'string message, string category)', 'void'),
  \ dotnet#method('WriteLine(', 'object o, string category)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, object data)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, object[] data)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, string message)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, string format, object[] args)', 'void'),
  \ dotnet#method('TraceTransfer(', 'class TraceEventCache eventCache, string source, int32 id, string message, Guid relatedActivityId)', 'void'),
  \ dotnet#prop('Attributes', 'StringDictionary'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('IsThreadSafe', 'bool'),
  \ dotnet#prop('IndentLevel', 'int32'),
  \ dotnet#prop('IndentSize', 'int32'),
  \ dotnet#prop('Filter', 'TraceFilter'),
  \ dotnet#prop('NeedIndent', 'bool'),
  \ dotnet#prop('TraceOutputOptions', 'TraceOptions'),
  \ ])

call dotnet#class('TextWriterTraceListener', 'TraceListener', [ 
  \ dotnet#method('TextWriterTraceListener(', ')', 'void'),
  \ dotnet#method('TextWriterTraceListener(', 'class Stream stream)', 'void'),
  \ dotnet#method('TextWriterTraceListener(', 'class Stream stream, string name)', 'void'),
  \ dotnet#method('TextWriterTraceListener(', 'class TextWriter writer)', 'void'),
  \ dotnet#method('TextWriterTraceListener(', 'class TextWriter writer, string name)', 'void'),
  \ dotnet#method('TextWriterTraceListener(', 'string fileName)', 'void'),
  \ dotnet#method('TextWriterTraceListener(', 'string fileName, string name)', 'void'),
  \ dotnet#method('get_Writer(', ')', 'TextWriter'),
  \ dotnet#method('set_Writer(', 'class TextWriter value)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Write(', 'string message)', 'void'),
  \ dotnet#method('WriteLine(', 'string message)', 'void'),
  \ dotnet#prop('Writer', 'TextWriter'),
  \ ])

call dotnet#class('ConsoleTraceListener', 'TextWriterTraceListener', [ 
  \ dotnet#method('ConsoleTraceListener(', ')', 'void'),
  \ dotnet#method('ConsoleTraceListener(', 'bool useErrorStream)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ ])

call dotnet#class('CorrelationManager', 'Object', [ 
  \ dotnet#method('get_ActivityId(', ')', 'Guid'),
  \ dotnet#method('set_ActivityId(', 'Guid value)', 'void'),
  \ dotnet#method('get_LogicalOperationStack(', ')', 'Stack'),
  \ dotnet#method('StartLogicalOperation(', 'object operationId)', 'void'),
  \ dotnet#method('StartLogicalOperation(', ')', 'void'),
  \ dotnet#method('StopLogicalOperation(', ')', 'void'),
  \ dotnet#method('CorrelationManager(', ')', 'void'),
  \ dotnet#prop('ActivityId', 'Guid'),
  \ dotnet#prop('LogicalOperationStack', 'Stack'),
  \ ])

call dotnet#class('Debug', 'Object', [ 
  \ dotnet#method('get_Listeners(', ')', 'static'),
  \ dotnet#method('get_AutoFlush(', ')', 'static bool'),
  \ dotnet#method('set_AutoFlush(', 'bool value)', 'static void'),
  \ dotnet#method('get_IndentLevel(', ')', 'static int32'),
  \ dotnet#method('set_IndentLevel(', 'int32 value)', 'static void'),
  \ dotnet#method('get_IndentSize(', ')', 'static int32'),
  \ dotnet#method('set_IndentSize(', 'int32 value)', 'static void'),
  \ dotnet#method('Flush(', ')', 'static void'),
  \ dotnet#method('Close(', ') linkcheck', 'static void'),
  \ dotnet#method('Assert(', 'bool condition)', 'static void'),
  \ dotnet#method('Assert(', 'bool condition, string message)', 'static void'),
  \ dotnet#method('Assert(', 'bool condition, string message, string detailMessage)', 'static void'),
  \ dotnet#method('Assert(', 'bool condition, string message, string detailMessageFormat, object[] args)', 'static void'),
  \ dotnet#method('Fail(', 'string message)', 'static void'),
  \ dotnet#method('Fail(', 'string message, string detailMessage)', 'static void'),
  \ dotnet#method('Print(', 'string message)', 'static void'),
  \ dotnet#method('Print(', 'string format, object[] args)', 'static void'),
  \ dotnet#method('Write(', 'string message)', 'static void'),
  \ dotnet#method('Write(', 'object value)', 'static void'),
  \ dotnet#method('Write(', 'string message, string category)', 'static void'),
  \ dotnet#method('Write(', 'object value, string category)', 'static void'),
  \ dotnet#method('WriteLine(', 'string message)', 'static void'),
  \ dotnet#method('WriteLine(', 'object value)', 'static void'),
  \ dotnet#method('WriteLine(', 'string message, string category)', 'static void'),
  \ dotnet#method('WriteLine(', 'object value, string category)', 'static void'),
  \ dotnet#method('WriteLine(', 'string format, object[] args)', 'static void'),
  \ dotnet#method('WriteIf(', 'bool condition, string message)', 'static void'),
  \ dotnet#method('WriteIf(', 'bool condition, object value)', 'static void'),
  \ dotnet#method('WriteIf(', 'bool condition, string message, string category)', 'static void'),
  \ dotnet#method('WriteIf(', 'bool condition, object value, string category)', 'static void'),
  \ dotnet#method('WriteLineIf(', 'bool condition, string message)', 'static void'),
  \ dotnet#method('WriteLineIf(', 'bool condition, object value)', 'static void'),
  \ dotnet#method('WriteLineIf(', 'bool condition, string message, string category)', 'static void'),
  \ dotnet#method('WriteLineIf(', 'bool condition, object value, string category)', 'static void'),
  \ dotnet#method('Indent(', ')', 'static void'),
  \ dotnet#method('Unindent(', ')', 'static void'),
  \ dotnet#prop('Listeners', 'TraceListenerCollection'),
  \ dotnet#prop('AutoFlush', 'bool'),
  \ dotnet#prop('IndentLevel', 'int32'),
  \ dotnet#prop('IndentSize', 'int32'),
  \ ])

call dotnet#class('DefaultTraceListener', 'TraceListener', [ 
  \ dotnet#method('DefaultTraceListener(', ')', 'void'),
  \ dotnet#method('get_AssertUiEnabled(', ')', 'bool'),
  \ dotnet#method('set_AssertUiEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_LogFileName(', ')', 'string'),
  \ dotnet#method('set_LogFileName(', 'string value)', 'void'),
  \ dotnet#method('Fail(', 'string message)', 'void'),
  \ dotnet#method('Fail(', 'string message, string detailMessage)', 'void'),
  \ dotnet#method('Write(', 'string message)', 'void'),
  \ dotnet#method('WriteLine(', 'string message)', 'void'),
  \ dotnet#prop('AssertUiEnabled', 'bool'),
  \ dotnet#prop('LogFileName', 'string'),
  \ ])

call dotnet#class('DelimitedListTraceListener', 'TextWriterTraceListener', [ 
  \ dotnet#method('DelimitedListTraceListener(', 'class Stream stream)', 'void'),
  \ dotnet#method('DelimitedListTraceListener(', 'class Stream stream, string name)', 'void'),
  \ dotnet#method('DelimitedListTraceListener(', 'class TextWriter writer)', 'void'),
  \ dotnet#method('DelimitedListTraceListener(', 'class TextWriter writer, string name)', 'void'),
  \ dotnet#method('DelimitedListTraceListener(', 'string fileName)', 'void'),
  \ dotnet#method('DelimitedListTraceListener(', 'string fileName, string name)', 'void'),
  \ dotnet#method('get_Delimiter(', ')', 'string'),
  \ dotnet#method('set_Delimiter(', 'string value)', 'void'),
  \ dotnet#method('GetSupportedAttributes(', ')', 'famorassem string[]'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, string format, object[] args)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, string message)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, object data)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, object[] data)', 'void'),
  \ dotnet#prop('Delimiter', 'string'),
  \ ])

call dotnet#class('TraceFilter', 'Object', [ 
  \ dotnet#method('ShouldTrace(', 'class TraceEventCache cache, string source, TraceEventType eventType, int32 id, string formatOrMessage, object[] args, object data1, object[] data)', 'abstract bool'),
  \ dotnet#method('TraceFilter(', ')', 'void'),
  \ ])

call dotnet#class('EventTypeFilter', 'TraceFilter', [ 
  \ dotnet#method('EventTypeFilter(', 'SourceLevels level)', 'void'),
  \ dotnet#method('ShouldTrace(', 'class TraceEventCache cache, string source, TraceEventType eventType, int32 id, string formatOrMessage, object[] args, object data1, object[] data)', 'bool'),
  \ dotnet#method('get_EventType(', ')', 'SourceLevels'),
  \ dotnet#method('set_EventType(', 'SourceLevels value)', 'void'),
  \ dotnet#prop('EventType', 'SourceLevels'),
  \ ])

call dotnet#class('SourceFilter', 'TraceFilter', [ 
  \ dotnet#method('SourceFilter(', 'string source)', 'void'),
  \ dotnet#method('ShouldTrace(', 'class TraceEventCache cache, string source, TraceEventType eventType, int32 id, string formatOrMessage, object[] args, object data1, object[] data)', 'bool'),
  \ dotnet#method('get_Source(', ')', 'string'),
  \ dotnet#method('set_Source(', 'string value)', 'void'),
  \ dotnet#prop('Source', 'string'),
  \ ])

call dotnet#class('SourceSwitch', 'Switch', [ 
  \ dotnet#method('SourceSwitch(', 'string name)', 'void'),
  \ dotnet#method('SourceSwitch(', 'string displayName, string defaultSwitchValue)', 'void'),
  \ dotnet#method('get_Level(', ')', 'SourceLevels'),
  \ dotnet#method('set_Level(', 'SourceLevels value)', 'void'),
  \ dotnet#method('ShouldTrace(', 'TraceEventType eventType)', 'bool'),
  \ dotnet#method('OnValueChanged(', ')', 'void'),
  \ dotnet#prop('Level', 'SourceLevels'),
  \ ])

call dotnet#class('SwitchAttribute', 'Attribute', [ 
  \ dotnet#method('SwitchAttribute(', 'string switchName, Type switchType)', 'void'),
  \ dotnet#method('get_SwitchName(', ')', 'string'),
  \ dotnet#method('set_SwitchName(', 'string value)', 'void'),
  \ dotnet#method('get_SwitchType(', ')', 'Type'),
  \ dotnet#method('set_SwitchType(', 'class Type value)', 'void'),
  \ dotnet#method('get_SwitchDescription(', ')', 'string'),
  \ dotnet#method('set_SwitchDescription(', 'string value)', 'void'),
  \ dotnet#method('GetAll(', 'class Assembly assembly)', 'static SwitchAttribute[]'),
  \ dotnet#prop('SwitchName', 'string'),
  \ dotnet#prop('SwitchType', 'Type'),
  \ dotnet#prop('SwitchDescription', 'string'),
  \ ])

call dotnet#class('SwitchLevelAttribute', 'Attribute', [ 
  \ dotnet#method('SwitchLevelAttribute(', 'class Type switchLevelType)', 'void'),
  \ dotnet#method('get_SwitchLevelType(', ')', 'Type'),
  \ dotnet#method('set_SwitchLevelType(', 'class Type value)', 'void'),
  \ dotnet#prop('SwitchLevelType', 'Type'),
  \ ])

call dotnet#class('Trace', 'Object', [ 
  \ dotnet#method('get_Listeners(', ')', 'static'),
  \ dotnet#method('get_AutoFlush(', ')', 'static bool'),
  \ dotnet#method('set_AutoFlush(', 'bool value)', 'static void'),
  \ dotnet#method('get_UseGlobalLock(', ')', 'static bool'),
  \ dotnet#method('set_UseGlobalLock(', 'bool value)', 'static void'),
  \ dotnet#method('get_CorrelationManager(', ')', 'static'),
  \ dotnet#method('get_IndentLevel(', ')', 'static int32'),
  \ dotnet#method('set_IndentLevel(', 'int32 value)', 'static void'),
  \ dotnet#method('get_IndentSize(', ')', 'static int32'),
  \ dotnet#method('set_IndentSize(', 'int32 value)', 'static void'),
  \ dotnet#method('Flush(', ')', 'static void'),
  \ dotnet#method('Close(', ')', 'static void'),
  \ dotnet#method('Assert(', 'bool condition)', 'static void'),
  \ dotnet#method('Assert(', 'bool condition, string message)', 'static void'),
  \ dotnet#method('Assert(', 'bool condition, string message, string detailMessage)', 'static void'),
  \ dotnet#method('Fail(', 'string message)', 'static void'),
  \ dotnet#method('Fail(', 'string message, string detailMessage)', 'static void'),
  \ dotnet#method('Refresh(', ')', 'static void'),
  \ dotnet#method('TraceInformation(', 'string message)', 'static void'),
  \ dotnet#method('TraceInformation(', 'string format, object[] args)', 'static void'),
  \ dotnet#method('TraceWarning(', 'string message)', 'static void'),
  \ dotnet#method('TraceWarning(', 'string format, object[] args)', 'static void'),
  \ dotnet#method('TraceError(', 'string message)', 'static void'),
  \ dotnet#method('TraceError(', 'string format, object[] args)', 'static void'),
  \ dotnet#method('Write(', 'string message)', 'static void'),
  \ dotnet#method('Write(', 'object value)', 'static void'),
  \ dotnet#method('Write(', 'string message, string category)', 'static void'),
  \ dotnet#method('Write(', 'object value, string category)', 'static void'),
  \ dotnet#method('WriteLine(', 'string message)', 'static void'),
  \ dotnet#method('WriteLine(', 'object value)', 'static void'),
  \ dotnet#method('WriteLine(', 'string message, string category)', 'static void'),
  \ dotnet#method('WriteLine(', 'object value, string category)', 'static void'),
  \ dotnet#method('WriteIf(', 'bool condition, string message)', 'static void'),
  \ dotnet#method('WriteIf(', 'bool condition, object value)', 'static void'),
  \ dotnet#method('WriteIf(', 'bool condition, string message, string category)', 'static void'),
  \ dotnet#method('WriteIf(', 'bool condition, object value, string category)', 'static void'),
  \ dotnet#method('WriteLineIf(', 'bool condition, string message)', 'static void'),
  \ dotnet#method('WriteLineIf(', 'bool condition, object value)', 'static void'),
  \ dotnet#method('WriteLineIf(', 'bool condition, string message, string category)', 'static void'),
  \ dotnet#method('WriteLineIf(', 'bool condition, object value, string category)', 'static void'),
  \ dotnet#method('Indent(', ')', 'static void'),
  \ dotnet#method('Unindent(', ')', 'static void'),
  \ dotnet#method('Trace(', ')', 'void'),
  \ dotnet#method('Trace(', ')', 'static void .'),
  \ dotnet#prop('Listeners', 'TraceListenerCollection'),
  \ dotnet#prop('AutoFlush', 'bool'),
  \ dotnet#prop('UseGlobalLock', 'bool'),
  \ dotnet#prop('CorrelationManager', 'CorrelationManager'),
  \ dotnet#prop('IndentLevel', 'int32'),
  \ dotnet#prop('IndentSize', 'int32'),
  \ ])

call dotnet#class('TraceEventCache', 'Object', [ 
  \ dotnet#method('get_Callstack(', ')', 'string'),
  \ dotnet#method('get_LogicalOperationStack(', ')', 'Stack'),
  \ dotnet#method('get_DateTime(', ')', 'DateTime'),
  \ dotnet#method('get_ProcessId(', ')', 'int32'),
  \ dotnet#method('get_ThreadId(', ')', 'string'),
  \ dotnet#method('get_Timestamp(', ')', 'int64'),
  \ dotnet#method('TraceEventCache(', ')', 'void'),
  \ dotnet#prop('Callstack', 'string'),
  \ dotnet#prop('LogicalOperationStack', 'Stack'),
  \ dotnet#prop('DateTime', 'DateTime'),
  \ dotnet#prop('ProcessId', 'int32'),
  \ dotnet#prop('ThreadId', 'string'),
  \ dotnet#prop('Timestamp', 'int64'),
  \ ])

call dotnet#class('TraceListenerCollection', 'Object', [ 
  \ dotnet#method('get_Item(', 'int32 i)', 'TraceListener'),
  \ dotnet#method('set_Item(', 'int32 i, TraceListener value)', 'void'),
  \ dotnet#method('get_Item(', 'string name)', 'TraceListener'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('Add(', 'class TraceListener listener)', 'int32'),
  \ dotnet#method('AddRange(', 'class TraceListener[] value)', 'void'),
  \ dotnet#method('AddRange(', 'class TraceListenerCollection value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class TraceListener listener)', 'bool'),
  \ dotnet#method('CopyTo(', 'class TraceListener[] listeners, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('IndexOf(', 'class TraceListener listener)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, TraceListener listener)', 'void'),
  \ dotnet#method('Remove(', 'class TraceListener listener)', 'void'),
  \ dotnet#method('Remove(', 'string name)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('TraceListenerCollection(', ')', 'void'),
  \ dotnet#prop('Item(int32)', 'TraceListener'),
  \ dotnet#prop('Item(string)', 'TraceListener'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ ])

call dotnet#class('TraceSource', 'Object', [ 
  \ dotnet#method('TraceSource(', 'string name)', 'void'),
  \ dotnet#method('TraceSource(', 'string name, SourceLevels defaultLevel)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('GetSupportedAttributes(', ')', 'famorassem string[]'),
  \ dotnet#method('TraceEvent(', 'TraceEventType eventType, int32 id)', 'void'),
  \ dotnet#method('TraceEvent(', 'TraceEventType eventType, int32 id, string message)', 'void'),
  \ dotnet#method('TraceEvent(', 'TraceEventType eventType, int32 id, string format, object[] args)', 'void'),
  \ dotnet#method('TraceData(', 'TraceEventType eventType, int32 id, object data)', 'void'),
  \ dotnet#method('TraceData(', 'TraceEventType eventType, int32 id, object[] data)', 'void'),
  \ dotnet#method('TraceInformation(', 'string message)', 'void'),
  \ dotnet#method('TraceInformation(', 'string format, object[] args)', 'void'),
  \ dotnet#method('TraceTransfer(', 'int32 id, string message, Guid relatedActivityId)', 'void'),
  \ dotnet#method('get_Attributes(', ')', 'StringDictionary'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Listeners(', ')', 'TraceListenerCollection'),
  \ dotnet#method('get_Switch(', ')', 'SourceSwitch'),
  \ dotnet#method('set_Switch(', 'class SourceSwitch value)', 'void'),
  \ dotnet#method('TraceSource(', ')', 'static void .'),
  \ dotnet#prop('Attributes', 'StringDictionary'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Listeners', 'TraceListenerCollection'),
  \ dotnet#prop('Switch', 'SourceSwitch'),
  \ ])

call dotnet#class('TraceSwitch', 'Switch', [ 
  \ dotnet#method('TraceSwitch(', 'string displayName, string description)', 'void'),
  \ dotnet#method('TraceSwitch(', 'string displayName, string description, string defaultSwitchValue)', 'void'),
  \ dotnet#method('get_Level(', ')', 'TraceLevel'),
  \ dotnet#method('set_Level(', 'TraceLevel value)', 'void'),
  \ dotnet#method('get_TraceError(', ')', 'bool'),
  \ dotnet#method('get_TraceWarning(', ')', 'bool'),
  \ dotnet#method('get_TraceInfo(', ')', 'bool'),
  \ dotnet#method('get_TraceVerbose(', ')', 'bool'),
  \ dotnet#method('OnSwitchSettingChanged(', ')', 'void'),
  \ dotnet#method('OnValueChanged(', ')', 'void'),
  \ dotnet#prop('Level', 'TraceLevel'),
  \ dotnet#prop('TraceError', 'bool'),
  \ dotnet#prop('TraceWarning', 'bool'),
  \ dotnet#prop('TraceInfo', 'bool'),
  \ dotnet#prop('TraceVerbose', 'bool'),
  \ ])

call dotnet#class('XmlWriterTraceListener', 'TextWriterTraceListener', [ 
  \ dotnet#method('XmlWriterTraceListener(', 'class Stream stream)', 'void'),
  \ dotnet#method('XmlWriterTraceListener(', 'class Stream stream, string name)', 'void'),
  \ dotnet#method('XmlWriterTraceListener(', 'class TextWriter writer)', 'void'),
  \ dotnet#method('XmlWriterTraceListener(', 'class TextWriter writer, string name)', 'void'),
  \ dotnet#method('XmlWriterTraceListener(', 'string filename)', 'void'),
  \ dotnet#method('XmlWriterTraceListener(', 'string filename, string name)', 'void'),
  \ dotnet#method('Write(', 'string message)', 'void'),
  \ dotnet#method('WriteLine(', 'string message)', 'void'),
  \ dotnet#method('Fail(', 'string message, string detailMessage)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, string format, object[] args)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, string message)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, object data)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType eventType, int32 id, object[] data)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('TraceTransfer(', 'class TraceEventCache eventCache, string source, int32 id, string message, Guid relatedActivityId)', 'void'),
  \ ])

call dotnet#class('CounterCreationData', 'Object', [ 
  \ dotnet#method('CounterCreationData(', ')', 'void'),
  \ dotnet#method('CounterCreationData(', 'string counterName, string counterHelp, PerformanceCounterType counterType)', 'void'),
  \ dotnet#method('get_CounterType(', ')', 'PerformanceCounterType'),
  \ dotnet#method('set_CounterType(', 'PerformanceCounterType value)', 'void'),
  \ dotnet#method('get_CounterName(', ')', 'string'),
  \ dotnet#method('set_CounterName(', 'string value)', 'void'),
  \ dotnet#method('get_CounterHelp(', ')', 'string'),
  \ dotnet#method('set_CounterHelp(', 'string value)', 'void'),
  \ dotnet#prop('CounterType', 'PerformanceCounterType'),
  \ dotnet#prop('CounterName', 'string'),
  \ dotnet#prop('CounterHelp', 'string'),
  \ ])

call dotnet#class('CounterCreationDataCollection', 'CollectionBase', [ 
  \ dotnet#method('CounterCreationDataCollection(', ')', 'void'),
  \ dotnet#method('CounterCreationDataCollection(', 'class CounterCreationDataCollection value)', 'void'),
  \ dotnet#method('CounterCreationDataCollection(', 'class CounterCreationData[] value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'CounterCreationData'),
  \ dotnet#method('set_Item(', 'int32 index, CounterCreationData value)', 'void'),
  \ dotnet#method('Add(', 'class CounterCreationData value)', 'int32'),
  \ dotnet#method('AddRange(', 'class CounterCreationData[] value)', 'void'),
  \ dotnet#method('AddRange(', 'class CounterCreationDataCollection value)', 'void'),
  \ dotnet#method('Contains(', 'class CounterCreationData value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class CounterCreationData[] array, int32 index)', 'void'),
  \ dotnet#method('IndexOf(', 'class CounterCreationData value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, CounterCreationData value)', 'void'),
  \ dotnet#method('Remove(', 'class CounterCreationData value)', 'void'),
  \ dotnet#method('OnValidate(', 'object value)', 'void'),
  \ dotnet#prop('Item(int32)', 'CounterCreationData'),
  \ ])

call dotnet#class('CounterSample', 'ValueType', [ 
  \ dotnet#field('rawValue', 'int64'),
  \ dotnet#field('baseValue', 'int64'),
  \ dotnet#field('timeStamp', 'int64'),
  \ dotnet#field('counterFrequency', 'int64'),
  \ dotnet#field('counterType', 'PerformanceCounterType'),
  \ dotnet#field('timeStamp100nSec', 'int64'),
  \ dotnet#field('systemFrequency', 'int64'),
  \ dotnet#field('counterTimeStamp', 'int64'),
  \ dotnet#method('CounterSample(', 'int64 rawValue, int64 baseValue, int64 counterFrequency, int64 systemFrequency, int64 timeStamp, int64 timeStamp100nSec, PerformanceCounterType counterType)', 'void'),
  \ dotnet#method('CounterSample(', 'int64 rawValue, int64 baseValue, int64 counterFrequency, int64 systemFrequency, int64 timeStamp, int64 timeStamp100nSec, PerformanceCounterType counterType, int64 counterTimeStamp)', 'void'),
  \ dotnet#method('get_RawValue(', ')', 'int64'),
  \ dotnet#method('get_BaseValue(', ')', 'int64'),
  \ dotnet#method('get_SystemFrequency(', ')', 'int64'),
  \ dotnet#method('get_CounterFrequency(', ')', 'int64'),
  \ dotnet#method('get_CounterTimeStamp(', ')', 'int64'),
  \ dotnet#method('get_TimeStamp(', ')', 'int64'),
  \ dotnet#method('get_TimeStamp100nSec(', ')', 'int64'),
  \ dotnet#method('get_CounterType(', ')', 'PerformanceCounterType'),
  \ dotnet#method('Calculate(', 'CounterSample counterSample)', 'static float32'),
  \ dotnet#method('Calculate(', 'CounterSample counterSample, CounterSample nextCounterSample)', 'static float32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'CounterSample sample)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('op_Equality(', 'CounterSample a, CounterSample b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'CounterSample a, CounterSample b)', 'static bool'),
  \ dotnet#method('CounterSample(', ')', 'static void .'),
  \ dotnet#prop('RawValue', 'int64'),
  \ dotnet#prop('BaseValue', 'int64'),
  \ dotnet#prop('SystemFrequency', 'int64'),
  \ dotnet#prop('CounterFrequency', 'int64'),
  \ dotnet#prop('CounterTimeStamp', 'int64'),
  \ dotnet#prop('TimeStamp', 'int64'),
  \ dotnet#prop('TimeStamp100nSec', 'int64'),
  \ dotnet#prop('CounterType', 'PerformanceCounterType'),
  \ ])

call dotnet#class('CounterSampleCalculator', 'Object', [ 
  \ dotnet#method('ComputeCounterValue(', 'CounterSample newSample)', 'static float32'),
  \ dotnet#method('ComputeCounterValue(', 'CounterSample oldSample, CounterSample newSample)', 'static float32'),
  \ dotnet#method('CounterSampleCalculator(', ')', 'static void .'),
  \ ])

call dotnet#class('DataReceivedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DataReceivedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DataReceivedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DataReceivedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DataReceivedEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_Data(', ')', 'string'),
  \ dotnet#prop('Data', 'string'),
  \ ])

call dotnet#class('DiagnosticsConfigurationHandler', 'Object', [ 
  \ dotnet#method('Create(', 'object parent, object configContext, XmlNode section)', 'object'),
  \ dotnet#method('DiagnosticsConfigurationHandler(', ')', 'void'),
  \ ])

call dotnet#class('EntryWrittenEventArgs', 'EventArgs', [ 
  \ dotnet#method('EntryWrittenEventArgs(', ')', 'void'),
  \ dotnet#method('EntryWrittenEventArgs(', 'class EventLogEntry entry)', 'void'),
  \ dotnet#method('get_Entry(', ')', 'EventLogEntry'),
  \ dotnet#prop('Entry', 'EventLogEntry'),
  \ ])

call dotnet#class('EntryWrittenEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('EntryWrittenEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, EntryWrittenEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, EntryWrittenEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('EventInstance', 'Object', [ 
  \ dotnet#method('EventInstance(', 'int64 instanceId, int32 categoryId)', 'void'),
  \ dotnet#method('EventInstance(', 'int64 instanceId, int32 categoryId, EventLogEntryType entryType)', 'void'),
  \ dotnet#method('get_CategoryId(', ')', 'int32'),
  \ dotnet#method('set_CategoryId(', 'int32 value)', 'void'),
  \ dotnet#method('get_EntryType(', ')', 'EventLogEntryType'),
  \ dotnet#method('set_EntryType(', 'EventLogEntryType value)', 'void'),
  \ dotnet#method('get_InstanceId(', ')', 'int64'),
  \ dotnet#method('set_InstanceId(', 'int64 value)', 'void'),
  \ dotnet#prop('CategoryId', 'int32'),
  \ dotnet#prop('EntryType', 'EventLogEntryType'),
  \ dotnet#prop('InstanceId', 'int64'),
  \ ])

call dotnet#class('EventLog', 'Component', [ 
  \ dotnet#method('EventLog(', ')', 'void'),
  \ dotnet#method('EventLog(', 'string logName)', 'void'),
  \ dotnet#method('EventLog(', 'string logName, string machineName)', 'void'),
  \ dotnet#method('EventLog(', 'string logName, string machineName, string source)', 'void'),
  \ dotnet#method('get_Entries(', ')', 'EventLogEntryCollection'),
  \ dotnet#method('get_LogDisplayName(', ')', 'string'),
  \ dotnet#method('get_Log(', ')', 'string'),
  \ dotnet#method('set_Log(', 'string value)', 'void'),
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('set_MachineName(', 'string value)', 'void'),
  \ dotnet#method('get_MaximumKilobytes(', ')', 'int64'),
  \ dotnet#method('set_MaximumKilobytes(', 'int64 value)', 'void'),
  \ dotnet#method('get_OverflowAction(', ')', 'OverflowAction'),
  \ dotnet#method('get_MinimumRetentionDays(', ')', 'int32'),
  \ dotnet#method('get_EnableRaisingEvents(', ')', 'bool'),
  \ dotnet#method('set_EnableRaisingEvents(', 'bool value)', 'void'),
  \ dotnet#method('get_SynchronizingObject(', ')', 'ISynchronizeInvoke'),
  \ dotnet#method('set_SynchronizingObject(', 'class ISynchronizeInvoke value)', 'void'),
  \ dotnet#method('get_Source(', ')', 'string'),
  \ dotnet#method('set_Source(', 'string value)', 'void'),
  \ dotnet#method('add_EntryWritten(', 'class EntryWrittenEventHandler value)', 'void'),
  \ dotnet#method('remove_EntryWritten(', 'class EntryWrittenEventHandler value)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('CreateEventSource(', 'string source, string logName)', 'static void'),
  \ dotnet#method('CreateEventSource(', 'string source, string logName, string machineName)', 'static void'),
  \ dotnet#method('CreateEventSource(', 'class EventSourceCreationData sourceData)', 'static void'),
  \ dotnet#method('Delete(', 'string logName)', 'static void'),
  \ dotnet#method('Delete(', 'string logName, string machineName)', 'static void'),
  \ dotnet#method('DeleteEventSource(', 'string source)', 'static void'),
  \ dotnet#method('DeleteEventSource(', 'string source, string machineName)', 'static void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('Exists(', 'string logName)', 'static bool'),
  \ dotnet#method('Exists(', 'string logName, string machineName)', 'static bool'),
  \ dotnet#method('GetEventLogs(', ')', 'static EventLog[]'),
  \ dotnet#method('GetEventLogs(', 'string machineName)', 'static EventLog[]'),
  \ dotnet#method('SourceExists(', 'string source)', 'static bool'),
  \ dotnet#method('SourceExists(', 'string source, string machineName)', 'static bool'),
  \ dotnet#method('LogNameFromSourceName(', 'string source, string machineName)', 'static string'),
  \ dotnet#method('ModifyOverflowPolicy(', 'OverflowAction action, int32 retentionDays)', 'void'),
  \ dotnet#method('RegisterDisplayName(', 'string resourceFile, int64 resourceId)', 'void'),
  \ dotnet#method('WriteEntry(', 'string message)', 'void'),
  \ dotnet#method('WriteEntry(', 'string source, string message)', 'static void'),
  \ dotnet#method('WriteEntry(', 'string message, EventLogEntryType type)', 'void'),
  \ dotnet#method('WriteEntry(', 'string source, string message, EventLogEntryType type)', 'static void'),
  \ dotnet#method('WriteEntry(', 'string message, EventLogEntryType type, int32 eventID)', 'void'),
  \ dotnet#method('WriteEntry(', 'string source, string message, EventLogEntryType type, int32 eventID)', 'static void'),
  \ dotnet#method('WriteEntry(', 'string message, EventLogEntryType type, int32 eventID, int16 category)', 'void'),
  \ dotnet#method('WriteEntry(', 'string source, string message, EventLogEntryType type, int32 eventID, int16 category)', 'static void'),
  \ dotnet#method('WriteEntry(', 'string source, string message, EventLogEntryType type, int32 eventID, int16 category, uint8[] rawData)', 'static void'),
  \ dotnet#method('WriteEntry(', 'string message, EventLogEntryType type, int32 eventID, int16 category, uint8[] rawData)', 'void'),
  \ dotnet#method('WriteEvent(', 'class EventInstance instance, object[] values)', 'void'),
  \ dotnet#method('WriteEvent(', 'class EventInstance instance, uint8[] data, object[] values)', 'void'),
  \ dotnet#method('WriteEvent(', 'string source, EventInstance instance, object[] values)', 'static void'),
  \ dotnet#method('WriteEvent(', 'string source, EventInstance instance, uint8[] data, object[] values)', 'static void'),
  \ dotnet#event('EntryWritten', 'EntryWrittenEventHandler'),
  \ dotnet#prop('Entries', 'EventLogEntryCollection'),
  \ dotnet#prop('LogDisplayName', 'string'),
  \ dotnet#prop('Log', 'string'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('MaximumKilobytes', 'int64'),
  \ dotnet#prop('OverflowAction', 'OverflowAction'),
  \ dotnet#prop('MinimumRetentionDays', 'int32'),
  \ dotnet#prop('EnableRaisingEvents', 'bool'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ dotnet#prop('Source', 'string'),
  \ ])

call dotnet#class('EventLogEntry', 'Component', [ 
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('get_Data(', ')', 'uint8[]'),
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#method('get_Category(', ')', 'string'),
  \ dotnet#method('get_CategoryNumber(', ')', 'int16'),
  \ dotnet#method('get_EventID(', ')', 'int32'),
  \ dotnet#method('get_EntryType(', ')', 'EventLogEntryType'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_Source(', ')', 'string'),
  \ dotnet#method('get_ReplacementStrings(', ')', 'string[]'),
  \ dotnet#method('get_InstanceId(', ')', 'int64'),
  \ dotnet#method('get_TimeGenerated(', ')', 'DateTime'),
  \ dotnet#method('get_TimeWritten(', ')', 'DateTime'),
  \ dotnet#method('get_UserName(', ')', 'string'),
  \ dotnet#method('Equals(', 'class EventLogEntry otherEntry)', 'bool'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('EventLogEntry(', ')', 'static void .'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('Data', 'uint8[]'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('Category', 'string'),
  \ dotnet#prop('CategoryNumber', 'int16'),
  \ dotnet#prop('EventID', 'int32'),
  \ dotnet#prop('EntryType', 'EventLogEntryType'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('Source', 'string'),
  \ dotnet#prop('ReplacementStrings', 'string[]'),
  \ dotnet#prop('InstanceId', 'int64'),
  \ dotnet#prop('TimeGenerated', 'DateTime'),
  \ dotnet#prop('TimeWritten', 'DateTime'),
  \ dotnet#prop('UserName', 'string'),
  \ ])

call dotnet#class('EventLogEntryCollection', 'Object', [ 
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('CopyTo(', 'class EventLogEntry[] entries, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'EventLogEntry'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('EventLogPermission', 'ResourcePermissionBase', [ 
  \ dotnet#method('EventLogPermission(', ')', 'void'),
  \ dotnet#method('EventLogPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('EventLogPermission(', 'EventLogPermissionAccess permissionAccess, string machineName)', 'void'),
  \ dotnet#method('EventLogPermission(', 'class EventLogPermissionEntry[] permissionAccessEntries)', 'void'),
  \ dotnet#method('get_PermissionEntries(', ')', 'EventLogPermissionEntryCollection'),
  \ dotnet#prop('PermissionEntries', 'EventLogPermissionEntryCollection'),
  \ ])

call dotnet#class('EventLogPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('EventLogPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('set_MachineName(', 'string value)', 'void'),
  \ dotnet#method('get_PermissionAccess(', ')', 'EventLogPermissionAccess'),
  \ dotnet#method('set_PermissionAccess(', 'EventLogPermissionAccess value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('PermissionAccess', 'EventLogPermissionAccess'),
  \ ])

call dotnet#class('EventLogPermissionEntry', 'Object', [ 
  \ dotnet#method('EventLogPermissionEntry(', 'EventLogPermissionAccess permissionAccess, string machineName)', 'void'),
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('get_PermissionAccess(', ')', 'EventLogPermissionAccess'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('PermissionAccess', 'EventLogPermissionAccess'),
  \ ])

call dotnet#class('EventLogPermissionEntryCollection', 'CollectionBase', [ 
  \ dotnet#method('get_Item(', 'int32 index)', 'EventLogPermissionEntry'),
  \ dotnet#method('set_Item(', 'int32 index, EventLogPermissionEntry value)', 'void'),
  \ dotnet#method('Add(', 'class EventLogPermissionEntry value)', 'int32'),
  \ dotnet#method('AddRange(', 'class EventLogPermissionEntry[] value)', 'void'),
  \ dotnet#method('AddRange(', 'class EventLogPermissionEntryCollection value)', 'void'),
  \ dotnet#method('Contains(', 'class EventLogPermissionEntry value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class EventLogPermissionEntry[] array, int32 index)', 'void'),
  \ dotnet#method('IndexOf(', 'class EventLogPermissionEntry value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, EventLogPermissionEntry value)', 'void'),
  \ dotnet#method('Remove(', 'class EventLogPermissionEntry value)', 'void'),
  \ dotnet#method('OnClear(', ')', 'void'),
  \ dotnet#method('OnInsert(', 'int32 index, object value)', 'void'),
  \ dotnet#method('OnRemove(', 'int32 index, object value)', 'void'),
  \ dotnet#method('OnSet(', 'int32 index, object oldValue, object newValue)', 'void'),
  \ dotnet#prop('Item(int32)', 'EventLogPermissionEntry'),
  \ ])

call dotnet#class('EventLogTraceListener', 'TraceListener', [ 
  \ dotnet#method('EventLogTraceListener(', ')', 'void'),
  \ dotnet#method('EventLogTraceListener(', 'class EventLog eventLog)', 'void'),
  \ dotnet#method('EventLogTraceListener(', 'string source)', 'void'),
  \ dotnet#method('get_EventLog(', ')', 'EventLog'),
  \ dotnet#method('set_EventLog(', 'class EventLog value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Write(', 'string message)', 'void'),
  \ dotnet#method('WriteLine(', 'string message)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType severity, int32 id, string format, object[] args)', 'void'),
  \ dotnet#method('TraceEvent(', 'class TraceEventCache eventCache, string source, TraceEventType severity, int32 id, string message)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType severity, int32 id, object data)', 'void'),
  \ dotnet#method('TraceData(', 'class TraceEventCache eventCache, string source, TraceEventType severity, int32 id, object[] data)', 'void'),
  \ dotnet#prop('EventLog', 'EventLog'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('EventSourceCreationData', 'Object', [ 
  \ dotnet#method('EventSourceCreationData(', 'string source, string logName)', 'void'),
  \ dotnet#method('get_LogName(', ')', 'string'),
  \ dotnet#method('set_LogName(', 'string value)', 'void'),
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('set_MachineName(', 'string value)', 'void'),
  \ dotnet#method('get_Source(', ')', 'string'),
  \ dotnet#method('set_Source(', 'string value)', 'void'),
  \ dotnet#method('get_MessageResourceFile(', ')', 'string'),
  \ dotnet#method('set_MessageResourceFile(', 'string value)', 'void'),
  \ dotnet#method('get_ParameterResourceFile(', ')', 'string'),
  \ dotnet#method('set_ParameterResourceFile(', 'string value)', 'void'),
  \ dotnet#method('get_CategoryResourceFile(', ')', 'string'),
  \ dotnet#method('set_CategoryResourceFile(', 'string value)', 'void'),
  \ dotnet#method('get_CategoryCount(', ')', 'int32'),
  \ dotnet#method('set_CategoryCount(', 'int32 value)', 'void'),
  \ dotnet#method('EventSourceCreationData(', ')', 'void'),
  \ dotnet#prop('LogName', 'string'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('Source', 'string'),
  \ dotnet#prop('MessageResourceFile', 'string'),
  \ dotnet#prop('ParameterResourceFile', 'string'),
  \ dotnet#prop('CategoryResourceFile', 'string'),
  \ dotnet#prop('CategoryCount', 'int32'),
  \ ])

call dotnet#class('FileVersionInfo', 'Object', [ 
  \ dotnet#method('get_Comments(', ')', 'string'),
  \ dotnet#method('get_CompanyName(', ')', 'string'),
  \ dotnet#method('get_FileBuildPart(', ')', 'int32'),
  \ dotnet#method('get_FileDescription(', ')', 'string'),
  \ dotnet#method('get_FileMajorPart(', ')', 'int32'),
  \ dotnet#method('get_FileMinorPart(', ')', 'int32'),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('get_FilePrivatePart(', ')', 'int32'),
  \ dotnet#method('get_FileVersion(', ')', 'string'),
  \ dotnet#method('get_InternalName(', ')', 'string'),
  \ dotnet#method('get_IsDebug(', ')', 'bool'),
  \ dotnet#method('get_IsPatched(', ')', 'bool'),
  \ dotnet#method('get_IsPrivateBuild(', ')', 'bool'),
  \ dotnet#method('get_IsPreRelease(', ')', 'bool'),
  \ dotnet#method('get_IsSpecialBuild(', ')', 'bool'),
  \ dotnet#method('get_Language(', ')', 'string'),
  \ dotnet#method('get_LegalCopyright(', ')', 'string'),
  \ dotnet#method('get_LegalTrademarks(', ')', 'string'),
  \ dotnet#method('get_OriginalFilename(', ')', 'string'),
  \ dotnet#method('get_PrivateBuild(', ')', 'string'),
  \ dotnet#method('get_ProductBuildPart(', ')', 'int32'),
  \ dotnet#method('get_ProductMajorPart(', ')', 'int32'),
  \ dotnet#method('get_ProductMinorPart(', ')', 'int32'),
  \ dotnet#method('get_ProductName(', ')', 'string'),
  \ dotnet#method('get_ProductPrivatePart(', ')', 'int32'),
  \ dotnet#method('get_ProductVersion(', ')', 'string'),
  \ dotnet#method('get_SpecialBuild(', ')', 'string'),
  \ dotnet#method('GetVersionInfo(', 'string fileName)', 'static FileVersionInfo'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Comments', 'string'),
  \ dotnet#prop('CompanyName', 'string'),
  \ dotnet#prop('FileBuildPart', 'int32'),
  \ dotnet#prop('FileDescription', 'string'),
  \ dotnet#prop('FileMajorPart', 'int32'),
  \ dotnet#prop('FileMinorPart', 'int32'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('FilePrivatePart', 'int32'),
  \ dotnet#prop('FileVersion', 'string'),
  \ dotnet#prop('InternalName', 'string'),
  \ dotnet#prop('IsDebug', 'bool'),
  \ dotnet#prop('IsPatched', 'bool'),
  \ dotnet#prop('IsPrivateBuild', 'bool'),
  \ dotnet#prop('IsPreRelease', 'bool'),
  \ dotnet#prop('IsSpecialBuild', 'bool'),
  \ dotnet#prop('Language', 'string'),
  \ dotnet#prop('LegalCopyright', 'string'),
  \ dotnet#prop('LegalTrademarks', 'string'),
  \ dotnet#prop('OriginalFilename', 'string'),
  \ dotnet#prop('PrivateBuild', 'string'),
  \ dotnet#prop('ProductBuildPart', 'int32'),
  \ dotnet#prop('ProductMajorPart', 'int32'),
  \ dotnet#prop('ProductMinorPart', 'int32'),
  \ dotnet#prop('ProductName', 'string'),
  \ dotnet#prop('ProductPrivatePart', 'int32'),
  \ dotnet#prop('ProductVersion', 'string'),
  \ dotnet#prop('SpecialBuild', 'string'),
  \ ])

call dotnet#class('InstanceData', 'Object', [ 
  \ dotnet#method('InstanceData(', 'string instanceName, CounterSample sample)', 'void'),
  \ dotnet#method('get_InstanceName(', ')', 'string'),
  \ dotnet#method('get_Sample(', ')', 'CounterSample'),
  \ dotnet#method('get_RawValue(', ')', 'int64'),
  \ dotnet#prop('InstanceName', 'string'),
  \ dotnet#prop('Sample', 'CounterSample'),
  \ dotnet#prop('RawValue', 'int64'),
  \ ])

call dotnet#class('InstanceDataCollection', 'DictionaryBase', [ 
  \ dotnet#method('InstanceDataCollection(', 'string counterName)', 'void'),
  \ dotnet#method('get_CounterName(', ')', 'string'),
  \ dotnet#method('get_Keys(', ')', 'ICollection'),
  \ dotnet#method('get_Values(', ')', 'ICollection'),
  \ dotnet#method('get_Item(', 'string instanceName)', 'InstanceData'),
  \ dotnet#method('Contains(', 'string instanceName)', 'bool'),
  \ dotnet#method('CopyTo(', 'class InstanceData[] instances, int32 index)', 'void'),
  \ dotnet#prop('CounterName', 'string'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('Item(string)', 'InstanceData'),
  \ ])

call dotnet#class('InstanceDataCollectionCollection', 'DictionaryBase', [ 
  \ dotnet#method('InstanceDataCollectionCollection(', ')', 'void'),
  \ dotnet#method('get_Item(', 'string counterName)', 'InstanceDataCollection'),
  \ dotnet#method('get_Keys(', ')', 'ICollection'),
  \ dotnet#method('get_Values(', ')', 'ICollection'),
  \ dotnet#method('Contains(', 'string counterName)', 'bool'),
  \ dotnet#method('CopyTo(', 'class InstanceDataCollection[] counters, int32 index)', 'void'),
  \ dotnet#prop('Item(string)', 'InstanceDataCollection'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('MonitoringDescriptionAttribute', 'DescriptionAttribute', [ 
  \ dotnet#method('MonitoringDescriptionAttribute(', 'string description)', 'void'),
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ ])

call dotnet#class('PerformanceCounter', 'Component', [ 
  \ dotnet#method('PerformanceCounter(', ')', 'void'),
  \ dotnet#method('PerformanceCounter(', 'string categoryName, string counterName, string instanceName, string machineName)', 'void'),
  \ dotnet#method('PerformanceCounter(', 'string categoryName, string counterName, string instanceName)', 'void'),
  \ dotnet#method('PerformanceCounter(', 'string categoryName, string counterName, string instanceName, bool readOnly)', 'void'),
  \ dotnet#method('PerformanceCounter(', 'string categoryName, string counterName)', 'void'),
  \ dotnet#method('PerformanceCounter(', 'string categoryName, string counterName, bool readOnly)', 'void'),
  \ dotnet#method('get_CategoryName(', ')', 'string'),
  \ dotnet#method('set_CategoryName(', 'string value)', 'void'),
  \ dotnet#method('get_CounterHelp(', ')', 'string'),
  \ dotnet#method('get_CounterName(', ')', 'string'),
  \ dotnet#method('set_CounterName(', 'string value)', 'void'),
  \ dotnet#method('get_CounterType(', ')', 'PerformanceCounterType'),
  \ dotnet#method('get_InstanceLifetime(', ')', 'PerformanceCounterInstanceLifetime'),
  \ dotnet#method('set_InstanceLifetime(', 'PerformanceCounterInstanceLifetime value)', 'void'),
  \ dotnet#method('get_InstanceName(', ')', 'string'),
  \ dotnet#method('set_InstanceName(', 'string value)', 'void'),
  \ dotnet#method('get_ReadOnly(', ')', 'bool'),
  \ dotnet#method('set_ReadOnly(', 'bool value)', 'void'),
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('set_MachineName(', 'string value)', 'void'),
  \ dotnet#method('get_RawValue(', ')', 'int64'),
  \ dotnet#method('set_RawValue(', 'int64 value)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('CloseSharedResources(', ')', 'static void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Decrement(', ')', 'int64'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('IncrementBy(', 'int64 value)', 'int64'),
  \ dotnet#method('Increment(', ')', 'int64'),
  \ dotnet#method('NextSample(', ')', 'CounterSample'),
  \ dotnet#method('NextValue(', ')', 'float32'),
  \ dotnet#method('RemoveInstance(', ')', 'void'),
  \ dotnet#method('PerformanceCounter(', ')', 'static void .'),
  \ dotnet#prop('CategoryName', 'string'),
  \ dotnet#prop('CounterHelp', 'string'),
  \ dotnet#prop('CounterName', 'string'),
  \ dotnet#prop('CounterType', 'PerformanceCounterType'),
  \ dotnet#prop('InstanceLifetime', 'PerformanceCounterInstanceLifetime'),
  \ dotnet#prop('InstanceName', 'string'),
  \ dotnet#prop('ReadOnly', 'bool'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('RawValue', 'int64'),
  \ ])

call dotnet#class('PerformanceCounterCategory', 'Object', [ 
  \ dotnet#method('PerformanceCounterCategory(', ')', 'void'),
  \ dotnet#method('PerformanceCounterCategory(', 'string categoryName)', 'void'),
  \ dotnet#method('PerformanceCounterCategory(', 'string categoryName, string machineName)', 'void'),
  \ dotnet#method('get_CategoryName(', ')', 'string'),
  \ dotnet#method('set_CategoryName(', 'string value)', 'void'),
  \ dotnet#method('get_CategoryHelp(', ')', 'string'),
  \ dotnet#method('get_CategoryType(', ')', 'PerformanceCounterCategoryType'),
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('set_MachineName(', 'string value)', 'void'),
  \ dotnet#method('CounterExists(', 'string counterName)', 'bool'),
  \ dotnet#method('CounterExists(', 'string counterName, string categoryName)', 'static bool'),
  \ dotnet#method('CounterExists(', 'string counterName, string categoryName, string machineName)', 'static bool'),
  \ dotnet#method('Create(', 'string categoryName, string categoryHelp, string counterName, string counterHelp)', 'static PerformanceCounterCategory'),
  \ dotnet#method('Create(', 'string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp)', 'static PerformanceCounterCategory'),
  \ dotnet#method('Create(', 'string categoryName, string categoryHelp, CounterCreationDataCollection counterData)', 'static PerformanceCounterCategory'),
  \ dotnet#method('Create(', 'string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData)', 'static PerformanceCounterCategory'),
  \ dotnet#method('Delete(', 'string categoryName)', 'static void'),
  \ dotnet#method('Exists(', 'string categoryName)', 'static bool'),
  \ dotnet#method('Exists(', 'string categoryName, string machineName)', 'static bool'),
  \ dotnet#method('GetCounters(', ')', 'PerformanceCounter[]'),
  \ dotnet#method('GetCounters(', 'string instanceName)', 'PerformanceCounter[]'),
  \ dotnet#method('GetCategories(', ')', 'static PerformanceCounterCategory[]'),
  \ dotnet#method('GetCategories(', 'string machineName)', 'static PerformanceCounterCategory[]'),
  \ dotnet#method('GetInstanceNames(', ')', 'string[]'),
  \ dotnet#method('InstanceExists(', 'string instanceName)', 'bool'),
  \ dotnet#method('InstanceExists(', 'string instanceName, string categoryName)', 'static bool'),
  \ dotnet#method('InstanceExists(', 'string instanceName, string categoryName, string machineName)', 'static bool'),
  \ dotnet#method('ReadCategory(', ')', 'InstanceDataCollectionCollection'),
  \ dotnet#prop('CategoryName', 'string'),
  \ dotnet#prop('CategoryHelp', 'string'),
  \ dotnet#prop('CategoryType', 'PerformanceCounterCategoryType'),
  \ dotnet#prop('MachineName', 'string'),
  \ ])

call dotnet#class('PerformanceCounterManager', 'Object', [ 
  \ dotnet#method('PerformanceCounterManager(', ')', 'void'),
  \ dotnet#method('CollectData(', 'int32 callIdx, int valueNamePtr, int dataPtr, int32 totalBytes, [out] int& res)', 'void '),
  \ dotnet#method('CloseData(', ')', 'void '),
  \ ])

call dotnet#class('PerformanceCounterPermission', 'ResourcePermissionBase', [ 
  \ dotnet#method('PerformanceCounterPermission(', ')', 'void'),
  \ dotnet#method('PerformanceCounterPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('PerformanceCounterPermission(', 'PerformanceCounterPermissionAccess permissionAccess, string machineName, string categoryName)', 'void'),
  \ dotnet#method('PerformanceCounterPermission(', 'class PerformanceCounterPermissionEntry[] permissionAccessEntries)', 'void'),
  \ dotnet#method('get_PermissionEntries(', ')', 'PerformanceCounterPermissionEntryCollection'),
  \ dotnet#prop('PermissionEntries', 'PerformanceCounterPermissionEntryCollection'),
  \ ])

call dotnet#class('PerformanceCounterPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('PerformanceCounterPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_CategoryName(', ')', 'string'),
  \ dotnet#method('set_CategoryName(', 'string value)', 'void'),
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('set_MachineName(', 'string value)', 'void'),
  \ dotnet#method('get_PermissionAccess(', ')', 'PerformanceCounterPermissionAccess'),
  \ dotnet#method('set_PermissionAccess(', 'PerformanceCounterPermissionAccess value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('CategoryName', 'string'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('PermissionAccess', 'PerformanceCounterPermissionAccess'),
  \ ])

call dotnet#class('PerformanceCounterPermissionEntry', 'Object', [ 
  \ dotnet#method('PerformanceCounterPermissionEntry(', 'PerformanceCounterPermissionAccess permissionAccess, string machineName, string categoryName)', 'void'),
  \ dotnet#method('get_CategoryName(', ')', 'string'),
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('get_PermissionAccess(', ')', 'PerformanceCounterPermissionAccess'),
  \ dotnet#prop('CategoryName', 'string'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('PermissionAccess', 'PerformanceCounterPermissionAccess'),
  \ ])

call dotnet#class('PerformanceCounterPermissionEntryCollection', 'CollectionBase', [ 
  \ dotnet#method('get_Item(', 'int32 index)', 'PerformanceCounterPermissionEntry'),
  \ dotnet#method('set_Item(', 'int32 index, PerformanceCounterPermissionEntry value)', 'void'),
  \ dotnet#method('Add(', 'class PerformanceCounterPermissionEntry value)', 'int32'),
  \ dotnet#method('AddRange(', 'class PerformanceCounterPermissionEntry[] value)', 'void'),
  \ dotnet#method('AddRange(', 'class PerformanceCounterPermissionEntryCollection value)', 'void'),
  \ dotnet#method('Contains(', 'class PerformanceCounterPermissionEntry value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class PerformanceCounterPermissionEntry[] array, int32 index)', 'void'),
  \ dotnet#method('IndexOf(', 'class PerformanceCounterPermissionEntry value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, PerformanceCounterPermissionEntry value)', 'void'),
  \ dotnet#method('Remove(', 'class PerformanceCounterPermissionEntry value)', 'void'),
  \ dotnet#method('OnClear(', ')', 'void'),
  \ dotnet#method('OnInsert(', 'int32 index, object value)', 'void'),
  \ dotnet#method('OnRemove(', 'int32 index, object value)', 'void'),
  \ dotnet#method('OnSet(', 'int32 index, object oldValue, object newValue)', 'void'),
  \ dotnet#prop('Item(int32)', 'PerformanceCounterPermissionEntry'),
  \ ])

call dotnet#class('Process', 'Component', [ 
  \ dotnet#method('add_OutputDataReceived(', 'class DataReceivedEventHandler value)', 'void'),
  \ dotnet#method('remove_OutputDataReceived(', 'class DataReceivedEventHandler value)', 'void'),
  \ dotnet#method('add_ErrorDataReceived(', 'class DataReceivedEventHandler value)', 'void'),
  \ dotnet#method('remove_ErrorDataReceived(', 'class DataReceivedEventHandler value)', 'void'),
  \ dotnet#method('Process(', ')', 'void'),
  \ dotnet#method('get_BasePriority(', ')', 'int32'),
  \ dotnet#method('get_ExitCode(', ')', 'int32'),
  \ dotnet#method('get_HasExited(', ')', 'bool'),
  \ dotnet#method('get_ExitTime(', ')', 'DateTime'),
  \ dotnet#method('get_Handle(', ')', 'int'),
  \ dotnet#method('get_HandleCount(', ')', 'int32'),
  \ dotnet#method('get_Id(', ')', 'int32'),
  \ dotnet#method('get_MachineName(', ')', 'string'),
  \ dotnet#method('get_MainWindowHandle(', ')', 'int'),
  \ dotnet#method('get_MainWindowTitle(', ')', 'string'),
  \ dotnet#method('get_MainModule(', ')', 'ProcessModule'),
  \ dotnet#method('get_MaxWorkingSet(', ')', 'int'),
  \ dotnet#method('set_MaxWorkingSet(', 'native int value)', 'void'),
  \ dotnet#method('get_MinWorkingSet(', ')', 'int'),
  \ dotnet#method('set_MinWorkingSet(', 'native int value)', 'void'),
  \ dotnet#method('get_Modules(', ')', 'ProcessModuleCollection'),
  \ dotnet#method('get_NonpagedSystemMemorySize(', ')', 'int32'),
  \ dotnet#method('get_NonpagedSystemMemorySize64(', ')', 'int64'),
  \ dotnet#method('get_PagedMemorySize(', ')', 'int32'),
  \ dotnet#method('get_PagedMemorySize64(', ')', 'int64'),
  \ dotnet#method('get_PagedSystemMemorySize(', ')', 'int32'),
  \ dotnet#method('get_PagedSystemMemorySize64(', ')', 'int64'),
  \ dotnet#method('get_PeakPagedMemorySize(', ')', 'int32'),
  \ dotnet#method('get_PeakPagedMemorySize64(', ')', 'int64'),
  \ dotnet#method('get_PeakWorkingSet(', ')', 'int32'),
  \ dotnet#method('get_PeakWorkingSet64(', ')', 'int64'),
  \ dotnet#method('get_PeakVirtualMemorySize(', ')', 'int32'),
  \ dotnet#method('get_PeakVirtualMemorySize64(', ')', 'int64'),
  \ dotnet#method('get_PriorityBoostEnabled(', ')', 'bool'),
  \ dotnet#method('set_PriorityBoostEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_PriorityClass(', ')', 'ProcessPriorityClass'),
  \ dotnet#method('set_PriorityClass(', 'ProcessPriorityClass value)', 'void'),
  \ dotnet#method('get_PrivateMemorySize(', ')', 'int32'),
  \ dotnet#method('get_PrivateMemorySize64(', ')', 'int64'),
  \ dotnet#method('get_PrivilegedProcessorTime(', ')', 'TimeSpan'),
  \ dotnet#method('get_ProcessName(', ')', 'string'),
  \ dotnet#method('get_ProcessorAffinity(', ')', 'int'),
  \ dotnet#method('set_ProcessorAffinity(', 'native int value)', 'void'),
  \ dotnet#method('get_Responding(', ')', 'bool'),
  \ dotnet#method('get_SessionId(', ')', 'int32'),
  \ dotnet#method('get_StartInfo(', ')', 'ProcessStartInfo'),
  \ dotnet#method('set_StartInfo(', 'class ProcessStartInfo value)', 'void'),
  \ dotnet#method('get_StartTime(', ')', 'DateTime'),
  \ dotnet#method('get_SynchronizingObject(', ')', 'ISynchronizeInvoke'),
  \ dotnet#method('set_SynchronizingObject(', 'class ISynchronizeInvoke value)', 'void'),
  \ dotnet#method('get_Threads(', ')', 'ProcessThreadCollection'),
  \ dotnet#method('get_TotalProcessorTime(', ')', 'TimeSpan'),
  \ dotnet#method('get_UserProcessorTime(', ')', 'TimeSpan'),
  \ dotnet#method('get_VirtualMemorySize(', ')', 'int32'),
  \ dotnet#method('get_VirtualMemorySize64(', ')', 'int64'),
  \ dotnet#method('get_EnableRaisingEvents(', ')', 'bool'),
  \ dotnet#method('set_EnableRaisingEvents(', 'bool value)', 'void'),
  \ dotnet#method('get_StandardInput(', ')', 'StreamWriter'),
  \ dotnet#method('get_StandardOutput(', ')', 'StreamReader'),
  \ dotnet#method('get_StandardError(', ')', 'StreamReader'),
  \ dotnet#method('get_WorkingSet(', ')', 'int32'),
  \ dotnet#method('get_WorkingSet64(', ')', 'int64'),
  \ dotnet#method('add_Exited(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Exited(', 'class EventHandler value)', 'void'),
  \ dotnet#method('CloseMainWindow(', ')', 'bool'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('EnterDebugMode(', ')', 'static void'),
  \ dotnet#method('LeaveDebugMode(', ')', 'static void'),
  \ dotnet#method('GetProcessById(', 'int32 processId, string machineName)', 'static Process'),
  \ dotnet#method('GetProcessById(', 'int32 processId)', 'static Process'),
  \ dotnet#method('GetProcessesByName(', 'string processName)', 'static Process[]'),
  \ dotnet#method('GetProcessesByName(', 'string processName, string machineName)', 'static Process[]'),
  \ dotnet#method('GetProcesses(', ')', 'static Process[]'),
  \ dotnet#method('GetProcesses(', 'string machineName)', 'static Process[]'),
  \ dotnet#method('GetCurrentProcess(', ')', 'static Process'),
  \ dotnet#method('OnExited(', ')', 'void'),
  \ dotnet#method('Refresh(', ')', 'void'),
  \ dotnet#method('Start(', ')', 'bool'),
  \ dotnet#method('Start(', 'string fileName, string userName, SecureString password, string domain)', 'static Process'),
  \ dotnet#method('Start(', 'string fileName, string arguments, string userName, SecureString password, string domain)', 'static Process'),
  \ dotnet#method('Start(', 'string fileName)', 'static Process'),
  \ dotnet#method('Start(', 'string fileName, string arguments)', 'static Process'),
  \ dotnet#method('Start(', 'class ProcessStartInfo startInfo)', 'static Process'),
  \ dotnet#method('Kill(', ')', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('WaitForExit(', 'int32 milliseconds)', 'bool'),
  \ dotnet#method('WaitForExit(', ')', 'void'),
  \ dotnet#method('WaitForInputIdle(', 'int32 milliseconds)', 'bool'),
  \ dotnet#method('WaitForInputIdle(', ')', 'bool'),
  \ dotnet#method('BeginOutputReadLine(', ')', 'void'),
  \ dotnet#method('BeginErrorReadLine(', ')', 'void'),
  \ dotnet#method('CancelOutputRead(', ')', 'void'),
  \ dotnet#method('CancelErrorRead(', ')', 'void'),
  \ dotnet#method('Process(', ')', 'static void .'),
  \ dotnet#event('OutputDataReceived', 'DataReceivedEventHandler'),
  \ dotnet#event('ErrorDataReceived', 'DataReceivedEventHandler'),
  \ dotnet#event('Exited', 'EventHandler'),
  \ dotnet#prop('BasePriority', 'int32'),
  \ dotnet#prop('ExitCode', 'int32'),
  \ dotnet#prop('HasExited', 'bool'),
  \ dotnet#prop('ExitTime', 'DateTime'),
  \ dotnet#prop('Handle', 'int'),
  \ dotnet#prop('HandleCount', 'int32'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('MainWindowHandle', 'int'),
  \ dotnet#prop('MainWindowTitle', 'string'),
  \ dotnet#prop('MainModule', 'ProcessModule'),
  \ dotnet#prop('MaxWorkingSet', 'int'),
  \ dotnet#prop('MinWorkingSet', 'int'),
  \ dotnet#prop('Modules', 'ProcessModuleCollection'),
  \ dotnet#prop('NonpagedSystemMemorySize', 'int32'),
  \ dotnet#prop('NonpagedSystemMemorySize64', 'int64'),
  \ dotnet#prop('PagedMemorySize', 'int32'),
  \ dotnet#prop('PagedMemorySize64', 'int64'),
  \ dotnet#prop('PagedSystemMemorySize', 'int32'),
  \ dotnet#prop('PagedSystemMemorySize64', 'int64'),
  \ dotnet#prop('PeakPagedMemorySize', 'int32'),
  \ dotnet#prop('PeakPagedMemorySize64', 'int64'),
  \ dotnet#prop('PeakWorkingSet', 'int32'),
  \ dotnet#prop('PeakWorkingSet64', 'int64'),
  \ dotnet#prop('PeakVirtualMemorySize', 'int32'),
  \ dotnet#prop('PeakVirtualMemorySize64', 'int64'),
  \ dotnet#prop('PriorityBoostEnabled', 'bool'),
  \ dotnet#prop('PriorityClass', 'ProcessPriorityClass'),
  \ dotnet#prop('PrivateMemorySize', 'int32'),
  \ dotnet#prop('PrivateMemorySize64', 'int64'),
  \ dotnet#prop('PrivilegedProcessorTime', 'TimeSpan'),
  \ dotnet#prop('ProcessName', 'string'),
  \ dotnet#prop('ProcessorAffinity', 'int'),
  \ dotnet#prop('Responding', 'bool'),
  \ dotnet#prop('SessionId', 'int32'),
  \ dotnet#prop('StartInfo', 'ProcessStartInfo'),
  \ dotnet#prop('StartTime', 'DateTime'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ dotnet#prop('Threads', 'ProcessThreadCollection'),
  \ dotnet#prop('TotalProcessorTime', 'TimeSpan'),
  \ dotnet#prop('UserProcessorTime', 'TimeSpan'),
  \ dotnet#prop('VirtualMemorySize', 'int32'),
  \ dotnet#prop('VirtualMemorySize64', 'int64'),
  \ dotnet#prop('EnableRaisingEvents', 'bool'),
  \ dotnet#prop('StandardInput', 'StreamWriter'),
  \ dotnet#prop('StandardOutput', 'StreamReader'),
  \ dotnet#prop('StandardError', 'StreamReader'),
  \ dotnet#prop('WorkingSet', 'int32'),
  \ dotnet#prop('WorkingSet64', 'int64'),
  \ ])

call dotnet#class('ProcessModule', 'Component', [ 
  \ dotnet#method('get_ModuleName(', ')', 'string'),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('get_BaseAddress(', ')', 'int'),
  \ dotnet#method('get_ModuleMemorySize(', ')', 'int32'),
  \ dotnet#method('get_EntryPointAddress(', ')', 'int'),
  \ dotnet#method('get_FileVersionInfo(', ')', 'FileVersionInfo'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('ModuleName', 'string'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('BaseAddress', 'int'),
  \ dotnet#prop('ModuleMemorySize', 'int32'),
  \ dotnet#prop('EntryPointAddress', 'int'),
  \ dotnet#prop('FileVersionInfo', 'FileVersionInfo'),
  \ ])

call dotnet#class('ProcessModuleCollection', 'ReadOnlyCollectionBase', [ 
  \ dotnet#method('ProcessModuleCollection(', ')', 'void'),
  \ dotnet#method('ProcessModuleCollection(', 'class ProcessModule[] processModules)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'ProcessModule'),
  \ dotnet#method('IndexOf(', 'class ProcessModule)', 'int32'),
  \ dotnet#method('Contains(', 'class ProcessModule)', 'bool'),
  \ dotnet#method('CopyTo(', 'class ProcessModule[] array, int32 index)', 'void'),
  \ dotnet#prop('Item(int32)', 'ProcessModule'),
  \ ])

call dotnet#class('ProcessStartInfo', 'Object', [ 
  \ dotnet#method('ProcessStartInfo(', ')', 'void'),
  \ dotnet#method('ProcessStartInfo(', 'string fileName)', 'void'),
  \ dotnet#method('ProcessStartInfo(', 'string fileName, string arguments)', 'void'),
  \ dotnet#method('get_Verb(', ')', 'string'),
  \ dotnet#method('set_Verb(', 'string value)', 'void'),
  \ dotnet#method('get_Arguments(', ')', 'string'),
  \ dotnet#method('set_Arguments(', 'string value)', 'void'),
  \ dotnet#method('get_CreateNoWindow(', ')', 'bool'),
  \ dotnet#method('set_CreateNoWindow(', 'bool value)', 'void'),
  \ dotnet#method('get_EnvironmentVariables(', ')', 'StringDictionary'),
  \ dotnet#method('get_RedirectStandardInput(', ')', 'bool'),
  \ dotnet#method('set_RedirectStandardInput(', 'bool value)', 'void'),
  \ dotnet#method('get_RedirectStandardOutput(', ')', 'bool'),
  \ dotnet#method('set_RedirectStandardOutput(', 'bool value)', 'void'),
  \ dotnet#method('get_RedirectStandardError(', ')', 'bool'),
  \ dotnet#method('set_RedirectStandardError(', 'bool value)', 'void'),
  \ dotnet#method('get_StandardErrorEncoding(', ')', 'Encoding'),
  \ dotnet#method('set_StandardErrorEncoding(', 'class Encoding value)', 'void'),
  \ dotnet#method('get_StandardOutputEncoding(', ')', 'Encoding'),
  \ dotnet#method('set_StandardOutputEncoding(', 'class Encoding value)', 'void'),
  \ dotnet#method('get_UseShellExecute(', ')', 'bool'),
  \ dotnet#method('set_UseShellExecute(', 'bool value)', 'void'),
  \ dotnet#method('get_Verbs(', ')', 'string[]'),
  \ dotnet#method('get_UserName(', ')', 'string'),
  \ dotnet#method('set_UserName(', 'string value)', 'void'),
  \ dotnet#method('get_Password(', ')', 'SecureString'),
  \ dotnet#method('set_Password(', 'class SecureString value)', 'void'),
  \ dotnet#method('get_Domain(', ')', 'string'),
  \ dotnet#method('set_Domain(', 'string value)', 'void'),
  \ dotnet#method('get_LoadUserProfile(', ')', 'bool'),
  \ dotnet#method('set_LoadUserProfile(', 'bool value)', 'void'),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('set_FileName(', 'string value)', 'void'),
  \ dotnet#method('get_WorkingDirProcessStartInfoy(', ')', 'string'),
  \ dotnet#method('set_WorkingDirProcessStartInfoy(', 'string value)', 'void'),
  \ dotnet#method('get_ErrorDialog(', ')', 'bool'),
  \ dotnet#method('set_ErrorDialog(', 'bool value)', 'void'),
  \ dotnet#method('get_ErrorDialogParentHandle(', ')', 'int'),
  \ dotnet#method('set_ErrorDialogParentHandle(', 'native int value)', 'void'),
  \ dotnet#method('get_WindowStyle(', ')', 'ProcessWindowStyle'),
  \ dotnet#method('set_WindowStyle(', 'ProcessWindowStyle value)', 'void'),
  \ dotnet#prop('Verb', 'string'),
  \ dotnet#prop('Arguments', 'string'),
  \ dotnet#prop('CreateNoWindow', 'bool'),
  \ dotnet#prop('EnvironmentVariables', 'StringDictionary'),
  \ dotnet#prop('RedirectStandardInput', 'bool'),
  \ dotnet#prop('RedirectStandardOutput', 'bool'),
  \ dotnet#prop('RedirectStandardError', 'bool'),
  \ dotnet#prop('StandardErrorEncoding', 'Encoding'),
  \ dotnet#prop('StandardOutputEncoding', 'Encoding'),
  \ dotnet#prop('UseShellExecute', 'bool'),
  \ dotnet#prop('Verbs', 'string[]'),
  \ dotnet#prop('UserName', 'string'),
  \ dotnet#prop('Password', 'SecureString'),
  \ dotnet#prop('Domain', 'string'),
  \ dotnet#prop('LoadUserProfile', 'bool'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('WorkingDirProcessStartInfoy', 'string'),
  \ dotnet#prop('ErrorDialog', 'bool'),
  \ dotnet#prop('ErrorDialogParentHandle', 'int'),
  \ dotnet#prop('WindowStyle', 'ProcessWindowStyle'),
  \ ])

call dotnet#class('ProcessThread', 'Component', [ 
  \ dotnet#method('get_BasePriority(', ')', 'int32'),
  \ dotnet#method('get_CurrentPriority(', ')', 'int32'),
  \ dotnet#method('get_Id(', ')', 'int32'),
  \ dotnet#method('set_IdealProcessor(', 'int32 value)', 'void'),
  \ dotnet#method('get_PriorityBoostEnabled(', ')', 'bool'),
  \ dotnet#method('set_PriorityBoostEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_PriorityLevel(', ')', 'ThreadPriorityLevel'),
  \ dotnet#method('set_PriorityLevel(', 'ThreadPriorityLevel value)', 'void'),
  \ dotnet#method('get_PrivilegedProcessorTime(', ')', 'TimeSpan'),
  \ dotnet#method('get_StartAddress(', ')', 'int'),
  \ dotnet#method('get_StartTime(', ')', 'DateTime'),
  \ dotnet#method('get_ThreadState(', ')', 'ThreadState'),
  \ dotnet#method('get_TotalProcessorTime(', ')', 'TimeSpan'),
  \ dotnet#method('get_UserProcessorTime(', ')', 'TimeSpan'),
  \ dotnet#method('get_WaitReason(', ')', 'ThreadWaitReason'),
  \ dotnet#method('ResetIdealProcessor(', ')', 'void'),
  \ dotnet#method('set_ProcessorAffinity(', 'native int value)', 'void'),
  \ dotnet#prop('BasePriority', 'int32'),
  \ dotnet#prop('CurrentPriority', 'int32'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('IdealProcessor', 'int32'),
  \ dotnet#prop('PriorityBoostEnabled', 'bool'),
  \ dotnet#prop('PriorityLevel', 'ThreadPriorityLevel'),
  \ dotnet#prop('PrivilegedProcessorTime', 'TimeSpan'),
  \ dotnet#prop('StartAddress', 'int'),
  \ dotnet#prop('StartTime', 'DateTime'),
  \ dotnet#prop('ThreadState', 'ThreadState'),
  \ dotnet#prop('TotalProcessorTime', 'TimeSpan'),
  \ dotnet#prop('UserProcessorTime', 'TimeSpan'),
  \ dotnet#prop('WaitReason', 'ThreadWaitReason'),
  \ dotnet#prop('ProcessorAffinity', 'int'),
  \ ])

call dotnet#class('ProcessThreadCollection', 'ReadOnlyCollectionBase', [ 
  \ dotnet#method('ProcessThreadCollection(', ')', 'void'),
  \ dotnet#method('ProcessThreadCollection(', 'class ProcessThread[] processThreads)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'ProcessThread'),
  \ dotnet#method('Add(', 'class ProcessThread thread)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, ProcessThread thread)', 'void'),
  \ dotnet#method('IndexOf(', 'class ProcessThread thread)', 'int32'),
  \ dotnet#method('Contains(', 'class ProcessThread thread)', 'bool'),
  \ dotnet#method('Remove(', 'class ProcessThread thread)', 'void'),
  \ dotnet#method('CopyTo(', 'class ProcessThread[] array, int32 index)', 'void'),
  \ dotnet#prop('Item(int32)', 'ProcessThread'),
  \ ])

call dotnet#class('Stopwatch', 'Object', [ 
  \ dotnet#method('Stopwatch(', ')', 'void'),
  \ dotnet#method('Start(', ')', 'void'),
  \ dotnet#method('StartNew(', ')', 'static Stopwatch'),
  \ dotnet#method('Stop(', ')', 'void'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('Restart(', ')', 'void'),
  \ dotnet#method('get_IsRunning(', ')', 'bool'),
  \ dotnet#method('get_Elapsed(', ')', 'TimeSpan'),
  \ dotnet#method('get_ElapsedMilliseconds(', ')', 'int64'),
  \ dotnet#method('get_ElapsedTicks(', ')', 'int64'),
  \ dotnet#method('GetTimestamp(', ')', 'static int64'),
  \ dotnet#method('Stopwatch(', ')', 'static void .'),
  \ dotnet#prop('IsRunning', 'bool'),
  \ dotnet#prop('Elapsed', 'TimeSpan'),
  \ dotnet#prop('ElapsedMilliseconds', 'int64'),
  \ dotnet#prop('ElapsedTicks', 'int64'),
  \ ])

