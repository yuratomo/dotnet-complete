call dotnet#namespace('System.Security.Policy')

call dotnet#class('EvidenceBase', 'Object', [ 
  \ dotnet#method('EvidenceBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', ''),
  \ ])

call dotnet#class('AllMembershipCondition', 'Object', [ 
  \ dotnet#method('AllMembershipCondition(', ')', 'void'),
  \ dotnet#method('Check(', 'class Evidence evidence)', 'bool'),
  \ dotnet#method('Check(', 'class Evidence evidence, [out] object& usedEvidence)', 'bool '),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ ])

call dotnet#class('ApplicationDirApplicationDirectoryy', 'EvidenceBase', [ 
  \ dotnet#method('ApplicationDirectory(', 'string name)', 'void'),
  \ dotnet#method('get_DirApplicationDirectoryy(', ')', 'string'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Clone(', ')', 'EvidenceBase'),
  \ dotnet#method('Copy(', ')', 'object'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('DirApplicationDirectoryy', 'string'),
  \ ])

call dotnet#class('ApplicationDirApplicationDirectoryMembershipConditionyMembershipCondition', 'Object', [ 
  \ dotnet#method('ApplicationDirectoryMembershipCondition(', ')', 'void'),
  \ dotnet#method('Check(', 'class Evidence evidence)', 'bool'),
  \ dotnet#method('Check(', 'class Evidence evidence, [out] object& usedEvidence)', 'bool '),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ ])

call dotnet#class('ApplicationSecurityInfo', 'Object', [ 
  \ dotnet#method('ApplicationSecurityInfo(', ')', 'void'),
  \ dotnet#method('ApplicationSecurityInfo(', 'class ActivationContext activationContext)', 'void'),
  \ dotnet#method('get_ApplicationId(', ')', 'ApplicationId'),
  \ dotnet#method('set_ApplicationId(', 'class ApplicationId value)', 'void'),
  \ dotnet#method('get_DeploymentId(', ')', 'ApplicationId'),
  \ dotnet#method('set_DeploymentId(', 'class ApplicationId value)', 'void'),
  \ dotnet#method('get_DefaultRequestSet(', ')', 'PermissionSet'),
  \ dotnet#method('set_DefaultRequestSet(', 'class PermissionSet value)', 'void'),
  \ dotnet#method('get_ApplicationEvidence(', ')', 'Evidence'),
  \ dotnet#method('set_ApplicationEvidence(', 'class Evidence value)', 'void'),
  \ dotnet#prop('ApplicationId', 'ApplicationId'),
  \ dotnet#prop('DeploymentId', 'ApplicationId'),
  \ dotnet#prop('DefaultRequestSet', 'PermissionSet'),
  \ dotnet#prop('ApplicationEvidence', 'Evidence'),
  \ ])

call dotnet#class('ApplicationSecurityManager', 'Object', [ 
  \ dotnet#method('ApplicationSecurityManager(', ')', 'static void .'),
  \ dotnet#method('DetermineApplicationTrust(', 'class ActivationContext activationContext, TrustManagerContext context)', 'static bool'),
  \ dotnet#method('get_UserApplicationTrusts(', ')', 'static'),
  \ dotnet#method('get_ApplicationTrustManager(', ')', 'static'),
  \ dotnet#method('DetermineApplicationTrustInternal(', 'class ActivationContext activationContext, TrustManagerContext context)', 'static ApplicationTrust'),
  \ dotnet#prop('UserApplicationTrusts', 'ApplicationTrustCollection'),
  \ dotnet#prop('ApplicationTrustManager', 'IApplicationTrustManager'),
  \ ])

call dotnet#class('ApplicationTrust', 'EvidenceBase', [ 
  \ dotnet#method('ApplicationTrust(', 'class ApplicationIdentity applicationIdentity)', 'void'),
  \ dotnet#method('ApplicationTrust(', ')', 'void'),
  \ dotnet#method('ApplicationTrust(', 'class PermissionSet defaultGrantSet)', 'void'),
  \ dotnet#method('ApplicationTrust(', 'class PermissionSet defaultGrantSet, IEnumerable fullTrustAssemblies)', 'void'),
  \ dotnet#method('get_ApplicationIdentity(', ')', 'ApplicationIdentity'),
  \ dotnet#method('set_ApplicationIdentity(', 'class ApplicationIdentity value)', 'void'),
  \ dotnet#method('get_DefaultGrantSet(', ')', 'PolicyStatement'),
  \ dotnet#method('set_DefaultGrantSet(', 'class PolicyStatement value)', 'void'),
  \ dotnet#method('get_FullTrustAssemblies(', ')', 'IList'),
  \ dotnet#method('get_IsApplicationTrustedToRun(', ')', 'bool'),
  \ dotnet#method('set_IsApplicationTrustedToRun(', 'bool value)', 'void'),
  \ dotnet#method('get_Persist(', ')', 'bool'),
  \ dotnet#method('set_Persist(', 'bool value)', 'void'),
  \ dotnet#method('get_ExtraInfo(', ')', 'object'),
  \ dotnet#method('set_ExtraInfo(', 'object value)', 'void'),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement element)', 'void'),
  \ dotnet#prop('ApplicationIdentity', 'ApplicationIdentity'),
  \ dotnet#prop('DefaultGrantSet', 'PolicyStatement'),
  \ dotnet#prop('FullTrustAssemblies', 'IList'),
  \ dotnet#prop('IsApplicationTrustedToRun', 'bool'),
  \ dotnet#prop('Persist', 'bool'),
  \ dotnet#prop('ExtraInfo', 'object'),
  \ ])

call dotnet#class('ApplicationTrustCollection', 'Object', [ 
  \ dotnet#method('ApplicationTrustCollection(', ')', 'void'),
  \ dotnet#method('ApplicationTrustCollection(', 'bool storeBounded)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Item(', 'int32 index)', 'ApplicationTrust'),
  \ dotnet#method('get_Item(', 'string appFullName)', 'ApplicationTrust'),
  \ dotnet#method('Add(', 'class ApplicationTrust trust)', 'int32'),
  \ dotnet#method('AddRange(', 'class ApplicationTrust[] trusts)', 'void'),
  \ dotnet#method('AddRange(', 'class ApplicationTrustCollection trusts)', 'void'),
  \ dotnet#method('Find(', 'class ApplicationIdentity applicationIdentity, ApplicationVersionMatch versionMatch)', 'ApplicationTrustCollection'),
  \ dotnet#method('Remove(', 'class ApplicationIdentity applicationIdentity, ApplicationVersionMatch versionMatch)', 'void'),
  \ dotnet#method('Remove(', 'class ApplicationTrust trust)', 'void'),
  \ dotnet#method('RemoveRange(', 'class ApplicationTrust[] trusts)', 'void'),
  \ dotnet#method('RemoveRange(', 'class ApplicationTrustCollection trusts)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'ApplicationTrustEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class ApplicationTrust[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('ApplicationTrustCollection(', ')', 'static void .'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'ApplicationTrust'),
  \ dotnet#prop('Item(string)', 'ApplicationTrust'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('CodeGroup', 'Object', [ 
  \ dotnet#method('CodeGroup(', ')', 'void'),
  \ dotnet#method('CodeGroup(', 'class IMembershipCondition membershipCondition, PermissionSet permSet)', 'void'),
  \ dotnet#method('CodeGroup(', 'class IMembershipCondition membershipCondition, PolicyStatement policy)', 'void'),
  \ dotnet#method('AddChild(', 'class CodeGroup group)', 'void'),
  \ dotnet#method('AddChildInternal(', 'class CodeGroup group)', 'void'),
  \ dotnet#method('RemoveChild(', 'class CodeGroup group)', 'void'),
  \ dotnet#method('get_Children(', ')', 'IList'),
  \ dotnet#method('set_Children(', 'class IList value)', 'void'),
  \ dotnet#method('GetChildrenInternal(', ')', 'IList'),
  \ dotnet#method('get_MembershipCondition(', ')', 'IMembershipCondition'),
  \ dotnet#method('set_MembershipCondition(', 'class IMembershipCondition value)', 'void'),
  \ dotnet#method('get_PolicyStatement(', ')', 'PolicyStatement'),
  \ dotnet#method('set_PolicyStatement(', 'class PolicyStatement value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#method('set_Description(', 'string value)', 'void'),
  \ dotnet#method('Resolve(', 'class Evidence evidence)', 'abstract'),
  \ dotnet#method('ResolveMatchingCodeGroups(', 'class Evidence evidence)', 'abstract'),
  \ dotnet#method('Copy(', ')', 'abstract'),
  \ dotnet#method('get_PermissionSetName(', ')', 'string'),
  \ dotnet#method('get_AttributeString(', ')', 'string'),
  \ dotnet#method('get_MergeLogic(', ')', 'abstract string'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', 'SecurityElement'),
  \ dotnet#method('GetTypeName(', ')', 'strict string'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level, string policyClassName)', 'SecurityElement'),
  \ dotnet#method('CreateXml(', 'class SecurityElement element, PolicyLevel level)', 'void'),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('ParseXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('ParseChildren(', ')', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'class CodeGroup cg, bool compareChildren)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Children', 'IList'),
  \ dotnet#prop('MembershipCondition', 'IMembershipCondition'),
  \ dotnet#prop('PolicyStatement', 'PolicyStatement'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ dotnet#prop('PermissionSetName', 'string'),
  \ dotnet#prop('AttributeString', 'string'),
  \ dotnet#prop('MergeLogic', 'string'),
  \ ])

call dotnet#class('Evidence', 'Object', [ 
  \ dotnet#method('Evidence(', 'class Evidence evidence, IEnumerable evidenceTypes, bool hostEnumerator)', 'void'),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#prop('Current', 'EvidenceBase'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('Evidence(', ')', 'void'),
  \ dotnet#method('Evidence(', 'class Evidence evidence)', 'void'),
  \ dotnet#method('Evidence(', 'object[] hostEvidence, object[] assemblyEvidence)', 'void'),
  \ dotnet#method('Evidence(', 'class EvidenceBase[] hostEvidence, EvidenceBase[] assemblyEvidence)', 'void'),
  \ dotnet#method('Evidence(', 'class IRuntimeEvidenceFEvidencey target)', 'void'),
  \ dotnet#method('get_RuntimeEvidenceTypes(', ')', 'static Type[]'),
  \ dotnet#method('AddHost(', 'object id)', 'void'),
  \ dotnet#method('AddAssembly(', 'object id)', 'void'),
  \ dotnet#method('AddAssemblyEvidence(', '!!T evidence)', 'void'),
  \ dotnet#method('AddHostEvidence(', '!!T evidence)', 'void'),
  \ dotnet#method('get_IsUnmodified(', ')', 'bool'),
  \ dotnet#method('get_Locked(', ')', 'bool'),
  \ dotnet#method('set_Locked(', 'bool value)', 'void'),
  \ dotnet#method('get_Target(', ')', '.method'),
  \ dotnet#method('set_Target(', 'class IRuntimeEvidenceFEvidencey value)', 'void'),
  \ dotnet#method('GetEvidenceTypeDescriptor(', 'class Type evidenceType)', 'EvidenceTypeDescriptor'),
  \ dotnet#method('Merge(', 'class Evidence evidence)', 'void'),
  \ dotnet#method('MergeWithNoDuplicates(', 'class Evidence evidence)', 'void'),
  \ dotnet#method('RawSerialize(', ')', 'uint8[]'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('GetHostEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('GetAssemblyEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('GetRawAssemblyEvidenceEnumerator(', ')', 'Evidence/RawEvidenceEnumerator'),
  \ dotnet#method('GetRawHostEvidenceEnumerator(', ')', 'Evidence/RawEvidenceEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetAssemblyEvidence(', ')', '!!T'),
  \ dotnet#method('GetAssemblyEvidence(', 'class Type type)', 'EvidenceBase'),
  \ dotnet#method('GetHostEvidence(', ')', '!!T'),
  \ dotnet#method('GetDelayEvaluatedHostEvidence(', ')', '!!T'),
  \ dotnet#method('GetHostEvidence(', 'class Type type)', 'EvidenceBase'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_RawCount(', ')', 'int32'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Clone(', ')', 'Evidence'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('RemoveType(', 'class Type t)', 'void'),
  \ dotnet#method('MarkAllEvidenceAsUsed(', ')', 'void'),
  \ dotnet#prop('RuntimeEvidenceTypes', 'Type[]'),
  \ dotnet#prop('IsUnmodified', 'bool'),
  \ dotnet#prop('Locked', 'bool'),
  \ dotnet#prop('Target', 'IRuntimeEvidenceFEvidencey'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('RawCount', 'int32'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ ])

call dotnet#class('FileCodeGroup', 'CodeGroup', [ 
  \ dotnet#method('FileCodeGroup(', ')', 'void'),
  \ dotnet#method('FileCodeGroup(', 'class IMembershipCondition membershipCondition, FileIOPermissionAccess access)', 'void'),
  \ dotnet#method('Resolve(', 'class Evidence evidence)', 'PolicyStatement'),
  \ dotnet#method('InternalResolve(', 'class Evidence evidence)', ''),
  \ dotnet#method('ResolveMatchingCodeGroups(', 'class Evidence evidence)', 'CodeGroup'),
  \ dotnet#method('CalculatePolicy(', 'class Url url)', 'PolicyStatement'),
  \ dotnet#method('Copy(', ')', 'CodeGroup'),
  \ dotnet#method('get_MergeLogic(', ')', 'string'),
  \ dotnet#method('get_PermissionSetName(', ')', 'string'),
  \ dotnet#method('get_AttributeString(', ')', 'string'),
  \ dotnet#method('CreateXml(', 'class SecurityElement element, PolicyLevel level)', 'void'),
  \ dotnet#method('ParseXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetTypeName(', ')', 'strict string'),
  \ dotnet#prop('MergeLogic', 'string'),
  \ dotnet#prop('PermissionSetName', 'string'),
  \ dotnet#prop('AttributeString', 'string'),
  \ ])

call dotnet#class('FirstMatchCodeGroup', 'CodeGroup', [ 
  \ dotnet#method('FirstMatchCodeGroup(', ')', 'void'),
  \ dotnet#method('FirstMatchCodeGroup(', 'class IMembershipCondition membershipCondition, PolicyStatement policy)', 'void'),
  \ dotnet#method('Resolve(', 'class Evidence evidence)', 'PolicyStatement'),
  \ dotnet#method('ResolveMatchingCodeGroups(', 'class Evidence evidence)', 'CodeGroup'),
  \ dotnet#method('Copy(', ')', 'CodeGroup'),
  \ dotnet#method('get_MergeLogic(', ')', 'string'),
  \ dotnet#method('GetTypeName(', ')', 'strict string'),
  \ dotnet#prop('MergeLogic', 'string'),
  \ ])

call dotnet#class('TrustManagerContext', 'Object', [ 
  \ dotnet#method('TrustManagerContext(', ')', 'void'),
  \ dotnet#method('TrustManagerContext(', 'TrustManagerUIContext uiContext)', 'void'),
  \ dotnet#method('get_UIContext(', ')', ''),
  \ dotnet#method('set_UIContext(', 'TrustManagerUIContext value)', 'void'),
  \ dotnet#method('get_NoPrompt(', ')', 'bool'),
  \ dotnet#method('set_NoPrompt(', 'bool value)', 'void'),
  \ dotnet#method('get_IgnorePersistedDecision(', ')', 'bool'),
  \ dotnet#method('set_IgnorePersistedDecision(', 'bool value)', 'void'),
  \ dotnet#method('get_KeepAlive(', ')', 'bool'),
  \ dotnet#method('set_KeepAlive(', 'bool value)', 'void'),
  \ dotnet#method('get_Persist(', ')', 'bool'),
  \ dotnet#method('set_Persist(', 'bool value)', 'void'),
  \ dotnet#method('get_PreviousApplicationIdentity(', ')', ''),
  \ dotnet#method('set_PreviousApplicationIdentity(', 'class ApplicationIdentity value)', 'void'),
  \ dotnet#prop('UIContext', 'TrustManagerUIContext'),
  \ dotnet#prop('NoPrompt', 'bool'),
  \ dotnet#prop('IgnorePersistedDecision', 'bool'),
  \ dotnet#prop('KeepAlive', 'bool'),
  \ dotnet#prop('Persist', 'bool'),
  \ dotnet#prop('PreviousApplicationIdentity', 'ApplicationIdentity'),
  \ ])

call dotnet#class('CodeConnectAccess', 'Object', [ 
  \ dotnet#method('CodeConnectAccess(', 'string allowScheme, int32 allowPort)', 'void'),
  \ dotnet#method('CreateOriginSchemeAccess(', 'int32 allowPort)', 'static CodeConnectAccess'),
  \ dotnet#method('CreateAnySchemeAccess(', 'int32 allowPort)', 'static CodeConnectAccess'),
  \ dotnet#method('CodeConnectAccess(', ')', 'void'),
  \ dotnet#method('get_Scheme(', ')', 'string'),
  \ dotnet#method('get_Port(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('CodeConnectAccess(', 'string allowScheme, string allowPort)', 'void'),
  \ dotnet#method('get_IsOriginScheme(', ')', 'bool'),
  \ dotnet#method('get_IsAnyScheme(', ')', 'bool'),
  \ dotnet#method('get_IsDefaultPort(', ')', 'bool'),
  \ dotnet#method('get_IsOriginPort(', ')', 'bool'),
  \ dotnet#method('get_StrPort(', ')', 'string'),
  \ dotnet#method('IsValidScheme(', 'string scheme)', 'static bool'),
  \ dotnet#method('CodeConnectAccess(', ')', 'static void .'),
  \ dotnet#prop('Scheme', 'string'),
  \ dotnet#prop('Port', 'int32'),
  \ dotnet#prop('IsOriginScheme', 'bool'),
  \ dotnet#prop('IsAnyScheme', 'bool'),
  \ dotnet#prop('IsDefaultPort', 'bool'),
  \ dotnet#prop('IsOriginPort', 'bool'),
  \ dotnet#prop('StrPort', 'string'),
  \ ])

call dotnet#class('NetCodeGroup', 'CodeGroup', [ 
  \ dotnet#method('NetCodeGroup(', ')', 'void'),
  \ dotnet#method('NetCodeGroup(', 'class IMembershipCondition membershipCondition)', 'void'),
  \ dotnet#method('ResetConnectAccess(', ')', 'void'),
  \ dotnet#method('AddConnectAccess(', 'string originScheme, CodeConnectAccess connectAccess)', 'void'),
  \ dotnet#method('GetConnectAccessRules(', ')', 'DictionaryEntry[]'),
  \ dotnet#method('Resolve(', 'class Evidence evidence)', 'PolicyStatement'),
  \ dotnet#method('InternalResolve(', 'class Evidence evidence)', ''),
  \ dotnet#method('ResolveMatchingCodeGroups(', 'class Evidence evidence)', 'CodeGroup'),
  \ dotnet#method('CreateWebPermission(', 'string host, string scheme, string port, string assemblyOverride)', 'SecurityElement'),
  \ dotnet#method('CalculatePolicy(', 'string host, string scheme, string port)', 'PolicyStatement'),
  \ dotnet#method('Copy(', ')', 'CodeGroup'),
  \ dotnet#method('get_MergeLogic(', ')', 'string'),
  \ dotnet#method('get_PermissionSetName(', ')', 'string'),
  \ dotnet#method('get_AttributeString(', ')', 'string'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('CreateXml(', 'class SecurityElement element, PolicyLevel level)', 'void'),
  \ dotnet#method('ParseXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('GetTypeName(', ')', 'strict string'),
  \ dotnet#method('NetCodeGroup(', ')', 'static void .'),
  \ dotnet#prop('MergeLogic', 'string'),
  \ dotnet#prop('PermissionSetName', 'string'),
  \ dotnet#prop('AttributeString', 'string'),
  \ ])

call dotnet#class('PermissionRequestEvidence', 'EvidenceBase', [ 
  \ dotnet#method('PermissionRequestEvidence(', 'class PermissionSet request, PermissionSet optional, PermissionSet denied)', 'void'),
  \ dotnet#method('get_RequestedPermissions(', ')', 'PermissionSet'),
  \ dotnet#method('get_OptionalPermissions(', ')', 'PermissionSet'),
  \ dotnet#method('get_DeniedPermissions(', ')', 'PermissionSet'),
  \ dotnet#method('Clone(', ')', 'EvidenceBase'),
  \ dotnet#method('Copy(', ')', 'PermissionRequestEvidence'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('RequestedPermissions', 'PermissionSet'),
  \ dotnet#prop('OptionalPermissions', 'PermissionSet'),
  \ dotnet#prop('DeniedPermissions', 'PermissionSet'),
  \ ])

call dotnet#class('PolicyException', 'SystemException', [ 
  \ dotnet#method('PolicyException(', ')', 'void'),
  \ dotnet#method('PolicyException(', 'string message)', 'void'),
  \ dotnet#method('PolicyException(', 'string message, Exception exception)', 'void'),
  \ dotnet#method('PolicyException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('PolicyException(', 'string message, int32 hresult)', 'void'),
  \ dotnet#method('PolicyException(', 'string message, int32 hresult, Exception exception)', 'void'),
  \ ])

call dotnet#class('PolicyLevel', 'Object', [ 
  \ dotnet#method('PolicyLevel(', ')', 'static void .'),
  \ dotnet#method('PolicyLevel(', ')', 'void'),
  \ dotnet#method('PolicyLevel(', 'PolicyLevelType type)', 'void'),
  \ dotnet#method('PolicyLevel(', 'PolicyLevelType type, string path)', 'void'),
  \ dotnet#method('PolicyLevel(', 'PolicyLevelType type, string path, ConfigId configId)', 'void'),
  \ dotnet#method('GetLocationFromType(', 'PolicyLevelType type)', 'static string'),
  \ dotnet#method('CreateAppDomainLevel(', ')', 'static PolicyLevel'),
  \ dotnet#method('get_Label(', ')', 'string'),
  \ dotnet#method('get_Type(', ')', 'PolicyLevelType'),
  \ dotnet#method('get_ConfigId(', ')', '.method'),
  \ dotnet#method('get_Path(', ')', 'string'),
  \ dotnet#method('get_StoreLocation(', ')', 'string'),
  \ dotnet#method('get_RootCodeGroup(', ')', 'CodeGroup'),
  \ dotnet#method('set_RootCodeGroup(', 'class CodeGroup value)', 'void'),
  \ dotnet#method('get_NamedPermissionSets(', ')', 'IList'),
  \ dotnet#method('ResolveMatchingCodeGroups(', 'class Evidence evidence)', 'CodeGroup'),
  \ dotnet#method('AddFullTrustAssembly(', 'class StrongName sn)', 'void'),
  \ dotnet#method('AddFullTrustAssembly(', 'class StrongNameMembershipCondition snMC)', 'void'),
  \ dotnet#method('RemoveFullTrustAssembly(', 'class StrongName sn)', 'void'),
  \ dotnet#method('RemoveFullTrustAssembly(', 'class StrongNameMembershipCondition snMC)', 'void'),
  \ dotnet#method('get_FullTrustAssemblies(', ')', 'IList'),
  \ dotnet#method('AddNamedPermissionSet(', 'class NamedPermissionSet permSet)', 'void'),
  \ dotnet#method('RemoveNamedPermissionSet(', 'class NamedPermissionSet permSet)', 'NamedPermissionSet'),
  \ dotnet#method('RemoveNamedPermissionSet(', 'string name)', 'NamedPermissionSet'),
  \ dotnet#method('ChangeNamedPermissionSet(', 'string name, PermissionSet pSet)', 'NamedPermissionSet'),
  \ dotnet#method('GetNamedPermissionSet(', 'string name)', 'NamedPermissionSet'),
  \ dotnet#method('Recover(', ')', 'void'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('Resolve(', 'class Evidence evidence)', 'PolicyStatement'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('GetBuiltInSet(', 'string name)', 'static PermissionSet'),
  \ dotnet#method('GetNamedPermissionSetInternal(', 'string name)', 'NamedPermissionSet'),
  \ dotnet#method('Resolve(', 'class Evidence evidence, int32 count, uint8[] serializedEvidence)', 'PolicyStatement'),
  \ dotnet#prop('Label', 'string'),
  \ dotnet#prop('Type', 'PolicyLevelType'),
  \ dotnet#prop('ConfigId', 'ConfigId'),
  \ dotnet#prop('Path', 'string'),
  \ dotnet#prop('StoreLocation', 'string'),
  \ dotnet#prop('RootCodeGroup', 'CodeGroup'),
  \ dotnet#prop('NamedPermissionSets', 'IList'),
  \ dotnet#prop('FullTrustAssemblies', 'IList'),
  \ ])

call dotnet#class('PolicyStatement', 'Object', [ 
  \ dotnet#field('m_permSet', 'PermissionSet'),
  \ dotnet#field('m_attributes', 'PolicyStatementAttribute'),
  \ dotnet#method('PolicyStatement(', ')', 'void'),
  \ dotnet#method('PolicyStatement(', 'class PermissionSet permSet)', 'void'),
  \ dotnet#method('PolicyStatement(', 'class PermissionSet permSet, PolicyStatementAttribute attributes)', 'void'),
  \ dotnet#method('get_PermissionSet(', ')', 'PermissionSet'),
  \ dotnet#method('set_PermissionSet(', 'class PermissionSet value)', 'void'),
  \ dotnet#method('SetPermissionSetNoCopy(', 'class PermissionSet permSet)', 'void'),
  \ dotnet#method('GetPermissionSetNoCopy(', ')', 'PermissionSet'),
  \ dotnet#method('get_Attributes(', ')', 'PolicyStatementAttribute'),
  \ dotnet#method('set_Attributes(', 'PolicyStatementAttribute value)', 'void'),
  \ dotnet#method('Copy(', ')', 'PolicyStatement'),
  \ dotnet#method('get_AttributeString(', ')', 'string'),
  \ dotnet#method('get_DependentEvidence(', ')', '.method'),
  \ dotnet#method('get_HasDependentEvidence(', ')', 'bool'),
  \ dotnet#method('AddDependentEvidence(', 'class IDelayEvaluatedEvidence dependentEvidence)', 'void'),
  \ dotnet#method('InplaceUnion(', 'class PolicyStatement childPolicy)', 'void'),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement et)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('ToXml(', 'class PolicyLevel level, bool useInternal)', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement et, PolicyLevel level)', 'void'),
  \ dotnet#method('FromXml(', 'class SecurityElement et, PolicyLevel level, bool allowInternalOnly)', 'void'),
  \ dotnet#method('FromXml(', 'class SecurityDocument doc, int32 position, PolicyLevel level, bool allowInternalOnly)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('', 'PermissionSet'),
  \ dotnet#prop('Attributes', 'PolicyStatementAttribute'),
  \ dotnet#prop('AttributeString', 'string'),
  \ dotnet#prop('DependentEvidence', 'IEnumerable'),
  \ dotnet#prop('HasDependentEvidence', 'bool'),
  \ ])

call dotnet#class('Site', 'EvidenceBase', [ 
  \ dotnet#method('Site(', 'string name)', 'void'),
  \ dotnet#method('CreateFromUrl(', 'string url)', 'static Site'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('GetSiteString(', ')', 'SiteString'),
  \ dotnet#method('CreateIdentityPermission(', 'class Evidence evidence)', ''),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Clone(', ')', 'EvidenceBase'),
  \ dotnet#method('Copy(', ')', 'object'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Normalize(', ')', 'object'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('SiteMembershipCondition', 'Object', [ 
  \ dotnet#method('SiteMembershipCondition(', ')', 'void'),
  \ dotnet#method('SiteMembershipCondition(', 'string site)', 'void'),
  \ dotnet#method('set_Site(', 'string value)', 'void'),
  \ dotnet#method('get_Site(', ')', 'string'),
  \ dotnet#method('Check(', 'class Evidence evidence)', 'bool'),
  \ dotnet#method('Check(', 'class Evidence evidence, [out] object& usedEvidence)', 'bool '),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Site', 'string'),
  \ ])

call dotnet#class('StrongName', 'EvidenceBase', [ 
  \ dotnet#method('StrongName(', ')', 'void'),
  \ dotnet#method('StrongName(', 'class StrongNamePublicKeyBlob blob, string name, Version version)', 'void'),
  \ dotnet#method('StrongName(', 'class StrongNamePublicKeyBlob blob, string name, Version version, Assembly assembly)', 'void'),
  \ dotnet#method('get_PublicKey(', ')', 'StrongNamePublicKeyBlob'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Version(', ')', 'Version'),
  \ dotnet#method('get_IsVerified(', ')', 'bool '),
  \ dotnet#method('get_WasUsed(', ')', 'bool '),
  \ dotnet#method('MarkUsed(', ')', 'void '),
  \ dotnet#method('CompareNames(', 'string asmName, string mcName)', 'static bool'),
  \ dotnet#method('CreateIdentityPermission(', 'class Evidence evidence)', ''),
  \ dotnet#method('Clone(', ')', 'EvidenceBase'),
  \ dotnet#method('Copy(', ')', 'object'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement element)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Normalize(', ')', 'object'),
  \ dotnet#prop('PublicKey', 'StrongNamePublicKeyBlob'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Version', 'Version'),
  \ dotnet#prop('IsVerified', 'bool'),
  \ dotnet#prop('WasUsed', 'bool'),
  \ ])

call dotnet#class('StrongNameMembershipCondition', 'Object', [ 
  \ dotnet#method('StrongNameMembershipCondition(', ')', 'void'),
  \ dotnet#method('StrongNameMembershipCondition(', 'class StrongNamePublicKeyBlob blob, string name, Version version)', 'void'),
  \ dotnet#method('set_PublicKey(', 'class StrongNamePublicKeyBlob value)', 'void'),
  \ dotnet#method('get_PublicKey(', ')', 'StrongNamePublicKeyBlob'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Version(', 'class Version value)', 'void'),
  \ dotnet#method('get_Version(', ')', 'Version'),
  \ dotnet#method('Check(', 'class Evidence evidence)', 'bool'),
  \ dotnet#method('Check(', 'class Evidence evidence, [out] object& usedEvidence)', 'bool '),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('PublicKey', 'StrongNamePublicKeyBlob'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Version', 'Version'),
  \ ])

call dotnet#class('UnionCodeGroup', 'CodeGroup', [ 
  \ dotnet#method('UnionCodeGroup(', ')', 'void'),
  \ dotnet#method('UnionCodeGroup(', 'class IMembershipCondition membershipCondition, PermissionSet permSet)', 'void'),
  \ dotnet#method('UnionCodeGroup(', 'class IMembershipCondition membershipCondition, PolicyStatement policy)', 'void'),
  \ dotnet#method('Resolve(', 'class Evidence evidence)', 'PolicyStatement'),
  \ dotnet#method('InternalResolve(', 'class Evidence evidence)', ''),
  \ dotnet#method('ResolveMatchingCodeGroups(', 'class Evidence evidence)', 'CodeGroup'),
  \ dotnet#method('Copy(', ')', 'CodeGroup'),
  \ dotnet#method('get_MergeLogic(', ')', 'string'),
  \ dotnet#method('GetTypeName(', ')', 'strict string'),
  \ dotnet#prop('MergeLogic', 'string'),
  \ ])

call dotnet#class('Url', 'EvidenceBase', [ 
  \ dotnet#method('Url(', 'string name, bool parsed)', 'void'),
  \ dotnet#method('Url(', 'string name)', 'void'),
  \ dotnet#method('get_Value(', ')', 'string'),
  \ dotnet#method('GetURLString(', ')', 'URLString'),
  \ dotnet#method('CreateIdentityPermission(', 'class Evidence evidence)', ''),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Clone(', ')', 'EvidenceBase'),
  \ dotnet#method('Copy(', ')', 'object'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Normalize(', ')', 'object'),
  \ dotnet#prop('Value', 'string'),
  \ ])

call dotnet#class('UrlMembershipCondition', 'Object', [ 
  \ dotnet#method('UrlMembershipCondition(', ')', 'void'),
  \ dotnet#method('UrlMembershipCondition(', 'string url)', 'void'),
  \ dotnet#method('set_Url(', 'string value)', 'void'),
  \ dotnet#method('get_Url(', ')', 'string'),
  \ dotnet#method('Check(', 'class Evidence evidence)', 'bool'),
  \ dotnet#method('Check(', 'class Evidence evidence, [out] object& usedEvidence)', 'bool '),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Url', 'string'),
  \ ])

call dotnet#class('Zone', 'EvidenceBase', [ 
  \ dotnet#method('Zone(', 'SecurityZone zone)', 'void'),
  \ dotnet#method('CreateFromUrl(', 'string url)', 'static Zone'),
  \ dotnet#method('CreateIdentityPermission(', 'class Evidence evidence)', ''),
  \ dotnet#method('get_SecurityZone(', ')', 'SecurityZone'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Clone(', ')', 'EvidenceBase'),
  \ dotnet#method('Copy(', ')', 'object'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Normalize(', ')', 'object'),
  \ dotnet#method('Zone(', ')', 'static void .'),
  \ dotnet#prop('SecurityZone', 'SecurityZone'),
  \ ])

call dotnet#class('ZoneMembershipCondition', 'Object', [ 
  \ dotnet#method('ZoneMembershipCondition(', ')', 'void'),
  \ dotnet#method('ZoneMembershipCondition(', 'SecurityZone zone)', 'void'),
  \ dotnet#method('set_SecurityZone(', 'SecurityZone value)', 'void'),
  \ dotnet#method('get_SecurityZone(', ')', 'SecurityZone'),
  \ dotnet#method('Check(', 'class Evidence evidence)', 'bool'),
  \ dotnet#method('Check(', 'class Evidence evidence, [out] object& usedEvidence)', 'bool '),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ZoneMembershipCondition(', ')', 'static void .'),
  \ dotnet#prop('SecurityZone', 'SecurityZone'),
  \ ])

call dotnet#class('GacInstalled', 'EvidenceBase', [ 
  \ dotnet#method('GacInstalled(', ')', 'void'),
  \ dotnet#method('CreateIdentityPermission(', 'class Evidence evidence)', ''),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Clone(', ')', 'EvidenceBase'),
  \ dotnet#method('Copy(', ')', 'object'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ ])

call dotnet#class('GacMembershipCondition', 'Object', [ 
  \ dotnet#method('GacMembershipCondition(', ')', 'void'),
  \ dotnet#method('Check(', 'class Evidence evidence)', 'bool'),
  \ dotnet#method('Check(', 'class Evidence evidence, [out] object& usedEvidence)', 'bool '),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ ])

call dotnet#class('Hash', 'EvidenceBase', [ 
  \ dotnet#method('Hash(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('Hash(', 'class Assembly assembly)', 'void'),
  \ dotnet#method('CreateSHA1(', 'uint8[] sha1)', 'static Hash'),
  \ dotnet#method('CreateSHA256(', 'uint8[] sha256)', 'static Hash'),
  \ dotnet#method('CreateMD5(', 'uint8[] md5)', 'static Hash'),
  \ dotnet#method('Clone(', ')', 'EvidenceBase'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_SHA1(', ')', 'uint8[]'),
  \ dotnet#method('get_SHA256(', ')', 'uint8[]'),
  \ dotnet#method('get_MD5(', ')', 'uint8[]'),
  \ dotnet#method('GenerateHash(', 'class HashAlgorithm hashAlg)', 'uint8[]'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('SHA1', 'uint8[]'),
  \ dotnet#prop('SHA256', 'uint8[]'),
  \ dotnet#prop('MD5', 'uint8[]'),
  \ ])

call dotnet#class('HashMembershipCondition', 'Object', [ 
  \ dotnet#method('HashMembershipCondition(', ')', 'void'),
  \ dotnet#method('HashMembershipCondition(', 'class HashAlgorithm hashAlg, uint8[] value)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('set_HashAlgorithm(', 'class HashAlgorithm value)', 'void'),
  \ dotnet#method('get_HashAlgorithm(', ')', 'HashAlgorithm'),
  \ dotnet#method('set_HashValue(', 'uint8[] value)', 'void'),
  \ dotnet#method('get_HashValue(', ')', 'uint8[]'),
  \ dotnet#method('Check(', 'class Evidence evidence)', 'bool'),
  \ dotnet#method('Check(', 'class Evidence evidence, [out] object& usedEvidence)', 'bool '),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('HashAlgorithm', 'HashAlgorithm'),
  \ dotnet#prop('HashValue', 'uint8[]'),
  \ ])

call dotnet#class('Publisher', 'EvidenceBase', [ 
  \ dotnet#method('Publisher(', 'class X509Certificate cert)', 'void'),
  \ dotnet#method('CreateIdentityPermission(', 'class Evidence evidence)', ''),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('PublicKeyEquals(', 'class X509Certificate cert1, X509Certificate cert2)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_Certificate(', ')', 'X509Certificate'),
  \ dotnet#method('Clone(', ')', 'EvidenceBase'),
  \ dotnet#method('Copy(', ')', 'object'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Normalize(', ')', 'object'),
  \ dotnet#prop('Certificate', 'X509Certificate'),
  \ ])

call dotnet#class('PublisherMembershipCondition', 'Object', [ 
  \ dotnet#method('PublisherMembershipCondition(', ')', 'void'),
  \ dotnet#method('PublisherMembershipCondition(', 'class X509Certificate certificate)', 'void'),
  \ dotnet#method('set_Certificate(', 'class X509Certificate value)', 'void'),
  \ dotnet#method('get_Certificate(', ')', 'X509Certificate'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Check(', 'class Evidence evidence)', 'bool'),
  \ dotnet#method('Check(', 'class Evidence evidence, [out] object& usedEvidence)', 'bool '),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', 'class PolicyLevel level)', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement e, PolicyLevel level)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Certificate', 'X509Certificate'),
  \ ])

