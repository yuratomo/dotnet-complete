call dotnet#namespace('System.Reflection.Emit')

call dotnet#class('AssemblyBuilder', 'Assembly', [ 
  \ dotnet#field('m_assemblyData', 'AssemblyBuilderData'),
  \ dotnet#method('GetModuleBuilder(', 'class InternalModuleBuilder)', 'ModuleBuilder'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_InternalAssembly(', ')', '.method'),
  \ dotnet#method('GetNativeHandle(', ')', 'RuntimeAssembly'),
  \ dotnet#method('GetVersion(', ')', 'Version'),
  \ dotnet#method('AssemblyBuilder(', 'class AppDomain domain, AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, StackCrawlMark& stackMark, IEnumerable unsafeAssemblyAttributes, SecurityContextSource securityContextSource)', 'void'),
  \ dotnet#method('InternalDefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, StackCrawlMark& stackMark, IEnumerable unsafeAssemblyAttributes, SecurityContextSource securityContextSource)', 'static AssemblyBuilder'),
  \ dotnet#method('DefineDynamicModule(', 'string name) noinlining', 'ModuleBuilder'),
  \ dotnet#method('DefineDynamicModule(', 'string name, bool emitSymbolInfo) noinlining', 'ModuleBuilder'),
  \ dotnet#method('DefineDynamicModule(', 'string name, string fileName) noinlining', 'ModuleBuilder'),
  \ dotnet#method('DefineDynamicModule(', 'string name, string fileName, bool emitSymbolInfo) noinlining', 'ModuleBuilder'),
  \ dotnet#method('CheckContext(', 'class Type[][] typess)', 'void'),
  \ dotnet#method('CheckContext(', 'class Type[] types)', 'void'),
  \ dotnet#method('DefineResource(', 'string name, string description, string fileName)', 'IResourceWriter'),
  \ dotnet#method('DefineResource(', 'string name, string description, string fileName, ResourceAttributes attribute)', 'IResourceWriter'),
  \ dotnet#method('AddResourceFile(', 'string name, string fileName)', 'void'),
  \ dotnet#method('AddResourceFile(', 'string name, string fileName, ResourceAttributes attribute)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('GetCustomAttributesData(', ')', 'IList'),
  \ dotnet#method('GetManifestResourceNames(', ')', 'string[]'),
  \ dotnet#method('GetFile(', 'string name)', 'FileStream'),
  \ dotnet#method('GetFiles(', 'bool getResourceModules)', 'FileStream[]'),
  \ dotnet#method('GetManifestResourceStream(', 'class Type type, string name)', 'Stream'),
  \ dotnet#method('GetManifestResourceStream(', 'string name)', 'Stream'),
  \ dotnet#method('GetManifestResourceInfo(', 'string resourceName)', 'ManifestResourceInfo'),
  \ dotnet#method('get_Location(', ')', 'string'),
  \ dotnet#method('get_ImageRuntimeVersion(', ')', 'string'),
  \ dotnet#method('get_CodeBase(', ')', 'string'),
  \ dotnet#method('get_EntryPoint(', ')', ''),
  \ dotnet#method('GetExportedTypes(', ')', 'Type[]'),
  \ dotnet#method('GetName(', 'bool copiedName)', 'AssemblyName'),
  \ dotnet#method('get_FullName(', ')', 'string'),
  \ dotnet#method('GetType(', 'string name, bool throwOnError, bool ignoreCase)', 'Type'),
  \ dotnet#method('get_Evidence(', ')', ''),
  \ dotnet#method('get_PermissionSet(', ')', ''),
  \ dotnet#method('get_SecurityRuleSet(', ')', ''),
  \ dotnet#method('get_ManifestModule(', ')', ''),
  \ dotnet#method('get_ReflectionOnly(', ')', 'bool'),
  \ dotnet#method('GetModule(', 'string name)', 'Module'),
  \ dotnet#method('GetReferencedAssemblies(', ')', 'AssemblyName[]'),
  \ dotnet#method('get_GlobalAssemblyCache(', ')', 'bool'),
  \ dotnet#method('get_HostContext(', ')', 'int64'),
  \ dotnet#method('GetModules(', 'bool getResourceModules)', 'Module[]'),
  \ dotnet#method('GetLoadedModules(', 'bool getResourceModules)', 'Module[]'),
  \ dotnet#method('GetSatelliteAssembly(', 'class CultureInfo culture) noinlining', 'Assembly'),
  \ dotnet#method('GetSatelliteAssembly(', 'class CultureInfo culture, Version version) noinlining', 'Assembly'),
  \ dotnet#method('get_IsDynamic(', ')', 'bool'),
  \ dotnet#method('DefineVersionInfoResource(', 'string product, string productVersion, string company, string copyright, string trademark)', 'void'),
  \ dotnet#method('DefineVersionInfoResource(', ')', 'void'),
  \ dotnet#method('DefineUnmanagedResource(', 'uint8[] resource)', 'void'),
  \ dotnet#method('DefineUnmanagedResource(', 'string resourceFileName)', 'void'),
  \ dotnet#method('GetDynamicModule(', 'string name)', 'ModuleBuilder'),
  \ dotnet#method('SetEntryPoint(', 'class MethodInfo entryMethod)', 'void'),
  \ dotnet#method('SetEntryPoint(', 'class MethodInfo entryMethod, PEFileKinds fileKind)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrAssemblyBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('Save(', 'string assemblyFileName)', 'void'),
  \ dotnet#method('Save(', 'string assemblyFileName, PortableExecutableKinds portableExecutableKind, ImageFileMachine imageFileMachine)', 'void'),
  \ dotnet#method('IsPersistable(', ')', 'bool'),
  \ dotnet#method('DefineExportedTypeInMemory(', 'class Type type, int32 tkResolutionScope, int32 tkTypeDef)', 'int32'),
  \ dotnet#method('AssemblyBuilder(', ')', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('InternalAssembly', 'InternalAssemblyBuilder'),
  \ dotnet#prop('Location', 'string'),
  \ dotnet#prop('ImageRuntimeVersion', 'string'),
  \ dotnet#prop('CodeBase', 'string'),
  \ dotnet#prop('EntryPoint', 'MethodInfo'),
  \ dotnet#prop('FullName', 'string'),
  \ dotnet#prop('Evidence', 'Evidence'),
  \ dotnet#prop('', 'PermissionSet'),
  \ dotnet#prop('SecurityRuleSet', 'SecurityRuleSet'),
  \ dotnet#prop('ManifestModule', 'Module'),
  \ dotnet#prop('ReflectionOnly', 'bool'),
  \ dotnet#prop('GlobalAssemblyCache', 'bool'),
  \ dotnet#prop('HostContext', 'int64'),
  \ dotnet#prop('IsDynamic', 'bool'),
  \ ])

call dotnet#class('ConstrConstructorBuilderBuilder', 'ConstrConstructorBuilderInfo', [ 
  \ dotnet#field('m_ReturnILGen', 'bool'),
  \ dotnet#method('ConstructorBuilder(', ')', 'void'),
  \ dotnet#method('ConstructorBuilder(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers, ModuleBuilder mod, TypeBuilder type)', 'void'),
  \ dotnet#method('ConstructorBuilder(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, ModuleBuilder mod, TypeBuilder type)', 'void'),
  \ dotnet#method('GetParameterTypes(', ')', 'strict Type[]'),
  \ dotnet#method('GetTypeBuilder(', ')', 'TypeBuilder'),
  \ dotnet#method('GetModuleBuilder(', ')', 'ModuleBuilder'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_MetadataTokenInternal(', ')', 'int32'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('Invoke(', 'object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)', 'object'),
  \ dotnet#method('GetParameters(', ')', 'ParameterInfo[]'),
  \ dotnet#method('get_Attributes(', ')', ''),
  \ dotnet#method('GetMethodImplementationFlags(', ')', 'MethodImplAttributes'),
  \ dotnet#method('get_MethodHandle(', ')', ''),
  \ dotnet#method('Invoke(', 'BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)', 'object'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('GetToken(', ')', 'MethodToken'),
  \ dotnet#method('DefineParameter(', 'int32 iSequence, ParameterAttributes attributes, string strParamName)', 'ParameterBuilder'),
  \ dotnet#method('SetSymCustomAttribute(', 'string name, uint8[] data)', 'void'),
  \ dotnet#method('GetILGenerator(', ')', 'ILGenerator'),
  \ dotnet#method('GetILGenerator(', 'int32 streamSize)', 'ILGenerator'),
  \ dotnet#method('AddDeclarativeSecurity(', 'SecurityAction action, PermissionSet pset)', 'void'),
  \ dotnet#method('get_CallingConvention(', ')', ''),
  \ dotnet#method('GetModule(', ')', 'Module'),
  \ dotnet#method('get_ReturnType(', ')', 'Type'),
  \ dotnet#method('GetReturnType(', ')', 'strict Type'),
  \ dotnet#method('get_Signature(', ')', 'string'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrConstructorBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('SetImplementationFlags(', 'MethodImplAttributes attributes)', 'void'),
  \ dotnet#method('get_InitLocals(', ')', 'bool'),
  \ dotnet#method('set_InitLocals(', 'bool value)', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MetadataTokenInternal', 'int32'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Attributes', 'MethodAttributes'),
  \ dotnet#prop('MethodHandle', 'RuntimeMethodHandle'),
  \ dotnet#prop('CallingConvention', 'CallingConventions'),
  \ dotnet#prop('ReturnType', 'Type'),
  \ dotnet#prop('Signature', 'string'),
  \ dotnet#prop('InitLocals', 'bool'),
  \ ])

call dotnet#class('ILGenerator', 'Object', [ 
  \ dotnet#field('m_ScopeTree', 'ScopeTree'),
  \ dotnet#field('m_LineNumberInfo', 'LineNumberInfo'),
  \ dotnet#field('m_methodBuilder', 'MethodInfo'),
  \ dotnet#field('m_localCount', 'int32'),
  \ dotnet#field('m_localSignature', 'SignatureHelper'),
  \ dotnet#method('EnlargeArray(', 'int32[] incoming)', 'static int32[]'),
  \ dotnet#method('get_CurrExcStackCount(', ')', 'int32'),
  \ dotnet#method('get_CurrExcStack(', ')', '.method'),
  \ dotnet#method('ILGenerator(', 'class MethodInfo methodBuilder)', 'void'),
  \ dotnet#method('ILGenerator(', 'class MethodInfo methodBuilder, int32 size)', 'void'),
  \ dotnet#method('InternalEmit(', 'OpCode opcode)', 'void'),
  \ dotnet#method('UpdateStackSize(', 'OpCode opcode, int32 stackchange)', 'void'),
  \ dotnet#method('GetMemberRefToken(', 'class MethodBase method, Type[] optionalParameterTypes)', 'strict int32'),
  \ dotnet#method('GetMemberRefSignature(', 'CallingConventions call, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)', 'strict'),
  \ dotnet#method('BakeByteArray(', ')', 'uint8[]'),
  \ dotnet#method('GetExceptions(', ')', '__ExceptionInfo[]'),
  \ dotnet#method('EnsureCapacity(', 'int32 size)', 'void'),
  \ dotnet#method('PutInteger4(', 'int32 value)', 'void'),
  \ dotnet#method('GetMaxStackSize(', ')', 'int32'),
  \ dotnet#method('GetTokenFixups(', ')', 'int32[]'),
  \ dotnet#method('GetRVAFixups(', ')', 'int32[]'),
  \ dotnet#method('Emit(', 'OpCode opcode)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, uint8 arg)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, int8 arg)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, int16 arg)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, int32 arg)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, MethodInfo meth)', 'void'),
  \ dotnet#method('EmitCalli(', 'OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)', 'void'),
  \ dotnet#method('EmitCalli(', 'OpCode opcode, CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes)', 'void'),
  \ dotnet#method('EmitCall(', 'OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, SignatureHelper signature)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, ConstrILGeneratorInfo con)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, Type cls)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, int64 arg)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, float32 arg)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, float64 arg)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, Label label)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, Label[] labels)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, FieldInfo field)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, string str)', 'void'),
  \ dotnet#method('Emit(', 'OpCode opcode, LocalBuilder local)', 'void'),
  \ dotnet#method('BeginExceptionBlock(', ')', ''),
  \ dotnet#method('EndExceptionBlock(', ')', 'void'),
  \ dotnet#method('BeginExceptFilterBlock(', ')', 'void'),
  \ dotnet#method('BeginCatchBlock(', 'class Type exceptionType)', 'void'),
  \ dotnet#method('BeginFaultBlock(', ')', 'void'),
  \ dotnet#method('BeginFinallyBlock(', ')', 'void'),
  \ dotnet#method('DefineLabel(', ')', ''),
  \ dotnet#method('MarkLabel(', 'Label loc)', 'void'),
  \ dotnet#method('ThrowException(', 'class Type excType)', 'void'),
  \ dotnet#method('EmitWriteLine(', 'string value)', 'void'),
  \ dotnet#method('EmitWriteLine(', 'class LocalBuilder localBuilder)', 'void'),
  \ dotnet#method('EmitWriteLine(', 'class FieldInfo fld)', 'void'),
  \ dotnet#method('DeclareLocal(', 'class Type localType)', ''),
  \ dotnet#method('DeclareLocal(', 'class Type localType, bool pinned)', ''),
  \ dotnet#method('UsingNamespace(', 'string usingNamespace)', 'void'),
  \ dotnet#method('MarkSequencePoint(', 'class ISymbolDocumentWriter document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn)', 'void'),
  \ dotnet#method('BeginScope(', ')', 'void'),
  \ dotnet#method('EndScope(', ')', 'void'),
  \ dotnet#method('get_ILOffset(', ')', 'int32'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('CurrExcStackCount', 'int32'),
  \ dotnet#prop('CurrExcStack', '__ExceptionInfo[]'),
  \ dotnet#prop('ILOffset', 'int32'),
  \ ])

call dotnet#class('DynamicILInfo', 'Object', [ 
  \ dotnet#method('DynamicILInfo(', 'class DynamicScope scope, DynamicMethod method, uint8[] methodSignature)', 'void'),
  \ dotnet#method('GetCallableMethod(', 'class RuntimeModule, DynamicMethod dm)', 'void'),
  \ dotnet#method('get_LocalSignature(', ')', 'uint8[]'),
  \ dotnet#method('get_Exceptions(', ')', 'uint8[]'),
  \ dotnet#method('get_Code(', ')', 'uint8[]'),
  \ dotnet#method('get_MaxStackSize(', ')', 'int32'),
  \ dotnet#method('get_DynamicMethod(', ')', 'DynamicMethod'),
  \ dotnet#method('get_DynamicScope(', ')', '.method'),
  \ dotnet#method('SetCode(', 'uint8[] code, int32 maxStackSize)', 'void'),
  \ dotnet#method('SetCode(', 'uint8* code, int32 codeSize, int32 maxStackSize)', 'void'),
  \ dotnet#method('SetExceptions(', 'uint8[] exceptions)', 'void'),
  \ dotnet#method('SetExceptions(', 'uint8* exceptions, int32 exceptionsSize)', 'void'),
  \ dotnet#method('SetLocalSignature(', 'uint8[] localSignature)', 'void'),
  \ dotnet#method('SetLocalSignature(', 'uint8* localSignature, int32 signatureSize)', 'void'),
  \ dotnet#method('GetTokenFor(', 'RuntimeMethodHandle method)', 'int32'),
  \ dotnet#method('GetTokenFor(', 'class DynamicMethod method)', 'int32'),
  \ dotnet#method('GetTokenFor(', 'RuntimeMethodHandle method, RuntimeTypeHandle contextType)', 'int32'),
  \ dotnet#method('GetTokenFor(', 'RuntimeFieldHandle field)', 'int32'),
  \ dotnet#method('GetTokenFor(', 'RuntimeFieldHandle field, RuntimeTypeHandle contextType)', 'int32'),
  \ dotnet#method('GetTokenFor(', 'RuntimeTypeHandle type)', 'int32'),
  \ dotnet#method('GetTokenFor(', 'string literal)', 'int32'),
  \ dotnet#method('GetTokenFor(', 'uint8[] signature)', 'int32'),
  \ dotnet#prop('LocalSignature', 'uint8[]'),
  \ dotnet#prop('Exceptions', 'uint8[]'),
  \ dotnet#prop('Code', 'uint8[]'),
  \ dotnet#prop('MaxStackSize', 'int32'),
  \ dotnet#prop('DynamicMethod', 'DynamicMethod'),
  \ dotnet#prop('DynamicScope', 'DynamicScope'),
  \ ])

call dotnet#class('DynamicMethod', 'MethodInfo', [ 
  \ dotnet#field('m_owner', 'DynamicMethod'),
  \ dotnet#method('DynamicMethod(', ')', 'void'),
  \ dotnet#method('DynamicMethod(', 'class DynamicMethod owner, string name, MethodAttributes attributes, CallingConventions callingConvention)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('get_MethodHandle(', ')', ''),
  \ dotnet#method('get_Attributes(', ')', ''),
  \ dotnet#method('get_CallingConvention(', ')', ''),
  \ dotnet#method('GetBaseDefinition(', ')', 'MethodInfo'),
  \ dotnet#method('GetParameters(', ')', 'ParameterInfo[]'),
  \ dotnet#method('GetMethodImplementationFlags(', ')', 'MethodImplAttributes'),
  \ dotnet#method('Invoke(', 'object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)', 'object'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('get_IsSecurityCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecuritySafeCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityTransparent(', ')', 'bool'),
  \ dotnet#method('get_ReturnType(', ')', 'Type'),
  \ dotnet#method('get_ReturnParameter(', ')', ''),
  \ dotnet#method('get_ReturnTypeCustomAttributes(', ')', ''),
  \ dotnet#method('LoadParameters(', ')', 'ParameterInfo[]'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('MethodHandle', 'RuntimeMethodHandle'),
  \ dotnet#prop('Attributes', 'MethodAttributes'),
  \ dotnet#prop('CallingConvention', 'CallingConventions'),
  \ dotnet#prop('IsSecurityCritical', 'bool'),
  \ dotnet#prop('IsSecuritySafeCritical', 'bool'),
  \ dotnet#prop('IsSecurityTransparent', 'bool'),
  \ dotnet#prop('ReturnType', 'Type'),
  \ dotnet#prop('ReturnParameter', 'ParameterInfo'),
  \ dotnet#prop('ReturnTypeCustomAttributes', 'ICustomAttributeProvider'),
  \ dotnet#field('m_methodHandle', 'IRuntimeMethodInfo'),
  \ dotnet#field('m_module', 'RuntimeModule'),
  \ dotnet#field('m_skipVisibility', 'bool'),
  \ dotnet#field('m_typeOwner', 'RuntimeType'),
  \ dotnet#field('m_resolver', 'DynamicResolver'),
  \ dotnet#field('m_restrictedSkipVisibility', 'bool'),
  \ dotnet#field('m_creationContext', 'CompressedStack'),
  \ dotnet#method('DynamicMethod(', ')', 'void'),
  \ dotnet#method('DynamicMethod(', 'string name, Type returnType, Type[] parameterTypes)', 'void'),
  \ dotnet#method('DynamicMethod(', 'string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility)', 'void'),
  \ dotnet#method('DynamicMethod(', 'string name, Type returnType, Type[] parameterTypes, Module m) noinlining', 'void'),
  \ dotnet#method('DynamicMethod(', 'string name, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility) noinlining', 'void'),
  \ dotnet#method('DynamicMethod(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility) noinlining', 'void'),
  \ dotnet#method('DynamicMethod(', 'string name, Type returnType, Type[] parameterTypes, Type owner) noinlining', 'void'),
  \ dotnet#method('DynamicMethod(', 'string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility) noinlining', 'void'),
  \ dotnet#method('DynamicMethod(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility) noinlining', 'void'),
  \ dotnet#method('CreateDelegate(', 'class Type delegateType)', 'Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type delegateType, object target)', 'Delegate'),
  \ dotnet#method('GetMethodDescriptor(', ')', 'RuntimeMethodHandle'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('get_MethodHandle(', ')', ''),
  \ dotnet#method('get_Attributes(', ')', ''),
  \ dotnet#method('get_CallingConvention(', ')', ''),
  \ dotnet#method('GetBaseDefinition(', ')', 'MethodInfo'),
  \ dotnet#method('GetParameters(', ')', 'ParameterInfo[]'),
  \ dotnet#method('GetMethodImplementationFlags(', ')', 'MethodImplAttributes'),
  \ dotnet#method('get_IsSecurityCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecuritySafeCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityTransparent(', ')', 'bool'),
  \ dotnet#method('Invoke(', 'object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)', 'object'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('get_ReturnType(', ')', 'Type'),
  \ dotnet#method('get_ReturnParameter(', ')', ''),
  \ dotnet#method('get_ReturnTypeCustomAttributes(', ')', ''),
  \ dotnet#method('DefineParameter(', 'int32 position, ParameterAttributes attributes, string parameterName)', 'ParameterBuilder'),
  \ dotnet#method('GetDynamicILInfo(', ')', 'DynamicILInfo'),
  \ dotnet#method('GetDynamicILInfo(', 'class DynamicScope scope)', 'DynamicILInfo'),
  \ dotnet#method('GetILGenerator(', ')', 'ILGenerator'),
  \ dotnet#method('GetILGenerator(', 'int32 streamSize)', 'ILGenerator'),
  \ dotnet#method('get_InitLocals(', ')', 'bool'),
  \ dotnet#method('set_InitLocals(', 'bool value)', 'void'),
  \ dotnet#method('GetMethodInfo(', ')', 'MethodInfo'),
  \ dotnet#method('DynamicMethod(', ')', 'static void .'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('MethodHandle', 'RuntimeMethodHandle'),
  \ dotnet#prop('Attributes', 'MethodAttributes'),
  \ dotnet#prop('CallingConvention', 'CallingConventions'),
  \ dotnet#prop('IsSecurityCritical', 'bool'),
  \ dotnet#prop('IsSecuritySafeCritical', 'bool'),
  \ dotnet#prop('IsSecurityTransparent', 'bool'),
  \ dotnet#prop('ReturnType', 'Type'),
  \ dotnet#prop('ReturnParameter', 'ParameterInfo'),
  \ dotnet#prop('ReturnTypeCustomAttributes', 'ICustomAttributeProvider'),
  \ dotnet#prop('InitLocals', 'bool'),
  \ ])

call dotnet#class('EventBuilder', 'Object', [ 
  \ dotnet#method('EventBuilder(', ')', 'void'),
  \ dotnet#method('EventBuilder(', 'class ModuleBuilder mod, string name, EventAttributes attr, TypeBuilder type, EventToken evToken)', 'void'),
  \ dotnet#method('GetEventToken(', ')', 'EventToken'),
  \ dotnet#method('SetAddOnMethod(', 'class MethodBuilder mdBuilder)', 'void'),
  \ dotnet#method('SetRemoveOnMethod(', 'class MethodBuilder mdBuilder)', 'void'),
  \ dotnet#method('SetRaiseMethod(', 'class MethodBuilder mdBuilder)', 'void'),
  \ dotnet#method('AddOtherMethod(', 'class MethodBuilder mdBuilder)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrEventBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ ])

call dotnet#class('EventToken', 'ValueType', [ 
  \ dotnet#field('m_event', 'int32'),
  \ dotnet#method('EventToken(', 'int32 str)', 'void'),
  \ dotnet#method('get_Token(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'EventToken obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'EventToken a, EventToken b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'EventToken a, EventToken b)', 'static bool'),
  \ dotnet#method('EventToken(', ')', 'static void .'),
  \ dotnet#prop('Token', 'int32'),
  \ ])

call dotnet#class('FieldBuilder', 'FieldInfo', [ 
  \ dotnet#method('FieldBuilder(', 'class TypeBuilder typeBuilder, string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes)', 'void'),
  \ dotnet#method('SetData(', 'uint8[] data, int32 size)', 'void'),
  \ dotnet#method('GetTypeBuilder(', ')', 'TypeBuilder'),
  \ dotnet#method('get_MetadataTokenInternal(', ')', 'int32'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#method('get_FieldType(', ')', 'Type'),
  \ dotnet#method('GetValue(', 'object obj)', 'object'),
  \ dotnet#method('SetValue(', 'object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture)', 'void'),
  \ dotnet#method('get_FieldHandle(', ')', ''),
  \ dotnet#method('get_Attributes(', ')', ''),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('GetToken(', ')', 'FieldToken'),
  \ dotnet#method('SetOffset(', 'int32 iOffset)', 'void'),
  \ dotnet#method('SetMarshal(', 'class UnmanagedMarshal unmanagedMarshal)', 'void'),
  \ dotnet#method('SetConstant(', 'object defaultValue)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrFieldBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MetadataTokenInternal', 'int32'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('FieldType', 'Type'),
  \ dotnet#prop('FieldHandle', 'RuntimeFieldHandle'),
  \ dotnet#prop('Attributes', 'FieldAttributes'),
  \ ])

call dotnet#class('FieldToken', 'ValueType', [ 
  \ dotnet#field('m_fieldTok', 'int32'),
  \ dotnet#field('m_class', 'object'),
  \ dotnet#method('FieldToken(', 'int32 field, Type fieldClass)', 'void'),
  \ dotnet#method('get_Token(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'FieldToken obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'FieldToken a, FieldToken b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'FieldToken a, FieldToken b)', 'static bool'),
  \ dotnet#method('FieldToken(', ')', 'static void .'),
  \ dotnet#prop('Token', 'int32'),
  \ ])

call dotnet#class('Label', 'ValueType', [ 
  \ dotnet#field('m_label', 'int32'),
  \ dotnet#method('Label(', 'int32 label)', 'void'),
  \ dotnet#method('GetLabelValue(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'Label obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'Label a, Label b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Label a, Label b)', 'static bool'),
  \ ])

call dotnet#class('LocalBuilder', 'LocalVariableInfo', [ 
  \ dotnet#method('LocalBuilder(', ')', 'void'),
  \ dotnet#method('LocalBuilder(', 'int32 localIndex, Type localType, MethodInfo methodBuilder)', 'void'),
  \ dotnet#method('LocalBuilder(', 'int32 localIndex, Type localType, MethodInfo methodBuilder, bool isPinned)', 'void'),
  \ dotnet#method('GetLocalIndex(', ')', 'int32'),
  \ dotnet#method('GetMethodBuilder(', ')', 'MethodInfo'),
  \ dotnet#method('get_IsPinned(', ')', 'bool'),
  \ dotnet#method('get_LocalType(', ')', 'Type'),
  \ dotnet#method('get_LocalIndex(', ')', 'int32'),
  \ dotnet#method('SetLocalSymInfo(', 'string name)', 'void'),
  \ dotnet#method('SetLocalSymInfo(', 'string name, int32 startOffset, int32 endOffset)', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('IsPinned', 'bool'),
  \ dotnet#prop('LocalType', 'Type'),
  \ dotnet#prop('LocalIndex', 'int32'),
  \ ])

call dotnet#class('MethodBuilder', 'MethodInfo', [ 
  \ dotnet#field('m_strName', 'string'),
  \ dotnet#field('m_containingType', 'TypeBuilder'),
  \ dotnet#field('m_localSymInfo', 'LocalSymInfo'),
  \ dotnet#field('m_ilGenerator', 'ILGenerator'),
  \ dotnet#field('m_bIsBaked', 'bool'),
  \ dotnet#field('m_parameterTypes', 'Type[]'),
  \ dotnet#field('m_canBeRuntimeImpl', 'bool'),
  \ dotnet#field('m_isDllImport', 'bool'),
  \ dotnet#method('MethodBuilder(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, ModuleBuilder mod, TypeBuilder type, bool bIsGlobalMethod)', 'void'),
  \ dotnet#method('MethodBuilder(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, ModuleBuilder mod, TypeBuilder type, bool bIsGlobalMethod)', 'void'),
  \ dotnet#method('CheckContext(', 'class Type[][] typess)', 'void'),
  \ dotnet#method('CheckContext(', 'class Type[] types)', 'void'),
  \ dotnet#method('CreateMethodBodyHelper(', 'class ILGenerator il)', 'void'),
  \ dotnet#method('ReleaseBakedStructures(', ')', 'void'),
  \ dotnet#method('GetParameterTypes(', ')', 'strict Type[]'),
  \ dotnet#method('GetMethodBaseReturnType(', 'class MethodBase method)', 'static Type'),
  \ dotnet#method('SetToken(', 'MethodToken token)', 'void'),
  \ dotnet#method('GetBody(', ')', 'uint8[]'),
  \ dotnet#method('GetTokenFixups(', ')', 'int32[]'),
  \ dotnet#method('GetRVAFixups(', ')', 'int32[]'),
  \ dotnet#method('GetMethodSignature(', ')', 'SignatureHelper'),
  \ dotnet#method('GetLocalsSignature(', ')', 'SignatureHelper'),
  \ dotnet#method('GetNumberOfExceptions(', ')', 'int32'),
  \ dotnet#method('GetExceptionInstances(', ')', '__ExceptionInstance[]'),
  \ dotnet#method('CalculateNumberOfExceptions(', 'class __ExceptionInfo[] excp)', 'int32'),
  \ dotnet#method('IsTypeCreated(', ')', 'bool'),
  \ dotnet#method('GetTypeBuilder(', ')', 'TypeBuilder'),
  \ dotnet#method('GetModuleBuilder(', ')', 'ModuleBuilder'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_MetadataTokenInternal(', ')', 'int32'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_ReturnTypeCustomAttributes(', ')', ''),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#method('Invoke(', 'object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)', 'object'),
  \ dotnet#method('GetMethodImplementationFlags(', ')', 'MethodImplAttributes'),
  \ dotnet#method('get_Attributes(', ')', ''),
  \ dotnet#method('get_CallingConvention(', ')', ''),
  \ dotnet#method('get_MethodHandle(', ')', ''),
  \ dotnet#method('get_IsSecurityCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecuritySafeCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityTransparent(', ')', 'bool'),
  \ dotnet#method('GetBaseDefinition(', ')', 'MethodInfo'),
  \ dotnet#method('get_ReturnType(', ')', 'Type'),
  \ dotnet#method('GetParameters(', ')', 'ParameterInfo[]'),
  \ dotnet#method('get_ReturnParameter(', ')', ''),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('get_IsGenericMethodDefinition(', ')', 'bool'),
  \ dotnet#method('get_ContainsGenericParameters(', ')', 'bool'),
  \ dotnet#method('GetGenericMethodDefinition(', ')', 'MethodInfo'),
  \ dotnet#method('get_IsGenericMethod(', ')', 'bool'),
  \ dotnet#method('GetGenericArguments(', ')', 'Type[]'),
  \ dotnet#method('MakeGenericMethod(', 'class Type[] typeArguments)', 'MethodInfo'),
  \ dotnet#method('DefineGenericParameters(', 'string[] names)', 'GenericTypeParameterBuilder[]'),
  \ dotnet#method('ThrowIfGeneric(', ')', 'void'),
  \ dotnet#method('GetToken(', ')', 'MethodToken'),
  \ dotnet#method('SetParameters(', 'class Type[] parameterTypes)', 'void'),
  \ dotnet#method('SetReturnType(', 'class Type returnType)', 'void'),
  \ dotnet#method('SetSignature(', 'class Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)', 'void'),
  \ dotnet#method('DefineParameter(', 'int32 position, ParameterAttributes attributes, string strParamName)', 'ParameterBuilder'),
  \ dotnet#method('SetMarshal(', 'class UnmanagedMarshal unmanagedMarshal)', 'void'),
  \ dotnet#method('SetSymCustomAttribute(', 'string name, uint8[] data)', 'void'),
  \ dotnet#method('AddDeclarativeSecurity(', 'SecurityAction action, PermissionSet pset)', 'void'),
  \ dotnet#method('CreateMethodBody(', 'uint8[] il, int32 count)', 'void'),
  \ dotnet#method('SetImplementationFlags(', 'MethodImplAttributes attributes)', 'void'),
  \ dotnet#method('GetILGenerator(', ')', 'ILGenerator'),
  \ dotnet#method('GetILGenerator(', 'int32 size)', 'ILGenerator'),
  \ dotnet#method('get_InitLocals(', ')', 'bool'),
  \ dotnet#method('set_InitLocals(', 'bool value)', 'void'),
  \ dotnet#method('GetModule(', ')', 'Module'),
  \ dotnet#method('get_Signature(', ')', 'string'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrMethodBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('MetadataTokenInternal', 'int32'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('ReturnTypeCustomAttributes', 'ICustomAttributeProvider'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('Attributes', 'MethodAttributes'),
  \ dotnet#prop('CallingConvention', 'CallingConventions'),
  \ dotnet#prop('MethodHandle', 'RuntimeMethodHandle'),
  \ dotnet#prop('IsSecurityCritical', 'bool'),
  \ dotnet#prop('IsSecuritySafeCritical', 'bool'),
  \ dotnet#prop('IsSecurityTransparent', 'bool'),
  \ dotnet#prop('ReturnType', 'Type'),
  \ dotnet#prop('ReturnParameter', 'ParameterInfo'),
  \ dotnet#prop('IsGenericMethodDefinition', 'bool'),
  \ dotnet#prop('ContainsGenericParameters', 'bool'),
  \ dotnet#prop('IsGenericMethod', 'bool'),
  \ dotnet#prop('InitLocals', 'bool'),
  \ dotnet#prop('Signature', 'string'),
  \ ])

call dotnet#class('CustomAttributeBuilder', 'Object', [ 
  \ dotnet#field('m_con', 'ConstrCustomAttributeBuilderInfo'),
  \ dotnet#field('m_constrCustomAttributeBuilderArgs', 'object[]'),
  \ dotnet#field('m_blob', 'uint8[]'),
  \ dotnet#method('CustomAttributeBuilder(', 'class ConstrCustomAttributeBuilderInfo con, object[] constrCustomAttributeBuilderArgs)', 'void'),
  \ dotnet#method('CustomAttributeBuilder(', 'class ConstrCustomAttributeBuilderInfo con, object[] constrCustomAttributeBuilderArgs, PropertyInfo[] namedProperties, object[] propertyValues)', 'void'),
  \ dotnet#method('CustomAttributeBuilder(', 'class ConstrCustomAttributeBuilderInfo con, object[] constrCustomAttributeBuilderArgs, FieldInfo[] namedFields, object[] fieldValues)', 'void'),
  \ dotnet#method('CustomAttributeBuilder(', 'class ConstrCustomAttributeBuilderInfo con, object[] constrCustomAttributeBuilderArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)', 'void'),
  \ dotnet#method('InitCustomAttributeBuilder(', 'class ConstrCustomAttributeBuilderInfo con, object[] constrCustomAttributeBuilderArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)', 'void'),
  \ dotnet#method('CreateCustomAttribute(', 'class ModuleBuilder mod, int32 tkOwner)', 'void'),
  \ dotnet#method('PrepareCreateCustomAttributeToDisk(', 'class ModuleBuilder mod)', 'int32'),
  \ dotnet#method('CreateCustomAttribute(', 'class ModuleBuilder mod, int32 tkOwner, int32 tkAttrib, bool toDisk)', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ ])

call dotnet#class('MethodRental', 'Object', [ 
  \ dotnet#method('SwapMethodBody(', 'class Type cls, int32 methodtoken, int rgIL, int32 methodSize, int32 flags) noinlining', 'static void'),
  \ dotnet#method('MethodRental(', ')', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ ])

call dotnet#class('MethodToken', 'ValueType', [ 
  \ dotnet#field('m_method', 'int32'),
  \ dotnet#method('MethodToken(', 'int32 str)', 'void'),
  \ dotnet#method('get_Token(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'MethodToken obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'MethodToken a, MethodToken b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'MethodToken a, MethodToken b)', 'static bool'),
  \ dotnet#method('MethodToken(', ')', 'static void .'),
  \ dotnet#prop('Token', 'int32'),
  \ ])

call dotnet#class('ModuleBuilder', 'Module', [ 
  \ dotnet#field('m_moduleData', 'ModuleBuilderData'),
  \ dotnet#field('m_internalModuleBuilder', 'InternalModuleBuilder'),
  \ dotnet#method('nCreateISymWriterForDynamicModule(', 'class Module, string filename) internalcall', 'static int'),
  \ dotnet#method('UnmangleTypeName(', 'string typeName)', 'static string'),
  \ dotnet#method('get_ContainingAssemblyBuilder(', ')', '.method'),
  \ dotnet#method('ModuleBuilder(', 'class AssemblyBuilder assemblyBuilder, InternalModuleBuilder internalModuleBuilder)', 'void'),
  \ dotnet#method('AddType(', 'class Type type)', 'void'),
  \ dotnet#method('CheckTypeNameConflict(', 'string strTypeName, TypeBuilder enclosingType)', 'void'),
  \ dotnet#method('CheckContext(', 'class Type[][] typess)', 'void'),
  \ dotnet#method('CheckContext(', 'class Type[] types)', 'void'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void SetFieldRVAContent(class RuntimeModule, int32 fdToken, uint8[] data, int32 length) preservesig', 'static'),
  \ dotnet#method('DefineNativeResource(', 'PortableExecutableKinds portableExecutableKind, ImageFileMachine imageFileMachine)', 'void'),
  \ dotnet#method('FindTypeBuilderWithName(', 'string strTypeName, bool ignoreCase)', 'strict Type'),
  \ dotnet#method('SetEntryPoint(', 'MethodToken entryPoint)', 'void'),
  \ dotnet#method('PreSave(', 'string fileName, PortableExecutableKinds portableExecutableKind, ImageFileMachine imageFileMachine)', 'void'),
  \ dotnet#method('Save(', 'string fileName, bool isAssemblyFile, PortableExecutableKinds portableExecutableKind, ImageFileMachine imageFileMachine)', 'void'),
  \ dotnet#method('InternalGetConstrModuleBuilderToken(', 'class ConstrModuleBuilderInfo con, bool usingRef)', 'MethodToken'),
  \ dotnet#method('Init(', 'string strModuleName, string strFileName, int32 tkFile)', 'void'),
  \ dotnet#method('ModifyModuleName(', 'string name)', 'void'),
  \ dotnet#method('SetSymWriter(', 'class ISymbolWriter writer)', 'void'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_InternalModule(', ')', '.method'),
  \ dotnet#method('GetModuleHandle(', ')', 'strict'),
  \ dotnet#method('GetNativeHandle(', ')', 'RuntimeModule'),
  \ dotnet#method('GetMemberRefToken(', 'class MethodBase method, Type[] optionalParameterTypes)', 'int32'),
  \ dotnet#method('GetMemberRefSignature(', 'CallingConventions call, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes, int32 cGenericParameters)', 'SignatureHelper'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('GetCustomAttributesData(', ')', 'IList'),
  \ dotnet#method('GetTypes(', ')', 'Type[]'),
  \ dotnet#method('GetTypesNoLock(', ')', 'Type[]'),
  \ dotnet#method('GetType(', 'string className)', 'Type'),
  \ dotnet#method('GetType(', 'string className, bool ignoreCase)', 'Type'),
  \ dotnet#method('GetType(', 'string className, bool throwOnError, bool ignoreCase)', 'Type'),
  \ dotnet#method('get_FullyQualifiedName(', ')', 'string'),
  \ dotnet#method('ResolveSignature(', 'int32 metadataToken)', 'uint8[]'),
  \ dotnet#method('ResolveMethod(', 'int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)', 'MethodBase'),
  \ dotnet#method('ResolveField(', 'int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)', 'FieldInfo'),
  \ dotnet#method('ResolveType(', 'int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)', 'Type'),
  \ dotnet#method('ResolveMember(', 'int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)', 'MemberInfo'),
  \ dotnet#method('ResolveString(', 'int32 metadataToken)', 'string'),
  \ dotnet#method('GetPEKind(', '[out] PortableExecutableKinds& peKind, [out] ImageFileMachine& machine)', 'void'),
  \ dotnet#method('get_MDStreamVersion(', ')', 'int32'),
  \ dotnet#method('get_ModuleVersionId(', ')', ''),
  \ dotnet#method('get_MetadataToken(', ')', 'int32'),
  \ dotnet#method('IsResource(', ')', 'bool'),
  \ dotnet#method('GetFields(', 'BindingFlags bindingFlags)', 'FieldInfo[]'),
  \ dotnet#method('GetField(', 'string name, BindingFlags bindingAttr)', 'FieldInfo'),
  \ dotnet#method('GetMethods(', 'BindingFlags bindingFlags)', 'MethodInfo[]'),
  \ dotnet#method('GetMethodImpl(', 'string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'MethodInfo'),
  \ dotnet#method('get_ScopeName(', ')', 'string'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Assembly(', ')', ''),
  \ dotnet#method('GetSignerCertificate(', ')', 'X509Certificate'),
  \ dotnet#method('DefineType(', 'string name)', 'TypeBuilder'),
  \ dotnet#method('DefineType(', 'string name, TypeAttributes attr)', 'TypeBuilder'),
  \ dotnet#method('DefineType(', 'string name, TypeAttributes attr, Type parent)', 'TypeBuilder'),
  \ dotnet#method('DefineType(', 'string name, TypeAttributes attr, Type parent, int32 typesize)', 'TypeBuilder'),
  \ dotnet#method('DefineType(', 'string name, TypeAttributes attr, Type parent, PackingSize packingSize, int32 typesize)', 'TypeBuilder'),
  \ dotnet#method('DefineType(', 'string name, TypeAttributes attr, Type parent, Type[] interfaces)', 'TypeBuilder'),
  \ dotnet#method('DefineType(', 'string name, TypeAttributes attr, Type parent, PackingSize packsize)', 'TypeBuilder'),
  \ dotnet#method('DefineEnum(', 'string name, TypeAttributes visibility, Type underlyingType)', 'EnumBuilder'),
  \ dotnet#method('DefineResource(', 'string name, string description)', 'IResourceWriter'),
  \ dotnet#method('DefineResource(', 'string name, string description, ResourceAttributes attribute)', 'IResourceWriter'),
  \ dotnet#method('DefineManifestResource(', 'string name, Stream stream, ResourceAttributes attribute)', 'void'),
  \ dotnet#method('DefineUnmanagedResource(', 'uint8[] resource)', 'void'),
  \ dotnet#method('DefineUnmanagedResourceInternalNoLock(', 'uint8[] resource)', 'void'),
  \ dotnet#method('DefineUnmanagedResource(', 'string resourceFileName)', 'void'),
  \ dotnet#method('DefineUnmanagedResourceFileInternalNoLock(', 'string resourceFileName)', 'void'),
  \ dotnet#method('DefineGlobalMethod(', 'string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)', 'MethodBuilder'),
  \ dotnet#method('DefineGlobalMethod(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)', 'MethodBuilder'),
  \ dotnet#method('DefineGlobalMethod(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)', 'MethodBuilder'),
  \ dotnet#method('DefinePInvokeMethod(', 'string name, string dllName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet)', 'MethodBuilder'),
  \ dotnet#method('DefinePInvokeMethod(', 'string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet)', 'MethodBuilder'),
  \ dotnet#method('CreateGlobalFunctions(', ')', 'void'),
  \ dotnet#method('DefineInitializedData(', 'string name, uint8[] data, FieldAttributes attributes)', 'FieldBuilder'),
  \ dotnet#method('DefineUninitializedData(', 'string name, int32 size, FieldAttributes attributes)', 'FieldBuilder'),
  \ dotnet#method('GetTypeTokenInternal(', 'class Type type)', 'TypeToken'),
  \ dotnet#method('GetTypeToken(', 'class Type type)', 'TypeToken'),
  \ dotnet#method('GetTypeToken(', 'string name)', 'TypeToken'),
  \ dotnet#method('GetMethodToken(', 'class MethodInfo method)', 'MethodToken'),
  \ dotnet#method('GetMethodTokenInternal(', 'class MethodInfo method)', 'MethodToken'),
  \ dotnet#method('GetArrayMethodToken(', 'class Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)', 'MethodToken'),
  \ dotnet#method('GetArrayMethod(', 'class Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)', 'MethodInfo'),
  \ dotnet#method('GetConstrModuleBuilderToken(', 'class ConstrModuleBuilderInfo con)', 'MethodToken'),
  \ dotnet#method('GetFieldToken(', 'class FieldInfo field)', 'FieldToken'),
  \ dotnet#method('GetStringConstant(', 'string str)', 'StringToken'),
  \ dotnet#method('GetSignatureToken(', 'class SignatureHelper sigHelper)', 'SignatureToken'),
  \ dotnet#method('GetSignatureToken(', 'uint8[] sigBytes, int32 sigLength)', 'SignatureToken'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrModuleBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('GetSymWriter(', ')', 'ISymbolWriter'),
  \ dotnet#method('DefineDocument(', 'string url, Guid language, Guid languageVendor, Guid documentType)', 'ISymbolDocumentWriter'),
  \ dotnet#method('SetUserEntryPoint(', 'class MethodInfo entryPoint)', 'void'),
  \ dotnet#method('SetSymCustomAttribute(', 'string name, uint8[] data)', 'void'),
  \ dotnet#method('IsTransient(', ')', 'bool'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('ContainingAssemblyBuilder', 'AssemblyBuilder'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('InternalModule', 'InternalModuleBuilder'),
  \ dotnet#prop('FullyQualifiedName', 'string'),
  \ dotnet#prop('MDStreamVersion', 'int32'),
  \ dotnet#prop('ModuleVersionId', 'Guid'),
  \ dotnet#prop('MetadataToken', 'int32'),
  \ dotnet#prop('ScopeName', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('', 'Assembly'),
  \ ])

call dotnet#class('OpCodes', 'Object', [ 
  \ dotnet#method('OpCodes(', ')', 'void'),
  \ dotnet#method('TakesSingleByteArgument(', 'OpCode inst)', 'static bool'),
  \ dotnet#method('OpCodes(', ')', 'static void .'),
  \ ])

call dotnet#class('OpCode', 'ValueType', [ 
  \ dotnet#field('m_stringname', 'string'),
  \ dotnet#field('m_pop', 'StackBehaviour'),
  \ dotnet#field('m_push', 'StackBehaviour'),
  \ dotnet#field('m_operand', 'OperandType'),
  \ dotnet#field('m_type', 'OpCodeType'),
  \ dotnet#field('m_size', 'int32'),
  \ dotnet#field('m_s1', 'uint8'),
  \ dotnet#field('m_s2', 'uint8'),
  \ dotnet#field('m_ctrl', 'FlowControl'),
  \ dotnet#field('m_endsUncondJmpBlk', 'bool'),
  \ dotnet#field('m_stackChange', 'int32'),
  \ dotnet#method('OpCode(', 'string stringname, StackBehaviour pop, StackBehaviour push, OperandType operand, OpCodeType type, int32 size, uint8 s1, uint8 s2, FlowControl ctrl, bool endsjmpblk, int32 stack)', 'void'),
  \ dotnet#method('EndsUncondJmpBlk(', ')', 'bool'),
  \ dotnet#method('StackChange(', ')', 'int32'),
  \ dotnet#method('get_OperandType(', ')', 'OperandType'),
  \ dotnet#method('get_FlowControl(', ')', 'FlowControl'),
  \ dotnet#method('get_OpCodeType(', ')', 'OpCodeType'),
  \ dotnet#method('get_StackBehaviourPop(', ')', 'StackBehaviour'),
  \ dotnet#method('get_StackBehaviourPush(', ')', 'StackBehaviour'),
  \ dotnet#method('get_Size(', ')', 'int32'),
  \ dotnet#method('get_Value(', ')', 'int16'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'OpCode obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'OpCode a, OpCode b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'OpCode a, OpCode b)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('OperandType', 'OperandType'),
  \ dotnet#prop('FlowControl', 'FlowControl'),
  \ dotnet#prop('OpCodeType', 'OpCodeType'),
  \ dotnet#prop('StackBehaviourPop', 'StackBehaviour'),
  \ dotnet#prop('StackBehaviourPush', 'StackBehaviour'),
  \ dotnet#prop('Size', 'int32'),
  \ dotnet#prop('Value', 'int16'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('ParameterBuilder', 'Object', [ 
  \ dotnet#method('SetMarshal(', 'class UnmanagedMarshal unmanagedMarshal)', 'void'),
  \ dotnet#method('SetConstant(', 'object defaultValue)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrParameterBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('ParameterBuilder(', ')', 'void'),
  \ dotnet#method('ParameterBuilder(', 'class MethodBuilder methodBuilder, int32 sequence, ParameterAttributes attributes, string strParamName)', 'void'),
  \ dotnet#method('GetToken(', ')', ''),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#method('get_MetadataTokenInternal(', ')', 'int32'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Position(', ')', 'int32'),
  \ dotnet#method('get_Attributes(', ')', 'int32'),
  \ dotnet#method('get_IsIn(', ')', 'bool'),
  \ dotnet#method('get_IsOut(', ')', 'bool'),
  \ dotnet#method('get_IsOptional(', ')', 'bool'),
  \ dotnet#prop('MetadataTokenInternal', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Position', 'int32'),
  \ dotnet#prop('Attributes', 'int32'),
  \ dotnet#prop('IsIn', 'bool'),
  \ dotnet#prop('IsOut', 'bool'),
  \ dotnet#prop('IsOptional', 'bool'),
  \ ])

call dotnet#class('ParameterToken', 'ValueType', [ 
  \ dotnet#field('m_tkParameter', 'int32'),
  \ dotnet#method('ParameterToken(', 'int32 tkParam)', 'void'),
  \ dotnet#method('get_Token(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'ParameterToken obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'ParameterToken a, ParameterToken b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'ParameterToken a, ParameterToken b)', 'static bool'),
  \ dotnet#method('ParameterToken(', ')', 'static void .'),
  \ dotnet#prop('Token', 'int32'),
  \ ])

call dotnet#class('PropertyBuilder', 'PropertyInfo', [ 
  \ dotnet#method('PropertyBuilder(', ')', 'void'),
  \ dotnet#method('PropertyBuilder(', 'class ModuleBuilder mod, string name, SignatureHelper sig, PropertyAttributes attr, Type returnType, PropertyToken prToken, TypeBuilder containingType)', 'void'),
  \ dotnet#method('SetConstant(', 'object defaultValue)', 'void'),
  \ dotnet#method('get_PropertyToken(', ')', 'PropertyToken'),
  \ dotnet#method('get_MetadataTokenInternal(', ')', 'int32'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('SetGetMethod(', 'class MethodBuilder mdBuilder)', 'void'),
  \ dotnet#method('SetSetMethod(', 'class MethodBuilder mdBuilder)', 'void'),
  \ dotnet#method('AddOtherMethod(', 'class MethodBuilder mdBuilder)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrPropertyBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('GetValue(', 'object obj, object[] index)', 'object'),
  \ dotnet#method('GetValue(', 'object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)', 'object'),
  \ dotnet#method('SetValue(', 'object obj, object value, object[] index)', 'void'),
  \ dotnet#method('SetValue(', 'object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)', 'void'),
  \ dotnet#method('GetAccessors(', 'bool nonPublic)', 'MethodInfo[]'),
  \ dotnet#method('GetGetMethod(', 'bool nonPublic)', 'MethodInfo'),
  \ dotnet#method('GetSetMethod(', 'bool nonPublic)', 'MethodInfo'),
  \ dotnet#method('GetIndexParameters(', ')', 'ParameterInfo[]'),
  \ dotnet#method('get_PropertyType(', ')', 'Type'),
  \ dotnet#method('get_Attributes(', ')', ''),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#prop('PropertyToken', 'PropertyToken'),
  \ dotnet#prop('MetadataTokenInternal', 'int32'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('PropertyType', 'Type'),
  \ dotnet#prop('Attributes', 'PropertyAttributes'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ ])

call dotnet#class('PropertyToken', 'ValueType', [ 
  \ dotnet#field('m_property', 'int32'),
  \ dotnet#method('PropertyToken(', 'int32 str)', 'void'),
  \ dotnet#method('get_Token(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'PropertyToken obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'PropertyToken a, PropertyToken b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'PropertyToken a, PropertyToken b)', 'static bool'),
  \ dotnet#method('PropertyToken(', ')', 'static void .'),
  \ dotnet#prop('Token', 'int32'),
  \ ])

call dotnet#class('SignatureHelper', 'Object', [ 
  \ dotnet#method('GetMethodSigHelper(', 'class Module mod, Type returnType, Type[] parameterTypes)', 'static SignatureHelper'),
  \ dotnet#method('GetMethodSigHelper(', 'class Module mod, CallingConventions callingConvention, Type returnType, int32 cGenericParam)', 'static SignatureHelper'),
  \ dotnet#method('GetMethodSigHelper(', 'class Module mod, CallingConventions callingConvention, Type returnType)', 'static SignatureHelper'),
  \ dotnet#method('GetMethodSpecSigHelper(', 'class Module scope, Type[] inst)', 'static SignatureHelper'),
  \ dotnet#method('GetMethodSigHelper(', 'class Module scope, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)', 'static SignatureHelper'),
  \ dotnet#method('GetMethodSigHelper(', 'class Module scope, CallingConventions callingConvention, int32 cGenericParam, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)', 'static SignatureHelper'),
  \ dotnet#method('GetMethodSigHelper(', 'class Module mod, CallingConvention unmanagedCallConv, Type returnType)', 'static SignatureHelper'),
  \ dotnet#method('GetLocalVarSigHelper(', ')', 'static SignatureHelper'),
  \ dotnet#method('GetMethodSigHelper(', 'CallingConventions callingConvention, Type returnType)', 'static SignatureHelper'),
  \ dotnet#method('GetMethodSigHelper(', 'CallingConvention unmanagedCallingConvention, Type returnType)', 'static SignatureHelper'),
  \ dotnet#method('GetLocalVarSigHelper(', 'class Module mod)', 'static SignatureHelper'),
  \ dotnet#method('GetFieldSigHelper(', 'class Module mod)', 'static SignatureHelper'),
  \ dotnet#method('GetPropertySigHelper(', 'class Module mod, Type returnType, Type[] parameterTypes)', 'static SignatureHelper'),
  \ dotnet#method('GetPropertySigHelper(', 'class Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)', 'static SignatureHelper'),
  \ dotnet#method('GetPropertySigHelper(', 'class Module mod, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)', 'static SignatureHelper'),
  \ dotnet#method('GetTypeSigToken(', 'class Module mod, Type type)', 'static SignatureHelper'),
  \ dotnet#method('get_ArgumentCount(', ')', 'int32'),
  \ dotnet#method('IsSimpleType(', 'CorElementType type)', 'static bool'),
  \ dotnet#method('InternalGetSignature(', '[out] int32& length)', 'uint8[]'),
  \ dotnet#method('InternalGetSignatureArray(', ')', 'uint8[]'),
  \ dotnet#method('AddArgument(', 'class Type clsArgument)', 'void'),
  \ dotnet#method('AddArgument(', 'class Type argument, bool pinned)', 'void'),
  \ dotnet#method('AddArguments(', 'class Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)', 'void'),
  \ dotnet#method('AddArgument(', 'class Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)', 'void'),
  \ dotnet#method('AddSentinel(', ')', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetSignature(', ')', 'uint8[]'),
  \ dotnet#method('GetSignature(', 'bool appendEndOfSig)', 'uint8[]'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('ArgumentCount', 'int32'),
  \ ])

call dotnet#class('SignatureToken', 'ValueType', [ 
  \ dotnet#field('m_signature', 'int32'),
  \ dotnet#field('m_moduleBuilder', 'ModuleBuilder'),
  \ dotnet#method('SignatureToken(', 'int32 str, ModuleBuilder mod)', 'void'),
  \ dotnet#method('get_Token(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'SignatureToken obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'SignatureToken a, SignatureToken b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'SignatureToken a, SignatureToken b)', 'static bool'),
  \ dotnet#method('SignatureToken(', ')', 'static void .'),
  \ dotnet#prop('Token', 'int32'),
  \ ])

call dotnet#class('StringToken', 'ValueType', [ 
  \ dotnet#field('m_string', 'int32'),
  \ dotnet#method('StringToken(', 'int32 str)', 'void'),
  \ dotnet#method('get_Token(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'StringToken obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'StringToken a, StringToken b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'StringToken a, StringToken b)', 'static bool'),
  \ dotnet#prop('Token', 'int32'),
  \ ])

call dotnet#class('TypeBuilder', 'Type', [ 
  \ dotnet#method('TypeBuilder(', 'class ConstrTypeBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('TypeBuilder(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('Bake(', 'class ModuleBuilder, int32 token)', 'void'),
  \ dotnet#field('m_ca', 'List'),
  \ dotnet#field('m_strName', 'string'),
  \ dotnet#field('m_iAttr', 'TypeAttributes'),
  \ dotnet#field('m_genParamAttributes', 'GenericParameterAttributes'),
  \ dotnet#field('m_listMethods', 'List'),
  \ dotnet#field('m_lastTokenizedMethod', 'int32'),
  \ dotnet#field('m_isHiddenGlobalType', 'bool'),
  \ dotnet#field('m_isHiddenType', 'bool'),
  \ dotnet#field('m_hasBeenCreated', 'bool'),
  \ dotnet#field('m_runtimeType', 'RuntimeType'),
  \ dotnet#method('GetMethod(', 'class Type type, MethodInfo method)', 'static MethodInfo'),
  \ dotnet#method('GetConstrTypeBuilder(', 'class Type type, ConstrTypeBuilderInfo constrTypeBuilder)', 'static ConstrTypeBuilderInfo'),
  \ dotnet#method('GetField(', 'class Type type, FieldInfo field)', 'static FieldInfo'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) int32 DefineMethod(class RuntimeModule, int32 tkParent, string name, uint8[] signature, int32 sigLength, MethodAttributes attributes) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) int32 DefineMethodSpec(class RuntimeModule, int32 tkParent, uint8[] signature, int32 sigLength) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) int32 DefineField(class RuntimeModule, int32 tkParent, string name, uint8[] signature, int32 sigLength, FieldAttributes attributes) preservesig', 'static'),
  \ dotnet#method('DefineCustomAttribute(', 'class ModuleBuilder, int32 tkAssociate, int32 tkConstrTypeBuilder, uint8[] attr, bool toDisk, bool updateCompilerFlags)', 'static void'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void SetPInvokeData(class RuntimeModule, string DllName, string name, int32 token, int32 linkFlags) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) int32 DefineProperty(class RuntimeModule, int32 tkParent, string name, PropertyAttributes attributes, uint8[] signature, int32 sigLength) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) int32 DefineEvent(class RuntimeModule, int32 tkParent, string name, EventAttributes attributes, int32 tkEventType) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void DefineMethodSemantics(class RuntimeModule, int32 tkAssociation, MethodSemanticsAttributes semantics, int32 tkMethod) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void DefineMethodImpl(class RuntimeModule, int32 tkType, int32 tkBody, int32 tkDecl) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void SetMethodImpl(class RuntimeModule, int32 tkMethod, MethodImplAttributes MethodImplAttributes) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) int32 SetParamInfo(class RuntimeModule, int32 tkMethod, int32 iSequence, ParameterAttributes iParamAttributes, string strParamName) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) int32 GetTokenFromSig(class RuntimeModule, uint8[] signature, int32 sigLength) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void SetFieldLayoutOffset(class RuntimeModule, int32 fdToken, int32 iOffset) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void SetClassLayout(class RuntimeModule, int32 tk, PackingSize iPackingSize, int32 iTypeSize) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void SetFieldMarshal(class RuntimeModule, int32 tk, uint8[] ubMarshal, int32 ubSize) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void AddDeclarativeSecurity(class RuntimeModule, int32 parent, SecurityAction action, uint8[] blob, int32 cb) preservesig', 'static'),
  \ dotnet#method('IsTypeEqual(', 'class Type t1, Type t2)', 'static bool'),
  \ dotnet#method('SetConstantValue(', 'class ModuleBuilder, int32 tk, Type destType, object value)', 'static void'),
  \ dotnet#method('TypeBuilder(', 'string szName, int32 genParamPos, MethodBuilder declMeth)', 'void'),
  \ dotnet#method('TypeBuilder(', 'string name, TypeAttributes attr, Type parent, Module, PackingSize iPackingSize, int32 iTypeSize, TypeBuilder enclosingType)', 'void'),
  \ dotnet#method('TypeBuilder(', 'string name, TypeAttributes attr, Type parent, Type[] interfaces, Module, PackingSize iPackingSize, TypeBuilder enclosingType)', 'void'),
  \ dotnet#method('TypeBuilder(', 'class ModuleBuilder)', 'void'),
  \ dotnet#method('IsCreated(', ')', 'bool'),
  \ dotnet#method('ThrowIfCreated(', ')', 'void'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('GetModuleBuilder(', ')', 'ModuleBuilder'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('get_MetadataTokenInternal(', ')', 'int32'),
  \ dotnet#method('get_GUID(', ')', ''),
  \ dotnet#method('InvokeMember(', 'string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)', 'object'),
  \ dotnet#method('get_Assembly(', ')', ''),
  \ dotnet#method('get_TypeHandle(', ')', ''),
  \ dotnet#method('get_FullName(', ')', 'string'),
  \ dotnet#method('get_Namespace(', ')', 'string'),
  \ dotnet#method('get_AssemblyQualifiedName(', ')', 'string'),
  \ dotnet#method('get_BaseType(', ')', 'Type'),
  \ dotnet#method('GetConstrTypeBuilderImpl(', 'BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'ConstrTypeBuilderInfo'),
  \ dotnet#method('GetConstrTypeBuilders(', 'BindingFlags bindingAttr)', 'ConstrTypeBuilderInfo[]'),
  \ dotnet#method('GetMethodImpl(', 'string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'MethodInfo'),
  \ dotnet#method('GetMethods(', 'BindingFlags bindingAttr)', 'MethodInfo[]'),
  \ dotnet#method('GetField(', 'string name, BindingFlags bindingAttr)', 'FieldInfo'),
  \ dotnet#method('GetFields(', 'BindingFlags bindingAttr)', 'FieldInfo[]'),
  \ dotnet#method('GetInterface(', 'string name, bool ignoreCase)', 'Type'),
  \ dotnet#method('GetInterfaces(', ')', 'Type[]'),
  \ dotnet#method('GetEvent(', 'string name, BindingFlags bindingAttr)', 'EventInfo'),
  \ dotnet#method('GetEvents(', ')', 'EventInfo[]'),
  \ dotnet#method('GetPropertyImpl(', 'string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)', 'PropertyInfo'),
  \ dotnet#method('GetProperties(', 'BindingFlags bindingAttr)', 'PropertyInfo[]'),
  \ dotnet#method('GetNestedTypes(', 'BindingFlags bindingAttr)', 'Type[]'),
  \ dotnet#method('GetNestedType(', 'string name, BindingFlags bindingAttr)', 'Type'),
  \ dotnet#method('GetMember(', 'string name, MemberTypes type, BindingFlags bindingAttr)', 'MemberInfo[]'),
  \ dotnet#method('GetInterfaceMap(', 'class Type interfaceType)', 'InterfaceMapping'),
  \ dotnet#method('GetEvents(', 'BindingFlags bindingAttr)', 'EventInfo[]'),
  \ dotnet#method('GetMembers(', 'BindingFlags bindingAttr)', 'MemberInfo[]'),
  \ dotnet#method('IsAssignableFrom(', 'class Type c)', 'bool'),
  \ dotnet#method('GetAttributeFlagsImpl(', ')', 'TypeAttributes'),
  \ dotnet#method('IsArrayImpl(', ')', 'bool'),
  \ dotnet#method('IsByRefImpl(', ')', 'bool'),
  \ dotnet#method('IsPointerImpl(', ')', 'bool'),
  \ dotnet#method('IsPrimitiveImpl(', ')', 'bool'),
  \ dotnet#method('IsCOMObjectImpl(', ')', 'bool'),
  \ dotnet#method('GetElementType(', ')', 'Type'),
  \ dotnet#method('HasElementTypeImpl(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecuritySafeCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityTransparent(', ')', 'bool'),
  \ dotnet#method('IsSubclassOf(', 'class Type c)', 'bool'),
  \ dotnet#method('get_UnderlyingSystemType(', ')', 'Type'),
  \ dotnet#method('MakePointerType(', ')', 'Type'),
  \ dotnet#method('MakeByRefType(', ')', 'Type'),
  \ dotnet#method('MakeArrayType(', ')', 'Type'),
  \ dotnet#method('MakeArrayType(', 'int32 rank)', 'Type'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('ThrowIfGeneric(', ')', 'void'),
  \ dotnet#method('get_GenericParameterAttributes(', ')', ''),
  \ dotnet#method('SetInterfaces(', 'class Type[] interfaces)', 'void'),
  \ dotnet#method('DefineGenericParameters(', 'string[] names)', 'GenericTypeParameterBuilder[]'),
  \ dotnet#method('MakeGenericType(', 'class Type[] typeArguments)', 'Type'),
  \ dotnet#method('GetGenericArguments(', ')', 'Type[]'),
  \ dotnet#method('get_IsGenericTypeDefinition(', ')', 'bool'),
  \ dotnet#method('get_IsGenericType(', ')', 'bool'),
  \ dotnet#method('get_IsGenericParameter(', ')', 'bool'),
  \ dotnet#method('get_GenericParameterPosition(', ')', 'int32'),
  \ dotnet#method('get_DeclaringMethod(', ')', ''),
  \ dotnet#method('GetGenericTypeDefinition(', ')', 'Type'),
  \ dotnet#method('DefineMethodOverride(', 'class MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration)', 'void'),
  \ dotnet#method('DefineMethod(', 'string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)', 'MethodBuilder'),
  \ dotnet#method('DefineMethod(', 'string name, MethodAttributes attributes)', 'MethodBuilder'),
  \ dotnet#method('DefineMethod(', 'string name, MethodAttributes attributes, CallingConventions callingConvention)', 'MethodBuilder'),
  \ dotnet#method('DefineMethod(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)', 'MethodBuilder'),
  \ dotnet#method('DefineMethod(', 'string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)', 'MethodBuilder'),
  \ dotnet#method('DefineTypeInitializer(', ')', 'ConstrTypeBuilderBuilder'),
  \ dotnet#method('DefineDefaultConstrTypeBuilder(', 'MethodAttributes attributes)', 'ConstrTypeBuilderBuilder'),
  \ dotnet#method('DefineConstrTypeBuilder(', 'MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes)', 'ConstrTypeBuilderBuilder'),
  \ dotnet#method('DefineConstrTypeBuilder(', 'MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)', 'ConstrTypeBuilderBuilder'),
  \ dotnet#method('DefinePInvokeMethod(', 'string name, string dllName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet)', 'MethodBuilder'),
  \ dotnet#method('DefinePInvokeMethod(', 'string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet)', 'MethodBuilder'),
  \ dotnet#method('DefinePInvokeMethod(', 'string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, CallingConvention nativeCallConv, CharSet nativeCharSet)', 'MethodBuilder'),
  \ dotnet#method('DefineNestedType(', 'string name)', 'TypeBuilder'),
  \ dotnet#method('DefineNestedType(', 'string name, TypeAttributes attr, Type parent, Type[] interfaces)', 'TypeBuilder'),
  \ dotnet#method('DefineNestedType(', 'string name, TypeAttributes attr, Type parent)', 'TypeBuilder'),
  \ dotnet#method('DefineNestedType(', 'string name, TypeAttributes attr)', 'TypeBuilder'),
  \ dotnet#method('DefineNestedType(', 'string name, TypeAttributes attr, Type parent, int32 typeSize)', 'TypeBuilder'),
  \ dotnet#method('DefineNestedType(', 'string name, TypeAttributes attr, Type parent, PackingSize packSize)', 'TypeBuilder'),
  \ dotnet#method('DefineField(', 'string fieldName, Type type, FieldAttributes attributes)', 'FieldBuilder'),
  \ dotnet#method('DefineField(', 'string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes)', 'FieldBuilder'),
  \ dotnet#method('DefineInitializedData(', 'string name, uint8[] data, FieldAttributes attributes)', 'FieldBuilder'),
  \ dotnet#method('DefineUninitializedData(', 'string name, int32 size, FieldAttributes attributes)', 'FieldBuilder'),
  \ dotnet#method('DefineProperty(', 'string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes)', 'PropertyBuilder'),
  \ dotnet#method('DefineProperty(', 'string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)', 'PropertyBuilder'),
  \ dotnet#method('DefineProperty(', 'string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)', 'PropertyBuilder'),
  \ dotnet#method('DefineProperty(', 'string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)', 'PropertyBuilder'),
  \ dotnet#method('DefineEvent(', 'string name, EventAttributes attributes, Type eventtype)', 'EventBuilder'),
  \ dotnet#method('CreateType(', ')', 'Type'),
  \ dotnet#method('CheckContext(', 'class Type[][] typess)', 'void'),
  \ dotnet#method('CheckContext(', 'class Type[] types)', 'void'),
  \ dotnet#method('get_Size(', ')', 'int32'),
  \ dotnet#method('get_PackingSize(', ')', 'PackingSize'),
  \ dotnet#method('SetParent(', 'class Type parent)', 'void'),
  \ dotnet#method('AddInterfaceImplementation(', 'class Type interfaceType)', 'void'),
  \ dotnet#method('AddDeclarativeSecurity(', 'SecurityAction action, PermissionSet pset)', 'void'),
  \ dotnet#method('get_TypeToken(', ')', 'TypeToken'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrTypeBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('MetadataTokenInternal', 'int32'),
  \ dotnet#prop('GUID', 'Guid'),
  \ dotnet#prop('', 'Assembly'),
  \ dotnet#prop('TypeHandle', 'RuntimeTypeHandle'),
  \ dotnet#prop('FullName', 'string'),
  \ dotnet#prop('Namespace', 'string'),
  \ dotnet#prop('AssemblyQualifiedName', 'string'),
  \ dotnet#prop('BaseType', 'Type'),
  \ dotnet#prop('IsSecurityCritical', 'bool'),
  \ dotnet#prop('IsSecuritySafeCritical', 'bool'),
  \ dotnet#prop('IsSecurityTransparent', 'bool'),
  \ dotnet#prop('UnderlyingSystemType', 'Type'),
  \ dotnet#prop('GenericParameterAttributes', 'GenericParameterAttributes'),
  \ dotnet#prop('IsGenericTypeDefinition', 'bool'),
  \ dotnet#prop('IsGenericType', 'bool'),
  \ dotnet#prop('IsGenericParameter', 'bool'),
  \ dotnet#prop('GenericParameterPosition', 'int32'),
  \ dotnet#prop('DeclaringMethod', 'MethodBase'),
  \ dotnet#prop('Size', 'int32'),
  \ dotnet#prop('PackingSize', 'PackingSize'),
  \ dotnet#prop('TypeToken', 'TypeToken'),
  \ ])

call dotnet#class('GenericTypeParameterBuilder', 'Type', [ 
  \ dotnet#field('m_type', 'TypeBuilder'),
  \ dotnet#method('GenericTypeParameterBuilder(', 'class TypeBuilder type)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('get_MetadataTokenInternal(', ')', 'int32'),
  \ dotnet#method('MakePointerType(', ')', 'Type'),
  \ dotnet#method('MakeByRefType(', ')', 'Type'),
  \ dotnet#method('MakeArrayType(', ')', 'Type'),
  \ dotnet#method('MakeArrayType(', 'int32 rank)', 'Type'),
  \ dotnet#method('get_GUID(', ')', ''),
  \ dotnet#method('InvokeMember(', 'string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)', 'object'),
  \ dotnet#method('get_Assembly(', ')', ''),
  \ dotnet#method('get_TypeHandle(', ')', ''),
  \ dotnet#method('get_FullName(', ')', 'string'),
  \ dotnet#method('get_Namespace(', ')', 'string'),
  \ dotnet#method('get_AssemblyQualifiedName(', ')', 'string'),
  \ dotnet#method('get_BaseType(', ')', 'Type'),
  \ dotnet#method('GetConstrGenericTypeParameterBuilderImpl(', 'BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'ConstrGenericTypeParameterBuilderInfo'),
  \ dotnet#method('GetConstrGenericTypeParameterBuilders(', 'BindingFlags bindingAttr)', 'ConstrGenericTypeParameterBuilderInfo[]'),
  \ dotnet#method('GetMethodImpl(', 'string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'MethodInfo'),
  \ dotnet#method('GetMethods(', 'BindingFlags bindingAttr)', 'MethodInfo[]'),
  \ dotnet#method('GetField(', 'string name, BindingFlags bindingAttr)', 'FieldInfo'),
  \ dotnet#method('GetFields(', 'BindingFlags bindingAttr)', 'FieldInfo[]'),
  \ dotnet#method('GetInterface(', 'string name, bool ignoreCase)', 'Type'),
  \ dotnet#method('GetInterfaces(', ')', 'Type[]'),
  \ dotnet#method('GetEvent(', 'string name, BindingFlags bindingAttr)', 'EventInfo'),
  \ dotnet#method('GetEvents(', ')', 'EventInfo[]'),
  \ dotnet#method('GetPropertyImpl(', 'string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)', 'PropertyInfo'),
  \ dotnet#method('GetProperties(', 'BindingFlags bindingAttr)', 'PropertyInfo[]'),
  \ dotnet#method('GetNestedTypes(', 'BindingFlags bindingAttr)', 'Type[]'),
  \ dotnet#method('GetNestedType(', 'string name, BindingFlags bindingAttr)', 'Type'),
  \ dotnet#method('GetMember(', 'string name, MemberTypes type, BindingFlags bindingAttr)', 'MemberInfo[]'),
  \ dotnet#method('GetInterfaceMap(', 'class Type interfaceType)', 'InterfaceMapping'),
  \ dotnet#method('GetEvents(', 'BindingFlags bindingAttr)', 'EventInfo[]'),
  \ dotnet#method('GetMembers(', 'BindingFlags bindingAttr)', 'MemberInfo[]'),
  \ dotnet#method('GetAttributeFlagsImpl(', ')', 'TypeAttributes'),
  \ dotnet#method('IsArrayImpl(', ')', 'bool'),
  \ dotnet#method('IsByRefImpl(', ')', 'bool'),
  \ dotnet#method('IsPointerImpl(', ')', 'bool'),
  \ dotnet#method('IsPrimitiveImpl(', ')', 'bool'),
  \ dotnet#method('IsCOMObjectImpl(', ')', 'bool'),
  \ dotnet#method('GetElementType(', ')', 'Type'),
  \ dotnet#method('HasElementTypeImpl(', ')', 'bool'),
  \ dotnet#method('get_UnderlyingSystemType(', ')', 'Type'),
  \ dotnet#method('GetGenericArguments(', ')', 'Type[]'),
  \ dotnet#method('get_IsGenericTypeDefinition(', ')', 'bool'),
  \ dotnet#method('get_IsGenericType(', ')', 'bool'),
  \ dotnet#method('get_IsGenericParameter(', ')', 'bool'),
  \ dotnet#method('get_GenericParameterPosition(', ')', 'int32'),
  \ dotnet#method('get_ContainsGenericParameters(', ')', 'bool'),
  \ dotnet#method('get_DeclaringMethod(', ')', ''),
  \ dotnet#method('GetGenericTypeDefinition(', ')', 'Type'),
  \ dotnet#method('MakeGenericType(', 'class Type[] typeArguments)', 'Type'),
  \ dotnet#method('IsValueTypeImpl(', ')', 'bool'),
  \ dotnet#method('IsAssignableFrom(', 'class Type c)', 'bool'),
  \ dotnet#method('IsSubclassOf(', 'class Type c)', 'bool'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrGenericTypeParameterBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('SetBaseTypeConstraint(', 'class Type baseTypeConstraint)', 'void'),
  \ dotnet#method('SetInterfaceConstraints(', 'class Type[] interfaceConstraints)', 'void'),
  \ dotnet#method('SetGenericParameterAttributes(', 'GenericParameterAttributes genericParameterAttributes)', 'void'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('MetadataTokenInternal', 'int32'),
  \ dotnet#prop('GUID', 'Guid'),
  \ dotnet#prop('', 'Assembly'),
  \ dotnet#prop('TypeHandle', 'RuntimeTypeHandle'),
  \ dotnet#prop('FullName', 'string'),
  \ dotnet#prop('Namespace', 'string'),
  \ dotnet#prop('AssemblyQualifiedName', 'string'),
  \ dotnet#prop('BaseType', 'Type'),
  \ dotnet#prop('UnderlyingSystemType', 'Type'),
  \ dotnet#prop('IsGenericTypeDefinition', 'bool'),
  \ dotnet#prop('IsGenericType', 'bool'),
  \ dotnet#prop('IsGenericParameter', 'bool'),
  \ dotnet#prop('GenericParameterPosition', 'int32'),
  \ dotnet#prop('ContainsGenericParameters', 'bool'),
  \ dotnet#prop('DeclaringMethod', 'MethodBase'),
  \ ])

call dotnet#class('EnumBuilder', 'Type', [ 
  \ dotnet#field('m_typeBuilder', 'TypeBuilder'),
  \ dotnet#method('DefineLiteral(', 'string literalName, object literalValue)', 'FieldBuilder'),
  \ dotnet#method('CreateType(', ')', 'Type'),
  \ dotnet#method('get_TypeToken(', ')', 'TypeToken'),
  \ dotnet#method('get_UnderlyingField(', ')', 'FieldBuilder'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_GUID(', ')', ''),
  \ dotnet#method('InvokeMember(', 'string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)', 'object'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('get_Assembly(', ')', ''),
  \ dotnet#method('get_TypeHandle(', ')', ''),
  \ dotnet#method('get_FullName(', ')', 'string'),
  \ dotnet#method('get_AssemblyQualifiedName(', ')', 'string'),
  \ dotnet#method('get_Namespace(', ')', 'string'),
  \ dotnet#method('get_BaseType(', ')', 'Type'),
  \ dotnet#method('GetConstrEnumBuilderImpl(', 'BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'ConstrEnumBuilderInfo'),
  \ dotnet#method('GetConstrEnumBuilders(', 'BindingFlags bindingAttr)', 'ConstrEnumBuilderInfo[]'),
  \ dotnet#method('GetMethodImpl(', 'string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'MethodInfo'),
  \ dotnet#method('GetMethods(', 'BindingFlags bindingAttr)', 'MethodInfo[]'),
  \ dotnet#method('GetField(', 'string name, BindingFlags bindingAttr)', 'FieldInfo'),
  \ dotnet#method('GetFields(', 'BindingFlags bindingAttr)', 'FieldInfo[]'),
  \ dotnet#method('GetInterface(', 'string name, bool ignoreCase)', 'Type'),
  \ dotnet#method('GetInterfaces(', ')', 'Type[]'),
  \ dotnet#method('GetEvent(', 'string name, BindingFlags bindingAttr)', 'EventInfo'),
  \ dotnet#method('GetEvents(', ')', 'EventInfo[]'),
  \ dotnet#method('GetPropertyImpl(', 'string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)', 'PropertyInfo'),
  \ dotnet#method('GetProperties(', 'BindingFlags bindingAttr)', 'PropertyInfo[]'),
  \ dotnet#method('GetNestedTypes(', 'BindingFlags bindingAttr)', 'Type[]'),
  \ dotnet#method('GetNestedType(', 'string name, BindingFlags bindingAttr)', 'Type'),
  \ dotnet#method('GetMember(', 'string name, MemberTypes type, BindingFlags bindingAttr)', 'MemberInfo[]'),
  \ dotnet#method('GetMembers(', 'BindingFlags bindingAttr)', 'MemberInfo[]'),
  \ dotnet#method('GetInterfaceMap(', 'class Type interfaceType)', 'InterfaceMapping'),
  \ dotnet#method('GetEvents(', 'BindingFlags bindingAttr)', 'EventInfo[]'),
  \ dotnet#method('GetAttributeFlagsImpl(', ')', 'TypeAttributes'),
  \ dotnet#method('IsArrayImpl(', ')', 'bool'),
  \ dotnet#method('IsPrimitiveImpl(', ')', 'bool'),
  \ dotnet#method('IsValueTypeImpl(', ')', 'bool'),
  \ dotnet#method('IsByRefImpl(', ')', 'bool'),
  \ dotnet#method('IsPointerImpl(', ')', 'bool'),
  \ dotnet#method('IsCOMObjectImpl(', ')', 'bool'),
  \ dotnet#method('GetElementType(', ')', 'Type'),
  \ dotnet#method('HasElementTypeImpl(', ')', 'bool'),
  \ dotnet#method('GetEnumUnderlyingType(', ')', 'Type'),
  \ dotnet#method('get_UnderlyingSystemType(', ')', 'Type'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('SetCustomAttribute(', 'class ConstrEnumBuilderInfo con, uint8[] binaryAttribute)', 'void'),
  \ dotnet#method('SetCustomAttribute(', 'class CustomAttributeBuilder customBuilder)', 'void'),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('get_MetadataTokenInternal(', ')', 'int32'),
  \ dotnet#method('EnumBuilder(', ')', 'void'),
  \ dotnet#method('MakePointerType(', ')', 'Type'),
  \ dotnet#method('MakeByRefType(', ')', 'Type'),
  \ dotnet#method('MakeArrayType(', ')', 'Type'),
  \ dotnet#method('MakeArrayType(', 'int32 rank)', 'Type'),
  \ dotnet#method('EnumBuilder(', 'string name, Type underlyingType, TypeAttributes visibility, Module)', 'void'),
  \ dotnet#method('get_RuntimeEnumType(', ')', 'Type'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('TypeToken', 'TypeToken'),
  \ dotnet#prop('UnderlyingField', 'FieldBuilder'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('GUID', 'Guid'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('', 'Assembly'),
  \ dotnet#prop('TypeHandle', 'RuntimeTypeHandle'),
  \ dotnet#prop('FullName', 'string'),
  \ dotnet#prop('AssemblyQualifiedName', 'string'),
  \ dotnet#prop('Namespace', 'string'),
  \ dotnet#prop('BaseType', 'Type'),
  \ dotnet#prop('UnderlyingSystemType', 'Type'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('MetadataTokenInternal', 'int32'),
  \ dotnet#prop('RuntimeEnumType', 'Type'),
  \ ])

call dotnet#class('TypeToken', 'ValueType', [ 
  \ dotnet#field('m_class', 'int32'),
  \ dotnet#method('TypeToken(', 'int32 str)', 'void'),
  \ dotnet#method('get_Token(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'TypeToken obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'TypeToken a, TypeToken b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'TypeToken a, TypeToken b)', 'static bool'),
  \ dotnet#method('TypeToken(', ')', 'static void .'),
  \ dotnet#prop('Token', 'int32'),
  \ ])

call dotnet#class('UnmanagedMarshal', 'Object', [ 
  \ dotnet#field('m_unmanagedType', 'UnmanagedType'),
  \ dotnet#field('m_guid', 'Guid'),
  \ dotnet#field('m_numElem', 'int32'),
  \ dotnet#field('m_baseType', 'UnmanagedType'),
  \ dotnet#method('DefineUnmanagedMarshal(', 'UnmanagedType unmanagedType)', 'static UnmanagedMarshal'),
  \ dotnet#method('DefineByValTStr(', 'int32 elemCount)', 'static UnmanagedMarshal'),
  \ dotnet#method('DefineSafeArray(', 'UnmanagedType elemType)', 'static UnmanagedMarshal'),
  \ dotnet#method('DefineByValArray(', 'int32 elemCount)', 'static UnmanagedMarshal'),
  \ dotnet#method('DefineLPArray(', 'UnmanagedType elemType)', 'static UnmanagedMarshal'),
  \ dotnet#method('get_GetUnmanagedType(', ')', 'UnmanagedType'),
  \ dotnet#method('get_IIDGuid(', ')', 'Guid'),
  \ dotnet#method('get_ElementCount(', ')', 'int32'),
  \ dotnet#method('get_BaseType(', ')', 'UnmanagedType'),
  \ dotnet#method('InternalGetBytes(', ')', 'uint8[]'),
  \ dotnet#prop('GetUnmanagedType', 'UnmanagedType'),
  \ dotnet#prop('IIDGuid', 'Guid'),
  \ dotnet#prop('ElementCount', 'int32'),
  \ dotnet#prop('BaseType', 'UnmanagedType'),
  \ ])

