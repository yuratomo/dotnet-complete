call dotnet#namespace('System.Windows.Media.Imaging')

call dotnet#class('BitmapCodecInfo', 'Object', [ 
  \ dotnet#method('BitmapCodecInfo(', ')', 'void'),
  \ dotnet#method('BitmapCodecInfo(', 'class SafeMILHandle codecInfoHandle)', 'void'),
  \ dotnet#method('get_ContainerFormat(', ')', ''),
  \ dotnet#method('get_Author(', ')', 'string'),
  \ dotnet#method('get_Version(', ')', ''),
  \ dotnet#method('get_SpecificationVersion(', ')', ''),
  \ dotnet#method('get_FriendlyName(', ')', 'string'),
  \ dotnet#method('get_DeviceManufacturer(', ')', 'string'),
  \ dotnet#method('get_DeviceModels(', ')', 'string'),
  \ dotnet#method('get_MimeTypes(', ')', 'string'),
  \ dotnet#method('get_FileExtensions(', ')', 'string'),
  \ dotnet#method('get_SupportsAnimation(', ')', 'bool'),
  \ dotnet#method('get_SupportsLossless(', ')', 'bool'),
  \ dotnet#method('get_SupportsMultipleFrames(', ')', 'bool'),
  \ dotnet#prop('ContainerFormat', 'Guid'),
  \ dotnet#prop('Author', 'string'),
  \ dotnet#prop('Version', 'Version'),
  \ dotnet#prop('SpecificationVersion', 'Version'),
  \ dotnet#prop('FriendlyName', 'string'),
  \ dotnet#prop('DeviceManufacturer', 'string'),
  \ dotnet#prop('DeviceModels', 'string'),
  \ dotnet#prop('MimeTypes', 'string'),
  \ dotnet#prop('FileExtensions', 'string'),
  \ dotnet#prop('SupportsAnimation', 'bool'),
  \ dotnet#prop('SupportsLossless', 'bool'),
  \ dotnet#prop('SupportsMultipleFrames', 'bool'),
  \ ])

call dotnet#class('BitmapDecoder', 'DispatcherObject', [ 
  \ dotnet#field('_readOnlycolorContexts', 'ReadOnlyCollection'),
  \ dotnet#field('_frames', 'List'),
  \ dotnet#field('_readOnlyFrames', 'ReadOnlyCollection'),
  \ dotnet#field('_stream', 'Stream'),
  \ dotnet#field('_uri', 'Uri'),
  \ dotnet#field('_baseUri', 'Uri'),
  \ dotnet#field('_uriStream', 'Stream'),
  \ dotnet#field('_createOptions', 'BitmapCreateOptions'),
  \ dotnet#field('_cacheOption', 'BitmapCacheOption'),
  \ dotnet#field('_downloadEvent', 'UniqueEventHelper'),
  \ dotnet#field('_progressEvent', 'UniqueEventHelper'),
  \ dotnet#field('_failedEvent', 'UniqueEventHelper'),
  \ dotnet#method('BitmapDecoder(', ')', 'void'),
  \ dotnet#method('BitmapDecoder(', 'bool isBuiltIn)', 'void'),
  \ dotnet#method('BitmapDecoder(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, Guid expectedClsId)', 'void'),
  \ dotnet#method('BitmapDecoder(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, Guid expectedClsId)', 'void'),
  \ dotnet#method('BitmapDecoder(', 'class SafeMILHandle decoderHandle, BitmapDecoder decoder, Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, bool insertInDecoderCache, bool isOriginalWritable, Stream uriStream, UnmanagedMemoryStream unmanagedMemoryStream, SafeFileHandle safeFilehandle)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('CreateFromUriOrStream(', 'class Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, RequestCachePolicy uriCachePolicy, bool insertInDecoderCache)', 'static BitmapDecoder'),
  \ dotnet#method('Create(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'static BitmapDecoder'),
  \ dotnet#method('Create(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, RequestCachePolicy uriCachePolicy)', 'static BitmapDecoder'),
  \ dotnet#method('Create(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'static BitmapDecoder'),
  \ dotnet#method('get_Palette(', ')', ''),
  \ dotnet#method('get_ColorContexts(', ')', ''),
  \ dotnet#method('get_Thumbnail(', ')', ''),
  \ dotnet#method('get_Metadata(', ')', ''),
  \ dotnet#method('get_CodecInfo(', ')', ''),
  \ dotnet#method('get_Frames(', ')', ''),
  \ dotnet#method('get_Preview(', ')', ''),
  \ dotnet#method('get_IsDownloading(', ')', 'bool'),
  \ dotnet#method('add_DownloadCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DownloadProgress(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadProgress(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DownloadFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('CreateInPlaceBitmapMetadataWriter(', ')', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_InternalDecoder(', ')', '.method'),
  \ dotnet#method('get_IsMetadataFixedSize(', ')', 'strict bool'),
  \ dotnet#method('get_SyncObject(', ')', 'object'),
  \ dotnet#method('get_InternalColorContexts(', ')', '.method'),
  \ dotnet#method('CheckOriginalWritable(', ')', 'void'),
  \ dotnet#method('SetupDecoderFromUriOrStream(', 'class Uri uri, Stream stream, BitmapCacheOption cacheOption, [out] Guid& clsId, [out] bool& isOriginalWritable, [out] Stream& uriStream, [out] UnmanagedMemoryStream& unmanagedMemoryStream, [out] SafeFileHandle& safeFilehandle)', 'static SafeMILHandle'),
  \ dotnet#method('CloseStream(', ')', 'void'),
  \ dotnet#method('SetupFrames(', 'class BitmapDecoder decoder, ReadOnlyCollection frames)', 'void'),
  \ dotnet#method('CanConvertToString(', ')', 'bool'),
  \ dotnet#method('SealObject(', ')', 'abstract strict void'),
  \ dotnet#method('BitmapDecoder(', ')', 'static void .'),
  \ dotnet#event('DownloadCompleted', 'EventHandler'),
  \ dotnet#event('DownloadProgress', 'EventHandler'),
  \ dotnet#event('DownloadFailed', 'EventHandler'),
  \ dotnet#prop('Palette', 'BitmapPalette'),
  \ dotnet#prop('ColorContexts', 'ReadOnlyCollection'),
  \ dotnet#prop('Thumbnail', 'BitmapSource'),
  \ dotnet#prop('Metadata', 'BitmapMetadata'),
  \ dotnet#prop('CodecInfo', 'BitmapCodecInfo'),
  \ dotnet#prop('Frames', 'ReadOnlyCollection'),
  \ dotnet#prop('Preview', 'BitmapSource'),
  \ dotnet#prop('IsDownloading', 'bool'),
  \ dotnet#prop('InternalDecoder', 'SafeMILHandle'),
  \ dotnet#prop('IsMetadataFixedSize', 'bool'),
  \ dotnet#prop('SyncObject', 'object'),
  \ dotnet#prop('InternalColorContexts', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('BitmapEncoder', 'DispatcherObject', [ 
  \ dotnet#field('_supportsPreview', 'bool'),
  \ dotnet#field('_supportsGlobalThumbnail', 'bool'),
  \ dotnet#field('_supportsGlobalMetadata', 'bool'),
  \ dotnet#field('_supportsFrameThumbnails', 'bool'),
  \ dotnet#field('_supportsFrameMetadata', 'bool'),
  \ dotnet#field('_supportsMultipleFrames', 'bool'),
  \ dotnet#field('_supportsColorContext', 'bool'),
  \ dotnet#method('BitmapEncoder(', ')', 'void'),
  \ dotnet#method('BitmapEncoder(', 'bool isBuiltIn)', 'void'),
  \ dotnet#method('Create(', 'Guid containerFormat)', 'static BitmapEncoder'),
  \ dotnet#method('get_ColorContexts(', ')', ''),
  \ dotnet#method('set_ColorContexts(', 'class ReadOnlyCollection value)', 'void'),
  \ dotnet#method('get_Thumbnail(', ')', ''),
  \ dotnet#method('set_Thumbnail(', 'class BitmapSource value)', 'void'),
  \ dotnet#method('get_Metadata(', ')', ''),
  \ dotnet#method('set_Metadata(', 'class BitmapMetadata value)', 'void'),
  \ dotnet#method('get_Preview(', ')', ''),
  \ dotnet#method('set_Preview(', 'class BitmapSource value)', 'void'),
  \ dotnet#method('get_CodecInfo(', ')', ''),
  \ dotnet#method('get_Palette(', ')', ''),
  \ dotnet#method('set_Palette(', 'class BitmapPalette value)', 'void'),
  \ dotnet#method('get_Frames(', ')', ''),
  \ dotnet#method('set_Frames(', 'class IList value)', 'void'),
  \ dotnet#method('Save(', 'class Stream stream)', 'void'),
  \ dotnet#method('get_ContainerFormat(', ')', 'strict'),
  \ dotnet#method('get_IsMetadataFixedSize(', ')', 'strict bool'),
  \ dotnet#method('SetupFrame(', 'class SafeMILHandle frameEncodeHandle, SafeMILHandle encoderOptions)', 'strict void'),
  \ dotnet#method('SealObject(', ')', 'abstract strict void'),
  \ dotnet#prop('ColorContexts', 'ReadOnlyCollection'),
  \ dotnet#prop('Thumbnail', 'BitmapSource'),
  \ dotnet#prop('Metadata', 'BitmapMetadata'),
  \ dotnet#prop('Preview', 'BitmapSource'),
  \ dotnet#prop('CodecInfo', 'BitmapCodecInfo'),
  \ dotnet#prop('Palette', 'BitmapPalette'),
  \ dotnet#prop('Frames', 'IList'),
  \ dotnet#prop('ContainerFormat', 'Guid'),
  \ dotnet#prop('IsMetadataFixedSize', 'bool'),
  \ ])

call dotnet#class('BmpBitmapDecoder', 'BitmapDecoder', [ 
  \ dotnet#method('BmpBitmapDecoder(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('BmpBitmapDecoder(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('BmpBitmapDecoder(', 'class SafeMILHandle decoderHandle, BitmapDecoder decoder, Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, bool insertInDecoderCache, bool originalWritable, Stream uriStream, UnmanagedMemoryStream unmanagedMemoryStream, SafeFileHandle safeFilehandle)', 'void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#method('BmpBitmapDecoder(', ')', 'void'),
  \ ])

call dotnet#class('BmpBitmapEncoder', 'BitmapEncoder', [ 
  \ dotnet#method('BmpBitmapEncoder(', ')', 'void'),
  \ dotnet#method('get_ContainerFormat(', ')', 'strict'),
  \ dotnet#method('SetupFrame(', 'class SafeMILHandle frameEncodeHandle, SafeMILHandle encoderOptions)', 'strict void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#prop('ContainerFormat', 'Guid'),
  \ ])

call dotnet#class('BitmapSource', 'ImageSource', [ 
  \ dotnet#method('GetSize(', '[out] int32& puiWidth, [out] int32& puiHeight) preservesig', 'abstract int32'),
  \ dotnet#method('GetPixelFormat(', '[out] Guid& guidFormat) preservesig', 'abstract int32'),
  \ dotnet#method('GetResolution(', '[out] float64& pDpiX, [out] float64& pDpiY) preservesig', 'abstract int32'),
  \ dotnet#method('GetPalette(', 'native int pIPalette) preservesig', 'abstract int32'),
  \ dotnet#method('CopyPixels(', 'native int prc, int32 cbStride, int32 cbPixels, int pvPixels) preservesig', 'abstract int32'),
  \ dotnet#method('BitmapSource(', 'class BitmapSource bitmapSource)', 'void'),
  \ dotnet#method('GetSize(', '[out] int32& puiWidth, [out] int32& puiHeight)', 'int32 '),
  \ dotnet#method('GetPixelFormat(', '[out] Guid& guidFormat)', 'int32 '),
  \ dotnet#method('GetResolution(', '[out] float64& pDpiX, [out] float64& pDpiY)', 'int32 '),
  \ dotnet#method('GetPalette(', 'native int pIPalette)', 'int32 '),
  \ dotnet#method('CopyPixels(', 'native int prc, int32 cbStride, int32 cbPixels, int pvPixels)', 'int32 '),
  \ dotnet#method('BitmapSource(', ')', 'void'),
  \ dotnet#field('_bitmapInit', 'BitmapInitialize'),
  \ dotnet#field('_wicSource', 'BitmapSourceSafeMILHandle'),
  \ dotnet#field('_convertedDUCEPtr', 'BitmapSourceSafeMILHandle'),
  \ dotnet#field('_syncObject', 'object'),
  \ dotnet#field('_isSourceCached', 'bool'),
  \ dotnet#field('_needsUpdate', 'bool'),
  \ dotnet#field('_isColorCorrected', 'bool'),
  \ dotnet#field('_downloadEvent', 'UniqueEventHelper'),
  \ dotnet#field('_progressEvent', 'UniqueEventHelper'),
  \ dotnet#field('_failedEvent', 'UniqueEventHelper'),
  \ dotnet#field('_decodeFailedEvent', 'UniqueEventHelper'),
  \ dotnet#field('_format', 'PixelFormat'),
  \ dotnet#field('_pixelWidth', 'int32'),
  \ dotnet#field('_pixelHeight', 'int32'),
  \ dotnet#field('_dpiX', 'float64'),
  \ dotnet#field('_dpiY', 'float64'),
  \ dotnet#field('_palette', 'BitmapPalette'),
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Create(', 'int32 pixelWidth, int32 pixelHeight, float64 dpiX, float64 dpiY, PixelFormat pixelFormat, BitmapPalette palette, Array pixels, int32 stride)', 'static BitmapSource'),
  \ dotnet#method('Create(', 'int32 pixelWidth, int32 pixelHeight, float64 dpiX, float64 dpiY, PixelFormat pixelFormat, BitmapPalette palette, int buffer, int32 bufferSize, int32 stride)', 'static BitmapSource'),
  \ dotnet#method('BitmapSource(', ')', 'void'),
  \ dotnet#method('BitmapSource(', 'bool useVirtuals)', 'void'),
  \ dotnet#method('Clone(', ')', 'BitmapSource'),
  \ dotnet#method('CloneCurrentValue(', ')', 'BitmapSource'),
  \ dotnet#method('get_Format(', ')', ''),
  \ dotnet#method('get_PixelWidth(', ')', 'int32'),
  \ dotnet#method('get_PixelHeight(', ')', 'int32'),
  \ dotnet#method('get_DpiX(', ')', 'float64'),
  \ dotnet#method('get_DpiY(', ')', 'float64'),
  \ dotnet#method('get_Palette(', ')', ''),
  \ dotnet#method('get_IsDownloading(', ')', 'bool'),
  \ dotnet#method('add_DownloadCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DownloadProgress(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadProgress(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DownloadFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DecodeFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DecodeFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('CopyPixels(', 'Int32Rect sourceRect, Array pixels, int32 stride, int32 offset)', 'void'),
  \ dotnet#method('CopyPixels(', 'class Array pixels, int32 stride, int32 offset)', 'void'),
  \ dotnet#method('CopyPixels(', 'Int32Rect sourceRect, int buffer, int32 bufferSize, int32 stride)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('get_Height(', ')', 'float64'),
  \ dotnet#method('get_Metadata(', ')', ''),
  \ dotnet#method('get_Size(', ')', 'strict'),
  \ dotnet#method('get_DelayCreation(', ')', 'bool'),
  \ dotnet#method('set_DelayCreation(', 'bool value)', 'void'),
  \ dotnet#method('get_CreationCompleted(', ')', 'bool'),
  \ dotnet#method('set_CreationCompleted(', 'bool value)', 'void'),
  \ dotnet#method('CompleteDelayedCreation(', ')', 'void'),
  \ dotnet#method('FinalizeCreation(', ')', 'strict void'),
  \ dotnet#method('get_SyncObject(', ')', 'object'),
  \ dotnet#method('get_IsSourceCached(', ')', 'bool'),
  \ dotnet#method('set_IsSourceCached(', 'bool value)', 'void'),
  \ dotnet#method('get_WicSourceHandle(', ')', '.method'),
  \ dotnet#method('set_WicSourceHandle(', 'class BitmapSourceSafeMILHandle value)', 'void'),
  \ dotnet#method('UpdateCachedSettings(', ')', 'strict void'),
  \ dotnet#method('CriticalCopyPixels(', 'Int32Rect sourceRect, Array pixels, int32 stride, int32 offset)', 'void'),
  \ dotnet#method('CriticalCopyPixels(', 'Int32Rect sourceRect, int buffer, int32 bufferSize, int32 stride)', 'void'),
  \ dotnet#method('CheckIfSiteOfOrigin(', ')', 'void'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('get_DUCECompatiblePtr(', ')', 'strict'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('UpdateBitmapSourceResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('RecoverFromDecodeFailure(', 'class Exception e)', 'void'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetClosestDUCEFormat(', 'PixelFormat format, BitmapPalette palette)', 'static PixelFormat'),
  \ dotnet#method('CreateCachedBitmap(', 'class BitmapFrame frame, BitmapSourceSafeMILHandle wicSource, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, BitmapPalette palette)', 'static BitmapSourceSafeMILHandle'),
  \ dotnet#method('RegisterDownloadEventSource(', 'class BitmapSource eventSource)', 'void'),
  \ dotnet#method('UnregisterDownloadEventSource(', ')', 'void'),
  \ dotnet#method('IsValidForFinalizeCreation(', 'bool throwIfInvalid)', 'strict bool'),
  \ dotnet#method('get_ShouldCloneEventDelegates(', ')', 'strict bool'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('BitmapSource(', ')', 'static void .'),
  \ dotnet#event('DownloadCompleted', 'EventHandler'),
  \ dotnet#event('DownloadProgress', 'EventHandler'),
  \ dotnet#event('DownloadFailed', 'EventHandler'),
  \ dotnet#event('DecodeFailed', 'EventHandler'),
  \ dotnet#prop('Format', 'PixelFormat'),
  \ dotnet#prop('PixelWidth', 'int32'),
  \ dotnet#prop('PixelHeight', 'int32'),
  \ dotnet#prop('DpiX', 'float64'),
  \ dotnet#prop('DpiY', 'float64'),
  \ dotnet#prop('Palette', 'BitmapPalette'),
  \ dotnet#prop('IsDownloading', 'bool'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Metadata', 'ImageMetadata'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('DelayCreation', 'bool'),
  \ dotnet#prop('CreationCompleted', 'bool'),
  \ dotnet#prop('SyncObject', 'object'),
  \ dotnet#prop('IsSourceCached', 'bool'),
  \ dotnet#prop('WicSourceHandle', 'BitmapSourceSafeMILHandle'),
  \ dotnet#prop('DUCECompatiblePtr', 'BitmapSourceSafeMILHandle'),
  \ dotnet#prop('ShouldCloneEventDelegates', 'bool'),
  \ ])

call dotnet#class('BitmapFrame', 'BitmapSource', [ 
  \ dotnet#field('_thumbnail', 'BitmapSource'),
  \ dotnet#field('_metadata', 'BitmapMetadata'),
  \ dotnet#field('_readOnlycolorContexts', 'ReadOnlyCollection'),
  \ dotnet#method('BitmapFrame(', ')', 'void'),
  \ dotnet#method('BitmapFrame(', 'bool useVirtuals)', 'void'),
  \ dotnet#method('CreateFromUriOrStream(', 'class Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, RequestCachePolicy uriCachePolicy)', 'static BitmapFrame'),
  \ dotnet#method('Create(', 'class Uri bitmapUri)', 'static BitmapFrame'),
  \ dotnet#method('Create(', 'class Uri bitmapUri, RequestCachePolicy uriCachePolicy)', 'static BitmapFrame'),
  \ dotnet#method('Create(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'static BitmapFrame'),
  \ dotnet#method('Create(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, RequestCachePolicy uriCachePolicy)', 'static BitmapFrame'),
  \ dotnet#method('Create(', 'class Stream bitmapStream)', 'static BitmapFrame'),
  \ dotnet#method('Create(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'static BitmapFrame'),
  \ dotnet#method('Create(', 'class BitmapSource source)', 'static BitmapFrame'),
  \ dotnet#method('Create(', 'class BitmapSource source, BitmapSource thumbnail)', 'static BitmapFrame'),
  \ dotnet#method('Create(', 'class BitmapSource source, BitmapSource thumbnail, BitmapMetadata metadata, ReadOnlyCollection colorContexts)', 'static BitmapFrame'),
  \ dotnet#method('get_BaseUri(', ')', 'abstract'),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'abstract void'),
  \ dotnet#method('get_Thumbnail(', ')', 'abstract'),
  \ dotnet#method('get_Decoder(', ')', 'abstract'),
  \ dotnet#method('get_ColorContexts(', ')', 'abstract'),
  \ dotnet#method('CreateInPlaceBitmapMetadataWriter(', ')', 'abstract'),
  \ dotnet#method('get_InternalMetadata(', ')', 'strict'),
  \ dotnet#method('set_InternalMetadata(', 'class BitmapMetadata value)', 'strict void'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('Thumbnail', 'BitmapSource'),
  \ dotnet#prop('Decoder', 'BitmapDecoder'),
  \ dotnet#prop('ColorContexts', 'ReadOnlyCollection'),
  \ dotnet#prop('InternalMetadata', 'BitmapMetadata'),
  \ ])

call dotnet#class('BitmapMetadata', 'ImageMetadata', [ 
  \ dotnet#method('GetContainerFormat(', '[out] Guid& containerFormat) preservesig', 'abstract int32'),
  \ dotnet#method('GetCount(', '[out] uint32& count) preservesig', 'abstract int32'),
  \ dotnet#method('GetReaderByIndex(', 'uint32 index, [out] int& ppIMetadataReader) preservesig', 'abstract int32'),
  \ dotnet#method('GetEnumerator(', '[out] int& pIEnumMetadata) preservesig', 'abstract int32'),
  \ dotnet#method('GetContainerFormat(', '[out] Guid& containerFormat) preservesig', 'abstract int32'),
  \ dotnet#method('GetCount(', '[out] uint32& count) preservesig', 'abstract int32'),
  \ dotnet#method('GetReaderByIndex(', 'uint32 index, [out] int& ppIMetadataReader) preservesig', 'abstract int32'),
  \ dotnet#method('GetEnumerator(', '[out] int& pIEnumMetadata) preservesig', 'abstract int32'),
  \ dotnet#method('InitializeFromBlockReader(', 'native int pIBlockReader) preservesig', 'abstract int32'),
  \ dotnet#method('GetWriterByIndex(', 'uint32 index, [out] int& ppIMetadataWriter) preservesig', 'abstract int32'),
  \ dotnet#method('AddWriter(', 'native int pIMetadataWriter) preservesig', 'abstract int32'),
  \ dotnet#method('SetWriterByIndex(', 'uint32 index, int pIMetadataWriter) preservesig', 'abstract int32'),
  \ dotnet#method('RemoveWriterByIndex(', 'uint32 index) preservesig', 'abstract int32'),
  \ dotnet#method('BitmapMetadata(', 'Guid containerFormat, bool fixedSize)', 'void'),
  \ dotnet#method('BitmapMetadata(', 'class BitmapMetadata/BitmapMetadataBlockWriter blockWriter, object syncObject)', 'void'),
  \ dotnet#method('GetContainerFormat(', '[out] Guid& containerFormat)', 'int32'),
  \ dotnet#method('GetCount(', '[out] uint32& count)', 'int32'),
  \ dotnet#method('GetReaderByIndex(', 'uint32 index, [out] int& pIMetadataReader)', 'int32'),
  \ dotnet#method('GetEnumerator(', '[out] int& pIEnumMetadata)', 'int32'),
  \ dotnet#method('InitializeFromBlockReader(', 'native int pIBlockReader)', 'int32'),
  \ dotnet#method('GetWriterByIndex(', 'uint32 index, [out] int& pIMetadataWriter)', 'int32'),
  \ dotnet#method('AddWriter(', 'native int pIMetadataWriter)', 'int32'),
  \ dotnet#method('SetWriterByIndex(', 'uint32 index, int pIMetadataWriter)', 'int32'),
  \ dotnet#method('RemoveWriterByIndex(', 'uint32 index)', 'int32'),
  \ dotnet#method('get_MetadataBlocks(', ')', '.method'),
  \ dotnet#prop('MetadataBlocks', 'ArrayList'),
  \ dotnet#method('Next(', 'uint32 celt, [out] int& rgelt, uint32& pceltFetched) preservesig', 'abstract int32'),
  \ dotnet#method('Skip(', 'uint32 celt) preservesig', 'abstract int32'),
  \ dotnet#method('Reset(', ') preservesig', 'abstract int32'),
  \ dotnet#method('Clone(', 'native int& ppEnum) preservesig', 'abstract int32'),
  \ dotnet#method('BitmapMetadata(', 'class BitmapMetadata/BitmapMetadataBlockWriter blockWriter)', 'void'),
  \ dotnet#method('Next(', 'uint32 celt, [out] int& rgelt, uint32& pceltFetched)', 'int32'),
  \ dotnet#method('Skip(', 'uint32 celt)', 'int32'),
  \ dotnet#method('Reset(', ')', 'int32'),
  \ dotnet#method('Clone(', 'native int& ppEnum)', 'int32'),
  \ dotnet#method('BitmapMetadata(', 'string containerFormat)', 'void'),
  \ dotnet#method('BitmapMetadata(', ')', 'void'),
  \ dotnet#method('BitmapMetadata(', 'class SafeMILHandle metadataHandle, bool readOnly, bool fixedSize, object syncObject)', 'void'),
  \ dotnet#method('BitmapMetadata(', 'class BitmapMetadata bitmapMetadata)', 'void'),
  \ dotnet#method('Clone(', ')', 'BitmapMetadata'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('get_Format(', ')', 'string'),
  \ dotnet#method('get_Location(', ')', 'string'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('SetQuery(', 'string query, object value)', 'void'),
  \ dotnet#method('GetQuery(', 'string query)', 'object'),
  \ dotnet#method('RemoveQuery(', 'string query)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('ContainsQuery(', 'string query)', 'bool'),
  \ dotnet#method('get_Author(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('set_Author(', 'class ReadOnlyCollection value)', 'void'),
  \ dotnet#method('get_Title(', ')', 'string'),
  \ dotnet#method('set_Title(', 'string value)', 'void'),
  \ dotnet#method('get_Rating(', ')', 'int32'),
  \ dotnet#method('set_Rating(', 'int32 value)', 'void'),
  \ dotnet#method('get_Subject(', ')', 'string'),
  \ dotnet#method('set_Subject(', 'string value)', 'void'),
  \ dotnet#method('get_Comment(', ')', 'string'),
  \ dotnet#method('set_Comment(', 'string value)', 'void'),
  \ dotnet#method('get_DateTaken(', ')', 'string'),
  \ dotnet#method('set_DateTaken(', 'string value)', 'void'),
  \ dotnet#method('get_ApplicationName(', ')', 'string'),
  \ dotnet#method('set_ApplicationName(', 'string value)', 'void'),
  \ dotnet#method('get_Copyright(', ')', 'string'),
  \ dotnet#method('set_Copyright(', 'string value)', 'void'),
  \ dotnet#method('get_CameraManufacturer(', ')', 'string'),
  \ dotnet#method('set_CameraManufacturer(', 'string value)', 'void'),
  \ dotnet#method('get_CameraModel(', ')', 'string'),
  \ dotnet#method('set_CameraModel(', 'string value)', 'void'),
  \ dotnet#method('get_Keywords(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('set_Keywords(', 'class ReadOnlyCollection value)', 'void'),
  \ dotnet#method('get_GuidFormat(', ')', '.method'),
  \ dotnet#method('get_InternalMetadataHandle(', ')', '.method'),
  \ dotnet#method('get_SyncObject(', ')', 'object'),
  \ dotnet#method('get_BlockWriter(', ')', '.method'),
  \ dotnet#prop('Format', 'string'),
  \ dotnet#prop('Location', 'string'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Author', 'ReadOnlyCollection'),
  \ dotnet#prop('Title', 'string'),
  \ dotnet#prop('Rating', 'int32'),
  \ dotnet#prop('Subject', 'string'),
  \ dotnet#prop('Comment', 'string'),
  \ dotnet#prop('DateTaken', 'string'),
  \ dotnet#prop('ApplicationName', 'string'),
  \ dotnet#prop('Copyright', 'string'),
  \ dotnet#prop('CameraManufacturer', 'string'),
  \ dotnet#prop('CameraModel', 'string'),
  \ dotnet#prop('Keywords', 'ReadOnlyCollection'),
  \ dotnet#prop('GuidFormat', 'Guid'),
  \ dotnet#prop('InternalMetadataHandle', 'SafeMILHandle'),
  \ dotnet#prop('SyncObject', 'object'),
  \ dotnet#prop('BlockWriter', 'BitmapMetadata/BitmapMetadataBlockWriter'),
  \ ])

call dotnet#class('BitmapMetadataBlob', 'Object', [ 
  \ dotnet#method('BitmapMetadataBlob(', 'uint8[] blob)', 'void'),
  \ dotnet#method('GetBlobValue(', ')', 'uint8[]'),
  \ dotnet#method('InternalGetBlobValue(', ')', 'uint8[]'),
  \ ])

call dotnet#class('BitmapPalette', 'DispatcherObject', [ 
  \ dotnet#method('BitmapPalette(', 'class IList colors)', 'void'),
  \ dotnet#method('BitmapPalette(', 'class BitmapSource bitmapSource, int32 maxColorCount)', 'void'),
  \ dotnet#method('BitmapPalette(', 'WICPaletteType paletteType, bool addtransparentColor)', 'void'),
  \ dotnet#method('BitmapPalette(', 'class SafeMILHandle unmanagedPalette)', 'void'),
  \ dotnet#method('CreateFromBitmapSource(', 'class BitmapSource source)', 'static BitmapPalette'),
  \ dotnet#method('get_Colors(', ')', 'IList'),
  \ dotnet#method('get_InternalPalette(', ')', '.method'),
  \ dotnet#method('DoesPaletteHaveAlpha(', 'class BitmapPalette palette)', 'static bool'),
  \ dotnet#method('CreateInternalPalette(', ')', 'static SafeMILHandle'),
  \ dotnet#method('BitmapPalette(', ')', 'void'),
  \ dotnet#prop('Colors', 'IList'),
  \ dotnet#prop('InternalPalette', 'SafeMILHandle'),
  \ ])

call dotnet#class('BitmapPalettes', 'Object', [ 
  \ dotnet#method('get_BlackAndWhite(', ')', 'static'),
  \ dotnet#method('get_BlackAndWhiteTransparent(', ')', 'static'),
  \ dotnet#method('get_Halftone8(', ')', 'static'),
  \ dotnet#method('get_Halftone8Transparent(', ')', 'static'),
  \ dotnet#method('get_Halftone27(', ')', 'static'),
  \ dotnet#method('get_Halftone27Transparent(', ')', 'static'),
  \ dotnet#method('get_Halftone64(', ')', 'static'),
  \ dotnet#method('get_Halftone64Transparent(', ')', 'static'),
  \ dotnet#method('get_Halftone125(', ')', 'static'),
  \ dotnet#method('get_Halftone125Transparent(', ')', 'static'),
  \ dotnet#method('get_Halftone216(', ')', 'static'),
  \ dotnet#method('get_Halftone216Transparent(', ')', 'static'),
  \ dotnet#method('get_Halftone252(', ')', 'static'),
  \ dotnet#method('get_Halftone252Transparent(', ')', 'static'),
  \ dotnet#method('get_Halftone256(', ')', 'static'),
  \ dotnet#method('get_Halftone256Transparent(', ')', 'static'),
  \ dotnet#method('get_Gray4(', ')', 'static'),
  \ dotnet#method('get_Gray4Transparent(', ')', 'static'),
  \ dotnet#method('get_Gray16(', ')', 'static'),
  \ dotnet#method('get_Gray16Transparent(', ')', 'static'),
  \ dotnet#method('get_Gray256(', ')', 'static'),
  \ dotnet#method('get_Gray256Transparent(', ')', 'static'),
  \ dotnet#method('get_WebPalette(', ')', 'static'),
  \ dotnet#method('get_WebPaletteTransparent(', ')', 'static'),
  \ dotnet#method('FromMILPaletteType(', 'WICPaletteType type, bool hasAlpha)', 'static BitmapPalette'),
  \ dotnet#prop('BlackAndWhite', 'BitmapPalette'),
  \ dotnet#prop('BlackAndWhiteTransparent', 'BitmapPalette'),
  \ dotnet#prop('Halftone8', 'BitmapPalette'),
  \ dotnet#prop('Halftone8Transparent', 'BitmapPalette'),
  \ dotnet#prop('Halftone27', 'BitmapPalette'),
  \ dotnet#prop('Halftone27Transparent', 'BitmapPalette'),
  \ dotnet#prop('Halftone64', 'BitmapPalette'),
  \ dotnet#prop('Halftone64Transparent', 'BitmapPalette'),
  \ dotnet#prop('Halftone125', 'BitmapPalette'),
  \ dotnet#prop('Halftone125Transparent', 'BitmapPalette'),
  \ dotnet#prop('Halftone216', 'BitmapPalette'),
  \ dotnet#prop('Halftone216Transparent', 'BitmapPalette'),
  \ dotnet#prop('Halftone252', 'BitmapPalette'),
  \ dotnet#prop('Halftone252Transparent', 'BitmapPalette'),
  \ dotnet#prop('Halftone256', 'BitmapPalette'),
  \ dotnet#prop('Halftone256Transparent', 'BitmapPalette'),
  \ dotnet#prop('Gray4', 'BitmapPalette'),
  \ dotnet#prop('Gray4Transparent', 'BitmapPalette'),
  \ dotnet#prop('Gray16', 'BitmapPalette'),
  \ dotnet#prop('Gray16Transparent', 'BitmapPalette'),
  \ dotnet#prop('Gray256', 'BitmapPalette'),
  \ dotnet#prop('Gray256Transparent', 'BitmapPalette'),
  \ dotnet#prop('WebPalette', 'BitmapPalette'),
  \ dotnet#prop('WebPaletteTransparent', 'BitmapPalette'),
  \ ])

call dotnet#class('BitmapSizeOptions', 'Object', [ 
  \ dotnet#method('get_PreservesAspectRatio(', ')', 'bool'),
  \ dotnet#method('get_PixelWidth(', ')', 'int32'),
  \ dotnet#method('get_PixelHeight(', ')', 'int32'),
  \ dotnet#method('get_Rotation(', ')', 'Rotation'),
  \ dotnet#method('FromEmptyOptions(', ')', 'static BitmapSizeOptions'),
  \ dotnet#method('FromHeight(', 'int32 pixelHeight)', 'static BitmapSizeOptions'),
  \ dotnet#method('FromWidth(', 'int32 pixelWidth)', 'static BitmapSizeOptions'),
  \ dotnet#method('FromWidthAndHeight(', 'int32 pixelWidth, int32 pixelHeight)', 'static BitmapSizeOptions'),
  \ dotnet#method('FromRotation(', 'Rotation rotation)', 'static BitmapSizeOptions'),
  \ dotnet#method('GetScaledWidthAndHeight(', 'uint32 width, uint32 height, [out] uint32& newWidth, [out] uint32& newHeight)', 'void'),
  \ dotnet#method('get_DoesScale(', ')', 'bool'),
  \ dotnet#method('get_WICTransformOptions(', ')', '.method'),
  \ dotnet#method('BitmapSizeOptions(', ')', 'void'),
  \ dotnet#prop('PreservesAspectRatio', 'bool'),
  \ dotnet#prop('PixelWidth', 'int32'),
  \ dotnet#prop('PixelHeight', 'int32'),
  \ dotnet#prop('Rotation', 'Rotation'),
  \ dotnet#prop('DoesScale', 'bool'),
  \ dotnet#prop('WICTransformOptions', 'WICBitmapTransformOptions'),
  \ ])

call dotnet#class('BitmapImage', 'BitmapSource', [ 
  \ dotnet#method('BitmapImage(', ')', 'void'),
  \ dotnet#method('BitmapImage(', 'class Uri uriSource)', 'void'),
  \ dotnet#method('BitmapImage(', 'class Uri uriSource, RequestCachePolicy uriCachePolicy)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_IsDownloading(', ')', 'bool'),
  \ dotnet#method('get_Metadata(', ')', ''),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('FinalizeCreation(', ')', 'strict void'),
  \ dotnet#method('Clone(', ')', 'BitmapImage'),
  \ dotnet#method('CloneCurrentValue(', ')', 'BitmapImage'),
  \ dotnet#method('get_UriCachePolicy(', ')', 'RequestCachePolicy'),
  \ dotnet#method('set_UriCachePolicy(', 'class RequestCachePolicy value)', 'void'),
  \ dotnet#method('get_UriSource(', ')', 'Uri'),
  \ dotnet#method('set_UriSource(', 'class Uri value)', 'void'),
  \ dotnet#method('get_StreamSource(', ')', 'Stream'),
  \ dotnet#method('set_StreamSource(', 'class Stream value)', 'void'),
  \ dotnet#method('get_DecodePixelWidth(', ')', 'int32'),
  \ dotnet#method('set_DecodePixelWidth(', 'int32 value)', 'void'),
  \ dotnet#method('get_DecodePixelHeight(', ')', 'int32'),
  \ dotnet#method('set_DecodePixelHeight(', 'int32 value)', 'void'),
  \ dotnet#method('get_Rotation(', ')', 'Rotation'),
  \ dotnet#method('set_Rotation(', 'Rotation value)', 'void'),
  \ dotnet#method('get_SourceRect(', ')', 'Int32Rect'),
  \ dotnet#method('set_SourceRect(', 'Int32Rect value)', 'void'),
  \ dotnet#method('get_CreateOptions(', ')', 'BitmapCreateOptions'),
  \ dotnet#method('set_CreateOptions(', 'BitmapCreateOptions value)', 'void'),
  \ dotnet#method('get_CacheOption(', ')', 'BitmapCacheOption'),
  \ dotnet#method('set_CacheOption(', 'BitmapCacheOption value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('BitmapImage(', ')', 'static void .'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('IsDownloading', 'bool'),
  \ dotnet#prop('Metadata', 'ImageMetadata'),
  \ dotnet#prop('UriCachePolicy', 'RequestCachePolicy'),
  \ dotnet#prop('UriSource', 'Uri'),
  \ dotnet#prop('StreamSource', 'Stream'),
  \ dotnet#prop('DecodePixelWidth', 'int32'),
  \ dotnet#prop('DecodePixelHeight', 'int32'),
  \ dotnet#prop('Rotation', 'Rotation'),
  \ dotnet#prop('SourceRect', 'Int32Rect'),
  \ dotnet#prop('CreateOptions', 'BitmapCreateOptions'),
  \ dotnet#prop('CacheOption', 'BitmapCacheOption'),
  \ ])

call dotnet#class('CachedBitmap', 'BitmapSource', [ 
  \ dotnet#method('CachedBitmap(', 'class BitmapSource source, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('CachedBitmap(', 'int32 pixelWidth, int32 pixelHeight, float64 dpiX, float64 dpiY, PixelFormat pixelFormat, BitmapPalette palette, int buffer, int32 bufferSize, int32 stride)', 'void'),
  \ dotnet#method('CachedBitmap(', 'class BitmapSourceSafeMILHandle bitmap)', 'void'),
  \ dotnet#method('CachedBitmap(', 'int32 pixelWidth, int32 pixelHeight, float64 dpiX, float64 dpiY, PixelFormat pixelFormat, BitmapPalette palette, Array pixels, int32 stride)', 'void'),
  \ dotnet#method('FinalizeCreation(', ')', 'strict void'),
  \ dotnet#method('Clone(', ')', 'CachedBitmap'),
  \ dotnet#method('CloneCurrentValue(', ')', 'CachedBitmap'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CachedBitmap(', ')', 'void'),
  \ ])

call dotnet#class('ColorConvertedBitmap', 'BitmapSource', [ 
  \ dotnet#method('ColorConvertedBitmap(', ')', 'void'),
  \ dotnet#method('ColorConvertedBitmap(', 'class BitmapSource source, ColorContext sourceColorContext, ColorContext destinationColorContext, PixelFormat format)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('FinalizeCreation(', ')', 'strict void'),
  \ dotnet#method('IsValidForFinalizeCreation(', 'bool throwIfInvalid)', 'strict bool'),
  \ dotnet#method('Clone(', ')', 'ColorConvertedBitmap'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ColorConvertedBitmap'),
  \ dotnet#method('get_Source(', ')', 'BitmapSource'),
  \ dotnet#method('set_Source(', 'class BitmapSource value)', 'void'),
  \ dotnet#method('get_SourceColorContext(', ')', 'ColorContext'),
  \ dotnet#method('set_SourceColorContext(', 'class ColorContext value)', 'void'),
  \ dotnet#method('get_DestinationColorContext(', ')', 'ColorContext'),
  \ dotnet#method('set_DestinationColorContext(', 'class ColorContext value)', 'void'),
  \ dotnet#method('get_DestinationFormat(', ')', 'PixelFormat'),
  \ dotnet#method('set_DestinationFormat(', 'PixelFormat value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('ColorConvertedBitmap(', ')', 'static void .'),
  \ dotnet#prop('Source', 'BitmapSource'),
  \ dotnet#prop('SourceColorContext', 'ColorContext'),
  \ dotnet#prop('DestinationColorContext', 'ColorContext'),
  \ dotnet#prop('DestinationFormat', 'PixelFormat'),
  \ ])

call dotnet#class('CroppedBitmap', 'BitmapSource', [ 
  \ dotnet#method('CroppedBitmap(', ')', 'void'),
  \ dotnet#method('CroppedBitmap(', 'class BitmapSource source, Int32Rect sourceRect)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('FinalizeCreation(', ')', 'strict void'),
  \ dotnet#method('IsValidForFinalizeCreation(', 'bool throwIfInvalid)', 'strict bool'),
  \ dotnet#method('Clone(', ')', 'CroppedBitmap'),
  \ dotnet#method('CloneCurrentValue(', ')', 'CroppedBitmap'),
  \ dotnet#method('get_Source(', ')', 'BitmapSource'),
  \ dotnet#method('set_Source(', 'class BitmapSource value)', 'void'),
  \ dotnet#method('get_SourceRect(', ')', 'Int32Rect'),
  \ dotnet#method('set_SourceRect(', 'Int32Rect value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CroppedBitmap(', ')', 'static void .'),
  \ dotnet#prop('Source', 'BitmapSource'),
  \ dotnet#prop('SourceRect', 'Int32Rect'),
  \ ])

call dotnet#class('DownloadProgressEventArgs', 'EventArgs', [ 
  \ dotnet#method('DownloadProgressEventArgs(', 'int32 percentComplete)', 'void'),
  \ dotnet#method('get_Progress(', ')', 'int32'),
  \ dotnet#prop('Progress', 'int32'),
  \ ])

call dotnet#class('FormatConvertedBitmap', 'BitmapSource', [ 
  \ dotnet#method('FormatConvertedBitmap(', ')', 'void'),
  \ dotnet#method('FormatConvertedBitmap(', 'class BitmapSource source, PixelFormat destinationFormat, BitmapPalette destinationPalette, float64 alphaThreshold)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('FinalizeCreation(', ')', 'strict void'),
  \ dotnet#method('IsValidForFinalizeCreation(', 'bool throwIfInvalid)', 'strict bool'),
  \ dotnet#method('Clone(', ')', 'FormatConvertedBitmap'),
  \ dotnet#method('CloneCurrentValue(', ')', 'FormatConvertedBitmap'),
  \ dotnet#method('get_Source(', ')', 'BitmapSource'),
  \ dotnet#method('set_Source(', 'class BitmapSource value)', 'void'),
  \ dotnet#method('get_DestinationFormat(', ')', 'PixelFormat'),
  \ dotnet#method('set_DestinationFormat(', 'PixelFormat value)', 'void'),
  \ dotnet#method('get_DestinationPalette(', ')', 'BitmapPalette'),
  \ dotnet#method('set_DestinationPalette(', 'class BitmapPalette value)', 'void'),
  \ dotnet#method('get_AlphaThreshold(', ')', 'float64'),
  \ dotnet#method('set_AlphaThreshold(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FormatConvertedBitmap(', ')', 'static void .'),
  \ dotnet#prop('Source', 'BitmapSource'),
  \ dotnet#prop('DestinationFormat', 'PixelFormat'),
  \ dotnet#prop('DestinationPalette', 'BitmapPalette'),
  \ dotnet#prop('AlphaThreshold', 'float64'),
  \ ])

call dotnet#class('GifBitmapDecoder', 'BitmapDecoder', [ 
  \ dotnet#method('GifBitmapDecoder(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('GifBitmapDecoder(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('GifBitmapDecoder(', 'class SafeMILHandle decoderHandle, BitmapDecoder decoder, Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, bool insertInDecoderCache, bool originalWritable, Stream uriStream, UnmanagedMemoryStream unmanagedMemoryStream, SafeFileHandle safeFilehandle)', 'void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#method('GifBitmapDecoder(', ')', 'void'),
  \ ])

call dotnet#class('GifBitmapEncoder', 'BitmapEncoder', [ 
  \ dotnet#method('GifBitmapEncoder(', ')', 'void'),
  \ dotnet#method('get_ContainerFormat(', ')', 'strict'),
  \ dotnet#method('SetupFrame(', 'class SafeMILHandle frameEncodeHandle, SafeMILHandle encoderOptions)', 'strict void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#prop('ContainerFormat', 'Guid'),
  \ ])

call dotnet#class('IconBitmapDecoder', 'BitmapDecoder', [ 
  \ dotnet#method('IconBitmapDecoder(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('IconBitmapDecoder(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('IconBitmapDecoder(', 'class SafeMILHandle decoderHandle, BitmapDecoder decoder, Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, bool insertInDecoderCache, bool originalWritable, Stream uriStream, UnmanagedMemoryStream unmanagedMemoryStream, SafeFileHandle safeFilehandle)', 'void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#method('IconBitmapDecoder(', ')', 'void'),
  \ ])

call dotnet#class('InPlaceBitmapMetadataWriter', 'BitmapMetadata', [ 
  \ dotnet#method('InPlaceBitmapMetadataWriter(', 'class SafeMILHandle fmeHandle, SafeMILHandle metadataHandle, object syncObject)', 'void'),
  \ dotnet#method('CreateFromFrameDecode(', 'class BitmapSourceSafeMILHandle frameHandle, object syncObject)', 'static InPlaceBitmapMetadataWriter'),
  \ dotnet#method('CreateFromDecoder(', 'class SafeMILHandle decoderHandle, object syncObject)', 'static InPlaceBitmapMetadataWriter'),
  \ dotnet#method('TrySave(', ')', 'bool'),
  \ dotnet#method('Clone(', ')', 'InPlaceBitmapMetadataWriter'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('InPlaceBitmapMetadataWriter(', ')', 'void'),
  \ ])

call dotnet#class('LateBoundBitmapDecoder', 'BitmapDecoder', [ 
  \ dotnet#method('LateBoundBitmapDecoder(', 'class Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, RequestCachePolicy requestCachePolicy)', 'void'),
  \ dotnet#method('get_Palette(', ')', ''),
  \ dotnet#method('get_ColorContexts(', ')', ''),
  \ dotnet#method('get_Thumbnail(', ')', ''),
  \ dotnet#method('get_CodecInfo(', ')', ''),
  \ dotnet#method('get_Frames(', ')', ''),
  \ dotnet#method('get_Preview(', ')', ''),
  \ dotnet#method('get_Decoder(', ')', 'BitmapDecoder'),
  \ dotnet#method('get_IsDownloading(', ')', 'bool'),
  \ dotnet#method('DownloadCallback(', 'object arg)', 'object'),
  \ dotnet#method('ProgressCallback(', 'object arg)', 'object'),
  \ dotnet#method('ExceptionCallback(', 'object arg)', 'object'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#prop('Palette', 'BitmapPalette'),
  \ dotnet#prop('ColorContexts', 'ReadOnlyCollection'),
  \ dotnet#prop('Thumbnail', 'BitmapSource'),
  \ dotnet#prop('CodecInfo', 'BitmapCodecInfo'),
  \ dotnet#prop('Frames', 'ReadOnlyCollection'),
  \ dotnet#prop('Preview', 'BitmapSource'),
  \ dotnet#prop('Decoder', 'BitmapDecoder'),
  \ dotnet#prop('IsDownloading', 'bool'),
  \ ])

call dotnet#class('JpegBitmapDecoder', 'BitmapDecoder', [ 
  \ dotnet#method('JpegBitmapDecoder(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('JpegBitmapDecoder(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('JpegBitmapDecoder(', 'class SafeMILHandle decoderHandle, BitmapDecoder decoder, Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, bool insertInDecoderCache, bool originalWritable, Stream uriStream, UnmanagedMemoryStream unmanagedMemoryStream, SafeFileHandle safeFilehandle)', 'void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#method('JpegBitmapDecoder(', ')', 'void'),
  \ ])

call dotnet#class('JpegBitmapEncoder', 'BitmapEncoder', [ 
  \ dotnet#method('JpegBitmapEncoder(', ')', 'void'),
  \ dotnet#method('get_QualityLevel(', ')', 'int32'),
  \ dotnet#method('set_QualityLevel(', 'int32 value)', 'void'),
  \ dotnet#method('get_Rotation(', ')', 'Rotation'),
  \ dotnet#method('set_Rotation(', 'Rotation value)', 'void'),
  \ dotnet#method('get_FlipHorizontal(', ')', 'bool'),
  \ dotnet#method('set_FlipHorizontal(', 'bool value)', 'void'),
  \ dotnet#method('get_FlipVertical(', ')', 'bool'),
  \ dotnet#method('set_FlipVertical(', 'bool value)', 'void'),
  \ dotnet#method('get_ContainerFormat(', ')', 'strict'),
  \ dotnet#method('SetupFrame(', 'class SafeMILHandle frameEncodeHandle, SafeMILHandle encoderOptions)', 'strict void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#prop('QualityLevel', 'int32'),
  \ dotnet#prop('Rotation', 'Rotation'),
  \ dotnet#prop('FlipHorizontal', 'bool'),
  \ dotnet#prop('FlipVertical', 'bool'),
  \ dotnet#prop('ContainerFormat', 'Guid'),
  \ ])

call dotnet#class('PngBitmapDecoder', 'BitmapDecoder', [ 
  \ dotnet#method('PngBitmapDecoder(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('PngBitmapDecoder(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('PngBitmapDecoder(', 'class SafeMILHandle decoderHandle, BitmapDecoder decoder, Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, bool insertInDecoderCache, bool originalWritable, Stream uriStream, UnmanagedMemoryStream unmanagedMemoryStream, SafeFileHandle safeFilehandle)', 'void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#method('PngBitmapDecoder(', ')', 'void'),
  \ ])

call dotnet#class('PngBitmapEncoder', 'BitmapEncoder', [ 
  \ dotnet#method('PngBitmapEncoder(', ')', 'void'),
  \ dotnet#method('get_Interlace(', ')', 'PngInterlaceOption'),
  \ dotnet#method('set_Interlace(', 'PngInterlaceOption value)', 'void'),
  \ dotnet#method('get_ContainerFormat(', ')', 'strict'),
  \ dotnet#method('SetupFrame(', 'class SafeMILHandle frameEncodeHandle, SafeMILHandle encoderOptions)', 'strict void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#prop('Interlace', 'PngInterlaceOption'),
  \ dotnet#prop('ContainerFormat', 'Guid'),
  \ ])

call dotnet#class('RenderTargetBitmap', 'BitmapSource', [ 
  \ dotnet#method('RenderTargetBitmap(', 'int32 pixelWidth, int32 pixelHeight, float64 dpiX, float64 dpiY, PixelFormat pixelFormat)', 'void'),
  \ dotnet#method('RenderTargetBitmap(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('Render(', 'class Visual visual)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('get_MILRenderTarget(', ')', '.method'),
  \ dotnet#method('RenderTargetContentsChanged(', ')', 'void'),
  \ dotnet#method('FinalizeCreation(', ')', 'strict void'),
  \ dotnet#prop('MILRenderTarget', 'SafeMILHandle'),
  \ ])

call dotnet#class('TiffBitmapDecoder', 'BitmapDecoder', [ 
  \ dotnet#method('TiffBitmapDecoder(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('TiffBitmapDecoder(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('TiffBitmapDecoder(', 'class SafeMILHandle decoderHandle, BitmapDecoder decoder, Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, bool insertInDecoderCache, bool originalWritable, Stream uriStream, UnmanagedMemoryStream unmanagedMemoryStream, SafeFileHandle safeFilehandle)', 'void'),
  \ dotnet#method('get_IsMetadataFixedSize(', ')', 'strict bool'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#method('TiffBitmapDecoder(', ')', 'void'),
  \ dotnet#prop('IsMetadataFixedSize', 'bool'),
  \ ])

call dotnet#class('TiffBitmapEncoder', 'BitmapEncoder', [ 
  \ dotnet#method('TiffBitmapEncoder(', ')', 'void'),
  \ dotnet#method('get_Compression(', ')', 'TiffCompressOption'),
  \ dotnet#method('set_Compression(', 'TiffCompressOption value)', 'void'),
  \ dotnet#method('get_ContainerFormat(', ')', 'strict'),
  \ dotnet#method('get_IsMetadataFixedSize(', ')', 'strict bool'),
  \ dotnet#method('SetupFrame(', 'class SafeMILHandle frameEncodeHandle, SafeMILHandle encoderOptions)', 'strict void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#prop('Compression', 'TiffCompressOption'),
  \ dotnet#prop('ContainerFormat', 'Guid'),
  \ dotnet#prop('IsMetadataFixedSize', 'bool'),
  \ ])

call dotnet#class('WmpBitmapDecoder', 'BitmapDecoder', [ 
  \ dotnet#method('WmpBitmapDecoder(', 'class Uri bitmapUri, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('WmpBitmapDecoder(', 'class Stream bitmapStream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption)', 'void'),
  \ dotnet#method('WmpBitmapDecoder(', 'class SafeMILHandle decoderHandle, BitmapDecoder decoder, Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, bool insertInDecoderCache, bool originalWritable, Stream uriStream, UnmanagedMemoryStream unmanagedMemoryStream, SafeFileHandle safeFilehandle)', 'void'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#method('WmpBitmapDecoder(', ')', 'void'),
  \ ])

call dotnet#class('WmpBitmapEncoder', 'BitmapEncoder', [ 
  \ dotnet#method('WmpBitmapEncoder(', ')', 'void'),
  \ dotnet#method('get_ImageQualityLevel(', ')', 'float32'),
  \ dotnet#method('set_ImageQualityLevel(', 'float32 value)', 'void'),
  \ dotnet#method('get_Lossless(', ')', 'bool'),
  \ dotnet#method('set_Lossless(', 'bool value)', 'void'),
  \ dotnet#method('get_Rotation(', ')', 'Rotation'),
  \ dotnet#method('set_Rotation(', 'Rotation value)', 'void'),
  \ dotnet#method('get_FlipHorizontal(', ')', 'bool'),
  \ dotnet#method('set_FlipHorizontal(', 'bool value)', 'void'),
  \ dotnet#method('get_FlipVertical(', ')', 'bool'),
  \ dotnet#method('set_FlipVertical(', 'bool value)', 'void'),
  \ dotnet#method('get_UseCodecOptions(', ')', 'bool'),
  \ dotnet#method('set_UseCodecOptions(', 'bool value)', 'void'),
  \ dotnet#method('get_QualityLevel(', ')', 'uint8'),
  \ dotnet#method('set_QualityLevel(', 'uint8 value)', 'void'),
  \ dotnet#method('get_SubsamplingLevel(', ')', 'uint8'),
  \ dotnet#method('set_SubsamplingLevel(', 'uint8 value)', 'void'),
  \ dotnet#method('get_OverlapLevel(', ')', 'uint8'),
  \ dotnet#method('set_OverlapLevel(', 'uint8 value)', 'void'),
  \ dotnet#method('get_HorizontalTileSlices(', ')', 'int16'),
  \ dotnet#method('set_HorizontalTileSlices(', 'int16 value)', 'void'),
  \ dotnet#method('get_VerticalTileSlices(', ')', 'int16'),
  \ dotnet#method('set_VerticalTileSlices(', 'int16 value)', 'void'),
  \ dotnet#method('get_FrequencyOrder(', ')', 'bool'),
  \ dotnet#method('set_FrequencyOrder(', 'bool value)', 'void'),
  \ dotnet#method('get_InterleavedAlpha(', ')', 'bool'),
  \ dotnet#method('set_InterleavedAlpha(', 'bool value)', 'void'),
  \ dotnet#method('get_AlphaQualityLevel(', ')', 'uint8'),
  \ dotnet#method('set_AlphaQualityLevel(', 'uint8 value)', 'void'),
  \ dotnet#method('get_CompressedDomainTranscode(', ')', 'bool'),
  \ dotnet#method('set_CompressedDomainTranscode(', 'bool value)', 'void'),
  \ dotnet#method('get_ImageDataDiscardLevel(', ')', 'uint8'),
  \ dotnet#method('set_ImageDataDiscardLevel(', 'uint8 value)', 'void'),
  \ dotnet#method('get_AlphaDataDiscardLevel(', ')', 'uint8'),
  \ dotnet#method('set_AlphaDataDiscardLevel(', 'uint8 value)', 'void'),
  \ dotnet#method('get_IgnoreOverlap(', ')', 'bool'),
  \ dotnet#method('set_IgnoreOverlap(', 'bool value)', 'void'),
  \ dotnet#method('SetupFrame(', 'class SafeMILHandle frameEncodeHandle, SafeMILHandle encoderOptions)', 'strict void'),
  \ dotnet#method('get_ContainerFormat(', ')', 'strict'),
  \ dotnet#method('SealObject(', ')', 'strict void'),
  \ dotnet#prop('ImageQualityLevel', 'float32'),
  \ dotnet#prop('Lossless', 'bool'),
  \ dotnet#prop('Rotation', 'Rotation'),
  \ dotnet#prop('FlipHorizontal', 'bool'),
  \ dotnet#prop('FlipVertical', 'bool'),
  \ dotnet#prop('UseCodecOptions', 'bool'),
  \ dotnet#prop('QualityLevel', 'uint8'),
  \ dotnet#prop('SubsamplingLevel', 'uint8'),
  \ dotnet#prop('OverlapLevel', 'uint8'),
  \ dotnet#prop('HorizontalTileSlices', 'int16'),
  \ dotnet#prop('VerticalTileSlices', 'int16'),
  \ dotnet#prop('FrequencyOrder', 'bool'),
  \ dotnet#prop('InterleavedAlpha', 'bool'),
  \ dotnet#prop('AlphaQualityLevel', 'uint8'),
  \ dotnet#prop('CompressedDomainTranscode', 'bool'),
  \ dotnet#prop('ImageDataDiscardLevel', 'uint8'),
  \ dotnet#prop('AlphaDataDiscardLevel', 'uint8'),
  \ dotnet#prop('IgnoreOverlap', 'bool'),
  \ dotnet#prop('ContainerFormat', 'Guid'),
  \ ])

call dotnet#class('TransformedBitmap', 'BitmapSource', [ 
  \ dotnet#method('TransformedBitmap(', ')', 'void'),
  \ dotnet#method('TransformedBitmap(', 'class BitmapSource source, Transform newTransform)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('CheckTransform(', 'class Transform newTransform)', 'bool'),
  \ dotnet#method('GetParamsFromTransform(', 'class Transform newTransform, [out] float64& scaleX, [out] float64& scaleY, [out] WICBitmapTransformOptions& options)', 'void'),
  \ dotnet#method('FinalizeCreation(', ')', 'strict void'),
  \ dotnet#method('IsValidForFinalizeCreation(', 'bool throwIfInvalid)', 'strict bool'),
  \ dotnet#method('Clone(', ')', 'TransformedBitmap'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TransformedBitmap'),
  \ dotnet#method('get_Source(', ')', 'BitmapSource'),
  \ dotnet#method('set_Source(', 'class BitmapSource value)', 'void'),
  \ dotnet#method('get_Transform(', ')', 'Transform'),
  \ dotnet#method('set_Transform(', 'class Transform value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('TransformedBitmap(', ')', 'static void .'),
  \ dotnet#prop('Source', 'BitmapSource'),
  \ dotnet#prop('Transform', 'Transform'),
  \ ])

call dotnet#class('WriteableBitmap', 'BitmapSource', [ 
  \ dotnet#method('WriteableBitmap(', ')', 'void'),
  \ dotnet#method('WriteableBitmap(', 'class BitmapSource source)', 'void'),
  \ dotnet#method('WriteableBitmap(', 'int32 pixelWidth, int32 pixelHeight, float64 dpiX, float64 dpiY, PixelFormat pixelFormat, BitmapPalette palette)', 'void'),
  \ dotnet#method('AddDirtyRect(', 'Int32Rect dirtyRect)', 'void'),
  \ dotnet#method('Clone(', ')', 'WriteableBitmap'),
  \ dotnet#method('CloneCurrentValue(', ')', 'WriteableBitmap'),
  \ dotnet#method('Lock(', ')', 'void'),
  \ dotnet#method('TryLock(', 'Duration timeout)', 'bool'),
  \ dotnet#method('Unlock(', ')', 'void'),
  \ dotnet#method('WritePixels(', 'Int32Rect sourceRect, int sourceBuffer, int32 sourceBufferSize, int32 sourceBufferStride, int32 destinationX, int32 destinationY)', 'void'),
  \ dotnet#method('WritePixels(', 'Int32Rect sourceRect, Array sourceBuffer, int32 sourceBufferStride, int32 destinationX, int32 destinationY)', 'void'),
  \ dotnet#method('WritePixels(', 'Int32Rect sourceRect, int buffer, int32 bufferSize, int32 stride)', 'void'),
  \ dotnet#method('WritePixels(', 'Int32Rect sourceRect, Array pixels, int32 stride, int32 offset)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FinalizeCreation(', ')', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('UpdateBitmapSourceResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('get_BackBuffer(', ')', 'int'),
  \ dotnet#method('get_BackBufferStride(', ')', 'int32'),
  \ dotnet#method('set_BackBuffer(', 'native int value)', 'void'),
  \ dotnet#prop('BackBuffer', 'int'),
  \ dotnet#prop('BackBufferStride', 'int32'),
  \ ])

