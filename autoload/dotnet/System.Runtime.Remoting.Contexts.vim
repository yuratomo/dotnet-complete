call dotnet#namespace('System.Runtime.Remoting.Contexts')

call dotnet#class('ContextAttribute', 'Attribute', [ 
  \ dotnet#field('AttributeName', 'string'),
  \ dotnet#method('ContextAttribute(', ''),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('IsNewContextOK(', ''),
  \ dotnet#method('Freeze(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('IsContextOK(', ''),
  \ dotnet#method('GetPropertiesForNewContext(', ''),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('CrossContextDelegate', 'MulticastDelegate', [ 
  \ dotnet#method('CrossContextDelegate(', ''),
  \ dotnet#method('Invoke(', ''),
  \ dotnet#method('EndInvoke(', ''),
  \ ])

call dotnet#class('Context', 'Object', [ 
  \ dotnet#method('Context(', ''),
  \ dotnet#method('Finalize(', ''),
  \ dotnet#method('get_ContextID(', ''),
  \ dotnet#method('get_InternalContextID(', ''),
  \ dotnet#method('get_IsDefaultContext(', ''),
  \ dotnet#method('CreateDefaultContext(', ''),
  \ dotnet#method('SetProperty(', ''),
  \ dotnet#method('InternalFreeze(', ''),
  \ dotnet#method('Freeze(', ''),
  \ dotnet#method('SetThreadPoolAware(', ''),
  \ dotnet#method('get_IsThreadPoolAware(', ''),
  \ dotnet#method('CheckPropertyNameClash(', ''),
  \ dotnet#method('GrowPropertiesArray(', ''),
  \ dotnet#method('NotifyActivatorProperties(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('DoCallBack(', ''),
  \ dotnet#method('DoCallBackFromEE(', ''),
  \ dotnet#method('DoCallBackGeneric(', ''),
  \ dotnet#method('ExecuteCallBackInEE(', ''),
  \ dotnet#method('AllocateDataSlot(', ''),
  \ dotnet#method('AllocateNamedDataSlot(', ''),
  \ dotnet#method('GetNamedDataSlot(', ''),
  \ dotnet#method('FreeNamedDataSlot(', ''),
  \ dotnet#method('SetData(', ''),
  \ dotnet#method('GetData(', ''),
  \ dotnet#method('RegisterDynamicProperty(', ''),
  \ dotnet#method('UnregisterDynamicProperty(', ''),
  \ dotnet#method('AddDynamicProperty(', ''),
  \ dotnet#method('RemoveDynamicProperty(', ''),
  \ dotnet#method('NotifyDynamicSinks(', ''),
  \ dotnet#prop('ContextID', 'int32'),
  \ dotnet#prop('InternalContextID', 'int'),
  \ dotnet#prop('AppDomain', 'AppDomain'),
  \ dotnet#prop('IsDefaultContext', 'bool'),
  \ dotnet#prop('DefaultContext', 'Context'),
  \ dotnet#prop('IsThreadPoolAware', 'bool'),
  \ dotnet#prop('ContextProperties', 'IContextProperty[]'),
  \ dotnet#prop('PerContextDynamicProperties', 'IDynamicProperty[]'),
  \ dotnet#prop('GlobalDynamicSinks', 'ArrayWithSize'),
  \ dotnet#prop('DynamicSinks', 'ArrayWithSize'),
  \ ])

call dotnet#class('ContextProperty', 'Object', [ 
  \ dotnet#field('_name', 'string'),
  \ dotnet#field('_property', 'object'),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('get_Property(', ''),
  \ dotnet#method('ContextProperty(', ''),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Property', 'object'),
  \ ])

call dotnet#class('SynchronizationAttribute', 'ContextAttribute', [ 
  \ dotnet#field('_asyncWorkEvent', 'AutoResetEvent'),
  \ dotnet#field('_workItemQueue', 'Queue'),
  \ dotnet#field('_locked', 'bool'),
  \ dotnet#field('_bReEntrant', 'bool'),
  \ dotnet#field('_flavor', 'int32'),
  \ dotnet#method('get_Locked(', ''),
  \ dotnet#method('set_Locked(', ''),
  \ dotnet#method('get_IsReEntrant(', ''),
  \ dotnet#method('get_SyncCallOutLCID(', ''),
  \ dotnet#method('set_SyncCallOutLCID(', ''),
  \ dotnet#method('IsKnownLCID(', ''),
  \ dotnet#method('SynchronizationAttribute(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('IsContextOK(', ''),
  \ dotnet#method('GetPropertiesForNewContext(', ''),
  \ dotnet#method('InitIfNecessary(', ''),
  \ dotnet#method('HandleThreadExit(', ''),
  \ dotnet#method('HandleThreadReEntry(', ''),
  \ dotnet#method('HandleWorkCompletion(', ''),
  \ dotnet#method('HandleWorkRequest(', ''),
  \ dotnet#method('ExecuteWorkItem(', ''),
  \ dotnet#method('IsNestedCall(', ''),
  \ dotnet#prop('Locked', 'bool'),
  \ dotnet#prop('IsReEntrant', 'bool'),
  \ dotnet#prop('SyncCallOutLCID', 'string'),
  \ dotnet#prop('AsyncCallOutLCIDList', 'ArrayList'),
  \ ])

