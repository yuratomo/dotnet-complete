call dotnet#namespace('System.Reflection')

call dotnet#class('Binder', 'Object', [ 
  \ dotnet#method('BindToMethod(', 'BindingFlags bindingAttr, MethodBase[] match, object[]& args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, [out] object& state)', 'abstract'),
  \ dotnet#method('BindToField(', 'BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture)', 'abstract'),
  \ dotnet#method('SelectMethod(', 'BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers)', 'abstract'),
  \ dotnet#method('SelectProperty(', 'BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers)', 'abstract'),
  \ dotnet#method('ChangeType(', 'object value, Type type, CultureInfo culture)', 'abstract object'),
  \ dotnet#method('ReorderArgumentArray(', 'object[]& args, object state)', 'abstract void'),
  \ dotnet#method('Binder(', ')', 'void'),
  \ ])

call dotnet#class('MemberInfo', 'Object', [ 
  \ dotnet#method('MemberInfo(', ')', 'void'),
  \ dotnet#method('CacheEquals(', 'object o)', 'strict bool'),
  \ dotnet#method('get_MemberType(', ')', 'abstract'),
  \ dotnet#method('get_Name(', ')', 'abstract string'),
  \ dotnet#method('get_DeclaringType(', ')', 'abstract Type'),
  \ dotnet#method('get_ReflectedType(', ')', 'abstract Type'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'abstract object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'abstract object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'abstract bool'),
  \ dotnet#method('GetCustomAttributesData(', ')', ''),
  \ dotnet#method('get_MetadataToken(', ')', 'int32'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('GetType(', ')', 'Type '),
  \ dotnet#method('op_Equality(', 'class MemberInfo left, MemberInfo right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class MemberInfo left, MemberInfo right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MemberType', 'MemberTypes'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('MetadataToken', 'int32'),
  \ dotnet#prop('', 'Module'),
  \ ])

call dotnet#class('AmbiguousMatchException', 'SystemException', [ 
  \ dotnet#method('AmbiguousMatchException(', ')', 'void'),
  \ dotnet#method('AmbiguousMatchException(', 'string message)', 'void'),
  \ dotnet#method('AmbiguousMatchException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('AmbiguousMatchException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ModuleResolveEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ModuleResolveEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ResolveEventArgs e)', ''),
  \ dotnet#method('BeginInvoke(', 'object sender, ResolveEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('Assembly', 'Object', [ 
  \ dotnet#method('CreateQualifiedName(', 'string assemblyName, string typeName)', 'static string'),
  \ dotnet#method('GetAssembly(', 'class Type type)', 'static Assembly'),
  \ dotnet#method('op_Equality(', 'class Assembly left, Assembly right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class Assembly left, Assembly right)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('LoadFrom(', 'string assemblyFile) noinlining', 'static Assembly'),
  \ dotnet#method('ReflectionOnlyLoadFrom(', 'string assemblyFile) noinlining', 'static Assembly'),
  \ dotnet#method('LoadFrom(', 'string assemblyFile, Evidence securityEvidence) noinlining', 'static Assembly'),
  \ dotnet#method('LoadFrom(', 'string assemblyFile, Evidence securityEvidence, uint8[] hashValue, AssemblyHashAlgorithm hashAlgorithm) noinlining', 'static Assembly'),
  \ dotnet#method('LoadFrom(', 'string assemblyFile, uint8[] hashValue, AssemblyHashAlgorithm hashAlgorithm) noinlining', 'static Assembly'),
  \ dotnet#method('UnsafeLoadFrom(', 'string assemblyFile) noinlining', 'static Assembly'),
  \ dotnet#method('Load(', 'string assemblyString) noinlining', 'static Assembly'),
  \ dotnet#method('ReflectionOnlyLoad(', 'string assemblyString) noinlining', 'static Assembly'),
  \ dotnet#method('Load(', 'string assemblyString, Evidence assemblySecurity) noinlining', 'static Assembly'),
  \ dotnet#method('Load(', 'class AssemblyName assemblyRef) noinlining', 'static Assembly'),
  \ dotnet#method('Load(', 'class AssemblyName assemblyRef, Evidence assemblySecurity) noinlining', 'static Assembly'),
  \ dotnet#method('LoadWithPartialName(', 'string partialName) noinlining', 'static Assembly'),
  \ dotnet#method('LoadWithPartialName(', 'string partialName, Evidence securityEvidence) noinlining', 'static Assembly'),
  \ dotnet#method('Load(', 'uint8[] rawAssembly) noinlining', 'static Assembly'),
  \ dotnet#method('ReflectionOnlyLoad(', 'uint8[] rawAssembly) noinlining', 'static Assembly'),
  \ dotnet#method('Load(', 'uint8[] rawAssembly, uint8[] rawSymbolStore) noinlining', 'static Assembly'),
  \ dotnet#method('Load(', 'uint8[] rawAssembly, uint8[] rawSymbolStore, SecurityContextSource securityContextSource) noinlining', 'static Assembly'),
  \ dotnet#method('Load(', 'uint8[] rawAssembly, uint8[] rawSymbolStore, Evidence securityEvidence) noinlining', 'static Assembly'),
  \ dotnet#method('LoadFile(', 'string path)', 'static Assembly'),
  \ dotnet#method('LoadFile(', 'string path, Evidence securityEvidence)', 'static Assembly'),
  \ dotnet#method('GetExecutingAssembly(', ') noinlining', 'static Assembly'),
  \ dotnet#method('GetCallingAssembly(', ') noinlining', 'static Assembly'),
  \ dotnet#method('GetEntryAssembly(', ')', 'static Assembly'),
  \ dotnet#method('add_ModuleResolve(', 'class ModuleResolveEventHandler value)', 'void'),
  \ dotnet#method('remove_ModuleResolve(', 'class ModuleResolveEventHandler value)', 'void'),
  \ dotnet#method('get_CodeBase(', ')', 'string'),
  \ dotnet#method('get_EscapedCodeBase(', ')', 'string'),
  \ dotnet#method('GetName(', ')', ''),
  \ dotnet#method('GetName(', 'bool copiedName)', ''),
  \ dotnet#method('get_FullName(', ')', 'string'),
  \ dotnet#method('get_EntryPoint(', ')', ''),
  \ dotnet#method('GetType(', ')', 'Type '),
  \ dotnet#method('GetType(', 'string name)', 'Type'),
  \ dotnet#method('GetType(', 'string name, bool throwOnError)', 'Type'),
  \ dotnet#method('GetType(', 'string name, bool throwOnError, bool ignoreCase)', 'Type'),
  \ dotnet#method('GetExportedTypes(', ')', 'Type[]'),
  \ dotnet#method('GetTypes(', ')', 'Type[]'),
  \ dotnet#method('GetManifestResourceStream(', 'class Type type, string name)', ''),
  \ dotnet#method('GetManifestResourceStream(', 'string name)', ''),
  \ dotnet#method('GetSatelliteAssembly(', 'class CultureInfo culture)', ''),
  \ dotnet#method('GetSatelliteAssembly(', 'class CultureInfo culture, Version version)', ''),
  \ dotnet#method('get_Evidence(', ')', ''),
  \ dotnet#method('get_PermissionSet(', ')', ''),
  \ dotnet#method('get_IsFullyTrusted(', ')', 'bool'),
  \ dotnet#method('get_SecurityRuleSet(', ')', ''),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_ManifestModule(', ')', ''),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('GetCustomAttributesData(', ')', ''),
  \ dotnet#method('get_ReflectionOnly(', ')', 'bool'),
  \ dotnet#method('LoadModule(', 'string moduleName, uint8[] rawModule)', ''),
  \ dotnet#method('LoadModule(', 'string moduleName, uint8[] rawModule, uint8[] rawSymbolStore)', ''),
  \ dotnet#method('CreateInstance(', 'string typeName)', 'object'),
  \ dotnet#method('CreateInstance(', 'string typeName, bool ignoreCase)', 'object'),
  \ dotnet#method('CreateInstance(', 'string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)', 'object'),
  \ dotnet#method('GetLoadedModules(', ')', ''),
  \ dotnet#method('GetLoadedModules(', 'bool getResourceModules)', ''),
  \ dotnet#method('GetModules(', ')', ''),
  \ dotnet#method('GetModules(', 'bool getResourceModules)', ''),
  \ dotnet#method('GetModule(', 'string name)', ''),
  \ dotnet#method('GetFile(', 'string name)', ''),
  \ dotnet#method('GetFiles(', ')', ''),
  \ dotnet#method('GetFiles(', 'bool getResourceModules)', ''),
  \ dotnet#method('GetManifestResourceNames(', ')', 'string[]'),
  \ dotnet#method('GetReferencedAssemblies(', ')', ''),
  \ dotnet#method('GetManifestResourceInfo(', 'string resourceName)', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Location(', ')', 'string'),
  \ dotnet#method('get_ImageRuntimeVersion(', ')', 'string'),
  \ dotnet#method('get_GlobalAssemblyCache(', ')', 'bool'),
  \ dotnet#method('get_HostContext(', ')', 'int64'),
  \ dotnet#method('get_IsDynamic(', ')', 'bool'),
  \ dotnet#event('ModuleResolve', 'ModuleResolveEventHandler'),
  \ dotnet#prop('CodeBase', 'string'),
  \ dotnet#prop('EscapedCodeBase', 'string'),
  \ dotnet#prop('FullName', 'string'),
  \ dotnet#prop('EntryPoint', 'MethodInfo'),
  \ dotnet#prop('Evidence', 'Evidence'),
  \ dotnet#prop('', 'PermissionSet'),
  \ dotnet#prop('IsFullyTrusted', 'bool'),
  \ dotnet#prop('SecurityRuleSet', 'SecurityRuleSet'),
  \ dotnet#prop('ManifestModule', 'Module'),
  \ dotnet#prop('ReflectionOnly', 'bool'),
  \ dotnet#prop('Location', 'string'),
  \ dotnet#prop('ImageRuntimeVersion', 'string'),
  \ dotnet#prop('GlobalAssemblyCache', 'bool'),
  \ dotnet#prop('HostContext', 'int64'),
  \ dotnet#prop('IsDynamic', 'bool'),
  \ ])

call dotnet#class('AssemblyCopyrightAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyCopyrightAttribute(', 'string copyright)', 'void'),
  \ dotnet#method('get_Copyright(', ')', 'string'),
  \ dotnet#prop('Copyright', 'string'),
  \ ])

call dotnet#class('AssemblyTrademarkAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyTrademarkAttribute(', 'string trademark)', 'void'),
  \ dotnet#method('get_Trademark(', ')', 'string'),
  \ dotnet#prop('Trademark', 'string'),
  \ ])

call dotnet#class('AssemblyProductAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyProductAttribute(', 'string product)', 'void'),
  \ dotnet#method('get_Product(', ')', 'string'),
  \ dotnet#prop('Product', 'string'),
  \ ])

call dotnet#class('AssemblyCompanyAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyCompanyAttribute(', 'string company)', 'void'),
  \ dotnet#method('get_Company(', ')', 'string'),
  \ dotnet#prop('Company', 'string'),
  \ ])

call dotnet#class('AssemblyDescriptionAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyDescriptionAttribute(', 'string description)', 'void'),
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ ])

call dotnet#class('AssemblyTitleAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyTitleAttribute(', 'string title)', 'void'),
  \ dotnet#method('get_Title(', ')', 'string'),
  \ dotnet#prop('Title', 'string'),
  \ ])

call dotnet#class('AssemblyConfigurationAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyConfigurationAttribute(', 'string configuration)', 'void'),
  \ dotnet#method('get_Configuration(', ')', 'string'),
  \ dotnet#prop('Configuration', 'string'),
  \ ])

call dotnet#class('AssemblyDefaultAliasAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyDefaultAliasAttribute(', 'string defaultAlias)', 'void'),
  \ dotnet#method('get_DefaultAlias(', ')', 'string'),
  \ dotnet#prop('DefaultAlias', 'string'),
  \ ])

call dotnet#class('AssemblyInformationalVersionAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyInformationalVersionAttribute(', 'string informationalVersion)', 'void'),
  \ dotnet#method('get_InformationalVersion(', ')', 'string'),
  \ dotnet#prop('InformationalVersion', 'string'),
  \ ])

call dotnet#class('AssemblyFileVersionAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyFileVersionAttribute(', 'string version)', 'void'),
  \ dotnet#method('get_Version(', ')', 'string'),
  \ dotnet#prop('Version', 'string'),
  \ ])

call dotnet#class('AssemblyCultureAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyCultureAttribute(', 'string culture)', 'void'),
  \ dotnet#method('get_Culture(', ')', 'string'),
  \ dotnet#prop('Culture', 'string'),
  \ ])

call dotnet#class('AssemblyVersionAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyVersionAttribute(', 'string version)', 'void'),
  \ dotnet#method('get_Version(', ')', 'string'),
  \ dotnet#prop('Version', 'string'),
  \ ])

call dotnet#class('AssemblyKeyFileAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyKeyFileAttribute(', 'string keyFile)', 'void'),
  \ dotnet#method('get_KeyFile(', ')', 'string'),
  \ dotnet#prop('KeyFile', 'string'),
  \ ])

call dotnet#class('AssemblyDelaySignAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyDelaySignAttribute(', 'bool delaySign)', 'void'),
  \ dotnet#method('get_DelaySign(', ')', 'bool'),
  \ dotnet#prop('DelaySign', 'bool'),
  \ ])

call dotnet#class('AssemblyAlgorithmIdAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyAlgorithmIdAttribute(', 'AssemblyHashAlgorithm algorithmId)', 'void'),
  \ dotnet#method('AssemblyAlgorithmIdAttribute(', 'uint32 algorithmId)', 'void'),
  \ dotnet#method('get_AlgorithmId(', ')', 'uint32'),
  \ dotnet#prop('AlgorithmId', 'uint32'),
  \ ])

call dotnet#class('AssemblyFlagsAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyFlagsAttribute(', 'uint32 flags)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'uint32'),
  \ dotnet#method('get_AssemblyFlags(', ')', 'int32'),
  \ dotnet#method('AssemblyFlagsAttribute(', 'int32 assemblyFlags)', 'void'),
  \ dotnet#method('AssemblyFlagsAttribute(', 'AssemblyNameFlags assemblyFlags)', 'void'),
  \ dotnet#prop('Flags', 'uint32'),
  \ dotnet#prop('AssemblyFlags', 'int32'),
  \ ])

call dotnet#class('AssemblyKeyNameAttribute', 'Attribute', [ 
  \ dotnet#method('AssemblyKeyNameAttribute(', 'string keyName)', 'void'),
  \ dotnet#method('get_KeyName(', ')', 'string'),
  \ dotnet#prop('KeyName', 'string'),
  \ ])

call dotnet#class('AssemblyName', 'Object', [ 
  \ dotnet#method('AssemblyName(', ')', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Version(', ')', 'Version'),
  \ dotnet#method('set_Version(', 'class Version value)', 'void'),
  \ dotnet#method('get_CultureInfo(', ')', 'CultureInfo'),
  \ dotnet#method('set_CultureInfo(', 'class CultureInfo value)', 'void'),
  \ dotnet#method('get_CodeBase(', ')', 'string'),
  \ dotnet#method('set_CodeBase(', 'string value)', 'void'),
  \ dotnet#method('get_EscapedCodeBase(', ')', 'string'),
  \ dotnet#method('get_ProcessorArchitecture(', ')', 'ProcessorArchitecture'),
  \ dotnet#method('set_ProcessorArchitecture(', 'ProcessorArchitecture value)', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('GetAssemblyName(', 'string assemblyFile)', 'static AssemblyName'),
  \ dotnet#method('SetHashControl(', 'uint8[] hash, AssemblyHashAlgorithm hashAlgorithm)', 'void'),
  \ dotnet#method('GetPublicKey(', ')', 'uint8[]'),
  \ dotnet#method('SetPublicKey(', 'uint8[] publicKey)', 'void'),
  \ dotnet#method('GetPublicKeyToken(', ')', 'uint8[]'),
  \ dotnet#method('SetPublicKeyToken(', 'uint8[] publicKeyToken)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'AssemblyNameFlags'),
  \ dotnet#method('set_Flags(', 'AssemblyNameFlags value)', 'void'),
  \ dotnet#method('get_HashAlgorithm(', ')', 'AssemblyHashAlgorithm'),
  \ dotnet#method('set_HashAlgorithm(', 'AssemblyHashAlgorithm value)', 'void'),
  \ dotnet#method('get_VersionCompatibility(', ')', 'AssemblyVersionCompatibility'),
  \ dotnet#method('set_VersionCompatibility(', 'AssemblyVersionCompatibility value)', 'void'),
  \ dotnet#method('get_KeyPair(', ')', 'StrongNameKeyPair'),
  \ dotnet#method('set_KeyPair(', 'class StrongNameKeyPair value)', 'void'),
  \ dotnet#method('get_FullName(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#method('AssemblyName(', 'string assemblyName)', 'void'),
  \ dotnet#method('ReferenceMatchesDefinition(', 'class AssemblyName reference, AssemblyName definition) internalcall', 'static bool'),
  \ dotnet#method('nInit(', '[out] RuntimeAssembly& assembly, bool forIntrospection, bool raiseResolveEvent) internalcall', 'int32'),
  \ dotnet#method('nInit(', ')', 'void'),
  \ dotnet#method('AssemblyName(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('SetProcArchIndex(', 'PortableExecutableKinds pek, ImageFileMachine ifm)', 'void'),
  \ dotnet#method('CalculateProcArchIndex(', 'PortableExecutableKinds pek, ImageFileMachine ifm, AssemblyNameFlags flags)', 'static ProcessorArchitecture'),
  \ dotnet#method('Init(', 'string name, uint8[] publicKey, uint8[] publicKeyToken, Version version, CultureInfo cultureInfo, AssemblyHashAlgorithm hashAlgorithm, AssemblyVersionCompatibility versionCompatibility, string codeBase, AssemblyNameFlags flags, StrongNameKeyPair keyPair)', 'void'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#method('GetNameWithPublicKey(', ')', 'string'),
  \ dotnet#method('nGetFileInformation(', 'string s) internalcall', 'static AssemblyName'),
  \ dotnet#method('EscapeCodeBase(', 'string codeBase) internalcall', 'static string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Version', 'Version'),
  \ dotnet#prop('CultureInfo', 'CultureInfo'),
  \ dotnet#prop('CodeBase', 'string'),
  \ dotnet#prop('EscapedCodeBase', 'string'),
  \ dotnet#prop('ProcessorArchitecture', 'ProcessorArchitecture'),
  \ dotnet#prop('Flags', 'AssemblyNameFlags'),
  \ dotnet#prop('HashAlgorithm', 'AssemblyHashAlgorithm'),
  \ dotnet#prop('VersionCompatibility', 'AssemblyVersionCompatibility'),
  \ dotnet#prop('KeyPair', 'StrongNameKeyPair'),
  \ dotnet#prop('FullName', 'string'),
  \ ])

call dotnet#class('AssemblyNameProxy', 'MarshalByRefObject', [ 
  \ dotnet#method('GetAssemblyName(', 'string assemblyFile)', 'AssemblyName'),
  \ dotnet#method('AssemblyNameProxy(', ')', 'void'),
  \ ])

call dotnet#class('CustomAttributeFormatException', 'FormatException', [ 
  \ dotnet#method('CustomAttributeFormatException(', ')', 'void'),
  \ dotnet#method('CustomAttributeFormatException(', 'string message)', 'void'),
  \ dotnet#method('CustomAttributeFormatException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('CustomAttributeFormatException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('CustomAttributeData', 'Object', [ 
  \ dotnet#method('GetCustomAttributes(', 'class MemberInfo target)', 'static IList'),
  \ dotnet#method('GetCustomAttributes(', 'class Module target)', 'static IList'),
  \ dotnet#method('GetCustomAttributes(', 'class Assembly target)', 'static IList'),
  \ dotnet#method('GetCustomAttributes(', 'class ParameterInfo target)', 'static IList'),
  \ dotnet#method('GetCustomAttributesInternal(', 'class RuntimeType target)', 'static IList'),
  \ dotnet#method('GetCustomAttributesInternal(', 'class RuntimeFieldInfo target)', 'static IList'),
  \ dotnet#method('GetCustomAttributesInternal(', 'class RuntimeMethodInfo target)', 'static IList'),
  \ dotnet#method('GetCustomAttributesInternal(', 'class RuntimeConstrCustomAttributeDataInfo target)', 'static IList'),
  \ dotnet#method('GetCustomAttributesInternal(', 'class RuntimeEventInfo target)', 'static IList'),
  \ dotnet#method('GetCustomAttributesInternal(', 'class RuntimePropertyInfo target)', 'static IList'),
  \ dotnet#method('GetCustomAttributesInternal(', 'class RuntimeModule target)', 'static IList'),
  \ dotnet#method('GetCustomAttributesInternal(', 'class RuntimeAssembly target)', 'static IList'),
  \ dotnet#method('GetCustomAttributesInternal(', 'class RuntimeParameterInfo target)', 'static IList'),
  \ dotnet#method('GetCustomAttributeRecords(', 'class RuntimeModule, int32 targetToken)', 'static CustomAttributeRecord[]'),
  \ dotnet#method('Filter(', 'class IList attrs, Type caType, string name)', 'static CustomAttributeTypedArgument'),
  \ dotnet#method('Filter(', 'class IList attrs, Type caType, int32 parameter)', 'static CustomAttributeTypedArgument'),
  \ dotnet#method('CustomAttributeData(', ')', 'void'),
  \ dotnet#method('CustomAttributeData(', 'class Attribute attribute)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('get_ConstrCustomAttributeData(', ')', ''),
  \ dotnet#method('get_ConstrCustomAttributeDataArguments(', ')', ''),
  \ dotnet#method('get_NamedArguments(', ')', ''),
  \ dotnet#prop('ConstrCustomAttributeData', 'ConstrCustomAttributeDataInfo'),
  \ dotnet#prop('ConstrCustomAttributeDataArguments', 'IList'),
  \ dotnet#prop('NamedArguments', 'IList'),
  \ ])

call dotnet#class('CustomAttributeNamedArgument', 'ValueType', [ 
  \ dotnet#field('m_memberInfo', 'MemberInfo'),
  \ dotnet#field('m_value', 'CustomAttributeTypedArgument'),
  \ dotnet#method('op_Equality(', 'CustomAttributeNamedArgument left, CustomAttributeNamedArgument right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'CustomAttributeNamedArgument left, CustomAttributeNamedArgument right)', 'static bool'),
  \ dotnet#method('CustomAttributeNamedArgument(', 'class MemberInfo memberInfo, object value)', 'void'),
  \ dotnet#method('CustomAttributeNamedArgument(', 'class MemberInfo memberInfo, CustomAttributeTypedArgument typedArgument)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('get_ArgumentType(', ')', 'Type'),
  \ dotnet#method('get_MemberInfo(', ')', 'MemberInfo'),
  \ dotnet#method('get_TypedValue(', ')', 'CustomAttributeTypedArgument'),
  \ dotnet#prop('ArgumentType', 'Type'),
  \ dotnet#prop('MemberInfo', 'MemberInfo'),
  \ dotnet#prop('TypedValue', 'CustomAttributeTypedArgument'),
  \ ])

call dotnet#class('CustomAttributeTypedArgument', 'ValueType', [ 
  \ dotnet#field('m_value', 'object'),
  \ dotnet#field('m_argumentType', 'Type'),
  \ dotnet#method('op_Equality(', 'CustomAttributeTypedArgument left, CustomAttributeTypedArgument right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'CustomAttributeTypedArgument left, CustomAttributeTypedArgument right)', 'static bool'),
  \ dotnet#method('CustomAttributeTypedArgument(', 'class Type argumentType, object value)', 'void'),
  \ dotnet#method('CustomAttributeTypedArgument(', 'object value)', 'void'),
  \ dotnet#method('CustomAttributeTypedArgument(', 'class RuntimeModule scope, CustomAttributeEncodedArgument encodedArg)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'bool typed)', 'string'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('get_ArgumentType(', ')', 'Type'),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#prop('ArgumentType', 'Type'),
  \ dotnet#prop('Value', 'object'),
  \ ])

call dotnet#class('DefaultMemberAttribute', 'Attribute', [ 
  \ dotnet#method('DefaultMemberAttribute(', 'string memberName)', 'void'),
  \ dotnet#method('get_MemberName(', ')', 'string'),
  \ dotnet#prop('MemberName', 'string'),
  \ ])

call dotnet#class('InterfaceMapping', 'ValueType', [ 
  \ dotnet#field('TargetType', 'Type'),
  \ dotnet#field('InterfaceType', 'Type'),
  \ dotnet#field('TargetMethods', 'MethodInfo[]'),
  \ dotnet#field('InterfaceMethods', 'MethodInfo[]'),
  \ ])

call dotnet#class('InvalidFilterCriteriaException', 'ApplicationException', [ 
  \ dotnet#method('InvalidFilterCriteriaException(', ')', 'void'),
  \ dotnet#method('InvalidFilterCriteriaException(', 'string message)', 'void'),
  \ dotnet#method('InvalidFilterCriteriaException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('InvalidFilterCriteriaException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ManifestResourceInfo', 'Object', [ 
  \ dotnet#method('ManifestResourceInfo(', 'class Assembly containingAssembly, string containingFileName, ResourceLocation resourceLocation)', 'void'),
  \ dotnet#method('get_ReferencedAssembly(', ')', ''),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('get_ResourceLocation(', ')', ''),
  \ dotnet#prop('ReferencedAssembly', 'Assembly'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('ResourceLocation', 'ResourceLocation'),
  \ ])

call dotnet#class('MemberFilter', 'MulticastDelegate', [ 
  \ dotnet#method('MemberFilter(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class MemberInfo m, object filterCriteria)', 'bool'),
  \ dotnet#method('BeginInvoke(', 'class MemberInfo m, object filterCriteria, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'bool'),
  \ ])

call dotnet#class('Missing', 'Object', [ 
  \ dotnet#method('Missing(', ')', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('Missing(', ')', 'static void .'),
  \ ])

call dotnet#class('Module', 'Object', [ 
  \ dotnet#method('Module(', ')', 'static void .'),
  \ dotnet#method('op_Equality(', 'class Module left, Module right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class Module left, Module right)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('GetCustomAttributesData(', ')', ''),
  \ dotnet#method('ResolveMethod(', 'int32 metadataToken)', 'MethodBase'),
  \ dotnet#method('ResolveMethod(', 'int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)', ''),
  \ dotnet#method('ResolveField(', 'int32 metadataToken)', 'FieldInfo'),
  \ dotnet#method('ResolveField(', 'int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)', ''),
  \ dotnet#method('ResolveType(', 'int32 metadataToken)', 'Type'),
  \ dotnet#method('ResolveType(', 'int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)', 'Type'),
  \ dotnet#method('ResolveMember(', 'int32 metadataToken)', 'MemberInfo'),
  \ dotnet#method('ResolveMember(', 'int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)', ''),
  \ dotnet#method('ResolveSignature(', 'int32 metadataToken)', 'uint8[]'),
  \ dotnet#method('ResolveString(', 'int32 metadataToken)', 'string'),
  \ dotnet#method('GetPEKind(', '[out] PortableExecutableKinds& peKind, [out] ImageFileMachine& machine)', 'void'),
  \ dotnet#method('get_MDStreamVersion(', ')', 'int32'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetType(', 'string className, bool ignoreCase)', 'Type'),
  \ dotnet#method('GetType(', 'string className)', 'Type'),
  \ dotnet#method('GetType(', 'string className, bool throwOnError, bool ignoreCase)', 'Type'),
  \ dotnet#method('get_FullyQualifiedName(', ')', 'string'),
  \ dotnet#method('FindTypes(', 'class TypeFilter filter, object filterCriteria)', 'Type[]'),
  \ dotnet#method('GetTypes(', ')', 'Type[]'),
  \ dotnet#method('get_ModuleVersionId(', ')', ''),
  \ dotnet#method('get_MetadataToken(', ')', 'int32'),
  \ dotnet#method('IsResource(', ')', 'bool'),
  \ dotnet#method('GetFields(', ')', 'FieldInfo[]'),
  \ dotnet#method('GetFields(', 'BindingFlags bindingFlags)', ''),
  \ dotnet#method('GetField(', 'string name)', 'FieldInfo'),
  \ dotnet#method('GetField(', 'string name, BindingFlags bindingAttr)', ''),
  \ dotnet#method('GetMethods(', ')', 'MethodInfo[]'),
  \ dotnet#method('GetMethods(', 'BindingFlags bindingFlags)', ''),
  \ dotnet#method('GetMethod(', 'string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'MethodInfo'),
  \ dotnet#method('GetMethod(', 'string name, Type[] types)', 'MethodInfo'),
  \ dotnet#method('GetMethod(', 'string name)', 'MethodInfo'),
  \ dotnet#method('GetMethodImpl(', 'string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'family'),
  \ dotnet#method('get_ScopeName(', ')', 'string'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Assembly(', ')', ''),
  \ dotnet#method('get_ModuleHandle(', ')', 'ModuleHandle'),
  \ dotnet#method('GetModuleHandle(', ')', 'strict'),
  \ dotnet#method('GetSignerCertificate(', ')', ''),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MDStreamVersion', 'int32'),
  \ dotnet#prop('FullyQualifiedName', 'string'),
  \ dotnet#prop('ModuleVersionId', 'Guid'),
  \ dotnet#prop('MetadataToken', 'int32'),
  \ dotnet#prop('ScopeName', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('', 'Assembly'),
  \ dotnet#prop('ModuleHandle', 'ModuleHandle'),
  \ ])

call dotnet#class('ObfuscateAssemblyAttribute', 'Attribute', [ 
  \ dotnet#method('ObfuscateAssemblyAttribute(', 'bool assemblyIsPrivate)', 'void'),
  \ dotnet#method('get_AssemblyIsPrivate(', ')', 'bool'),
  \ dotnet#method('get_StripAfterObfuscation(', ')', 'bool'),
  \ dotnet#method('set_StripAfterObfuscation(', 'bool value)', 'void'),
  \ dotnet#prop('AssemblyIsPrivate', 'bool'),
  \ dotnet#prop('StripAfterObfuscation', 'bool'),
  \ ])

call dotnet#class('ObfuscationAttribute', 'Attribute', [ 
  \ dotnet#method('ObfuscationAttribute(', ')', 'void'),
  \ dotnet#method('get_StripAfterObfuscation(', ')', 'bool'),
  \ dotnet#method('set_StripAfterObfuscation(', 'bool value)', 'void'),
  \ dotnet#method('get_Exclude(', ')', 'bool'),
  \ dotnet#method('set_Exclude(', 'bool value)', 'void'),
  \ dotnet#method('get_ApplyToMembers(', ')', 'bool'),
  \ dotnet#method('set_ApplyToMembers(', 'bool value)', 'void'),
  \ dotnet#method('get_Feature(', ')', 'string'),
  \ dotnet#method('set_Feature(', 'string value)', 'void'),
  \ dotnet#prop('StripAfterObfuscation', 'bool'),
  \ dotnet#prop('Exclude', 'bool'),
  \ dotnet#prop('ApplyToMembers', 'bool'),
  \ dotnet#prop('Feature', 'string'),
  \ ])

call dotnet#class('ExceptionHandlingClause', 'Object', [ 
  \ dotnet#method('ExceptionHandlingClause(', ')', 'void'),
  \ dotnet#method('get_Flags(', ')', ''),
  \ dotnet#method('get_TryOffset(', ')', 'int32'),
  \ dotnet#method('get_TryLength(', ')', 'int32'),
  \ dotnet#method('get_HandlerOffset(', ')', 'int32'),
  \ dotnet#method('get_HandlerLength(', ')', 'int32'),
  \ dotnet#method('get_FilterOffset(', ')', 'int32'),
  \ dotnet#method('get_CatchType(', ')', 'Type'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Flags', 'ExceptionHandlingClauseOptions'),
  \ dotnet#prop('TryOffset', 'int32'),
  \ dotnet#prop('TryLength', 'int32'),
  \ dotnet#prop('HandlerOffset', 'int32'),
  \ dotnet#prop('HandlerLength', 'int32'),
  \ dotnet#prop('FilterOffset', 'int32'),
  \ dotnet#prop('CatchType', 'Type'),
  \ ])

call dotnet#class('MethodBody', 'Object', [ 
  \ dotnet#field('m_methodBase', 'MethodBase'),
  \ dotnet#method('MethodBody(', ')', 'void'),
  \ dotnet#method('get_LocalSignatureMetadataToken(', ')', 'int32'),
  \ dotnet#method('get_LocalVariables(', ')', ''),
  \ dotnet#method('get_MaxStackSize(', ')', 'int32'),
  \ dotnet#method('get_InitLocals(', ')', 'bool'),
  \ dotnet#method('GetILAsByteArray(', ')', 'uint8[]'),
  \ dotnet#method('get_ExceptionHandlingClauses(', ')', ''),
  \ dotnet#prop('LocalSignatureMetadataToken', 'int32'),
  \ dotnet#prop('LocalVariables', 'IList'),
  \ dotnet#prop('MaxStackSize', 'int32'),
  \ dotnet#prop('InitLocals', 'bool'),
  \ dotnet#prop('ExceptionHandlingClauses', 'IList'),
  \ ])

call dotnet#class('LocalVariableInfo', 'Object', [ 
  \ dotnet#method('LocalVariableInfo(', ')', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_LocalType(', ')', 'Type'),
  \ dotnet#method('get_IsPinned(', ')', 'bool'),
  \ dotnet#method('get_LocalIndex(', ')', 'int32'),
  \ dotnet#prop('LocalType', 'Type'),
  \ dotnet#prop('IsPinned', 'bool'),
  \ dotnet#prop('LocalIndex', 'int32'),
  \ ])

call dotnet#class('ParameterModifier', 'ValueType', [ 
  \ dotnet#field('_byRef', 'bool[]'),
  \ dotnet#method('ParameterModifier(', 'int32 parameterCount)', 'void'),
  \ dotnet#method('get_IsByRefArray(', ')', 'bool[]'),
  \ dotnet#method('get_Item(', 'int32 index)', 'bool'),
  \ dotnet#method('set_Item(', 'int32 index, bool value)', 'void'),
  \ dotnet#prop('IsByRefArray', 'bool[]'),
  \ dotnet#prop('Item(int32)', 'bool'),
  \ ])

call dotnet#class('Pointer', 'Object', [ 
  \ dotnet#method('Pointer(', ')', 'void'),
  \ dotnet#method('Box(', 'void* ptr, Type type)', 'static object'),
  \ dotnet#method('Unbox(', 'object ptr)', 'static void*'),
  \ dotnet#method('GetPointerType(', ')', 'RuntimeType'),
  \ dotnet#method('GetPointerValue(', ')', 'object'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ ])

call dotnet#class('ReflectionTypeLoadException', 'SystemException', [ 
  \ dotnet#method('ReflectionTypeLoadException(', ')', 'void'),
  \ dotnet#method('ReflectionTypeLoadException(', 'class Type[] classes, Exception[] exceptions)', 'void'),
  \ dotnet#method('ReflectionTypeLoadException(', 'class Type[] classes, Exception[] exceptions, string message)', 'void'),
  \ dotnet#method('ReflectionTypeLoadException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Types(', ')', 'Type[]'),
  \ dotnet#method('get_LoaderExceptions(', ')', 'Exception[]'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Types', 'Type[]'),
  \ dotnet#prop('LoaderExceptions', 'Exception[]'),
  \ ])

call dotnet#class('StrongNameKeyPair', 'Object', [ 
  \ dotnet#method('StrongNameKeyPair(', 'class FileStream keyPairFile)', 'void'),
  \ dotnet#method('StrongNameKeyPair(', 'uint8[] keyPairArray)', 'void'),
  \ dotnet#method('StrongNameKeyPair(', 'string keyPairContainer)', 'void'),
  \ dotnet#method('StrongNameKeyPair(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_PublicKey(', ')', 'uint8[]'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#prop('PublicKey', 'uint8[]'),
  \ ])

call dotnet#class('TargetException', 'ApplicationException', [ 
  \ dotnet#method('TargetException(', ')', 'void'),
  \ dotnet#method('TargetException(', 'string message)', 'void'),
  \ dotnet#method('TargetException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('TargetException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('TargetInvocationException', 'ApplicationException', [ 
  \ dotnet#method('TargetInvocationException(', ')', 'void'),
  \ dotnet#method('TargetInvocationException(', 'class Exception inner)', 'void'),
  \ dotnet#method('TargetInvocationException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('TargetInvocationException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('TargetParameterCountException', 'ApplicationException', [ 
  \ dotnet#method('TargetParameterCountException(', ')', 'void'),
  \ dotnet#method('TargetParameterCountException(', 'string message)', 'void'),
  \ dotnet#method('TargetParameterCountException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('TargetParameterCountException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('TypeDelegator', 'Type', [ 
  \ dotnet#field('typeImpl', 'Type'),
  \ dotnet#method('TypeDelegator(', ')', 'void'),
  \ dotnet#method('TypeDelegator(', 'class Type delegatingType)', 'void'),
  \ dotnet#method('get_GUID(', ')', ''),
  \ dotnet#method('get_MetadataToken(', ')', 'int32'),
  \ dotnet#method('InvokeMember(', 'string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)', 'object'),
  \ dotnet#method('get_Module(', ')', ''),
  \ dotnet#method('get_Assembly(', ')', ''),
  \ dotnet#method('get_TypeHandle(', ')', ''),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_FullName(', ')', 'string'),
  \ dotnet#method('get_Namespace(', ')', 'string'),
  \ dotnet#method('get_AssemblyQualifiedName(', ')', 'string'),
  \ dotnet#method('get_BaseType(', ')', 'Type'),
  \ dotnet#method('GetConstrTypeDelegatorImpl(', 'BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'ConstrTypeDelegatorInfo'),
  \ dotnet#method('GetConstrTypeDelegators(', 'BindingFlags bindingAttr)', 'ConstrTypeDelegatorInfo[]'),
  \ dotnet#method('GetMethodImpl(', 'string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'MethodInfo'),
  \ dotnet#method('GetMethods(', 'BindingFlags bindingAttr)', 'MethodInfo[]'),
  \ dotnet#method('GetField(', 'string name, BindingFlags bindingAttr)', 'FieldInfo'),
  \ dotnet#method('GetFields(', 'BindingFlags bindingAttr)', 'FieldInfo[]'),
  \ dotnet#method('GetInterface(', 'string name, bool ignoreCase)', 'Type'),
  \ dotnet#method('GetInterfaces(', ')', 'Type[]'),
  \ dotnet#method('GetEvent(', 'string name, BindingFlags bindingAttr)', 'EventInfo'),
  \ dotnet#method('GetEvents(', ')', 'EventInfo[]'),
  \ dotnet#method('GetPropertyImpl(', 'string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)', 'PropertyInfo'),
  \ dotnet#method('GetProperties(', 'BindingFlags bindingAttr)', 'PropertyInfo[]'),
  \ dotnet#method('GetEvents(', 'BindingFlags bindingAttr)', 'EventInfo[]'),
  \ dotnet#method('GetNestedTypes(', 'BindingFlags bindingAttr)', 'Type[]'),
  \ dotnet#method('GetNestedType(', 'string name, BindingFlags bindingAttr)', 'Type'),
  \ dotnet#method('GetMember(', 'string name, MemberTypes type, BindingFlags bindingAttr)', 'MemberInfo[]'),
  \ dotnet#method('GetMembers(', 'BindingFlags bindingAttr)', 'MemberInfo[]'),
  \ dotnet#method('GetAttributeFlagsImpl(', ')', 'TypeAttributes'),
  \ dotnet#method('IsArrayImpl(', ')', 'bool'),
  \ dotnet#method('IsPrimitiveImpl(', ')', 'bool'),
  \ dotnet#method('IsByRefImpl(', ')', 'bool'),
  \ dotnet#method('IsPointerImpl(', ')', 'bool'),
  \ dotnet#method('IsValueTypeImpl(', ')', 'bool'),
  \ dotnet#method('IsCOMObjectImpl(', ')', 'bool'),
  \ dotnet#method('GetElementType(', ')', 'Type'),
  \ dotnet#method('HasElementTypeImpl(', ')', 'bool'),
  \ dotnet#method('get_UnderlyingSystemType(', ')', 'Type'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('GetInterfaceMap(', 'class Type interfaceType)', 'InterfaceMapping'),
  \ dotnet#prop('GUID', 'Guid'),
  \ dotnet#prop('MetadataToken', 'int32'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('', 'Assembly'),
  \ dotnet#prop('TypeHandle', 'RuntimeTypeHandle'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('FullName', 'string'),
  \ dotnet#prop('Namespace', 'string'),
  \ dotnet#prop('AssemblyQualifiedName', 'string'),
  \ dotnet#prop('BaseType', 'Type'),
  \ dotnet#prop('UnderlyingSystemType', 'Type'),
  \ ])

call dotnet#class('TypeFilter', 'MulticastDelegate', [ 
  \ dotnet#method('TypeFilter(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class Type m, object filterCriteria)', 'bool'),
  \ dotnet#method('BeginInvoke(', 'class Type m, object filterCriteria, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'bool'),
  \ ])

call dotnet#class('MethodBase', 'MemberInfo', [ 
  \ dotnet#method('GetMethodFromHandle(', 'RuntimeMethodHandle handle)', 'static MethodBase'),
  \ dotnet#method('GetMethodFromHandle(', 'RuntimeMethodHandle handle, RuntimeTypeHandle declaringType)', 'static MethodBase'),
  \ dotnet#method('GetCurrentMethod(', ') noinlining', 'static reqsecobj'),
  \ dotnet#method('MethodBase(', ')', 'void'),
  \ dotnet#method('op_Equality(', 'class MethodBase left, MethodBase right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class MethodBase left, MethodBase right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetParametersNoCopy(', ')', 'strict'),
  \ dotnet#method('GetParameters(', ')', 'abstract'),
  \ dotnet#method('GetMethodImplementationFlags(', ')', 'abstract'),
  \ dotnet#method('get_MethodHandle(', ')', 'abstract'),
  \ dotnet#method('get_Attributes(', ')', 'abstract'),
  \ dotnet#method('Invoke(', 'object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)', 'abstract object'),
  \ dotnet#method('get_CallingConvention(', ')', ''),
  \ dotnet#method('GetGenericArguments(', ')', 'Type[]'),
  \ dotnet#method('get_IsGenericMethodDefinition(', ')', 'bool'),
  \ dotnet#method('get_ContainsGenericParameters(', ')', 'bool'),
  \ dotnet#method('get_IsGenericMethod(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecuritySafeCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityTransparent(', ')', 'bool'),
  \ dotnet#method('GetType(', ')', 'Type '),
  \ dotnet#method('get_IsPublic(', ')', 'bool '),
  \ dotnet#method('get_IsPrivate(', ')', 'bool '),
  \ dotnet#method('get_IsFamily(', ')', 'bool '),
  \ dotnet#method('get_IsAssembly(', ')', 'bool '),
  \ dotnet#method('get_IsFamilyAndAssembly(', ')', 'bool '),
  \ dotnet#method('get_IsFamilyOrAssembly(', ')', 'bool '),
  \ dotnet#method('get_IsStatic(', ')', 'bool '),
  \ dotnet#method('get_IsFinal(', ')', 'bool '),
  \ dotnet#method('get_IsVirtual(', ')', 'bool '),
  \ dotnet#method('get_IsHideBySig(', ')', 'bool '),
  \ dotnet#method('get_IsAbstract(', ')', 'bool '),
  \ dotnet#method('get_IsSpecialName(', ')', 'bool '),
  \ dotnet#method('get_IsConstrMethodBase(', ')', 'bool '),
  \ dotnet#method('Invoke(', 'object obj, object[] parameters)', 'object'),
  \ dotnet#method('get_IsPublic(', ')', 'bool'),
  \ dotnet#method('get_IsPrivate(', ')', 'bool'),
  \ dotnet#method('get_IsFamily(', ')', 'bool'),
  \ dotnet#method('get_IsAssembly(', ')', 'bool'),
  \ dotnet#method('get_IsFamilyAndAssembly(', ')', 'bool'),
  \ dotnet#method('get_IsFamilyOrAssembly(', ')', 'bool'),
  \ dotnet#method('get_IsStatic(', ')', 'bool'),
  \ dotnet#method('get_IsFinal(', ')', 'bool'),
  \ dotnet#method('get_IsVirtual(', ')', 'bool'),
  \ dotnet#method('get_IsHideBySig(', ')', 'bool'),
  \ dotnet#method('get_IsAbstract(', ')', 'bool'),
  \ dotnet#method('get_IsSpecialName(', ')', 'bool'),
  \ dotnet#method('get_IsConstrMethodBase(', ')', 'bool'),
  \ dotnet#method('GetMethodBody(', ')', ''),
  \ dotnet#method('ConstructParameters(', 'class ParameterInfo[] parameters, CallingConventions callingConvention)', 'static string'),
  \ dotnet#method('ConstructParameters(', 'class Type[] parameters, CallingConventions callingConvention)', 'static string'),
  \ dotnet#method('ConstructName(', ')', 'strict string'),
  \ dotnet#method('GetParameterTypes(', ')', 'strict Type[]'),
  \ dotnet#method('CheckArguments(', 'object[] parameters, Binder binder, BindingFlags invokeAttr, CultureInfo culture, Signature sig)', 'object[]'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MethodHandle', 'RuntimeMethodHandle'),
  \ dotnet#prop('Attributes', 'MethodAttributes'),
  \ dotnet#prop('CallingConvention', 'CallingConventions'),
  \ dotnet#prop('IsGenericMethodDefinition', 'bool'),
  \ dotnet#prop('ContainsGenericParameters', 'bool'),
  \ dotnet#prop('IsGenericMethod', 'bool'),
  \ dotnet#prop('IsSecurityCritical', 'bool'),
  \ dotnet#prop('IsSecuritySafeCritical', 'bool'),
  \ dotnet#prop('IsSecurityTransparent', 'bool'),
  \ dotnet#prop('IsPublic', 'bool'),
  \ dotnet#prop('IsPrivate', 'bool'),
  \ dotnet#prop('IsFamily', 'bool'),
  \ dotnet#prop('IsAssembly', 'bool'),
  \ dotnet#prop('IsFamilyAndAssembly', 'bool'),
  \ dotnet#prop('IsFamilyOrAssembly', 'bool'),
  \ dotnet#prop('IsStatic', 'bool'),
  \ dotnet#prop('IsFinal', 'bool'),
  \ dotnet#prop('IsVirtual', 'bool'),
  \ dotnet#prop('IsHideBySig', 'bool'),
  \ dotnet#prop('IsAbstract', 'bool'),
  \ dotnet#prop('IsSpecialName', 'bool'),
  \ dotnet#prop('IsConstrMethodBase', 'bool'),
  \ dotnet#prop('IsPublic', 'bool'),
  \ dotnet#prop('IsPrivate', 'bool'),
  \ dotnet#prop('IsFamily', 'bool'),
  \ dotnet#prop('IsAssembly', 'bool'),
  \ dotnet#prop('IsFamilyAndAssembly', 'bool'),
  \ dotnet#prop('IsFamilyOrAssembly', 'bool'),
  \ dotnet#prop('IsStatic', 'bool'),
  \ dotnet#prop('IsFinal', 'bool'),
  \ dotnet#prop('IsVirtual', 'bool'),
  \ dotnet#prop('IsHideBySig', 'bool'),
  \ dotnet#prop('IsAbstract', 'bool'),
  \ dotnet#prop('IsSpecialName', 'bool'),
  \ dotnet#prop('IsConstrMethodBase', 'bool'),
  \ ])

call dotnet#class('ConstrConstructorInfoInfo', 'MethodBase', [ 
  \ dotnet#method('ConstructorInfo(', ')', 'void'),
  \ dotnet#method('op_Equality(', 'class ConstrConstructorInfoInfo left, ConstrConstructorInfoInfo right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class ConstrConstructorInfoInfo left, ConstrConstructorInfoInfo right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetReturnType(', ')', 'strict Type'),
  \ dotnet#method('get_MemberType(', ')', ''),
  \ dotnet#method('Invoke(', 'BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)', 'abstract object'),
  \ dotnet#method('Invoke(', 'object[] parameters)', 'object'),
  \ dotnet#method('GetType(', ')', 'Type '),
  \ dotnet#method('Invoke_2(', 'object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)', 'object '),
  \ dotnet#method('Invoke_3(', 'object obj, object[] parameters)', 'object '),
  \ dotnet#method('Invoke_4(', 'BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)', 'object '),
  \ dotnet#method('Invoke_5(', 'object[] parameters)', 'object '),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#method('ConstructorInfo(', ')', 'static void .'),
  \ dotnet#prop('MemberType', 'MemberTypes'),
  \ ])

call dotnet#class('MethodInfo', 'MethodBase', [ 
  \ dotnet#method('MethodInfo(', ')', 'void'),
  \ dotnet#method('op_Equality(', 'class MethodInfo left, MethodInfo right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class MethodInfo left, MethodInfo right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_MemberType(', ')', ''),
  \ dotnet#method('get_ReturnType(', ')', 'Type'),
  \ dotnet#method('get_ReturnParameter(', ')', ''),
  \ dotnet#method('get_ReturnTypeCustomAttributes(', ')', 'abstract'),
  \ dotnet#method('GetBaseDefinition(', ')', 'abstract'),
  \ dotnet#method('GetGenericArguments(', ')', 'Type[]'),
  \ dotnet#method('GetGenericMethodDefinition(', ')', ''),
  \ dotnet#method('MakeGenericMethod(', 'class Type[] typeArguments)', ''),
  \ dotnet#method('GetType(', ')', 'Type '),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MemberType', 'MemberTypes'),
  \ dotnet#prop('ReturnType', 'Type'),
  \ dotnet#prop('ReturnParameter', 'ParameterInfo'),
  \ dotnet#prop('ReturnTypeCustomAttributes', 'ICustomAttributeProvider'),
  \ ])

call dotnet#class('FieldInfo', 'MemberInfo', [ 
  \ dotnet#method('GetFieldFromHandle(', 'RuntimeFieldHandle handle)', 'static FieldInfo'),
  \ dotnet#method('GetFieldFromHandle(', 'RuntimeFieldHandle handle, RuntimeTypeHandle declaringType)', 'static FieldInfo'),
  \ dotnet#method('FieldInfo(', ')', 'void'),
  \ dotnet#method('op_Equality(', 'class FieldInfo left, FieldInfo right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class FieldInfo left, FieldInfo right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_MemberType(', ')', ''),
  \ dotnet#method('GetRequiredCustomModifiers(', ')', 'Type[]'),
  \ dotnet#method('GetOptionalCustomModifiers(', ')', 'Type[]'),
  \ dotnet#method('SetValueDirect(', 'typedref obj, object value)', 'void'),
  \ dotnet#method('GetValueDirect(', 'typedref obj)', 'object'),
  \ dotnet#method('get_FieldHandle(', ')', 'abstract'),
  \ dotnet#method('get_FieldType(', ')', 'abstract Type'),
  \ dotnet#method('GetValue(', 'object obj)', 'abstract object'),
  \ dotnet#method('GetRawConstantValue(', ')', 'object'),
  \ dotnet#method('SetValue(', 'object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture)', 'abstract void'),
  \ dotnet#method('get_Attributes(', ')', 'abstract'),
  \ dotnet#method('SetValue(', 'object obj, object value)', 'void'),
  \ dotnet#method('get_IsPublic(', ')', 'bool'),
  \ dotnet#method('get_IsPrivate(', ')', 'bool'),
  \ dotnet#method('get_IsFamily(', ')', 'bool'),
  \ dotnet#method('get_IsAssembly(', ')', 'bool'),
  \ dotnet#method('get_IsFamilyAndAssembly(', ')', 'bool'),
  \ dotnet#method('get_IsFamilyOrAssembly(', ')', 'bool'),
  \ dotnet#method('get_IsStatic(', ')', 'bool'),
  \ dotnet#method('get_IsInitOnly(', ')', 'bool'),
  \ dotnet#method('get_IsLiteral(', ')', 'bool'),
  \ dotnet#method('get_IsNotSerialized(', ')', 'bool'),
  \ dotnet#method('get_IsSpecialName(', ')', 'bool'),
  \ dotnet#method('get_IsPinvokeImpl(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecuritySafeCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityTransparent(', ')', 'bool'),
  \ dotnet#method('GetType(', ')', 'Type '),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MemberType', 'MemberTypes'),
  \ dotnet#prop('FieldHandle', 'RuntimeFieldHandle'),
  \ dotnet#prop('FieldType', 'Type'),
  \ dotnet#prop('Attributes', 'FieldAttributes'),
  \ dotnet#prop('IsPublic', 'bool'),
  \ dotnet#prop('IsPrivate', 'bool'),
  \ dotnet#prop('IsFamily', 'bool'),
  \ dotnet#prop('IsAssembly', 'bool'),
  \ dotnet#prop('IsFamilyAndAssembly', 'bool'),
  \ dotnet#prop('IsFamilyOrAssembly', 'bool'),
  \ dotnet#prop('IsStatic', 'bool'),
  \ dotnet#prop('IsInitOnly', 'bool'),
  \ dotnet#prop('IsLiteral', 'bool'),
  \ dotnet#prop('IsNotSerialized', 'bool'),
  \ dotnet#prop('IsSpecialName', 'bool'),
  \ dotnet#prop('IsPinvokeImpl', 'bool'),
  \ dotnet#prop('IsSecurityCritical', 'bool'),
  \ dotnet#prop('IsSecuritySafeCritical', 'bool'),
  \ dotnet#prop('IsSecurityTransparent', 'bool'),
  \ ])

call dotnet#class('EventInfo', 'MemberInfo', [ 
  \ dotnet#method('EventInfo(', ')', 'void'),
  \ dotnet#method('op_Equality(', 'class EventInfo left, EventInfo right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class EventInfo left, EventInfo right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_MemberType(', ')', ''),
  \ dotnet#method('GetOtherMethods(', 'bool nonPublic)', ''),
  \ dotnet#method('GetAddMethod(', 'bool nonPublic)', 'abstract'),
  \ dotnet#method('GetRemoveMethod(', 'bool nonPublic)', 'abstract'),
  \ dotnet#method('GetRaiseMethod(', 'bool nonPublic)', 'abstract'),
  \ dotnet#method('get_Attributes(', ')', 'abstract'),
  \ dotnet#method('GetOtherMethods(', ')', 'MethodInfo[]'),
  \ dotnet#method('GetAddMethod(', ')', ''),
  \ dotnet#method('GetRemoveMethod(', ')', ''),
  \ dotnet#method('GetRaiseMethod(', ')', ''),
  \ dotnet#method('AddEventHandler(', 'object target, Delegate handler)', 'void'),
  \ dotnet#method('RemoveEventHandler(', 'object target, Delegate handler)', 'void'),
  \ dotnet#method('get_EventHandlerType(', ')', 'Type'),
  \ dotnet#method('get_IsSpecialName(', ')', 'bool'),
  \ dotnet#method('get_IsMulticast(', ')', 'bool'),
  \ dotnet#method('GetType(', ')', 'Type '),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MemberType', 'MemberTypes'),
  \ dotnet#prop('Attributes', 'EventAttributes'),
  \ dotnet#prop('EventHandlerType', 'Type'),
  \ dotnet#prop('IsSpecialName', 'bool'),
  \ dotnet#prop('IsMulticast', 'bool'),
  \ ])

call dotnet#class('PropertyInfo', 'MemberInfo', [ 
  \ dotnet#method('PropertyInfo(', ')', 'void'),
  \ dotnet#method('op_Equality(', 'class PropertyInfo left, PropertyInfo right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class PropertyInfo left, PropertyInfo right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_MemberType(', ')', ''),
  \ dotnet#method('GetConstantValue(', ')', 'object'),
  \ dotnet#method('GetRawConstantValue(', ')', 'object'),
  \ dotnet#method('get_PropertyType(', ')', 'abstract Type'),
  \ dotnet#method('SetValue(', 'object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)', 'abstract void'),
  \ dotnet#method('GetAccessors(', 'bool nonPublic)', 'abstract'),
  \ dotnet#method('GetGetMethod(', 'bool nonPublic)', 'abstract'),
  \ dotnet#method('GetSetMethod(', 'bool nonPublic)', 'abstract'),
  \ dotnet#method('GetIndexParameters(', ')', 'abstract'),
  \ dotnet#method('get_Attributes(', ')', 'abstract'),
  \ dotnet#method('get_CanRead(', ')', 'abstract bool'),
  \ dotnet#method('get_CanWrite(', ')', 'abstract bool'),
  \ dotnet#method('GetValue(', 'object obj, object[] index)', 'object'),
  \ dotnet#method('GetValue(', 'object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)', 'abstract object'),
  \ dotnet#method('SetValue(', 'object obj, object value, object[] index)', 'void'),
  \ dotnet#method('GetRequiredCustomModifiers(', ')', 'Type[]'),
  \ dotnet#method('GetOptionalCustomModifiers(', ')', 'Type[]'),
  \ dotnet#method('GetAccessors(', ')', ''),
  \ dotnet#method('GetGetMethod(', ')', ''),
  \ dotnet#method('GetSetMethod(', ')', ''),
  \ dotnet#method('get_IsSpecialName(', ')', 'bool'),
  \ dotnet#method('GetType(', ')', 'Type '),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MemberType', 'MemberTypes'),
  \ dotnet#prop('PropertyType', 'Type'),
  \ dotnet#prop('Attributes', 'PropertyAttributes'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('IsSpecialName', 'bool'),
  \ ])

call dotnet#class('ParameterInfo', 'Object', [ 
  \ dotnet#field('NameImpl', 'string'),
  \ dotnet#field('ClassImpl', 'Type'),
  \ dotnet#field('PositionImpl', 'int32'),
  \ dotnet#field('AttrsImpl', 'ParameterAttributes'),
  \ dotnet#field('DefaultValueImpl', 'object'),
  \ dotnet#field('MemberImpl', 'MemberInfo'),
  \ dotnet#method('ParameterInfo(', ')', 'void'),
  \ dotnet#method('SetName(', 'string name)', 'void'),
  \ dotnet#method('SetAttributes(', 'ParameterAttributes attributes)', 'void'),
  \ dotnet#method('get_ParameterType(', ')', 'Type'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_DefaultValue(', ')', 'object'),
  \ dotnet#method('get_RawDefaultValue(', ')', 'object'),
  \ dotnet#method('get_Position(', ')', 'int32'),
  \ dotnet#method('get_Attributes(', ')', ''),
  \ dotnet#method('get_Member(', ')', ''),
  \ dotnet#method('get_IsIn(', ')', 'bool'),
  \ dotnet#method('get_IsOut(', ')', 'bool'),
  \ dotnet#method('get_IsLcid(', ')', 'bool'),
  \ dotnet#method('get_IsRetval(', ')', 'bool'),
  \ dotnet#method('get_IsOptional(', ')', 'bool'),
  \ dotnet#method('get_MetadataToken(', ')', 'int32'),
  \ dotnet#method('GetRequiredCustomModifiers(', ')', 'Type[]'),
  \ dotnet#method('GetOptionalCustomModifiers(', ')', 'Type[]'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetCustomAttributes(', 'bool inherit)', 'object[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Type attributeType, bool inherit)', 'object[]'),
  \ dotnet#method('IsDefined(', 'class Type attributeType, bool inherit)', 'bool'),
  \ dotnet#method('GetCustomAttributesData(', ')', ''),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#method('GetRealObject(', 'StreamingContext context)', 'object'),
  \ dotnet#prop('ParameterType', 'Type'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('DefaultValue', 'object'),
  \ dotnet#prop('RawDefaultValue', 'object'),
  \ dotnet#prop('Position', 'int32'),
  \ dotnet#prop('Attributes', 'ParameterAttributes'),
  \ dotnet#prop('Member', 'MemberInfo'),
  \ dotnet#prop('IsIn', 'bool'),
  \ dotnet#prop('IsOut', 'bool'),
  \ dotnet#prop('IsLcid', 'bool'),
  \ dotnet#prop('IsRetval', 'bool'),
  \ dotnet#prop('IsOptional', 'bool'),
  \ dotnet#prop('MetadataToken', 'int32'),
  \ ])

