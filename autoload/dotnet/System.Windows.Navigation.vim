call dotnet#namespace('System.Windows.Navigation')

call dotnet#class('BaseUriHelper', 'Object', [ 
  \ dotnet#method('GetBaseUri(', 'class DependencyObject element)', 'static Uri'),
  \ dotnet#method('get_SiteOfOriginBaseUri(', ')', 'static Uri'),
  \ dotnet#method('get_PackAppBaseUri(', ')', 'static Uri'),
  \ dotnet#method('IsPackApplicationUri(', 'class Uri uri)', 'static bool'),
  \ dotnet#method('GetAssemblyAndPartNameFromPackAppUri(', 'class Uri uri, [out] Assembly& assembly, [out] string& partName)', 'static void'),
  \ dotnet#method('GetLoadedAssembly(', 'string assemblyName, string assemblyVersion, string assemblyKey)', 'static Assembly'),
  \ dotnet#method('GetAssemblyNameAndPart(', 'class Uri uri, [out] string& partName, [out] string& assemblyName, [out] string& assemblyVersion, [out] string& assemblyKey)', 'static void'),
  \ dotnet#method('IsComponentEntryAssembly(', 'string component)', 'static bool'),
  \ dotnet#method('GetResolvedUri(', 'class Uri baseUri, Uri orgUri)', 'static Uri'),
  \ dotnet#method('MakeRelativeToSiteOfOriginIfPossible(', 'class Uri sUri)', 'static Uri'),
  \ dotnet#method('ConvertPackUriToAbsoluteExternallyVisibleUri(', 'class Uri packUri)', 'static Uri'),
  \ dotnet#method('FixFileUri(', 'class Uri uri)', 'static Uri'),
  \ dotnet#method('get_BaseUri(', ')', 'static Uri'),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'static void'),
  \ dotnet#method('get_ResourceAssembly(', ')', 'static'),
  \ dotnet#method('set_ResourceAssembly(', 'class Assembly value)', 'static void'),
  \ dotnet#method('GetBaseUriCore(', 'class DependencyObject element)', 'static Uri'),
  \ dotnet#method('BaseUriHelper(', ')', 'static void .'),
  \ dotnet#prop('SiteOfOriginBaseUri', 'Uri'),
  \ dotnet#prop('PackAppBaseUri', 'Uri'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('ResourceAssembly', 'Assembly'),
  \ ])

call dotnet#class('JournalEntry', 'DependencyObject', [ 
  \ dotnet#method('JournalEntry(', 'class JournalEntryGroupState jeGroupState, Uri uri)', 'void'),
  \ dotnet#method('JournalEntry(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetName(', 'class DependencyObject dependencyObject)', 'static string'),
  \ dotnet#method('SetName(', 'class DependencyObject dependencyObject, string name)', 'static void'),
  \ dotnet#method('GetKeepAlive(', 'class DependencyObject dependencyObject)', 'static bool'),
  \ dotnet#method('SetKeepAlive(', 'class DependencyObject dependencyObject, bool keepAlive)', 'static void'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('get_CustomContentState(', ')', 'CustomContentState'),
  \ dotnet#method('set_CustomContentState(', 'class CustomContentState value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('IsPageFunction(', ')', 'strict bool'),
  \ dotnet#method('IsAlive(', ')', 'strict bool'),
  \ dotnet#method('SaveState(', 'object contentObject)', 'strict void'),
  \ dotnet#method('RestoreState(', 'object contentObject)', 'strict void'),
  \ dotnet#method('Navigate(', 'class INavigator navigator, NavigationMode navMode)', 'strict bool'),
  \ dotnet#method('GetDisplayName(', 'class Uri uri, Uri siteOfOrigin)', 'static string'),
  \ dotnet#method('get_JEGroupState(', ')', '.method'),
  \ dotnet#method('set_JEGroupState(', 'class JournalEntryGroupState value)', 'void'),
  \ dotnet#method('get_Id(', ')', 'int32'),
  \ dotnet#method('set_Id(', 'int32 value)', 'void'),
  \ dotnet#method('get_NavigationServiceId(', ')', '.method'),
  \ dotnet#method('get_EntryType(', ')', '.method'),
  \ dotnet#method('set_EntryType(', 'JournalEntryType value)', 'void'),
  \ dotnet#method('IsNavigable(', ')', 'bool'),
  \ dotnet#method('get_ContentId(', ')', 'uint32'),
  \ dotnet#method('get_RootViewerState(', ')', '.method'),
  \ dotnet#method('set_RootViewerState(', 'class CustomJournalStateInternal value)', 'void'),
  \ dotnet#method('JournalEntry(', ')', 'static void .'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('CustomContentState', 'CustomContentState'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('JEGroupState', 'JournalEntryGroupState'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('NavigationServiceId', 'Guid'),
  \ dotnet#prop('EntryType', 'JournalEntryType'),
  \ dotnet#prop('ContentId', 'uint32'),
  \ dotnet#prop('RootViewerState', 'CustomJournalStateInternal'),
  \ ])

call dotnet#class('NavigationWindow', 'Window', [ 
  \ dotnet#method('get_SandboxExternalContent(', ')', 'bool'),
  \ dotnet#method('set_SandboxExternalContent(', 'bool value)', 'void'),
  \ dotnet#method('NavigationWindow(', ')', 'void'),
  \ dotnet#method('NavigationWindow(', 'bool inRbw)', 'void'),
  \ dotnet#method('get_Downloader(', ')', ''),
  \ dotnet#method('Navigate(', 'class Uri source)', 'bool'),
  \ dotnet#method('Navigate(', 'class Uri source, object extraData)', 'bool'),
  \ dotnet#method('Navigate(', 'object content)', 'bool'),
  \ dotnet#method('Navigate(', 'object content, object extraData)', 'bool'),
  \ dotnet#method('GetJournal(', 'bool create)', ''),
  \ dotnet#method('GoForward(', ')', 'void'),
  \ dotnet#method('GoBack(', ')', 'void'),
  \ dotnet#method('StopLoading(', ')', 'void'),
  \ dotnet#method('Refresh(', ')', 'void'),
  \ dotnet#method('AddBackEntry(', 'class CustomContentState state)', 'void'),
  \ dotnet#method('RemoveBackEntry(', ')', ''),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('ShouldSerializeContent(', ')', 'bool'),
  \ dotnet#method('get_NavigationService(', ')', 'NavigationService'),
  \ dotnet#method('get_BackStack(', ')', ''),
  \ dotnet#method('get_ForwardStack(', ')', ''),
  \ dotnet#method('get_ShowsNavigationUI(', ')', 'bool'),
  \ dotnet#method('set_ShowsNavigationUI(', 'bool value)', 'void'),
  \ dotnet#method('OnSourceUpdatedFromNavService(', 'bool journalOrCancel)', 'void '),
  \ dotnet#method('get_Source(', ')', ''),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('get_CurrentSource(', ')', ''),
  \ dotnet#method('get_CanGoForward(', ')', 'bool'),
  \ dotnet#method('get_CanGoBack(', ')', 'bool'),
  \ dotnet#method('add_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationProgress(', 'class NavigationProgressEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationProgress(', 'class NavigationProgressEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationFailed(', 'class NavigationFailedEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationFailed(', 'class NavigationFailedEventHandler value)', 'void'),
  \ dotnet#method('add_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('add_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationStopped(', 'class NavigationStoppedEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationStopped(', 'class NavigationStoppedEventHandler value)', 'void'),
  \ dotnet#method('add_FragmentNavigation(', 'class FragmentNavigationEventHandler value)', 'void'),
  \ dotnet#method('remove_FragmentNavigation(', 'class FragmentNavigationEventHandler value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('AddChild(', 'object value)', 'void'),
  \ dotnet#method('AddText(', 'string text)', 'void'),
  \ dotnet#method('OnClosed(', 'class EventArgs args)', 'void'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('VerifyContextAndObjectState(', ')', 'void '),
  \ dotnet#method('OnJournalAvailable(', ')', 'void '),
  \ dotnet#method('GoBackOverride(', ')', 'bool '),
  \ dotnet#method('GoForwardOverride(', ')', 'bool '),
  \ dotnet#method('get_NavigationService(', ')', ''),
  \ dotnet#method('FindRootViewer(', ')', ''),
  \ dotnet#method('get_Journal(', ')', '.method'),
  \ dotnet#method('get_JournalNavigationScope(', ')', '.method'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('NavigationWindow(', ')', 'static void .'),
  \ dotnet#event('Navigating', 'NavigatingCancelEventHandler'),
  \ dotnet#event('NavigationProgress', 'NavigationProgressEventHandler'),
  \ dotnet#event('NavigationFailed', 'NavigationFailedEventHandler'),
  \ dotnet#event('Navigated', 'NavigatedEventHandler'),
  \ dotnet#event('LoadCompleted', 'LoadCompletedEventHandler'),
  \ dotnet#event('NavigationStopped', 'NavigationStoppedEventHandler'),
  \ dotnet#event('FragmentNavigation', 'FragmentNavigationEventHandler'),
  \ dotnet#prop('SandboxExternalContent', 'bool'),
  \ dotnet#prop('Downloader', 'NavigationService'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('NavigationService', 'NavigationService'),
  \ dotnet#prop('BackStack', 'IEnumerable'),
  \ dotnet#prop('ForwardStack', 'IEnumerable'),
  \ dotnet#prop('ShowsNavigationUI', 'bool'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('CurrentSource', 'Uri'),
  \ dotnet#prop('CanGoForward', 'bool'),
  \ dotnet#prop('CanGoBack', 'bool'),
  \ dotnet#prop('NavigationService', 'NavigationService'),
  \ dotnet#prop('Journal', 'Journal'),
  \ dotnet#prop('JournalNavigationScope', 'JournalNavigationScope'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('CustomContentState', 'Object', [ 
  \ dotnet#method('get_JournalEntryName(', ')', 'string'),
  \ dotnet#method('Replay(', 'class NavigationService navigationService, NavigationMode mode)', 'abstract void'),
  \ dotnet#method('CustomContentState(', ')', 'void'),
  \ dotnet#prop('JournalEntryName', 'string'),
  \ ])

call dotnet#class('FragmentNavigationEventArgs', 'EventArgs', [ 
  \ dotnet#method('FragmentNavigationEventArgs(', 'string fragment, object Navigator)', 'void'),
  \ dotnet#method('get_Fragment(', ')', 'string'),
  \ dotnet#method('get_Handled(', ')', 'bool'),
  \ dotnet#method('set_Handled(', 'bool value)', 'void'),
  \ dotnet#method('get_Navigator(', ')', 'object'),
  \ dotnet#prop('Fragment', 'string'),
  \ dotnet#prop('Handled', 'bool'),
  \ dotnet#prop('Navigator', 'object'),
  \ ])

call dotnet#class('JournalEntryListConverter', 'Object', [ 
  \ dotnet#method('Convert(', 'object value, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('ConvertBack(', 'object value, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('JournalEntryListConverter(', ')', 'void'),
  \ ])

call dotnet#class('JournalEntryUnifiedViewConverter', 'Object', [ 
  \ dotnet#method('GetJournalEntryPosition(', 'class DependencyObject element)', 'static JournalEntryPosition'),
  \ dotnet#method('SetJournalEntryPosition(', 'class DependencyObject element, JournalEntryPosition position)', 'static void'),
  \ dotnet#method('Convert(', 'object[] values, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('ConvertBack(', 'object value, Type[] targetTypes, object parameter, CultureInfo culture)', 'object[]'),
  \ dotnet#method('JournalEntryUnifiedViewConverter(', ')', 'void'),
  \ dotnet#method('JournalEntryUnifiedViewConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('NavigatingCancelEventArgs', 'CancelEventArgs', [ 
  \ dotnet#method('NavigatingCancelEventArgs(', 'class Uri uri, object content, CustomContentState customContentState, object extraData, NavigationMode navigationMode, WebRequest request, object Navigator, bool isNavInitiator)', 'void'),
  \ dotnet#method('get_Uri(', ')', 'Uri'),
  \ dotnet#method('get_Content(', ')', 'object'),
  \ dotnet#method('get_TargetContentState(', ')', 'CustomContentState'),
  \ dotnet#method('set_ContentStateToSave(', 'class CustomContentState value)', 'void'),
  \ dotnet#method('get_ContentStateToSave(', ')', 'CustomContentState'),
  \ dotnet#method('get_ExtraData(', ')', 'object'),
  \ dotnet#method('get_NavigationMode(', ')', 'NavigationMode'),
  \ dotnet#method('get_WebRequest(', ')', 'WebRequest'),
  \ dotnet#method('get_IsNavigationInitiator(', ')', 'bool'),
  \ dotnet#method('get_Navigator(', ')', 'object'),
  \ dotnet#prop('Uri', 'Uri'),
  \ dotnet#prop('Content', 'object'),
  \ dotnet#prop('TargetContentState', 'CustomContentState'),
  \ dotnet#prop('ContentStateToSave', 'CustomContentState'),
  \ dotnet#prop('ExtraData', 'object'),
  \ dotnet#prop('NavigationMode', 'NavigationMode'),
  \ dotnet#prop('WebRequest', 'WebRequest'),
  \ dotnet#prop('IsNavigationInitiator', 'bool'),
  \ dotnet#prop('Navigator', 'object'),
  \ ])

call dotnet#class('NavigationEventArgs', 'EventArgs', [ 
  \ dotnet#method('NavigationEventArgs(', 'class Uri uri, object content, object extraData, WebResponse response, object Navigator, bool isNavigationInitiator)', 'void'),
  \ dotnet#method('get_Uri(', ')', 'Uri'),
  \ dotnet#method('get_Content(', ')', 'object'),
  \ dotnet#method('get_IsNavigationInitiator(', ')', 'bool'),
  \ dotnet#method('get_ExtraData(', ')', 'object'),
  \ dotnet#method('get_WebResponse(', ')', 'WebResponse'),
  \ dotnet#method('get_Navigator(', ')', 'object'),
  \ dotnet#prop('Uri', 'Uri'),
  \ dotnet#prop('Content', 'object'),
  \ dotnet#prop('IsNavigationInitiator', 'bool'),
  \ dotnet#prop('ExtraData', 'object'),
  \ dotnet#prop('WebResponse', 'WebResponse'),
  \ dotnet#prop('Navigator', 'object'),
  \ ])

call dotnet#class('NavigationFailedEventArgs', 'EventArgs', [ 
  \ dotnet#method('NavigationFailedEventArgs(', 'class Uri uri, object extraData, object navigator, WebRequest request, WebResponse response, Exception e)', 'void'),
  \ dotnet#method('get_Uri(', ')', 'Uri'),
  \ dotnet#method('get_ExtraData(', ')', 'object'),
  \ dotnet#method('get_Navigator(', ')', 'object'),
  \ dotnet#method('get_WebRequest(', ')', 'WebRequest'),
  \ dotnet#method('get_WebResponse(', ')', 'WebResponse'),
  \ dotnet#method('get_Exception(', ')', 'Exception'),
  \ dotnet#method('get_Handled(', ')', 'bool'),
  \ dotnet#method('set_Handled(', 'bool value)', 'void'),
  \ dotnet#prop('Uri', 'Uri'),
  \ dotnet#prop('ExtraData', 'object'),
  \ dotnet#prop('Navigator', 'object'),
  \ dotnet#prop('WebRequest', 'WebRequest'),
  \ dotnet#prop('WebResponse', 'WebResponse'),
  \ dotnet#prop('Exception', 'Exception'),
  \ dotnet#prop('Handled', 'bool'),
  \ ])

call dotnet#class('NavigationProgressEventArgs', 'EventArgs', [ 
  \ dotnet#method('NavigationProgressEventArgs(', 'class Uri uri, int64 bytesRead, int64 maxBytes, object Navigator)', 'void'),
  \ dotnet#method('get_Uri(', ')', 'Uri'),
  \ dotnet#method('get_BytesRead(', ')', 'int64'),
  \ dotnet#method('get_MaxBytes(', ')', 'int64'),
  \ dotnet#method('get_Navigator(', ')', 'object'),
  \ dotnet#prop('Uri', 'Uri'),
  \ dotnet#prop('BytesRead', 'int64'),
  \ dotnet#prop('MaxBytes', 'int64'),
  \ dotnet#prop('Navigator', 'object'),
  \ ])

call dotnet#class('NavigationService', 'Object', [ 
  \ dotnet#method('NavigationService(', 'class INavigator nav)', 'void'),
  \ dotnet#method('FindTargetInApplication(', 'string targetName)', 'static INavigatorBase'),
  \ dotnet#method('InvalidateJournalNavigationScope(', ')', 'void'),
  \ dotnet#method('OnParentNavigationServiceChanged(', ')', 'void'),
  \ dotnet#method('AddChild(', 'class NavigationService ncChild)', 'void'),
  \ dotnet#method('RemoveChild(', 'class NavigationService ncChild)', 'void'),
  \ dotnet#method('FindTarget(', 'Guid navigationServiceId)', 'NavigationService'),
  \ dotnet#method('FindTarget(', 'string name)', 'INavigatorBase'),
  \ dotnet#method('IsContentKeepAlive(', ')', 'bool'),
  \ dotnet#method('VisualTreeAvailable(', 'class Visual v)', 'void'),
  \ dotnet#method('OnContentReady(', 'class ContentType contentType, object bp, Uri bpu, object navState)', 'void '),
  \ dotnet#method('OnNavigationProgress(', 'class Uri sourceUri, int64 bytesRead, int64 maxBytes)', 'void '),
  \ dotnet#method('OnStreamClosed(', 'class Uri sourceUri)', 'void '),
  \ dotnet#method('GetNavigationService(', 'class DependencyObject dependencyObject)', 'static NavigationService'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('get_CurrentSource(', ')', 'Uri'),
  \ dotnet#method('get_Content(', ')', 'object'),
  \ dotnet#method('set_Content(', 'object value)', 'void'),
  \ dotnet#method('AddBackEntry(', 'class CustomContentState state)', 'void'),
  \ dotnet#method('RemoveBackEntry(', ')', 'JournalEntry'),
  \ dotnet#method('Navigate(', 'class Uri source)', 'bool'),
  \ dotnet#method('Navigate(', 'object root)', 'bool'),
  \ dotnet#method('Navigate(', 'class Uri source, object navigationState)', 'bool'),
  \ dotnet#method('Navigate(', 'class Uri source, object navigationState, bool sandboxExternalContent)', 'bool'),
  \ dotnet#method('Navigate(', 'class Uri source, object navigationState, bool sandboxExternalContent, bool navigateOnSourceChanged)', 'bool'),
  \ dotnet#method('Navigate(', 'object root, object navigationState)', 'bool'),
  \ dotnet#method('get_CanGoForward(', ')', 'bool'),
  \ dotnet#method('get_CanGoBack(', ')', 'bool'),
  \ dotnet#method('GoForward(', ')', 'void'),
  \ dotnet#method('GoBack(', ')', 'void'),
  \ dotnet#method('StopLoading(', ')', 'void'),
  \ dotnet#method('Refresh(', ')', 'void'),
  \ dotnet#method('add_NavigationFailed(', 'class NavigationFailedEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationFailed(', 'class NavigationFailedEventHandler value)', 'void'),
  \ dotnet#method('add_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('add_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationProgress(', 'class NavigationProgressEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationProgress(', 'class NavigationProgressEventHandler value)', 'void'),
  \ dotnet#method('add_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('add_FragmentNavigation(', 'class FragmentNavigationEventHandler value)', 'void'),
  \ dotnet#method('remove_FragmentNavigation(', 'class FragmentNavigationEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationStopped(', 'class NavigationStoppedEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationStopped(', 'class NavigationStoppedEventHandler value)', 'void'),
  \ dotnet#method('DoNavigate(', 'class Uri source, NavigationMode f, object navState)', 'void'),
  \ dotnet#method('DoNavigate(', 'object bp, NavigationMode navFlags, object navState)', 'void'),
  \ dotnet#method('MakeJournalEntry(', 'JournalReason journalReason)', 'JournalEntry'),
  \ dotnet#method('RequestCustomContentStateOnAppShutdown(', ')', 'void'),
  \ dotnet#method('CallUpdateTravelLog(', 'bool addNewEntry)', 'void'),
  \ dotnet#method('get_Application(', ')', '.method'),
  \ dotnet#method('set_AllowWindowNavigation(', 'bool value)', 'void'),
  \ dotnet#method('get_BytesRead(', ')', 'int64'),
  \ dotnet#method('set_BytesRead(', 'int64 value)', 'void'),
  \ dotnet#method('get_MaxBytes(', ')', 'int64'),
  \ dotnet#method('set_MaxBytes(', 'int64 value)', 'void'),
  \ dotnet#method('get_ContentId(', ')', 'uint32'),
  \ dotnet#method('get_GuidId(', ')', '.method'),
  \ dotnet#method('set_GuidId(', 'Guid value)', 'void'),
  \ dotnet#method('get_ParentNavigationService(', ')', '.method'),
  \ dotnet#method('get_CanReloadFromUri(', ')', 'bool'),
  \ dotnet#method('get_ChildNavigationServices(', ')', '.method'),
  \ dotnet#method('get_INavigatorHost(', ')', '.method'),
  \ dotnet#method('set_INavigatorHost(', 'class INavigator value)', 'void'),
  \ dotnet#method('get_NavStatus(', ')', '.method'),
  \ dotnet#method('set_NavStatus(', 'NavigationStatus value)', 'void'),
  \ dotnet#method('get_PendingNavigationList(', ')', '.method'),
  \ dotnet#method('get_WebBrowser(', ')', '.method'),
  \ dotnet#method('get_IsDisposed(', ')', 'bool'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('IsPageFunction(', 'object content)', 'static bool'),
  \ dotnet#method('add_BPReady(', 'class BPReadyEventHandler value)', 'void'),
  \ dotnet#method('remove_BPReady(', 'class BPReadyEventHandler value)', 'void'),
  \ dotnet#method('add_PreBPReady(', 'class BPReadyEventHandler value)', 'void'),
  \ dotnet#method('remove_PreBPReady(', 'class BPReadyEventHandler value)', 'void'),
  \ dotnet#method('get_AllowWindowNavigation(', ')', 'bool'),
  \ dotnet#method('NavigationService(', ')', 'static void .'),
  \ dotnet#event('NavigationFailed', 'NavigationFailedEventHandler'),
  \ dotnet#event('Navigating', 'NavigatingCancelEventHandler'),
  \ dotnet#event('Navigated', 'NavigatedEventHandler'),
  \ dotnet#event('NavigationProgress', 'NavigationProgressEventHandler'),
  \ dotnet#event('LoadCompleted', 'LoadCompletedEventHandler'),
  \ dotnet#event('FragmentNavigation', 'FragmentNavigationEventHandler'),
  \ dotnet#event('NavigationStopped', 'NavigationStoppedEventHandler'),
  \ dotnet#event('BPReady', 'BPReadyEventHandler'),
  \ dotnet#event('PreBPReady', 'BPReadyEventHandler'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('CurrentSource', 'Uri'),
  \ dotnet#prop('Content', 'object'),
  \ dotnet#prop('CanGoForward', 'bool'),
  \ dotnet#prop('CanGoBack', 'bool'),
  \ dotnet#prop('Application', 'Application'),
  \ dotnet#prop('AllowWindowNavigation', 'bool'),
  \ dotnet#prop('BytesRead', 'int64'),
  \ dotnet#prop('MaxBytes', 'int64'),
  \ dotnet#prop('ContentId', 'uint32'),
  \ dotnet#prop('GuidId', 'Guid'),
  \ dotnet#prop('ParentNavigationService', 'NavigationService'),
  \ dotnet#prop('CanReloadFromUri', 'bool'),
  \ dotnet#prop('ChildNavigationServices', 'ArrayList'),
  \ dotnet#prop('INavigatorHost', 'INavigator'),
  \ dotnet#prop('NavStatus', 'NavigationStatus'),
  \ dotnet#prop('PendingNavigationList', 'ArrayList'),
  \ dotnet#prop('WebBrowser', 'WebBrowser'),
  \ dotnet#prop('IsDisposed', 'bool'),
  \ ])

call dotnet#class('NavigatingCancelEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('NavigatingCancelEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, NavigatingCancelEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, NavigatingCancelEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('NavigationProgressEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('NavigationProgressEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, NavigationProgressEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, NavigationProgressEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('NavigationFailedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('NavigationFailedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, NavigationFailedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, NavigationFailedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('NavigatedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('NavigatedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, NavigationEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, NavigationEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('LoadCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('LoadCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, NavigationEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, NavigationEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('NavigationStoppedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('NavigationStoppedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, NavigationEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, NavigationEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('FragmentNavigationEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('FragmentNavigationEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, FragmentNavigationEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, FragmentNavigationEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('PageFunctionBase', 'Page', [ 
  \ dotnet#method('PageFunctionBase(', ')', 'void'),
  \ dotnet#method('get_RemoveFromJournal(', ')', 'bool'),
  \ dotnet#method('set_RemoveFromJournal(', 'bool value)', 'void'),
  \ dotnet#method('Start(', ')', 'void'),
  \ dotnet#method('CallStart(', ')', 'void'),
  \ dotnet#method('_OnReturnUnTyped(', 'object o)', 'void'),
  \ dotnet#method('_AddEventHandler(', 'class Delegate d)', 'void'),
  \ dotnet#method('_RemoveEventHandler(', 'class Delegate d)', 'void'),
  \ dotnet#method('_DetachEvents(', ')', 'void'),
  \ dotnet#method('_OnFinish(', 'object returnEventArgs)', 'void'),
  \ dotnet#method('get_PageFunctionId(', ')', '.method'),
  \ dotnet#method('set_PageFunctionId(', 'Guid value)', 'void'),
  \ dotnet#method('get_ParentPageFunctionId(', ')', '.method'),
  \ dotnet#method('set_ParentPageFunctionId(', 'Guid value)', 'void'),
  \ dotnet#method('get__Return(', ')', '.method'),
  \ dotnet#method('get__Resume(', ')', 'bool'),
  \ dotnet#method('set__Resume(', 'bool value)', 'void'),
  \ dotnet#method('get__Saver(', ')', '.method'),
  \ dotnet#method('set__Saver(', 'class ReturnEventSaver value)', 'void'),
  \ dotnet#method('get_FinishHandler(', ')', '.method'),
  \ dotnet#method('set_FinishHandler(', 'class FinishEventHandler value)', 'void'),
  \ dotnet#method('add_RaiseTypedEvent(', 'class EventToRaiseTypedEvent value)', 'void'),
  \ dotnet#method('remove_RaiseTypedEvent(', 'class EventToRaiseTypedEvent value)', 'void'),
  \ dotnet#event('RaiseTypedEvent', 'EventToRaiseTypedEvent'),
  \ dotnet#prop('RemoveFromJournal', 'bool'),
  \ dotnet#prop('PageFunctionId', 'Guid'),
  \ dotnet#prop('ParentPageFunctionId', 'Guid'),
  \ dotnet#prop('_Return', 'Delegate'),
  \ dotnet#prop('_Resume', 'bool'),
  \ dotnet#prop('_Saver', 'ReturnEventSaver'),
  \ dotnet#prop('FinishHandler', 'FinishEventHandler'),
  \ ])

call dotnet#class('ReturnEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ReturnEventHandler`1(', 'object object, int method)', 'void ReturnEventHandler`'),
  \ dotnet#method('Invoke(', 'object sender, ReturnEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ReturnEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('PageFunction', 'PageFunctionBase', [ 
  \ dotnet#method('PageFunction`1(', ')', 'void PageFunction`'),
  \ dotnet#method('OnReturn(', 'class ReturnEventArgs e)', 'void'),
  \ dotnet#method('RaiseTypedReturnEvent(', 'class PageFunctionBase b, RaiseTypedEventArgs args)', 'void'),
  \ dotnet#method('add_Return(', 'class ReturnEventHandler value)', 'void'),
  \ dotnet#method('remove_Return(', 'class ReturnEventHandler value)', 'void'),
  \ dotnet#event('Return', 'ReturnEventHandler'),
  \ ])

call dotnet#class('RequestNavigateEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('RequestNavigateEventArgs(', ')', 'void'),
  \ dotnet#method('RequestNavigateEventArgs(', 'class Uri uri, string target)', 'void'),
  \ dotnet#method('get_Uri(', ')', 'Uri'),
  \ dotnet#method('get_Target(', ')', 'string'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Uri', 'Uri'),
  \ dotnet#prop('Target', 'string'),
  \ ])

call dotnet#class('RequestNavigateEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('RequestNavigateEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, RequestNavigateEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, RequestNavigateEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ReturnEventArgs', 'EventArgs', [ 
  \ dotnet#method('ReturnEventArgs`1(', ')', 'void ReturnEventArgs`'),
  \ dotnet#method('ReturnEventArgs`1(', '!T result)', 'void ReturnEventArgs`'),
  \ dotnet#method('get_Result(', ')', '!T'),
  \ dotnet#method('set_Result(', '!T value)', 'void'),
  \ dotnet#prop('Result', '!T'),
  \ ])

