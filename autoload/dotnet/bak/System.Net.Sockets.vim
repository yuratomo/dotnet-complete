call dotnet#namespace('System.Net.Sockets')

call dotnet#class('SocketException', 'Win32Exception', [ 
  \ dotnet#method('SocketException(', ')', 'void'),
  \ dotnet#method('SocketException(', 'int32 errorCode)', 'void'),
  \ dotnet#method('SocketException(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_ErrorCode(', ')', 'int32'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_SocketErrorCode(', ')', 'SocketError'),
  \ dotnet#prop('ErrorCode', 'int32'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('SocketErrorCode', 'SocketError'),
  \ ])

call dotnet#class('NetworkStream', 'Stream', [ 
  \ dotnet#method('NetworkStream(', 'class Socket socket)', 'void'),
  \ dotnet#method('NetworkStream(', 'class Socket socket, bool ownsSocket)', 'void'),
  \ dotnet#method('NetworkStream(', 'class Socket socket, FileAccess access)', 'void'),
  \ dotnet#method('NetworkStream(', 'class Socket socket, FileAccess access, bool ownsSocket)', 'void'),
  \ dotnet#method('get_Socket(', ')', 'Socket'),
  \ dotnet#method('get_Readable(', ')', 'bool'),
  \ dotnet#method('set_Readable(', 'bool value)', 'void'),
  \ dotnet#method('get_Writeable(', ')', 'bool'),
  \ dotnet#method('set_Writeable(', 'bool value)', 'void'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('get_CanTimeout(', ')', 'bool'),
  \ dotnet#method('get_ReadTimeout(', ')', 'int32'),
  \ dotnet#method('set_ReadTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_WriteTimeout(', ')', 'int32'),
  \ dotnet#method('set_WriteTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_DataAvailable(', ')', 'bool'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin origin)', 'int64'),
  \ dotnet#method('Read(', '[in][out] uint8[] buffer, int32 offset, int32 size)', 'int32'),
  \ dotnet#method('Write(', 'uint8[] buffer, int32 offset, int32 size)', 'void'),
  \ dotnet#method('Close(', 'int32 timeout)', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('BeginRead(', 'uint8[] buffer, int32 offset, int32 size, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndRead(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('BeginWrite(', 'uint8[] buffer, int32 offset, int32 size, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndWrite(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('SetLength(', 'int64 value)', 'void'),
  \ dotnet#method('NetworkStream(', ')', 'void'),
  \ dotnet#prop('Socket', 'Socket'),
  \ dotnet#prop('Readable', 'bool'),
  \ dotnet#prop('Writeable', 'bool'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('CanTimeout', 'bool'),
  \ dotnet#prop('ReadTimeout', 'int32'),
  \ dotnet#prop('WriteTimeout', 'int32'),
  \ dotnet#prop('DataAvailable', 'bool'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ ])

call dotnet#class('LingerOption', 'Object', [ 
  \ dotnet#method('LingerOption(', 'bool enable, int32 seconds)', 'void'),
  \ dotnet#method('get_Enabled(', ')', 'bool'),
  \ dotnet#method('set_Enabled(', 'bool value)', 'void'),
  \ dotnet#method('get_LingerTime(', ')', 'int32'),
  \ dotnet#method('set_LingerTime(', 'int32 value)', 'void'),
  \ dotnet#prop('Enabled', 'bool'),
  \ dotnet#prop('LingerTime', 'int32'),
  \ ])

call dotnet#class('MulticastOption', 'Object', [ 
  \ dotnet#method('MulticastOption(', 'class IPAddress group, IPAddress mcint)', 'void'),
  \ dotnet#method('MulticastOption(', 'class IPAddress group, int32 interfaceIndex)', 'void'),
  \ dotnet#method('MulticastOption(', 'class IPAddress group)', 'void'),
  \ dotnet#method('get_Group(', ')', 'IPAddress'),
  \ dotnet#method('set_Group(', 'class IPAddress value)', 'void'),
  \ dotnet#method('get_LocalAddress(', ')', 'IPAddress'),
  \ dotnet#method('set_LocalAddress(', 'class IPAddress value)', 'void'),
  \ dotnet#method('get_InterfaceIndex(', ')', 'int32'),
  \ dotnet#method('set_InterfaceIndex(', 'int32 value)', 'void'),
  \ dotnet#prop('Group', 'IPAddress'),
  \ dotnet#prop('LocalAddress', 'IPAddress'),
  \ dotnet#prop('InterfaceIndex', 'int32'),
  \ ])

call dotnet#class('IPv6MulticastOption', 'Object', [ 
  \ dotnet#method('IPv6MulticastOption(', 'class IPAddress group, int64 ifindex)', 'void'),
  \ dotnet#method('IPv6MulticastOption(', 'class IPAddress group)', 'void'),
  \ dotnet#method('get_Group(', ')', 'IPAddress'),
  \ dotnet#method('set_Group(', 'class IPAddress value)', 'void'),
  \ dotnet#method('get_InterfaceIndex(', ')', 'int64'),
  \ dotnet#method('set_InterfaceIndex(', 'int64 value)', 'void'),
  \ dotnet#prop('Group', 'IPAddress'),
  \ dotnet#prop('InterfaceIndex', 'int64'),
  \ ])

call dotnet#class('SocketInformation', 'ValueType', [ 
  \ dotnet#field('protocolInformation', 'uint8[]'),
  \ dotnet#field('options', 'SocketInformationOptions'),
  \ dotnet#field('remoteEndPoint', 'EndPoint'),
  \ dotnet#method('get_ProtocolInformation(', ')', 'uint8[]'),
  \ dotnet#method('set_ProtocolInformation(', 'uint8[] value)', 'void'),
  \ dotnet#method('get_Options(', ')', 'SocketInformationOptions'),
  \ dotnet#method('set_Options(', 'SocketInformationOptions value)', 'void'),
  \ dotnet#prop('ProtocolInformation', 'uint8[]'),
  \ dotnet#prop('Options', 'SocketInformationOptions'),
  \ ])

call dotnet#class('Socket', 'Object', [ 
  \ dotnet#method('Socket(', 'AddressaddressFamily, SocketType socketType, ProtocolType protocolType)', 'void'),
  \ dotnet#method('Socket(', 'SocketInformation socketInformation)', 'void'),
  \ dotnet#method('get_SupportsIPv4(', ')', 'static bool'),
  \ dotnet#method('get_OSSupportsIPv4(', ')', 'static bool'),
  \ dotnet#method('get_SupportsIPv6(', ')', 'static bool'),
  \ dotnet#method('get_OSSupportsIPv6(', ')', 'static bool'),
  \ dotnet#method('get_Available(', ')', 'int32'),
  \ dotnet#method('get_LocalEndPoint(', ')', 'EndPoint'),
  \ dotnet#method('get_RemoteEndPoint(', ')', 'EndPoint'),
  \ dotnet#method('get_Handle(', ')', 'int'),
  \ dotnet#method('get_Blocking(', ')', 'bool'),
  \ dotnet#method('set_Blocking(', 'bool value)', 'void'),
  \ dotnet#method('get_UseOnlyOverlappedIO(', ')', 'bool'),
  \ dotnet#method('set_UseOnlyOverlappedIO(', 'bool value)', 'void'),
  \ dotnet#method('get_Connected(', ')', 'bool'),
  \ dotnet#method('get_AddressFamily(', ')', 'AddressFamily'),
  \ dotnet#method('get_SocketType(', ')', 'SocketType'),
  \ dotnet#method('get_ProtocolType(', ')', 'ProtocolType'),
  \ dotnet#method('get_IsBound(', ')', 'bool'),
  \ dotnet#method('get_ExclusiveAddressUse(', ')', 'bool'),
  \ dotnet#method('set_ExclusiveAddressUse(', 'bool value)', 'void'),
  \ dotnet#method('get_ReceiveBufferSize(', ')', 'int32'),
  \ dotnet#method('set_ReceiveBufferSize(', 'int32 value)', 'void'),
  \ dotnet#method('get_SendBufferSize(', ')', 'int32'),
  \ dotnet#method('set_SendBufferSize(', 'int32 value)', 'void'),
  \ dotnet#method('get_ReceiveTimeout(', ')', 'int32'),
  \ dotnet#method('set_ReceiveTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_SendTimeout(', ')', 'int32'),
  \ dotnet#method('set_SendTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_LingerState(', ')', 'LingerOption'),
  \ dotnet#method('set_LingerState(', 'class LingerOption value)', 'void'),
  \ dotnet#method('get_NoDelay(', ')', 'bool'),
  \ dotnet#method('set_NoDelay(', 'bool value)', 'void'),
  \ dotnet#method('get_Ttl(', ')', 'int16'),
  \ dotnet#method('set_Ttl(', 'int16 value)', 'void'),
  \ dotnet#method('get_DontFragment(', ')', 'bool'),
  \ dotnet#method('set_DontFragment(', 'bool value)', 'void'),
  \ dotnet#method('get_MulticastLoopback(', ')', 'bool'),
  \ dotnet#method('set_MulticastLoopback(', 'bool value)', 'void'),
  \ dotnet#method('get_EnableBroadcast(', ')', 'bool'),
  \ dotnet#method('set_EnableBroadcast(', 'bool value)', 'void'),
  \ dotnet#method('Bind(', 'class EndPoint localEP)', 'void'),
  \ dotnet#method('Connect(', 'class EndPoint remoteEP)', 'void'),
  \ dotnet#method('Connect(', 'class IPAddress address, int32 port)', 'void'),
  \ dotnet#method('Connect(', 'string host, int32 port)', 'void'),
  \ dotnet#method('Connect(', 'class IPAddress[] addresses, int32 port)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Close(', 'int32 timeout)', 'void'),
  \ dotnet#method('Listen(', 'int32 backlog)', 'void'),
  \ dotnet#method('Accept(', ')', 'Socket'),
  \ dotnet#method('Send(', 'uint8[] buffer, int32 size, SocketFlags socketFlags)', 'int32'),
  \ dotnet#method('Send(', 'uint8[] buffer, SocketFlags socketFlags)', 'int32'),
  \ dotnet#method('Send(', 'uint8[] buffer)', 'int32'),
  \ dotnet#method('Send(', 'class IList buffers)', 'int32'),
  \ dotnet#method('Send(', 'class IList buffers, SocketFlags socketFlags)', 'int32'),
  \ dotnet#method('Send(', 'class IList buffers, SocketFlags socketFlags, [out] SocketError& errorCode)', 'int32'),
  \ dotnet#method('SendFile(', 'string fileName)', 'void'),
  \ dotnet#method('SendFile(', 'string fileName, uint8[] preBuffer, uint8[] postBuffer, TransmitFileOptions flags)', 'void'),
  \ dotnet#method('Send(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags)', 'int32'),
  \ dotnet#method('Send(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, [out] SocketError& errorCode)', 'int32'),
  \ dotnet#method('SendTo(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, EndPoint remoteEP)', 'int32'),
  \ dotnet#method('SendTo(', 'uint8[] buffer, int32 size, SocketFlags socketFlags, EndPoint remoteEP)', 'int32'),
  \ dotnet#method('SendTo(', 'uint8[] buffer, SocketFlags socketFlags, EndPoint remoteEP)', 'int32'),
  \ dotnet#method('SendTo(', 'uint8[] buffer, EndPoint remoteEP)', 'int32'),
  \ dotnet#method('Receive(', 'uint8[] buffer, int32 size, SocketFlags socketFlags)', 'int32'),
  \ dotnet#method('Receive(', 'uint8[] buffer, SocketFlags socketFlags)', 'int32'),
  \ dotnet#method('Receive(', 'uint8[] buffer)', 'int32'),
  \ dotnet#method('Receive(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags)', 'int32'),
  \ dotnet#method('Receive(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, [out] SocketError& errorCode)', 'int32'),
  \ dotnet#method('Receive(', 'class IList buffers)', 'int32'),
  \ dotnet#method('Receive(', 'class IList buffers, SocketFlags socketFlags)', 'int32'),
  \ dotnet#method('Receive(', 'class IList buffers, SocketFlags socketFlags, [out] SocketError& errorCode)', 'int32'),
  \ dotnet#method('ReceiveMessageFrom(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags& socketFlags, EndPoint& remoteEP, [out] IPPacketInformation& ipPacketInformation)', 'int32'),
  \ dotnet#method('ReceiveFrom(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, EndPoint& remoteEP)', 'int32'),
  \ dotnet#method('ReceiveFrom(', 'uint8[] buffer, int32 size, SocketFlags socketFlags, EndPoint& remoteEP)', 'int32'),
  \ dotnet#method('ReceiveFrom(', 'uint8[] buffer, SocketFlags socketFlags, EndPoint& remoteEP)', 'int32'),
  \ dotnet#method('ReceiveFrom(', 'uint8[] buffer, EndPoint& remoteEP)', 'int32'),
  \ dotnet#method('IOControl(', 'int32 ioControlCode, uint8[] optionInValue, uint8[] optionOutValue)', 'int32'),
  \ dotnet#method('IOControl(', 'IOControlCode ioControlCode, uint8[] optionInValue, uint8[] optionOutValue)', 'int32'),
  \ dotnet#method('SetIPProtectionLevel(', 'IPProtectionLevel level)', 'void'),
  \ dotnet#method('SetSocketOption(', 'SocketOptionLevel optionLevel, SocketOptionName optionName, int32 optionValue)', 'void'),
  \ dotnet#method('SetSocketOption(', 'SocketOptionLevel optionLevel, SocketOptionName optionName, uint8[] optionValue)', 'void'),
  \ dotnet#method('SetSocketOption(', 'SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue)', 'void'),
  \ dotnet#method('SetSocketOption(', 'SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue)', 'void'),
  \ dotnet#method('GetSocketOption(', 'SocketOptionLevel optionLevel, SocketOptionName optionName)', 'object'),
  \ dotnet#method('GetSocketOption(', 'SocketOptionLevel optionLevel, SocketOptionName optionName, uint8[] optionValue)', 'void'),
  \ dotnet#method('GetSocketOption(', 'SocketOptionLevel optionLevel, SocketOptionName optionName, int32 optionLength)', 'uint8[]'),
  \ dotnet#method('Poll(', 'int32 microSeconds, SelectMode mode)', 'bool'),
  \ dotnet#method('Select(', 'class IList checkRead, IList checkWrite, IList checkError, int32 microSeconds)', 'static void'),
  \ dotnet#method('BeginSendFile(', 'string fileName, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginConnect(', 'class EndPoint remoteEP, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('DuplicateAndClose(', 'int32 targetProcessId)', 'SocketInformation'),
  \ dotnet#method('BeginConnect(', 'string host, int32 port, AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginConnect(', 'class IPAddress address, int32 port, AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginConnect(', 'class IPAddress[] addresses, int32 port, AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginDisconnect(', 'bool reuseSocket, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('Disconnect(', 'bool reuseSocket)', 'void'),
  \ dotnet#method('EndConnect(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('EndDisconnect(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('BeginSend(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginSend(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, [out] SocketError& errorCode, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginSendFile(', 'string fileName, uint8[] preBuffer, uint8[] postBuffer, TransmitFileOptions flags, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginSend(', 'class IList buffers, SocketFlags socketFlags, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginSend(', 'class IList buffers, SocketFlags socketFlags, [out] SocketError& errorCode, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndSend(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('EndSend(', 'class IAsyncResult asyncResult, [out] SocketError& errorCode)', 'int32'),
  \ dotnet#method('EndSendFile(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('BeginSendTo(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, EndPoint remoteEP, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndSendTo(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('BeginReceive(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginReceive(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, [out] SocketError& errorCode, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginReceive(', 'class IList buffers, SocketFlags socketFlags, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginReceive(', 'class IList buffers, SocketFlags socketFlags, [out] SocketError& errorCode, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndReceive(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('EndReceive(', 'class IAsyncResult asyncResult, [out] SocketError& errorCode)', 'int32'),
  \ dotnet#method('BeginReceiveMessageFrom(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, EndPoint& remoteEP, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndReceiveMessageFrom(', 'class IAsyncResult asyncResult, SocketFlags& socketFlags, EndPoint& endPoint, [out] IPPacketInformation& ipPacketInformation)', 'int32'),
  \ dotnet#method('BeginReceiveFrom(', 'uint8[] buffer, int32 offset, int32 size, SocketFlags socketFlags, EndPoint& remoteEP, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndReceiveFrom(', 'class IAsyncResult asyncResult, EndPoint& endPoint)', 'int32'),
  \ dotnet#method('BeginAccept(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginAccept(', 'int32 receiveSize, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginAccept(', 'class Socket acceptSocket, int32 receiveSize, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndAccept(', 'class IAsyncResult asyncResult)', 'Socket'),
  \ dotnet#method('EndAccept(', '[out] uint8[]& buffer, IAsyncResult asyncResult)', 'Socket'),
  \ dotnet#method('EndAccept(', '[out] uint8[]& buffer, [out] int32& bytesTransferred, IAsyncResult asyncResult)', 'Socket'),
  \ dotnet#method('Shutdown(', 'SocketShutdown how)', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('AcceptAsync(', 'class SocketAsyncEventArgs e)', 'bool'),
  \ dotnet#method('ConnectAsync(', 'class SocketAsyncEventArgs e)', 'bool'),
  \ dotnet#method('ConnectAsync(', 'SocketType socketType, ProtocolType protocolType, SocketAsyncEventArgs e)', 'static bool'),
  \ dotnet#method('CancelConnectAsync(', 'class SocketAsyncEventArgs e)', 'static void'),
  \ dotnet#method('DisconnectAsync(', 'class SocketAsyncEventArgs e)', 'bool'),
  \ dotnet#method('ReceiveAsync(', 'class SocketAsyncEventArgs e)', 'bool'),
  \ dotnet#method('ReceiveFromAsync(', 'class SocketAsyncEventArgs e)', 'bool'),
  \ dotnet#method('ReceiveMessageFromAsync(', 'class SocketAsyncEventArgs e)', 'bool'),
  \ dotnet#method('SendAsync(', 'class SocketAsyncEventArgs e)', 'bool'),
  \ dotnet#method('SendPacketsAsync(', 'class SocketAsyncEventArgs e)', 'bool'),
  \ dotnet#method('SendToAsync(', 'class SocketAsyncEventArgs e)', 'bool'),
  \ dotnet#method('Socket(', ')', 'static void .'),
  \ dotnet#prop('SupportsIPv4', 'bool'),
  \ dotnet#prop('OSSupportsIPv4', 'bool'),
  \ dotnet#prop('SupportsIPv6', 'bool'),
  \ dotnet#prop('OSSupportsIPv6', 'bool'),
  \ dotnet#prop('Available', 'int32'),
  \ dotnet#prop('LocalEndPoint', 'EndPoint'),
  \ dotnet#prop('RemoteEndPoint', 'EndPoint'),
  \ dotnet#prop('Handle', 'int'),
  \ dotnet#prop('Blocking', 'bool'),
  \ dotnet#prop('UseOnlyOverlappedIO', 'bool'),
  \ dotnet#prop('Connected', 'bool'),
  \ dotnet#prop('AddressFamily', 'AddressFamily'),
  \ dotnet#prop('SocketType', 'SocketType'),
  \ dotnet#prop('ProtocolType', 'ProtocolType'),
  \ dotnet#prop('IsBound', 'bool'),
  \ dotnet#prop('ExclusiveAddressUse', 'bool'),
  \ dotnet#prop('ReceiveBufferSize', 'int32'),
  \ dotnet#prop('SendBufferSize', 'int32'),
  \ dotnet#prop('ReceiveTimeout', 'int32'),
  \ dotnet#prop('SendTimeout', 'int32'),
  \ dotnet#prop('LingerState', 'LingerOption'),
  \ dotnet#prop('NoDelay', 'bool'),
  \ dotnet#prop('Ttl', 'int16'),
  \ dotnet#prop('DontFragment', 'bool'),
  \ dotnet#prop('MulticastLoopback', 'bool'),
  \ dotnet#prop('EnableBroadcast', 'bool'),
  \ ])

call dotnet#class('SendPacketsElement', 'Object', [ 
  \ dotnet#method('SendPacketsElement(', 'string filepath)', 'void'),
  \ dotnet#method('SendPacketsElement(', 'string filepath, int32 offset, int32 count)', 'void'),
  \ dotnet#method('SendPacketsElement(', 'string filepath, int32 offset, int32 count, bool endOfPacket)', 'void'),
  \ dotnet#method('SendPacketsElement(', 'uint8[] buffer)', 'void'),
  \ dotnet#method('SendPacketsElement(', 'uint8[] buffer, int32 offset, int32 count)', 'void'),
  \ dotnet#method('SendPacketsElement(', 'uint8[] buffer, int32 offset, int32 count, bool endOfPacket)', 'void'),
  \ dotnet#method('get_FilePath(', ')', 'string'),
  \ dotnet#method('get_Buffer(', ')', 'uint8[]'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Offset(', ')', 'int32'),
  \ dotnet#method('get_EndOfPacket(', ')', 'bool'),
  \ dotnet#method('SendPacketsElement(', ')', 'void'),
  \ dotnet#prop('FilePath', 'string'),
  \ dotnet#prop('Buffer', 'uint8[]'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Offset', 'int32'),
  \ dotnet#prop('EndOfPacket', 'bool'),
  \ ])

call dotnet#class('SocketAsyncEventArgs', 'EventArgs', [ 
  \ dotnet#method('SocketAsyncEventArgs(', ')', 'void'),
  \ dotnet#method('get_AcceptSocket(', ')', 'Socket'),
  \ dotnet#method('set_AcceptSocket(', 'class Socket value)', 'void'),
  \ dotnet#method('get_ConnectSocket(', ')', 'Socket'),
  \ dotnet#method('get_Buffer(', ')', 'uint8[]'),
  \ dotnet#method('get_Offset(', ')', 'int32'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_BufferList(', ')', 'IList'),
  \ dotnet#method('set_BufferList(', 'class IList value)', 'void'),
  \ dotnet#method('get_BytesTransferred(', ')', 'int32'),
  \ dotnet#method('add_Completed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Completed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnCompleted(', 'class SocketAsyncEventArgs e)', 'void'),
  \ dotnet#method('get_DisconnectReuseSocket(', ')', 'bool'),
  \ dotnet#method('set_DisconnectReuseSocket(', 'bool value)', 'void'),
  \ dotnet#method('get_LastOperation(', ')', 'SocketAsyncOperation'),
  \ dotnet#method('get_ReceiveMessageFromPacketInfo(', ')', 'IPPacketInformation'),
  \ dotnet#method('get_RemoteEndPoint(', ')', 'EndPoint'),
  \ dotnet#method('set_RemoteEndPoint(', 'class EndPoint value)', 'void'),
  \ dotnet#method('get_SendPacketsElements(', ')', 'SendPacketsElement[]'),
  \ dotnet#method('set_SendPacketsElements(', 'class SendPacketsElement[] value)', 'void'),
  \ dotnet#method('get_SendPacketsFlags(', ')', 'TransmitFileOptions'),
  \ dotnet#method('set_SendPacketsFlags(', 'TransmitFileOptions value)', 'void'),
  \ dotnet#method('get_SendPacketsSendSize(', ')', 'int32'),
  \ dotnet#method('set_SendPacketsSendSize(', 'int32 value)', 'void'),
  \ dotnet#method('get_SocketError(', ')', 'SocketError'),
  \ dotnet#method('set_SocketError(', 'SocketError value)', 'void'),
  \ dotnet#method('get_ConnectByNameError(', ')', 'Exception'),
  \ dotnet#method('get_SocketFlags(', ')', 'SocketFlags'),
  \ dotnet#method('set_SocketFlags(', 'SocketFlags value)', 'void'),
  \ dotnet#method('get_UserToken(', ')', 'object'),
  \ dotnet#method('set_UserToken(', 'object value)', 'void'),
  \ dotnet#method('SetBuffer(', 'uint8[] buffer, int32 offset, int32 count)', 'void'),
  \ dotnet#method('SetBuffer(', 'int32 offset, int32 count)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('SocketAsyncEventArgs(', ')', 'static void .'),
  \ dotnet#event('Completed', 'EventHandler'),
  \ dotnet#prop('AcceptSocket', 'Socket'),
  \ dotnet#prop('ConnectSocket', 'Socket'),
  \ dotnet#prop('Buffer', 'uint8[]'),
  \ dotnet#prop('Offset', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('BufferList', 'IList'),
  \ dotnet#prop('BytesTransferred', 'int32'),
  \ dotnet#prop('DisconnectReuseSocket', 'bool'),
  \ dotnet#prop('LastOperation', 'SocketAsyncOperation'),
  \ dotnet#prop('ReceiveMessageFromPacketInfo', 'IPPacketInformation'),
  \ dotnet#prop('RemoteEndPoint', 'EndPoint'),
  \ dotnet#prop('SendPacketsElements', 'SendPacketsElement[]'),
  \ dotnet#prop('SendPacketsFlags', 'TransmitFileOptions'),
  \ dotnet#prop('SendPacketsSendSize', 'int32'),
  \ dotnet#prop('SocketError', 'SocketError'),
  \ dotnet#prop('ConnectByNameError', 'Exception'),
  \ dotnet#prop('SocketFlags', 'SocketFlags'),
  \ dotnet#prop('UserToken', 'object'),
  \ ])

call dotnet#class('TcpClient', 'Object', [ 
  \ dotnet#method('TcpClient(', 'class IPEndPoint localEP)', 'void'),
  \ dotnet#method('TcpClient(', ')', 'void'),
  \ dotnet#method('TcpClient(', 'Addressfamily)', 'void'),
  \ dotnet#method('TcpClient(', 'string hostname, int32 port)', 'void'),
  \ dotnet#method('get_Client(', ')', 'Socket'),
  \ dotnet#method('set_Client(', 'class Socket value)', 'void'),
  \ dotnet#method('get_Active(', ')', 'bool'),
  \ dotnet#method('set_Active(', 'bool value)', 'void'),
  \ dotnet#method('get_Available(', ')', 'int32'),
  \ dotnet#method('get_Connected(', ')', 'bool'),
  \ dotnet#method('get_ExclusiveAddressUse(', ')', 'bool'),
  \ dotnet#method('set_ExclusiveAddressUse(', 'bool value)', 'void'),
  \ dotnet#method('Connect(', 'string hostname, int32 port)', 'void'),
  \ dotnet#method('Connect(', 'class IPAddress address, int32 port)', 'void'),
  \ dotnet#method('Connect(', 'class IPEndPoint remoteEP)', 'void'),
  \ dotnet#method('Connect(', 'class IPAddress[] ipAddresses, int32 port)', 'void'),
  \ dotnet#method('BeginConnect(', 'string host, int32 port, AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginConnect(', 'class IPAddress address, int32 port, AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginConnect(', 'class IPAddress[] addresses, int32 port, AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndConnect(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('GetStream(', ')', 'NetworkStream'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('get_ReceiveBufferSize(', ')', 'int32'),
  \ dotnet#method('set_ReceiveBufferSize(', 'int32 value)', 'void'),
  \ dotnet#method('get_SendBufferSize(', ')', 'int32'),
  \ dotnet#method('set_SendBufferSize(', 'int32 value)', 'void'),
  \ dotnet#method('get_ReceiveTimeout(', ')', 'int32'),
  \ dotnet#method('set_ReceiveTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_SendTimeout(', ')', 'int32'),
  \ dotnet#method('set_SendTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_LingerState(', ')', 'LingerOption'),
  \ dotnet#method('set_LingerState(', 'class LingerOption value)', 'void'),
  \ dotnet#method('get_NoDelay(', ')', 'bool'),
  \ dotnet#method('set_NoDelay(', 'bool value)', 'void'),
  \ dotnet#prop('Client', 'Socket'),
  \ dotnet#prop('Active', 'bool'),
  \ dotnet#prop('Available', 'int32'),
  \ dotnet#prop('Connected', 'bool'),
  \ dotnet#prop('ExclusiveAddressUse', 'bool'),
  \ dotnet#prop('ReceiveBufferSize', 'int32'),
  \ dotnet#prop('SendBufferSize', 'int32'),
  \ dotnet#prop('ReceiveTimeout', 'int32'),
  \ dotnet#prop('SendTimeout', 'int32'),
  \ dotnet#prop('LingerState', 'LingerOption'),
  \ dotnet#prop('NoDelay', 'bool'),
  \ ])

call dotnet#class('TcpListener', 'Object', [ 
  \ dotnet#method('TcpListener(', 'class IPEndPoint localEP)', 'void'),
  \ dotnet#method('TcpListener(', 'class IPAddress localaddr, int32 port)', 'void'),
  \ dotnet#method('TcpListener(', 'int32 port)', 'void'),
  \ dotnet#method('get_Server(', ')', 'Socket'),
  \ dotnet#method('get_Active(', ')', 'bool'),
  \ dotnet#method('get_LocalEndpoint(', ')', 'EndPoint'),
  \ dotnet#method('get_ExclusiveAddressUse(', ')', 'bool'),
  \ dotnet#method('set_ExclusiveAddressUse(', 'bool value)', 'void'),
  \ dotnet#method('AllowNatTraversal(', 'bool allowed)', 'void'),
  \ dotnet#method('Start(', ')', 'void'),
  \ dotnet#method('Start(', 'int32 backlog)', 'void'),
  \ dotnet#method('Stop(', ')', 'void'),
  \ dotnet#method('Pending(', ')', 'bool'),
  \ dotnet#method('AcceptSocket(', ')', 'Socket'),
  \ dotnet#method('AcceptTcpClient(', ')', 'TcpClient'),
  \ dotnet#method('BeginAcceptSocket(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndAcceptSocket(', 'class IAsyncResult asyncResult)', 'Socket'),
  \ dotnet#method('BeginAcceptTcpClient(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndAcceptTcpClient(', 'class IAsyncResult asyncResult)', 'TcpClient'),
  \ dotnet#prop('Server', 'Socket'),
  \ dotnet#prop('Active', 'bool'),
  \ dotnet#prop('LocalEndpoint', 'EndPoint'),
  \ dotnet#prop('ExclusiveAddressUse', 'bool'),
  \ ])

call dotnet#class('UdpClient', 'Object', [ 
  \ dotnet#method('UdpClient(', ')', 'void'),
  \ dotnet#method('UdpClient(', 'Addressfamily)', 'void'),
  \ dotnet#method('UdpClient(', 'int32 port)', 'void'),
  \ dotnet#method('UdpClient(', 'int32 port, Addressfamily)', 'void'),
  \ dotnet#method('UdpClient(', 'class IPEndPoint localEP)', 'void'),
  \ dotnet#method('UdpClient(', 'string hostname, int32 port)', 'void'),
  \ dotnet#method('get_Client(', ')', 'Socket'),
  \ dotnet#method('set_Client(', 'class Socket value)', 'void'),
  \ dotnet#method('get_Active(', ')', 'bool'),
  \ dotnet#method('set_Active(', 'bool value)', 'void'),
  \ dotnet#method('get_Available(', ')', 'int32'),
  \ dotnet#method('get_Ttl(', ')', 'int16'),
  \ dotnet#method('set_Ttl(', 'int16 value)', 'void'),
  \ dotnet#method('get_DontFragment(', ')', 'bool'),
  \ dotnet#method('set_DontFragment(', 'bool value)', 'void'),
  \ dotnet#method('get_MulticastLoopback(', ')', 'bool'),
  \ dotnet#method('set_MulticastLoopback(', 'bool value)', 'void'),
  \ dotnet#method('get_EnableBroadcast(', ')', 'bool'),
  \ dotnet#method('set_EnableBroadcast(', 'bool value)', 'void'),
  \ dotnet#method('get_ExclusiveAddressUse(', ')', 'bool'),
  \ dotnet#method('set_ExclusiveAddressUse(', 'bool value)', 'void'),
  \ dotnet#method('AllowNatTraversal(', 'bool allowed)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Connect(', 'string hostname, int32 port)', 'void'),
  \ dotnet#method('Connect(', 'class IPAddress addr, int32 port)', 'void'),
  \ dotnet#method('Connect(', 'class IPEndPoint endPoint)', 'void'),
  \ dotnet#method('Send(', 'uint8[] dgram, int32 bytes, IPEndPoint endPoint)', 'int32'),
  \ dotnet#method('Send(', 'uint8[] dgram, int32 bytes, string hostname, int32 port)', 'int32'),
  \ dotnet#method('Send(', 'uint8[] dgram, int32 bytes)', 'int32'),
  \ dotnet#method('BeginSend(', 'uint8[] datagram, int32 bytes, IPEndPoint endPoint, AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginSend(', 'uint8[] datagram, int32 bytes, string hostname, int32 port, AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginSend(', 'uint8[] datagram, int32 bytes, AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndSend(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('Receive(', 'class IPEndPoint& remoteEP)', 'uint8[]'),
  \ dotnet#method('BeginReceive(', 'class AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndReceive(', 'class IAsyncResult asyncResult, IPEndPoint& remoteEP)', 'uint8[]'),
  \ dotnet#method('JoinMulticastGroup(', 'class IPAddress multicastAddr)', 'void'),
  \ dotnet#method('JoinMulticastGroup(', 'class IPAddress multicastAddr, IPAddress localAddress)', 'void'),
  \ dotnet#method('JoinMulticastGroup(', 'int32 ifindex, IPAddress multicastAddr)', 'void'),
  \ dotnet#method('JoinMulticastGroup(', 'class IPAddress multicastAddr, int32 timeToLive)', 'void'),
  \ dotnet#method('DropMulticastGroup(', 'class IPAddress multicastAddr)', 'void'),
  \ dotnet#method('DropMulticastGroup(', 'class IPAddress multicastAddr, int32 ifindex)', 'void'),
  \ dotnet#prop('Client', 'Socket'),
  \ dotnet#prop('Active', 'bool'),
  \ dotnet#prop('Available', 'int32'),
  \ dotnet#prop('Ttl', 'int16'),
  \ dotnet#prop('DontFragment', 'bool'),
  \ dotnet#prop('MulticastLoopback', 'bool'),
  \ dotnet#prop('EnableBroadcast', 'bool'),
  \ dotnet#prop('ExclusiveAddressUse', 'bool'),
  \ ])

call dotnet#class('IPPacketInformation', 'ValueType', [ 
  \ dotnet#field('address', 'IPAddress'),
  \ dotnet#field('networkInterface', 'int32'),
  \ dotnet#method('get_Address(', ')', 'IPAddress'),
  \ dotnet#method('get_Interface(', ')', 'int32'),
  \ dotnet#method('op_Equality(', 'IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)', 'static bool'),
  \ dotnet#method('Equals(', 'object comparand)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Address', 'IPAddress'),
  \ dotnet#prop('Interface', 'int32'),
  \ ])

