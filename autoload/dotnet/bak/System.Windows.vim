call dotnet#namespace('System.Windows')

call dotnet#class('Expression', 'Object', [ 
  \ dotnet#method('Expression(', ')', 'void'),
  \ dotnet#method('Expression(', 'ExpressionMode mode)', 'void'),
  \ dotnet#method('Copy(', 'class DependencyObject targetObject, DependencyProperty targetDP)', 'strict'),
  \ dotnet#method('GetSources(', ')', 'strict'),
  \ dotnet#method('GetValue(', 'class DependencyObject d, DependencyProperty dp)', 'strict object'),
  \ dotnet#method('SetValue(', 'class DependencyObject d, DependencyProperty dp, object value)', 'strict bool'),
  \ dotnet#method('OnAttach(', 'class DependencyObject d, DependencyProperty dp)', 'strict void'),
  \ dotnet#method('OnDetach(', 'class DependencyObject d, DependencyProperty dp)', 'strict void'),
  \ dotnet#method('OnPropertyInvalidation(', 'class DependencyObject d, DependencyPropertyChangedEventArgs args)', 'strict void'),
  \ dotnet#method('ChangeSources(', 'class DependencyObject d, DependencyProperty dp, DependencySource[] newSources)', 'void'),
  \ dotnet#method('get_Attachable(', ')', 'bool'),
  \ dotnet#method('get_Shareable(', ')', 'bool'),
  \ dotnet#method('get_ForwardsInvalidations(', ')', 'bool'),
  \ dotnet#method('get_SupportsUnboundSources(', ')', 'bool'),
  \ dotnet#method('get_HasBeenAttached(', ')', 'bool'),
  \ dotnet#method('get_HasBeenDetached(', ')', 'bool'),
  \ dotnet#method('MarkAttached(', ')', 'void'),
  \ dotnet#method('MarkDetached(', ')', 'void'),
  \ dotnet#method('Expression(', ')', 'static void .'),
  \ dotnet#prop('Attachable', 'bool'),
  \ dotnet#prop('Shareable', 'bool'),
  \ dotnet#prop('ForwardsInvalidations', 'bool'),
  \ dotnet#prop('SupportsUnboundSources', 'bool'),
  \ dotnet#prop('HasBeenAttached', 'bool'),
  \ dotnet#prop('HasBeenDetached', 'bool'),
  \ ])

call dotnet#class('WeakEventManager', 'DispatcherObject', [ 
  \ dotnet#method('WeakEventManager(', ')', 'void'),
  \ dotnet#method('WeakEventManager(', 'int32 capacity)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Add(', 'class IWeakEventListener listener)', 'void'),
  \ dotnet#method('Remove(', 'class IWeakEventListener listener)', 'void'),
  \ dotnet#method('PrepareForWriting(', 'class WeakEventManager/ListenerList& list)', 'static bool'),
  \ dotnet#method('Purge(', ')', 'bool'),
  \ dotnet#method('Clone(', ')', 'WeakEventManager/ListenerList'),
  \ dotnet#method('BeginUse(', ')', 'bool'),
  \ dotnet#method('EndUse(', ')', 'void'),
  \ dotnet#method('WeakEventManager(', ')', 'static void .'),
  \ dotnet#prop('Item(int32)', 'IWeakEventListener'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('Empty', 'WeakEventManager/ListenerList'),
  \ dotnet#method('WeakEventManager(', ')', 'void'),
  \ dotnet#method('get_ReadLock(', ')', 'IDisposable'),
  \ dotnet#method('get_WriteLock(', ')', 'IDisposable'),
  \ dotnet#method('get_Item(', 'object source)', 'object'),
  \ dotnet#method('set_Item(', 'object source, object value)', 'void'),
  \ dotnet#method('StartListening(', 'object source)', 'abstract void'),
  \ dotnet#method('StopListening(', 'object source)', 'abstract void'),
  \ dotnet#method('GetCurrentManager(', 'class Type managerType)', 'static WeakEventManager'),
  \ dotnet#method('SetCurrentManager(', 'class Type managerType, WeakEventManager manager)', 'static void'),
  \ dotnet#method('Remove(', 'object source)', 'void'),
  \ dotnet#method('ProtectedAddListener(', 'object source, IWeakEventListener listener)', 'void'),
  \ dotnet#method('ProtectedRemoveListener(', 'object source, IWeakEventListener listener)', 'void'),
  \ dotnet#method('DeliverEvent(', 'object sender, EventArgs args)', 'void'),
  \ dotnet#method('DeliverEventToList(', 'object sender, EventArgs args, WeakEventManager/ListenerList list)', 'void'),
  \ dotnet#method('ScheduleCleanup(', ')', 'void'),
  \ dotnet#method('Purge(', 'object source, object data, bool purgeAll)', 'bool'),
  \ dotnet#method('PurgeInternal(', 'object source, object data, bool purgeAll)', 'bool'),
  \ dotnet#method('Cleanup(', ')', 'static bool'),
  \ dotnet#method('SetCleanupEnabled(', 'bool value)', 'static void'),
  \ dotnet#method('WeakEventManager(', ')', 'static void .'),
  \ dotnet#prop('ReadLock', 'IDisposable'),
  \ dotnet#prop('WriteLock', 'IDisposable'),
  \ dotnet#prop('Item(object)', 'object'),
  \ ])

call dotnet#class('AttachedPropertyBrowsableAttribute', 'Attribute', [ 
  \ dotnet#method('get_UnionResults(', ')', 'strict bool'),
  \ dotnet#method('IsBrowsable(', 'class DependencyObject d, DependencyProperty dp)', 'abstract strict bool'),
  \ dotnet#method('AttachedPropertyBrowsableAttribute(', ')', 'void'),
  \ dotnet#prop('UnionResults', 'bool'),
  \ ])

call dotnet#class('AttachedPropertyBrowsableForTypeAttribute', 'AttachedPropertyBrowsableAttribute', [ 
  \ dotnet#method('AttachedPropertyBrowsableForTypeAttribute(', 'class Type targetType)', 'void'),
  \ dotnet#method('get_TargetType(', ')', 'Type'),
  \ dotnet#method('get_TypeId(', ')', 'object'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('IsBrowsable(', 'class DependencyObject d, DependencyProperty dp)', 'strict bool'),
  \ dotnet#method('get_UnionResults(', ')', 'strict bool'),
  \ dotnet#prop('TargetType', 'Type'),
  \ dotnet#prop('TypeId', 'object'),
  \ dotnet#prop('UnionResults', 'bool'),
  \ ])

call dotnet#class('AttachedPropertyBrowsableWhenAttributePresentAttribute', 'AttachedPropertyBrowsableAttribute', [ 
  \ dotnet#method('AttachedPropertyBrowsableWhenAttributePresentAttribute(', 'class Type attributeType)', 'void'),
  \ dotnet#method('get_AttributeType(', ')', 'Type'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('IsBrowsable(', 'class DependencyObject d, DependencyProperty dp)', 'strict bool'),
  \ dotnet#prop('AttributeType', 'Type'),
  \ ])

call dotnet#class('CoerceValueCallback', 'MulticastDelegate', [ 
  \ dotnet#method('CoerceValueCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class DependencyObject d, object baseValue)', 'object'),
  \ dotnet#method('BeginInvoke(', 'class DependencyObject d, object baseValue, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'object'),
  \ ])

call dotnet#class('DependencyObject', 'DispatcherObject', [ 
  \ dotnet#field('_contextStorage', 'object'),
  \ dotnet#method('DependencyObject(', ')', 'void'),
  \ dotnet#method('get_DependencyObjectType(', ')', 'DependencyObjectType'),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetValue(', 'class DependencyProperty dp)', 'object'),
  \ dotnet#method('GetValueEntry(', 'EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, RequestFlags requests)', 'EffectiveValueEntry'),
  \ dotnet#method('SetValue(', 'class DependencyProperty dp, object value)', 'void'),
  \ dotnet#method('SetCurrentValue(', 'class DependencyProperty dp, object value)', 'void'),
  \ dotnet#method('SetValue(', 'class DependencyProperty dp, bool value)', 'void'),
  \ dotnet#method('SetCurrentValue(', 'class DependencyProperty dp, bool value)', 'void'),
  \ dotnet#method('SetValueInternal(', 'class DependencyProperty dp, object value)', 'void'),
  \ dotnet#method('SetCurrentValueInternal(', 'class DependencyProperty dp, object value)', 'void'),
  \ dotnet#method('SetDeferredValue(', 'class DependencyProperty dp, DeferredReference deferredReference)', 'void'),
  \ dotnet#method('SetCurrentDeferredValue(', 'class DependencyProperty dp, DeferredReference deferredReference)', 'void'),
  \ dotnet#method('SetMutableDefaultValue(', 'class DependencyProperty dp, object value)', 'void'),
  \ dotnet#method('SetValue(', 'class DependencyPropertyKey dp, bool value)', 'void'),
  \ dotnet#method('SetValue(', 'class DependencyPropertyKey key, object value)', 'void'),
  \ dotnet#method('ProvideSelfAsInheritanceContext(', 'object value, DependencyProperty dp)', 'bool'),
  \ dotnet#method('ProvideSelfAsInheritanceContext(', 'class DependencyObject doValue, DependencyProperty dp)', 'bool'),
  \ dotnet#method('RemoveSelfAsInheritanceContext(', 'object value, DependencyProperty dp)', 'bool'),
  \ dotnet#method('RemoveSelfAsInheritanceContext(', 'class DependencyObject doValue, DependencyProperty dp)', 'bool'),
  \ dotnet#method('ClearValue(', 'class DependencyProperty dp)', 'void'),
  \ dotnet#method('ClearValue(', 'class DependencyPropertyKey key)', 'void'),
  \ dotnet#method('ContainsValue(', 'class DependencyProperty dp)', 'bool'),
  \ dotnet#method('ChangeExpressionSources(', 'class Expression expr, DependencyObject d, DependencyProperty dp, DependencySource[] newSources)', 'static void'),
  \ dotnet#method('CoerceValue(', 'class DependencyProperty dp)', 'void'),
  \ dotnet#method('InvalidateSubProperty(', 'class DependencyProperty dp)', 'void'),
  \ dotnet#method('NotifySubPropertyChange(', 'class DependencyProperty dp)', 'void'),
  \ dotnet#method('InvalidateProperty(', 'class DependencyProperty dp)', 'void'),
  \ dotnet#method('UpdateEffectiveValue(', 'EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry oldEntry, EffectiveValueEntry& newEntry, bool coerceWithDeferredReference, bool coerceWithCurrentValue, OperationType operationType)', 'UpdateResult'),
  \ dotnet#method('NotifyPropertyChange(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('EvaluateBaseValueCore(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& newEntry)', 'strict void'),
  \ dotnet#method('EvaluateAnimatedValueCore(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& newEntry)', 'strict void'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('ShouldSerializeProperty(', 'class DependencyProperty dp)', 'famorassem bool'),
  \ dotnet#method('GetValueSource(', 'class DependencyProperty dp, PropertyMetadata metadata, [out] bool& hasModifiers)', 'BaseValueSourceInternal'),
  \ dotnet#method('GetValueSource(', 'class DependencyProperty dp, PropertyMetadata metadata, [out] bool& hasModifiers, [out] bool& isExpression, [out] bool& isAnimated, [out] bool& isCoerced, [out] bool& isCurrent)', 'BaseValueSourceInternal'),
  \ dotnet#method('ReadLocalValue(', 'class DependencyProperty dp)', 'object'),
  \ dotnet#method('ReadLocalValueEntry(', 'EntryIndex entryIndex, DependencyProperty dp, bool allowDeferredReferences)', 'object'),
  \ dotnet#method('GetLocalValueEnumerator(', ')', 'LocalValueEnumerator'),
  \ dotnet#method('get_IsInheritanceContextSealed(', ')', 'bool'),
  \ dotnet#method('set_IsInheritanceContextSealed(', 'bool value)', 'void'),
  \ dotnet#method('get_Freezable_Frozen(', ')', 'bool'),
  \ dotnet#method('set_Freezable_Frozen(', 'bool value)', 'void'),
  \ dotnet#method('get_Freezable_HasMultipleInheritanceContexts(', ')', 'bool'),
  \ dotnet#method('set_Freezable_HasMultipleInheritanceContexts(', 'bool value)', 'void'),
  \ dotnet#method('get_Freezable_UsingHandlerList(', ')', 'bool'),
  \ dotnet#method('set_Freezable_UsingHandlerList(', 'bool value)', 'void'),
  \ dotnet#method('get_Freezable_UsingContextList(', ')', 'bool'),
  \ dotnet#method('set_Freezable_UsingContextList(', 'bool value)', 'void'),
  \ dotnet#method('get_Freezable_UsingSingletonHandler(', ')', 'bool'),
  \ dotnet#method('set_Freezable_UsingSingletonHandler(', 'bool value)', 'void'),
  \ dotnet#method('get_Freezable_UsingSingletonContext(', ')', 'bool'),
  \ dotnet#method('set_Freezable_UsingSingletonContext(', 'bool value)', 'void'),
  \ dotnet#method('get_Animatable_IsResourceInvalidationNecessary(', ')', 'bool'),
  \ dotnet#method('set_Animatable_IsResourceInvalidationNecessary(', 'bool value)', 'void'),
  \ dotnet#method('get_IAnimatable_HasAnimatedProperties(', ')', 'bool'),
  \ dotnet#method('set_IAnimatable_HasAnimatedProperties(', 'bool value)', 'void'),
  \ dotnet#method('UpdateSourceDependentLists(', 'class DependencyObject d, DependencyProperty dp, DependencySource[] sources, Expression expr, bool add)', 'static void'),
  \ dotnet#method('ValidateSources(', 'class DependencyObject d, DependencySource[] newSources, Expression expr)', 'static void'),
  \ dotnet#method('RegisterForAlternativeExpressionStorage(', 'class AlternativeExpressionStorageCallback getExpressionCore, [out] AlternativeExpressionStorageCallback& getExpression)', 'static void'),
  \ dotnet#method('HasAnyExpression(', ')', 'bool'),
  \ dotnet#method('HasExpression(', 'EntryIndex entryIndex, DependencyProperty dp)', 'bool'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('ShouldProvideInheritanceContext(', 'class DependencyObject target, DependencyProperty property)', 'strict bool'),
  \ dotnet#method('OnInheritanceContextChanged(', 'class EventArgs args)', 'void'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('add_InheritanceContextChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_InheritanceContextChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#method('get_CanBeInheritanceContext(', ')', 'bool'),
  \ dotnet#method('set_CanBeInheritanceContext(', 'bool value)', 'void'),
  \ dotnet#method('IsTreeWalkOperation(', 'OperationType operation)', 'static bool'),
  \ dotnet#method('Debug_AssertNoInheritanceContextListeners(', ')', 'void'),
  \ dotnet#method('get_EffectiveValues(', ')', '.method'),
  \ dotnet#method('get_EffectiveValuesCount(', ')', 'uint32'),
  \ dotnet#method('get_InheritableEffectiveValuesCount(', ')', 'uint32'),
  \ dotnet#method('set_InheritableEffectiveValuesCount(', 'uint32 value)', 'void'),
  \ dotnet#method('BeginPropertyInitialization(', ')', 'void'),
  \ dotnet#method('EndPropertyInitialization(', ')', 'void'),
  \ dotnet#method('get_InheritanceParent(', ')', '.method'),
  \ dotnet#method('get_IsSelfInheritanceParent(', ')', 'bool'),
  \ dotnet#method('SetIsSelfInheritanceParent(', ')', 'void'),
  \ dotnet#method('SynchronizeInheritanceParent(', 'class DependencyObject parent)', 'void'),
  \ dotnet#method('LookupEntry(', 'int32 targetIndex)', 'EntryIndex'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('SetEffectiveValue(', 'EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry newEntry, EffectiveValueEntry oldEntry)', 'void'),
  \ dotnet#method('SetEffectiveValue(', 'EntryIndex entryIndex, DependencyProperty dp, int32 targetIndex, PropertyMetadata metadata, object value, BaseValueSourceInternal valueSource)', 'void'),
  \ dotnet#method('UnsetEffectiveValue(', 'EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata)', 'void'),
  \ dotnet#method('set_EffectiveValuesCount(', 'uint32 value)', 'void'),
  \ dotnet#method('DependencyObject(', ')', 'static void .'),
  \ dotnet#event('InheritanceContextChanged', 'EventHandler'),
  \ dotnet#prop('DependencyObjectType', 'DependencyObjectType'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('IsInheritanceContextSealed', 'bool'),
  \ dotnet#prop('Freezable_Frozen', 'bool'),
  \ dotnet#prop('Freezable_HasMultipleInheritanceContexts', 'bool'),
  \ dotnet#prop('Freezable_UsingHandlerList', 'bool'),
  \ dotnet#prop('Freezable_UsingContextList', 'bool'),
  \ dotnet#prop('Freezable_UsingSingletonHandler', 'bool'),
  \ dotnet#prop('Freezable_UsingSingletonContext', 'bool'),
  \ dotnet#prop('Animatable_IsResourceInvalidationNecessary', 'bool'),
  \ dotnet#prop('IAnimatable_HasAnimatedProperties', 'bool'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ dotnet#prop('CanBeInheritanceContext', 'bool'),
  \ dotnet#prop('EffectiveValues', 'EffectiveValueEntry[]'),
  \ dotnet#prop('EffectiveValuesCount', 'uint32'),
  \ dotnet#prop('InheritableEffectiveValuesCount', 'uint32'),
  \ dotnet#prop('InheritanceParent', 'DependencyObject'),
  \ dotnet#prop('IsSelfInheritanceParent', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('DependencyObjectType', 'Object', [ 
  \ dotnet#method('FromSystemType(', 'class Type systemType)', 'static DependencyObjectType'),
  \ dotnet#method('FromSystemTypeInternal(', 'class Type systemType)', 'static DependencyObjectType'),
  \ dotnet#method('get_Id(', ')', 'int32'),
  \ dotnet#method('get_SystemType(', ')', 'Type'),
  \ dotnet#method('get_BaseType(', ')', 'DependencyObjectType'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('IsInstanceOfType(', 'class DependencyObject dependencyObject)', 'bool'),
  \ dotnet#method('IsSubclassOf(', 'class DependencyObjectType dependencyObjectType)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('DependencyObjectType(', ')', 'void'),
  \ dotnet#method('DependencyObjectType(', ')', 'static void .'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('SystemType', 'Type'),
  \ dotnet#prop('BaseType', 'DependencyObjectType'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('DependencyProperty', 'Object', [ 
  \ dotnet#field('_metadataMap', 'InsertionSortMap'),
  \ dotnet#method('Register(', 'string name, Type propertyType, Type ownerType)', 'static DependencyProperty'),
  \ dotnet#method('Register(', 'string name, Type propertyType, Type ownerType, PropertyMetadata typeMetadata)', 'static DependencyProperty'),
  \ dotnet#method('Register(', 'string name, Type propertyType, Type ownerType, PropertyMetadata typeMetadata, ValidateValueCallback validateValueCallback)', 'static DependencyProperty'),
  \ dotnet#method('RegisterReadOnly(', 'string name, Type propertyType, Type ownerType, PropertyMetadata typeMetadata)', 'static DependencyPropertyKey'),
  \ dotnet#method('RegisterReadOnly(', 'string name, Type propertyType, Type ownerType, PropertyMetadata typeMetadata, ValidateValueCallback validateValueCallback)', 'static DependencyPropertyKey'),
  \ dotnet#method('RegisterAttachedReadOnly(', 'string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata)', 'static DependencyPropertyKey'),
  \ dotnet#method('RegisterAttachedReadOnly(', 'string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata, ValidateValueCallback validateValueCallback)', 'static DependencyPropertyKey'),
  \ dotnet#method('RegisterAttached(', 'string name, Type propertyType, Type ownerType)', 'static DependencyProperty'),
  \ dotnet#method('RegisterAttached(', 'string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata)', 'static DependencyProperty'),
  \ dotnet#method('RegisterAttached(', 'string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata, ValidateValueCallback validateValueCallback)', 'static DependencyProperty'),
  \ dotnet#method('ValidateFDependencyPropertyyDefaultValue(', 'object defaultValue)', 'void'),
  \ dotnet#method('OverrideMetadata(', 'class Type forType, PropertyMetadata typeMetadata)', 'void'),
  \ dotnet#method('OverrideMetadata(', 'class Type forType, PropertyMetadata typeMetadata, DependencyPropertyKey key)', 'void'),
  \ dotnet#method('GetDefaultValue(', 'class DependencyObjectType dependencyObjectType)', 'object'),
  \ dotnet#method('GetDefaultValue(', 'class Type forType)', 'object'),
  \ dotnet#method('GetMetadata(', 'class Type forType)', 'PropertyMetadata'),
  \ dotnet#method('GetMetadata(', 'class DependencyObject dependencyObject)', 'PropertyMetadata'),
  \ dotnet#method('GetMetadata(', 'class DependencyObjectType dependencyObjectType)', 'PropertyMetadata'),
  \ dotnet#method('AddOwner(', 'class Type ownerType)', 'DependencyProperty'),
  \ dotnet#method('AddOwner(', 'class Type ownerType, PropertyMetadata typeMetadata)', 'DependencyProperty'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_PropertyType(', ')', 'Type'),
  \ dotnet#method('get_OwnerType(', ')', 'Type'),
  \ dotnet#method('get_DefaultMetadata(', ')', 'PropertyMetadata'),
  \ dotnet#method('get_ValidateValueCallback(', ')', 'ValidateValueCallback'),
  \ dotnet#method('get_GlobalIndex(', ')', 'int32'),
  \ dotnet#method('get_IsObjectType(', ')', 'bool'),
  \ dotnet#method('get_IsValueType(', ')', 'bool'),
  \ dotnet#method('get_IsFreezableType(', ')', 'bool'),
  \ dotnet#method('get_IsStringType(', ')', 'bool'),
  \ dotnet#method('get_IsPotentiallyInherited(', ')', 'bool'),
  \ dotnet#method('get_IsDefaultValueChanged(', ')', 'bool'),
  \ dotnet#method('get_IsPotentiallyUsingDefaultValueFDependencyPropertyy(', ')', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('IsValidType(', 'object value)', 'bool'),
  \ dotnet#method('IsValidValue(', 'object value)', 'bool'),
  \ dotnet#method('get_ReadOnly(', ')', 'bool'),
  \ dotnet#method('get_DependencyPropertyKey(', ')', '.method'),
  \ dotnet#method('VerifyReadOnlyKey(', 'class DependencyPropertyKey candidateKey)', 'void'),
  \ dotnet#method('IsValidValueInternal(', 'object value)', 'bool'),
  \ dotnet#method('FromName(', 'string name, Type ownerType)', 'static DependencyProperty'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('IsValidType(', 'object value, Type propertyType)', 'static bool'),
  \ dotnet#method('GetUniqueGlobalIndex(', 'class Type ownerType, string name)', 'static int32'),
  \ dotnet#method('get_DesignerCoerceValueCallback(', ')', '.method'),
  \ dotnet#method('set_DesignerCoerceValueCallback(', 'class CoerceValueCallback value)', 'void'),
  \ dotnet#method('get_RegisteredPropertyCount(', ')', 'static int32'),
  \ dotnet#method('get_RegisteredProperties(', ')', 'static'),
  \ dotnet#method('DependencyProperty(', ')', 'static void .'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('PropertyType', 'Type'),
  \ dotnet#prop('OwnerType', 'Type'),
  \ dotnet#prop('DefaultMetadata', 'PropertyMetadata'),
  \ dotnet#prop('ValidateValueCallback', 'ValidateValueCallback'),
  \ dotnet#prop('GlobalIndex', 'int32'),
  \ dotnet#prop('IsObjectType', 'bool'),
  \ dotnet#prop('IsValueType', 'bool'),
  \ dotnet#prop('IsFreezableType', 'bool'),
  \ dotnet#prop('IsStringType', 'bool'),
  \ dotnet#prop('IsPotentiallyInherited', 'bool'),
  \ dotnet#prop('IsDefaultValueChanged', 'bool'),
  \ dotnet#prop('IsPotentiallyUsingDefaultValueFDependencyPropertyy', 'bool'),
  \ dotnet#prop('ReadOnly', 'bool'),
  \ dotnet#prop('DependencyPropertyKey', 'DependencyPropertyKey'),
  \ dotnet#prop('DesignerCoerceValueCallback', 'CoerceValueCallback'),
  \ dotnet#prop('RegisteredPropertyCount', 'int32'),
  \ dotnet#prop('RegisteredProperties', 'IEnumerable'),
  \ ])

call dotnet#class('DependencyPropertyKey', 'Object', [ 
  \ dotnet#method('get_DependencyProperty(', ')', 'DependencyProperty'),
  \ dotnet#method('DependencyPropertyKey(', 'class DependencyProperty dp)', 'void'),
  \ dotnet#method('OverrideMetadata(', 'class Type forType, PropertyMetadata typeMetadata)', 'void'),
  \ dotnet#method('SetDependencyProperty(', 'class DependencyProperty dp)', 'void'),
  \ dotnet#prop('DependencyProperty', 'DependencyProperty'),
  \ ])

call dotnet#class('DependencyPropertyChangedEventArgs', 'ValueType', [ 
  \ dotnet#field('value__', 'uint8'),
  \ dotnet#field('_property', 'DependencyProperty'),
  \ dotnet#field('_metadata', 'PropertyMetadata'),
  \ dotnet#field('_flags', 'DependencyPropertyChangedEventArgs/PrivateFlags'),
  \ dotnet#field('_oldEntry', 'EffectiveValueEntry'),
  \ dotnet#field('_newEntry', 'EffectiveValueEntry'),
  \ dotnet#field('_operationType', 'OperationType'),
  \ dotnet#method('DependencyPropertyChangedEventArgs(', 'class DependencyProperty property, object oldValue, object newValue)', 'void'),
  \ dotnet#method('DependencyPropertyChangedEventArgs(', 'class DependencyProperty property, PropertyMetadata metadata, object oldValue, object newValue)', 'void'),
  \ dotnet#method('DependencyPropertyChangedEventArgs(', 'class DependencyProperty property, PropertyMetadata metadata, object value)', 'void'),
  \ dotnet#method('DependencyPropertyChangedEventArgs(', 'class DependencyProperty property, PropertyMetadata metadata, bool isAValueChange, EffectiveValueEntry oldEntry, EffectiveValueEntry newEntry, OperationType operationType)', 'void'),
  \ dotnet#method('get_Property(', ')', 'DependencyProperty'),
  \ dotnet#method('get_IsAValueChange(', ')', 'bool'),
  \ dotnet#method('set_IsAValueChange(', 'bool value)', 'void'),
  \ dotnet#method('get_IsASubPropertyChange(', ')', 'bool'),
  \ dotnet#method('set_IsASubPropertyChange(', 'bool value)', 'void'),
  \ dotnet#method('get_Metadata(', ')', '.method'),
  \ dotnet#method('get_OperationType(', ')', '.method'),
  \ dotnet#method('get_OldValue(', ')', 'object'),
  \ dotnet#method('get_OldEntry(', ')', '.method'),
  \ dotnet#method('get_OldValueSource(', ')', '.method'),
  \ dotnet#method('get_IsOldValueModified(', ')', 'bool'),
  \ dotnet#method('get_IsOldValueDeferred(', ')', 'bool'),
  \ dotnet#method('get_NewValue(', ')', 'object'),
  \ dotnet#method('get_NewEntry(', ')', '.method'),
  \ dotnet#method('get_NewValueSource(', ')', '.method'),
  \ dotnet#method('get_IsNewValueModified(', ')', 'bool'),
  \ dotnet#method('get_IsNewValueDeferred(', ')', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'DependencyPropertyChangedEventArgs args)', 'bool'),
  \ dotnet#method('op_Equality(', 'DependencyPropertyChangedEventArgs left, DependencyPropertyChangedEventArgs right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'DependencyPropertyChangedEventArgs left, DependencyPropertyChangedEventArgs right)', 'static bool'),
  \ dotnet#prop('Property', 'DependencyProperty'),
  \ dotnet#prop('IsAValueChange', 'bool'),
  \ dotnet#prop('IsASubPropertyChange', 'bool'),
  \ dotnet#prop('Metadata', 'PropertyMetadata'),
  \ dotnet#prop('OperationType', 'OperationType'),
  \ dotnet#prop('OldValue', 'object'),
  \ dotnet#prop('OldEntry', 'EffectiveValueEntry'),
  \ dotnet#prop('OldValueSource', 'BaseValueSourceInternal'),
  \ dotnet#prop('IsOldValueModified', 'bool'),
  \ dotnet#prop('IsOldValueDeferred', 'bool'),
  \ dotnet#prop('NewValue', 'object'),
  \ dotnet#prop('NewEntry', 'EffectiveValueEntry'),
  \ dotnet#prop('NewValueSource', 'BaseValueSourceInternal'),
  \ dotnet#prop('IsNewValueModified', 'bool'),
  \ dotnet#prop('IsNewValueDeferred', 'bool'),
  \ ])

call dotnet#class('DependencyPropertyChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DependencyPropertyChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DependencyPropertyChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('NameScope', 'Object', [ 
  \ dotnet#method('RegisterName(', 'string name, object scopedElement)', 'void'),
  \ dotnet#method('UnregisterName(', 'string name)', 'void'),
  \ dotnet#method('FindName(', 'string name)', 'object'),
  \ dotnet#method('NameScopeFromObject(', 'object obj)', 'static INameScope'),
  \ dotnet#method('SetNameScope(', 'class DependencyObject dependencyObject, INameScope value)', 'static void'),
  \ dotnet#method('GetNameScope(', 'class DependencyObject dependencyObject)', 'static INameScope'),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('CopyTo(', 'KeyValuePair[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('Remove(', 'KeyValuePair item)', 'bool'),
  \ dotnet#method('Add(', 'KeyValuePair item)', 'void'),
  \ dotnet#method('Contains(', 'KeyValuePair item)', 'bool'),
  \ dotnet#method('get_Item(', 'string key)', 'object'),
  \ dotnet#method('set_Item(', 'string key, object value)', 'void'),
  \ dotnet#method('Add(', 'string key, object value)', 'void'),
  \ dotnet#method('ContainsKey(', 'string key)', 'bool'),
  \ dotnet#method('Remove(', 'string key)', 'bool'),
  \ dotnet#method('TryGetValue(', 'string key, [out] object& value)', 'bool'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('NameScope(', ')', 'void'),
  \ dotnet#method('NameScope(', ')', 'static void .'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(string)', 'object'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('ExpressionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('ExpressionConverter(', ')', 'void'),
  \ ])

call dotnet#class('Freezable', 'DependencyObject', [ 
  \ dotnet#method('Freezable(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Freezable'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Freezable'),
  \ dotnet#method('GetAsFrozen(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueAsFrozen(', ')', 'Freezable'),
  \ dotnet#method('get_CanFreeze(', ')', 'bool'),
  \ dotnet#method('Freeze(', ')', 'void'),
  \ dotnet#method('get_IsFrozen(', ')', 'bool'),
  \ dotnet#method('get_IsFrozenInternal(', ')', 'bool'),
  \ dotnet#method('add_Changed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Changed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_ChangedInternal(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ChangedInternal(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('CreateInstance(', ')', 'Freezable'),
  \ dotnet#method('CreateInstanceCore(', ')', 'abstract'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('ReadPreamble(', ')', 'void'),
  \ dotnet#method('WritePreamble(', ')', 'void'),
  \ dotnet#method('WritePostscript(', ')', 'void'),
  \ dotnet#method('OnFreezablePropertyChanged(', 'class DependencyObject oldValue, DependencyObject newValue)', 'void'),
  \ dotnet#method('OnFreezablePropertyChanged(', 'class DependencyObject oldValue, DependencyObject newValue, DependencyProperty property)', 'void'),
  \ dotnet#method('Freeze(', 'class Freezable freezable, bool isChecking)', 'famorassem static bool'),
  \ dotnet#method('get_CanSeal(', ')', 'bool '),
  \ dotnet#method('get_IsSealed(', ')', 'bool '),
  \ dotnet#method('Seal(', ')', 'void '),
  \ dotnet#method('ClearContextAndHandlers(', ')', 'void'),
  \ dotnet#method('FireChanged(', ')', 'void'),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#method('Freeze(', 'bool isChecking)', 'bool'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('AddContextInformation(', 'class DependencyObject context, DependencyProperty property)', 'void'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#method('Freezable(', ')', 'static void .'),
  \ dotnet#event('Changed', 'EventHandler'),
  \ dotnet#event('ChangedInternal', 'EventHandler'),
  \ dotnet#prop('CanFreeze', 'bool'),
  \ dotnet#prop('IsFrozen', 'bool'),
  \ dotnet#prop('IsFrozenInternal', 'bool'),
  \ dotnet#prop('CanSeal', 'bool'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ ])

call dotnet#class('Int32Rect', 'ValueType', [ 
  \ dotnet#field('_x', 'int32'),
  \ dotnet#field('_y', 'int32'),
  \ dotnet#field('_width', 'int32'),
  \ dotnet#field('_height', 'int32'),
  \ dotnet#method('op_Equality(', 'Int32Rect int32Rect1, Int32Rect int32Rect2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Int32Rect int32Rect1, Int32Rect int32Rect2)', 'static bool'),
  \ dotnet#method('Equals(', 'Int32Rect int32Rect1, Int32Rect int32Rect2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Int32Rect value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Int32Rect'),
  \ dotnet#method('get_X(', ')', 'int32'),
  \ dotnet#method('set_X(', 'int32 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'int32'),
  \ dotnet#method('set_Y(', 'int32 value)', 'void'),
  \ dotnet#method('get_Width(', ')', 'int32'),
  \ dotnet#method('set_Width(', 'int32 value)', 'void'),
  \ dotnet#method('get_Height(', ')', 'int32'),
  \ dotnet#method('set_Height(', 'int32 value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Int32Rect(', 'int32 x, int32 y, int32 width, int32 height)', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('Int32Rect(', ')', 'static void .'),
  \ dotnet#prop('X', 'int32'),
  \ dotnet#prop('Y', 'int32'),
  \ dotnet#prop('Width', 'int32'),
  \ dotnet#prop('Height', 'int32'),
  \ dotnet#prop('Empty', 'Int32Rect'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ ])

call dotnet#class('Int32RectConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Int32RectConverter(', ')', 'void'),
  \ ])

call dotnet#class('Point', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#method('op_Equality(', 'Point point1, Point point2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Point point1, Point point2)', 'static bool'),
  \ dotnet#method('Equals(', 'Point point1, Point point2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Point value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Point'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Point(', 'float64 x, float64 y)', 'void'),
  \ dotnet#method('Offset(', 'float64 offsetX, float64 offsetY)', 'void'),
  \ dotnet#method('op_Addition(', 'Point point, VPoint vPoint)', 'static'),
  \ dotnet#method('Add(', 'Point point, VPoint vPoint)', 'static Point'),
  \ dotnet#method('op_Subtraction(', 'Point point, VPoint vPoint)', 'static'),
  \ dotnet#method('Subtract(', 'Point point, VPoint vPoint)', 'static Point'),
  \ dotnet#method('op_Subtraction(', 'Point point1, Point point2)', 'static'),
  \ dotnet#method('Subtract(', 'Point point1, Point point2)', 'static VPoint'),
  \ dotnet#method('op_Multiply(', 'Point point, Matrix matrix)', 'static'),
  \ dotnet#method('Multiply(', 'Point point, Matrix matrix)', 'static Point'),
  \ dotnet#method('op_Explicit(', 'Point point)', 'static Size'),
  \ dotnet#method('op_Explicit(', 'Point point)', 'static'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ ])

call dotnet#class('PointConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('PointConverter(', ')', 'void'),
  \ ])

call dotnet#class('Rect', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#field('_width', 'float64'),
  \ dotnet#field('_height', 'float64'),
  \ dotnet#method('op_Equality(', 'Rect rect1, Rect rect2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Rect rect1, Rect rect2)', 'static bool'),
  \ dotnet#method('Equals(', 'Rect rect1, Rect rect2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Rect value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Rect'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Rect(', 'Point location, Size size)', 'void'),
  \ dotnet#method('Rect(', 'float64 x, float64 y, float64 width, float64 height)', 'void'),
  \ dotnet#method('Rect(', 'Point point1, Point point2)', 'void'),
  \ dotnet#method('Rect(', 'Point point, VRect vRect)', 'void'),
  \ dotnet#method('Rect(', 'Size size)', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static Rect'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Location(', ')', 'Point'),
  \ dotnet#method('set_Location(', 'Point value)', 'void'),
  \ dotnet#method('get_Size(', ')', 'Size'),
  \ dotnet#method('set_Size(', 'Size value)', 'void'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('set_Width(', 'float64 value)', 'void'),
  \ dotnet#method('get_Height(', ')', 'float64'),
  \ dotnet#method('set_Height(', 'float64 value)', 'void'),
  \ dotnet#method('get_Left(', ')', 'float64'),
  \ dotnet#method('get_Top(', ')', 'float64'),
  \ dotnet#method('get_Right(', ')', 'float64'),
  \ dotnet#method('get_Bottom(', ')', 'float64'),
  \ dotnet#method('get_TopLeft(', ')', 'Point'),
  \ dotnet#method('get_TopRight(', ')', 'Point'),
  \ dotnet#method('get_BottomLeft(', ')', 'Point'),
  \ dotnet#method('get_BottomRight(', ')', 'Point'),
  \ dotnet#method('Contains(', 'Point point)', 'bool'),
  \ dotnet#method('Contains(', 'float64 x, float64 y)', 'bool'),
  \ dotnet#method('Contains(', 'Rect rect)', 'bool'),
  \ dotnet#method('IntersectsWith(', 'Rect rect)', 'bool'),
  \ dotnet#method('Intersect(', 'Rect rect)', 'void'),
  \ dotnet#method('Intersect(', 'Rect rect1, Rect rect2)', 'static Rect'),
  \ dotnet#method('Union(', 'Rect rect)', 'void'),
  \ dotnet#method('Union(', 'Rect rect1, Rect rect2)', 'static Rect'),
  \ dotnet#method('Union(', 'Point point)', 'void'),
  \ dotnet#method('Union(', 'Rect rect, Point point)', 'static Rect'),
  \ dotnet#method('Offset(', 'VRect offsetVRect)', 'void'),
  \ dotnet#method('Offset(', 'float64 offsetX, float64 offsetY)', 'void'),
  \ dotnet#method('Offset(', 'Rect rect, VRect offsetVRect)', 'static Rect'),
  \ dotnet#method('Offset(', 'Rect rect, float64 offsetX, float64 offsetY)', 'static Rect'),
  \ dotnet#method('Inflate(', 'Size size)', 'void'),
  \ dotnet#method('Inflate(', 'float64 width, float64 height)', 'void'),
  \ dotnet#method('Inflate(', 'Rect rect, Size size)', 'static Rect'),
  \ dotnet#method('Inflate(', 'Rect rect, float64 width, float64 height)', 'static Rect'),
  \ dotnet#method('Transform(', 'Rect rect, Matrix matrix)', 'static Rect'),
  \ dotnet#method('Transform(', 'Matrix matrix)', 'void'),
  \ dotnet#method('Scale(', 'float64 scaleX, float64 scaleY)', 'void'),
  \ dotnet#method('Rect(', ')', 'static void .'),
  \ dotnet#prop('Empty', 'Rect'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('Location', 'Point'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Left', 'float64'),
  \ dotnet#prop('Top', 'float64'),
  \ dotnet#prop('Right', 'float64'),
  \ dotnet#prop('Bottom', 'float64'),
  \ dotnet#prop('TopLeft', 'Point'),
  \ dotnet#prop('TopRight', 'Point'),
  \ dotnet#prop('BottomLeft', 'Point'),
  \ dotnet#prop('BottomRight', 'Point'),
  \ ])

call dotnet#class('RectConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('RectConverter(', ')', 'void'),
  \ ])

call dotnet#class('Size', 'ValueType', [ 
  \ dotnet#field('_width', 'float64'),
  \ dotnet#field('_height', 'float64'),
  \ dotnet#method('op_Equality(', 'Size size1, Size size2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Size size1, Size size2)', 'static bool'),
  \ dotnet#method('Equals(', 'Size size1, Size size2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Size value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Size'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Size(', 'float64 width, float64 height)', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static Size'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('set_Width(', 'float64 value)', 'void'),
  \ dotnet#method('get_Height(', ')', 'float64'),
  \ dotnet#method('set_Height(', 'float64 value)', 'void'),
  \ dotnet#method('op_Explicit(', 'Size size)', 'static'),
  \ dotnet#method('op_Explicit(', 'Size size)', 'static'),
  \ dotnet#method('Size(', ')', 'static void .'),
  \ dotnet#prop('Empty', 'Size'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ ])

call dotnet#class('SizeConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('SizeConverter(', ')', 'void'),
  \ ])

call dotnet#class('VVector', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#method('op_Equality(', 'VVector vVector1, VVector vVector2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'VVector vVector1, VVector vVector2)', 'static bool'),
  \ dotnet#method('Equals(', 'VVector vVector1, VVector vVector2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'VVector value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static VVector'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Vector(', 'float64 x, float64 y)', 'void'),
  \ dotnet#method('get_Length(', ')', 'float64'),
  \ dotnet#method('get_LengthSquared(', ')', 'float64'),
  \ dotnet#method('Normalize(', ')', 'void'),
  \ dotnet#method('CrossProduct(', 'VVector vVector1, VVector vVector2)', 'static float64'),
  \ dotnet#method('AngleBetween(', 'VVector vVector1, VVector vVector2)', 'static float64'),
  \ dotnet#method('op_UnaryNegation(', 'VVector vVector)', 'static'),
  \ dotnet#method('Negate(', ')', 'void'),
  \ dotnet#method('op_Addition(', 'VVector vVector1, VVector vVector2)', 'static'),
  \ dotnet#method('Add(', 'VVector vVector1, VVector vVector2)', 'static VVector'),
  \ dotnet#method('op_Subtraction(', 'VVector vVector1, VVector vVector2)', 'static'),
  \ dotnet#method('Subtract(', 'VVector vVector1, VVector vVector2)', 'static VVector'),
  \ dotnet#method('op_Addition(', 'VVector vVector, Point point)', 'static'),
  \ dotnet#method('Add(', 'VVector vVector, Point point)', 'static Point'),
  \ dotnet#method('op_Multiply(', 'VVector vVector, float64 scalar)', 'static'),
  \ dotnet#method('Multiply(', 'VVector vVector, float64 scalar)', 'static VVector'),
  \ dotnet#method('op_Multiply(', 'float64 scalar, VVector vVector)', 'static'),
  \ dotnet#method('Multiply(', 'float64 scalar, VVector vVector)', 'static VVector'),
  \ dotnet#method('op_Division(', 'VVector vVector, float64 scalar)', 'static'),
  \ dotnet#method('Divide(', 'VVector vVector, float64 scalar)', 'static VVector'),
  \ dotnet#method('op_Multiply(', 'VVector vVector, Matrix matrix)', 'static'),
  \ dotnet#method('Multiply(', 'VVector vVector, Matrix matrix)', 'static VVector'),
  \ dotnet#method('op_Multiply(', 'VVector vVector1, VVector vVector2)', 'static float64'),
  \ dotnet#method('Multiply(', 'VVector vVector1, VVector vVector2)', 'static float64'),
  \ dotnet#method('Determinant(', 'VVector vVector1, VVector vVector2)', 'static float64'),
  \ dotnet#method('op_Explicit(', 'VVector vVector)', 'static Size'),
  \ dotnet#method('op_Explicit(', 'VVector vVector)', 'static'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Length', 'float64'),
  \ dotnet#prop('LengthSquared', 'float64'),
  \ ])

call dotnet#class('VVectorConverterConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('VectorConverter(', ')', 'void'),
  \ ])

call dotnet#class('LocalValueEntry', 'ValueType', [ 
  \ dotnet#field('_dp', 'DependencyProperty'),
  \ dotnet#field('_value', 'object'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'LocalValueEntry obj1, LocalValueEntry obj2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'LocalValueEntry obj1, LocalValueEntry obj2)', 'static bool'),
  \ dotnet#method('get_Property(', ')', 'DependencyProperty'),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('LocalValueEntry(', 'class DependencyProperty dp, object value)', 'void'),
  \ dotnet#prop('Property', 'DependencyProperty'),
  \ dotnet#prop('Value', 'object'),
  \ ])

call dotnet#class('PropertyChangedCallback', 'MulticastDelegate', [ 
  \ dotnet#method('PropertyChangedCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('PropertyMetadata', 'Object', [ 
  \ dotnet#field('value__', 'uint32'),
  \ dotnet#field('_flags', 'PropertyMetadata/MetadataFlags'),
  \ dotnet#method('PropertyMetadata(', ')', 'void'),
  \ dotnet#method('PropertyMetadata(', 'object defaultValue)', 'void'),
  \ dotnet#method('PropertyMetadata(', 'class PropertyChangedCallback propertyChangedCallback)', 'void'),
  \ dotnet#method('PropertyMetadata(', 'object defaultValue, PropertyChangedCallback propertyChangedCallback)', 'void'),
  \ dotnet#method('PropertyMetadata(', 'object defaultValue, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback)', 'void'),
  \ dotnet#method('get_DefaultValue(', ')', 'object'),
  \ dotnet#method('set_DefaultValue(', 'object value)', 'void'),
  \ dotnet#method('get_UsingDefaultValueFPropertyMetadatay(', ')', 'bool'),
  \ dotnet#method('GetDefaultValue(', 'class DependencyObject owner, DependencyProperty property)', 'object'),
  \ dotnet#method('ClearCachedDefaultValue(', 'class DependencyObject owner, DependencyProperty property)', 'void'),
  \ dotnet#method('PromoteAllCachedDefaultValues(', 'class DependencyObject owner)', 'static void'),
  \ dotnet#method('RemoveAllCachedDefaultValues(', 'class Freezable owner)', 'static void'),
  \ dotnet#method('DefaultValueWasSet(', ')', 'bool'),
  \ dotnet#method('get_PropertyChangedCallback(', ')', 'PropertyChangedCallback'),
  \ dotnet#method('set_PropertyChangedCallback(', 'class PropertyChangedCallback value)', 'void'),
  \ dotnet#method('get_CoerceValueCallback(', ')', 'CoerceValueCallback'),
  \ dotnet#method('set_CoerceValueCallback(', 'class CoerceValueCallback value)', 'void'),
  \ dotnet#method('get_GetReadOnlyValueCallback(', ')', 'strict'),
  \ dotnet#method('get_FreezeValueCallback(', ')', '.method'),
  \ dotnet#method('set_FreezeValueCallback(', 'class FreezeValueCallback value)', 'void'),
  \ dotnet#method('CreateInstance(', ')', 'strict'),
  \ dotnet#method('Copy(', 'class DependencyProperty dp)', 'PropertyMetadata'),
  \ dotnet#method('Merge(', 'class PropertyMetadata baseMetadata, DependencyProperty dp)', 'void'),
  \ dotnet#method('InvokeMerge(', 'class PropertyMetadata baseMetadata, DependencyProperty dp)', 'void'),
  \ dotnet#method('OnApply(', 'class DependencyProperty dp, Type targetType)', 'void'),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('Seal(', 'class DependencyProperty dp, Type targetType)', 'void'),
  \ dotnet#method('get_IsDefaultValueModified(', ')', 'bool'),
  \ dotnet#method('get_IsInherited(', ')', 'bool'),
  \ dotnet#method('set_IsInherited(', 'bool value)', 'void'),
  \ dotnet#method('WriteFlag(', 'PropertyMetadata/MetadataFlags id, bool value)', 'void'),
  \ dotnet#method('ReadFlag(', 'PropertyMetadata/MetadataFlags id)', 'bool'),
  \ dotnet#method('get_Sealed(', ')', 'bool'),
  \ dotnet#method('set_Sealed(', 'bool value)', 'void'),
  \ dotnet#method('PropertyMetadata(', ')', 'static void .'),
  \ dotnet#prop('DefaultValue', 'object'),
  \ dotnet#prop('UsingDefaultValueFPropertyMetadatay', 'bool'),
  \ dotnet#prop('PropertyChangedCallback', 'PropertyChangedCallback'),
  \ dotnet#prop('CoerceValueCallback', 'CoerceValueCallback'),
  \ dotnet#prop('GetReadOnlyValueCallback', 'GetReadOnlyValueCallback'),
  \ dotnet#prop('FreezeValueCallback', 'FreezeValueCallback'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('IsDefaultValueModified', 'bool'),
  \ dotnet#prop('IsInherited', 'bool'),
  \ dotnet#prop('Sealed', 'bool'),
  \ ])

call dotnet#class('SplashScreen', 'Object', [ 
  \ dotnet#method('SplashScreen(', 'string resourceName)', 'void'),
  \ dotnet#method('SplashScreen(', 'class Assembly resourceAssembly, string resourceName)', 'void'),
  \ dotnet#method('Show(', 'bool autoClose)', 'void'),
  \ dotnet#method('Show(', 'bool autoClose, bool topMost)', 'void'),
  \ dotnet#method('Close(', 'TimeSpan fadeoutDuration)', 'void'),
  \ ])

call dotnet#class('ValidateValueCallback', 'MulticastDelegate', [ 
  \ dotnet#method('ValidateValueCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object value)', 'bool'),
  \ dotnet#method('BeginInvoke(', 'object value, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'bool'),
  \ ])

call dotnet#class('AutoResizedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('AutoResizedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, AutoResizedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, AutoResizedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('AutoResizedEventArgs', 'EventArgs', [ 
  \ dotnet#method('AutoResizedEventArgs(', 'Size size)', 'void'),
  \ dotnet#method('get_Size(', ')', 'Size'),
  \ dotnet#prop('Size', 'Size'),
  \ ])

call dotnet#class('Clipboard', 'Object', [ 
  \ dotnet#method('Clear(', ')', 'static void'),
  \ dotnet#method('ContainsAudio(', ')', 'static bool'),
  \ dotnet#method('ContainsData(', 'string format)', 'static bool'),
  \ dotnet#method('ContainsFileDropList(', ')', 'static bool'),
  \ dotnet#method('ContainsImage(', ')', 'static bool'),
  \ dotnet#method('ContainsText(', ')', 'static bool'),
  \ dotnet#method('ContainsText(', 'TextDataFormat format)', 'static bool'),
  \ dotnet#method('GetAudioStream(', ')', 'static Stream'),
  \ dotnet#method('GetData(', 'string format)', 'static object'),
  \ dotnet#method('GetFileDropList(', ')', 'static StringCollection'),
  \ dotnet#method('GetImage(', ')', 'static BitmapSource'),
  \ dotnet#method('GetText(', ')', 'static string'),
  \ dotnet#method('GetText(', 'TextDataFormat format)', 'static string'),
  \ dotnet#method('SetAudio(', 'uint8[] audioBytes)', 'static void'),
  \ dotnet#method('SetAudio(', 'class Stream audioStream)', 'static void'),
  \ dotnet#method('SetData(', 'string format, object data)', 'static void'),
  \ dotnet#method('SetFileDropList(', 'class StringCollection fileDropList)', 'static void'),
  \ dotnet#method('SetImage(', 'class BitmapSource image)', 'static void'),
  \ dotnet#method('SetText(', 'string text)', 'static void'),
  \ dotnet#method('SetText(', 'string text, TextDataFormat format)', 'static void'),
  \ dotnet#method('GetDataObject(', ')', 'static IDataObject'),
  \ dotnet#method('IsCurrent(', 'class IDataObject data)', 'static bool'),
  \ dotnet#method('SetDataObject(', 'object data)', 'static void'),
  \ dotnet#method('SetDataObject(', 'object data, bool copy)', 'static void'),
  \ dotnet#method('CriticalSetDataObject(', 'object data, bool copy)', 'static void'),
  \ dotnet#method('IsClipboardPopulated(', ')', 'static bool'),
  \ ])

call dotnet#class('ContentElement', 'DependencyObject', [ 
  \ dotnet#field('_parent', 'DependencyObject'),
  \ dotnet#method('GetUIParent(', ')', 'DependencyObject'),
  \ dotnet#method('GetUIParent(', 'bool continuePastVisualTree)', 'DependencyObject'),
  \ dotnet#method('GetUIParentCore(', ')', 'famorassem'),
  \ dotnet#method('get_Parent(', ')', '.method'),
  \ dotnet#method('OnContentParentChanged(', 'class DependencyObject oldParent)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'family'),
  \ dotnet#method('CreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('GetAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('AddSynchronizedInputPreOpportunityHandler(', 'class EventRoute route, RoutedEventArgs args)', 'void'),
  \ dotnet#method('AddSynchronizedInputPostOpportunityHandler(', 'class EventRoute route, RoutedEventArgs args)', 'void'),
  \ dotnet#method('SynchronizedInputPreOpportunityHandler(', 'object sender, RoutedEventArgs args)', 'void'),
  \ dotnet#method('SynchronizedInputPostOpportunityHandler(', 'object sender, RoutedEventArgs args)', 'void'),
  \ dotnet#method('StartListeningSynchronizedInput(', 'SynchronizedInputType inputType)', 'bool'),
  \ dotnet#method('CancelSynchronizedInput(', ')', 'void'),
  \ dotnet#method('get_IsMouseDirectlyOver(', ')', 'bool'),
  \ dotnet#method('SynchronizeReverseInheritPropertyFlags(', 'class DependencyObject oldParent, bool isCoreParent)', 'void'),
  \ dotnet#method('BlockReverseInheritance(', ')', 'strict bool'),
  \ dotnet#method('get_IsMouseOver(', ')', 'bool'),
  \ dotnet#method('get_IsStylusOver(', ')', 'bool'),
  \ dotnet#method('get_IsKeyboardFocusWithin(', ')', 'bool'),
  \ dotnet#method('get_IsMouseCaptured(', ')', 'bool'),
  \ dotnet#method('CaptureMouse(', ')', 'bool'),
  \ dotnet#method('ReleaseMouseCapture(', ')', 'void'),
  \ dotnet#method('get_IsMouseCaptureWithin(', ')', 'bool'),
  \ dotnet#method('get_IsStylusDirectlyOver(', ')', 'bool'),
  \ dotnet#method('get_IsStylusCaptured(', ')', 'bool'),
  \ dotnet#method('CaptureStylus(', ')', 'bool'),
  \ dotnet#method('ReleaseStylusCapture(', ')', 'void'),
  \ dotnet#method('get_IsStylusCaptureWithin(', ')', 'bool'),
  \ dotnet#method('get_IsKeyboardFocused(', ')', 'bool'),
  \ dotnet#method('Focus(', ')', 'bool'),
  \ dotnet#method('MoveFocus(', 'class TraversalRequest request)', 'bool'),
  \ dotnet#method('PredictFocus(', 'FocusNavigationDirection direction)', ''),
  \ dotnet#method('add_GotFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_GotFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_LostFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_LostFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnGotFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnLostFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_IsFocused(', ')', 'bool'),
  \ dotnet#method('get_IsEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsEnabled(', 'bool value)', 'void'),
  \ dotnet#method('add_IsEnabledChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsEnabledChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_IsEnabledCore(', ')', 'bool'),
  \ dotnet#method('get_Focusable(', ')', 'bool'),
  \ dotnet#method('set_Focusable(', 'bool value)', 'void'),
  \ dotnet#method('add_FocusableChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_FocusableChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_IsInputMethodEnabled(', ')', 'bool'),
  \ dotnet#method('get_AllowDrop(', ')', 'bool'),
  \ dotnet#method('set_AllowDrop(', 'bool value)', 'void'),
  \ dotnet#method('InvalidateForceInheritPropertyOnChildren(', 'class DependencyProperty property)', 'strict void'),
  \ dotnet#method('get_AreAnyTouchesOver(', ')', 'bool'),
  \ dotnet#method('get_AreAnyTouchesDirectlyOver(', ')', 'bool'),
  \ dotnet#method('get_AreAnyTouchesCapturedWithin(', ')', 'bool'),
  \ dotnet#method('get_AreAnyTouchesCaptured(', ')', 'bool'),
  \ dotnet#method('CaptureTouch(', 'class TouchDevice touchDevice)', 'bool'),
  \ dotnet#method('ReleaseTouchCapture(', 'class TouchDevice touchDevice)', 'bool'),
  \ dotnet#method('ReleaseAllTouchCaptures(', ')', 'void'),
  \ dotnet#method('get_TouchesCaptured(', ')', 'IEnumerable'),
  \ dotnet#method('get_TouchesCapturedWithin(', ')', 'IEnumerable'),
  \ dotnet#method('get_TouchesOver(', ')', 'IEnumerable'),
  \ dotnet#method('get_TouchesDirectlyOver(', ')', 'IEnumerable'),
  \ dotnet#method('get_HasAutomationPeer(', ')', 'bool'),
  \ dotnet#method('set_HasAutomationPeer(', 'bool value)', 'void'),
  \ dotnet#method('ApplyAnimationClock(', 'class DependencyProperty dp, AnimationClock clock)', 'void'),
  \ dotnet#method('ApplyAnimationClock(', 'class DependencyProperty dp, AnimationClock clock, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('BeginAnimation(', 'class DependencyProperty dp, AnimationTimeline animation)', 'void'),
  \ dotnet#method('BeginAnimation(', 'class DependencyProperty dp, AnimationTimeline animation, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('get_HasAnimatedProperties(', ')', 'bool'),
  \ dotnet#method('GetAnimationBaseValue(', 'class DependencyProperty dp)', 'object'),
  \ dotnet#method('EvaluateAnimatedValueCore(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& entry)', 'void'),
  \ dotnet#method('get_InputBindings(', ')', 'InputBindingCollection'),
  \ dotnet#method('get_InputBindingsInternal(', ')', '.method'),
  \ dotnet#method('ShouldSerializeInputBindings(', ')', 'bool'),
  \ dotnet#method('get_CommandBindings(', ')', 'CommandBindingCollection'),
  \ dotnet#method('get_CommandBindingsInternal(', ')', '.method'),
  \ dotnet#method('ShouldSerializeCommandBindings(', ')', 'bool'),
  \ dotnet#method('BuildRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict bool'),
  \ dotnet#method('BuildRoute(', 'class EventRoute route, RoutedEventArgs args)', 'void'),
  \ dotnet#method('RaiseEvent(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('RaiseEvent(', 'class RoutedEventArgs args, bool trusted)', 'void'),
  \ dotnet#method('RaiseTrustedEvent(', 'class RoutedEventArgs args)', 'void'),
  \ dotnet#method('AdjustEventSource(', 'class RoutedEventArgs args)', 'strict object'),
  \ dotnet#method('AddHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'void'),
  \ dotnet#method('AddHandler(', 'class RoutedEvent routedEvent, Delegate handler, bool handledEventsToo)', 'void'),
  \ dotnet#method('OnAddHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('RemoveHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'void'),
  \ dotnet#method('OnRemoveHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('AddToEventRoute(', 'class EventRoute route, RoutedEventArgs e)', 'void'),
  \ dotnet#method('AddToEventRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('get_EventHandlersStore(', ')', '.method'),
  \ dotnet#method('EnsureEventHandlersStore(', ')', 'void'),
  \ dotnet#method('add_PreviewMouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseRightButtonDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseRightButtonDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseRightButtonUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseRightButtonUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseMove(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseWheel(', 'class MouseWheelEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('OnMouseWheel(', 'class MouseWheelEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseEnter(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseEnter(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnMouseEnter(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseLeave(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseLeave(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeave(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GotMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_GotMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnGotMouseCapture(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_LostMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_LostMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnLostMouseCapture(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_QueryCursor(', 'class QueryCursorEventHandler value)', 'void'),
  \ dotnet#method('remove_QueryCursor(', 'class QueryCursorEventHandler value)', 'void'),
  \ dotnet#method('OnQueryCursor(', 'class QueryCursorEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusDown(', 'class StylusDownEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('OnStylusDown(', 'class StylusDownEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusUp(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusUp(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusMove(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusMove(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusInAirMove(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusInAirMove(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusEnter(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusEnter(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusEnter(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusLeave(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusLeave(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusLeave(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusInRange(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusInRange(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusOutOfRange(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusOutOfRange(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusSystemGesture(', 'class StylusSystemGestureEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('OnStylusSystemGesture(', 'class StylusSystemGestureEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GotStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_GotStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnGotStylusCapture(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_LostStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_LostStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnLostStylusCapture(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnStylusButtonDown(', 'class StylusButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnStylusButtonUp(', 'class StylusButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusButtonDown(', 'class StylusButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusButtonUp(', 'class StylusButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewKeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewKeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewKeyDown(', 'class KeyEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_KeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_KeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewKeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewKeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewKeyUp(', 'class KeyEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_KeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_KeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnKeyUp(', 'class KeyEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_GotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewLostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewLostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_LostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_LostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewTextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTextInput(', 'class TextCompositionEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('remove_TextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('OnTextInput(', 'class TextCompositionEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewQueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewQueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewQueryContinueDrag(', 'class QueryContinueDragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_QueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('remove_QueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('OnQueryContinueDrag(', 'class QueryContinueDragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewGiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewGiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewGiveFeedback(', 'class GiveFeedbackEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('remove_GiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('OnGiveFeedback(', 'class GiveFeedbackEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewDragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDragEnter(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_DragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_DragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDragEnter(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewDragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDragOver(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_DragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_DragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDragOver(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewDragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDragLeave(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_DragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_DragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDragLeave(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewDrop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDrop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDrop(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_Drop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_Drop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDrop(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewTouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTouchDown(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchDown(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewTouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTouchMove(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchMove(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewTouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTouchUp(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchUp(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GotTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_GotTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnGotTouchCapture(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_LostTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_LostTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnLostTouchCapture(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchEnter(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchEnter(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchEnter(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchLeave(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchLeave(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchLeave(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_IsMouseDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsMouseDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsMouseDirectlyOverChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsKeyboardFocusWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsKeyboardFocusWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('RaiseIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('add_IsMouseCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsMouseCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsMouseCapturedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsMouseCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsMouseCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsMouseCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('RaiseIsMouseCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('add_IsStylusDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsStylusDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsStylusDirectlyOverChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsStylusCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsStylusCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsStylusCapturedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsStylusCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsStylusCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsStylusCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('RaiseIsStylusCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('add_IsKeyboardFocusedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsKeyboardFocusedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('ReadFlag(', 'CoreFlags field)', 'bool'),
  \ dotnet#method('WriteFlag(', 'CoreFlags field, bool value)', 'void'),
  \ dotnet#method('ContentElement(', ')', 'void'),
  \ dotnet#method('ContentElement(', ')', 'static void .'),
  \ dotnet#event('GotFocus', 'RoutedEventHandler'),
  \ dotnet#event('LostFocus', 'RoutedEventHandler'),
  \ dotnet#event('IsEnabledChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('FocusableChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('PreviewMouseDown', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseDown', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseUp', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseUp', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseLeftButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseLeftButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseLeftButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseLeftButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseRightButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseRightButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseRightButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseRightButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseMove', 'MouseEventHandler'),
  \ dotnet#event('MouseMove', 'MouseEventHandler'),
  \ dotnet#event('PreviewMouseWheel', 'MouseWheelEventHandler'),
  \ dotnet#event('MouseWheel', 'MouseWheelEventHandler'),
  \ dotnet#event('MouseEnter', 'MouseEventHandler'),
  \ dotnet#event('MouseLeave', 'MouseEventHandler'),
  \ dotnet#event('GotMouseCapture', 'MouseEventHandler'),
  \ dotnet#event('LostMouseCapture', 'MouseEventHandler'),
  \ dotnet#event('QueryCursor', 'QueryCursorEventHandler'),
  \ dotnet#event('PreviewStylusDown', 'StylusDownEventHandler'),
  \ dotnet#event('StylusDown', 'StylusDownEventHandler'),
  \ dotnet#event('PreviewStylusUp', 'StylusEventHandler'),
  \ dotnet#event('StylusUp', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusMove', 'StylusEventHandler'),
  \ dotnet#event('StylusMove', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusInAirMove', 'StylusEventHandler'),
  \ dotnet#event('StylusInAirMove', 'StylusEventHandler'),
  \ dotnet#event('StylusEnter', 'StylusEventHandler'),
  \ dotnet#event('StylusLeave', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusInRange', 'StylusEventHandler'),
  \ dotnet#event('StylusInRange', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusOutOfRange', 'StylusEventHandler'),
  \ dotnet#event('StylusOutOfRange', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusSystemGesture', 'StylusSystemGestureEventHandler'),
  \ dotnet#event('StylusSystemGesture', 'StylusSystemGestureEventHandler'),
  \ dotnet#event('GotStylusCapture', 'StylusEventHandler'),
  \ dotnet#event('LostStylusCapture', 'StylusEventHandler'),
  \ dotnet#event('StylusButtonDown', 'StylusButtonEventHandler'),
  \ dotnet#event('StylusButtonUp', 'StylusButtonEventHandler'),
  \ dotnet#event('PreviewStylusButtonDown', 'StylusButtonEventHandler'),
  \ dotnet#event('PreviewStylusButtonUp', 'StylusButtonEventHandler'),
  \ dotnet#event('PreviewKeyDown', 'KeyEventHandler'),
  \ dotnet#event('KeyDown', 'KeyEventHandler'),
  \ dotnet#event('PreviewKeyUp', 'KeyEventHandler'),
  \ dotnet#event('KeyUp', 'KeyEventHandler'),
  \ dotnet#event('PreviewGotKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('GotKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('PreviewLostKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('LostKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('PreviewTextInput', 'TextCompositionEventHandler'),
  \ dotnet#event('TextInput', 'TextCompositionEventHandler'),
  \ dotnet#event('PreviewQueryContinueDrag', 'QueryContinueDragEventHandler'),
  \ dotnet#event('QueryContinueDrag', 'QueryContinueDragEventHandler'),
  \ dotnet#event('PreviewGiveFeedback', 'GiveFeedbackEventHandler'),
  \ dotnet#event('GiveFeedback', 'GiveFeedbackEventHandler'),
  \ dotnet#event('PreviewDragEnter', 'DragEventHandler'),
  \ dotnet#event('DragEnter', 'DragEventHandler'),
  \ dotnet#event('PreviewDragOver', 'DragEventHandler'),
  \ dotnet#event('DragOver', 'DragEventHandler'),
  \ dotnet#event('PreviewDragLeave', 'DragEventHandler'),
  \ dotnet#event('DragLeave', 'DragEventHandler'),
  \ dotnet#event('PreviewDrop', 'DragEventHandler'),
  \ dotnet#event('Drop', 'DragEventHandler'),
  \ dotnet#event('PreviewTouchDown', 'EventHandler'),
  \ dotnet#event('TouchDown', 'EventHandler'),
  \ dotnet#event('PreviewTouchMove', 'EventHandler'),
  \ dotnet#event('TouchMove', 'EventHandler'),
  \ dotnet#event('PreviewTouchUp', 'EventHandler'),
  \ dotnet#event('TouchUp', 'EventHandler'),
  \ dotnet#event('GotTouchCapture', 'EventHandler'),
  \ dotnet#event('LostTouchCapture', 'EventHandler'),
  \ dotnet#event('TouchEnter', 'EventHandler'),
  \ dotnet#event('TouchLeave', 'EventHandler'),
  \ dotnet#event('IsMouseDirectlyOverChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsKeyboardFocusWithinChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsMouseCapturedChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsMouseCaptureWithinChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsStylusDirectlyOverChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsStylusCapturedChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsStylusCaptureWithinChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsKeyboardFocusedChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#prop('Parent', 'DependencyObject'),
  \ dotnet#prop('IsMouseDirectlyOver', 'bool'),
  \ dotnet#prop('IsMouseOver', 'bool'),
  \ dotnet#prop('IsStylusOver', 'bool'),
  \ dotnet#prop('IsKeyboardFocusWithin', 'bool'),
  \ dotnet#prop('IsMouseCaptured', 'bool'),
  \ dotnet#prop('IsMouseCaptureWithin', 'bool'),
  \ dotnet#prop('IsStylusDirectlyOver', 'bool'),
  \ dotnet#prop('IsStylusCaptured', 'bool'),
  \ dotnet#prop('IsStylusCaptureWithin', 'bool'),
  \ dotnet#prop('IsKeyboardFocused', 'bool'),
  \ dotnet#prop('IsFocused', 'bool'),
  \ dotnet#prop('IsEnabled', 'bool'),
  \ dotnet#prop('IsEnabledCore', 'bool'),
  \ dotnet#prop('Focusable', 'bool'),
  \ dotnet#prop('IsInputMethodEnabled', 'bool'),
  \ dotnet#prop('AllowDrop', 'bool'),
  \ dotnet#prop('AreAnyTouchesOver', 'bool'),
  \ dotnet#prop('AreAnyTouchesDirectlyOver', 'bool'),
  \ dotnet#prop('AreAnyTouchesCapturedWithin', 'bool'),
  \ dotnet#prop('AreAnyTouchesCaptured', 'bool'),
  \ dotnet#prop('TouchesCaptured', 'IEnumerable'),
  \ dotnet#prop('TouchesCapturedWithin', 'IEnumerable'),
  \ dotnet#prop('TouchesOver', 'IEnumerable'),
  \ dotnet#prop('TouchesDirectlyOver', 'IEnumerable'),
  \ dotnet#prop('HasAutomationPeer', 'bool'),
  \ dotnet#prop('HasAnimatedProperties', 'bool'),
  \ dotnet#prop('InputBindings', 'InputBindingCollection'),
  \ dotnet#prop('InputBindingsInternal', 'InputBindingCollection'),
  \ dotnet#prop('CommandBindings', 'CommandBindingCollection'),
  \ dotnet#prop('CommandBindingsInternal', 'CommandBindingCollection'),
  \ dotnet#prop('EventHandlersStore', 'EventHandlersStore'),
  \ ])

call dotnet#class('ContentOperations', 'Object', [ 
  \ dotnet#method('GetParent(', 'class ContentElement reference)', 'static DependencyObject'),
  \ dotnet#method('SetParent(', 'class ContentElement reference, DependencyObject parent)', 'static void'),
  \ ])

call dotnet#class('CultureInfoIetfLanguageTagConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('CultureInfoIetfLanguageTagConverter(', ')', 'void'),
  \ ])

call dotnet#class('DataFormats', 'Object', [ 
  \ dotnet#method('GetDataFormat(', 'int32 id)', 'static DataFormat'),
  \ dotnet#method('GetDataFormat(', 'string format)', 'static DataFormat'),
  \ dotnet#method('ConvertToDataFormats(', 'TextDataFormat textDataformat)', 'static string'),
  \ dotnet#method('IsValidTextDataFormat(', 'TextDataFormat textDataFormat)', 'static bool'),
  \ dotnet#method('DataFormats(', ')', 'static void .'),
  \ ])

call dotnet#class('DataFormat', 'Object', [ 
  \ dotnet#method('DataFormat(', 'string name, int32 id)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Id(', ')', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Id', 'int32'),
  \ ])

call dotnet#class('DataObject', 'Object', [ 
  \ dotnet#method('DataObject(', ')', 'void'),
  \ dotnet#method('DataObject(', 'object data)', 'void'),
  \ dotnet#method('DataObject(', 'string format, object data)', 'void'),
  \ dotnet#method('DataObject(', 'class Type format, object data)', 'void'),
  \ dotnet#method('DataObject(', 'string format, object data, bool autoConvert)', 'void'),
  \ dotnet#method('DataObject(', 'class IDataObject data)', 'void'),
  \ dotnet#method('DataObject(', 'class IDataObject data)', 'void'),
  \ dotnet#method('GetData(', 'string format, bool autoConvert)', 'object'),
  \ dotnet#method('GetData(', 'string format)', 'object'),
  \ dotnet#method('GetData(', 'class Type format)', 'object'),
  \ dotnet#method('GetDataPresent(', 'class Type format)', 'bool'),
  \ dotnet#method('GetDataPresent(', 'string format, bool autoConvert)', 'bool'),
  \ dotnet#method('GetDataPresent(', 'string format)', 'bool'),
  \ dotnet#method('GetFormats(', 'bool autoConvert)', 'string[]'),
  \ dotnet#method('GetFormats(', ')', 'string[]'),
  \ dotnet#method('SetData(', 'object data)', 'void'),
  \ dotnet#method('SetData(', 'string format, object data)', 'void'),
  \ dotnet#method('SetData(', 'class Type format, object data)', 'void'),
  \ dotnet#method('SetData(', 'string format, object data, bool autoConvert)', 'void'),
  \ dotnet#method('ContainsAudio(', ')', 'bool'),
  \ dotnet#method('ContainsFileDropList(', ')', 'bool'),
  \ dotnet#method('ContainsImage(', ')', 'bool'),
  \ dotnet#method('ContainsText(', ')', 'bool'),
  \ dotnet#method('ContainsText(', 'TextDataFormat format)', 'bool'),
  \ dotnet#method('GetAudioStream(', ')', 'Stream'),
  \ dotnet#method('GetFileDropList(', ')', 'StringCollection'),
  \ dotnet#method('GetImage(', ')', 'BitmapSource'),
  \ dotnet#method('GetText(', ')', 'string'),
  \ dotnet#method('GetText(', 'TextDataFormat format)', 'string'),
  \ dotnet#method('SetAudio(', 'uint8[] audioBytes)', 'void'),
  \ dotnet#method('SetAudio(', 'class Stream audioStream)', 'void'),
  \ dotnet#method('SetFileDropList(', 'class StringCollection fileDropList)', 'void'),
  \ dotnet#method('SetImage(', 'class BitmapSource image)', 'void'),
  \ dotnet#method('SetText(', 'string textData)', 'void'),
  \ dotnet#method('SetText(', 'string textData, TextDataFormat format)', 'void'),
  \ dotnet#method('DAdvise(', 'FORMATETC& pFormatetc, ADVF advf, IAdviseSink pAdvSink, [out] int32& pdwConnection)', 'int32 '),
  \ dotnet#method('DUnadvise(', 'int32 dwConnection)', 'void '),
  \ dotnet#method('EnumDAdvise(', '[out] IEnumSTATDATA& enumAdvise)', 'int32 '),
  \ dotnet#method('EnumFormatEtc(', 'DATADIR dwDirection)', ''),
  \ dotnet#method('GetCanonicalFormatEtc(', 'FORMATETC& pformatetcIn, [out] FORMATETC& pformatetcOut)', 'int32 '),
  \ dotnet#method('GetData(', 'FORMATETC& formatetc, [out] STGMEDIUM& medium)', 'void '),
  \ dotnet#method('GetDataHere(', 'FORMATETC& formatetc, STGMEDIUM& medium)', 'void '),
  \ dotnet#method('QueryGetData(', 'FORMATETC& formatetc)', 'int32 '),
  \ dotnet#method('SetData(', 'FORMATETC& pFormatetcIn, STGMEDIUM& pmedium, bool fRelease)', 'void '),
  \ dotnet#method('AddCopyingHandler(', 'class DependencyObject element, DataObjectCopyingEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveCopyingHandler(', 'class DependencyObject element, DataObjectCopyingEventHandler handler)', 'static void'),
  \ dotnet#method('AddPastingHandler(', 'class DependencyObject element, DataObjectPastingEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePastingHandler(', 'class DependencyObject element, DataObjectPastingEventHandler handler)', 'static void'),
  \ dotnet#method('AddSettingDataHandler(', 'class DependencyObject element, DataObjectSettingDataEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveSettingDataHandler(', 'class DependencyObject element, DataObjectSettingDataEventHandler handler)', 'static void'),
  \ dotnet#method('Win32GlobalAlloc(', 'int32 flags, int bytes)', 'static int'),
  \ dotnet#method('Win32GlobalFree(', 'HandleRef handle)', 'static void'),
  \ dotnet#method('Win32GlobalReAlloc(', 'HandleRef handle, int bytes, int32 flags)', 'static int'),
  \ dotnet#method('Win32GlobalLock(', 'HandleRef handle)', 'static int'),
  \ dotnet#method('Win32GlobalUnlock(', 'HandleRef handle)', 'static void'),
  \ dotnet#method('Win32GlobalSize(', 'HandleRef handle)', 'static int'),
  \ dotnet#method('Win32SelectObject(', 'HandleRef handleDC, int handleObject)', 'static int'),
  \ dotnet#method('Win32DeleteObject(', 'HandleRef handleDC)', 'static void'),
  \ dotnet#method('Win32GetDC(', 'HandleRef handleDC)', 'static int'),
  \ dotnet#method('Win32CreateCompatibleDC(', 'HandleRef handleDC)', 'static int'),
  \ dotnet#method('Win32CreateCompatibleBitmap(', 'HandleRef handleDC, int32 width, int32 height)', 'static int'),
  \ dotnet#method('Win32DeleteDC(', 'HandleRef handleDC)', 'static void'),
  \ dotnet#method('Win32BitBlt(', 'HandleRef handledestination, int32 width, int32 height, HandleRef handleSource, int32 operationCode)', 'static void'),
  \ dotnet#method('Win32WideCharToMultiByte(', 'string wideString, int32 wideChars, uint8[] bytes, int32 byteCount)', 'static int32'),
  \ dotnet#method('GetMappedFormats(', 'string format)', 'static string[]'),
  \ dotnet#method('CriticalSetData(', 'string format, object data, bool autoConvert)', 'void'),
  \ dotnet#method('DataObject(', ')', 'static void .'),
  \ ])

call dotnet#class('RoutedEventArgs', 'EventArgs', [ 
  \ dotnet#method('RoutedEventArgs(', ')', 'void'),
  \ dotnet#method('RoutedEventArgs(', 'class RoutedEvent routedEvent)', 'void'),
  \ dotnet#method('RoutedEventArgs(', 'class RoutedEvent routedEvent, object source)', 'void'),
  \ dotnet#method('get_RoutedEvent(', ')', 'RoutedEvent'),
  \ dotnet#method('set_RoutedEvent(', 'class RoutedEvent value)', 'void'),
  \ dotnet#method('OverrideRoutedEvent(', 'class RoutedEvent newRoutedEvent)', 'void'),
  \ dotnet#method('get_Handled(', ')', 'bool'),
  \ dotnet#method('set_Handled(', 'bool value)', 'void'),
  \ dotnet#method('get_Source(', ')', 'object'),
  \ dotnet#method('set_Source(', 'object value)', 'void'),
  \ dotnet#method('OverrideSource(', 'object source)', 'void'),
  \ dotnet#method('get_OriginalSource(', ')', 'object'),
  \ dotnet#method('OnSetSource(', 'object source)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('InvokeHandler(', 'class Delegate handler, object target)', 'void'),
  \ dotnet#method('get_UserInitiated(', ')', 'bool'),
  \ dotnet#method('MarkAsUserInitiated(', ')', 'void'),
  \ dotnet#method('ClearUserInitiated(', ')', 'void'),
  \ dotnet#prop('RoutedEvent', 'RoutedEvent'),
  \ dotnet#prop('Handled', 'bool'),
  \ dotnet#prop('Source', 'object'),
  \ dotnet#prop('OriginalSource', 'object'),
  \ dotnet#prop('UserInitiated', 'bool'),
  \ ])

call dotnet#class('DataObjectEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('DataObjectEventArgs(', 'class RoutedEvent routedEvent, bool isDragDrop)', 'void'),
  \ dotnet#method('get_IsDragDrop(', ')', 'bool'),
  \ dotnet#method('get_CommandCancelled(', ')', 'bool'),
  \ dotnet#method('CancelCommand(', ')', 'void'),
  \ dotnet#prop('IsDragDrop', 'bool'),
  \ dotnet#prop('CommandCancelled', 'bool'),
  \ ])

call dotnet#class('DataObjectCopyingEventArgs', 'DataObjectEventArgs', [ 
  \ dotnet#method('DataObjectCopyingEventArgs(', 'class IDataObject dataObject, bool isDragDrop)', 'void'),
  \ dotnet#method('get_DataObject(', ')', 'IDataObject'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('DataObject', 'IDataObject'),
  \ ])

call dotnet#class('DataObjectCopyingEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DataObjectCopyingEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DataObjectCopyingEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DataObjectCopyingEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DataObjectPastingEventArgs', 'DataObjectEventArgs', [ 
  \ dotnet#method('DataObjectPastingEventArgs(', 'class IDataObject dataObject, bool isDragDrop, string formatToApply)', 'void'),
  \ dotnet#method('get_SourceDataObject(', ')', 'IDataObject'),
  \ dotnet#method('get_DataObject(', ')', 'IDataObject'),
  \ dotnet#method('set_DataObject(', 'class IDataObject value)', 'void'),
  \ dotnet#method('get_FormatToApply(', ')', 'string'),
  \ dotnet#method('set_FormatToApply(', 'string value)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('SourceDataObject', 'IDataObject'),
  \ dotnet#prop('DataObject', 'IDataObject'),
  \ dotnet#prop('FormatToApply', 'string'),
  \ ])

call dotnet#class('DataObjectPastingEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DataObjectPastingEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DataObjectPastingEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DataObjectPastingEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DataObjectSettingDataEventArgs', 'DataObjectEventArgs', [ 
  \ dotnet#method('DataObjectSettingDataEventArgs(', 'class IDataObject dataObject, string format)', 'void'),
  \ dotnet#method('get_DataObject(', ')', 'IDataObject'),
  \ dotnet#method('get_Format(', ')', 'string'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('DataObject', 'IDataObject'),
  \ dotnet#prop('Format', 'string'),
  \ ])

call dotnet#class('DataObjectSettingDataEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DataObjectSettingDataEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DataObjectSettingDataEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DataObjectSettingDataEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DragDrop', 'Object', [ 
  \ dotnet#method('AddPreviewQueryContinueDragHandler(', 'class DependencyObject element, QueryContinueDragEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewQueryContinueDragHandler(', 'class DependencyObject element, QueryContinueDragEventHandler handler)', 'static void'),
  \ dotnet#method('AddQueryContinueDragHandler(', 'class DependencyObject element, QueryContinueDragEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveQueryContinueDragHandler(', 'class DependencyObject element, QueryContinueDragEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewGiveFeedbackHandler(', 'class DependencyObject element, GiveFeedbackEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewGiveFeedbackHandler(', 'class DependencyObject element, GiveFeedbackEventHandler handler)', 'static void'),
  \ dotnet#method('AddGiveFeedbackHandler(', 'class DependencyObject element, GiveFeedbackEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveGiveFeedbackHandler(', 'class DependencyObject element, GiveFeedbackEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewDragEnterHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewDragEnterHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('AddDragEnterHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveDragEnterHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewDragOverHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewDragOverHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('AddDragOverHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveDragOverHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewDragLeaveHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewDragLeaveHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('AddDragLeaveHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveDragLeaveHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewDropHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewDropHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('AddDropHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveDropHandler(', 'class DependencyObject element, DragEventHandler handler)', 'static void'),
  \ dotnet#method('DoDragDrop(', 'class DependencyObject dragSource, object data, DragDropEffects allowedEffects)', 'static DragDropEffects'),
  \ dotnet#method('RegisterDropTarget(', 'native int windowHandle)', 'static void'),
  \ dotnet#method('RevokeDropTarget(', 'native int windowHandle)', 'static void'),
  \ dotnet#method('IsValidDragDropEffects(', 'DragDropEffects dragDropEffects)', 'static bool'),
  \ dotnet#method('IsValidDragAction(', 'DragAction dragAction)', 'static bool'),
  \ dotnet#method('IsValidDragDropKeyStates(', 'DragDropKeyStates dragDropKeyStates)', 'static bool'),
  \ dotnet#method('DragDrop(', ')', 'static void .'),
  \ ])

call dotnet#class('DragEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('DragEventArgs(', 'class IDataObject data, DragDropKeyStates dragDropKeyStates, DragDropEffects allowedEffects, DependencyObject target, Point point)', 'void'),
  \ dotnet#method('GetPosition(', 'class IInputElement relativeTo)', 'Point'),
  \ dotnet#method('get_Data(', ')', 'IDataObject'),
  \ dotnet#method('get_KeyStates(', ')', 'DragDropKeyStates'),
  \ dotnet#method('get_AllowedEffects(', ')', 'DragDropEffects'),
  \ dotnet#method('get_Effects(', ')', 'DragDropEffects'),
  \ dotnet#method('set_Effects(', 'DragDropEffects value)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Data', 'IDataObject'),
  \ dotnet#prop('KeyStates', 'DragDropKeyStates'),
  \ dotnet#prop('AllowedEffects', 'DragDropEffects'),
  \ dotnet#prop('Effects', 'DragDropEffects'),
  \ ])

call dotnet#class('DragEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DragEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DragEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DragEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('Duration', 'ValueType', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#field('_timeSpan', 'TimeSpan'),
  \ dotnet#field('_durationType', 'Duration/DurationType'),
  \ dotnet#method('Duration(', 'TimeSpan timeSpan)', 'void'),
  \ dotnet#method('op_Implicit(', 'TimeSpan timeSpan)', 'static'),
  \ dotnet#method('op_Addition(', 'Duration t1, Duration t2)', 'static'),
  \ dotnet#method('op_Subtraction(', 'Duration t1, Duration t2)', 'static'),
  \ dotnet#method('op_Equality(', 'Duration t1, Duration t2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Duration t1, Duration t2)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'Duration t1, Duration t2)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'Duration t1, Duration t2)', 'static bool'),
  \ dotnet#method('op_LessThan(', 'Duration t1, Duration t2)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'Duration t1, Duration t2)', 'static bool'),
  \ dotnet#method('Compare(', 'Duration t1, Duration t2)', 'static int32'),
  \ dotnet#method('Plus(', 'Duration duration)', 'static Duration'),
  \ dotnet#method('op_UnaryPlus(', 'Duration duration)', 'static'),
  \ dotnet#method('get_HasTimeSpan(', ')', 'bool'),
  \ dotnet#method('get_Automatic(', ')', 'static'),
  \ dotnet#method('get_Forever(', ')', 'static'),
  \ dotnet#method('get_TimeSpan(', ')', 'TimeSpan'),
  \ dotnet#method('Add(', 'Duration duration)', 'Duration'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('Equals(', 'Duration duration)', 'bool'),
  \ dotnet#method('Equals(', 'Duration t1, Duration t2)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Subtract(', 'Duration duration)', 'Duration'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('HasTimeSpan', 'bool'),
  \ dotnet#prop('Automatic', 'Duration'),
  \ dotnet#prop('Forever', 'Duration'),
  \ dotnet#prop('TimeSpan', 'TimeSpan'),
  \ ])

call dotnet#class('DurationConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext td, Type t)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext td, CultureInfo cultureInfo, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('DurationConverter(', ')', 'void'),
  \ ])

call dotnet#class('EventManager', 'Object', [ 
  \ dotnet#method('RegisterRoutedEvent(', 'string name, RoutingStrategy routingStrategy, Type handlerType, Type ownerType)', 'static RoutedEvent'),
  \ dotnet#method('RegisterClassHandler(', 'class Type classType, RoutedEvent routedEvent, Delegate handler)', 'static void'),
  \ dotnet#method('RegisterClassHandler(', 'class Type classType, RoutedEvent routedEvent, Delegate handler, bool handledEventsToo)', 'static void'),
  \ dotnet#method('GetRoutedEvents(', ')', 'static RoutedEvent[]'),
  \ dotnet#method('GetRoutedEventsForOwner(', 'class Type ownerType)', 'static RoutedEvent[]'),
  \ dotnet#method('GetRoutedEventFromName(', 'string name, Type ownerType)', 'static RoutedEvent'),
  \ ])

call dotnet#class('EventPrivateKey', 'Object', [ 
  \ dotnet#method('EventPrivateKey(', ')', 'void'),
  \ dotnet#method('get_GlobalIndex(', ')', 'int32'),
  \ dotnet#prop('GlobalIndex', 'int32'),
  \ ])

call dotnet#class('EventRoute', 'Object', [ 
  \ dotnet#method('EventRoute(', 'class RoutedEvent routedEvent)', 'void'),
  \ dotnet#method('Add(', 'object target, Delegate handler, bool handledEventsToo)', 'void'),
  \ dotnet#method('InvokeHandlers(', 'object source, RoutedEventArgs args)', 'void'),
  \ dotnet#method('ReInvokeHandlers(', 'object source, RoutedEventArgs args)', 'void'),
  \ dotnet#method('PushBranchNode(', 'object node, object source)', 'void'),
  \ dotnet#method('PopBranchNode(', ')', 'object'),
  \ dotnet#method('PeekBranchNode(', ')', 'object'),
  \ dotnet#method('PeekBranchSource(', ')', 'object'),
  \ dotnet#method('get_RoutedEvent(', ')', '.method'),
  \ dotnet#method('set_RoutedEvent(', 'class RoutedEvent value)', 'void'),
  \ dotnet#method('AddSource(', 'object source)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#prop('RoutedEvent', 'RoutedEvent'),
  \ ])

call dotnet#class('FontStyle', 'ValueType', [ 
  \ dotnet#field('_style', 'int32'),
  \ dotnet#method('FontStyle(', 'int32 style)', 'void'),
  \ dotnet#method('op_Equality(', 'FontStyle left, FontStyle right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'FontStyle left, FontStyle right)', 'static bool'),
  \ dotnet#method('Equals(', 'FontStyle obj)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('GetStyleForInternalConstruction(', ')', 'int32'),
  \ ])

call dotnet#class('FontStyleConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext td, Type t)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext td, CultureInfo ci, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('FontStyleConverter(', ')', 'void'),
  \ ])

call dotnet#class('FontStyles', 'Object', [ 
  \ dotnet#method('get_Normal(', ')', 'static'),
  \ dotnet#method('get_Oblique(', ')', 'static'),
  \ dotnet#method('get_Italic(', ')', 'static'),
  \ dotnet#method('FontStyleStringToKnownStyle(', 'string s, IFormatProvider provider, FontStyle& fontStyle)', 'static bool'),
  \ dotnet#prop('Normal', 'FontStyle'),
  \ dotnet#prop('Oblique', 'FontStyle'),
  \ dotnet#prop('Italic', 'FontStyle'),
  \ ])

call dotnet#class('FontStretch', 'ValueType', [ 
  \ dotnet#field('_stretch', 'int32'),
  \ dotnet#method('FontStretch(', 'int32 stretch)', 'void'),
  \ dotnet#method('FromOpenTypeStretch(', 'int32 stretchValue)', 'static FontStretch'),
  \ dotnet#method('ToOpenTypeStretch(', ')', 'int32'),
  \ dotnet#method('Compare(', 'FontStretch left, FontStretch right)', 'static int32'),
  \ dotnet#method('op_LessThan(', 'FontStretch left, FontStretch right)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'FontStretch left, FontStretch right)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'FontStretch left, FontStretch right)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'FontStretch left, FontStretch right)', 'static bool'),
  \ dotnet#method('op_Equality(', 'FontStretch left, FontStretch right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'FontStretch left, FontStretch right)', 'static bool'),
  \ dotnet#method('Equals(', 'FontStretch obj)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ ])

call dotnet#class('FontStretchConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext td, Type t)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext td, CultureInfo ci, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('FontStretchConverter(', ')', 'void'),
  \ ])

call dotnet#class('FontStretches', 'Object', [ 
  \ dotnet#method('get_UltraCondensed(', ')', 'static'),
  \ dotnet#method('get_ExtraCondensed(', ')', 'static'),
  \ dotnet#method('get_Condensed(', ')', 'static'),
  \ dotnet#method('get_SemiCondensed(', ')', 'static'),
  \ dotnet#method('get_Normal(', ')', 'static'),
  \ dotnet#method('get_Medium(', ')', 'static'),
  \ dotnet#method('get_SemiExpanded(', ')', 'static'),
  \ dotnet#method('get_Expanded(', ')', 'static'),
  \ dotnet#method('get_ExtraExpanded(', ')', 'static'),
  \ dotnet#method('get_UltraExpanded(', ')', 'static'),
  \ dotnet#method('FontStretchStringToKnownStretch(', 'string s, IFormatProvider provider, FontStretch& fontStretch)', 'static bool'),
  \ dotnet#method('FontStretchToString(', 'int32 stretch, [out] string& convertedValue)', 'static bool'),
  \ dotnet#prop('UltraCondensed', 'FontStretch'),
  \ dotnet#prop('ExtraCondensed', 'FontStretch'),
  \ dotnet#prop('Condensed', 'FontStretch'),
  \ dotnet#prop('SemiCondensed', 'FontStretch'),
  \ dotnet#prop('Normal', 'FontStretch'),
  \ dotnet#prop('Medium', 'FontStretch'),
  \ dotnet#prop('SemiExpanded', 'FontStretch'),
  \ dotnet#prop('Expanded', 'FontStretch'),
  \ dotnet#prop('ExtraExpanded', 'FontStretch'),
  \ dotnet#prop('UltraExpanded', 'FontStretch'),
  \ ])

call dotnet#class('FontWeight', 'ValueType', [ 
  \ dotnet#field('_weight', 'int32'),
  \ dotnet#method('FontWeight(', 'int32 weight)', 'void'),
  \ dotnet#method('FromOpenTypeWeight(', 'int32 weightValue)', 'static FontWeight'),
  \ dotnet#method('ToOpenTypeWeight(', ')', 'int32'),
  \ dotnet#method('Compare(', 'FontWeight left, FontWeight right)', 'static int32'),
  \ dotnet#method('op_LessThan(', 'FontWeight left, FontWeight right)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'FontWeight left, FontWeight right)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'FontWeight left, FontWeight right)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'FontWeight left, FontWeight right)', 'static bool'),
  \ dotnet#method('op_Equality(', 'FontWeight left, FontWeight right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'FontWeight left, FontWeight right)', 'static bool'),
  \ dotnet#method('Equals(', 'FontWeight obj)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ ])

call dotnet#class('FontWeightConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext td, Type t)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext td, CultureInfo ci, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('FontWeightConverter(', ')', 'void'),
  \ ])

call dotnet#class('FontWeights', 'Object', [ 
  \ dotnet#method('get_Thin(', ')', 'static'),
  \ dotnet#method('get_ExtraLight(', ')', 'static'),
  \ dotnet#method('get_UltraLight(', ')', 'static'),
  \ dotnet#method('get_Light(', ')', 'static'),
  \ dotnet#method('get_Normal(', ')', 'static'),
  \ dotnet#method('get_Regular(', ')', 'static'),
  \ dotnet#method('get_Medium(', ')', 'static'),
  \ dotnet#method('get_DemiBold(', ')', 'static'),
  \ dotnet#method('get_SemiBold(', ')', 'static'),
  \ dotnet#method('get_Bold(', ')', 'static'),
  \ dotnet#method('get_ExtraBold(', ')', 'static'),
  \ dotnet#method('get_UltraBold(', ')', 'static'),
  \ dotnet#method('get_Black(', ')', 'static'),
  \ dotnet#method('get_Heavy(', ')', 'static'),
  \ dotnet#method('get_ExtraBlack(', ')', 'static'),
  \ dotnet#method('get_UltraBlack(', ')', 'static'),
  \ dotnet#method('FontWeightStringToKnownWeight(', 'string s, IFormatProvider provider, FontWeight& fontWeight)', 'static bool'),
  \ dotnet#method('FontWeightToString(', 'int32 weight, [out] string& convertedValue)', 'static bool'),
  \ dotnet#prop('Thin', 'FontWeight'),
  \ dotnet#prop('ExtraLight', 'FontWeight'),
  \ dotnet#prop('UltraLight', 'FontWeight'),
  \ dotnet#prop('Light', 'FontWeight'),
  \ dotnet#prop('Normal', 'FontWeight'),
  \ dotnet#prop('Regular', 'FontWeight'),
  \ dotnet#prop('Medium', 'FontWeight'),
  \ dotnet#prop('DemiBold', 'FontWeight'),
  \ dotnet#prop('SemiBold', 'FontWeight'),
  \ dotnet#prop('Bold', 'FontWeight'),
  \ dotnet#prop('ExtraBold', 'FontWeight'),
  \ dotnet#prop('UltraBold', 'FontWeight'),
  \ dotnet#prop('Black', 'FontWeight'),
  \ dotnet#prop('Heavy', 'FontWeight'),
  \ dotnet#prop('ExtraBlack', 'FontWeight'),
  \ dotnet#prop('UltraBlack', 'FontWeight'),
  \ ])

call dotnet#class('FreezableCollection', 'Animatable', [ 
  \ dotnet#field('_current', '!T'),
  \ dotnet#field('_list', 'FreezableCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', '!T'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', '!T'),
  \ dotnet#field('_collection', 'List'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('FreezableCollection`1(', ')', 'void FreezableCollection`'),
  \ dotnet#method('FreezableCollection`1(', 'int32 capacity)', 'void FreezableCollection`'),
  \ dotnet#method('Clone(', ')', 'FreezableCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'FreezableCollection'),
  \ dotnet#method('Add(', '!T value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', '!T value)', 'bool'),
  \ dotnet#method('IndexOf(', '!T value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, !T value)', 'void'),
  \ dotnet#method('Remove(', '!T value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', '!T'),
  \ dotnet#method('set_Item(', 'int32 index, !T value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'FreezableCollection'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('add_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void '),
  \ dotnet#method('add_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', '!T value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#event('CollectionChanged', 'NotifyCollectionChangedEventHandler'),
  \ dotnet#prop('Item(int32)', '!T'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('UIElement', 'Visual', [ 
  \ dotnet#field('MeasureRequest', 'ContextLayoutManager/LayoutQueue/Request'),
  \ dotnet#field('ArrangeRequest', 'ContextLayoutManager/LayoutQueue/Request'),
  \ dotnet#field('sizeChangedInfo', 'SizeChangedInfo'),
  \ dotnet#method('ApplyAnimationClock(', 'class DependencyProperty dp, AnimationClock clock)', 'void'),
  \ dotnet#method('ApplyAnimationClock(', 'class DependencyProperty dp, AnimationClock clock, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('BeginAnimation(', 'class DependencyProperty dp, AnimationTimeline animation)', 'void'),
  \ dotnet#method('BeginAnimation(', 'class DependencyProperty dp, AnimationTimeline animation, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('get_HasAnimatedProperties(', ')', 'bool'),
  \ dotnet#method('GetAnimationBaseValue(', 'class DependencyProperty dp)', 'object'),
  \ dotnet#method('EvaluateAnimatedValueCore(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& entry)', 'void'),
  \ dotnet#method('get_InputBindings(', ')', 'InputBindingCollection'),
  \ dotnet#method('get_InputBindingsInternal(', ')', '.method'),
  \ dotnet#method('ShouldSerializeInputBindings(', ')', 'bool'),
  \ dotnet#method('get_CommandBindings(', ')', 'CommandBindingCollection'),
  \ dotnet#method('get_CommandBindingsInternal(', ')', '.method'),
  \ dotnet#method('ShouldSerializeCommandBindings(', ')', 'bool'),
  \ dotnet#method('BuildRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict bool'),
  \ dotnet#method('BuildRoute(', 'class EventRoute route, RoutedEventArgs args)', 'void'),
  \ dotnet#method('RaiseEvent(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('RaiseEvent(', 'class RoutedEventArgs args, bool trusted)', 'void'),
  \ dotnet#method('RaiseTrustedEvent(', 'class RoutedEventArgs args)', 'void'),
  \ dotnet#method('AdjustEventSource(', 'class RoutedEventArgs args)', 'strict object'),
  \ dotnet#method('AddHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'void'),
  \ dotnet#method('AddHandler(', 'class RoutedEvent routedEvent, Delegate handler, bool handledEventsToo)', 'void'),
  \ dotnet#method('OnAddHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('RemoveHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'void'),
  \ dotnet#method('OnRemoveHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('AddToEventRoute(', 'class EventRoute route, RoutedEventArgs e)', 'void'),
  \ dotnet#method('AddToEventRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('get_EventHandlersStore(', ')', '.method'),
  \ dotnet#method('EnsureEventHandlersStore(', ')', 'void'),
  \ dotnet#method('RegisterEvents(', 'class Type type)', 'static void'),
  \ dotnet#method('add_PreviewMouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_MouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewMouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_MouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewMouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_MouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewMouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_MouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewMouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseRightButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_MouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseRightButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewMouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseRightButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_MouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseRightButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewMouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('add_MouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewMouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseWheel(', 'class MouseWheelEventArgs e)', 'void'),
  \ dotnet#method('add_MouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('OnMouseWheel(', 'class MouseWheelEventArgs e)', 'void'),
  \ dotnet#method('add_MouseEnter(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseEnter(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnMouseEnter(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('add_MouseLeave(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseLeave(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeave(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('add_GotMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_GotMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnGotMouseCapture(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('add_LostMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_LostMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnLostMouseCapture(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('add_QueryCursor(', 'class QueryCursorEventHandler value)', 'void'),
  \ dotnet#method('remove_QueryCursor(', 'class QueryCursorEventHandler value)', 'void'),
  \ dotnet#method('OnQueryCursor(', 'class QueryCursorEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewStylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusDown(', 'class StylusDownEventArgs e)', 'void'),
  \ dotnet#method('add_StylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('OnStylusDown(', 'class StylusDownEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewStylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusUp(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_StylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusUp(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewStylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusMove(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_StylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusMove(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewStylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusInAirMove(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_StylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusInAirMove(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_StylusEnter(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusEnter(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusEnter(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_StylusLeave(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusLeave(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusLeave(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewStylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusInRange(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_StylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusInRange(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewStylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusOutOfRange(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_StylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusOutOfRange(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewStylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusSystemGesture(', 'class StylusSystemGestureEventArgs e)', 'void'),
  \ dotnet#method('add_StylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('OnStylusSystemGesture(', 'class StylusSystemGestureEventArgs e)', 'void'),
  \ dotnet#method('add_GotStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_GotStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnGotStylusCapture(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_LostStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_LostStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnLostStylusCapture(', 'class StylusEventArgs e)', 'void'),
  \ dotnet#method('add_StylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnStylusButtonDown(', 'class StylusButtonEventArgs e)', 'void'),
  \ dotnet#method('add_StylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnStylusButtonUp(', 'class StylusButtonEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewStylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusButtonDown(', 'class StylusButtonEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewStylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusButtonUp(', 'class StylusButtonEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewKeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewKeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('add_KeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_KeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewKeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewKeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewKeyUp(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('add_KeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_KeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnKeyUp(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('add_GotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_GotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewLostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewLostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('add_LostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_LostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewTextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTextInput(', 'class TextCompositionEventArgs e)', 'void'),
  \ dotnet#method('add_TextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('remove_TextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('OnTextInput(', 'class TextCompositionEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewQueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewQueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewQueryContinueDrag(', 'class QueryContinueDragEventArgs e)', 'void'),
  \ dotnet#method('add_QueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('remove_QueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('OnQueryContinueDrag(', 'class QueryContinueDragEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewGiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewGiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewGiveFeedback(', 'class GiveFeedbackEventArgs e)', 'void'),
  \ dotnet#method('add_GiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('remove_GiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('OnGiveFeedback(', 'class GiveFeedbackEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewDragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDragEnter(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('add_DragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_DragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDragEnter(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewDragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDragOver(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('add_DragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_DragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDragOver(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewDragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDragLeave(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('add_DragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_DragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDragLeave(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewDrop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDrop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDrop(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('add_Drop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_Drop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDrop(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewTouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTouchDown(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_TouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchDown(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewTouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTouchMove(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_TouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchMove(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_PreviewTouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTouchUp(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_TouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchUp(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_GotTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_GotTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnGotTouchCapture(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_LostTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_LostTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnLostTouchCapture(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_TouchEnter(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchEnter(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchEnter(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_TouchLeave(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchLeave(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchLeave(', 'class TouchEventArgs e)', 'void'),
  \ dotnet#method('add_IsMouseDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsMouseDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsMouseDirectlyOverChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsKeyboardFocusWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsKeyboardFocusWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('RaiseIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('add_IsMouseCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsMouseCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsMouseCapturedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsMouseCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsMouseCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsMouseCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('RaiseIsMouseCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('add_IsStylusDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsStylusDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsStylusDirectlyOverChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsStylusCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsStylusCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsStylusCapturedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsStylusCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsStylusCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsStylusCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('RaiseIsStylusCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('add_IsKeyboardFocusedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsKeyboardFocusedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('ReadFlag(', 'CoreFlags field)', 'bool'),
  \ dotnet#method('WriteFlag(', 'CoreFlags field, bool value)', 'void'),
  \ dotnet#method('UIElement(', ')', 'void'),
  \ dotnet#method('get_AllowDrop(', ')', 'bool'),
  \ dotnet#method('set_AllowDrop(', 'bool value)', 'void'),
  \ dotnet#method('get_StylusPlugIns(', ')', 'StylusPlugInCollection'),
  \ dotnet#method('get_DesiredSize(', ')', 'Size'),
  \ dotnet#method('get_MeasureData(', ')', '.method'),
  \ dotnet#method('set_MeasureData(', 'class MeasureData value)', 'void'),
  \ dotnet#method('get_PreviousConstraint(', ')', '.method'),
  \ dotnet#method('get_PreviousMeasureData(', ')', '.method'),
  \ dotnet#method('InvalidateMeasureInternal(', ')', 'void'),
  \ dotnet#method('InvalidateArrangeInternal(', ')', 'void'),
  \ dotnet#method('get_IsMeasureValid(', ')', 'bool'),
  \ dotnet#method('get_IsArrangeValid(', ')', 'bool'),
  \ dotnet#method('InvalidateMeasure(', ')', 'void'),
  \ dotnet#method('InvalidateArrange(', ')', 'void'),
  \ dotnet#method('InvalidateVisual(', ')', 'void'),
  \ dotnet#method('OnChildDesiredSizeChanged(', 'class UIElement child)', 'void'),
  \ dotnet#method('add_LayoutUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_LayoutUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('PropagateSuspendLayout(', 'class Visual v)', 'static void'),
  \ dotnet#method('PropagateResumeLayout(', 'class Visual parent, Visual v)', 'static void'),
  \ dotnet#method('Measure(', 'Size availableSize)', 'void'),
  \ dotnet#method('GetUIParentOrICH(', '[out] UIElement& uiParent, [out] IContentHost& ich)', 'void'),
  \ dotnet#method('GetUIParentWithinLayoutIsland(', ')', 'UIElement'),
  \ dotnet#method('Arrange(', 'Rect finalRect)', 'void'),
  \ dotnet#method('OnRender(', 'class DrawingContext drawingContext)', 'void'),
  \ dotnet#method('RoundLayoutSize(', 'Size size, float64 dpiScaleX, float64 dpiScaleY)', 'static Size'),
  \ dotnet#method('RoundLayoutValue(', 'float64 value, float64 dpiScale)', 'static float64'),
  \ dotnet#method('RoundLayoutRect(', 'Rect rect, float64 dpiScaleX, float64 dpiScaleY)', 'static Rect'),
  \ dotnet#method('OnRenderSizeChanged(', 'class SizeChangedInfo info)', 'famorassem void'),
  \ dotnet#method('MeasureCore(', 'Size availableSize)', 'family'),
  \ dotnet#method('ArrangeCore(', 'Rect finalRect)', 'void'),
  \ dotnet#method('get_RenderSize(', ')', 'Size'),
  \ dotnet#method('set_RenderSize(', 'Size value)', 'void'),
  \ dotnet#method('GetHitTestBounds(', ')', 'strict'),
  \ dotnet#method('get_RenderTransform(', ')', 'Transform'),
  \ dotnet#method('set_RenderTransform(', 'class Transform value)', 'void'),
  \ dotnet#method('get_RenderTransformOrigin(', ')', 'Point'),
  \ dotnet#method('set_RenderTransformOrigin(', 'Point value)', 'void'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('OnVisualAncestorChanged(', 'object sender, AncestorChangedEventArgs e)', 'void'),
  \ dotnet#method('GetUIParent(', ')', 'DependencyObject'),
  \ dotnet#method('GetUIParent(', 'bool continuePastVisualTree)', 'DependencyObject'),
  \ dotnet#method('GetUIParentNo3DTraversal(', ')', 'DependencyObject'),
  \ dotnet#method('GetUIParentCore(', ')', 'famorassem'),
  \ dotnet#method('UpdateLayout(', ')', 'void'),
  \ dotnet#method('BuildRouteHelper(', 'class DependencyObject e, EventRoute route, RoutedEventArgs args)', 'static void'),
  \ dotnet#method('AddSynchronizedInputPreOpportunityHandler(', 'class EventRoute route, RoutedEventArgs args)', 'void'),
  \ dotnet#method('AddSynchronizedInputPreOpportunityHandlerCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('AddSynchronizedInputPostOpportunityHandler(', 'class EventRoute route, RoutedEventArgs args)', 'void'),
  \ dotnet#method('SynchronizedInputPreOpportunityHandler(', 'object sender, RoutedEventArgs args)', 'void'),
  \ dotnet#method('SynchronizedInputPostOpportunityHandler(', 'object sender, RoutedEventArgs args)', 'void'),
  \ dotnet#method('StartListeningSynchronizedInput(', 'SynchronizedInputType inputType)', 'bool'),
  \ dotnet#method('CancelSynchronizedInput(', ')', 'void'),
  \ dotnet#method('AddHandler(', 'class DependencyObject d, RoutedEvent routedEvent, Delegate handler)', 'static void'),
  \ dotnet#method('RemoveHandler(', 'class DependencyObject d, RoutedEvent routedEvent, Delegate handler)', 'static void'),
  \ dotnet#method('OnPresentationSourceChanged(', 'bool attached)', 'strict void'),
  \ dotnet#method('TranslatePoint(', 'Point point, UIElement relativeTo)', 'Point'),
  \ dotnet#method('InputHitTest(', 'Point point)', 'IInputElement'),
  \ dotnet#method('InputHitTest(', 'Point pt, [out] IInputElement& enabledHit, [out] IInputElement& rawHit)', 'void'),
  \ dotnet#method('RaiseEventImpl(', 'class DependencyObject sender, RoutedEventArgs args)', 'static void'),
  \ dotnet#method('get_IsMouseDirectlyOver(', ')', 'bool'),
  \ dotnet#method('SynchronizeReverseInheritPropertyFlags(', 'class DependencyObject oldParent, bool isCoreParent)', 'void'),
  \ dotnet#method('BlockReverseInheritance(', ')', 'strict bool'),
  \ dotnet#method('get_IsMouseOver(', ')', 'bool'),
  \ dotnet#method('get_IsStylusOver(', ')', 'bool'),
  \ dotnet#method('get_IsKeyboardFocusWithin(', ')', 'bool'),
  \ dotnet#method('get_IsMouseCaptured(', ')', 'bool'),
  \ dotnet#method('CaptureMouse(', ')', 'bool'),
  \ dotnet#method('ReleaseMouseCapture(', ')', 'void'),
  \ dotnet#method('get_IsMouseCaptureWithin(', ')', 'bool'),
  \ dotnet#method('get_IsStylusDirectlyOver(', ')', 'bool'),
  \ dotnet#method('get_IsStylusCaptured(', ')', 'bool'),
  \ dotnet#method('CaptureStylus(', ')', 'bool'),
  \ dotnet#method('ReleaseStylusCapture(', ')', 'void'),
  \ dotnet#method('get_IsStylusCaptureWithin(', ')', 'bool'),
  \ dotnet#method('get_IsKeyboardFocused(', ')', 'bool'),
  \ dotnet#method('Focus(', ')', 'bool'),
  \ dotnet#method('MoveFocus(', 'class TraversalRequest request)', 'bool'),
  \ dotnet#method('PredictFocus(', 'FocusNavigationDirection direction)', ''),
  \ dotnet#method('OnAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('get_IsInputMethodEnabled(', ')', 'bool'),
  \ dotnet#method('get_Opacity(', ')', 'float64'),
  \ dotnet#method('set_Opacity(', 'float64 value)', 'void'),
  \ dotnet#method('get_OpacityMask(', ')', 'Brush'),
  \ dotnet#method('set_OpacityMask(', 'class Brush value)', 'void'),
  \ dotnet#method('get_BitmapEffect(', ')', 'BitmapEffect'),
  \ dotnet#method('set_BitmapEffect(', 'class BitmapEffect value)', 'void'),
  \ dotnet#method('get_Effect(', ')', 'Effect'),
  \ dotnet#method('set_Effect(', 'class Effect value)', 'void'),
  \ dotnet#method('get_BitmapEffectInput(', ')', 'BitmapEffectInput'),
  \ dotnet#method('set_BitmapEffectInput(', 'class BitmapEffectInput value)', 'void'),
  \ dotnet#method('get_CacheMode(', ')', 'CacheMode'),
  \ dotnet#method('set_CacheMode(', 'class CacheMode value)', 'void'),
  \ dotnet#method('get_Uid(', ')', 'string'),
  \ dotnet#method('set_Uid(', 'string value)', 'void'),
  \ dotnet#method('get_Visibility(', ')', 'Visibility'),
  \ dotnet#method('set_Visibility(', 'Visibility value)', 'void'),
  \ dotnet#method('HitTestCore(', 'class PointHitTestParameters hitTestParameters)', 'HitTestResult'),
  \ dotnet#method('HitTestCore(', 'class GeometryHitTestParameters hitTestParameters)', 'GeometryHitTestResult'),
  \ dotnet#method('RenderOpen(', ')', 'DrawingContext'),
  \ dotnet#method('RenderClose(', 'class IDrawingContent newContent)', 'strict void'),
  \ dotnet#method('FreeContent(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetContentBounds(', ')', 'strict'),
  \ dotnet#method('WalkContent(', 'class DrawingContextWalker walker)', 'void'),
  \ dotnet#method('RenderContent(', 'class RenderContext ctx, bool isOnChannel)', 'strict void'),
  \ dotnet#method('GetDrawing(', ')', 'strict'),
  \ dotnet#method('GetLayoutClip(', 'Size layoutSlotSize)', 'family'),
  \ dotnet#method('get_ClipToBounds(', ')', 'bool'),
  \ dotnet#method('set_ClipToBounds(', 'bool value)', 'void'),
  \ dotnet#method('get_Clip(', ')', 'Geometry'),
  \ dotnet#method('set_Clip(', 'class Geometry value)', 'void'),
  \ dotnet#method('get_SnapsToDevicePixels(', ')', 'bool'),
  \ dotnet#method('set_SnapsToDevicePixels(', 'bool value)', 'void'),
  \ dotnet#method('InvokeAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('add_GotFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_GotFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_LostFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_LostFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnGotFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnLostFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_IsFocused(', ')', 'bool'),
  \ dotnet#method('get_IsEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsEnabled(', 'bool value)', 'void'),
  \ dotnet#method('add_IsEnabledChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsEnabledChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_IsEnabledCore(', ')', 'bool'),
  \ dotnet#method('get_IsHitTestVisible(', ')', 'bool'),
  \ dotnet#method('set_IsHitTestVisible(', 'bool value)', 'void'),
  \ dotnet#method('add_IsHitTestVisibleChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsHitTestVisibleChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_IsVisible(', ')', 'bool'),
  \ dotnet#method('add_IsVisibleChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsVisibleChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('UpdateIsVisibleCache(', ')', 'void'),
  \ dotnet#method('get_Focusable(', ')', 'bool'),
  \ dotnet#method('set_Focusable(', 'bool value)', 'void'),
  \ dotnet#method('add_FocusableChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_FocusableChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'family'),
  \ dotnet#method('CreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('GetAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('CreateGenericRootAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_PersistId(', ')', 'int32'),
  \ dotnet#method('SetPersistId(', 'int32 value)', 'void'),
  \ dotnet#method('get_PreviousArrangeRect(', ')', '.method'),
  \ dotnet#method('SynchronizeForceInheritProperties(', 'class UIElement uiElement, ContentElement contentElement, UIElement3D uiElement3D, DependencyObject parent)', 'static void'),
  \ dotnet#method('InvalidateForceInheritPropertyOnChildren(', 'class Visual v, DependencyProperty property)', 'static void'),
  \ dotnet#method('get_IsManipulationEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsManipulationEnabled(', 'bool value)', 'void'),
  \ dotnet#method('add_ManipulationStarting(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ManipulationStarting(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnManipulationStarting(', 'class ManipulationStartingEventArgs e)', 'void'),
  \ dotnet#method('add_ManipulationStarted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ManipulationStarted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnManipulationStarted(', 'class ManipulationStartedEventArgs e)', 'void'),
  \ dotnet#method('add_ManipulationDelta(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ManipulationDelta(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnManipulationDelta(', 'class ManipulationDeltaEventArgs e)', 'void'),
  \ dotnet#method('add_ManipulationInertiaStarting(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ManipulationInertiaStarting(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnManipulationInertiaStarting(', 'class ManipulationInertiaStartingEventArgs e)', 'void'),
  \ dotnet#method('add_ManipulationBoundaryFeedback(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ManipulationBoundaryFeedback(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnManipulationBoundaryFeedback(', 'class ManipulationBoundaryFeedbackEventArgs e)', 'void'),
  \ dotnet#method('add_ManipulationCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ManipulationCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnManipulationCompleted(', 'class ManipulationCompletedEventArgs e)', 'void'),
  \ dotnet#method('get_AreAnyTouchesOver(', ')', 'bool'),
  \ dotnet#method('get_AreAnyTouchesDirectlyOver(', ')', 'bool'),
  \ dotnet#method('get_AreAnyTouchesCapturedWithin(', ')', 'bool'),
  \ dotnet#method('get_AreAnyTouchesCaptured(', ')', 'bool'),
  \ dotnet#method('CaptureTouch(', 'class TouchDevice touchDevice)', 'bool'),
  \ dotnet#method('ReleaseTouchCapture(', 'class TouchDevice touchDevice)', 'bool'),
  \ dotnet#method('ReleaseAllTouchCaptures(', ')', 'void'),
  \ dotnet#method('get_TouchesCaptured(', ')', 'IEnumerable'),
  \ dotnet#method('get_TouchesCapturedWithin(', ')', 'IEnumerable'),
  \ dotnet#method('get_TouchesOver(', ')', 'IEnumerable'),
  \ dotnet#method('get_TouchesDirectlyOver(', ')', 'IEnumerable'),
  \ dotnet#method('get_HasAutomationPeer(', ')', 'bool'),
  \ dotnet#method('set_HasAutomationPeer(', 'bool value)', 'void'),
  \ dotnet#method('get_SnapsToDevicePixelsCache(', ')', 'bool'),
  \ dotnet#method('set_SnapsToDevicePixelsCache(', 'bool value)', 'void'),
  \ dotnet#method('get_ClipToBoundsCache(', ')', 'bool'),
  \ dotnet#method('set_ClipToBoundsCache(', 'bool value)', 'void'),
  \ dotnet#method('get_MeasureDirty(', ')', 'bool'),
  \ dotnet#method('set_MeasureDirty(', 'bool value)', 'void'),
  \ dotnet#method('get_ArrangeDirty(', ')', 'bool'),
  \ dotnet#method('set_ArrangeDirty(', 'bool value)', 'void'),
  \ dotnet#method('get_MeasureInProgress(', ')', 'bool'),
  \ dotnet#method('set_MeasureInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_ArrangeInProgress(', ')', 'bool'),
  \ dotnet#method('set_ArrangeInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_NeverMeasured(', ')', 'bool'),
  \ dotnet#method('set_NeverMeasured(', 'bool value)', 'void'),
  \ dotnet#method('get_NeverArranged(', ')', 'bool'),
  \ dotnet#method('set_NeverArranged(', 'bool value)', 'void'),
  \ dotnet#method('get_MeasureDuringArrange(', ')', 'bool'),
  \ dotnet#method('set_MeasureDuringArrange(', 'bool value)', 'void'),
  \ dotnet#method('get_AreTransformsClean(', ')', 'bool'),
  \ dotnet#method('set_AreTransformsClean(', 'bool value)', 'void'),
  \ dotnet#method('UIElement(', ')', 'static void .'),
  \ dotnet#method('set_PreviousMeasureData(', 'class MeasureData value)', 'void'),
  \ dotnet#event('PreviewMouseDown', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseDown', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseUp', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseUp', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseLeftButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseLeftButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseLeftButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseLeftButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseRightButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseRightButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseRightButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseRightButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseMove', 'MouseEventHandler'),
  \ dotnet#event('MouseMove', 'MouseEventHandler'),
  \ dotnet#event('PreviewMouseWheel', 'MouseWheelEventHandler'),
  \ dotnet#event('MouseWheel', 'MouseWheelEventHandler'),
  \ dotnet#event('MouseEnter', 'MouseEventHandler'),
  \ dotnet#event('MouseLeave', 'MouseEventHandler'),
  \ dotnet#event('GotMouseCapture', 'MouseEventHandler'),
  \ dotnet#event('LostMouseCapture', 'MouseEventHandler'),
  \ dotnet#event('QueryCursor', 'QueryCursorEventHandler'),
  \ dotnet#event('PreviewStylusDown', 'StylusDownEventHandler'),
  \ dotnet#event('StylusDown', 'StylusDownEventHandler'),
  \ dotnet#event('PreviewStylusUp', 'StylusEventHandler'),
  \ dotnet#event('StylusUp', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusMove', 'StylusEventHandler'),
  \ dotnet#event('StylusMove', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusInAirMove', 'StylusEventHandler'),
  \ dotnet#event('StylusInAirMove', 'StylusEventHandler'),
  \ dotnet#event('StylusEnter', 'StylusEventHandler'),
  \ dotnet#event('StylusLeave', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusInRange', 'StylusEventHandler'),
  \ dotnet#event('StylusInRange', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusOutOfRange', 'StylusEventHandler'),
  \ dotnet#event('StylusOutOfRange', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusSystemGesture', 'StylusSystemGestureEventHandler'),
  \ dotnet#event('StylusSystemGesture', 'StylusSystemGestureEventHandler'),
  \ dotnet#event('GotStylusCapture', 'StylusEventHandler'),
  \ dotnet#event('LostStylusCapture', 'StylusEventHandler'),
  \ dotnet#event('StylusButtonDown', 'StylusButtonEventHandler'),
  \ dotnet#event('StylusButtonUp', 'StylusButtonEventHandler'),
  \ dotnet#event('PreviewStylusButtonDown', 'StylusButtonEventHandler'),
  \ dotnet#event('PreviewStylusButtonUp', 'StylusButtonEventHandler'),
  \ dotnet#event('PreviewKeyDown', 'KeyEventHandler'),
  \ dotnet#event('KeyDown', 'KeyEventHandler'),
  \ dotnet#event('PreviewKeyUp', 'KeyEventHandler'),
  \ dotnet#event('KeyUp', 'KeyEventHandler'),
  \ dotnet#event('PreviewGotKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('GotKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('PreviewLostKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('LostKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('PreviewTextInput', 'TextCompositionEventHandler'),
  \ dotnet#event('TextInput', 'TextCompositionEventHandler'),
  \ dotnet#event('PreviewQueryContinueDrag', 'QueryContinueDragEventHandler'),
  \ dotnet#event('QueryContinueDrag', 'QueryContinueDragEventHandler'),
  \ dotnet#event('PreviewGiveFeedback', 'GiveFeedbackEventHandler'),
  \ dotnet#event('GiveFeedback', 'GiveFeedbackEventHandler'),
  \ dotnet#event('PreviewDragEnter', 'DragEventHandler'),
  \ dotnet#event('DragEnter', 'DragEventHandler'),
  \ dotnet#event('PreviewDragOver', 'DragEventHandler'),
  \ dotnet#event('DragOver', 'DragEventHandler'),
  \ dotnet#event('PreviewDragLeave', 'DragEventHandler'),
  \ dotnet#event('DragLeave', 'DragEventHandler'),
  \ dotnet#event('PreviewDrop', 'DragEventHandler'),
  \ dotnet#event('Drop', 'DragEventHandler'),
  \ dotnet#event('PreviewTouchDown', 'EventHandler'),
  \ dotnet#event('TouchDown', 'EventHandler'),
  \ dotnet#event('PreviewTouchMove', 'EventHandler'),
  \ dotnet#event('TouchMove', 'EventHandler'),
  \ dotnet#event('PreviewTouchUp', 'EventHandler'),
  \ dotnet#event('TouchUp', 'EventHandler'),
  \ dotnet#event('GotTouchCapture', 'EventHandler'),
  \ dotnet#event('LostTouchCapture', 'EventHandler'),
  \ dotnet#event('TouchEnter', 'EventHandler'),
  \ dotnet#event('TouchLeave', 'EventHandler'),
  \ dotnet#event('IsMouseDirectlyOverChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsKeyboardFocusWithinChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsMouseCapturedChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsMouseCaptureWithinChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsStylusDirectlyOverChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsStylusCapturedChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsStylusCaptureWithinChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsKeyboardFocusedChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('LayoutUpdated', 'EventHandler'),
  \ dotnet#event('GotFocus', 'RoutedEventHandler'),
  \ dotnet#event('LostFocus', 'RoutedEventHandler'),
  \ dotnet#event('IsEnabledChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsHitTestVisibleChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsVisibleChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('FocusableChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('ManipulationStarting', 'EventHandler'),
  \ dotnet#event('ManipulationStarted', 'EventHandler'),
  \ dotnet#event('ManipulationDelta', 'EventHandler'),
  \ dotnet#event('ManipulationInertiaStarting', 'EventHandler'),
  \ dotnet#event('ManipulationBoundaryFeedback', 'EventHandler'),
  \ dotnet#event('ManipulationCompleted', 'EventHandler'),
  \ dotnet#prop('HasAnimatedProperties', 'bool'),
  \ dotnet#prop('InputBindings', 'InputBindingCollection'),
  \ dotnet#prop('InputBindingsInternal', 'InputBindingCollection'),
  \ dotnet#prop('CommandBindings', 'CommandBindingCollection'),
  \ dotnet#prop('CommandBindingsInternal', 'CommandBindingCollection'),
  \ dotnet#prop('EventHandlersStore', 'EventHandlersStore'),
  \ dotnet#prop('AllowDrop', 'bool'),
  \ dotnet#prop('StylusPlugIns', 'StylusPlugInCollection'),
  \ dotnet#prop('DesiredSize', 'Size'),
  \ dotnet#prop('MeasureData', 'MeasureData'),
  \ dotnet#prop('PreviousConstraint', 'Size'),
  \ dotnet#prop('PreviousMeasureData', 'MeasureData'),
  \ dotnet#prop('IsMeasureValid', 'bool'),
  \ dotnet#prop('IsArrangeValid', 'bool'),
  \ dotnet#prop('RenderSize', 'Size'),
  \ dotnet#prop('RenderTransform', 'Transform'),
  \ dotnet#prop('RenderTransformOrigin', 'Point'),
  \ dotnet#prop('IsMouseDirectlyOver', 'bool'),
  \ dotnet#prop('IsMouseOver', 'bool'),
  \ dotnet#prop('IsStylusOver', 'bool'),
  \ dotnet#prop('IsKeyboardFocusWithin', 'bool'),
  \ dotnet#prop('IsMouseCaptured', 'bool'),
  \ dotnet#prop('IsMouseCaptureWithin', 'bool'),
  \ dotnet#prop('IsStylusDirectlyOver', 'bool'),
  \ dotnet#prop('IsStylusCaptured', 'bool'),
  \ dotnet#prop('IsStylusCaptureWithin', 'bool'),
  \ dotnet#prop('IsKeyboardFocused', 'bool'),
  \ dotnet#prop('IsInputMethodEnabled', 'bool'),
  \ dotnet#prop('Opacity', 'float64'),
  \ dotnet#prop('OpacityMask', 'Brush'),
  \ dotnet#prop('BitmapEffect', 'BitmapEffect'),
  \ dotnet#prop('Effect', 'Effect'),
  \ dotnet#prop('BitmapEffectInput', 'BitmapEffectInput'),
  \ dotnet#prop('CacheMode', 'CacheMode'),
  \ dotnet#prop('Uid', 'string'),
  \ dotnet#prop('Visibility', 'Visibility'),
  \ dotnet#prop('ClipToBounds', 'bool'),
  \ dotnet#prop('Clip', 'Geometry'),
  \ dotnet#prop('SnapsToDevicePixels', 'bool'),
  \ dotnet#prop('IsFocused', 'bool'),
  \ dotnet#prop('IsEnabled', 'bool'),
  \ dotnet#prop('IsEnabledCore', 'bool'),
  \ dotnet#prop('IsHitTestVisible', 'bool'),
  \ dotnet#prop('IsVisible', 'bool'),
  \ dotnet#prop('Focusable', 'bool'),
  \ dotnet#prop('PersistId', 'int32'),
  \ dotnet#prop('PreviousArrangeRect', 'Rect'),
  \ dotnet#prop('IsManipulationEnabled', 'bool'),
  \ dotnet#prop('AreAnyTouchesOver', 'bool'),
  \ dotnet#prop('AreAnyTouchesDirectlyOver', 'bool'),
  \ dotnet#prop('AreAnyTouchesCapturedWithin', 'bool'),
  \ dotnet#prop('AreAnyTouchesCaptured', 'bool'),
  \ dotnet#prop('TouchesCaptured', 'IEnumerable'),
  \ dotnet#prop('TouchesCapturedWithin', 'IEnumerable'),
  \ dotnet#prop('TouchesOver', 'IEnumerable'),
  \ dotnet#prop('TouchesDirectlyOver', 'IEnumerable'),
  \ dotnet#prop('HasAutomationPeer', 'bool'),
  \ dotnet#prop('SnapsToDevicePixelsCache', 'bool'),
  \ dotnet#prop('ClipToBoundsCache', 'bool'),
  \ dotnet#prop('MeasureDirty', 'bool'),
  \ dotnet#prop('ArrangeDirty', 'bool'),
  \ dotnet#prop('MeasureInProgress', 'bool'),
  \ dotnet#prop('ArrangeInProgress', 'bool'),
  \ dotnet#prop('NeverMeasured', 'bool'),
  \ dotnet#prop('NeverArranged', 'bool'),
  \ dotnet#prop('MeasureDuringArrange', 'bool'),
  \ dotnet#prop('AreTransformsClean', 'bool'),
  \ ])

call dotnet#class('UIElement3D', 'Visual3D', [ 
  \ dotnet#method('get_InputBindings(', ')', 'InputBindingCollection'),
  \ dotnet#method('get_InputBindingsInternal(', ')', '.method'),
  \ dotnet#method('ShouldSerializeInputBindings(', ')', 'bool'),
  \ dotnet#method('get_CommandBindings(', ')', 'CommandBindingCollection'),
  \ dotnet#method('get_CommandBindingsInternal(', ')', '.method'),
  \ dotnet#method('ShouldSerializeCommandBindings(', ')', 'bool'),
  \ dotnet#method('BuildRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict bool'),
  \ dotnet#method('BuildRoute(', 'class EventRoute route, RoutedEventArgs args)', 'void'),
  \ dotnet#method('RaiseEvent(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('RaiseEvent(', 'class RoutedEventArgs args, bool trusted)', 'void'),
  \ dotnet#method('RaiseTrustedEvent(', 'class RoutedEventArgs args)', 'void'),
  \ dotnet#method('AdjustEventSource(', 'class RoutedEventArgs args)', 'strict object'),
  \ dotnet#method('AddHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'void'),
  \ dotnet#method('AddHandler(', 'class RoutedEvent routedEvent, Delegate handler, bool handledEventsToo)', 'void'),
  \ dotnet#method('OnAddHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('RemoveHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'void'),
  \ dotnet#method('OnRemoveHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('AddToEventRoute(', 'class EventRoute route, RoutedEventArgs e)', 'void'),
  \ dotnet#method('AddToEventRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('get_EventHandlersStore(', ')', '.method'),
  \ dotnet#method('EnsureEventHandlersStore(', ')', 'void'),
  \ dotnet#method('add_PreviewMouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseLeftButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseLeftButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseRightButtonDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseRightButtonDown(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseRightButtonDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseRightButtonUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseRightButtonUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseRightButtonUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseMove(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseMove(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewMouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseWheel(', 'class MouseWheelEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseWheel(', 'class MouseWheelEventHandler value)', 'void'),
  \ dotnet#method('OnMouseWheel(', 'class MouseWheelEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseEnter(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseEnter(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnMouseEnter(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_MouseLeave(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseLeave(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeave(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GotMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_GotMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnGotMouseCapture(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_LostMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('remove_LostMouseCapture(', 'class MouseEventHandler value)', 'void'),
  \ dotnet#method('OnLostMouseCapture(', 'class MouseEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_QueryCursor(', 'class QueryCursorEventHandler value)', 'void'),
  \ dotnet#method('remove_QueryCursor(', 'class QueryCursorEventHandler value)', 'void'),
  \ dotnet#method('OnQueryCursor(', 'class QueryCursorEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusDown(', 'class StylusDownEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusDown(', 'class StylusDownEventHandler value)', 'void'),
  \ dotnet#method('OnStylusDown(', 'class StylusDownEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusUp(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusUp(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusUp(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusMove(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusMove(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusInAirMove(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusInAirMove(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusInAirMove(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusEnter(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusEnter(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusEnter(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusLeave(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusLeave(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusLeave(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusInRange(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusInRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusInRange(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusOutOfRange(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusOutOfRange(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnStylusOutOfRange(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusSystemGesture(', 'class StylusSystemGestureEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusSystemGesture(', 'class StylusSystemGestureEventHandler value)', 'void'),
  \ dotnet#method('OnStylusSystemGesture(', 'class StylusSystemGestureEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GotStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_GotStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnGotStylusCapture(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_LostStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('remove_LostStylusCapture(', 'class StylusEventHandler value)', 'void'),
  \ dotnet#method('OnLostStylusCapture(', 'class StylusEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnStylusButtonDown(', 'class StylusButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_StylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_StylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnStylusButtonUp(', 'class StylusButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusButtonDown(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusButtonDown(', 'class StylusButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewStylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewStylusButtonUp(', 'class StylusButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewStylusButtonUp(', 'class StylusButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewKeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewKeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewKeyDown(', 'class KeyEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_KeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_KeyDown(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewKeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewKeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewKeyUp(', 'class KeyEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_KeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_KeyUp(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('OnKeyUp(', 'class KeyEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_GotKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewLostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewLostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_LostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_LostKeyboardFocus(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('OnLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewTextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTextInput(', 'class TextCompositionEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('remove_TextInput(', 'class TextCompositionEventHandler value)', 'void'),
  \ dotnet#method('OnTextInput(', 'class TextCompositionEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewQueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewQueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewQueryContinueDrag(', 'class QueryContinueDragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_QueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('remove_QueryContinueDrag(', 'class QueryContinueDragEventHandler value)', 'void'),
  \ dotnet#method('OnQueryContinueDrag(', 'class QueryContinueDragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewGiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewGiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewGiveFeedback(', 'class GiveFeedbackEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('remove_GiveFeedback(', 'class GiveFeedbackEventHandler value)', 'void'),
  \ dotnet#method('OnGiveFeedback(', 'class GiveFeedbackEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewDragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDragEnter(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_DragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_DragEnter(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDragEnter(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewDragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDragOver(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_DragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_DragOver(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDragOver(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewDragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDragLeave(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_DragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_DragLeave(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDragLeave(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewDrop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewDrop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewDrop(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_Drop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('remove_Drop(', 'class DragEventHandler value)', 'void'),
  \ dotnet#method('OnDrop(', 'class DragEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewTouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTouchDown(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchDown(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchDown(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewTouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTouchMove(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchMove(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchMove(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_PreviewTouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewTouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreviewTouchUp(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchUp(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchUp(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_GotTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_GotTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnGotTouchCapture(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_LostTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_LostTouchCapture(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnLostTouchCapture(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchEnter(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchEnter(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchEnter(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_TouchLeave(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TouchLeave(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnTouchLeave(', 'class TouchEventArgs e)', 'famorassem void'),
  \ dotnet#method('add_IsMouseDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsMouseDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsMouseDirectlyOverChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsKeyboardFocusWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsKeyboardFocusWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('RaiseIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('add_IsMouseCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsMouseCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsMouseCapturedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsMouseCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsMouseCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsMouseCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('RaiseIsMouseCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('add_IsStylusDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsStylusDirectlyOverChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsStylusDirectlyOverChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsStylusCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsStylusCapturedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsStylusCapturedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_IsStylusCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsStylusCaptureWithinChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsStylusCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('RaiseIsStylusCaptureWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('add_IsKeyboardFocusedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsKeyboardFocusedChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('ReadFlag(', 'CoreFlags field)', 'bool'),
  \ dotnet#method('WriteFlag(', 'CoreFlags field, bool value)', 'void'),
  \ dotnet#method('UIElement3D(', ')', 'void'),
  \ dotnet#method('get_AllowDrop(', ')', 'bool'),
  \ dotnet#method('set_AllowDrop(', 'bool value)', 'void'),
  \ dotnet#method('InvalidateModel(', ')', 'void'),
  \ dotnet#method('OnUpdateModel(', ')', 'void'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('OnVisualAncestorChanged(', 'object sender, AncestorChangedEventArgs e)', 'void'),
  \ dotnet#method('GetUIParent(', 'bool continuePastVisualTree)', 'DependencyObject'),
  \ dotnet#method('GetUIParentCore(', ')', 'famorassem DependencyObject'),
  \ dotnet#method('OnPresentationSourceChanged(', 'bool attached)', 'strict void'),
  \ dotnet#method('get_IsMouseDirectlyOver(', ')', 'bool'),
  \ dotnet#method('SynchronizeReverseInheritPropertyFlags(', 'class DependencyObject oldParent, bool isCoreParent)', 'void'),
  \ dotnet#method('BlockReverseInheritance(', ')', 'strict bool'),
  \ dotnet#method('get_IsMouseOver(', ')', 'bool'),
  \ dotnet#method('get_IsStylusOver(', ')', 'bool'),
  \ dotnet#method('get_IsKeyboardFocusWithin(', ')', 'bool'),
  \ dotnet#method('get_IsMouseCaptured(', ')', 'bool'),
  \ dotnet#method('CaptureMouse(', ')', 'bool'),
  \ dotnet#method('ReleaseMouseCapture(', ')', 'void'),
  \ dotnet#method('get_IsMouseCaptureWithin(', ')', 'bool'),
  \ dotnet#method('get_IsStylusDirectlyOver(', ')', 'bool'),
  \ dotnet#method('get_IsStylusCaptured(', ')', 'bool'),
  \ dotnet#method('CaptureStylus(', ')', 'bool'),
  \ dotnet#method('ReleaseStylusCapture(', ')', 'void'),
  \ dotnet#method('get_IsStylusCaptureWithin(', ')', 'bool'),
  \ dotnet#method('get_IsKeyboardFocused(', ')', 'bool'),
  \ dotnet#method('Focus(', ')', 'bool'),
  \ dotnet#method('MoveFocus(', 'class TraversalRequest request)', 'bool'),
  \ dotnet#method('PredictFocus(', 'FocusNavigationDirection direction)', ''),
  \ dotnet#method('OnAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('get_IsInputMethodEnabled(', ')', 'bool'),
  \ dotnet#method('get_Visibility(', ')', 'Visibility'),
  \ dotnet#method('set_Visibility(', 'Visibility value)', 'void'),
  \ dotnet#method('InvokeAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('add_GotFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_GotFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_LostFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_LostFocus(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnGotFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnLostFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_IsFocused(', ')', 'bool'),
  \ dotnet#method('get_IsEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsEnabled(', 'bool value)', 'void'),
  \ dotnet#method('add_IsEnabledChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsEnabledChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_IsEnabledCore(', ')', 'bool'),
  \ dotnet#method('get_IsHitTestVisible(', ')', 'bool'),
  \ dotnet#method('set_IsHitTestVisible(', 'bool value)', 'void'),
  \ dotnet#method('add_IsHitTestVisibleChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsHitTestVisibleChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_IsVisible(', ')', 'bool'),
  \ dotnet#method('add_IsVisibleChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_IsVisibleChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('UpdateIsVisibleCache(', ')', 'void'),
  \ dotnet#method('get_Focusable(', ')', 'bool'),
  \ dotnet#method('set_Focusable(', 'bool value)', 'void'),
  \ dotnet#method('add_FocusableChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_FocusableChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'family'),
  \ dotnet#method('CreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('GetAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('AddSynchronizedInputPreOpportunityHandler(', 'class EventRoute route, RoutedEventArgs args)', 'void'),
  \ dotnet#method('AddSynchronizedInputPostOpportunityHandler(', 'class EventRoute route, RoutedEventArgs args)', 'void'),
  \ dotnet#method('SynchronizedInputPreOpportunityHandler(', 'object sender, RoutedEventArgs args)', 'void'),
  \ dotnet#method('SynchronizedInputPostOpportunityHandler(', 'object sender, RoutedEventArgs args)', 'void'),
  \ dotnet#method('StartListeningSynchronizedInput(', 'SynchronizedInputType inputType)', 'bool'),
  \ dotnet#method('CancelSynchronizedInput(', ')', 'void'),
  \ dotnet#method('InvalidateForceInheritPropertyOnChildren(', 'class Visual3D v, DependencyProperty property)', 'static void'),
  \ dotnet#method('get_AreAnyTouchesOver(', ')', 'bool'),
  \ dotnet#method('get_AreAnyTouchesDirectlyOver(', ')', 'bool'),
  \ dotnet#method('get_AreAnyTouchesCapturedWithin(', ')', 'bool'),
  \ dotnet#method('get_AreAnyTouchesCaptured(', ')', 'bool'),
  \ dotnet#method('CaptureTouch(', 'class TouchDevice touchDevice)', 'bool'),
  \ dotnet#method('ReleaseTouchCapture(', 'class TouchDevice touchDevice)', 'bool'),
  \ dotnet#method('ReleaseAllTouchCaptures(', ')', 'void'),
  \ dotnet#method('get_TouchesCaptured(', ')', 'IEnumerable'),
  \ dotnet#method('get_TouchesCapturedWithin(', ')', 'IEnumerable'),
  \ dotnet#method('get_TouchesOver(', ')', 'IEnumerable'),
  \ dotnet#method('get_TouchesDirectlyOver(', ')', 'IEnumerable'),
  \ dotnet#method('get_HasAutomationPeer(', ')', 'bool'),
  \ dotnet#method('set_HasAutomationPeer(', 'bool value)', 'void'),
  \ dotnet#method('UIElement3D(', ')', 'static void .'),
  \ dotnet#event('PreviewMouseDown', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseDown', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseUp', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseUp', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseLeftButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseLeftButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseLeftButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseLeftButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseRightButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseRightButtonDown', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseRightButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseRightButtonUp', 'MouseButtonEventHandler'),
  \ dotnet#event('PreviewMouseMove', 'MouseEventHandler'),
  \ dotnet#event('MouseMove', 'MouseEventHandler'),
  \ dotnet#event('PreviewMouseWheel', 'MouseWheelEventHandler'),
  \ dotnet#event('MouseWheel', 'MouseWheelEventHandler'),
  \ dotnet#event('MouseEnter', 'MouseEventHandler'),
  \ dotnet#event('MouseLeave', 'MouseEventHandler'),
  \ dotnet#event('GotMouseCapture', 'MouseEventHandler'),
  \ dotnet#event('LostMouseCapture', 'MouseEventHandler'),
  \ dotnet#event('QueryCursor', 'QueryCursorEventHandler'),
  \ dotnet#event('PreviewStylusDown', 'StylusDownEventHandler'),
  \ dotnet#event('StylusDown', 'StylusDownEventHandler'),
  \ dotnet#event('PreviewStylusUp', 'StylusEventHandler'),
  \ dotnet#event('StylusUp', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusMove', 'StylusEventHandler'),
  \ dotnet#event('StylusMove', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusInAirMove', 'StylusEventHandler'),
  \ dotnet#event('StylusInAirMove', 'StylusEventHandler'),
  \ dotnet#event('StylusEnter', 'StylusEventHandler'),
  \ dotnet#event('StylusLeave', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusInRange', 'StylusEventHandler'),
  \ dotnet#event('StylusInRange', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusOutOfRange', 'StylusEventHandler'),
  \ dotnet#event('StylusOutOfRange', 'StylusEventHandler'),
  \ dotnet#event('PreviewStylusSystemGesture', 'StylusSystemGestureEventHandler'),
  \ dotnet#event('StylusSystemGesture', 'StylusSystemGestureEventHandler'),
  \ dotnet#event('GotStylusCapture', 'StylusEventHandler'),
  \ dotnet#event('LostStylusCapture', 'StylusEventHandler'),
  \ dotnet#event('StylusButtonDown', 'StylusButtonEventHandler'),
  \ dotnet#event('StylusButtonUp', 'StylusButtonEventHandler'),
  \ dotnet#event('PreviewStylusButtonDown', 'StylusButtonEventHandler'),
  \ dotnet#event('PreviewStylusButtonUp', 'StylusButtonEventHandler'),
  \ dotnet#event('PreviewKeyDown', 'KeyEventHandler'),
  \ dotnet#event('KeyDown', 'KeyEventHandler'),
  \ dotnet#event('PreviewKeyUp', 'KeyEventHandler'),
  \ dotnet#event('KeyUp', 'KeyEventHandler'),
  \ dotnet#event('PreviewGotKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('GotKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('PreviewLostKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('LostKeyboardFocus', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('PreviewTextInput', 'TextCompositionEventHandler'),
  \ dotnet#event('TextInput', 'TextCompositionEventHandler'),
  \ dotnet#event('PreviewQueryContinueDrag', 'QueryContinueDragEventHandler'),
  \ dotnet#event('QueryContinueDrag', 'QueryContinueDragEventHandler'),
  \ dotnet#event('PreviewGiveFeedback', 'GiveFeedbackEventHandler'),
  \ dotnet#event('GiveFeedback', 'GiveFeedbackEventHandler'),
  \ dotnet#event('PreviewDragEnter', 'DragEventHandler'),
  \ dotnet#event('DragEnter', 'DragEventHandler'),
  \ dotnet#event('PreviewDragOver', 'DragEventHandler'),
  \ dotnet#event('DragOver', 'DragEventHandler'),
  \ dotnet#event('PreviewDragLeave', 'DragEventHandler'),
  \ dotnet#event('DragLeave', 'DragEventHandler'),
  \ dotnet#event('PreviewDrop', 'DragEventHandler'),
  \ dotnet#event('Drop', 'DragEventHandler'),
  \ dotnet#event('PreviewTouchDown', 'EventHandler'),
  \ dotnet#event('TouchDown', 'EventHandler'),
  \ dotnet#event('PreviewTouchMove', 'EventHandler'),
  \ dotnet#event('TouchMove', 'EventHandler'),
  \ dotnet#event('PreviewTouchUp', 'EventHandler'),
  \ dotnet#event('TouchUp', 'EventHandler'),
  \ dotnet#event('GotTouchCapture', 'EventHandler'),
  \ dotnet#event('LostTouchCapture', 'EventHandler'),
  \ dotnet#event('TouchEnter', 'EventHandler'),
  \ dotnet#event('TouchLeave', 'EventHandler'),
  \ dotnet#event('IsMouseDirectlyOverChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsKeyboardFocusWithinChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsMouseCapturedChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsMouseCaptureWithinChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsStylusDirectlyOverChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsStylusCapturedChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsStylusCaptureWithinChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsKeyboardFocusedChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('GotFocus', 'RoutedEventHandler'),
  \ dotnet#event('LostFocus', 'RoutedEventHandler'),
  \ dotnet#event('IsEnabledChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsHitTestVisibleChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('IsVisibleChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('FocusableChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#prop('InputBindings', 'InputBindingCollection'),
  \ dotnet#prop('InputBindingsInternal', 'InputBindingCollection'),
  \ dotnet#prop('CommandBindings', 'CommandBindingCollection'),
  \ dotnet#prop('CommandBindingsInternal', 'CommandBindingCollection'),
  \ dotnet#prop('EventHandlersStore', 'EventHandlersStore'),
  \ dotnet#prop('AllowDrop', 'bool'),
  \ dotnet#prop('IsMouseDirectlyOver', 'bool'),
  \ dotnet#prop('IsMouseOver', 'bool'),
  \ dotnet#prop('IsStylusOver', 'bool'),
  \ dotnet#prop('IsKeyboardFocusWithin', 'bool'),
  \ dotnet#prop('IsMouseCaptured', 'bool'),
  \ dotnet#prop('IsMouseCaptureWithin', 'bool'),
  \ dotnet#prop('IsStylusDirectlyOver', 'bool'),
  \ dotnet#prop('IsStylusCaptured', 'bool'),
  \ dotnet#prop('IsStylusCaptureWithin', 'bool'),
  \ dotnet#prop('IsKeyboardFocused', 'bool'),
  \ dotnet#prop('IsInputMethodEnabled', 'bool'),
  \ dotnet#prop('Visibility', 'Visibility'),
  \ dotnet#prop('IsFocused', 'bool'),
  \ dotnet#prop('IsEnabled', 'bool'),
  \ dotnet#prop('IsEnabledCore', 'bool'),
  \ dotnet#prop('IsHitTestVisible', 'bool'),
  \ dotnet#prop('IsVisible', 'bool'),
  \ dotnet#prop('Focusable', 'bool'),
  \ dotnet#prop('AreAnyTouchesOver', 'bool'),
  \ dotnet#prop('AreAnyTouchesDirectlyOver', 'bool'),
  \ dotnet#prop('AreAnyTouchesCapturedWithin', 'bool'),
  \ dotnet#prop('AreAnyTouchesCaptured', 'bool'),
  \ dotnet#prop('TouchesCaptured', 'IEnumerable'),
  \ dotnet#prop('TouchesCapturedWithin', 'IEnumerable'),
  \ dotnet#prop('TouchesOver', 'IEnumerable'),
  \ dotnet#prop('TouchesDirectlyOver', 'IEnumerable'),
  \ dotnet#prop('HasAutomationPeer', 'bool'),
  \ ])

call dotnet#class('GiveFeedbackEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('GiveFeedbackEventArgs(', 'DragDropEffects effects, bool useDefaultCursors)', 'void'),
  \ dotnet#method('get_Effects(', ')', 'DragDropEffects'),
  \ dotnet#method('get_UseDefaultCursors(', ')', 'bool'),
  \ dotnet#method('set_UseDefaultCursors(', 'bool value)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Effects', 'DragDropEffects'),
  \ dotnet#prop('UseDefaultCursors', 'bool'),
  \ ])

call dotnet#class('GiveFeedbackEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('GiveFeedbackEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, GiveFeedbackEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, GiveFeedbackEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('LocalizabilityAttribute', 'Attribute', [ 
  \ dotnet#method('LocalizabilityAttribute(', 'LocalizationCategory category)', 'void'),
  \ dotnet#method('get_Category(', ')', 'LocalizationCategory'),
  \ dotnet#method('get_Readability(', ')', 'Readability'),
  \ dotnet#method('set_Readability(', 'Readability value)', 'void'),
  \ dotnet#method('get_Modifiability(', ')', 'Modifiability'),
  \ dotnet#method('set_Modifiability(', 'Modifiability value)', 'void'),
  \ dotnet#prop('Category', 'LocalizationCategory'),
  \ dotnet#prop('Readability', 'Readability'),
  \ dotnet#prop('Modifiability', 'Modifiability'),
  \ ])

call dotnet#class('PresentationSource', 'DispatcherObject', [ 
  \ dotnet#method('PresentationSource(', ')', 'void'),
  \ dotnet#method('GetInputProvider(', 'class Type inputDevice)', 'strict'),
  \ dotnet#method('FromVisual(', 'class Visual visual)', 'static PresentationSource'),
  \ dotnet#method('FromDependencyObject(', 'class DependencyObject dependencyObject)', 'static PresentationSource'),
  \ dotnet#method('AddSourceChangedHandler(', 'class IInputElement element, SourceChangedEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveSourceChangedHandler(', 'class IInputElement e, SourceChangedEventHandler handler)', 'static void'),
  \ dotnet#method('OnAncestorChanged(', 'class ContentElement ce)', 'static void'),
  \ dotnet#method('get_CompositionTarget(', ')', 'CompositionTarget'),
  \ dotnet#method('get_RootVisual(', ')', 'abstract'),
  \ dotnet#method('set_RootVisual(', 'class Visual value)', 'abstract void'),
  \ dotnet#method('PushMenuMode(', ')', 'void'),
  \ dotnet#method('PopMenuMode(', ')', 'void'),
  \ dotnet#method('OnEnterMenuMode(', ')', 'strict void'),
  \ dotnet#method('OnLeaveMenuMode(', ')', 'strict void'),
  \ dotnet#method('get_IsDisposed(', ')', 'abstract bool'),
  \ dotnet#method('get_CurrentSources(', ')', 'static'),
  \ dotnet#method('add_ContentRendered(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ContentRendered(', 'class EventHandler value)', 'void'),
  \ dotnet#method('GetCompositionTargetCore(', ')', 'abstract'),
  \ dotnet#method('RootChanged(', 'class Visual oldRoot, Visual newRoot)', 'void'),
  \ dotnet#method('AddSource(', ')', 'void'),
  \ dotnet#method('RemoveSource(', ')', 'void'),
  \ dotnet#method('ClearContentRenderedListeners(', ')', 'void'),
  \ dotnet#method('OnVisualAncestorChanged(', 'class DependencyObject uie, AncestorChangedEventArgs e)', 'static void'),
  \ dotnet#method('CriticalFromVisual(', 'class DependencyObject v)', 'static PresentationSource'),
  \ dotnet#method('CriticalFromVisual(', 'class DependencyObject v, bool enable2DTo3DTransition)', 'static PresentationSource'),
  \ dotnet#method('FireContentRendered(', 'object arg)', 'static object'),
  \ dotnet#method('UnderSamePresentationSource(', 'class DependencyObject[] visuals)', 'static bool'),
  \ dotnet#method('get_CriticalCurrentSources(', ')', 'static'),
  \ dotnet#method('PresentationSource(', ')', 'static void .'),
  \ dotnet#event('ContentRendered', 'EventHandler'),
  \ dotnet#prop('CompositionTarget', 'CompositionTarget'),
  \ dotnet#prop('RootVisual', 'Visual'),
  \ dotnet#prop('IsDisposed', 'bool'),
  \ dotnet#prop('CurrentSources', 'IEnumerable'),
  \ dotnet#prop('CriticalCurrentSources', 'IEnumerable'),
  \ ])

call dotnet#class('QueryContinueDragEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('QueryContinueDragEventArgs(', 'bool escapePressed, DragDropKeyStates dragDropKeyStates)', 'void'),
  \ dotnet#method('get_EscapePressed(', ')', 'bool'),
  \ dotnet#method('get_KeyStates(', ')', 'DragDropKeyStates'),
  \ dotnet#method('get_Action(', ')', 'DragAction'),
  \ dotnet#method('set_Action(', 'DragAction value)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('EscapePressed', 'bool'),
  \ dotnet#prop('KeyStates', 'DragDropKeyStates'),
  \ dotnet#prop('Action', 'DragAction'),
  \ ])

call dotnet#class('QueryContinueDragEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('QueryContinueDragEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, QueryContinueDragEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, QueryContinueDragEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('RoutedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('RoutedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, RoutedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, RoutedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('RoutedEventHandlerInfo', 'ValueType', [ 
  \ dotnet#field('_handler', 'Delegate'),
  \ dotnet#field('_handledEventsToo', 'bool'),
  \ dotnet#method('RoutedEventHandlerInfo(', 'class Delegate handler, bool handledEventsToo)', 'void'),
  \ dotnet#method('get_Handler(', ')', 'Delegate'),
  \ dotnet#method('get_InvokeHandledEventsToo(', ')', 'bool'),
  \ dotnet#method('InvokeHandler(', 'object target, RoutedEventArgs routedEventArgs)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'RoutedEventHandlerInfo handlerInfo)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('op_Equality(', 'RoutedEventHandlerInfo handlerInfo1, RoutedEventHandlerInfo handlerInfo2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'RoutedEventHandlerInfo handlerInfo1, RoutedEventHandlerInfo handlerInfo2)', 'static bool'),
  \ dotnet#prop('Handler', 'Delegate'),
  \ dotnet#prop('InvokeHandledEventsToo', 'bool'),
  \ ])

call dotnet#class('RoutedEvent', 'Object', [ 
  \ dotnet#method('AddOwner(', 'class Type ownerType)', 'RoutedEvent'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_RoutingStrategy(', ')', 'RoutingStrategy'),
  \ dotnet#method('get_HandlerType(', ')', 'Type'),
  \ dotnet#method('IsLegalHandler(', 'class Delegate handler)', 'bool'),
  \ dotnet#method('get_OwnerType(', ')', 'Type'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('RoutedEvent(', 'string name, RoutingStrategy routingStrategy, Type handlerType, Type ownerType)', 'void'),
  \ dotnet#method('get_GlobalIndex(', ')', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('RoutingStrategy', 'RoutingStrategy'),
  \ dotnet#prop('HandlerType', 'Type'),
  \ dotnet#prop('OwnerType', 'Type'),
  \ dotnet#prop('GlobalIndex', 'int32'),
  \ ])

call dotnet#class('SizeChangedInfo', 'Object', [ 
  \ dotnet#field('Next', 'SizeChangedInfo'),
  \ dotnet#method('SizeChangedInfo(', 'class UIElement element, Size previousSize, bool widthChanged, bool heightChanged)', 'void'),
  \ dotnet#method('get_PreviousSize(', ')', 'Size'),
  \ dotnet#method('get_NewSize(', ')', 'Size'),
  \ dotnet#method('get_WidthChanged(', ')', 'bool'),
  \ dotnet#method('get_HeightChanged(', ')', 'bool'),
  \ dotnet#method('Update(', 'bool widthChanged, bool heightChanged)', 'void'),
  \ dotnet#method('get_Element(', ')', '.method'),
  \ dotnet#prop('PreviousSize', 'Size'),
  \ dotnet#prop('NewSize', 'Size'),
  \ dotnet#prop('WidthChanged', 'bool'),
  \ dotnet#prop('HeightChanged', 'bool'),
  \ dotnet#prop('Element', 'UIElement'),
  \ ])

call dotnet#class('SourceChangedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('SourceChangedEventArgs(', 'class PresentationSource oldSource, PresentationSource newSource)', 'void'),
  \ dotnet#method('SourceChangedEventArgs(', 'class PresentationSource oldSource, PresentationSource newSource, IInputElement element, IInputElement oldParent)', 'void'),
  \ dotnet#method('get_OldSource(', ')', 'PresentationSource'),
  \ dotnet#method('get_NewSource(', ')', 'PresentationSource'),
  \ dotnet#method('get_Element(', ')', 'IInputElement'),
  \ dotnet#method('get_OldParent(', ')', 'IInputElement'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('OldSource', 'PresentationSource'),
  \ dotnet#prop('NewSource', 'PresentationSource'),
  \ dotnet#prop('Element', 'IInputElement'),
  \ dotnet#prop('OldParent', 'IInputElement'),
  \ ])

call dotnet#class('SourceChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('SourceChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, SourceChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, SourceChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('TextDecorations', 'Object', [ 
  \ dotnet#method('get_Underline(', ')', 'static'),
  \ dotnet#method('get_Strikethrough(', ')', 'static'),
  \ dotnet#method('get_OverLine(', ')', 'static'),
  \ dotnet#method('get_Baseline(', ')', 'static'),
  \ dotnet#method('TextDecorations(', ')', 'static void .'),
  \ dotnet#prop('Underline', 'TextDecorationCollection'),
  \ dotnet#prop('Strikethrough', 'TextDecorationCollection'),
  \ dotnet#prop('OverLine', 'TextDecorationCollection'),
  \ dotnet#prop('Baseline', 'TextDecorationCollection'),
  \ ])

call dotnet#class('TextDecoration', 'Animatable', [ 
  \ dotnet#method('TextDecoration(', ')', 'void'),
  \ dotnet#method('TextDecoration(', 'TextDecorationLocation location, Pen pen, float64 penOffset, TextDecorationUnit penOffsetUnit, TextDecorationUnit penThicknessUnit)', 'void'),
  \ dotnet#method('ValueEquals(', 'class TextDecoration textDecoration)', 'bool'),
  \ dotnet#method('Clone(', ')', 'TextDecoration'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TextDecoration'),
  \ dotnet#method('get_Pen(', ')', 'Pen'),
  \ dotnet#method('set_Pen(', 'class Pen value)', 'void'),
  \ dotnet#method('get_PenOffset(', ')', 'float64'),
  \ dotnet#method('set_PenOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_PenOffsetUnit(', ')', 'TextDecorationUnit'),
  \ dotnet#method('set_PenOffsetUnit(', 'TextDecorationUnit value)', 'void'),
  \ dotnet#method('get_PenThicknessUnit(', ')', 'TextDecorationUnit'),
  \ dotnet#method('set_PenThicknessUnit(', 'TextDecorationUnit value)', 'void'),
  \ dotnet#method('get_Location(', ')', 'TextDecorationLocation'),
  \ dotnet#method('set_Location(', 'TextDecorationLocation value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('TextDecoration(', ')', 'static void .'),
  \ dotnet#prop('Pen', 'Pen'),
  \ dotnet#prop('PenOffset', 'float64'),
  \ dotnet#prop('PenOffsetUnit', 'TextDecorationUnit'),
  \ dotnet#prop('PenThicknessUnit', 'TextDecorationUnit'),
  \ dotnet#prop('Location', 'TextDecorationLocation'),
  \ ])

call dotnet#class('TextDecorationCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'TextDecoration'),
  \ dotnet#field('_list', 'TextDecorationCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('TextDecorationCollection(', 'class TextDecorationCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'TextDecoration'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('ValueEquals(', 'class TextDecorationCollection textDecorations)', 'bool'),
  \ dotnet#method('Add(', 'class IEnumerable textDecorations)', 'void'),
  \ dotnet#method('Clone(', ')', 'TextDecorationCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TextDecorationCollection'),
  \ dotnet#method('Add(', 'class TextDecoration value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class TextDecoration value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class TextDecoration value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, TextDecoration value)', 'void'),
  \ dotnet#method('Remove(', 'class TextDecoration value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, TextDecoration value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class TextDecoration[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'TextDecorationCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'TextDecoration'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class TextDecoration value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('TextDecorationCollection(', ')', 'void'),
  \ dotnet#method('TextDecorationCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('TextDecorationCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'TextDecoration'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'TextDecorationCollection'),
  \ ])

call dotnet#class('TextDecorationCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object input)', 'object'),
  \ dotnet#method('ConvertFromString(', 'string text)', 'static TextDecorationCollection'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('TextDecorationCollectionConverter(', ')', 'void'),
  \ dotnet#method('TextDecorationCollectionConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('UIPropertyMetadata', 'PropertyMetadata', [ 
  \ dotnet#method('UIPropertyMetadata(', ')', 'void'),
  \ dotnet#method('UIPropertyMetadata(', 'object defaultValue)', 'void'),
  \ dotnet#method('UIPropertyMetadata(', 'class PropertyChangedCallback propertyChangedCallback)', 'void'),
  \ dotnet#method('UIPropertyMetadata(', 'object defaultValue, PropertyChangedCallback propertyChangedCallback)', 'void'),
  \ dotnet#method('UIPropertyMetadata(', 'object defaultValue, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback)', 'void'),
  \ dotnet#method('UIPropertyMetadata(', 'object defaultValue, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback, bool isAnimationProhibited)', 'void'),
  \ dotnet#method('CreateInstance(', ')', 'strict'),
  \ dotnet#method('get_IsAnimationProhibited(', ')', 'bool'),
  \ dotnet#method('set_IsAnimationProhibited(', 'bool value)', 'void'),
  \ dotnet#prop('IsAnimationProhibited', 'bool'),
  \ ])

call dotnet#class('StrokeCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('StrokeCollectionConverter(', ')', 'void'),
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('GetStandardValuesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ ])

call dotnet#class('KeySplineConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptor, Type destinationType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo cultureInfo, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('KeySplineConverter(', ')', 'void'),
  \ ])

call dotnet#class('KeyTimeConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type type)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type type)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('KeyTimeConverter(', ')', 'void'),
  \ dotnet#method('KeyTimeConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('FrameworkElement', 'UIElement', [ 
  \ dotnet#field('_templatedParent', 'DependencyObject'),
  \ dotnet#method('FrameworkElement(', ')', 'void'),
  \ dotnet#method('get_Style(', ')', 'Style'),
  \ dotnet#method('set_Style(', 'class Style value)', 'void'),
  \ dotnet#method('ShouldSerializeStyle(', ')', 'bool'),
  \ dotnet#method('get_OverridesDefaultStyle(', ')', 'bool'),
  \ dotnet#method('set_OverridesDefaultStyle(', 'bool value)', 'void'),
  \ dotnet#method('get_UseLayoutRounding(', ')', 'bool'),
  \ dotnet#method('set_UseLayoutRounding(', 'bool value)', 'void'),
  \ dotnet#method('get_DefaultStyleKey(', ')', 'famorassem object'),
  \ dotnet#method('set_DefaultStyleKey(', 'object value)', 'famorassem void'),
  \ dotnet#method('get_ThemeStyle(', ')', '.method'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('OnThemeStyleChanged(', 'class DependencyObject d, object oldValue, object newValue)', 'static void'),
  \ dotnet#method('get_TemplateInternal(', ')', 'strict'),
  \ dotnet#method('get_TemplateCache(', ')', 'strict'),
  \ dotnet#method('set_TemplateCache(', 'class FrameworkTemplate value)', 'strict void'),
  \ dotnet#method('OnTemplateChangedInternal(', 'class FrameworkTemplate oldTemplate, FrameworkTemplate newTemplate)', 'strict void'),
  \ dotnet#method('OnStyleChanged(', 'class Style oldStyle, Style newStyle)', 'famorassem void'),
  \ dotnet#method('ParentLayoutInvalidated(', 'class UIElement child)', 'famorassem void'),
  \ dotnet#method('ApplyTemplate(', ')', 'bool'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('OnPostApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('BeginStoryboard(', 'class Storyboard storyboard)', 'void'),
  \ dotnet#method('BeginStoryboard(', 'class Storyboard storyboard, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('BeginStoryboard(', 'class Storyboard storyboard, HandoffBehavior handoffBehavior, bool isControllable)', 'void'),
  \ dotnet#method('FindNamedFrameworkElement(', 'class FrameworkElement startElement, string targetName)', 'static FrameworkElement'),
  \ dotnet#method('get_Triggers(', ')', 'TriggerCollection'),
  \ dotnet#method('ShouldSerializeTriggers(', ')', 'bool'),
  \ dotnet#method('get_TemplatedParent(', ')', 'DependencyObject'),
  \ dotnet#method('get_IsTemplateRoot(', ')', 'bool'),
  \ dotnet#method('get_TemplateChild(', ')', 'strict'),
  \ dotnet#method('set_TemplateChild(', 'class UIElement value)', 'strict void'),
  \ dotnet#method('get_StateGroupsRoot(', ')', 'strict'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_HasResources(', ')', 'bool'),
  \ dotnet#method('get_Resources(', ')', 'ResourceDictionary'),
  \ dotnet#method('set_Resources(', 'class ResourceDictionary value)', 'void'),
  \ dotnet#method('get_Resources(', ')', ''),
  \ dotnet#method('set_Resources(', 'class ResourceDictionary value)', 'void '),
  \ dotnet#method('IsAmbientPropertyAvailable(', 'string propertyName)', 'bool '),
  \ dotnet#method('ShouldSerializeResources(', ')', 'bool'),
  \ dotnet#method('GetTemplateChild(', 'string childName)', 'famorassem DependencyObject'),
  \ dotnet#method('FindResource(', 'object resourceKey)', 'object'),
  \ dotnet#method('TryFindResource(', 'object resourceKey)', 'object'),
  \ dotnet#method('FindImplicitStyleResource(', 'class FrameworkElement fe, object resourceKey, [out] object& source)', 'static object'),
  \ dotnet#method('FindImplicitStyleResource(', 'class FrameworkContentElement fce, object resourceKey, [out] object& source)', 'static object'),
  \ dotnet#method('FindResourceInternal(', 'class FrameworkElement fe, FrameworkContentElement fce, object resourceKey)', 'static object'),
  \ dotnet#method('FindResourceFromAppOrSystem(', 'object resourceKey, [out] object& source, bool disableThrowOnResourceNotFound, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference)', 'static object'),
  \ dotnet#method('FindResourceInternal(', 'class FrameworkElement fe, FrameworkContentElement fce, DependencyProperty dp, object resourceKey, object unlinkedParent, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference, DependencyObject boundaryElement, bool isImplicitStyleLookup, [out] object& source)', 'static object'),
  \ dotnet#method('FindResourceInTree(', 'class FrameworkElement feStart, FrameworkContentElement fceStart, DependencyProperty dp, object resourceKey, object unlinkedParent, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference, DependencyObject boundaryElement, [out] InheritanceBehavior& inheritanceBehavior, [out] object& source)', 'static object'),
  \ dotnet#method('FindTemplateResourceInternal(', 'class DependencyObject target, object item, Type templateType)', 'static object'),
  \ dotnet#method('HasNonDefaultValue(', 'class DependencyProperty dp)', 'bool'),
  \ dotnet#method('FindScope(', 'class DependencyObject d)', 'static INameScope'),
  \ dotnet#method('FindScope(', 'class DependencyObject d, [out] DependencyObject& scopeOwner)', 'static INameScope'),
  \ dotnet#method('SetResourceReference(', 'class DependencyProperty dp, object name)', 'void'),
  \ dotnet#method('EvaluateBaseValueCore(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& newEntry)', 'void'),
  \ dotnet#method('GetRawValue(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& entry)', 'void'),
  \ dotnet#method('GetExpressionCore(', 'class DependencyProperty dp, PropertyMetadata metadata)', 'Expression'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('GetFrameworkParent(', 'object current)', 'static DependencyObject'),
  \ dotnet#method('GetFrameworkParent(', 'class FrameworkElement current, [out] FrameworkElement& feParent, [out] FrameworkContentElement& fceParent)', 'static bool'),
  \ dotnet#method('GetFrameworkParent(', 'class FrameworkContentElement current, [out] FrameworkElement& feParent, [out] FrameworkContentElement& fceParent)', 'static bool'),
  \ dotnet#method('GetContainingFrameworkElement(', 'class DependencyObject current, [out] FrameworkElement& fe, [out] FrameworkContentElement& fce)', 'static bool'),
  \ dotnet#method('GetTemplatedParentChildRecord(', 'class DependencyObject templatedParent, int32 childIndex, [out] ChildRecord& childRecord, [out] bool& isChildRecordValid)', 'static void'),
  \ dotnet#method('GetPlainText(', ')', 'strict string'),
  \ dotnet#method('pushTextRenderingMode(', ')', 'strict void'),
  \ dotnet#method('OnAncestorChanged(', ')', 'strict void'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('OnVisualAncestorChanged(', 'object sender, AncestorChangedEventArgs e)', 'void'),
  \ dotnet#method('get_InheritanceBehavior(', ')', 'famorassem'),
  \ dotnet#method('set_InheritanceBehavior(', 'InheritanceBehavior value)', 'famorassem void'),
  \ dotnet#method('add_TargetUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TargetUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_SourceUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SourceUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DataContextChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_DataContextChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_DataContext(', ')', 'object'),
  \ dotnet#method('set_DataContext(', 'object value)', 'void'),
  \ dotnet#method('GetBindingExpression(', 'class DependencyProperty dp)', 'BindingExpression'),
  \ dotnet#method('SetBinding(', 'class DependencyProperty dp, BindingBase binding)', 'BindingExpressionBase'),
  \ dotnet#method('SetBinding(', 'class DependencyProperty dp, string path)', 'BindingExpression'),
  \ dotnet#method('get_BindingGroup(', ')', 'BindingGroup'),
  \ dotnet#method('set_BindingGroup(', 'class BindingGroup value)', 'void'),
  \ dotnet#method('GetUIParentCore(', ')', 'famorassem DependencyObject'),
  \ dotnet#method('AdjustEventSource(', 'class RoutedEventArgs args)', 'strict object'),
  \ dotnet#method('AdjustBranchSource(', 'class RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('BuildRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict bool'),
  \ dotnet#method('BuildRouteCoreHelper(', 'class EventRoute route, RoutedEventArgs args, bool shouldAddIntermediateElementsToRoute)', 'bool'),
  \ dotnet#method('AddToEventRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('AddStyleHandlersToEventRoute(', 'class FrameworkElement fe, FrameworkContentElement fce, EventRoute route, RoutedEventArgs args)', 'static void'),
  \ dotnet#method('IgnoreModelParentBuildRoute(', 'class RoutedEventArgs args)', 'strict bool'),
  \ dotnet#method('get_Language(', ')', 'XmlLanguage'),
  \ dotnet#method('set_Language(', 'class XmlLanguage value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Tag(', ')', 'object'),
  \ dotnet#method('set_Tag(', 'object value)', 'void'),
  \ dotnet#method('get_InputScope(', ')', 'InputScope'),
  \ dotnet#method('set_InputScope(', 'class InputScope value)', 'void'),
  \ dotnet#method('add_RequestBringIntoView(', 'class RequestBringIntoViewEventHandler value)', 'void'),
  \ dotnet#method('remove_RequestBringIntoView(', 'class RequestBringIntoViewEventHandler value)', 'void'),
  \ dotnet#method('BringIntoView(', ')', 'void'),
  \ dotnet#method('BringIntoView(', 'Rect targetRectangle)', 'void'),
  \ dotnet#method('add_SizeChanged(', 'class SizeChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_SizeChanged(', 'class SizeChangedEventHandler value)', 'void'),
  \ dotnet#method('get_ActualWidth(', ')', 'float64'),
  \ dotnet#method('get_ActualHeight(', ')', 'float64'),
  \ dotnet#method('get_LayoutTransform(', ')', 'Transform'),
  \ dotnet#method('set_LayoutTransform(', 'class Transform value)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('set_Width(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinWidth(', ')', 'float64'),
  \ dotnet#method('set_MinWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxWidth(', ')', 'float64'),
  \ dotnet#method('set_MaxWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_Height(', ')', 'float64'),
  \ dotnet#method('set_Height(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinHeight(', ')', 'float64'),
  \ dotnet#method('set_MinHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxHeight(', ')', 'float64'),
  \ dotnet#method('set_MaxHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_FlowDirection(', ')', 'FlowDirection'),
  \ dotnet#method('set_FlowDirection(', 'FlowDirection value)', 'void'),
  \ dotnet#method('GetFlowDirection(', 'class DependencyObject element)', 'static FlowDirection'),
  \ dotnet#method('SetFlowDirection(', 'class DependencyObject element, FlowDirection value)', 'static void'),
  \ dotnet#method('get_Margin(', ')', 'Thickness'),
  \ dotnet#method('set_Margin(', 'Thickness value)', 'void'),
  \ dotnet#method('ValidateHorizontalAlignmentValue(', 'object value)', 'static bool'),
  \ dotnet#method('get_HorizontalAlignment(', ')', 'HorizontalAlignment'),
  \ dotnet#method('set_HorizontalAlignment(', 'HorizontalAlignment value)', 'void'),
  \ dotnet#method('ValidateVerticalAlignmentValue(', 'object value)', 'static bool'),
  \ dotnet#method('get_VerticalAlignment(', ')', 'VerticalAlignment'),
  \ dotnet#method('set_VerticalAlignment(', 'VerticalAlignment value)', 'void'),
  \ dotnet#method('get_DefaultFocusVisualStyle(', ')', 'static Style'),
  \ dotnet#method('get_FocusVisualStyle(', ')', 'Style'),
  \ dotnet#method('set_FocusVisualStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_Cursor(', ')', 'Cursor'),
  \ dotnet#method('set_Cursor(', 'class Cursor value)', 'void'),
  \ dotnet#method('get_ForceCursor(', ')', 'bool'),
  \ dotnet#method('set_ForceCursor(', 'bool value)', 'void'),
  \ dotnet#method('ShouldApplyMirrorTransform(', 'class FrameworkElement fe)', 'static bool'),
  \ dotnet#method('ApplyMirrorTransform(', 'FlowDirection parentFD, FlowDirection thisFD)', 'static bool'),
  \ dotnet#method('MeasureCore(', 'Size availableSize)', 'family'),
  \ dotnet#method('ArrangeCore(', 'Rect finalRect)', 'void'),
  \ dotnet#method('OnRenderSizeChanged(', 'class SizeChangedInfo sizeInfo)', 'famorassem void'),
  \ dotnet#method('GetLayoutClip(', 'Size layoutSlotSize)', 'Geometry'),
  \ dotnet#method('GetLayoutClipInternal(', ')', 'Geometry'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'family'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'family'),
  \ dotnet#method('InternalSetLayoutTransform(', 'class UIElement element, Transform layoutTransform)', 'static void'),
  \ dotnet#method('MoveFocus(', 'class TraversalRequest request)', 'bool'),
  \ dotnet#method('PredictFocus(', 'FocusNavigationDirection direction)', ''),
  \ dotnet#method('OnGotFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('get_IsInitialized(', ')', 'bool'),
  \ dotnet#method('add_Initialized(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Initialized(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnInitialized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnPresentationSourceChanged(', 'bool attached)', 'void'),
  \ dotnet#method('get_IsLoaded(', ')', 'bool'),
  \ dotnet#method('add_Loaded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Loaded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnAddHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('OnRemoveHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('OnLoaded(', 'class RoutedEventArgs args)', 'void'),
  \ dotnet#method('add_Unloaded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Unloaded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnUnloaded(', 'class RoutedEventArgs args)', 'void'),
  \ dotnet#method('AddSynchronizedInputPreOpportunityHandlerCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('RaiseClrEvent(', 'class EventPrivateKey key, EventArgs args)', 'void'),
  \ dotnet#method('get_PopupControlService(', ')', 'static'),
  \ dotnet#method('get_KeyboardNavigation(', ')', 'static'),
  \ dotnet#method('get_ToolTip(', ')', 'object'),
  \ dotnet#method('set_ToolTip(', 'object value)', 'void'),
  \ dotnet#method('get_ContextMenu(', ')', 'ContextMenu'),
  \ dotnet#method('set_ContextMenu(', 'class ContextMenu value)', 'void'),
  \ dotnet#method('add_ToolTipOpening(', 'class ToolTipEventHandler value)', 'void'),
  \ dotnet#method('remove_ToolTipOpening(', 'class ToolTipEventHandler value)', 'void'),
  \ dotnet#method('OnToolTipOpening(', 'class ToolTipEventArgs e)', 'void'),
  \ dotnet#method('add_ToolTipClosing(', 'class ToolTipEventHandler value)', 'void'),
  \ dotnet#method('remove_ToolTipClosing(', 'class ToolTipEventHandler value)', 'void'),
  \ dotnet#method('OnToolTipClosing(', 'class ToolTipEventArgs e)', 'void'),
  \ dotnet#method('add_ContextMenuOpening(', 'class ContextMenuEventHandler value)', 'void'),
  \ dotnet#method('remove_ContextMenuOpening(', 'class ContextMenuEventHandler value)', 'void'),
  \ dotnet#method('OnContextMenuOpening(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('add_ContextMenuClosing(', 'class ContextMenuEventHandler value)', 'void'),
  \ dotnet#method('remove_ContextMenuClosing(', 'class ContextMenuEventHandler value)', 'void'),
  \ dotnet#method('OnContextMenuClosing(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('AddIntermediateElementsToRoute(', 'class DependencyObject mergePoint, EventRoute route, RoutedEventArgs args, DependencyObject modelTreeNode)', 'static void'),
  \ dotnet#method('EventHandlersStoreAdd(', 'class EventPrivateKey key, Delegate handler)', 'void'),
  \ dotnet#method('EventHandlersStoreRemove(', 'class EventPrivateKey key, Delegate handler)', 'void'),
  \ dotnet#method('get_HasResourceReference(', ')', 'bool'),
  \ dotnet#method('set_HasResourceReference(', 'bool value)', 'void'),
  \ dotnet#method('get_IsLogicalChildrenIterationInProgress(', ')', 'bool'),
  \ dotnet#method('set_IsLogicalChildrenIterationInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_InVisibilityCollapsedTree(', ')', 'bool'),
  \ dotnet#method('set_InVisibilityCollapsedTree(', 'bool value)', 'void'),
  \ dotnet#method('get_SubtreeHasLoadedChangeHandler(', ')', 'bool'),
  \ dotnet#method('set_SubtreeHasLoadedChangeHandler(', 'bool value)', 'void'),
  \ dotnet#method('get_IsLoadedCache(', ')', 'bool'),
  \ dotnet#method('set_IsLoadedCache(', 'bool value)', 'void'),
  \ dotnet#method('get_IsParentAnFE(', ')', 'bool'),
  \ dotnet#method('set_IsParentAnFE(', 'bool value)', 'void'),
  \ dotnet#method('get_IsTemplatedParentAnFE(', ')', 'bool'),
  \ dotnet#method('set_IsTemplatedParentAnFE(', 'bool value)', 'void'),
  \ dotnet#method('get_HasLogicalChildren(', ')', 'bool'),
  \ dotnet#method('set_HasLogicalChildren(', 'bool value)', 'void'),
  \ dotnet#method('get_IsRightToLeft(', ')', 'bool'),
  \ dotnet#method('set_IsRightToLeft(', 'bool value)', 'void'),
  \ dotnet#method('get_TemplateChildIndex(', ')', 'int32'),
  \ dotnet#method('set_TemplateChildIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsRequestingExpression(', ')', 'bool'),
  \ dotnet#method('set_IsRequestingExpression(', 'bool value)', 'void'),
  \ dotnet#method('get_BypassLayoutPolicies(', ')', 'bool'),
  \ dotnet#method('set_BypassLayoutPolicies(', 'bool value)', 'void'),
  \ dotnet#method('ReadInternalFlag(', 'InternalFlags reqFlag)', 'bool'),
  \ dotnet#method('ReadInternalFlag2(', 'InternalFlags2 reqFlag)', 'bool'),
  \ dotnet#method('WriteInternalFlag(', 'InternalFlags reqFlag, bool set)', 'void'),
  \ dotnet#method('WriteInternalFlag2(', 'InternalFlags2 reqFlag, bool set)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DpiScaleX(', ')', 'static float64'),
  \ dotnet#method('get_DpiScaleY(', ')', 'static float64'),
  \ dotnet#method('get_Parent(', ')', 'DependencyObject'),
  \ dotnet#method('RegisterName(', 'string name, object scopedElement)', 'void'),
  \ dotnet#method('UnregisterName(', 'string name)', 'void'),
  \ dotnet#method('FindName(', 'string name)', 'object'),
  \ dotnet#method('FindName(', 'string name, [out] DependencyObject& scopeOwner)', 'object'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('FindResourceOnSelf(', 'object resourceKey, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference)', 'object'),
  \ dotnet#method('ContextVerifiedGetParent(', ')', 'DependencyObject'),
  \ dotnet#method('AddLogicalChild(', 'object child)', 'famorassem void'),
  \ dotnet#method('RemoveLogicalChild(', 'object child)', 'famorassem void'),
  \ dotnet#method('ChangeLogicalParent(', 'class DependencyObject newParent)', 'void'),
  \ dotnet#method('OnNewParent(', 'class DependencyObject newParent)', 'strict void'),
  \ dotnet#method('OnAncestorChangedInternal(', 'TreeChangeInfo parentTreeState)', 'void'),
  \ dotnet#method('InvalidateTreeDependentProperties(', 'TreeChangeInfo parentTreeState, bool isSelfInheritanceParent)', 'FrugalObjectList'),
  \ dotnet#method('get_ThisHasLoadedChangeEventHandler(', ')', 'bool'),
  \ dotnet#method('get_HasFefLoadedChangeHandler(', ')', 'bool'),
  \ dotnet#method('UpdateStyleProperty(', ')', 'void'),
  \ dotnet#method('UpdateThemeStyleProperty(', ')', 'void'),
  \ dotnet#method('OnThemeChanged(', ')', 'strict void'),
  \ dotnet#method('FireLoadedOnDescendentsInternal(', ')', 'void'),
  \ dotnet#method('FireUnloadedOnDescendentsInternal(', ')', 'void'),
  \ dotnet#method('ShouldProvideInheritanceContext(', 'class DependencyObject target, DependencyProperty property)', 'strict bool'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('ChangeSubtreeHasLoadedChangedHandler(', 'class DependencyObject mentor)', 'void'),
  \ dotnet#method('RaiseInheritedPropertyChangedEvent(', 'InheritablePropertyChangeInfo& info)', 'void'),
  \ dotnet#method('get_IsStyleUpdateInProgress(', ')', 'bool'),
  \ dotnet#method('set_IsStyleUpdateInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_IsThemeStyleUpdateInProgress(', ')', 'bool'),
  \ dotnet#method('set_IsThemeStyleUpdateInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_StoresParentTemplateValues(', ')', 'bool'),
  \ dotnet#method('set_StoresParentTemplateValues(', 'bool value)', 'void'),
  \ dotnet#method('get_HasNumberSubstitutionChanged(', ')', 'bool'),
  \ dotnet#method('set_HasNumberSubstitutionChanged(', 'bool value)', 'void'),
  \ dotnet#method('get_HasTemplateGeneratedSubTree(', ')', 'bool'),
  \ dotnet#method('set_HasTemplateGeneratedSubTree(', 'bool value)', 'void'),
  \ dotnet#method('get_HasImplicitStyleFromResources(', ')', 'bool'),
  \ dotnet#method('set_HasImplicitStyleFromResources(', 'bool value)', 'void'),
  \ dotnet#method('get_ShouldLookupImplicitStyles(', ')', 'bool'),
  \ dotnet#method('set_ShouldLookupImplicitStyles(', 'bool value)', 'void'),
  \ dotnet#method('get_IsStyleSetFromGenerator(', ')', 'bool'),
  \ dotnet#method('set_IsStyleSetFromGenerator(', 'bool value)', 'void'),
  \ dotnet#method('get_HasStyleChanged(', ')', 'bool'),
  \ dotnet#method('set_HasStyleChanged(', 'bool value)', 'void'),
  \ dotnet#method('get_HasTemplateChanged(', ')', 'bool'),
  \ dotnet#method('set_HasTemplateChanged(', 'bool value)', 'void'),
  \ dotnet#method('get_HasStyleInvalidated(', ')', 'bool'),
  \ dotnet#method('set_HasStyleInvalidated(', 'bool value)', 'void'),
  \ dotnet#method('get_HasStyleEverBeenFetched(', ')', 'bool'),
  \ dotnet#method('set_HasStyleEverBeenFetched(', 'bool value)', 'void'),
  \ dotnet#method('get_HasLocalStyle(', ')', 'bool'),
  \ dotnet#method('set_HasLocalStyle(', 'bool value)', 'void'),
  \ dotnet#method('get_HasThemeStyleEverBeenFetched(', ')', 'bool'),
  \ dotnet#method('set_HasThemeStyleEverBeenFetched(', 'bool value)', 'void'),
  \ dotnet#method('get_AncestorChangeInProgress(', ')', 'bool'),
  \ dotnet#method('set_AncestorChangeInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_InheritableProperties(', ')', '.method'),
  \ dotnet#method('set_InheritableProperties(', 'class FrugalObjectList value)', 'void'),
  \ dotnet#method('get_LoadedPending(', ')', 'object[]'),
  \ dotnet#method('get_UnloadedPending(', ')', 'object[]'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#method('get_PotentiallyHasMentees(', ')', 'bool'),
  \ dotnet#method('set_PotentiallyHasMentees(', 'bool value)', 'void'),
  \ dotnet#method('add_ResourcesChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ResourcesChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_InheritedPropertyChanged(', 'class InheritedPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_InheritedPropertyChanged(', 'class InheritedPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('FrameworkElement(', ')', 'static void .'),
  \ dotnet#event('TargetUpdated', 'EventHandler'),
  \ dotnet#event('SourceUpdated', 'EventHandler'),
  \ dotnet#event('DataContextChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('RequestBringIntoView', 'RequestBringIntoViewEventHandler'),
  \ dotnet#event('SizeChanged', 'SizeChangedEventHandler'),
  \ dotnet#event('Initialized', 'EventHandler'),
  \ dotnet#event('Loaded', 'RoutedEventHandler'),
  \ dotnet#event('Unloaded', 'RoutedEventHandler'),
  \ dotnet#event('ToolTipOpening', 'ToolTipEventHandler'),
  \ dotnet#event('ToolTipClosing', 'ToolTipEventHandler'),
  \ dotnet#event('ContextMenuOpening', 'ContextMenuEventHandler'),
  \ dotnet#event('ContextMenuClosing', 'ContextMenuEventHandler'),
  \ dotnet#event('ResourcesChanged', 'EventHandler'),
  \ dotnet#event('InheritedPropertyChanged', 'InheritedPropertyChangedEventHandler'),
  \ dotnet#prop('Style', 'Style'),
  \ dotnet#prop('OverridesDefaultStyle', 'bool'),
  \ dotnet#prop('UseLayoutRounding', 'bool'),
  \ dotnet#prop('DefaultStyleKey', 'object'),
  \ dotnet#prop('ThemeStyle', 'Style'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('TemplateInternal', 'FrameworkTemplate'),
  \ dotnet#prop('TemplateCache', 'FrameworkTemplate'),
  \ dotnet#prop('Triggers', 'TriggerCollection'),
  \ dotnet#prop('TemplatedParent', 'DependencyObject'),
  \ dotnet#prop('IsTemplateRoot', 'bool'),
  \ dotnet#prop('TemplateChild', 'UIElement'),
  \ dotnet#prop('StateGroupsRoot', 'FrameworkElement'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('HasResources', 'bool'),
  \ dotnet#prop('Resources', 'ResourceDictionary'),
  \ dotnet#prop('Resources', 'ResourceDictionary'),
  \ dotnet#prop('InheritanceBehavior', 'InheritanceBehavior'),
  \ dotnet#prop('DataContext', 'object'),
  \ dotnet#prop('BindingGroup', 'BindingGroup'),
  \ dotnet#prop('Language', 'XmlLanguage'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Tag', 'object'),
  \ dotnet#prop('InputScope', 'InputScope'),
  \ dotnet#prop('ActualWidth', 'float64'),
  \ dotnet#prop('ActualHeight', 'float64'),
  \ dotnet#prop('LayoutTransform', 'Transform'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('MinWidth', 'float64'),
  \ dotnet#prop('MaxWidth', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('MinHeight', 'float64'),
  \ dotnet#prop('MaxHeight', 'float64'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ dotnet#prop('Margin', 'Thickness'),
  \ dotnet#prop('HorizontalAlignment', 'HorizontalAlignment'),
  \ dotnet#prop('VerticalAlignment', 'VerticalAlignment'),
  \ dotnet#prop('DefaultFocusVisualStyle', 'Style'),
  \ dotnet#prop('FocusVisualStyle', 'Style'),
  \ dotnet#prop('Cursor', 'Cursor'),
  \ dotnet#prop('ForceCursor', 'bool'),
  \ dotnet#prop('IsInitialized', 'bool'),
  \ dotnet#prop('IsLoaded', 'bool'),
  \ dotnet#prop('PopupControlService', 'PopupControlService'),
  \ dotnet#prop('KeyboardNavigation', 'KeyboardNavigation'),
  \ dotnet#prop('ToolTip', 'object'),
  \ dotnet#prop('ContextMenu', 'ContextMenu'),
  \ dotnet#prop('HasResourceReference', 'bool'),
  \ dotnet#prop('IsLogicalChildrenIterationInProgress', 'bool'),
  \ dotnet#prop('InVisibilityCollapsedTree', 'bool'),
  \ dotnet#prop('SubtreeHasLoadedChangeHandler', 'bool'),
  \ dotnet#prop('IsLoadedCache', 'bool'),
  \ dotnet#prop('IsParentAnFE', 'bool'),
  \ dotnet#prop('IsTemplatedParentAnFE', 'bool'),
  \ dotnet#prop('HasLogicalChildren', 'bool'),
  \ dotnet#prop('IsRightToLeft', 'bool'),
  \ dotnet#prop('TemplateChildIndex', 'int32'),
  \ dotnet#prop('IsRequestingExpression', 'bool'),
  \ dotnet#prop('BypassLayoutPolicies', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DpiScaleX', 'float64'),
  \ dotnet#prop('DpiScaleY', 'float64'),
  \ dotnet#prop('Parent', 'DependencyObject'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('ThisHasLoadedChangeEventHandler', 'bool'),
  \ dotnet#prop('HasFefLoadedChangeHandler', 'bool'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('IsStyleUpdateInProgress', 'bool'),
  \ dotnet#prop('IsThemeStyleUpdateInProgress', 'bool'),
  \ dotnet#prop('StoresParentTemplateValues', 'bool'),
  \ dotnet#prop('HasNumberSubstitutionChanged', 'bool'),
  \ dotnet#prop('HasTemplateGeneratedSubTree', 'bool'),
  \ dotnet#prop('HasImplicitStyleFromResources', 'bool'),
  \ dotnet#prop('ShouldLookupImplicitStyles', 'bool'),
  \ dotnet#prop('IsStyleSetFromGenerator', 'bool'),
  \ dotnet#prop('HasStyleChanged', 'bool'),
  \ dotnet#prop('HasTemplateChanged', 'bool'),
  \ dotnet#prop('HasStyleInvalidated', 'bool'),
  \ dotnet#prop('HasStyleEverBeenFetched', 'bool'),
  \ dotnet#prop('HasLocalStyle', 'bool'),
  \ dotnet#prop('HasThemeStyleEverBeenFetched', 'bool'),
  \ dotnet#prop('AncestorChangeInProgress', 'bool'),
  \ dotnet#prop('InheritableProperties', 'FrugalObjectList'),
  \ dotnet#prop('LoadedPending', 'object[]'),
  \ dotnet#prop('UnloadedPending', 'object[]'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ dotnet#prop('PotentiallyHasMentees', 'bool'),
  \ ])

call dotnet#class('Window', 'ContentControl', [ 
  \ dotnet#field('minWidth', 'float64'),
  \ dotnet#field('maxWidth', 'float64'),
  \ dotnet#field('minHeight', 'float64'),
  \ dotnet#field('maxHeight', 'float64'),
  \ dotnet#method('Window(', 'float64 minSize, float64 maxSize)', 'void'),
  \ dotnet#method('Window(', 'class HwndSource sourceWindow)', 'void'),
  \ dotnet#method('get_IsSourceWindowNull(', ')', 'bool'),
  \ dotnet#method('get_IsCompositionTargetInvalid(', ')', 'bool'),
  \ dotnet#method('get_CriticalHandle(', ')', 'int'),
  \ dotnet#method('get_WorkAreaBoundsForNearestMonitor(', ')', '.method'),
  \ dotnet#method('get_WindowBounds(', ')', '.method'),
  \ dotnet#method('get_HwndSourceSizeToContent(', ')', '.method'),
  \ dotnet#method('set_HwndSourceSizeToContent(', 'SizeToContent value)', 'void'),
  \ dotnet#method('set_RootVisual(', 'class Visual value)', 'void'),
  \ dotnet#method('get_IsActiveWindow(', ')', 'bool'),
  \ dotnet#method('get_HwndSourceWindow(', ')', '.method'),
  \ dotnet#method('get_CompositionTarget(', ')', '.method'),
  \ dotnet#method('get_WindowSize(', ')', '.method'),
  \ dotnet#method('get_StyleExFromHwnd(', ')', 'int32'),
  \ dotnet#method('get_StyleFromHwnd(', ')', 'int32'),
  \ dotnet#method('GetPointRelativeToWindow(', 'int32 x, int32 y, FlowDirection flowDirection)', 'NativeMethods/POINT'),
  \ dotnet#method('GetSizeFromHwndInMeasureUnits(', ')', 'Size'),
  \ dotnet#method('GetHwndNonClientAreaSizeInMeasureUnits(', ')', 'Size'),
  \ dotnet#method('ClearRootVisual(', ')', 'void'),
  \ dotnet#method('AddDisposedHandler(', 'class EventHandler theHandler)', 'void'),
  \ dotnet#method('RemoveDisposedHandler(', 'class EventHandler theHandler)', 'void'),
  \ dotnet#method('UpdatePanningFeedback(', 'VWindow totalOverpanOffset, bool animate)', 'void'),
  \ dotnet#method('EndPanningFeedback(', 'bool animateBack)', 'void'),
  \ dotnet#prop('IsSourceWindowNull', 'bool'),
  \ dotnet#prop('IsCompositionTargetInvalid', 'bool'),
  \ dotnet#prop('CriticalHandle', 'int'),
  \ dotnet#prop('WorkAreaBoundsForNearestMonitor', 'NativeMethods/RECT'),
  \ dotnet#prop('WindowBounds', 'NativeMethods/RECT'),
  \ dotnet#prop('HwndSourceSizeToContent', 'SizeToContent'),
  \ dotnet#prop('RootVisual', 'Visual'),
  \ dotnet#prop('IsActiveWindow', 'bool'),
  \ dotnet#prop('HwndSourceWindow', 'HwndSource'),
  \ dotnet#prop('CompositionTarget', 'HwndTarget'),
  \ dotnet#prop('WindowSize', 'Size'),
  \ dotnet#prop('StyleExFromHwnd', 'int32'),
  \ dotnet#prop('StyleFromHwnd', 'int32'),
  \ dotnet#method('StartManaging(', 'class Window w, int32 Style, int32 StyleEx)', 'static Window/HwndStyleManager'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('get_Dirty(', ')', 'bool'),
  \ dotnet#method('set_Dirty(', 'bool value)', 'void'),
  \ dotnet#prop('Dirty', 'bool'),
  \ dotnet#method('Window(', ')', 'void'),
  \ dotnet#method('Window(', 'bool inRbw)', 'void'),
  \ dotnet#method('Show(', ')', 'void'),
  \ dotnet#method('Hide(', ')', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('DragMove(', ')', 'void'),
  \ dotnet#method('ShowDialog(', ')', 'Nullable'),
  \ dotnet#method('Activate(', ')', 'bool'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('GetWindow(', 'class DependencyObject dependencyObject)', 'static Window'),
  \ dotnet#method('get_TaskbarItemInfo(', ')', 'TaskbarItemInfo'),
  \ dotnet#method('set_TaskbarItemInfo(', 'class TaskbarItemInfo value)', 'void'),
  \ dotnet#method('get_AllowsTransparency(', ')', 'bool'),
  \ dotnet#method('set_AllowsTransparency(', 'bool value)', 'void'),
  \ dotnet#method('get_Title(', ')', 'string'),
  \ dotnet#method('set_Title(', 'string value)', 'void'),
  \ dotnet#method('get_Icon(', ')', 'ImageSource'),
  \ dotnet#method('set_Icon(', 'class ImageSource value)', 'void'),
  \ dotnet#method('get_SizeToContent(', ')', 'SizeToContent'),
  \ dotnet#method('set_SizeToContent(', 'SizeToContent value)', 'void'),
  \ dotnet#method('get_Top(', ')', 'float64'),
  \ dotnet#method('set_Top(', 'float64 value)', 'void'),
  \ dotnet#method('get_Left(', ')', 'float64'),
  \ dotnet#method('set_Left(', 'float64 value)', 'void'),
  \ dotnet#method('get_RestoreBounds(', ')', 'Rect'),
  \ dotnet#method('get_WindowStartupLocation(', ')', 'WindowStartupLocation'),
  \ dotnet#method('set_WindowStartupLocation(', 'WindowStartupLocation value)', 'void'),
  \ dotnet#method('get_ShowInTaskbar(', ')', 'bool'),
  \ dotnet#method('set_ShowInTaskbar(', 'bool value)', 'void'),
  \ dotnet#method('get_IsActive(', ')', 'bool'),
  \ dotnet#method('get_Owner(', ')', 'Window'),
  \ dotnet#method('set_Owner(', 'class Window value)', 'void'),
  \ dotnet#method('get_OwnedWindows(', ')', 'WindowCollection'),
  \ dotnet#method('get_DialogResult(', ')', 'Nullable'),
  \ dotnet#method('set_DialogResult(', 'Nullable value)', 'void'),
  \ dotnet#method('get_WindowStyle(', ')', 'WindowStyle'),
  \ dotnet#method('set_WindowStyle(', 'WindowStyle value)', 'void'),
  \ dotnet#method('get_WindowState(', ')', 'WindowState'),
  \ dotnet#method('set_WindowState(', 'WindowState value)', 'void'),
  \ dotnet#method('get_ResizeMode(', ')', 'ResizeMode'),
  \ dotnet#method('set_ResizeMode(', 'ResizeMode value)', 'void'),
  \ dotnet#method('get_Topmost(', ')', 'bool'),
  \ dotnet#method('set_Topmost(', 'bool value)', 'void'),
  \ dotnet#method('get_ShowActivated(', ')', 'bool'),
  \ dotnet#method('set_ShowActivated(', 'bool value)', 'void'),
  \ dotnet#method('add_SourceInitialized(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SourceInitialized(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_Activated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Activated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_Deactivated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Deactivated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_StateChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_StateChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_LocationChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_LocationChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_Closing(', 'class CancelEventHandler value)', 'void'),
  \ dotnet#method('remove_Closing(', 'class CancelEventHandler value)', 'void'),
  \ dotnet#method('add_Closed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Closed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_ContentRendered(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ContentRendered(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeBounds)', 'Size'),
  \ dotnet#method('OnContentChanged(', 'object oldContent, object newContent)', 'void'),
  \ dotnet#method('OnSourceInitialized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnActivated(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnDeactivated(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnStateChanged(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnLocationChanged(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnClosing(', 'class CancelEventArgs e)', 'void'),
  \ dotnet#method('OnClosed(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnContentRendered(', 'class EventArgs e)', 'void'),
  \ dotnet#method('DeviceToLogicalUnits(', 'Point ptDeviceUnits)', 'Point'),
  \ dotnet#method('LogicalToDeviceUnits(', 'Point ptLogicalUnits)', 'Point'),
  \ dotnet#method('VisibilityToBool(', 'Visibility v)', 'static bool'),
  \ dotnet#method('SetResizeGripControl(', 'class Control ctrl)', 'strict void'),
  \ dotnet#method('ClearResizeGripControl(', 'class Control oldCtrl)', 'strict void'),
  \ dotnet#method('TryClearingMainWindow(', ')', 'strict void'),
  \ dotnet#method('InternalClose(', 'bool shutdown, bool ignoreCancel)', 'void'),
  \ dotnet#method('get_IsSourceWindowNull(', ')', 'bool'),
  \ dotnet#method('get_IsCompositionTargetInvalid(', ')', 'bool'),
  \ dotnet#method('get_WorkAreaBoundsForNearestMonitor(', ')', '.method'),
  \ dotnet#method('get_WindowSize(', ')', '.method'),
  \ dotnet#method('get_HwndSourceWindow(', ')', '.method'),
  \ dotnet#method('OnAncestorChanged(', ')', 'strict void'),
  \ dotnet#method('CreateAllStyle(', ')', 'strict void'),
  \ dotnet#method('CreateSourceWindowDuringShow(', ')', 'strict void'),
  \ dotnet#method('CreateSourceWindow(', 'bool duringShow)', 'void'),
  \ dotnet#method('CreateHwndSourceParameters(', ')', 'strict'),
  \ dotnet#method('CorrectStyleForBorderlessWindowCase(', ')', 'strict void'),
  \ dotnet#method('GetRequestedDimensions(', 'float64& requestedLeft, float64& requestedTop, float64& requestedWidth, float64& requestedHeight)', 'strict void'),
  \ dotnet#method('SetupInitialState(', 'float64 requestedTop, float64 requestedLeft, float64 requestedWidth, float64 requestedHeight)', 'strict void'),
  \ dotnet#method('SetRootVisual(', ')', 'void'),
  \ dotnet#method('SetRootVisualAndUpdateSTC(', ')', 'void'),
  \ dotnet#method('UpdateTitle(', 'string title)', 'strict void'),
  \ dotnet#method('HandleActivate(', 'bool windowActivated)', 'void'),
  \ dotnet#method('UpdateHeight(', 'float64 newHeight)', 'strict void'),
  \ dotnet#method('UpdateWidth(', 'float64 newWidth)', 'strict void'),
  \ dotnet#method('VerifyApiSupported(', ')', 'strict void'),
  \ dotnet#method('get_HwndCreatedButNotShown(', ')', 'bool'),
  \ dotnet#method('get_IsDisposed(', ')', 'bool'),
  \ dotnet#method('get_IsVisibilitySet(', ')', 'bool'),
  \ dotnet#method('get_CriticalHandle(', ')', 'int'),
  \ dotnet#method('get_OwnerHandle(', ')', 'int'),
  \ dotnet#method('set_OwnerHandle(', 'native int value)', 'void'),
  \ dotnet#method('get_Win32Style(', ')', 'int32'),
  \ dotnet#method('set_Win32Style(', 'int32 value)', 'void'),
  \ dotnet#method('get__Style(', ')', 'int32'),
  \ dotnet#method('set__Style(', 'int32 value)', 'void'),
  \ dotnet#method('get__StyleEx(', ')', 'int32'),
  \ dotnet#method('set__StyleEx(', 'int32 value)', 'void'),
  \ dotnet#method('get_Manager(', ')', '.method'),
  \ dotnet#method('set_Manager(', 'class Window/HwndStyleManager value)', 'void'),
  \ dotnet#method('get_UserResized(', ')', 'bool '),
  \ dotnet#method('GetWindowMinMax(', ')', 'strict'),
  \ dotnet#method('VerifyContextAndObjectState(', ')', 'void'),
  \ dotnet#method('CalculateCenterScreenPosition(', 'native int hMonitor, Size currentSizeDeviceUnits, float64& leftDeviceUnits, float64& topDeviceUnits)', 'static void'),
  \ dotnet#method('WmMoveChangedHelper(', ')', 'strict void'),
  \ dotnet#method('HandleWmNcHitTestMsg(', 'native int lParam, int& refInt)', 'strict bool'),
  \ dotnet#method('nCmdForShow(', ')', 'strict int32'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('OnManipulationBoundaryFeedback(', 'class ManipulationBoundaryFeedbackEventArgs e)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Window(', ')', 'static void .'),
  \ dotnet#event('SourceInitialized', 'EventHandler'),
  \ dotnet#event('Activated', 'EventHandler'),
  \ dotnet#event('Deactivated', 'EventHandler'),
  \ dotnet#event('StateChanged', 'EventHandler'),
  \ dotnet#event('LocationChanged', 'EventHandler'),
  \ dotnet#event('Closing', 'CancelEventHandler'),
  \ dotnet#event('Closed', 'EventHandler'),
  \ dotnet#event('ContentRendered', 'EventHandler'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('TaskbarItemInfo', 'TaskbarItemInfo'),
  \ dotnet#prop('AllowsTransparency', 'bool'),
  \ dotnet#prop('Title', 'string'),
  \ dotnet#prop('Icon', 'ImageSource'),
  \ dotnet#prop('SizeToContent', 'SizeToContent'),
  \ dotnet#prop('Top', 'float64'),
  \ dotnet#prop('Left', 'float64'),
  \ dotnet#prop('RestoreBounds', 'Rect'),
  \ dotnet#prop('WindowStartupLocation', 'WindowStartupLocation'),
  \ dotnet#prop('ShowInTaskbar', 'bool'),
  \ dotnet#prop('IsActive', 'bool'),
  \ dotnet#prop('Owner', 'Window'),
  \ dotnet#prop('OwnedWindows', 'WindowCollection'),
  \ dotnet#prop('DialogResult', 'Nullable'),
  \ dotnet#prop('WindowStyle', 'WindowStyle'),
  \ dotnet#prop('WindowState', 'WindowState'),
  \ dotnet#prop('ResizeMode', 'ResizeMode'),
  \ dotnet#prop('Topmost', 'bool'),
  \ dotnet#prop('ShowActivated', 'bool'),
  \ dotnet#prop('IsSourceWindowNull', 'bool'),
  \ dotnet#prop('IsCompositionTargetInvalid', 'bool'),
  \ dotnet#prop('WorkAreaBoundsForNearestMonitor', 'NativeMethods/RECT'),
  \ dotnet#prop('WindowSize', 'Size'),
  \ dotnet#prop('HwndSourceWindow', 'HwndSource'),
  \ dotnet#prop('HwndCreatedButNotShown', 'bool'),
  \ dotnet#prop('IsDisposed', 'bool'),
  \ dotnet#prop('IsVisibilitySet', 'bool'),
  \ dotnet#prop('CriticalHandle', 'int'),
  \ dotnet#prop('OwnerHandle', 'int'),
  \ dotnet#prop('Win32Style', 'int32'),
  \ dotnet#prop('_Style', 'int32'),
  \ dotnet#prop('_StyleEx', 'int32'),
  \ dotnet#prop('Manager', 'Window/HwndStyleManager'),
  \ dotnet#prop('UserResized', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('Application', 'DispatcherObject', [ 
  \ dotnet#field('value__', 'uint8'),
  \ dotnet#method('Application(', ')', 'void'),
  \ dotnet#method('Run(', ')', 'int32'),
  \ dotnet#method('Run(', 'class Window window)', 'int32'),
  \ dotnet#method('InBrowserHostedApp(', ')', 'static bool'),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object'),
  \ dotnet#method('Shutdown(', ')', 'void'),
  \ dotnet#method('Shutdown(', 'int32 exitCode)', 'void'),
  \ dotnet#method('CriticalShutdown(', 'int32 exitCode)', 'void'),
  \ dotnet#method('FindResource(', 'object resourceKey)', 'object'),
  \ dotnet#method('TryFindResource(', 'object resourceKey)', 'object'),
  \ dotnet#method('FindResourceInternal(', 'object resourceKey)', 'object'),
  \ dotnet#method('FindResourceInternal(', 'object resourceKey, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference)', 'object'),
  \ dotnet#method('LoadComponent(', 'object component, Uri resourceLocator)', 'static void'),
  \ dotnet#method('LoadComponent(', 'class Uri resourceLocator)', 'static object'),
  \ dotnet#method('LoadComponent(', 'class Uri resourceLocator, bool bSkipJournaledProperties)', 'static object'),
  \ dotnet#method('LoadBamlStreamWithSyncInfo(', 'class Stream stream, ParserContext pc)', 'static object'),
  \ dotnet#method('GetResourceStream(', 'class Uri uriResource)', 'static StreamResourceInfo'),
  \ dotnet#method('GetContentStream(', 'class Uri uriContent)', 'static StreamResourceInfo'),
  \ dotnet#method('GetRemoteStream(', 'class Uri uriRemote)', 'static StreamResourceInfo'),
  \ dotnet#method('GetCookie(', 'class Uri uri)', 'static string'),
  \ dotnet#method('SetCookie(', 'class Uri uri, string value)', 'static void'),
  \ dotnet#method('get_Current(', ')', 'static'),
  \ dotnet#method('get_Windows(', ')', 'WindowCollection'),
  \ dotnet#method('get_MainWindow(', ')', 'Window'),
  \ dotnet#method('set_MainWindow(', 'class Window value)', 'void'),
  \ dotnet#method('get_ShutdownMode(', ')', 'ShutdownMode'),
  \ dotnet#method('set_ShutdownMode(', 'ShutdownMode value)', 'void'),
  \ dotnet#method('get_Resources(', ')', 'ResourceDictionary'),
  \ dotnet#method('set_Resources(', 'class ResourceDictionary value)', 'void'),
  \ dotnet#method('get_Resources(', ')', ''),
  \ dotnet#method('set_Resources(', 'class ResourceDictionary value)', 'void '),
  \ dotnet#method('IsAmbientPropertyAvailable(', 'string propertyName)', 'bool '),
  \ dotnet#method('get_HasImplicitStylesInResources(', ')', 'bool'),
  \ dotnet#method('set_HasImplicitStylesInResources(', 'bool value)', 'void'),
  \ dotnet#method('get_StartupUri(', ')', 'Uri'),
  \ dotnet#method('set_StartupUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_Properties(', ')', 'IDictionary'),
  \ dotnet#method('get_ResourceAssembly(', ')', 'static'),
  \ dotnet#method('set_ResourceAssembly(', 'class Assembly value)', 'static void'),
  \ dotnet#method('add_Startup(', 'class StartupEventHandler value)', 'void'),
  \ dotnet#method('remove_Startup(', 'class StartupEventHandler value)', 'void'),
  \ dotnet#method('add_Exit(', 'class ExitEventHandler value)', 'void'),
  \ dotnet#method('remove_Exit(', 'class ExitEventHandler value)', 'void'),
  \ dotnet#method('add_Activated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Activated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_Deactivated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Deactivated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_SessionEnding(', 'class SessionEndingCancelEventHandler value)', 'void'),
  \ dotnet#method('remove_SessionEnding(', 'class SessionEndingCancelEventHandler value)', 'void'),
  \ dotnet#method('add_DispatcherUnhandledException(', 'class DispatcherUnhandledExceptionEventHandler value)', 'void'),
  \ dotnet#method('remove_DispatcherUnhandledException(', 'class DispatcherUnhandledExceptionEventHandler value)', 'void'),
  \ dotnet#method('add_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('add_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationProgress(', 'class NavigationProgressEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationProgress(', 'class NavigationProgressEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationFailed(', 'class NavigationFailedEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationFailed(', 'class NavigationFailedEventHandler value)', 'void'),
  \ dotnet#method('add_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationStopped(', 'class NavigationStoppedEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationStopped(', 'class NavigationStoppedEventHandler value)', 'void'),
  \ dotnet#method('add_FragmentNavigation(', 'class FragmentNavigationEventHandler value)', 'void'),
  \ dotnet#method('remove_FragmentNavigation(', 'class FragmentNavigationEventHandler value)', 'void'),
  \ dotnet#method('OnStartup(', 'class StartupEventArgs e)', 'void'),
  \ dotnet#method('OnExit(', 'class ExitEventArgs e)', 'void'),
  \ dotnet#method('OnActivated(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnDeactivated(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnSessionEnding(', 'class SessionEndingCancelEventArgs e)', 'void'),
  \ dotnet#method('OnNavigating(', 'class NavigatingCancelEventArgs e)', 'void'),
  \ dotnet#method('OnNavigated(', 'class NavigationEventArgs e)', 'void'),
  \ dotnet#method('OnNavigationProgress(', 'class NavigationProgressEventArgs e)', 'void'),
  \ dotnet#method('OnNavigationFailed(', 'class NavigationFailedEventArgs e)', 'void'),
  \ dotnet#method('OnLoadCompleted(', 'class NavigationEventArgs e)', 'void'),
  \ dotnet#method('OnNavigationStopped(', 'class NavigationEventArgs e)', 'void'),
  \ dotnet#method('OnFragmentNavigation(', 'class FragmentNavigationEventArgs e)', 'void'),
  \ dotnet#method('PerformNavigationStateChangeTasks(', 'bool isNavigationInitiator, bool playNavigatingSound, Application/NavigationStateChange state)', 'strict void'),
  \ dotnet#method('UpdateBrowserCommands(', ')', 'void'),
  \ dotnet#method('DoStartup(', ')', 'void'),
  \ dotnet#method('DoShutdown(', ')', 'strict void'),
  \ dotnet#method('RunInternal(', 'class Window window)', 'int32'),
  \ dotnet#method('InvalidateResourceReferences(', 'ResourcesChangeInfo info)', 'void'),
  \ dotnet#method('GetAppWindow(', ')', 'NavigationWindow'),
  \ dotnet#method('FireNavigating(', 'class NavigatingCancelEventArgs e, bool isInitialNavigation)', 'void'),
  \ dotnet#method('FireNavigated(', 'class NavigationEventArgs e)', 'void'),
  \ dotnet#method('FireNavigationProgress(', 'class NavigationProgressEventArgs e)', 'void'),
  \ dotnet#method('FireNavigationFailed(', 'class NavigationFailedEventArgs e)', 'void'),
  \ dotnet#method('FireLoadCompleted(', 'class NavigationEventArgs e)', 'void'),
  \ dotnet#method('FireNavigationStopped(', 'class NavigationEventArgs e)', 'void'),
  \ dotnet#method('FireFragmentNavigation(', 'class FragmentNavigationEventArgs e)', 'void'),
  \ dotnet#method('get_WindowsInternal(', ')', '.method'),
  \ dotnet#method('get_NonAppWindowsInternal(', ')', '.method'),
  \ dotnet#method('get_MimeType(', ')', '.method'),
  \ dotnet#method('set_MimeType(', 'MimeType value)', 'void'),
  \ dotnet#method('set_ServiceProvider(', 'class IServiceProvider value)', 'void'),
  \ dotnet#method('get_BrowserCallbackServices(', ')', '.method'),
  \ dotnet#method('get_NavService(', ')', '.method'),
  \ dotnet#method('set_NavService(', 'class NavigationService value)', 'void'),
  \ dotnet#method('get_IsShuttingDown(', ')', 'static bool'),
  \ dotnet#method('set_IsShuttingDown(', 'bool value)', 'static void'),
  \ dotnet#method('get_IsApplicationObjectShuttingDown(', ')', 'static bool'),
  \ dotnet#method('get_ParkingHwnd(', ')', 'int'),
  \ dotnet#method('get_ApplicationMarkupBaseUri(', ')', '.method'),
  \ dotnet#method('set_ApplicationMarkupBaseUri(', 'class Uri value)', 'void'),
  \ dotnet#method('Application(', ')', 'static void .'),
  \ dotnet#method('set_WindowsInternal(', 'class WindowCollection value)', 'void'),
  \ dotnet#method('set_NonAppWindowsInternal(', 'class WindowCollection value)', 'void'),
  \ dotnet#method('get_ServiceProvider(', ')', 'IServiceProvider'),
  \ dotnet#event('Startup', 'StartupEventHandler'),
  \ dotnet#event('Exit', 'ExitEventHandler'),
  \ dotnet#event('Activated', 'EventHandler'),
  \ dotnet#event('Deactivated', 'EventHandler'),
  \ dotnet#event('SessionEnding', 'SessionEndingCancelEventHandler'),
  \ dotnet#event('DispatcherUnhandledException', 'DispatcherUnhandledExceptionEventHandler'),
  \ dotnet#event('Navigating', 'NavigatingCancelEventHandler'),
  \ dotnet#event('Navigated', 'NavigatedEventHandler'),
  \ dotnet#event('NavigationProgress', 'NavigationProgressEventHandler'),
  \ dotnet#event('NavigationFailed', 'NavigationFailedEventHandler'),
  \ dotnet#event('LoadCompleted', 'LoadCompletedEventHandler'),
  \ dotnet#event('NavigationStopped', 'NavigationStoppedEventHandler'),
  \ dotnet#event('FragmentNavigation', 'FragmentNavigationEventHandler'),
  \ dotnet#prop('Current', 'Application'),
  \ dotnet#prop('Windows', 'WindowCollection'),
  \ dotnet#prop('MainWindow', 'Window'),
  \ dotnet#prop('ShutdownMode', 'ShutdownMode'),
  \ dotnet#prop('Resources', 'ResourceDictionary'),
  \ dotnet#prop('Resources', 'ResourceDictionary'),
  \ dotnet#prop('HasImplicitStylesInResources', 'bool'),
  \ dotnet#prop('StartupUri', 'Uri'),
  \ dotnet#prop('Properties', 'IDictionary'),
  \ dotnet#prop('ResourceAssembly', 'Assembly'),
  \ dotnet#prop('WindowsInternal', 'WindowCollection'),
  \ dotnet#prop('NonAppWindowsInternal', 'WindowCollection'),
  \ dotnet#prop('MimeType', 'MimeType'),
  \ dotnet#prop('ServiceProvider', 'IServiceProvider'),
  \ dotnet#prop('BrowserCallbackServices', 'IBrowserCallbackServices'),
  \ dotnet#prop('NavService', 'NavigationService'),
  \ dotnet#prop('IsShuttingDown', 'bool'),
  \ dotnet#prop('IsApplicationObjectShuttingDown', 'bool'),
  \ dotnet#prop('ParkingHwnd', 'int'),
  \ dotnet#prop('ApplicationMarkupBaseUri', 'Uri'),
  \ ])

call dotnet#class('StartupEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('StartupEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, StartupEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, StartupEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ExitEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ExitEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ExitEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ExitEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('SessionEndingCancelEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('SessionEndingCancelEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, SessionEndingCancelEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, SessionEndingCancelEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('AttachedPropertyBrowsableForChildrenAttribute', 'AttachedPropertyBrowsableAttribute', [ 
  \ dotnet#method('AttachedPropertyBrowsableForChildrenAttribute(', ')', 'void'),
  \ dotnet#method('get_IncludeDescendants(', ')', 'bool'),
  \ dotnet#method('set_IncludeDescendants(', 'bool value)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('IsBrowsable(', 'class DependencyObject d, DependencyProperty dp)', 'strict bool'),
  \ dotnet#prop('IncludeDescendants', 'bool'),
  \ ])

call dotnet#class('ResourceKey', 'MarkupExtension', [ 
  \ dotnet#method('get_Assembly(', ')', 'abstract'),
  \ dotnet#method('ProvideValue(', 'class IServiceProvider serviceProvider)', 'object'),
  \ dotnet#method('ResourceKey(', ')', 'void'),
  \ dotnet#prop('', 'Assembly'),
  \ ])

call dotnet#class('ComponentResourceKey', 'ResourceKey', [ 
  \ dotnet#method('ComponentResourceKey(', ')', 'void'),
  \ dotnet#method('ComponentResourceKey(', 'class Type typeInTargetAssembly, object resourceId)', 'void'),
  \ dotnet#method('get_TypeInTargetAssembly(', ')', 'Type'),
  \ dotnet#method('set_TypeInTargetAssembly(', 'class Type value)', 'void'),
  \ dotnet#method('get_Assembly(', ')', ''),
  \ dotnet#method('get_ResourceId(', ')', 'object'),
  \ dotnet#method('set_ResourceId(', 'object value)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('TypeInTargetAssembly', 'Type'),
  \ dotnet#prop('', 'Assembly'),
  \ dotnet#prop('ResourceId', 'object'),
  \ ])

call dotnet#class('FrameworkTemplate', 'DispatcherObject', [ 
  \ dotnet#field('HasLoadedChangedHandler', 'bool'),
  \ dotnet#field('HasUnloadedChangedHandler', 'bool'),
  \ dotnet#method('FrameworkTemplate(', ')', 'void'),
  \ dotnet#field('_hasInstanceValues', 'bool'),
  \ dotnet#field('_resources', 'ResourceDictionary'),
  \ dotnet#field('_triggerActions', 'HybridDictionary'),
  \ dotnet#field('ChildRecordFromChildIndex', 'FrugalStructList'),
  \ dotnet#field('TriggerSourceRecordFromChildIndex', 'FrugalStructList'),
  \ dotnet#field('PropertyTriggersWithActions', 'FrugalMap'),
  \ dotnet#field('ContainerDependents', 'FrugalStructList'),
  \ dotnet#field('ResourceDependents', 'FrugalStructList'),
  \ dotnet#field('_dataTriggerRecordFromBinding', 'HybridDictionary'),
  \ dotnet#field('DataTriggersWithActions', 'HybridDictionary'),
  \ dotnet#field('DeferredActions', 'ConditionalWeakTable'),
  \ dotnet#field('_TemplateChildLoadedDictionary', 'HybridDictionary'),
  \ dotnet#field('EventDependents', 'ItemStructList'),
  \ dotnet#method('FrameworkTemplate(', ')', 'void'),
  \ dotnet#method('ValidateTemplatedParent(', 'class FrameworkElement templatedParent)', 'void'),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('get_VisualTree(', ')', 'FrameworkElementFFrameworkTemplatey'),
  \ dotnet#method('set_VisualTree(', 'class FrameworkElementFFrameworkTemplatey value)', 'void'),
  \ dotnet#method('ShouldSerializeVisualTree(', ')', 'bool'),
  \ dotnet#method('get_Template(', ')', 'TemplateContent'),
  \ dotnet#method('set_Template(', 'class TemplateContent value)', 'void'),
  \ dotnet#method('get_Resources(', ')', 'ResourceDictionary'),
  \ dotnet#method('set_Resources(', 'class ResourceDictionary value)', 'void'),
  \ dotnet#method('get_Resources(', ')', ''),
  \ dotnet#method('set_Resources(', 'class ResourceDictionary value)', 'void '),
  \ dotnet#method('FindResource(', 'object resourceKey, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference)', 'object'),
  \ dotnet#method('IsAmbientPropertyAvailable(', 'string propertyName)', 'bool '),
  \ dotnet#method('FindName(', 'string name, FrameworkElement templatedParent)', 'object'),
  \ dotnet#method('RegisterName(', 'string name, object scopedElement)', 'void'),
  \ dotnet#method('UnregisterName(', 'string name)', 'void'),
  \ dotnet#method('FindName(', 'string name)', 'object '),
  \ dotnet#method('ProcessTemplateBeforeSeal(', ')', 'strict void'),
  \ dotnet#method('Seal(', ')', 'void'),
  \ dotnet#method('CheckSealed(', ')', 'void'),
  \ dotnet#method('SetResourceReferenceState(', ')', 'void'),
  \ dotnet#method('ApplyTemplateContent(', 'class UncommonField templateDataField, FrameworkElement container)', 'bool'),
  \ dotnet#method('LoadContent(', ')', 'DependencyObject'),
  \ dotnet#method('LoadContent(', 'class DependencyObject container, List affectedChildren)', 'DependencyObject'),
  \ dotnet#method('IsNameScope(', 'class XamlType type)', 'static bool'),
  \ dotnet#method('get_HasContent(', ')', 'bool'),
  \ dotnet#method('BuildVisualTree(', 'class FrameworkElement container)', 'strict bool'),
  \ dotnet#method('get_CanBuildVisualTree(', ')', 'bool'),
  \ dotnet#method('set_CanBuildVisualTree(', 'bool value)', 'void'),
  \ dotnet#method('ShouldSerializeResources(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#method('IsNameProperty(', 'class XamlMember member, XamlType owner)', 'static bool'),
  \ dotnet#method('SetTemplateParentValues(', 'string name, object element, FrameworkTemplate frameworkTemplate, ProvideValueServiceProvider& provideValueServiceProvider)', 'static void'),
  \ dotnet#method('get_TargetTypeInternal(', ')', 'strict'),
  \ dotnet#method('SetTargetTypeInternal(', 'class Type targetType)', 'abstract strict void'),
  \ dotnet#method('get_DataTypeInternal(', ')', 'strict object'),
  \ dotnet#method('get_CanSeal(', ')', 'bool '),
  \ dotnet#method('get_IsSealed(', ')', 'bool '),
  \ dotnet#method('Seal(', ')', 'void '),
  \ dotnet#method('get_TriggersInternal(', ')', 'strict'),
  \ dotnet#method('get_HasResourceReferences(', ')', 'bool'),
  \ dotnet#method('get_HasContainerResourceReferences(', ')', 'bool'),
  \ dotnet#method('get_HasChildResourceReferences(', ')', 'bool'),
  \ dotnet#method('get_HasEventDependents(', ')', 'bool'),
  \ dotnet#method('get_HasInstanceValues(', ')', 'bool'),
  \ dotnet#method('get_HasLoadedChangeHandler(', ')', 'bool'),
  \ dotnet#method('set_HasLoadedChangeHandler(', 'bool value)', 'void'),
  \ dotnet#method('CopyParserContext(', 'class ParserContext parserContext)', 'void'),
  \ dotnet#method('get_ParserContext(', ')', '.method'),
  \ dotnet#method('get_EventHandlersStore(', ')', '.method'),
  \ dotnet#method('get_StyleConnFrameworkTemplate(', ')', '.method'),
  \ dotnet#method('set_StyleConnFrameworkTemplate(', 'class IStyleConnFrameworkTemplate value)', 'void'),
  \ dotnet#method('get_ComponentConnFrameworkTemplate(', ')', '.method'),
  \ dotnet#method('set_ComponentConnFrameworkTemplate(', 'class IComponentConnFrameworkTemplate value)', 'void'),
  \ dotnet#method('get_StaticResourceValues(', ')', 'object[]'),
  \ dotnet#method('set_StaticResourceValues(', 'object[] value)', 'void'),
  \ dotnet#method('get_HasXamlNodeContent(', ')', 'bool'),
  \ dotnet#method('get_ChildIndexFromChildName(', ')', '.method'),
  \ dotnet#method('get_ChildTypeFromChildIndex(', ')', '.method'),
  \ dotnet#method('get_LastChildIndex(', ')', 'int32'),
  \ dotnet#method('set_LastChildIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_ChildNames(', ')', '.method'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('VisualTree', 'FrameworkElementFFrameworkTemplatey'),
  \ dotnet#prop('Template', 'TemplateContent'),
  \ dotnet#prop('Resources', 'ResourceDictionary'),
  \ dotnet#prop('Resources', 'ResourceDictionary'),
  \ dotnet#prop('HasContent', 'bool'),
  \ dotnet#prop('CanBuildVisualTree', 'bool'),
  \ dotnet#prop('TargetTypeInternal', 'Type'),
  \ dotnet#prop('DataTypeInternal', 'object'),
  \ dotnet#prop('CanSeal', 'bool'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('TriggersInternal', 'TriggerCollection'),
  \ dotnet#prop('HasResourceReferences', 'bool'),
  \ dotnet#prop('HasContainerResourceReferences', 'bool'),
  \ dotnet#prop('HasChildResourceReferences', 'bool'),
  \ dotnet#prop('HasEventDependents', 'bool'),
  \ dotnet#prop('HasInstanceValues', 'bool'),
  \ dotnet#prop('HasLoadedChangeHandler', 'bool'),
  \ dotnet#prop('ParserContext', 'ParserContext'),
  \ dotnet#prop('EventHandlersStore', 'EventHandlersStore'),
  \ dotnet#prop('StyleConnFrameworkTemplate', 'IStyleConnFrameworkTemplate'),
  \ dotnet#prop('ComponentConnFrameworkTemplate', 'IComponentConnFrameworkTemplate'),
  \ dotnet#prop('StaticResourceValues', 'object[]'),
  \ dotnet#prop('HasXamlNodeContent', 'bool'),
  \ dotnet#prop('ChildIndexFromChildName', 'HybridDictionary'),
  \ dotnet#prop('ChildTypeFromChildIndex', 'Dictionary'),
  \ dotnet#prop('LastChildIndex', 'int32'),
  \ dotnet#prop('ChildNames', 'List'),
  \ ])

call dotnet#class('Condition', 'Object', [ 
  \ dotnet#method('Condition(', ')', 'void'),
  \ dotnet#method('Condition(', 'class DependencyProperty conditionProperty, object conditionValue)', 'void'),
  \ dotnet#method('Condition(', 'class DependencyProperty conditionProperty, object conditionValue, string sourceName)', 'void'),
  \ dotnet#method('Condition(', 'class BindingBase binding, object conditionValue)', 'void'),
  \ dotnet#method('get_Property(', ')', 'DependencyProperty'),
  \ dotnet#method('set_Property(', 'class DependencyProperty value)', 'void'),
  \ dotnet#method('get_Binding(', ')', 'BindingBase'),
  \ dotnet#method('set_Binding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('set_Value(', 'object value)', 'void'),
  \ dotnet#method('get_SourceName(', ')', 'string'),
  \ dotnet#method('set_SourceName(', 'string value)', 'void'),
  \ dotnet#method('Seal(', 'ValueLookupType type)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#method('ReceiveMarkupExtension(', 'object targetObject, XamlSetMarkupExtensionEventArgs eventArgs)', 'static void'),
  \ dotnet#method('ReceiveTypeConverter(', 'object targetObject, XamlSetTypeConverterEventArgs eventArgs)', 'static void'),
  \ dotnet#prop('Property', 'DependencyProperty'),
  \ dotnet#prop('Binding', 'BindingBase'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('SourceName', 'string'),
  \ ])

call dotnet#class('ConditionCollection', 'Collection', [ 
  \ dotnet#method('ClearItems(', ')', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, Condition item)', 'void'),
  \ dotnet#method('RemoveItem(', 'int32 index)', 'void'),
  \ dotnet#method('SetItem(', 'int32 index, Condition item)', 'void'),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('Seal(', 'ValueLookupType type)', 'void'),
  \ dotnet#method('ConditionCollection(', ')', 'void'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ ])

call dotnet#class('DataTemplate', 'FrameworkTemplate', [ 
  \ dotnet#method('DataTemplate(', ')', 'void'),
  \ dotnet#method('DataTemplate(', 'object dataType)', 'void'),
  \ dotnet#method('get_DataType(', ')', 'object'),
  \ dotnet#method('set_DataType(', 'object value)', 'void'),
  \ dotnet#method('get_Triggers(', ')', 'TriggerCollection'),
  \ dotnet#method('get_DataTemplateKey(', ')', 'object'),
  \ dotnet#method('get_TargetTypeInternal(', ')', 'strict'),
  \ dotnet#method('SetTargetTypeInternal(', 'class Type targetType)', 'strict void'),
  \ dotnet#method('get_DataTypeInternal(', ')', 'strict object'),
  \ dotnet#method('get_TriggersInternal(', ')', 'strict'),
  \ dotnet#method('get_DefaultTargetType(', ')', 'static Type'),
  \ dotnet#method('ValidateTemplatedParent(', 'class FrameworkElement templatedParent)', 'void'),
  \ dotnet#prop('DataType', 'object'),
  \ dotnet#prop('Triggers', 'TriggerCollection'),
  \ dotnet#prop('DataTemplateKey', 'object'),
  \ dotnet#prop('TargetTypeInternal', 'Type'),
  \ dotnet#prop('DataTypeInternal', 'object'),
  \ dotnet#prop('TriggersInternal', 'TriggerCollection'),
  \ dotnet#prop('DefaultTargetType', 'Type'),
  \ ])

call dotnet#class('FrameworkContentElement', 'ContentElement', [ 
  \ dotnet#field('_templatedParent', 'DependencyObject'),
  \ dotnet#method('FrameworkContentElement(', ')', 'void'),
  \ dotnet#method('get_Style(', ')', 'Style'),
  \ dotnet#method('set_Style(', 'class Style value)', 'void'),
  \ dotnet#method('ShouldSerializeStyle(', ')', 'bool'),
  \ dotnet#method('OnStyleChanged(', 'class Style oldStyle, Style newStyle)', 'famorassem void'),
  \ dotnet#method('get_OverridesDefaultStyle(', ')', 'bool'),
  \ dotnet#method('set_OverridesDefaultStyle(', 'bool value)', 'void'),
  \ dotnet#method('get_DefaultStyleKey(', ')', 'famorassem object'),
  \ dotnet#method('set_DefaultStyleKey(', 'object value)', 'famorassem void'),
  \ dotnet#method('get_ThemeStyle(', ')', '.method'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('OnThemeStyleChanged(', 'class DependencyObject d, object oldValue, object newValue)', 'static void'),
  \ dotnet#method('get_TemplatedParent(', ')', 'DependencyObject'),
  \ dotnet#method('get_HasResources(', ')', 'bool'),
  \ dotnet#method('get_Resources(', ')', 'ResourceDictionary'),
  \ dotnet#method('set_Resources(', 'class ResourceDictionary value)', 'void'),
  \ dotnet#method('IsAmbientPropertyAvailable(', 'string propertyName)', 'bool '),
  \ dotnet#method('ShouldSerializeResources(', ')', 'bool'),
  \ dotnet#method('FindResource(', 'object resourceKey)', 'object'),
  \ dotnet#method('TryFindResource(', 'object resourceKey)', 'object'),
  \ dotnet#method('SetResourceReference(', 'class DependencyProperty dp, object name)', 'void'),
  \ dotnet#method('BeginStoryboard(', 'class Storyboard storyboard)', 'void'),
  \ dotnet#method('BeginStoryboard(', 'class Storyboard storyboard, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('BeginStoryboard(', 'class Storyboard storyboard, HandoffBehavior handoffBehavior, bool isControllable)', 'void'),
  \ dotnet#method('EvaluateBaseValueCore(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& newEntry)', 'void'),
  \ dotnet#method('GetRawValue(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& entry)', 'void'),
  \ dotnet#method('GetExpressionCore(', 'class DependencyProperty dp, PropertyMetadata metadata)', 'Expression'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Tag(', ')', 'object'),
  \ dotnet#method('set_Tag(', 'object value)', 'void'),
  \ dotnet#method('get_Language(', ')', 'XmlLanguage'),
  \ dotnet#method('set_Language(', 'class XmlLanguage value)', 'void'),
  \ dotnet#method('get_FocusVisualStyle(', ')', 'Style'),
  \ dotnet#method('set_FocusVisualStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_Cursor(', ')', 'Cursor'),
  \ dotnet#method('set_Cursor(', 'class Cursor value)', 'void'),
  \ dotnet#method('get_ForceCursor(', ')', 'bool'),
  \ dotnet#method('set_ForceCursor(', 'bool value)', 'void'),
  \ dotnet#method('MoveFocus(', 'class TraversalRequest request)', 'bool'),
  \ dotnet#method('PredictFocus(', 'FocusNavigationDirection direction)', ''),
  \ dotnet#method('OnGotFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('BringIntoView(', ')', 'void'),
  \ dotnet#method('get_InputScope(', ')', 'InputScope'),
  \ dotnet#method('set_InputScope(', 'class InputScope value)', 'void'),
  \ dotnet#method('add_TargetUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TargetUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_SourceUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SourceUpdated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DataContextChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_DataContextChanged(', 'class DependencyPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_DataContext(', ')', 'object'),
  \ dotnet#method('set_DataContext(', 'object value)', 'void'),
  \ dotnet#method('GetBindingExpression(', 'class DependencyProperty dp)', 'BindingExpression'),
  \ dotnet#method('SetBinding(', 'class DependencyProperty dp, BindingBase binding)', 'BindingExpressionBase'),
  \ dotnet#method('SetBinding(', 'class DependencyProperty dp, string path)', 'BindingExpression'),
  \ dotnet#method('get_BindingGroup(', ')', 'BindingGroup'),
  \ dotnet#method('set_BindingGroup(', 'class BindingGroup value)', 'void'),
  \ dotnet#method('GetUIParentCore(', ')', 'famorassem DependencyObject'),
  \ dotnet#method('AdjustEventSource(', 'class RoutedEventArgs args)', 'strict object'),
  \ dotnet#method('AdjustBranchSource(', 'class RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('IgnoreModelParentBuildRoute(', 'class RoutedEventArgs args)', 'strict bool'),
  \ dotnet#method('BuildRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'bool'),
  \ dotnet#method('AddToEventRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('OnAncestorChanged(', ')', 'strict void'),
  \ dotnet#method('OnContentParentChanged(', 'class DependencyObject oldParent)', 'strict void'),
  \ dotnet#method('get_InheritanceBehavior(', ')', '.method'),
  \ dotnet#method('set_InheritanceBehavior(', 'InheritanceBehavior value)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('get_IsInitialized(', ')', 'bool'),
  \ dotnet#method('add_Initialized(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Initialized(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnInitialized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('get_IsLoaded(', ')', 'bool'),
  \ dotnet#method('add_Loaded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Loaded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnLoaded(', 'class RoutedEventArgs args)', 'void'),
  \ dotnet#method('add_Unloaded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Unloaded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnUnloaded(', 'class RoutedEventArgs args)', 'void'),
  \ dotnet#method('OnAddHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('OnRemoveHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'strict void'),
  \ dotnet#method('RaiseClrEvent(', 'class EventPrivateKey key, EventArgs args)', 'void'),
  \ dotnet#method('get_ToolTip(', ')', 'object'),
  \ dotnet#method('set_ToolTip(', 'object value)', 'void'),
  \ dotnet#method('get_ContextMenu(', ')', 'ContextMenu'),
  \ dotnet#method('set_ContextMenu(', 'class ContextMenu value)', 'void'),
  \ dotnet#method('add_ToolTipOpening(', 'class ToolTipEventHandler value)', 'void'),
  \ dotnet#method('remove_ToolTipOpening(', 'class ToolTipEventHandler value)', 'void'),
  \ dotnet#method('OnToolTipOpening(', 'class ToolTipEventArgs e)', 'void'),
  \ dotnet#method('add_ToolTipClosing(', 'class ToolTipEventHandler value)', 'void'),
  \ dotnet#method('remove_ToolTipClosing(', 'class ToolTipEventHandler value)', 'void'),
  \ dotnet#method('OnToolTipClosing(', 'class ToolTipEventArgs e)', 'void'),
  \ dotnet#method('add_ContextMenuOpening(', 'class ContextMenuEventHandler value)', 'void'),
  \ dotnet#method('remove_ContextMenuOpening(', 'class ContextMenuEventHandler value)', 'void'),
  \ dotnet#method('OnContextMenuOpening(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('add_ContextMenuClosing(', 'class ContextMenuEventHandler value)', 'void'),
  \ dotnet#method('remove_ContextMenuClosing(', 'class ContextMenuEventHandler value)', 'void'),
  \ dotnet#method('OnContextMenuClosing(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('InvalidateForceInheritPropertyOnChildren(', 'class DependencyProperty property)', 'strict void'),
  \ dotnet#method('get_HasResourceReference(', ')', 'bool'),
  \ dotnet#method('set_HasResourceReference(', 'bool value)', 'void'),
  \ dotnet#method('get_IsLogicalChildrenIterationInProgress(', ')', 'bool'),
  \ dotnet#method('set_IsLogicalChildrenIterationInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_SubtreeHasLoadedChangeHandler(', ')', 'bool'),
  \ dotnet#method('set_SubtreeHasLoadedChangeHandler(', 'bool value)', 'void'),
  \ dotnet#method('get_IsLoadedCache(', ')', 'bool'),
  \ dotnet#method('set_IsLoadedCache(', 'bool value)', 'void'),
  \ dotnet#method('get_IsParentAnFE(', ')', 'bool'),
  \ dotnet#method('set_IsParentAnFE(', 'bool value)', 'void'),
  \ dotnet#method('get_IsTemplatedParentAnFE(', ')', 'bool'),
  \ dotnet#method('set_IsTemplatedParentAnFE(', 'bool value)', 'void'),
  \ dotnet#method('get_HasLogicalChildren(', ')', 'bool'),
  \ dotnet#method('set_HasLogicalChildren(', 'bool value)', 'void'),
  \ dotnet#method('get_TemplateChildIndex(', ')', 'int32'),
  \ dotnet#method('set_TemplateChildIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsRequestingExpression(', ')', 'bool'),
  \ dotnet#method('set_IsRequestingExpression(', 'bool value)', 'void'),
  \ dotnet#method('ReadInternalFlag(', 'InternalFlags reqFlag)', 'bool'),
  \ dotnet#method('ReadInternalFlag2(', 'InternalFlags2 reqFlag)', 'bool'),
  \ dotnet#method('WriteInternalFlag(', 'InternalFlags reqFlag, bool set)', 'void'),
  \ dotnet#method('WriteInternalFlag2(', 'InternalFlags2 reqFlag, bool set)', 'void'),
  \ dotnet#method('get_Parent(', ')', 'DependencyObject'),
  \ dotnet#method('RegisterName(', 'string name, object scopedElement)', 'void'),
  \ dotnet#method('UnregisterName(', 'string name)', 'void'),
  \ dotnet#method('FindName(', 'string name)', 'object'),
  \ dotnet#method('FindName(', 'string name, [out] DependencyObject& scopeOwner)', 'object'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('FindResourceOnSelf(', 'object resourceKey, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference)', 'object'),
  \ dotnet#method('ContextVerifiedGetParent(', ')', 'DependencyObject'),
  \ dotnet#method('AddLogicalChild(', 'object child)', 'famorassem void'),
  \ dotnet#method('RemoveLogicalChild(', 'object child)', 'famorassem void'),
  \ dotnet#method('ChangeLogicalParent(', 'class DependencyObject newParent)', 'void'),
  \ dotnet#method('OnNewParent(', 'class DependencyObject newParent)', 'strict void'),
  \ dotnet#method('OnAncestorChangedInternal(', 'TreeChangeInfo parentTreeState)', 'void'),
  \ dotnet#method('InvalidateTreeDependentProperties(', 'TreeChangeInfo parentTreeState, bool isSelfInheritanceParent)', 'FrugalObjectList'),
  \ dotnet#method('get_ThisHasLoadedChangeEventHandler(', ')', 'bool'),
  \ dotnet#method('get_HasFefLoadedChangeHandler(', ')', 'bool'),
  \ dotnet#method('UpdateStyleProperty(', ')', 'void'),
  \ dotnet#method('UpdateThemeStyleProperty(', ')', 'void'),
  \ dotnet#method('OnThemeChanged(', ')', 'strict void'),
  \ dotnet#method('FireLoadedOnDescendentsInternal(', ')', 'void'),
  \ dotnet#method('FireUnloadedOnDescendentsInternal(', ')', 'void'),
  \ dotnet#method('ShouldProvideInheritanceContext(', 'class DependencyObject target, DependencyProperty property)', 'strict bool'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('ChangeSubtreeHasLoadedChangedHandler(', 'class DependencyObject mentor)', 'void'),
  \ dotnet#method('RaiseInheritedPropertyChangedEvent(', 'InheritablePropertyChangeInfo& info)', 'void'),
  \ dotnet#method('get_IsStyleUpdateInProgress(', ')', 'bool'),
  \ dotnet#method('set_IsStyleUpdateInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_IsThemeStyleUpdateInProgress(', ')', 'bool'),
  \ dotnet#method('set_IsThemeStyleUpdateInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_StoresParentTemplateValues(', ')', 'bool'),
  \ dotnet#method('set_StoresParentTemplateValues(', 'bool value)', 'void'),
  \ dotnet#method('get_HasNumberSubstitutionChanged(', ')', 'bool'),
  \ dotnet#method('set_HasNumberSubstitutionChanged(', 'bool value)', 'void'),
  \ dotnet#method('get_HasTemplateGeneratedSubTree(', ')', 'bool'),
  \ dotnet#method('set_HasTemplateGeneratedSubTree(', 'bool value)', 'void'),
  \ dotnet#method('get_HasImplicitStyleFromResources(', ')', 'bool'),
  \ dotnet#method('set_HasImplicitStyleFromResources(', 'bool value)', 'void'),
  \ dotnet#method('get_ShouldLookupImplicitStyles(', ')', 'bool'),
  \ dotnet#method('set_ShouldLookupImplicitStyles(', 'bool value)', 'void'),
  \ dotnet#method('get_IsStyleSetFromGenerator(', ')', 'bool'),
  \ dotnet#method('set_IsStyleSetFromGenerator(', 'bool value)', 'void'),
  \ dotnet#method('get_HasStyleChanged(', ')', 'bool'),
  \ dotnet#method('set_HasStyleChanged(', 'bool value)', 'void'),
  \ dotnet#method('get_HasStyleInvalidated(', ')', 'bool'),
  \ dotnet#method('set_HasStyleInvalidated(', 'bool value)', 'void'),
  \ dotnet#method('get_HasStyleEverBeenFetched(', ')', 'bool'),
  \ dotnet#method('set_HasStyleEverBeenFetched(', 'bool value)', 'void'),
  \ dotnet#method('get_HasLocalStyle(', ')', 'bool'),
  \ dotnet#method('set_HasLocalStyle(', 'bool value)', 'void'),
  \ dotnet#method('get_HasThemeStyleEverBeenFetched(', ')', 'bool'),
  \ dotnet#method('set_HasThemeStyleEverBeenFetched(', 'bool value)', 'void'),
  \ dotnet#method('get_AncestorChangeInProgress(', ')', 'bool'),
  \ dotnet#method('set_AncestorChangeInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_InheritableProperties(', ')', '.method'),
  \ dotnet#method('set_InheritableProperties(', 'class FrugalObjectList value)', 'void'),
  \ dotnet#method('get_LoadedPending(', ')', 'object[]'),
  \ dotnet#method('get_UnloadedPending(', ')', 'object[]'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#method('get_PotentiallyHasMentees(', ')', 'bool'),
  \ dotnet#method('set_PotentiallyHasMentees(', 'bool value)', 'void'),
  \ dotnet#method('add_ResourcesChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ResourcesChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_InheritedPropertyChanged(', 'class InheritedPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_InheritedPropertyChanged(', 'class InheritedPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('FrameworkContentElement(', ')', 'static void .'),
  \ dotnet#event('TargetUpdated', 'EventHandler'),
  \ dotnet#event('SourceUpdated', 'EventHandler'),
  \ dotnet#event('DataContextChanged', 'DependencyPropertyChangedEventHandler'),
  \ dotnet#event('Initialized', 'EventHandler'),
  \ dotnet#event('Loaded', 'RoutedEventHandler'),
  \ dotnet#event('Unloaded', 'RoutedEventHandler'),
  \ dotnet#event('ToolTipOpening', 'ToolTipEventHandler'),
  \ dotnet#event('ToolTipClosing', 'ToolTipEventHandler'),
  \ dotnet#event('ContextMenuOpening', 'ContextMenuEventHandler'),
  \ dotnet#event('ContextMenuClosing', 'ContextMenuEventHandler'),
  \ dotnet#event('ResourcesChanged', 'EventHandler'),
  \ dotnet#event('InheritedPropertyChanged', 'InheritedPropertyChangedEventHandler'),
  \ dotnet#prop('Style', 'Style'),
  \ dotnet#prop('OverridesDefaultStyle', 'bool'),
  \ dotnet#prop('DefaultStyleKey', 'object'),
  \ dotnet#prop('ThemeStyle', 'Style'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('TemplatedParent', 'DependencyObject'),
  \ dotnet#prop('HasResources', 'bool'),
  \ dotnet#prop('Resources', 'ResourceDictionary'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Tag', 'object'),
  \ dotnet#prop('Language', 'XmlLanguage'),
  \ dotnet#prop('FocusVisualStyle', 'Style'),
  \ dotnet#prop('Cursor', 'Cursor'),
  \ dotnet#prop('ForceCursor', 'bool'),
  \ dotnet#prop('InputScope', 'InputScope'),
  \ dotnet#prop('DataContext', 'object'),
  \ dotnet#prop('BindingGroup', 'BindingGroup'),
  \ dotnet#prop('InheritanceBehavior', 'InheritanceBehavior'),
  \ dotnet#prop('IsInitialized', 'bool'),
  \ dotnet#prop('IsLoaded', 'bool'),
  \ dotnet#prop('ToolTip', 'object'),
  \ dotnet#prop('ContextMenu', 'ContextMenu'),
  \ dotnet#prop('HasResourceReference', 'bool'),
  \ dotnet#prop('IsLogicalChildrenIterationInProgress', 'bool'),
  \ dotnet#prop('SubtreeHasLoadedChangeHandler', 'bool'),
  \ dotnet#prop('IsLoadedCache', 'bool'),
  \ dotnet#prop('IsParentAnFE', 'bool'),
  \ dotnet#prop('IsTemplatedParentAnFE', 'bool'),
  \ dotnet#prop('HasLogicalChildren', 'bool'),
  \ dotnet#prop('TemplateChildIndex', 'int32'),
  \ dotnet#prop('IsRequestingExpression', 'bool'),
  \ dotnet#prop('Parent', 'DependencyObject'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('ThisHasLoadedChangeEventHandler', 'bool'),
  \ dotnet#prop('HasFefLoadedChangeHandler', 'bool'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('IsStyleUpdateInProgress', 'bool'),
  \ dotnet#prop('IsThemeStyleUpdateInProgress', 'bool'),
  \ dotnet#prop('StoresParentTemplateValues', 'bool'),
  \ dotnet#prop('HasNumberSubstitutionChanged', 'bool'),
  \ dotnet#prop('HasTemplateGeneratedSubTree', 'bool'),
  \ dotnet#prop('HasImplicitStyleFromResources', 'bool'),
  \ dotnet#prop('ShouldLookupImplicitStyles', 'bool'),
  \ dotnet#prop('IsStyleSetFromGenerator', 'bool'),
  \ dotnet#prop('HasStyleChanged', 'bool'),
  \ dotnet#prop('HasStyleInvalidated', 'bool'),
  \ dotnet#prop('HasStyleEverBeenFetched', 'bool'),
  \ dotnet#prop('HasLocalStyle', 'bool'),
  \ dotnet#prop('HasThemeStyleEverBeenFetched', 'bool'),
  \ dotnet#prop('AncestorChangeInProgress', 'bool'),
  \ dotnet#prop('InheritableProperties', 'FrugalObjectList'),
  \ dotnet#prop('LoadedPending', 'object[]'),
  \ dotnet#prop('UnloadedPending', 'object[]'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ dotnet#prop('PotentiallyHasMentees', 'bool'),
  \ ])

call dotnet#class('ExceptionRoutedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('ExceptionRoutedEventArgs(', 'class RoutedEvent routedEvent, object sender, Exception errorException)', 'void'),
  \ dotnet#method('get_ErrorException(', ')', 'Exception'),
  \ dotnet#prop('ErrorException', 'Exception'),
  \ ])

call dotnet#class('MediaScriptCommandRoutedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('MediaScriptCommandRoutedEventArgs(', 'class RoutedEvent routedEvent, object sender, string parameterType, string parameterValue)', 'void'),
  \ dotnet#method('get_ParameterType(', ')', 'string'),
  \ dotnet#method('get_ParameterValue(', ')', 'string'),
  \ dotnet#prop('ParameterType', 'string'),
  \ dotnet#prop('ParameterValue', 'string'),
  \ ])

call dotnet#class('TriggerAction', 'DependencyObject', [ 
  \ dotnet#method('TriggerAction(', ')', 'void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement fe, FrameworkContentElement fce, Style targetStyle, FrameworkTemplate targetTemplate, int64 layer)', 'abstract strict void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement fe)', 'abstract strict void'),
  \ dotnet#method('get_ContainingTrigger(', ')', '.method'),
  \ dotnet#method('Seal(', 'class TriggerBase containingTrigger)', 'void'),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#method('CheckSealed(', ')', 'void'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#prop('ContainingTrigger', 'TriggerBase'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ ])

call dotnet#class('CornerRadius', 'ValueType', [ 
  \ dotnet#field('_topLeft', 'float64'),
  \ dotnet#field('_topRight', 'float64'),
  \ dotnet#field('_bottomLeft', 'float64'),
  \ dotnet#field('_bottomRight', 'float64'),
  \ dotnet#method('CornerRadius(', 'float64 uniformRadius)', 'void'),
  \ dotnet#method('CornerRadius(', 'float64 topLeft, float64 topRight, float64 bottomRight, float64 bottomLeft)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'CornerRadius cornerRadius)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('op_Equality(', 'CornerRadius cr1, CornerRadius cr2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'CornerRadius cr1, CornerRadius cr2)', 'static bool'),
  \ dotnet#method('get_TopLeft(', ')', 'float64'),
  \ dotnet#method('set_TopLeft(', 'float64 value)', 'void'),
  \ dotnet#method('get_TopRight(', ')', 'float64'),
  \ dotnet#method('set_TopRight(', 'float64 value)', 'void'),
  \ dotnet#method('get_BottomRight(', ')', 'float64'),
  \ dotnet#method('set_BottomRight(', 'float64 value)', 'void'),
  \ dotnet#method('get_BottomLeft(', ')', 'float64'),
  \ dotnet#method('set_BottomLeft(', 'float64 value)', 'void'),
  \ dotnet#method('IsValid(', 'bool allowNegative, bool allowNaN, bool allowPositiveInfinity, bool allowNegativeInfinity)', 'bool'),
  \ dotnet#method('get_IsZero(', ')', 'bool'),
  \ dotnet#prop('TopLeft', 'float64'),
  \ dotnet#prop('TopRight', 'float64'),
  \ dotnet#prop('BottomRight', 'float64'),
  \ dotnet#prop('BottomLeft', 'float64'),
  \ dotnet#prop('IsZero', 'bool'),
  \ ])

call dotnet#class('CornerRadiusConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('ToString(', 'CornerRadius cr, CultureInfo cultureInfo)', 'static string'),
  \ dotnet#method('FromString(', 'string s, CultureInfo cultureInfo)', 'static CornerRadius'),
  \ dotnet#method('CornerRadiusConverter(', ')', 'void'),
  \ ])

call dotnet#class('TemplateKey', 'ResourceKey', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('TemplateKey(', 'TemplateKey/TemplateType templateType)', 'void'),
  \ dotnet#method('TemplateKey(', 'TemplateKey/TemplateType templateType, object dataType)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#method('get_DataType(', ')', 'object'),
  \ dotnet#method('set_DataType(', 'object value)', 'void'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Assembly(', ')', ''),
  \ dotnet#method('ValidateDataType(', 'object dataType, string argName)', 'static Exception'),
  \ dotnet#prop('DataType', 'object'),
  \ dotnet#prop('', 'Assembly'),
  \ ])

call dotnet#class('DataTemplateKey', 'TemplateKey', [ 
  \ dotnet#method('DataTemplateKey(', ')', 'void'),
  \ dotnet#method('DataTemplateKey(', 'object dataType)', 'void'),
  \ ])

call dotnet#class('TriggerBase', 'DependencyObject', [ 
  \ dotnet#field('PropertyValues', 'FrugalStructList'),
  \ dotnet#method('TriggerBase(', ')', 'void'),
  \ dotnet#method('get_EnterActions(', ')', 'TriggerActionCollection'),
  \ dotnet#method('get_HasEnterActions(', ')', 'bool'),
  \ dotnet#method('get_ExitActions(', ')', 'TriggerActionCollection'),
  \ dotnet#method('get_HasExitActions(', ')', 'bool'),
  \ dotnet#method('get_ExecuteEnterActionsOnApply(', ')', 'bool'),
  \ dotnet#method('get_ExecuteExitActionsOnApply(', ')', 'bool'),
  \ dotnet#method('ProcessParametersContainer(', 'class DependencyProperty dp)', 'void'),
  \ dotnet#method('ProcessParametersVisualTreeChild(', 'class DependencyProperty dp, string target)', 'string'),
  \ dotnet#method('AddToPropertyValues(', 'string childName, DependencyProperty dp, object value, PropertyValueType)', 'void'),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#method('ProcessSettersCollection(', 'class SetterBaseCollection setters)', 'void'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#method('get_Layer(', ')', 'int64'),
  \ dotnet#method('EstablishLayer(', ')', 'void'),
  \ dotnet#method('GetCurrentState(', 'class DependencyObject container, UncommonField dataField)', 'strict bool'),
  \ dotnet#method('get_TriggerConditions(', ')', '.method'),
  \ dotnet#method('set_TriggerConditions(', 'TriggerCondition[] value)', 'void'),
  \ dotnet#method('TriggerBase(', ')', 'static void .'),
  \ dotnet#prop('EnterActions', 'TriggerActionCollection'),
  \ dotnet#prop('HasEnterActions', 'bool'),
  \ dotnet#prop('ExitActions', 'TriggerActionCollection'),
  \ dotnet#prop('HasExitActions', 'bool'),
  \ dotnet#prop('ExecuteEnterActionsOnApply', 'bool'),
  \ dotnet#prop('ExecuteExitActionsOnApply', 'bool'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ dotnet#prop('Layer', 'int64'),
  \ dotnet#prop('TriggerConditions', 'TriggerCondition[]'),
  \ ])

call dotnet#class('DataTrigger', 'TriggerBase', [ 
  \ dotnet#method('get_Binding(', ')', 'BindingBase'),
  \ dotnet#method('set_Binding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('set_Value(', 'object value)', 'void'),
  \ dotnet#method('get_Setters(', ')', 'SetterBaseCollection'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('Seal(', ')', 'void'),
  \ dotnet#method('GetCurrentState(', 'class DependencyObject container, UncommonField dataField)', 'strict bool'),
  \ dotnet#method('ReceiveMarkupExtension(', 'object targetObject, XamlSetMarkupExtensionEventArgs eventArgs)', 'static void'),
  \ dotnet#method('DataTrigger(', ')', 'void'),
  \ dotnet#prop('Binding', 'BindingBase'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Setters', 'SetterBaseCollection'),
  \ ])

call dotnet#class('DeferrableContent', 'Object', [ 
  \ dotnet#method('get_LoadPermission(', ')', '.method'),
  \ dotnet#method('get_Stream(', ')', '.method'),
  \ dotnet#method('get_SchemaContext(', ')', '.method'),
  \ dotnet#method('get_ObjectWriterFDeferrableContenty(', ')', '.method'),
  \ dotnet#method('get_ObjectWriterParentSettings(', ')', '.method'),
  \ dotnet#method('get_RootObject(', ')', 'object'),
  \ dotnet#method('get_ServiceProvider(', ')', '.method'),
  \ dotnet#method('DeferrableContent(', 'class Stream stream, Baml2006SchemaContext schemaContext, IXamlObjectWriterFDeferrableContenty objectWriterFDeferrableContenty, IServiceProvider serviceProvider, object rootObject)', 'void'),
  \ dotnet#method('set_LoadPermission(', 'class XamlLoadPermission value)', 'void'),
  \ dotnet#method('set_Stream(', 'class Stream value)', 'void'),
  \ dotnet#method('set_SchemaContext(', 'class Baml2006SchemaContext value)', 'void'),
  \ dotnet#method('set_ObjectWriterFDeferrableContenty(', 'class IXamlObjectWriterFDeferrableContenty value)', 'void'),
  \ dotnet#method('set_ObjectWriterParentSettings(', 'class XamlObjectWriterSettings value)', 'void'),
  \ dotnet#method('set_RootObject(', 'object value)', 'void'),
  \ dotnet#method('set_ServiceProvider(', 'class IServiceProvider value)', 'void'),
  \ dotnet#prop('LoadPermission', 'XamlLoadPermission'),
  \ dotnet#prop('Stream', 'Stream'),
  \ dotnet#prop('SchemaContext', 'Baml2006SchemaContext'),
  \ dotnet#prop('ObjectWriterFDeferrableContenty', 'IXamlObjectWriterFDeferrableContenty'),
  \ dotnet#prop('ObjectWriterParentSettings', 'XamlObjectWriterSettings'),
  \ dotnet#prop('RootObject', 'object'),
  \ dotnet#prop('ServiceProvider', 'IServiceProvider'),
  \ ])

call dotnet#class('DeferrableContentConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('DeferrableContentConverter(', ')', 'void'),
  \ ])

call dotnet#class('ValueSource', 'ValueType', [ 
  \ dotnet#field('_baseValueSource', 'BaseValueSource'),
  \ dotnet#field('_isExpression', 'bool'),
  \ dotnet#field('_isAnimated', 'bool'),
  \ dotnet#field('_isCoerced', 'bool'),
  \ dotnet#field('_isCurrent', 'bool'),
  \ dotnet#method('ValueSource(', 'BaseValueSourceInternal source, bool isExpression, bool isAnimated, bool isCoerced, bool isCurrent)', 'void'),
  \ dotnet#method('get_BaseValueSource(', ')', 'BaseValueSource'),
  \ dotnet#method('get_IsExpression(', ')', 'bool'),
  \ dotnet#method('get_IsAnimated(', ')', 'bool'),
  \ dotnet#method('get_IsCoerced(', ')', 'bool'),
  \ dotnet#method('get_IsCurrent(', ')', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('op_Equality(', 'ValueSource vs1, ValueSource vs2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'ValueSource vs1, ValueSource vs2)', 'static bool'),
  \ dotnet#prop('BaseValueSource', 'BaseValueSource'),
  \ dotnet#prop('IsExpression', 'bool'),
  \ dotnet#prop('IsAnimated', 'bool'),
  \ dotnet#prop('IsCoerced', 'bool'),
  \ dotnet#prop('IsCurrent', 'bool'),
  \ ])

call dotnet#class('DependencyPropertyHelper', 'Object', [ 
  \ dotnet#method('GetValueSource(', 'class DependencyObject dependencyObject, DependencyProperty dependencyProperty)', 'static ValueSource'),
  \ ])

call dotnet#class('DialogResultConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('DialogResultConverter(', ')', 'void'),
  \ ])

call dotnet#class('DynamicResourceExtension', 'MarkupExtension', [ 
  \ dotnet#method('DynamicResourceExtension(', ')', 'void'),
  \ dotnet#method('DynamicResourceExtension(', 'object resourceKey)', 'void'),
  \ dotnet#method('ProvideValue(', 'class IServiceProvider serviceProvider)', 'object'),
  \ dotnet#method('get_ResourceKey(', ')', 'object'),
  \ dotnet#method('set_ResourceKey(', 'object value)', 'void'),
  \ dotnet#prop('ResourceKey', 'object'),
  \ ])

call dotnet#class('DynamicResourceExtensionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('DynamicResourceExtensionConverter(', ')', 'void'),
  \ ])

call dotnet#class('SetterBase', 'Object', [ 
  \ dotnet#method('SetterBase(', ')', 'void'),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#method('CheckSealed(', ')', 'void'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ ])

call dotnet#class('EventSetter', 'SetterBase', [ 
  \ dotnet#method('EventSetter(', ')', 'void'),
  \ dotnet#method('EventSetter(', 'class RoutedEvent routedEvent, Delegate handler)', 'void'),
  \ dotnet#method('get_Event(', ')', 'RoutedEvent'),
  \ dotnet#method('set_Event(', 'class RoutedEvent value)', 'void'),
  \ dotnet#method('get_Handler(', ')', 'Delegate'),
  \ dotnet#method('set_Handler(', 'class Delegate value)', 'void'),
  \ dotnet#method('get_HandledEventsToo(', ')', 'bool'),
  \ dotnet#method('set_HandledEventsToo(', 'bool value)', 'void'),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#prop('Event', 'RoutedEvent'),
  \ dotnet#prop('Handler', 'Delegate'),
  \ dotnet#prop('HandledEventsToo', 'bool'),
  \ ])

call dotnet#class('EventTrigger', 'TriggerBase', [ 
  \ dotnet#method('EventTrigger(', 'class EventTrigger trigger, FrameworkElement host)', 'void'),
  \ dotnet#method('Handler(', 'object sender, RoutedEventArgs e)', 'void'),
  \ dotnet#method('EventTrigger(', ')', 'void'),
  \ dotnet#method('EventTrigger(', 'class RoutedEvent routedEvent)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddChild(', 'object value)', 'void'),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void'),
  \ dotnet#method('get_RoutedEvent(', ')', 'RoutedEvent'),
  \ dotnet#method('set_RoutedEvent(', 'class RoutedEvent value)', 'void'),
  \ dotnet#method('get_SourceName(', ')', 'string'),
  \ dotnet#method('set_SourceName(', 'string value)', 'void'),
  \ dotnet#method('get_TriggerChildIndex(', ')', 'int32'),
  \ dotnet#method('set_TriggerChildIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_Actions(', ')', 'TriggerActionCollection'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('ShouldSerializeActions(', ')', 'bool'),
  \ dotnet#method('Seal(', ')', 'void'),
  \ dotnet#method('ProcessTriggerCollection(', 'class FrameworkElement triggersHost)', 'static void'),
  \ dotnet#method('ProcessOneTrigger(', 'class FrameworkElement triggersHost, TriggerBase triggerBase)', 'static void'),
  \ dotnet#method('DisconnectAllTriggers(', 'class FrameworkElement triggersHost)', 'static void'),
  \ dotnet#method('DisconnectOneTrigger(', 'class FrameworkElement triggersHost, TriggerBase triggerBase)', 'static void'),
  \ dotnet#method('EventTrigger(', ')', 'static void .'),
  \ dotnet#prop('RoutedEvent', 'RoutedEvent'),
  \ dotnet#prop('SourceName', 'string'),
  \ dotnet#prop('TriggerChildIndex', 'int32'),
  \ dotnet#prop('Actions', 'TriggerActionCollection'),
  \ ])

call dotnet#class('ExitEventArgs', 'EventArgs', [ 
  \ dotnet#field('_exitCode', 'int32'),
  \ dotnet#method('ExitEventArgs(', 'int32 exitCode)', 'void'),
  \ dotnet#method('get_ApplicationExitCode(', ')', 'int32'),
  \ dotnet#method('set_ApplicationExitCode(', 'int32 value)', 'void'),
  \ dotnet#prop('ApplicationExitCode', 'int32'),
  \ ])

call dotnet#class('FigureLength', 'ValueType', [ 
  \ dotnet#field('_unitValue', 'float64'),
  \ dotnet#field('_unitType', 'FigureUnitType'),
  \ dotnet#method('FigureLength(', 'float64 pixels)', 'void'),
  \ dotnet#method('FigureLength(', 'float64 value, FigureUnitType type)', 'void'),
  \ dotnet#method('op_Equality(', 'FigureLength fl1, FigureLength fl2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'FigureLength fl1, FigureLength fl2)', 'static bool'),
  \ dotnet#method('Equals(', 'object oCompare)', 'bool'),
  \ dotnet#method('Equals(', 'FigureLength figureLength)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_IsAbsolute(', ')', 'bool'),
  \ dotnet#method('get_IsAuto(', ')', 'bool'),
  \ dotnet#method('get_IsColumn(', ')', 'bool'),
  \ dotnet#method('get_IsContent(', ')', 'bool'),
  \ dotnet#method('get_IsPage(', ')', 'bool'),
  \ dotnet#method('get_Value(', ')', 'float64'),
  \ dotnet#method('get_FigureUnitType(', ')', 'FigureUnitType'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('IsAbsolute', 'bool'),
  \ dotnet#prop('IsAuto', 'bool'),
  \ dotnet#prop('IsColumn', 'bool'),
  \ dotnet#prop('IsContent', 'bool'),
  \ dotnet#prop('IsPage', 'bool'),
  \ dotnet#prop('Value', 'float64'),
  \ dotnet#prop('FigureUnitType', 'FigureUnitType'),
  \ ])

call dotnet#class('FigureLengthConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('ToString(', 'FigureLength fl, CultureInfo cultureInfo)', 'static string'),
  \ dotnet#method('FromString(', 'string s, CultureInfo cultureInfo)', 'static FigureLength'),
  \ dotnet#method('FigureLengthConverter(', ')', 'void'),
  \ ])

call dotnet#class('FontSizeConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('FromString(', 'string text, CultureInfo culture, [out] float64& amount)', 'static void'),
  \ dotnet#method('FontSizeConverter(', ')', 'void'),
  \ ])

call dotnet#class('FrameworkElementFFrameworkElementFactoryy', 'Object', [ 
  \ dotnet#field('PropertyValues', 'FrugalStructList'),
  \ dotnet#field('_hasLoadedChangeHandler', 'bool'),
  \ dotnet#field('_childIndex', 'int32'),
  \ dotnet#method('FrameworkElementFactory(', ')', 'void'),
  \ dotnet#method('FrameworkElementFactory(', 'class Type type)', 'void'),
  \ dotnet#method('FrameworkElementFactory(', 'string text)', 'void'),
  \ dotnet#method('FrameworkElementFactory(', 'class Type type, string name)', 'void'),
  \ dotnet#method('get_Type(', ')', 'Type'),
  \ dotnet#method('set_Type(', 'class Type value)', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('AppendChild(', 'class FrameworkElementFFrameworkElementFactoryy child)', 'void'),
  \ dotnet#method('SetValue(', 'class DependencyProperty dp, object value)', 'void'),
  \ dotnet#method('SetBinding(', 'class DependencyProperty dp, BindingBase binding)', 'void'),
  \ dotnet#method('SetResourceReference(', 'class DependencyProperty dp, object name)', 'void'),
  \ dotnet#method('AddHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'void'),
  \ dotnet#method('AddHandler(', 'class RoutedEvent routedEvent, Delegate handler, bool handledEventsToo)', 'void'),
  \ dotnet#method('RemoveHandler(', 'class RoutedEvent routedEvent, Delegate handler)', 'void'),
  \ dotnet#method('get_EventHandlersStore(', ')', '.method'),
  \ dotnet#method('set_EventHandlersStore(', 'class EventHandlersStore value)', 'void'),
  \ dotnet#method('get_HasLoadedChangeHandler(', ')', 'bool'),
  \ dotnet#method('set_HasLoadedChangeHandler(', 'bool value)', 'void'),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('get_Parent(', ')', 'FrameworkElementFFrameworkElementFactoryy'),
  \ dotnet#method('get_FirstChild(', ')', 'FrameworkElementFFrameworkElementFactoryy'),
  \ dotnet#method('get_NextSibling(', ')', 'FrameworkElementFFrameworkElementFactoryy'),
  \ dotnet#method('get_FrameworkTemplate(', ')', '.method'),
  \ dotnet#method('GetValue(', 'class DependencyProperty dp)', 'object'),
  \ dotnet#method('Seal(', 'class FrameworkTemplate ownerTemplate)', 'void'),
  \ dotnet#method('InstantiateTree(', 'class UncommonField dataField, DependencyObject container, DependencyObject parent, List affectedChildren, List& noChildIndexChildren, FrugalStructList& resourceDependents)', 'DependencyObject'),
  \ dotnet#method('InstantiateUnoptimizedTree(', ')', 'FrameworkObject'),
  \ dotnet#method('NewNodeBeginInit(', 'bool treeNodeIsFE, FrameworkElement treeNodeFE, FrameworkContentElement treeNodeFCE)', 'static void'),
  \ dotnet#method('AddNodeToLogicalTree(', 'class DependencyObject parent, Type type, bool treeNodeIsFE, FrameworkElement treeNodeFE, FrameworkContentElement treeNodeFCE)', 'static void'),
  \ dotnet#method('IsChildNameValid(', 'string childName)', 'bool'),
  \ dotnet#method('FrameworkElementFactory(', ')', 'static void .'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('EventHandlersStore', 'EventHandlersStore'),
  \ dotnet#prop('HasLoadedChangeHandler', 'bool'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('Parent', 'FrameworkElementFFrameworkElementFactoryy'),
  \ dotnet#prop('FirstChild', 'FrameworkElementFFrameworkElementFactoryy'),
  \ dotnet#prop('NextSibling', 'FrameworkElementFFrameworkElementFactoryy'),
  \ dotnet#prop('FrameworkTemplate', 'FrameworkTemplate'),
  \ ])

call dotnet#class('FrameworkPropertyMetadata', 'UIPropertyMetadata', [ 
  \ dotnet#method('FrameworkPropertyMetadata(', ') noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'object defaultValue) noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'class PropertyChangedCallback propertyChangedCallback) noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'class PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback) noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'object defaultValue, PropertyChangedCallback propertyChangedCallback) noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'object defaultValue, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback) noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'object defaultValue, FrameworkPropertyMetadataOptions flags) noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback) noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback) noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) noinlining', 'void'),
  \ dotnet#method('FrameworkPropertyMetadata(', 'object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, UpdateSourceTrigger defaultUpdateSourceTrigger) noinlining', 'void'),
  \ dotnet#method('get_AffectsMeasure(', ')', 'bool'),
  \ dotnet#method('set_AffectsMeasure(', 'bool value)', 'void'),
  \ dotnet#method('get_AffectsArrange(', ')', 'bool'),
  \ dotnet#method('set_AffectsArrange(', 'bool value)', 'void'),
  \ dotnet#method('get_AffectsParentMeasure(', ')', 'bool'),
  \ dotnet#method('set_AffectsParentMeasure(', 'bool value)', 'void'),
  \ dotnet#method('get_AffectsParentArrange(', ')', 'bool'),
  \ dotnet#method('set_AffectsParentArrange(', 'bool value)', 'void'),
  \ dotnet#method('get_AffectsRender(', ')', 'bool'),
  \ dotnet#method('set_AffectsRender(', 'bool value)', 'void'),
  \ dotnet#method('get_Inherits(', ')', 'bool'),
  \ dotnet#method('set_Inherits(', 'bool value)', 'void'),
  \ dotnet#method('get_OverridesInheritanceBehavior(', ')', 'bool'),
  \ dotnet#method('set_OverridesInheritanceBehavior(', 'bool value)', 'void'),
  \ dotnet#method('get_IsNotDataBindable(', ')', 'bool'),
  \ dotnet#method('set_IsNotDataBindable(', 'bool value)', 'void'),
  \ dotnet#method('get_BindsTwoWayByDefault(', ')', 'bool'),
  \ dotnet#method('set_BindsTwoWayByDefault(', 'bool value)', 'void'),
  \ dotnet#method('get_DefaultUpdateSourceTrigger(', ')', 'UpdateSourceTrigger'),
  \ dotnet#method('set_DefaultUpdateSourceTrigger(', 'UpdateSourceTrigger value)', 'void'),
  \ dotnet#method('get_Journal(', ')', 'bool'),
  \ dotnet#method('set_Journal(', 'bool value)', 'void'),
  \ dotnet#method('get_SubPropertiesDoNotAffectRender(', ')', 'bool'),
  \ dotnet#method('set_SubPropertiesDoNotAffectRender(', 'bool value)', 'void'),
  \ dotnet#method('CreateInstance(', ')', 'strict'),
  \ dotnet#method('Merge(', 'class PropertyMetadata baseMetadata, DependencyProperty dp)', 'void'),
  \ dotnet#method('OnApply(', 'class DependencyProperty dp, Type targetType)', 'void'),
  \ dotnet#method('get_IsDataBindingAllowed(', ')', 'bool'),
  \ dotnet#method('SetModified(', 'PropertyMetadata/MetadataFlags id)', 'void'),
  \ dotnet#method('IsModified(', 'PropertyMetadata/MetadataFlags id)', 'bool'),
  \ dotnet#prop('AffectsMeasure', 'bool'),
  \ dotnet#prop('AffectsArrange', 'bool'),
  \ dotnet#prop('AffectsParentMeasure', 'bool'),
  \ dotnet#prop('AffectsParentArrange', 'bool'),
  \ dotnet#prop('AffectsRender', 'bool'),
  \ dotnet#prop('Inherits', 'bool'),
  \ dotnet#prop('OverridesInheritanceBehavior', 'bool'),
  \ dotnet#prop('IsNotDataBindable', 'bool'),
  \ dotnet#prop('BindsTwoWayByDefault', 'bool'),
  \ dotnet#prop('DefaultUpdateSourceTrigger', 'UpdateSourceTrigger'),
  \ dotnet#prop('Journal', 'bool'),
  \ dotnet#prop('SubPropertiesDoNotAffectRender', 'bool'),
  \ dotnet#prop('IsDataBindingAllowed', 'bool'),
  \ ])

call dotnet#class('GridLength', 'ValueType', [ 
  \ dotnet#field('_unitValue', 'float64'),
  \ dotnet#field('_unitType', 'GridUnitType'),
  \ dotnet#method('GridLength(', 'float64 pixels)', 'void'),
  \ dotnet#method('GridLength(', 'float64 value, GridUnitType type)', 'void'),
  \ dotnet#method('op_Equality(', 'GridLength gl1, GridLength gl2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'GridLength gl1, GridLength gl2)', 'static bool'),
  \ dotnet#method('Equals(', 'object oCompare)', 'bool'),
  \ dotnet#method('Equals(', 'GridLength gridLength)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_IsAbsolute(', ')', 'bool'),
  \ dotnet#method('get_IsAuto(', ')', 'bool'),
  \ dotnet#method('get_IsStar(', ')', 'bool'),
  \ dotnet#method('get_Value(', ')', 'float64'),
  \ dotnet#method('get_GridUnitType(', ')', 'GridUnitType'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Auto(', ')', 'static'),
  \ dotnet#method('GridLength(', ')', 'static void .'),
  \ dotnet#prop('IsAbsolute', 'bool'),
  \ dotnet#prop('IsAuto', 'bool'),
  \ dotnet#prop('IsStar', 'bool'),
  \ dotnet#prop('Value', 'float64'),
  \ dotnet#prop('GridUnitType', 'GridUnitType'),
  \ dotnet#prop('', 'GridLength'),
  \ ])

call dotnet#class('GridLengthConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('ToString(', 'GridLength gl, CultureInfo cultureInfo)', 'static string'),
  \ dotnet#method('FromString(', 'string s, CultureInfo cultureInfo)', 'static GridLength'),
  \ dotnet#method('GridLengthConverter(', ')', 'void'),
  \ ])

call dotnet#class('HierarchicalDataTemplate', 'DataTemplate', [ 
  \ dotnet#method('HierarchicalDataTemplate(', ')', 'void'),
  \ dotnet#method('HierarchicalDataTemplate(', 'object dataType)', 'void'),
  \ dotnet#method('get_ItemsSource(', ')', 'BindingBase'),
  \ dotnet#method('set_ItemsSource(', 'class BindingBase value)', 'void'),
  \ dotnet#method('get_ItemTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_ItemTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_ItemTemplateSelHierarchicalDataTemplate(', ')', 'DataTemplateSelHierarchicalDataTemplate'),
  \ dotnet#method('set_ItemTemplateSelHierarchicalDataTemplate(', 'class DataTemplateSelHierarchicalDataTemplate value)', 'void'),
  \ dotnet#method('get_ItemContainerStyle(', ')', 'Style'),
  \ dotnet#method('set_ItemContainerStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_ItemContainerStyleSelHierarchicalDataTemplate(', ')', 'StyleSelHierarchicalDataTemplate'),
  \ dotnet#method('set_ItemContainerStyleSelHierarchicalDataTemplate(', 'class StyleSelHierarchicalDataTemplate value)', 'void'),
  \ dotnet#method('get_ItemStringFormat(', ')', 'string'),
  \ dotnet#method('set_ItemStringFormat(', 'string value)', 'void'),
  \ dotnet#method('get_AlternationCount(', ')', 'int32'),
  \ dotnet#method('set_AlternationCount(', 'int32 value)', 'void'),
  \ dotnet#method('get_ItemBindingGroup(', ')', 'BindingGroup'),
  \ dotnet#method('set_ItemBindingGroup(', 'class BindingGroup value)', 'void'),
  \ dotnet#method('get_IsItemTemplateSet(', ')', 'bool'),
  \ dotnet#method('get_IsItemTemplateSelHierarchicalDataTemplateSet(', ')', 'bool'),
  \ dotnet#method('get_IsItemContainerStyleSet(', ')', 'bool'),
  \ dotnet#method('get_IsItemContainerStyleSelHierarchicalDataTemplateSet(', ')', 'bool'),
  \ dotnet#method('get_IsItemStringFormatSet(', ')', 'bool'),
  \ dotnet#method('get_IsAlternationCountSet(', ')', 'bool'),
  \ dotnet#method('get_IsItemBindingGroupSet(', ')', 'bool'),
  \ dotnet#prop('ItemsSource', 'BindingBase'),
  \ dotnet#prop('ItemTemplate', 'DataTemplate'),
  \ dotnet#prop('ItemTemplateSelHierarchicalDataTemplate', 'DataTemplateSelHierarchicalDataTemplate'),
  \ dotnet#prop('ItemContainerStyle', 'Style'),
  \ dotnet#prop('ItemContainerStyleSelHierarchicalDataTemplate', 'StyleSelHierarchicalDataTemplate'),
  \ dotnet#prop('ItemStringFormat', 'string'),
  \ dotnet#prop('AlternationCount', 'int32'),
  \ dotnet#prop('ItemBindingGroup', 'BindingGroup'),
  \ dotnet#prop('IsItemTemplateSet', 'bool'),
  \ dotnet#prop('IsItemTemplateSelHierarchicalDataTemplateSet', 'bool'),
  \ dotnet#prop('IsItemContainerStyleSet', 'bool'),
  \ dotnet#prop('IsItemContainerStyleSelHierarchicalDataTemplateSet', 'bool'),
  \ dotnet#prop('IsItemStringFormatSet', 'bool'),
  \ dotnet#prop('IsAlternationCountSet', 'bool'),
  \ dotnet#prop('IsItemBindingGroupSet', 'bool'),
  \ ])

call dotnet#class('LengthConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('FromString(', 'string s, CultureInfo cultureInfo)', 'static float64'),
  \ dotnet#method('ToString(', 'float64 l, CultureInfo cultureInfo)', 'static string'),
  \ dotnet#method('LengthConverter(', ')', 'void'),
  \ dotnet#method('LengthConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('Localization', 'Object', [ 
  \ dotnet#method('GetComments(', 'object element)', 'static string'),
  \ dotnet#method('SetComments(', 'object element, string comments)', 'static void'),
  \ dotnet#method('GetAttributes(', 'object element)', 'static string'),
  \ dotnet#method('SetAttributes(', 'object element, string attributes)', 'static void'),
  \ dotnet#method('Localization(', ')', 'static void .'),
  \ ])

call dotnet#class('LogicalTreeHelper', 'Object', [ 
  \ dotnet#method('FindLogicalNode(', 'class DependencyObject logicalTreeNode, string elementName)', 'static DependencyObject'),
  \ dotnet#method('GetParent(', 'class DependencyObject current)', 'static DependencyObject'),
  \ dotnet#method('GetChildren(', 'class DependencyObject current)', 'static IEnumerable'),
  \ dotnet#method('GetChildren(', 'class FrameworkElement current)', 'static IEnumerable'),
  \ dotnet#method('GetChildren(', 'class FrameworkContentElement current)', 'static IEnumerable'),
  \ dotnet#method('BringIntoView(', 'class DependencyObject current)', 'static void'),
  \ dotnet#method('AddLogicalChild(', 'class DependencyObject parent, object child)', 'static void'),
  \ dotnet#method('AddLogicalChild(', 'class FrameworkElement parentFE, FrameworkContentElement parentFCE, object child)', 'static void'),
  \ dotnet#method('RemoveLogicalChild(', 'class DependencyObject parent, object child)', 'static void'),
  \ dotnet#method('RemoveLogicalChild(', 'class FrameworkElement parentFE, FrameworkContentElement parentFCE, object child)', 'static void'),
  \ dotnet#method('GetLogicalChildren(', 'class DependencyObject current)', 'static IEnumerator'),
  \ ])

call dotnet#class('LostFocusEventManager', 'WeakEventManager', [ 
  \ dotnet#method('AddListener(', 'class DependencyObject source, IWeakEventListener listener)', 'static void'),
  \ dotnet#method('RemoveListener(', 'class DependencyObject source, IWeakEventListener listener)', 'static void'),
  \ dotnet#method('StartListening(', 'object source)', 'void'),
  \ dotnet#method('StopListening(', 'object source)', 'void'),
  \ dotnet#method('LostFocusEventManager(', ')', 'void'),
  \ ])

call dotnet#class('MessageBox', 'Object', [ 
  \ dotnet#method('Show(', 'string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult, MessageBoxOptions options)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'string messageBoxText, string caption, MessageBoxButton button)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'string messageBoxText, string caption)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'string messageBoxText)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'class Window owner, string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult, MessageBoxOptions options)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'class Window owner, string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'class Window owner, string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'class Window owner, string messageBoxText, string caption, MessageBoxButton button)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'class Window owner, string messageBoxText, string caption)', 'static MessageBoxResult'),
  \ dotnet#method('Show(', 'class Window owner, string messageBoxText)', 'static MessageBoxResult'),
  \ dotnet#method('ShowCore(', 'native int owner, string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult, MessageBoxOptions options)', 'static MessageBoxResult'),
  \ dotnet#method('MessageBox(', ')', 'void'),
  \ ])

call dotnet#class('MultiDataTrigger', 'TriggerBase', [ 
  \ dotnet#method('get_Conditions(', ')', 'ConditionCollection'),
  \ dotnet#method('get_Setters(', ')', 'SetterBaseCollection'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#method('GetCurrentState(', 'class DependencyObject container, UncommonField dataField)', 'strict bool'),
  \ dotnet#method('MultiDataTrigger(', ')', 'void'),
  \ dotnet#prop('Conditions', 'ConditionCollection'),
  \ dotnet#prop('Setters', 'SetterBaseCollection'),
  \ ])

call dotnet#class('MultiTrigger', 'TriggerBase', [ 
  \ dotnet#method('get_Conditions(', ')', 'ConditionCollection'),
  \ dotnet#method('get_Setters(', ')', 'SetterBaseCollection'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#method('GetCurrentState(', 'class DependencyObject container, UncommonField dataField)', 'strict bool'),
  \ dotnet#method('MultiTrigger(', ')', 'void'),
  \ dotnet#prop('Conditions', 'ConditionCollection'),
  \ dotnet#prop('Setters', 'SetterBaseCollection'),
  \ ])

call dotnet#class('NullableBoolConverter', 'NullableConverter', [ 
  \ dotnet#method('NullableBoolConverter(', ')', 'void'),
  \ dotnet#method('GetStandardValuesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('GetStandardValuesExclusive(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('GetStandardValues(', 'class ITypeDescriptorContext context)', 'TypeConverter/StandardValuesCollection'),
  \ ])

call dotnet#class('PropertyPath', 'Object', [ 
  \ dotnet#method('PropertyPath(', 'string path, object[] pathParameters)', 'void'),
  \ dotnet#method('PropertyPath(', 'object parameter)', 'void'),
  \ dotnet#method('PropertyPath(', 'string path, ITypeDescriptorContext typeDescriptorContext)', 'void'),
  \ dotnet#method('get_Path(', ')', 'string'),
  \ dotnet#method('set_Path(', 'string value)', 'void'),
  \ dotnet#method('get_PathParameters(', ')', 'Collection'),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Status(', ')', '.method'),
  \ dotnet#method('get_LastError(', ')', 'string'),
  \ dotnet#method('get_LastItem(', ')', 'object'),
  \ dotnet#method('get_LastAccessor(', ')', 'object'),
  \ dotnet#method('get_LastIndexerArguments(', ')', 'object[]'),
  \ dotnet#method('DowncastAccessor(', 'object accessor, [out] DependencyProperty& dp, [out] PropertyInfo& pi, [out] PropertyDescriptor& pd, [out] DynamicObjectAccessor& doa)', 'static void'),
  \ dotnet#method('SetContext(', 'object rootItem)', 'IDisposable'),
  \ dotnet#method('GetItem(', 'int32 k)', 'object'),
  \ dotnet#method('GetAccessor(', 'int32 k)', 'object'),
  \ dotnet#method('GetIndexerArguments(', 'int32 k)', 'object[]'),
  \ dotnet#method('GetValue(', ')', 'object'),
  \ dotnet#method('ComputeUnresolvedAttachedPropertiesInPath(', ')', 'int32'),
  \ dotnet#method('get_SVI(', ')', '.method'),
  \ dotnet#method('ResolvePropertyName(', 'int32 level, object item, Type ownerType, object context)', 'object'),
  \ dotnet#method('ResolveIndexerParams(', 'int32 level, object context)', 'IndexerParameterInfo[]'),
  \ dotnet#method('ReplaceIndexerByProperty(', 'int32 level, string name)', 'void'),
  \ dotnet#method('IsPropertyReference(', 'string name)', 'static bool'),
  \ dotnet#method('IsParameterIndex(', 'string name, [out] int32& index)', 'static bool'),
  \ dotnet#method('PropertyPath(', ')', 'static void .'),
  \ dotnet#prop('Path', 'string'),
  \ dotnet#prop('PathParameters', 'Collection'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Status', 'PropertyPathStatus'),
  \ dotnet#prop('LastError', 'string'),
  \ dotnet#prop('LastItem', 'object'),
  \ dotnet#prop('LastAccessor', 'object'),
  \ dotnet#prop('LastIndexerArguments', 'object[]'),
  \ dotnet#prop('SVI', 'SourceValueInfo[]'),
  \ ])

call dotnet#class('PropertyPathConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('PropertyPathConverter(', ')', 'void'),
  \ ])

call dotnet#class('RequestBringIntoViewEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('RequestBringIntoViewEventArgs(', 'class DependencyObject target, Rect targetRect)', 'void'),
  \ dotnet#method('get_TargetObject(', ')', 'DependencyObject'),
  \ dotnet#method('get_TargetRect(', ')', 'Rect'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('TargetObject', 'DependencyObject'),
  \ dotnet#prop('TargetRect', 'Rect'),
  \ ])

call dotnet#class('RequestBringIntoViewEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('RequestBringIntoViewEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, RequestBringIntoViewEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, RequestBringIntoViewEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ResourceDictionary', 'Object', [ 
  \ dotnet#field('IsSourcedFromThemeDictionary', 'bool'),
  \ dotnet#method('ResourceDictionary(', ')', 'void'),
  \ dotnet#method('CopyTo(', 'DictionaryEntry[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('get_MergedDictionaries(', ')', 'Collection'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('RegisterName(', 'string name, object scopedElement)', 'void'),
  \ dotnet#method('UnregisterName(', 'string name)', 'void'),
  \ dotnet#method('FindName(', 'string name)', 'object'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('set_IsReadOnly(', 'bool value)', 'void'),
  \ dotnet#method('get_Item(', 'object key)', 'object'),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void'),
  \ dotnet#method('get_DeferrableContent(', ')', 'DeferrableContent'),
  \ dotnet#method('set_DeferrableContent(', 'class DeferrableContent value)', 'void'),
  \ dotnet#method('GetValue(', 'object key, [out] bool& canCache)', 'object'),
  \ dotnet#method('GetValueType(', 'object key, [out] bool& found)', 'Type'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('Add(', 'object key, object value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object key)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Remove(', 'object key)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('Lookup(', 'object key, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference)', 'object'),
  \ dotnet#method('AddOwner(', 'class DispatcherObject owner)', 'void'),
  \ dotnet#method('RemoveOwner(', 'class DispatcherObject owner)', 'void'),
  \ dotnet#method('ContainsOwner(', 'class DispatcherObject owner)', 'bool'),
  \ dotnet#method('FetchResource(', 'object resourceKey, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference, [out] bool& canCache)', 'object'),
  \ dotnet#method('RemoveParentOwners(', 'class ResourceDictionary mergedDictionary)', 'void'),
  \ dotnet#method('get_DeferredResourceReferences(', ')', '.method'),
  \ dotnet#method('get_HasImplicitStyles(', ')', 'bool'),
  \ dotnet#method('set_HasImplicitStyles(', 'bool value)', 'void'),
  \ dotnet#method('get_CanBeAccessedAcrossThreads(', ')', 'bool'),
  \ dotnet#method('set_CanBeAccessedAcrossThreads(', 'bool value)', 'void'),
  \ dotnet#prop('MergedDictionaries', 'Collection'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('DeferrableContent', 'DeferrableContent'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('DeferredResourceReferences', 'WeakReferenceList'),
  \ dotnet#prop('HasImplicitStyles', 'bool'),
  \ dotnet#prop('CanBeAccessedAcrossThreads', 'bool'),
  \ ])

call dotnet#class('ColorConvertedBitmapExtension', 'MarkupExtension', [ 
  \ dotnet#method('ColorConvertedBitmapExtension(', ')', 'void'),
  \ dotnet#method('ColorConvertedBitmapExtension(', 'object image)', 'void'),
  \ dotnet#method('ProvideValue(', 'class IServiceProvider serviceProvider)', 'object'),
  \ ])

call dotnet#class('StaticResourceExtension', 'MarkupExtension', [ 
  \ dotnet#method('StaticResourceExtension(', ')', 'void'),
  \ dotnet#method('StaticResourceExtension(', 'object resourceKey)', 'void'),
  \ dotnet#method('ProvideValue(', 'class IServiceProvider serviceProvider)', 'object'),
  \ dotnet#method('get_ResourceKey(', ')', 'object'),
  \ dotnet#method('set_ResourceKey(', 'object value)', 'void'),
  \ dotnet#method('get_PrefetchedValue(', ')', 'strict'),
  \ dotnet#method('ProvideValueInternal(', 'class IServiceProvider serviceProvider, bool allowDeferredReference)', 'object'),
  \ dotnet#method('TryProvideValueInternal(', 'class IServiceProvider serviceProvider, bool allowDeferredReference, bool mustReturnDeferredResourceReference)', 'object'),
  \ dotnet#method('FindResourceInDeferredContent(', 'class IServiceProvider serviceProvider, bool allowDeferredReference, bool mustReturnDeferredResourceReference)', 'object'),
  \ dotnet#prop('ResourceKey', 'object'),
  \ dotnet#prop('PrefetchedValue', 'DeferredResourceReference'),
  \ ])

call dotnet#class('ResourceReferenceKeyNotFoundException', 'InvalidOperationException', [ 
  \ dotnet#method('ResourceReferenceKeyNotFoundException(', ')', 'void'),
  \ dotnet#method('ResourceReferenceKeyNotFoundException(', 'string message, object resourceKey)', 'void'),
  \ dotnet#method('ResourceReferenceKeyNotFoundException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Key(', ')', 'object'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Key', 'object'),
  \ ])

call dotnet#class('RoutedPropertyChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('RoutedPropertyChangedEventHandler`1(', 'object object, int method)', 'void RoutedPropertyChangedEventHandler`'),
  \ dotnet#method('Invoke(', 'object sender, RoutedPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, RoutedPropertyChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('RoutedPropertyChangedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('RoutedPropertyChangedEventArgs`1(', '!T oldValue, !T newValue)', 'void RoutedPropertyChangedEventArgs`'),
  \ dotnet#method('RoutedPropertyChangedEventArgs`1(', '!T oldValue, !T newValue, RoutedEvent routedEvent)', 'void RoutedPropertyChangedEventArgs`'),
  \ dotnet#method('get_OldValue(', ')', '!T'),
  \ dotnet#method('get_NewValue(', ')', '!T'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('OldValue', '!T'),
  \ dotnet#prop('NewValue', '!T'),
  \ ])

call dotnet#class('Setter', 'SetterBase', [ 
  \ dotnet#method('Setter(', ')', 'void'),
  \ dotnet#method('Setter(', 'class DependencyProperty property, object value)', 'void'),
  \ dotnet#method('Setter(', 'class DependencyProperty property, object value, string targetName)', 'void'),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#method('get_Property(', ')', 'DependencyProperty'),
  \ dotnet#method('set_Property(', 'class DependencyProperty value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('set_Value(', 'object value)', 'void'),
  \ dotnet#method('get_ValueInternal(', ')', 'object'),
  \ dotnet#method('get_TargetName(', ')', 'string'),
  \ dotnet#method('set_TargetName(', 'string value)', 'void'),
  \ dotnet#method('ReceiveMarkupExtension(', 'object targetObject, XamlSetMarkupExtensionEventArgs eventArgs)', 'static void'),
  \ dotnet#method('ReceiveTypeConverter(', 'object targetObject, XamlSetTypeConverterEventArgs eventArgs)', 'static void'),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#prop('Property', 'DependencyProperty'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('ValueInternal', 'object'),
  \ dotnet#prop('TargetName', 'string'),
  \ ])

call dotnet#class('SetterBaseCollection', 'Collection', [ 
  \ dotnet#method('ClearItems(', ')', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, SetterBase item)', 'void'),
  \ dotnet#method('RemoveItem(', 'int32 index)', 'void'),
  \ dotnet#method('SetItem(', 'int32 index, SetterBase item)', 'void'),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('Seal(', ')', 'void'),
  \ dotnet#method('SetterBaseCollection(', ')', 'void'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ ])

call dotnet#class('SizeChangedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('SizeChangedEventArgs(', 'class UIElement element, SizeChangedInfo info)', 'void'),
  \ dotnet#method('get_PreviousSize(', ')', 'Size'),
  \ dotnet#method('get_NewSize(', ')', 'Size'),
  \ dotnet#method('get_WidthChanged(', ')', 'bool'),
  \ dotnet#method('get_HeightChanged(', ')', 'bool'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('SizeChangedEventArgs(', ')', 'static void .'),
  \ dotnet#prop('PreviousSize', 'Size'),
  \ dotnet#prop('NewSize', 'Size'),
  \ dotnet#prop('WidthChanged', 'bool'),
  \ dotnet#prop('HeightChanged', 'bool'),
  \ ])

call dotnet#class('SizeChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('SizeChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, SizeChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, SizeChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('SessionEndingCancelEventArgs', 'CancelEventArgs', [ 
  \ dotnet#method('SessionEndingCancelEventArgs(', 'ReasonSessionEnding reasonSessionEnding)', 'void'),
  \ dotnet#method('get_ReasonSessionEnding(', ')', 'ReasonSessionEnding'),
  \ dotnet#prop('ReasonSessionEnding', 'ReasonSessionEnding'),
  \ ])

call dotnet#class('StartupEventArgs', 'EventArgs', [ 
  \ dotnet#method('StartupEventArgs(', ')', 'void'),
  \ dotnet#method('get_Args(', ')', 'string[]'),
  \ dotnet#method('get_PerformDefaultAction(', ')', 'bool'),
  \ dotnet#method('set_PerformDefaultAction(', 'bool value)', 'void'),
  \ dotnet#prop('Args', 'string[]'),
  \ dotnet#prop('PerformDefaultAction', 'bool'),
  \ ])

call dotnet#class('Style', 'DispatcherObject', [ 
  \ dotnet#field('_resources', 'ResourceDictionary'),
  \ dotnet#field('GlobalIndex', 'int32'),
  \ dotnet#field('ChildRecordFromChildIndex', 'FrugalStructList'),
  \ dotnet#field('TriggerSourceRecordFromChildIndex', 'FrugalStructList'),
  \ dotnet#field('PropertyTriggersWithActions', 'FrugalMap'),
  \ dotnet#field('PropertyValues', 'FrugalStructList'),
  \ dotnet#field('ContainerDependents', 'FrugalStructList'),
  \ dotnet#field('ResourceDependents', 'FrugalStructList'),
  \ dotnet#field('EventDependents', 'ItemStructList'),
  \ dotnet#field('_triggerActions', 'HybridDictionary'),
  \ dotnet#field('_dataTriggerRecordFromBinding', 'HybridDictionary'),
  \ dotnet#field('DataTriggersWithActions', 'HybridDictionary'),
  \ dotnet#method('Style(', ')', 'void'),
  \ dotnet#method('Style(', 'class Type targetType)', 'void'),
  \ dotnet#method('Style(', 'class Type targetType, Style basedOn)', 'void'),
  \ dotnet#method('RegisterName(', 'string name, object scopedElement)', 'void'),
  \ dotnet#method('UnregisterName(', 'string name)', 'void'),
  \ dotnet#method('FindName(', 'string name)', 'object '),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('get_TargetType(', ')', 'Type'),
  \ dotnet#method('set_TargetType(', 'class Type value)', 'void'),
  \ dotnet#method('get_BasedOn(', ')', 'Style'),
  \ dotnet#method('set_BasedOn(', 'class Style value)', 'void'),
  \ dotnet#method('get_Triggers(', ')', 'TriggerCollection'),
  \ dotnet#method('get_Setters(', ')', 'SetterBaseCollection'),
  \ dotnet#method('get_Resources(', ')', 'ResourceDictionary'),
  \ dotnet#method('set_Resources(', 'class ResourceDictionary value)', 'void'),
  \ dotnet#method('get_Resources(', ')', ''),
  \ dotnet#method('set_Resources(', 'class ResourceDictionary value)', 'void '),
  \ dotnet#method('FindResource(', 'object resourceKey, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference)', 'object'),
  \ dotnet#method('FindResourceDictionary(', 'object resourceKey)', 'ResourceDictionary'),
  \ dotnet#method('IsAmbientPropertyAvailable(', 'string propertyName)', 'bool '),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('CheckTargetType(', 'object element)', 'void'),
  \ dotnet#method('Seal(', ')', 'void'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_CanSeal(', ')', 'bool '),
  \ dotnet#method('get_IsSealed(', ')', 'bool '),
  \ dotnet#method('Seal(', ')', 'void '),
  \ dotnet#method('get_HasResourceReferences(', ')', 'bool'),
  \ dotnet#method('get_EventHandlersStore(', ')', '.method'),
  \ dotnet#method('get_HasEventDependents(', ')', 'bool'),
  \ dotnet#method('get_HasEventSetters(', ')', 'bool'),
  \ dotnet#method('get_HasInstanceValues(', ')', 'bool'),
  \ dotnet#method('get_HasLoadedChangeHandler(', ')', 'bool'),
  \ dotnet#method('set_HasLoadedChangeHandler(', 'bool value)', 'void'),
  \ dotnet#method('get_IsBasedOnModified(', ')', 'bool'),
  \ dotnet#method('IsModified(', 'int32 id)', 'bool'),
  \ dotnet#method('Style(', ')', 'static void .'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('TargetType', 'Type'),
  \ dotnet#prop('BasedOn', 'Style'),
  \ dotnet#prop('Triggers', 'TriggerCollection'),
  \ dotnet#prop('Setters', 'SetterBaseCollection'),
  \ dotnet#prop('Resources', 'ResourceDictionary'),
  \ dotnet#prop('Resources', 'ResourceDictionary'),
  \ dotnet#prop('CanSeal', 'bool'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('HasResourceReferences', 'bool'),
  \ dotnet#prop('EventHandlersStore', 'EventHandlersStore'),
  \ dotnet#prop('HasEventDependents', 'bool'),
  \ dotnet#prop('HasEventSetters', 'bool'),
  \ dotnet#prop('HasInstanceValues', 'bool'),
  \ dotnet#prop('HasLoadedChangeHandler', 'bool'),
  \ dotnet#prop('IsBasedOnModified', 'bool'),
  \ ])

call dotnet#class('StyleTypedPropertyAttribute', 'Attribute', [ 
  \ dotnet#method('StyleTypedPropertyAttribute(', ')', 'void'),
  \ dotnet#method('get_Property(', ')', 'string'),
  \ dotnet#method('set_Property(', 'string value)', 'void'),
  \ dotnet#method('get_StyleTargetType(', ')', 'Type'),
  \ dotnet#method('set_StyleTargetType(', 'class Type value)', 'void'),
  \ dotnet#prop('Property', 'string'),
  \ dotnet#prop('StyleTargetType', 'Type'),
  \ ])

call dotnet#class('SystemColors', 'Object', [ 
  \ dotnet#method('get_ActiveBorderColor(', ')', 'static'),
  \ dotnet#method('get_ActiveCaptionColor(', ')', 'static'),
  \ dotnet#method('get_ActiveCaptionTextColor(', ')', 'static'),
  \ dotnet#method('get_AppWorkspaceColor(', ')', 'static'),
  \ dotnet#method('get_ControlColor(', ')', 'static'),
  \ dotnet#method('get_ControlDarkColor(', ')', 'static'),
  \ dotnet#method('get_ControlDarkDarkColor(', ')', 'static'),
  \ dotnet#method('get_ControlLightColor(', ')', 'static'),
  \ dotnet#method('get_ControlLightLightColor(', ')', 'static'),
  \ dotnet#method('get_ControlTextColor(', ')', 'static'),
  \ dotnet#method('get_DesktopColor(', ')', 'static'),
  \ dotnet#method('get_GradientActiveCaptionColor(', ')', 'static'),
  \ dotnet#method('get_GradientInactiveCaptionColor(', ')', 'static'),
  \ dotnet#method('get_GrayTextColor(', ')', 'static'),
  \ dotnet#method('get_HighlightColor(', ')', 'static'),
  \ dotnet#method('get_HighlightTextColor(', ')', 'static'),
  \ dotnet#method('get_HotTrackColor(', ')', 'static'),
  \ dotnet#method('get_InactiveBorderColor(', ')', 'static'),
  \ dotnet#method('get_InactiveCaptionColor(', ')', 'static'),
  \ dotnet#method('get_InactiveCaptionTextColor(', ')', 'static'),
  \ dotnet#method('get_InfoColor(', ')', 'static'),
  \ dotnet#method('get_InfoTextColor(', ')', 'static'),
  \ dotnet#method('get_MenuColor(', ')', 'static'),
  \ dotnet#method('get_MenuBarColor(', ')', 'static'),
  \ dotnet#method('get_MenuHighlightColor(', ')', 'static'),
  \ dotnet#method('get_MenuTextColor(', ')', 'static'),
  \ dotnet#method('get_ScrollBarColor(', ')', 'static'),
  \ dotnet#method('get_WindowColor(', ')', 'static'),
  \ dotnet#method('get_WindowFrameColor(', ')', 'static'),
  \ dotnet#method('get_WindowTextColor(', ')', 'static'),
  \ dotnet#method('get_ActiveBorderColorKey(', ')', 'static'),
  \ dotnet#method('get_ActiveCaptionColorKey(', ')', 'static'),
  \ dotnet#method('get_ActiveCaptionTextColorKey(', ')', 'static'),
  \ dotnet#method('get_AppWorkspaceColorKey(', ')', 'static'),
  \ dotnet#method('get_ControlColorKey(', ')', 'static'),
  \ dotnet#method('get_ControlDarkColorKey(', ')', 'static'),
  \ dotnet#method('get_ControlDarkDarkColorKey(', ')', 'static'),
  \ dotnet#method('get_ControlLightColorKey(', ')', 'static'),
  \ dotnet#method('get_ControlLightLightColorKey(', ')', 'static'),
  \ dotnet#method('get_ControlTextColorKey(', ')', 'static'),
  \ dotnet#method('get_DesktopColorKey(', ')', 'static'),
  \ dotnet#method('get_GradientActiveCaptionColorKey(', ')', 'static'),
  \ dotnet#method('get_GradientInactiveCaptionColorKey(', ')', 'static'),
  \ dotnet#method('get_GrayTextColorKey(', ')', 'static'),
  \ dotnet#method('get_HighlightColorKey(', ')', 'static'),
  \ dotnet#method('get_HighlightTextColorKey(', ')', 'static'),
  \ dotnet#method('get_HotTrackColorKey(', ')', 'static'),
  \ dotnet#method('get_InactiveBorderColorKey(', ')', 'static'),
  \ dotnet#method('get_InactiveCaptionColorKey(', ')', 'static'),
  \ dotnet#method('get_InactiveCaptionTextColorKey(', ')', 'static'),
  \ dotnet#method('get_InfoColorKey(', ')', 'static'),
  \ dotnet#method('get_InfoTextColorKey(', ')', 'static'),
  \ dotnet#method('get_MenuColorKey(', ')', 'static'),
  \ dotnet#method('get_MenuBarColorKey(', ')', 'static'),
  \ dotnet#method('get_MenuHighlightColorKey(', ')', 'static'),
  \ dotnet#method('get_MenuTextColorKey(', ')', 'static'),
  \ dotnet#method('get_ScrollBarColorKey(', ')', 'static'),
  \ dotnet#method('get_WindowColorKey(', ')', 'static'),
  \ dotnet#method('get_WindowFrameColorKey(', ')', 'static'),
  \ dotnet#method('get_WindowTextColorKey(', ')', 'static'),
  \ dotnet#method('get_ActiveBorderBrush(', ')', 'static'),
  \ dotnet#method('get_ActiveCaptionBrush(', ')', 'static'),
  \ dotnet#method('get_ActiveCaptionTextBrush(', ')', 'static'),
  \ dotnet#method('get_AppWorkspaceBrush(', ')', 'static'),
  \ dotnet#method('get_ControlBrush(', ')', 'static'),
  \ dotnet#method('get_ControlDarkBrush(', ')', 'static'),
  \ dotnet#method('get_ControlDarkDarkBrush(', ')', 'static'),
  \ dotnet#method('get_ControlLightBrush(', ')', 'static'),
  \ dotnet#method('get_ControlLightLightBrush(', ')', 'static'),
  \ dotnet#method('get_ControlTextBrush(', ')', 'static'),
  \ dotnet#method('get_DesktopBrush(', ')', 'static'),
  \ dotnet#method('get_GradientActiveCaptionBrush(', ')', 'static'),
  \ dotnet#method('get_GradientInactiveCaptionBrush(', ')', 'static'),
  \ dotnet#method('get_GrayTextBrush(', ')', 'static'),
  \ dotnet#method('get_HighlightBrush(', ')', 'static'),
  \ dotnet#method('get_HighlightTextBrush(', ')', 'static'),
  \ dotnet#method('get_HotTrackBrush(', ')', 'static'),
  \ dotnet#method('get_InactiveBorderBrush(', ')', 'static'),
  \ dotnet#method('get_InactiveCaptionBrush(', ')', 'static'),
  \ dotnet#method('get_InactiveCaptionTextBrush(', ')', 'static'),
  \ dotnet#method('get_InfoBrush(', ')', 'static'),
  \ dotnet#method('get_InfoTextBrush(', ')', 'static'),
  \ dotnet#method('get_MenuBrush(', ')', 'static'),
  \ dotnet#method('get_MenuBarBrush(', ')', 'static'),
  \ dotnet#method('get_MenuHighlightBrush(', ')', 'static'),
  \ dotnet#method('get_MenuTextBrush(', ')', 'static'),
  \ dotnet#method('get_ScrollBarBrush(', ')', 'static'),
  \ dotnet#method('get_WindowBrush(', ')', 'static'),
  \ dotnet#method('get_WindowFrameBrush(', ')', 'static'),
  \ dotnet#method('get_WindowTextBrush(', ')', 'static'),
  \ dotnet#method('get_ActiveBorderBrushKey(', ')', 'static'),
  \ dotnet#method('get_ActiveCaptionBrushKey(', ')', 'static'),
  \ dotnet#method('get_ActiveCaptionTextBrushKey(', ')', 'static'),
  \ dotnet#method('get_AppWorkspaceBrushKey(', ')', 'static'),
  \ dotnet#method('get_ControlBrushKey(', ')', 'static'),
  \ dotnet#method('get_ControlDarkBrushKey(', ')', 'static'),
  \ dotnet#method('get_ControlDarkDarkBrushKey(', ')', 'static'),
  \ dotnet#method('get_ControlLightBrushKey(', ')', 'static'),
  \ dotnet#method('get_ControlLightLightBrushKey(', ')', 'static'),
  \ dotnet#method('get_ControlTextBrushKey(', ')', 'static'),
  \ dotnet#method('get_DesktopBrushKey(', ')', 'static'),
  \ dotnet#method('get_GradientActiveCaptionBrushKey(', ')', 'static'),
  \ dotnet#method('get_GradientInactiveCaptionBrushKey(', ')', 'static'),
  \ dotnet#method('get_GrayTextBrushKey(', ')', 'static'),
  \ dotnet#method('get_HighlightBrushKey(', ')', 'static'),
  \ dotnet#method('get_HighlightTextBrushKey(', ')', 'static'),
  \ dotnet#method('get_HotTrackBrushKey(', ')', 'static'),
  \ dotnet#method('get_InactiveBorderBrushKey(', ')', 'static'),
  \ dotnet#method('get_InactiveCaptionBrushKey(', ')', 'static'),
  \ dotnet#method('get_InactiveCaptionTextBrushKey(', ')', 'static'),
  \ dotnet#method('get_InfoBrushKey(', ')', 'static'),
  \ dotnet#method('get_InfoTextBrushKey(', ')', 'static'),
  \ dotnet#method('get_MenuBrushKey(', ')', 'static'),
  \ dotnet#method('get_MenuBarBrushKey(', ')', 'static'),
  \ dotnet#method('get_MenuHighlightBrushKey(', ')', 'static'),
  \ dotnet#method('get_MenuTextBrushKey(', ')', 'static'),
  \ dotnet#method('get_ScrollBarBrushKey(', ')', 'static'),
  \ dotnet#method('get_WindowBrushKey(', ')', 'static'),
  \ dotnet#method('get_WindowFrameBrushKey(', ')', 'static'),
  \ dotnet#method('get_WindowTextBrushKey(', ')', 'static'),
  \ dotnet#method('InvalidateCache(', ')', 'static bool'),
  \ dotnet#method('SystemColors(', ')', 'static void .'),
  \ dotnet#prop('ActiveBorderColor', 'Color'),
  \ dotnet#prop('ActiveCaptionColor', 'Color'),
  \ dotnet#prop('ActiveCaptionTextColor', 'Color'),
  \ dotnet#prop('AppWorkspaceColor', 'Color'),
  \ dotnet#prop('ControlColor', 'Color'),
  \ dotnet#prop('ControlDarkColor', 'Color'),
  \ dotnet#prop('ControlDarkDarkColor', 'Color'),
  \ dotnet#prop('ControlLightColor', 'Color'),
  \ dotnet#prop('ControlLightLightColor', 'Color'),
  \ dotnet#prop('ControlTextColor', 'Color'),
  \ dotnet#prop('DesktopColor', 'Color'),
  \ dotnet#prop('GradientActiveCaptionColor', 'Color'),
  \ dotnet#prop('GradientInactiveCaptionColor', 'Color'),
  \ dotnet#prop('GrayTextColor', 'Color'),
  \ dotnet#prop('HighlightColor', 'Color'),
  \ dotnet#prop('HighlightTextColor', 'Color'),
  \ dotnet#prop('HotTrackColor', 'Color'),
  \ dotnet#prop('InactiveBorderColor', 'Color'),
  \ dotnet#prop('InactiveCaptionColor', 'Color'),
  \ dotnet#prop('InactiveCaptionTextColor', 'Color'),
  \ dotnet#prop('InfoColor', 'Color'),
  \ dotnet#prop('InfoTextColor', 'Color'),
  \ dotnet#prop('MenuColor', 'Color'),
  \ dotnet#prop('MenuBarColor', 'Color'),
  \ dotnet#prop('MenuHighlightColor', 'Color'),
  \ dotnet#prop('MenuTextColor', 'Color'),
  \ dotnet#prop('ScrollBarColor', 'Color'),
  \ dotnet#prop('WindowColor', 'Color'),
  \ dotnet#prop('WindowFrameColor', 'Color'),
  \ dotnet#prop('WindowTextColor', 'Color'),
  \ dotnet#prop('ActiveBorderColorKey', 'ResourceKey'),
  \ dotnet#prop('ActiveCaptionColorKey', 'ResourceKey'),
  \ dotnet#prop('ActiveCaptionTextColorKey', 'ResourceKey'),
  \ dotnet#prop('AppWorkspaceColorKey', 'ResourceKey'),
  \ dotnet#prop('ControlColorKey', 'ResourceKey'),
  \ dotnet#prop('ControlDarkColorKey', 'ResourceKey'),
  \ dotnet#prop('ControlDarkDarkColorKey', 'ResourceKey'),
  \ dotnet#prop('ControlLightColorKey', 'ResourceKey'),
  \ dotnet#prop('ControlLightLightColorKey', 'ResourceKey'),
  \ dotnet#prop('ControlTextColorKey', 'ResourceKey'),
  \ dotnet#prop('DesktopColorKey', 'ResourceKey'),
  \ dotnet#prop('GradientActiveCaptionColorKey', 'ResourceKey'),
  \ dotnet#prop('GradientInactiveCaptionColorKey', 'ResourceKey'),
  \ dotnet#prop('GrayTextColorKey', 'ResourceKey'),
  \ dotnet#prop('HighlightColorKey', 'ResourceKey'),
  \ dotnet#prop('HighlightTextColorKey', 'ResourceKey'),
  \ dotnet#prop('HotTrackColorKey', 'ResourceKey'),
  \ dotnet#prop('InactiveBorderColorKey', 'ResourceKey'),
  \ dotnet#prop('InactiveCaptionColorKey', 'ResourceKey'),
  \ dotnet#prop('InactiveCaptionTextColorKey', 'ResourceKey'),
  \ dotnet#prop('InfoColorKey', 'ResourceKey'),
  \ dotnet#prop('InfoTextColorKey', 'ResourceKey'),
  \ dotnet#prop('MenuColorKey', 'ResourceKey'),
  \ dotnet#prop('MenuBarColorKey', 'ResourceKey'),
  \ dotnet#prop('MenuHighlightColorKey', 'ResourceKey'),
  \ dotnet#prop('MenuTextColorKey', 'ResourceKey'),
  \ dotnet#prop('ScrollBarColorKey', 'ResourceKey'),
  \ dotnet#prop('WindowColorKey', 'ResourceKey'),
  \ dotnet#prop('WindowFrameColorKey', 'ResourceKey'),
  \ dotnet#prop('WindowTextColorKey', 'ResourceKey'),
  \ dotnet#prop('ActiveBorderBrush', 'SolidColorBrush'),
  \ dotnet#prop('ActiveCaptionBrush', 'SolidColorBrush'),
  \ dotnet#prop('ActiveCaptionTextBrush', 'SolidColorBrush'),
  \ dotnet#prop('AppWorkspaceBrush', 'SolidColorBrush'),
  \ dotnet#prop('ControlBrush', 'SolidColorBrush'),
  \ dotnet#prop('ControlDarkBrush', 'SolidColorBrush'),
  \ dotnet#prop('ControlDarkDarkBrush', 'SolidColorBrush'),
  \ dotnet#prop('ControlLightBrush', 'SolidColorBrush'),
  \ dotnet#prop('ControlLightLightBrush', 'SolidColorBrush'),
  \ dotnet#prop('ControlTextBrush', 'SolidColorBrush'),
  \ dotnet#prop('DesktopBrush', 'SolidColorBrush'),
  \ dotnet#prop('GradientActiveCaptionBrush', 'SolidColorBrush'),
  \ dotnet#prop('GradientInactiveCaptionBrush', 'SolidColorBrush'),
  \ dotnet#prop('GrayTextBrush', 'SolidColorBrush'),
  \ dotnet#prop('HighlightBrush', 'SolidColorBrush'),
  \ dotnet#prop('HighlightTextBrush', 'SolidColorBrush'),
  \ dotnet#prop('HotTrackBrush', 'SolidColorBrush'),
  \ dotnet#prop('InactiveBorderBrush', 'SolidColorBrush'),
  \ dotnet#prop('InactiveCaptionBrush', 'SolidColorBrush'),
  \ dotnet#prop('InactiveCaptionTextBrush', 'SolidColorBrush'),
  \ dotnet#prop('InfoBrush', 'SolidColorBrush'),
  \ dotnet#prop('InfoTextBrush', 'SolidColorBrush'),
  \ dotnet#prop('MenuBrush', 'SolidColorBrush'),
  \ dotnet#prop('MenuBarBrush', 'SolidColorBrush'),
  \ dotnet#prop('MenuHighlightBrush', 'SolidColorBrush'),
  \ dotnet#prop('MenuTextBrush', 'SolidColorBrush'),
  \ dotnet#prop('ScrollBarBrush', 'SolidColorBrush'),
  \ dotnet#prop('WindowBrush', 'SolidColorBrush'),
  \ dotnet#prop('WindowFrameBrush', 'SolidColorBrush'),
  \ dotnet#prop('WindowTextBrush', 'SolidColorBrush'),
  \ dotnet#prop('ActiveBorderBrushKey', 'ResourceKey'),
  \ dotnet#prop('ActiveCaptionBrushKey', 'ResourceKey'),
  \ dotnet#prop('ActiveCaptionTextBrushKey', 'ResourceKey'),
  \ dotnet#prop('AppWorkspaceBrushKey', 'ResourceKey'),
  \ dotnet#prop('ControlBrushKey', 'ResourceKey'),
  \ dotnet#prop('ControlDarkBrushKey', 'ResourceKey'),
  \ dotnet#prop('ControlDarkDarkBrushKey', 'ResourceKey'),
  \ dotnet#prop('ControlLightBrushKey', 'ResourceKey'),
  \ dotnet#prop('ControlLightLightBrushKey', 'ResourceKey'),
  \ dotnet#prop('ControlTextBrushKey', 'ResourceKey'),
  \ dotnet#prop('DesktopBrushKey', 'ResourceKey'),
  \ dotnet#prop('GradientActiveCaptionBrushKey', 'ResourceKey'),
  \ dotnet#prop('GradientInactiveCaptionBrushKey', 'ResourceKey'),
  \ dotnet#prop('GrayTextBrushKey', 'ResourceKey'),
  \ dotnet#prop('HighlightBrushKey', 'ResourceKey'),
  \ dotnet#prop('HighlightTextBrushKey', 'ResourceKey'),
  \ dotnet#prop('HotTrackBrushKey', 'ResourceKey'),
  \ dotnet#prop('InactiveBorderBrushKey', 'ResourceKey'),
  \ dotnet#prop('InactiveCaptionBrushKey', 'ResourceKey'),
  \ dotnet#prop('InactiveCaptionTextBrushKey', 'ResourceKey'),
  \ dotnet#prop('InfoBrushKey', 'ResourceKey'),
  \ dotnet#prop('InfoTextBrushKey', 'ResourceKey'),
  \ dotnet#prop('MenuBrushKey', 'ResourceKey'),
  \ dotnet#prop('MenuBarBrushKey', 'ResourceKey'),
  \ dotnet#prop('MenuHighlightBrushKey', 'ResourceKey'),
  \ dotnet#prop('MenuTextBrushKey', 'ResourceKey'),
  \ dotnet#prop('ScrollBarBrushKey', 'ResourceKey'),
  \ dotnet#prop('WindowBrushKey', 'ResourceKey'),
  \ dotnet#prop('WindowFrameBrushKey', 'ResourceKey'),
  \ dotnet#prop('WindowTextBrushKey', 'ResourceKey'),
  \ ])

call dotnet#class('SystemFonts', 'Object', [ 
  \ dotnet#method('get_IconFontSize(', ')', 'static float64'),
  \ dotnet#method('get_IconFontFamily(', ')', 'static'),
  \ dotnet#method('get_IconFontStyle(', ')', 'static'),
  \ dotnet#method('get_IconFontWeight(', ')', 'static'),
  \ dotnet#method('get_IconFontTextDecorations(', ')', 'static'),
  \ dotnet#method('get_CaptionFontSize(', ')', 'static float64'),
  \ dotnet#method('get_CaptionFontFamily(', ')', 'static'),
  \ dotnet#method('get_CaptionFontStyle(', ')', 'static'),
  \ dotnet#method('get_CaptionFontWeight(', ')', 'static'),
  \ dotnet#method('get_CaptionFontTextDecorations(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionFontSize(', ')', 'static float64'),
  \ dotnet#method('get_SmallCaptionFontFamily(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionFontStyle(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionFontWeight(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionFontTextDecorations(', ')', 'static'),
  \ dotnet#method('get_MenuFontSize(', ')', 'static float64'),
  \ dotnet#method('get_MenuFontFamily(', ')', 'static'),
  \ dotnet#method('get_MenuFontStyle(', ')', 'static'),
  \ dotnet#method('get_MenuFontWeight(', ')', 'static'),
  \ dotnet#method('get_MenuFontTextDecorations(', ')', 'static'),
  \ dotnet#method('get_StatusFontSize(', ')', 'static float64'),
  \ dotnet#method('get_StatusFontFamily(', ')', 'static'),
  \ dotnet#method('get_StatusFontStyle(', ')', 'static'),
  \ dotnet#method('get_StatusFontWeight(', ')', 'static'),
  \ dotnet#method('get_StatusFontTextDecorations(', ')', 'static'),
  \ dotnet#method('get_MessageFontSize(', ')', 'static float64'),
  \ dotnet#method('get_MessageFontFamily(', ')', 'static'),
  \ dotnet#method('get_MessageFontStyle(', ')', 'static'),
  \ dotnet#method('get_MessageFontWeight(', ')', 'static'),
  \ dotnet#method('get_MessageFontTextDecorations(', ')', 'static'),
  \ dotnet#method('get_IconFontSizeKey(', ')', 'static'),
  \ dotnet#method('get_IconFontFamilyKey(', ')', 'static'),
  \ dotnet#method('get_IconFontStyleKey(', ')', 'static'),
  \ dotnet#method('get_IconFontWeightKey(', ')', 'static'),
  \ dotnet#method('get_IconFontTextDecorationsKey(', ')', 'static'),
  \ dotnet#method('get_CaptionFontSizeKey(', ')', 'static'),
  \ dotnet#method('get_CaptionFontFamilyKey(', ')', 'static'),
  \ dotnet#method('get_CaptionFontStyleKey(', ')', 'static'),
  \ dotnet#method('get_CaptionFontWeightKey(', ')', 'static'),
  \ dotnet#method('get_CaptionFontTextDecorationsKey(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionFontSizeKey(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionFontFamilyKey(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionFontStyleKey(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionFontWeightKey(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionFontTextDecorationsKey(', ')', 'static'),
  \ dotnet#method('get_MenuFontSizeKey(', ')', 'static'),
  \ dotnet#method('get_MenuFontFamilyKey(', ')', 'static'),
  \ dotnet#method('get_MenuFontStyleKey(', ')', 'static'),
  \ dotnet#method('get_MenuFontWeightKey(', ')', 'static'),
  \ dotnet#method('get_MenuFontTextDecorationsKey(', ')', 'static'),
  \ dotnet#method('get_StatusFontSizeKey(', ')', 'static'),
  \ dotnet#method('get_StatusFontFamilyKey(', ')', 'static'),
  \ dotnet#method('get_StatusFontStyleKey(', ')', 'static'),
  \ dotnet#method('get_StatusFontWeightKey(', ')', 'static'),
  \ dotnet#method('get_StatusFontTextDecorationsKey(', ')', 'static'),
  \ dotnet#method('get_MessageFontSizeKey(', ')', 'static'),
  \ dotnet#method('get_MessageFontFamilyKey(', ')', 'static'),
  \ dotnet#method('get_MessageFontStyleKey(', ')', 'static'),
  \ dotnet#method('get_MessageFontWeightKey(', ')', 'static'),
  \ dotnet#method('get_MessageFontTextDecorationsKey(', ')', 'static'),
  \ dotnet#method('InvalidateIconMetrics(', ')', 'static void'),
  \ dotnet#method('InvalidateNonClientMetrics(', ')', 'static void'),
  \ dotnet#prop('IconFontSize', 'float64'),
  \ dotnet#prop('IconFontFamily', 'FontFamily'),
  \ dotnet#prop('IconFontStyle', 'FontStyle'),
  \ dotnet#prop('IconFontWeight', 'FontWeight'),
  \ dotnet#prop('IconFontTextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('CaptionFontSize', 'float64'),
  \ dotnet#prop('CaptionFontFamily', 'FontFamily'),
  \ dotnet#prop('CaptionFontStyle', 'FontStyle'),
  \ dotnet#prop('CaptionFontWeight', 'FontWeight'),
  \ dotnet#prop('CaptionFontTextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('SmallCaptionFontSize', 'float64'),
  \ dotnet#prop('SmallCaptionFontFamily', 'FontFamily'),
  \ dotnet#prop('SmallCaptionFontStyle', 'FontStyle'),
  \ dotnet#prop('SmallCaptionFontWeight', 'FontWeight'),
  \ dotnet#prop('SmallCaptionFontTextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('MenuFontSize', 'float64'),
  \ dotnet#prop('MenuFontFamily', 'FontFamily'),
  \ dotnet#prop('MenuFontStyle', 'FontStyle'),
  \ dotnet#prop('MenuFontWeight', 'FontWeight'),
  \ dotnet#prop('MenuFontTextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('StatusFontSize', 'float64'),
  \ dotnet#prop('StatusFontFamily', 'FontFamily'),
  \ dotnet#prop('StatusFontStyle', 'FontStyle'),
  \ dotnet#prop('StatusFontWeight', 'FontWeight'),
  \ dotnet#prop('StatusFontTextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('MessageFontSize', 'float64'),
  \ dotnet#prop('MessageFontFamily', 'FontFamily'),
  \ dotnet#prop('MessageFontStyle', 'FontStyle'),
  \ dotnet#prop('MessageFontWeight', 'FontWeight'),
  \ dotnet#prop('MessageFontTextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('IconFontSizeKey', 'ResourceKey'),
  \ dotnet#prop('IconFontFamilyKey', 'ResourceKey'),
  \ dotnet#prop('IconFontStyleKey', 'ResourceKey'),
  \ dotnet#prop('IconFontWeightKey', 'ResourceKey'),
  \ dotnet#prop('IconFontTextDecorationsKey', 'ResourceKey'),
  \ dotnet#prop('CaptionFontSizeKey', 'ResourceKey'),
  \ dotnet#prop('CaptionFontFamilyKey', 'ResourceKey'),
  \ dotnet#prop('CaptionFontStyleKey', 'ResourceKey'),
  \ dotnet#prop('CaptionFontWeightKey', 'ResourceKey'),
  \ dotnet#prop('CaptionFontTextDecorationsKey', 'ResourceKey'),
  \ dotnet#prop('SmallCaptionFontSizeKey', 'ResourceKey'),
  \ dotnet#prop('SmallCaptionFontFamilyKey', 'ResourceKey'),
  \ dotnet#prop('SmallCaptionFontStyleKey', 'ResourceKey'),
  \ dotnet#prop('SmallCaptionFontWeightKey', 'ResourceKey'),
  \ dotnet#prop('SmallCaptionFontTextDecorationsKey', 'ResourceKey'),
  \ dotnet#prop('MenuFontSizeKey', 'ResourceKey'),
  \ dotnet#prop('MenuFontFamilyKey', 'ResourceKey'),
  \ dotnet#prop('MenuFontStyleKey', 'ResourceKey'),
  \ dotnet#prop('MenuFontWeightKey', 'ResourceKey'),
  \ dotnet#prop('MenuFontTextDecorationsKey', 'ResourceKey'),
  \ dotnet#prop('StatusFontSizeKey', 'ResourceKey'),
  \ dotnet#prop('StatusFontFamilyKey', 'ResourceKey'),
  \ dotnet#prop('StatusFontStyleKey', 'ResourceKey'),
  \ dotnet#prop('StatusFontWeightKey', 'ResourceKey'),
  \ dotnet#prop('StatusFontTextDecorationsKey', 'ResourceKey'),
  \ dotnet#prop('MessageFontSizeKey', 'ResourceKey'),
  \ dotnet#prop('MessageFontFamilyKey', 'ResourceKey'),
  \ dotnet#prop('MessageFontStyleKey', 'ResourceKey'),
  \ dotnet#prop('MessageFontWeightKey', 'ResourceKey'),
  \ dotnet#prop('MessageFontTextDecorationsKey', 'ResourceKey'),
  \ ])

call dotnet#class('SystemParameters', 'Object', [ 
  \ dotnet#method('get_FocusBorderWidth(', ')', 'static float64'),
  \ dotnet#method('get_FocusBorderHeight(', ')', 'static float64'),
  \ dotnet#method('get_HighContrast(', ')', 'static bool'),
  \ dotnet#method('get_MouseVanish(', ')', 'static bool'),
  \ dotnet#method('get_FocusBorderWidthKey(', ')', 'static'),
  \ dotnet#method('get_FocusBorderHeightKey(', ')', 'static'),
  \ dotnet#method('get_HighContrastKey(', ')', 'static'),
  \ dotnet#method('get_DropShadow(', ')', 'static bool'),
  \ dotnet#method('get_FlatMenu(', ')', 'static bool'),
  \ dotnet#method('get_WorkAreaInternal(', ')', 'static'),
  \ dotnet#method('get_WorkArea(', ')', 'static'),
  \ dotnet#method('get_DropShadowKey(', ')', 'static'),
  \ dotnet#method('get_FlatMenuKey(', ')', 'static'),
  \ dotnet#method('get_WorkAreaKey(', ')', 'static'),
  \ dotnet#method('get_IconMetrics(', ')', 'static'),
  \ dotnet#method('get_IconHorizontalSpacing(', ')', 'static float64'),
  \ dotnet#method('get_IconVerticalSpacing(', ')', 'static float64'),
  \ dotnet#method('get_IconTitleWrap(', ')', 'static bool'),
  \ dotnet#method('get_IconHorizontalSpacingKey(', ')', 'static'),
  \ dotnet#method('get_IconVerticalSpacingKey(', ')', 'static'),
  \ dotnet#method('get_IconTitleWrapKey(', ')', 'static'),
  \ dotnet#method('get_KeyboardCues(', ')', 'static bool'),
  \ dotnet#method('get_KeyboardDelay(', ')', 'static int32'),
  \ dotnet#method('get_KeyboardPreference(', ')', 'static bool'),
  \ dotnet#method('get_KeyboardSpeed(', ')', 'static int32'),
  \ dotnet#method('get_SnapToDefaultButton(', ')', 'static bool'),
  \ dotnet#method('get_WheelScrollLines(', ')', 'static int32'),
  \ dotnet#method('get_MouseHoverTime(', ')', 'static'),
  \ dotnet#method('get_MouseHoverTimeMilliseconds(', ')', 'static int32'),
  \ dotnet#method('get_MouseHoverHeight(', ')', 'static float64'),
  \ dotnet#method('get_MouseHoverWidth(', ')', 'static float64'),
  \ dotnet#method('get_KeyboardCuesKey(', ')', 'static'),
  \ dotnet#method('get_KeyboardDelayKey(', ')', 'static'),
  \ dotnet#method('get_KeyboardPreferenceKey(', ')', 'static'),
  \ dotnet#method('get_KeyboardSpeedKey(', ')', 'static'),
  \ dotnet#method('get_SnapToDefaultButtonKey(', ')', 'static'),
  \ dotnet#method('get_WheelScrollLinesKey(', ')', 'static'),
  \ dotnet#method('get_MouseHoverTimeKey(', ')', 'static'),
  \ dotnet#method('get_MouseHoverHeightKey(', ')', 'static'),
  \ dotnet#method('get_MouseHoverWidthKey(', ')', 'static'),
  \ dotnet#method('get_MenuDropAlignment(', ')', 'static bool'),
  \ dotnet#method('get_MenuFade(', ')', 'static bool'),
  \ dotnet#method('get_MenuShowDelay(', ')', 'static int32'),
  \ dotnet#method('get_MenuDropAlignmentKey(', ')', 'static'),
  \ dotnet#method('get_MenuFadeKey(', ')', 'static'),
  \ dotnet#method('get_MenuShowDelayKey(', ')', 'static'),
  \ dotnet#method('get_ComboBoxPopupAnimation(', ')', 'static'),
  \ dotnet#method('get_ComboBoxAnimation(', ')', 'static bool'),
  \ dotnet#method('get_ClientAreaAnimation(', ')', 'static bool'),
  \ dotnet#method('get_CursorShadow(', ')', 'static bool'),
  \ dotnet#method('get_GradientCaptions(', ')', 'static bool'),
  \ dotnet#method('get_HotTracking(', ')', 'static bool'),
  \ dotnet#method('get_ListBoxSmoothScrolling(', ')', 'static bool'),
  \ dotnet#method('get_MenuPopupAnimation(', ')', 'static'),
  \ dotnet#method('get_MenuAnimation(', ')', 'static bool'),
  \ dotnet#method('get_SelectionFade(', ')', 'static bool'),
  \ dotnet#method('get_StylusHotTracking(', ')', 'static bool'),
  \ dotnet#method('get_ToolTipPopupAnimation(', ')', 'static'),
  \ dotnet#method('get_ToolTipAnimation(', ')', 'static bool'),
  \ dotnet#method('get_ToolTipFade(', ')', 'static bool'),
  \ dotnet#method('get_UIEffects(', ')', 'static bool'),
  \ dotnet#method('get_ComboBoxAnimationKey(', ')', 'static'),
  \ dotnet#method('get_ClientAreaAnimationKey(', ')', 'static'),
  \ dotnet#method('get_CursorShadowKey(', ')', 'static'),
  \ dotnet#method('get_GradientCaptionsKey(', ')', 'static'),
  \ dotnet#method('get_HotTrackingKey(', ')', 'static'),
  \ dotnet#method('get_ListBoxSmoothScrollingKey(', ')', 'static'),
  \ dotnet#method('get_MenuAnimationKey(', ')', 'static'),
  \ dotnet#method('get_SelectionFadeKey(', ')', 'static'),
  \ dotnet#method('get_StylusHotTrackingKey(', ')', 'static'),
  \ dotnet#method('get_ToolTipAnimationKey(', ')', 'static'),
  \ dotnet#method('get_ToolTipFadeKey(', ')', 'static'),
  \ dotnet#method('get_UIEffectsKey(', ')', 'static'),
  \ dotnet#method('get_ComboBoxPopupAnimationKey(', ')', 'static'),
  \ dotnet#method('get_MenuPopupAnimationKey(', ')', 'static'),
  \ dotnet#method('get_ToolTipPopupAnimationKey(', ')', 'static'),
  \ dotnet#method('get_MinimizeAnimation(', ')', 'static bool'),
  \ dotnet#method('get_Border(', ')', 'static int32'),
  \ dotnet#method('get_CaretWidth(', ')', 'static float64'),
  \ dotnet#method('get_DragFullWindows(', ')', 'static bool'),
  \ dotnet#method('get_ForegroundFlashCount(', ')', 'static int32'),
  \ dotnet#method('get_NonClientMetrics(', ')', 'static'),
  \ dotnet#method('get_BorderWidth(', ')', 'static float64'),
  \ dotnet#method('get_ScrollWidth(', ')', 'static float64'),
  \ dotnet#method('get_ScrollHeight(', ')', 'static float64'),
  \ dotnet#method('get_CaptionWidth(', ')', 'static float64'),
  \ dotnet#method('get_CaptionHeight(', ')', 'static float64'),
  \ dotnet#method('get_SmallCaptionWidth(', ')', 'static float64'),
  \ dotnet#method('get_SmallCaptionHeight(', ')', 'static float64'),
  \ dotnet#method('get_MenuWidth(', ')', 'static float64'),
  \ dotnet#method('get_MenuHeight(', ')', 'static float64'),
  \ dotnet#method('get_MinimizeAnimationKey(', ')', 'static'),
  \ dotnet#method('get_BorderKey(', ')', 'static'),
  \ dotnet#method('get_CaretWidthKey(', ')', 'static'),
  \ dotnet#method('get_ForegroundFlashCountKey(', ')', 'static'),
  \ dotnet#method('get_DragFullWindowsKey(', ')', 'static'),
  \ dotnet#method('get_BorderWidthKey(', ')', 'static'),
  \ dotnet#method('get_ScrollWidthKey(', ')', 'static'),
  \ dotnet#method('get_ScrollHeightKey(', ')', 'static'),
  \ dotnet#method('get_CaptionWidthKey(', ')', 'static'),
  \ dotnet#method('get_CaptionHeightKey(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionWidthKey(', ')', 'static'),
  \ dotnet#method('get_MenuWidthKey(', ')', 'static'),
  \ dotnet#method('get_MenuHeightKey(', ')', 'static'),
  \ dotnet#method('get_ThinHorizontalBorderHeight(', ')', 'static float64'),
  \ dotnet#method('get_ThinVerticalBorderWidth(', ')', 'static float64'),
  \ dotnet#method('get_CursorWidth(', ')', 'static float64'),
  \ dotnet#method('get_CursorHeight(', ')', 'static float64'),
  \ dotnet#method('get_ThickHorizontalBorderHeight(', ')', 'static float64'),
  \ dotnet#method('get_ThickVerticalBorderWidth(', ')', 'static float64'),
  \ dotnet#method('get_MinimumHorizontalDragDistance(', ')', 'static float64'),
  \ dotnet#method('get_MinimumVerticalDragDistance(', ')', 'static float64'),
  \ dotnet#method('get_FixedFrameHorizontalBorderHeight(', ')', 'static float64'),
  \ dotnet#method('get_FixedFrameVerticalBorderWidth(', ')', 'static float64'),
  \ dotnet#method('get_FocusHorizontalBorderHeight(', ')', 'static float64'),
  \ dotnet#method('get_FocusVerticalBorderWidth(', ')', 'static float64'),
  \ dotnet#method('get_FullPrimaryScreenWidth(', ')', 'static float64'),
  \ dotnet#method('get_FullPrimaryScreenHeight(', ')', 'static float64'),
  \ dotnet#method('get_HorizontalScrollBarButtonWidth(', ')', 'static float64'),
  \ dotnet#method('get_HorizontalScrollBarHeight(', ')', 'static float64'),
  \ dotnet#method('get_HorizontalScrollBarThumbWidth(', ')', 'static float64'),
  \ dotnet#method('get_IconWidth(', ')', 'static float64'),
  \ dotnet#method('get_IconHeight(', ')', 'static float64'),
  \ dotnet#method('get_IconGridWidth(', ')', 'static float64'),
  \ dotnet#method('get_IconGridHeight(', ')', 'static float64'),
  \ dotnet#method('get_MaximizedPrimaryScreenWidth(', ')', 'static float64'),
  \ dotnet#method('get_MaximizedPrimaryScreenHeight(', ')', 'static float64'),
  \ dotnet#method('get_MaximumWindowTrackWidth(', ')', 'static float64'),
  \ dotnet#method('get_MaximumWindowTrackHeight(', ')', 'static float64'),
  \ dotnet#method('get_MenuCheckmarkWidth(', ')', 'static float64'),
  \ dotnet#method('get_MenuCheckmarkHeight(', ')', 'static float64'),
  \ dotnet#method('get_MenuButtonWidth(', ')', 'static float64'),
  \ dotnet#method('get_MenuButtonHeight(', ')', 'static float64'),
  \ dotnet#method('get_MinimumWindowWidth(', ')', 'static float64'),
  \ dotnet#method('get_MinimumWindowHeight(', ')', 'static float64'),
  \ dotnet#method('get_MinimizedWindowWidth(', ')', 'static float64'),
  \ dotnet#method('get_MinimizedWindowHeight(', ')', 'static float64'),
  \ dotnet#method('get_MinimizedGridWidth(', ')', 'static float64'),
  \ dotnet#method('get_MinimizedGridHeight(', ')', 'static float64'),
  \ dotnet#method('get_MinimumWindowTrackWidth(', ')', 'static float64'),
  \ dotnet#method('get_MinimumWindowTrackHeight(', ')', 'static float64'),
  \ dotnet#method('get_PrimaryScreenWidth(', ')', 'static float64'),
  \ dotnet#method('get_PrimaryScreenHeight(', ')', 'static float64'),
  \ dotnet#method('get_WindowCaptionButtonWidth(', ')', 'static float64'),
  \ dotnet#method('get_WindowCaptionButtonHeight(', ')', 'static float64'),
  \ dotnet#method('get_ResizeFrameHorizontalBorderHeight(', ')', 'static float64'),
  \ dotnet#method('get_ResizeFrameVerticalBorderWidth(', ')', 'static float64'),
  \ dotnet#method('get_SmallIconWidth(', ')', 'static float64'),
  \ dotnet#method('get_SmallIconHeight(', ')', 'static float64'),
  \ dotnet#method('get_SmallWindowCaptionButtonWidth(', ')', 'static float64'),
  \ dotnet#method('get_SmallWindowCaptionButtonHeight(', ')', 'static float64'),
  \ dotnet#method('get_VirtualScreenWidth(', ')', 'static float64'),
  \ dotnet#method('get_VirtualScreenHeight(', ')', 'static float64'),
  \ dotnet#method('get_VerticalScrollBarWidth(', ')', 'static float64'),
  \ dotnet#method('get_VerticalScrollBarButtonHeight(', ')', 'static float64'),
  \ dotnet#method('get_WindowCaptionHeight(', ')', 'static float64'),
  \ dotnet#method('get_KanjiWindowHeight(', ')', 'static float64'),
  \ dotnet#method('get_MenuBarHeight(', ')', 'static float64'),
  \ dotnet#method('get_VerticalScrollBarThumbHeight(', ')', 'static float64'),
  \ dotnet#method('get_IsImmEnabled(', ')', 'static bool'),
  \ dotnet#method('get_IsMediaCenter(', ')', 'static bool'),
  \ dotnet#method('get_IsMenuDropRightAligned(', ')', 'static bool'),
  \ dotnet#method('get_IsMiddleEastEnabled(', ')', 'static bool'),
  \ dotnet#method('get_IsMousePresent(', ')', 'static bool'),
  \ dotnet#method('get_IsMouseWheelPresent(', ')', 'static bool'),
  \ dotnet#method('get_IsPenWindows(', ')', 'static bool'),
  \ dotnet#method('get_IsRemotelyControlled(', ')', 'static bool'),
  \ dotnet#method('get_IsRemoteSession(', ')', 'static bool'),
  \ dotnet#method('get_ShowSounds(', ')', 'static bool'),
  \ dotnet#method('get_IsSlowMachine(', ')', 'static bool'),
  \ dotnet#method('get_SwapButtons(', ')', 'static bool'),
  \ dotnet#method('get_IsTabletPC(', ')', 'static bool'),
  \ dotnet#method('get_VirtualScreenLeft(', ')', 'static float64'),
  \ dotnet#method('get_VirtualScreenTop(', ')', 'static float64'),
  \ dotnet#method('get_ThinHorizontalBorderHeightKey(', ')', 'static'),
  \ dotnet#method('get_ThinVerticalBorderWidthKey(', ')', 'static'),
  \ dotnet#method('get_CursorWidthKey(', ')', 'static'),
  \ dotnet#method('get_CursorHeightKey(', ')', 'static'),
  \ dotnet#method('get_ThickHorizontalBorderHeightKey(', ')', 'static'),
  \ dotnet#method('get_ThickVerticalBorderWidthKey(', ')', 'static'),
  \ dotnet#method('get_FixedFrameHorizontalBorderHeightKey(', ')', 'static'),
  \ dotnet#method('get_FixedFrameVerticalBorderWidthKey(', ')', 'static'),
  \ dotnet#method('get_FocusHorizontalBorderHeightKey(', ')', 'static'),
  \ dotnet#method('get_FocusVerticalBorderWidthKey(', ')', 'static'),
  \ dotnet#method('get_FullPrimaryScreenWidthKey(', ')', 'static'),
  \ dotnet#method('get_FullPrimaryScreenHeightKey(', ')', 'static'),
  \ dotnet#method('get_HorizontalScrollBarButtonWidthKey(', ')', 'static'),
  \ dotnet#method('get_HorizontalScrollBarHeightKey(', ')', 'static'),
  \ dotnet#method('get_HorizontalScrollBarThumbWidthKey(', ')', 'static'),
  \ dotnet#method('get_IconWidthKey(', ')', 'static'),
  \ dotnet#method('get_IconHeightKey(', ')', 'static'),
  \ dotnet#method('get_IconGridWidthKey(', ')', 'static'),
  \ dotnet#method('get_IconGridHeightKey(', ')', 'static'),
  \ dotnet#method('get_MaximizedPrimaryScreenWidthKey(', ')', 'static'),
  \ dotnet#method('get_MaximizedPrimaryScreenHeightKey(', ')', 'static'),
  \ dotnet#method('get_MaximumWindowTrackWidthKey(', ')', 'static'),
  \ dotnet#method('get_MaximumWindowTrackHeightKey(', ')', 'static'),
  \ dotnet#method('get_MenuCheckmarkWidthKey(', ')', 'static'),
  \ dotnet#method('get_MenuCheckmarkHeightKey(', ')', 'static'),
  \ dotnet#method('get_MenuButtonWidthKey(', ')', 'static'),
  \ dotnet#method('get_MenuButtonHeightKey(', ')', 'static'),
  \ dotnet#method('get_MinimumWindowWidthKey(', ')', 'static'),
  \ dotnet#method('get_MinimumWindowHeightKey(', ')', 'static'),
  \ dotnet#method('get_MinimizedWindowWidthKey(', ')', 'static'),
  \ dotnet#method('get_MinimizedWindowHeightKey(', ')', 'static'),
  \ dotnet#method('get_MinimizedGridWidthKey(', ')', 'static'),
  \ dotnet#method('get_MinimizedGridHeightKey(', ')', 'static'),
  \ dotnet#method('get_MinimumWindowTrackWidthKey(', ')', 'static'),
  \ dotnet#method('get_MinimumWindowTrackHeightKey(', ')', 'static'),
  \ dotnet#method('get_PrimaryScreenWidthKey(', ')', 'static'),
  \ dotnet#method('get_PrimaryScreenHeightKey(', ')', 'static'),
  \ dotnet#method('get_WindowCaptionButtonWidthKey(', ')', 'static'),
  \ dotnet#method('get_WindowCaptionButtonHeightKey(', ')', 'static'),
  \ dotnet#method('get_ResizeFrameHorizontalBorderHeightKey(', ')', 'static'),
  \ dotnet#method('get_ResizeFrameVerticalBorderWidthKey(', ')', 'static'),
  \ dotnet#method('get_SmallIconWidthKey(', ')', 'static'),
  \ dotnet#method('get_SmallIconHeightKey(', ')', 'static'),
  \ dotnet#method('get_SmallWindowCaptionButtonWidthKey(', ')', 'static'),
  \ dotnet#method('get_SmallWindowCaptionButtonHeightKey(', ')', 'static'),
  \ dotnet#method('get_VirtualScreenWidthKey(', ')', 'static'),
  \ dotnet#method('get_VirtualScreenHeightKey(', ')', 'static'),
  \ dotnet#method('get_VerticalScrollBarWidthKey(', ')', 'static'),
  \ dotnet#method('get_VerticalScrollBarButtonHeightKey(', ')', 'static'),
  \ dotnet#method('get_WindowCaptionHeightKey(', ')', 'static'),
  \ dotnet#method('get_KanjiWindowHeightKey(', ')', 'static'),
  \ dotnet#method('get_MenuBarHeightKey(', ')', 'static'),
  \ dotnet#method('get_SmallCaptionHeightKey(', ')', 'static'),
  \ dotnet#method('get_VerticalScrollBarThumbHeightKey(', ')', 'static'),
  \ dotnet#method('get_IsImmEnabledKey(', ')', 'static'),
  \ dotnet#method('get_IsMediaCenterKey(', ')', 'static'),
  \ dotnet#method('get_IsMenuDropRightAlignedKey(', ')', 'static'),
  \ dotnet#method('get_IsMiddleEastEnabledKey(', ')', 'static'),
  \ dotnet#method('get_IsMousePresentKey(', ')', 'static'),
  \ dotnet#method('get_IsMouseWheelPresentKey(', ')', 'static'),
  \ dotnet#method('get_IsPenWindowsKey(', ')', 'static'),
  \ dotnet#method('get_IsRemotelyControlledKey(', ')', 'static'),
  \ dotnet#method('get_IsRemoteSessionKey(', ')', 'static'),
  \ dotnet#method('get_ShowSoundsKey(', ')', 'static'),
  \ dotnet#method('get_IsSlowMachineKey(', ')', 'static'),
  \ dotnet#method('get_SwapButtonsKey(', ')', 'static'),
  \ dotnet#method('get_IsTabletPCKey(', ')', 'static'),
  \ dotnet#method('get_VirtualScreenLeftKey(', ')', 'static'),
  \ dotnet#method('get_VirtualScreenTopKey(', ')', 'static'),
  \ dotnet#method('get_FocusVisualStyleKey(', ')', 'static'),
  \ dotnet#method('get_NavigationChromeStyleKey(', ')', 'static'),
  \ dotnet#method('get_NavigationChromeDownLevelStyleKey(', ')', 'static'),
  \ dotnet#method('get_PowerLineStatus(', ')', 'static'),
  \ dotnet#method('get_PowerLineStatusKey(', ')', 'static'),
  \ dotnet#method('InvalidateCache(', ')', 'static void'),
  \ dotnet#method('InvalidateDeviceDependentCache(', ')', 'static bool'),
  \ dotnet#method('InvalidateDisplayDependentCache(', ')', 'static bool'),
  \ dotnet#method('InvalidatePowerDependentCache(', ')', 'static bool'),
  \ dotnet#method('InvalidateCache(', 'int32 param)', 'static bool'),
  \ dotnet#method('get_Dpi(', ')', 'static int32'),
  \ dotnet#method('get_DpiX(', ')', 'static int32'),
  \ dotnet#method('ConvertPixel(', 'int32 pixel)', 'static float64'),
  \ dotnet#method('SystemParameters(', ')', 'static void .'),
  \ dotnet#prop('FocusBorderWidth', 'float64'),
  \ dotnet#prop('FocusBorderHeight', 'float64'),
  \ dotnet#prop('HighContrast', 'bool'),
  \ dotnet#prop('MouseVanish', 'bool'),
  \ dotnet#prop('FocusBorderWidthKey', 'ResourceKey'),
  \ dotnet#prop('FocusBorderHeightKey', 'ResourceKey'),
  \ dotnet#prop('HighContrastKey', 'ResourceKey'),
  \ dotnet#prop('DropShadow', 'bool'),
  \ dotnet#prop('FlatMenu', 'bool'),
  \ dotnet#prop('WorkAreaInternal', 'NativeMethods/RECT'),
  \ dotnet#prop('WorkArea', 'Rect'),
  \ dotnet#prop('DropShadowKey', 'ResourceKey'),
  \ dotnet#prop('FlatMenuKey', 'ResourceKey'),
  \ dotnet#prop('WorkAreaKey', 'ResourceKey'),
  \ dotnet#prop('IconMetrics', 'NativeMethods/ICONMETRICS'),
  \ dotnet#prop('IconHorizontalSpacing', 'float64'),
  \ dotnet#prop('IconVerticalSpacing', 'float64'),
  \ dotnet#prop('IconTitleWrap', 'bool'),
  \ dotnet#prop('IconHorizontalSpacingKey', 'ResourceKey'),
  \ dotnet#prop('IconVerticalSpacingKey', 'ResourceKey'),
  \ dotnet#prop('IconTitleWrapKey', 'ResourceKey'),
  \ dotnet#prop('KeyboardCues', 'bool'),
  \ dotnet#prop('KeyboardDelay', 'int32'),
  \ dotnet#prop('KeyboardPreference', 'bool'),
  \ dotnet#prop('KeyboardSpeed', 'int32'),
  \ dotnet#prop('SnapToDefaultButton', 'bool'),
  \ dotnet#prop('WheelScrollLines', 'int32'),
  \ dotnet#prop('MouseHoverTime', 'TimeSpan'),
  \ dotnet#prop('MouseHoverTimeMilliseconds', 'int32'),
  \ dotnet#prop('MouseHoverHeight', 'float64'),
  \ dotnet#prop('MouseHoverWidth', 'float64'),
  \ dotnet#prop('KeyboardCuesKey', 'ResourceKey'),
  \ dotnet#prop('KeyboardDelayKey', 'ResourceKey'),
  \ dotnet#prop('KeyboardPreferenceKey', 'ResourceKey'),
  \ dotnet#prop('KeyboardSpeedKey', 'ResourceKey'),
  \ dotnet#prop('SnapToDefaultButtonKey', 'ResourceKey'),
  \ dotnet#prop('WheelScrollLinesKey', 'ResourceKey'),
  \ dotnet#prop('MouseHoverTimeKey', 'ResourceKey'),
  \ dotnet#prop('MouseHoverHeightKey', 'ResourceKey'),
  \ dotnet#prop('MouseHoverWidthKey', 'ResourceKey'),
  \ dotnet#prop('MenuDropAlignment', 'bool'),
  \ dotnet#prop('MenuFade', 'bool'),
  \ dotnet#prop('MenuShowDelay', 'int32'),
  \ dotnet#prop('MenuDropAlignmentKey', 'ResourceKey'),
  \ dotnet#prop('MenuFadeKey', 'ResourceKey'),
  \ dotnet#prop('MenuShowDelayKey', 'ResourceKey'),
  \ dotnet#prop('ComboBoxPopupAnimation', 'PopupAnimation'),
  \ dotnet#prop('ComboBoxAnimation', 'bool'),
  \ dotnet#prop('ClientAreaAnimation', 'bool'),
  \ dotnet#prop('CursorShadow', 'bool'),
  \ dotnet#prop('GradientCaptions', 'bool'),
  \ dotnet#prop('HotTracking', 'bool'),
  \ dotnet#prop('ListBoxSmoothScrolling', 'bool'),
  \ dotnet#prop('MenuPopupAnimation', 'PopupAnimation'),
  \ dotnet#prop('MenuAnimation', 'bool'),
  \ dotnet#prop('SelectionFade', 'bool'),
  \ dotnet#prop('StylusHotTracking', 'bool'),
  \ dotnet#prop('ToolTipPopupAnimation', 'PopupAnimation'),
  \ dotnet#prop('ToolTipAnimation', 'bool'),
  \ dotnet#prop('ToolTipFade', 'bool'),
  \ dotnet#prop('UIEffects', 'bool'),
  \ dotnet#prop('ComboBoxAnimationKey', 'ResourceKey'),
  \ dotnet#prop('ClientAreaAnimationKey', 'ResourceKey'),
  \ dotnet#prop('CursorShadowKey', 'ResourceKey'),
  \ dotnet#prop('GradientCaptionsKey', 'ResourceKey'),
  \ dotnet#prop('HotTrackingKey', 'ResourceKey'),
  \ dotnet#prop('ListBoxSmoothScrollingKey', 'ResourceKey'),
  \ dotnet#prop('MenuAnimationKey', 'ResourceKey'),
  \ dotnet#prop('SelectionFadeKey', 'ResourceKey'),
  \ dotnet#prop('StylusHotTrackingKey', 'ResourceKey'),
  \ dotnet#prop('ToolTipAnimationKey', 'ResourceKey'),
  \ dotnet#prop('ToolTipFadeKey', 'ResourceKey'),
  \ dotnet#prop('UIEffectsKey', 'ResourceKey'),
  \ dotnet#prop('ComboBoxPopupAnimationKey', 'ResourceKey'),
  \ dotnet#prop('MenuPopupAnimationKey', 'ResourceKey'),
  \ dotnet#prop('ToolTipPopupAnimationKey', 'ResourceKey'),
  \ dotnet#prop('MinimizeAnimation', 'bool'),
  \ dotnet#prop('Border', 'int32'),
  \ dotnet#prop('CaretWidth', 'float64'),
  \ dotnet#prop('DragFullWindows', 'bool'),
  \ dotnet#prop('ForegroundFlashCount', 'int32'),
  \ dotnet#prop('NonClientMetrics', 'NativeMethods/NONCLIENTMETRICS'),
  \ dotnet#prop('BorderWidth', 'float64'),
  \ dotnet#prop('ScrollWidth', 'float64'),
  \ dotnet#prop('ScrollHeight', 'float64'),
  \ dotnet#prop('CaptionWidth', 'float64'),
  \ dotnet#prop('CaptionHeight', 'float64'),
  \ dotnet#prop('SmallCaptionWidth', 'float64'),
  \ dotnet#prop('SmallCaptionHeight', 'float64'),
  \ dotnet#prop('MenuWidth', 'float64'),
  \ dotnet#prop('MenuHeight', 'float64'),
  \ dotnet#prop('MinimizeAnimationKey', 'ResourceKey'),
  \ dotnet#prop('BorderKey', 'ResourceKey'),
  \ dotnet#prop('CaretWidthKey', 'ResourceKey'),
  \ dotnet#prop('ForegroundFlashCountKey', 'ResourceKey'),
  \ dotnet#prop('DragFullWindowsKey', 'ResourceKey'),
  \ dotnet#prop('BorderWidthKey', 'ResourceKey'),
  \ dotnet#prop('ScrollWidthKey', 'ResourceKey'),
  \ dotnet#prop('ScrollHeightKey', 'ResourceKey'),
  \ dotnet#prop('CaptionWidthKey', 'ResourceKey'),
  \ dotnet#prop('CaptionHeightKey', 'ResourceKey'),
  \ dotnet#prop('SmallCaptionWidthKey', 'ResourceKey'),
  \ dotnet#prop('MenuWidthKey', 'ResourceKey'),
  \ dotnet#prop('MenuHeightKey', 'ResourceKey'),
  \ dotnet#prop('ThinHorizontalBorderHeight', 'float64'),
  \ dotnet#prop('ThinVerticalBorderWidth', 'float64'),
  \ dotnet#prop('CursorWidth', 'float64'),
  \ dotnet#prop('CursorHeight', 'float64'),
  \ dotnet#prop('ThickHorizontalBorderHeight', 'float64'),
  \ dotnet#prop('ThickVerticalBorderWidth', 'float64'),
  \ dotnet#prop('MinimumHorizontalDragDistance', 'float64'),
  \ dotnet#prop('MinimumVerticalDragDistance', 'float64'),
  \ dotnet#prop('FixedFrameHorizontalBorderHeight', 'float64'),
  \ dotnet#prop('FixedFrameVerticalBorderWidth', 'float64'),
  \ dotnet#prop('FocusHorizontalBorderHeight', 'float64'),
  \ dotnet#prop('FocusVerticalBorderWidth', 'float64'),
  \ dotnet#prop('FullPrimaryScreenWidth', 'float64'),
  \ dotnet#prop('FullPrimaryScreenHeight', 'float64'),
  \ dotnet#prop('HorizontalScrollBarButtonWidth', 'float64'),
  \ dotnet#prop('HorizontalScrollBarHeight', 'float64'),
  \ dotnet#prop('HorizontalScrollBarThumbWidth', 'float64'),
  \ dotnet#prop('IconWidth', 'float64'),
  \ dotnet#prop('IconHeight', 'float64'),
  \ dotnet#prop('IconGridWidth', 'float64'),
  \ dotnet#prop('IconGridHeight', 'float64'),
  \ dotnet#prop('MaximizedPrimaryScreenWidth', 'float64'),
  \ dotnet#prop('MaximizedPrimaryScreenHeight', 'float64'),
  \ dotnet#prop('MaximumWindowTrackWidth', 'float64'),
  \ dotnet#prop('MaximumWindowTrackHeight', 'float64'),
  \ dotnet#prop('MenuCheckmarkWidth', 'float64'),
  \ dotnet#prop('MenuCheckmarkHeight', 'float64'),
  \ dotnet#prop('MenuButtonWidth', 'float64'),
  \ dotnet#prop('MenuButtonHeight', 'float64'),
  \ dotnet#prop('MinimumWindowWidth', 'float64'),
  \ dotnet#prop('MinimumWindowHeight', 'float64'),
  \ dotnet#prop('MinimizedWindowWidth', 'float64'),
  \ dotnet#prop('MinimizedWindowHeight', 'float64'),
  \ dotnet#prop('MinimizedGridWidth', 'float64'),
  \ dotnet#prop('MinimizedGridHeight', 'float64'),
  \ dotnet#prop('MinimumWindowTrackWidth', 'float64'),
  \ dotnet#prop('MinimumWindowTrackHeight', 'float64'),
  \ dotnet#prop('PrimaryScreenWidth', 'float64'),
  \ dotnet#prop('PrimaryScreenHeight', 'float64'),
  \ dotnet#prop('WindowCaptionButtonWidth', 'float64'),
  \ dotnet#prop('WindowCaptionButtonHeight', 'float64'),
  \ dotnet#prop('ResizeFrameHorizontalBorderHeight', 'float64'),
  \ dotnet#prop('ResizeFrameVerticalBorderWidth', 'float64'),
  \ dotnet#prop('SmallIconWidth', 'float64'),
  \ dotnet#prop('SmallIconHeight', 'float64'),
  \ dotnet#prop('SmallWindowCaptionButtonWidth', 'float64'),
  \ dotnet#prop('SmallWindowCaptionButtonHeight', 'float64'),
  \ dotnet#prop('VirtualScreenWidth', 'float64'),
  \ dotnet#prop('VirtualScreenHeight', 'float64'),
  \ dotnet#prop('VerticalScrollBarWidth', 'float64'),
  \ dotnet#prop('VerticalScrollBarButtonHeight', 'float64'),
  \ dotnet#prop('WindowCaptionHeight', 'float64'),
  \ dotnet#prop('KanjiWindowHeight', 'float64'),
  \ dotnet#prop('MenuBarHeight', 'float64'),
  \ dotnet#prop('VerticalScrollBarThumbHeight', 'float64'),
  \ dotnet#prop('IsImmEnabled', 'bool'),
  \ dotnet#prop('IsMediaCenter', 'bool'),
  \ dotnet#prop('IsMenuDropRightAligned', 'bool'),
  \ dotnet#prop('IsMiddleEastEnabled', 'bool'),
  \ dotnet#prop('IsMousePresent', 'bool'),
  \ dotnet#prop('IsMouseWheelPresent', 'bool'),
  \ dotnet#prop('IsPenWindows', 'bool'),
  \ dotnet#prop('IsRemotelyControlled', 'bool'),
  \ dotnet#prop('IsRemoteSession', 'bool'),
  \ dotnet#prop('ShowSounds', 'bool'),
  \ dotnet#prop('IsSlowMachine', 'bool'),
  \ dotnet#prop('SwapButtons', 'bool'),
  \ dotnet#prop('IsTabletPC', 'bool'),
  \ dotnet#prop('VirtualScreenLeft', 'float64'),
  \ dotnet#prop('VirtualScreenTop', 'float64'),
  \ dotnet#prop('ThinHorizontalBorderHeightKey', 'ResourceKey'),
  \ dotnet#prop('ThinVerticalBorderWidthKey', 'ResourceKey'),
  \ dotnet#prop('CursorWidthKey', 'ResourceKey'),
  \ dotnet#prop('CursorHeightKey', 'ResourceKey'),
  \ dotnet#prop('ThickHorizontalBorderHeightKey', 'ResourceKey'),
  \ dotnet#prop('ThickVerticalBorderWidthKey', 'ResourceKey'),
  \ dotnet#prop('FixedFrameHorizontalBorderHeightKey', 'ResourceKey'),
  \ dotnet#prop('FixedFrameVerticalBorderWidthKey', 'ResourceKey'),
  \ dotnet#prop('FocusHorizontalBorderHeightKey', 'ResourceKey'),
  \ dotnet#prop('FocusVerticalBorderWidthKey', 'ResourceKey'),
  \ dotnet#prop('FullPrimaryScreenWidthKey', 'ResourceKey'),
  \ dotnet#prop('FullPrimaryScreenHeightKey', 'ResourceKey'),
  \ dotnet#prop('HorizontalScrollBarButtonWidthKey', 'ResourceKey'),
  \ dotnet#prop('HorizontalScrollBarHeightKey', 'ResourceKey'),
  \ dotnet#prop('HorizontalScrollBarThumbWidthKey', 'ResourceKey'),
  \ dotnet#prop('IconWidthKey', 'ResourceKey'),
  \ dotnet#prop('IconHeightKey', 'ResourceKey'),
  \ dotnet#prop('IconGridWidthKey', 'ResourceKey'),
  \ dotnet#prop('IconGridHeightKey', 'ResourceKey'),
  \ dotnet#prop('MaximizedPrimaryScreenWidthKey', 'ResourceKey'),
  \ dotnet#prop('MaximizedPrimaryScreenHeightKey', 'ResourceKey'),
  \ dotnet#prop('MaximumWindowTrackWidthKey', 'ResourceKey'),
  \ dotnet#prop('MaximumWindowTrackHeightKey', 'ResourceKey'),
  \ dotnet#prop('MenuCheckmarkWidthKey', 'ResourceKey'),
  \ dotnet#prop('MenuCheckmarkHeightKey', 'ResourceKey'),
  \ dotnet#prop('MenuButtonWidthKey', 'ResourceKey'),
  \ dotnet#prop('MenuButtonHeightKey', 'ResourceKey'),
  \ dotnet#prop('MinimumWindowWidthKey', 'ResourceKey'),
  \ dotnet#prop('MinimumWindowHeightKey', 'ResourceKey'),
  \ dotnet#prop('MinimizedWindowWidthKey', 'ResourceKey'),
  \ dotnet#prop('MinimizedWindowHeightKey', 'ResourceKey'),
  \ dotnet#prop('MinimizedGridWidthKey', 'ResourceKey'),
  \ dotnet#prop('MinimizedGridHeightKey', 'ResourceKey'),
  \ dotnet#prop('MinimumWindowTrackWidthKey', 'ResourceKey'),
  \ dotnet#prop('MinimumWindowTrackHeightKey', 'ResourceKey'),
  \ dotnet#prop('PrimaryScreenWidthKey', 'ResourceKey'),
  \ dotnet#prop('PrimaryScreenHeightKey', 'ResourceKey'),
  \ dotnet#prop('WindowCaptionButtonWidthKey', 'ResourceKey'),
  \ dotnet#prop('WindowCaptionButtonHeightKey', 'ResourceKey'),
  \ dotnet#prop('ResizeFrameHorizontalBorderHeightKey', 'ResourceKey'),
  \ dotnet#prop('ResizeFrameVerticalBorderWidthKey', 'ResourceKey'),
  \ dotnet#prop('SmallIconWidthKey', 'ResourceKey'),
  \ dotnet#prop('SmallIconHeightKey', 'ResourceKey'),
  \ dotnet#prop('SmallWindowCaptionButtonWidthKey', 'ResourceKey'),
  \ dotnet#prop('SmallWindowCaptionButtonHeightKey', 'ResourceKey'),
  \ dotnet#prop('VirtualScreenWidthKey', 'ResourceKey'),
  \ dotnet#prop('VirtualScreenHeightKey', 'ResourceKey'),
  \ dotnet#prop('VerticalScrollBarWidthKey', 'ResourceKey'),
  \ dotnet#prop('VerticalScrollBarButtonHeightKey', 'ResourceKey'),
  \ dotnet#prop('WindowCaptionHeightKey', 'ResourceKey'),
  \ dotnet#prop('KanjiWindowHeightKey', 'ResourceKey'),
  \ dotnet#prop('MenuBarHeightKey', 'ResourceKey'),
  \ dotnet#prop('SmallCaptionHeightKey', 'ResourceKey'),
  \ dotnet#prop('VerticalScrollBarThumbHeightKey', 'ResourceKey'),
  \ dotnet#prop('IsImmEnabledKey', 'ResourceKey'),
  \ dotnet#prop('IsMediaCenterKey', 'ResourceKey'),
  \ dotnet#prop('IsMenuDropRightAlignedKey', 'ResourceKey'),
  \ dotnet#prop('IsMiddleEastEnabledKey', 'ResourceKey'),
  \ dotnet#prop('IsMousePresentKey', 'ResourceKey'),
  \ dotnet#prop('IsMouseWheelPresentKey', 'ResourceKey'),
  \ dotnet#prop('IsPenWindowsKey', 'ResourceKey'),
  \ dotnet#prop('IsRemotelyControlledKey', 'ResourceKey'),
  \ dotnet#prop('IsRemoteSessionKey', 'ResourceKey'),
  \ dotnet#prop('ShowSoundsKey', 'ResourceKey'),
  \ dotnet#prop('IsSlowMachineKey', 'ResourceKey'),
  \ dotnet#prop('SwapButtonsKey', 'ResourceKey'),
  \ dotnet#prop('IsTabletPCKey', 'ResourceKey'),
  \ dotnet#prop('VirtualScreenLeftKey', 'ResourceKey'),
  \ dotnet#prop('VirtualScreenTopKey', 'ResourceKey'),
  \ dotnet#prop('FocusVisualStyleKey', 'ResourceKey'),
  \ dotnet#prop('NavigationChromeStyleKey', 'ResourceKey'),
  \ dotnet#prop('NavigationChromeDownLevelStyleKey', 'ResourceKey'),
  \ dotnet#prop('PowerLineStatus', 'PowerLineStatus'),
  \ dotnet#prop('PowerLineStatusKey', 'ResourceKey'),
  \ dotnet#prop('Dpi', 'int32'),
  \ dotnet#prop('DpiX', 'int32'),
  \ ])

call dotnet#class('TemplateBindingExpression', 'Expression', [ 
  \ dotnet#method('TemplateBindingExpression(', 'class TemplateBindingExtension templateBindingExtension)', 'void'),
  \ dotnet#method('get_TemplateBindingExtension(', ')', 'TemplateBindingExtension'),
  \ dotnet#method('GetValue(', 'class DependencyObject d, DependencyProperty dp)', 'strict object'),
  \ dotnet#prop('TemplateBindingExtension', 'TemplateBindingExtension'),
  \ ])

call dotnet#class('TemplateBindingExpressionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('TemplateBindingExpressionConverter(', ')', 'void'),
  \ ])

call dotnet#class('TemplateBindingExtension', 'MarkupExtension', [ 
  \ dotnet#method('TemplateBindingExtension(', ')', 'void'),
  \ dotnet#method('TemplateBindingExtension(', 'class DependencyProperty property)', 'void'),
  \ dotnet#method('ProvideValue(', 'class IServiceProvider serviceProvider)', 'object'),
  \ dotnet#method('get_Property(', ')', 'DependencyProperty'),
  \ dotnet#method('set_Property(', 'class DependencyProperty value)', 'void'),
  \ dotnet#method('get_Converter(', ')', 'IValueConverter'),
  \ dotnet#method('set_Converter(', 'class IValueConverter value)', 'void'),
  \ dotnet#method('get_ConverterParameter(', ')', 'object'),
  \ dotnet#method('set_ConverterParameter(', 'object value)', 'void'),
  \ dotnet#prop('Property', 'DependencyProperty'),
  \ dotnet#prop('Converter', 'IValueConverter'),
  \ dotnet#prop('ConverterParameter', 'object'),
  \ ])

call dotnet#class('TemplateBindingExtensionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('TemplateBindingExtensionConverter(', ')', 'void'),
  \ ])

call dotnet#class('TemplateContent', 'Object', [ 
  \ dotnet#method('TemplateContent(', ')', 'void'),
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('set_Type(', 'class XamlType value)', 'void'),
  \ dotnet#method('get_Property(', ')', ''),
  \ dotnet#method('set_Property(', 'class XamlMember value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_NameSet(', ')', 'bool'),
  \ dotnet#method('set_NameSet(', 'bool value)', 'void'),
  \ dotnet#method('get_IsInNameScope(', ')', 'bool'),
  \ dotnet#method('set_IsInNameScope(', 'bool value)', 'void'),
  \ dotnet#method('get_IsInStyleOrTemplate(', ')', 'bool'),
  \ dotnet#method('set_IsInStyleOrTemplate(', 'bool value)', 'void'),
  \ dotnet#method('get_Instance(', ')', 'object'),
  \ dotnet#method('set_Instance(', 'object value)', 'void'),
  \ dotnet#method('get_ContentSet(', ')', 'bool'),
  \ dotnet#method('set_ContentSet(', 'bool value)', 'void'),
  \ dotnet#method('get_ContentSourceSet(', ')', 'bool'),
  \ dotnet#method('set_ContentSourceSet(', 'bool value)', 'void'),
  \ dotnet#method('get_ContentSource(', ')', 'string'),
  \ dotnet#method('set_ContentSource(', 'string value)', 'void'),
  \ dotnet#method('get_ContentTemplateSet(', ')', 'bool'),
  \ dotnet#method('set_ContentTemplateSet(', 'bool value)', 'void'),
  \ dotnet#method('get_ContentTemplateSelTemplateContentSet(', ')', 'bool'),
  \ dotnet#method('set_ContentTemplateSelTemplateContentSet(', 'bool value)', 'void'),
  \ dotnet#method('get_ContentStringFormatSet(', ')', 'bool'),
  \ dotnet#method('set_ContentStringFormatSet(', 'bool value)', 'void'),
  \ dotnet#method('get_ColumnsSet(', ')', 'bool'),
  \ dotnet#method('set_ColumnsSet(', 'bool value)', 'void'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Namespaces(', ')', ''),
  \ dotnet#method('get_HasNamespaces(', ')', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Type', 'XamlType'),
  \ dotnet#prop('Property', 'XamlMember'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('NameSet', 'bool'),
  \ dotnet#prop('IsInNameScope', 'bool'),
  \ dotnet#prop('IsInStyleOrTemplate', 'bool'),
  \ dotnet#prop('', 'object()'),
  \ dotnet#prop('ContentSet', 'bool'),
  \ dotnet#prop('ContentSourceSet', 'bool'),
  \ dotnet#prop('ContentSource', 'string'),
  \ dotnet#prop('ContentTemplateSet', 'bool'),
  \ dotnet#prop('ContentTemplateSelTemplateContentSet', 'bool'),
  \ dotnet#prop('ContentStringFormatSet', 'bool'),
  \ dotnet#prop('ColumnsSet', 'bool'),
  \ dotnet#prop('Namespaces', 'FrugalObjectList'),
  \ dotnet#prop('HasNamespaces', 'bool'),
  \ dotnet#method('TemplateContent(', ')', 'void'),
  \ dotnet#method('Push(', 'class XamlType xamlType, string name)', 'void'),
  \ dotnet#method('AddNamespace(', 'class NamespaceDeclaration nsd)', 'void'),
  \ dotnet#method('get_InScopeNamespaces(', ')', ''),
  \ dotnet#prop('InScopeNamespaces', 'FrugalObjectList'),
  \ dotnet#method('get_Frames(', ')', '.method'),
  \ dotnet#method('set_Frames(', 'class TemplateContent/StackOfFrames value)', 'void'),
  \ dotnet#method('TemplateContent(', 'class IServiceProvider services, XamlSchemaContext schemaContext)', 'void'),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object '),
  \ dotnet#method('Resolve(', 'string qualifiedTypeName)', ''),
  \ dotnet#method('GetNamespace(', 'string prefix)', 'string '),
  \ dotnet#method('GetNamespacePrefixes(', ')', ''),
  \ dotnet#method('get_Container(', ')', ''),
  \ dotnet#method('get_Instance(', ')', 'object '),
  \ dotnet#method('OnComponentChanged(', ')', 'void '),
  \ dotnet#method('OnComponentChanging(', ')', 'bool '),
  \ dotnet#method('get_PropertyDescriptor(', ')', ''),
  \ dotnet#method('SetData(', 'object targetObject, object targetProperty)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('get_TargetObject(', ')', 'object '),
  \ dotnet#method('get_TargetProperty(', ')', 'object '),
  \ dotnet#prop('Frames', 'TemplateContent/StackOfFrames'),
  \ dotnet#prop('Container', 'IContainer'),
  \ dotnet#prop('Instance', 'object'),
  \ dotnet#prop('PropertyDescriptor', 'PropertyDescriptor'),
  \ dotnet#prop('TargetObject', 'object'),
  \ dotnet#prop('TargetProperty', 'object'),
  \ dotnet#field('_xamlNodeList', 'XamlNodeList'),
  \ dotnet#method('TemplateContent(', 'class XamlReader xamlReader, IXamlObjectWriterFTemplateContenty fTemplateContenty, IServiceProvider context)', 'void'),
  \ dotnet#method('ParseXaml(', ')', 'void'),
  \ dotnet#method('PlayXaml(', ')', 'XamlReader'),
  \ dotnet#method('get_LoadPermission(', ')', '.method'),
  \ dotnet#method('set_LoadPermission(', 'class XamlLoadPermission value)', 'void'),
  \ dotnet#method('ResetTemplateLoadData(', ')', 'void'),
  \ dotnet#method('get_RootType(', ')', '.method'),
  \ dotnet#method('GetTypeForName(', 'string name)', 'XamlType'),
  \ dotnet#method('get_OwnerTemplate(', ')', '.method'),
  \ dotnet#method('set_OwnerTemplate(', 'class FrameworkTemplate value)', 'void'),
  \ dotnet#method('get_ObjectWriterFTemplateContenty(', ')', '.method'),
  \ dotnet#method('get_ObjectWriterParentSettings(', ')', '.method'),
  \ dotnet#method('get_SchemaContext(', ')', '.method'),
  \ dotnet#method('get_TemplateLoadData(', ')', '.method'),
  \ dotnet#method('set_TemplateLoadData(', 'class TemplateLoadData value)', 'void'),
  \ dotnet#method('set_RootType(', 'class XamlType value)', 'void'),
  \ dotnet#method('set_ObjectWriterFTemplateContenty(', 'class IXamlObjectWriterFTemplateContenty value)', 'void'),
  \ dotnet#method('set_ObjectWriterParentSettings(', 'class XamlObjectWriterSettings value)', 'void'),
  \ dotnet#method('set_SchemaContext(', 'class XamlSchemaContext value)', 'void'),
  \ dotnet#method('TemplateContent(', ')', 'static void .'),
  \ dotnet#prop('LoadPermission', 'XamlLoadPermission'),
  \ dotnet#prop('RootType', 'XamlType'),
  \ dotnet#prop('OwnerTemplate', 'FrameworkTemplate'),
  \ dotnet#prop('ObjectWriterFTemplateContenty', 'IXamlObjectWriterFTemplateContenty'),
  \ dotnet#prop('ObjectWriterParentSettings', 'XamlObjectWriterSettings'),
  \ dotnet#prop('SchemaContext', 'XamlSchemaContext'),
  \ dotnet#prop('TemplateLoadData', 'TemplateLoadData'),
  \ ])

call dotnet#class('TemplateContentLoader', 'XamlDeferringLoader', [ 
  \ dotnet#method('Load(', 'class XamlReader xamlReader, IServiceProvider serviceProvider)', 'object'),
  \ dotnet#method('Save(', 'object value, IServiceProvider serviceProvider)', 'XamlReader'),
  \ dotnet#method('TemplateContentLoader(', ')', 'void'),
  \ ])

call dotnet#class('TemplatePartAttribute', 'Attribute', [ 
  \ dotnet#method('TemplatePartAttribute(', ')', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Type(', ')', 'Type'),
  \ dotnet#method('set_Type(', 'class Type value)', 'void'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Type', 'Type'),
  \ ])

call dotnet#class('TemplateVisualStateAttribute', 'Attribute', [ 
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_GroupName(', ')', 'string'),
  \ dotnet#method('set_GroupName(', 'string value)', 'void'),
  \ dotnet#method('TemplateVisualStateAttribute(', ')', 'void'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('GroupName', 'string'),
  \ ])

call dotnet#class('ThemeDictionaryExtension', 'MarkupExtension', [ 
  \ dotnet#method('ThemeDictionaryExtension(', ')', 'void'),
  \ dotnet#method('ThemeDictionaryExtension(', 'string assemblyName)', 'void'),
  \ dotnet#method('get_AssemblyName(', ')', 'string'),
  \ dotnet#method('set_AssemblyName(', 'string value)', 'void'),
  \ dotnet#method('ProvideValue(', 'class IServiceProvider serviceProvider)', 'object'),
  \ dotnet#method('GenerateFallbackUri(', 'class ResourceDictionary dictionary, string resourceName)', 'static Uri'),
  \ dotnet#method('OnThemeChanged(', ')', 'static void'),
  \ dotnet#prop('AssemblyName', 'string'),
  \ ])

call dotnet#class('ThemeInfoAttribute', 'Attribute', [ 
  \ dotnet#method('ThemeInfoAttribute(', 'ResourceDictionaryLocation themeDictionaryLocation, ResourceDictionaryLocation genericDictionaryLocation)', 'void'),
  \ dotnet#method('get_ThemeDictionaryLocation(', ')', 'ResourceDictionaryLocation'),
  \ dotnet#method('get_GenericDictionaryLocation(', ')', 'ResourceDictionaryLocation'),
  \ dotnet#method('FromAssembly(', 'class Assembly assembly)', 'static ThemeInfoAttribute'),
  \ dotnet#prop('ThemeDictionaryLocation', 'ResourceDictionaryLocation'),
  \ dotnet#prop('GenericDictionaryLocation', 'ResourceDictionaryLocation'),
  \ ])

call dotnet#class('Thickness', 'ValueType', [ 
  \ dotnet#field('_Left', 'float64'),
  \ dotnet#field('_Top', 'float64'),
  \ dotnet#field('_Right', 'float64'),
  \ dotnet#field('_Bottom', 'float64'),
  \ dotnet#method('Thickness(', 'float64 uniformLength)', 'void'),
  \ dotnet#method('Thickness(', 'float64 left, float64 top, float64 right, float64 bottom)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'Thickness thickness)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class CultureInfo cultureInfo)', 'string'),
  \ dotnet#method('get_IsZero(', ')', 'bool'),
  \ dotnet#method('get_IsUniform(', ')', 'bool'),
  \ dotnet#method('IsValid(', 'bool allowNegative, bool allowNaN, bool allowPositiveInfinity, bool allowNegativeInfinity)', 'bool'),
  \ dotnet#method('IsClose(', 'Thickness thickness)', 'bool'),
  \ dotnet#method('AreClose(', 'Thickness thickness0, Thickness thickness1)', 'static bool'),
  \ dotnet#method('op_Equality(', 'Thickness t1, Thickness t2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Thickness t1, Thickness t2)', 'static bool'),
  \ dotnet#method('get_Left(', ')', 'float64'),
  \ dotnet#method('set_Left(', 'float64 value)', 'void'),
  \ dotnet#method('get_Top(', ')', 'float64'),
  \ dotnet#method('set_Top(', 'float64 value)', 'void'),
  \ dotnet#method('get_Right(', ')', 'float64'),
  \ dotnet#method('set_Right(', 'float64 value)', 'void'),
  \ dotnet#method('get_Bottom(', ')', 'float64'),
  \ dotnet#method('set_Bottom(', 'float64 value)', 'void'),
  \ dotnet#method('get_Size(', ')', '.method'),
  \ dotnet#prop('IsZero', 'bool'),
  \ dotnet#prop('IsUniform', 'bool'),
  \ dotnet#prop('Left', 'float64'),
  \ dotnet#prop('Top', 'float64'),
  \ dotnet#prop('Right', 'float64'),
  \ dotnet#prop('Bottom', 'float64'),
  \ dotnet#prop('Size', 'Size'),
  \ ])

call dotnet#class('ThicknessConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('ToString(', 'Thickness th, CultureInfo cultureInfo)', 'static string'),
  \ dotnet#method('FromString(', 'string s, CultureInfo cultureInfo)', 'static Thickness'),
  \ dotnet#method('ThicknessConverter(', ')', 'void'),
  \ ])

call dotnet#class('Trigger', 'TriggerBase', [ 
  \ dotnet#method('get_Property(', ')', 'DependencyProperty'),
  \ dotnet#method('set_Property(', 'class DependencyProperty value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('set_Value(', 'object value)', 'void'),
  \ dotnet#method('get_SourceName(', ')', 'string'),
  \ dotnet#method('set_SourceName(', 'string value)', 'void'),
  \ dotnet#method('get_Setters(', ')', 'SetterBaseCollection'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('CheckChildIsSetter(', 'object o)', 'static Setter'),
  \ dotnet#method('Seal(', ')', 'void'),
  \ dotnet#method('GetCurrentState(', 'class DependencyObject container, UncommonField dataField)', 'strict bool'),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#method('ReceiveTypeConverter(', 'object targetObject, XamlSetTypeConverterEventArgs eventArgs)', 'static void'),
  \ dotnet#method('Trigger(', ')', 'void'),
  \ dotnet#prop('Property', 'DependencyProperty'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('SourceName', 'string'),
  \ dotnet#prop('Setters', 'SetterBaseCollection'),
  \ ])

call dotnet#class('TriggerActionCollection', 'Object', [ 
  \ dotnet#method('TriggerActionCollection(', ')', 'void'),
  \ dotnet#method('TriggerActionCollection(', 'int32 initialSize)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('Add(', 'class TriggerAction value)', 'void'),
  \ dotnet#method('Contains(', 'class TriggerAction value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class TriggerAction[] array, int32 index)', 'void'),
  \ dotnet#method('IndexOf(', 'class TriggerAction value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, TriggerAction value)', 'void'),
  \ dotnet#method('Remove(', 'class TriggerAction value)', 'bool'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, TriggerAction value)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Seal(', 'class TriggerBase containingTrigger)', 'void'),
  \ dotnet#method('get_Owner(', ')', '.method'),
  \ dotnet#method('set_Owner(', 'class DependencyObject value)', 'void'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'TriggerAction'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('Owner', 'DependencyObject'),
  \ ])

call dotnet#class('TriggerCollection', 'Collection', [ 
  \ dotnet#method('TriggerCollection(', ')', 'void'),
  \ dotnet#method('TriggerCollection(', 'class FrameworkElement owner)', 'void'),
  \ dotnet#method('ClearItems(', ')', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, TriggerBase item)', 'void'),
  \ dotnet#method('RemoveItem(', 'int32 index)', 'void'),
  \ dotnet#method('SetItem(', 'int32 index, TriggerBase item)', 'void'),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('Seal(', ')', 'void'),
  \ dotnet#method('get_Owner(', ')', '.method'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('Owner', 'FrameworkElement'),
  \ ])

call dotnet#class('VisualState', 'DependencyObject', [ 
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Storyboard(', ')', 'Storyboard'),
  \ dotnet#method('set_Storyboard(', 'class Storyboard value)', 'void'),
  \ dotnet#method('VisualState(', ')', 'void'),
  \ dotnet#method('VisualState(', ')', 'static void .'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Storyboard', 'Storyboard'),
  \ ])

call dotnet#class('VisualStateChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('VisualStateChangedEventArgs(', 'class VisualState oldState, VisualState newState, FrameworkElement control, FrameworkElement stateGroupsRoot)', 'void'),
  \ dotnet#method('get_OldState(', ')', 'VisualState'),
  \ dotnet#method('get_NewState(', ')', 'VisualState'),
  \ dotnet#method('get_Control(', ')', 'FrameworkElement'),
  \ dotnet#method('get_StateGroupsRoot(', ')', 'FrameworkElement'),
  \ dotnet#prop('OldState', 'VisualState'),
  \ dotnet#prop('NewState', 'VisualState'),
  \ dotnet#prop('Control', 'FrameworkElement'),
  \ dotnet#prop('StateGroupsRoot', 'FrameworkElement'),
  \ ])

call dotnet#class('VisualStateGroup', 'DependencyObject', [ 
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_States(', ')', 'IList'),
  \ dotnet#method('get_Transitions(', ')', 'IList'),
  \ dotnet#method('get_CurrentState(', ')', 'VisualState'),
  \ dotnet#method('set_CurrentState(', 'class VisualState value)', 'void'),
  \ dotnet#method('GetState(', 'string stateName)', 'VisualState'),
  \ dotnet#method('get_CurrentStoryboards(', ')', '.method'),
  \ dotnet#method('StartNewThenStopOld(', 'class FrameworkElement element, Storyboard[] newStoryboards)', 'void'),
  \ dotnet#method('RaiseCurrentStateChanging(', 'class FrameworkElement stateGroupsRoot, VisualState oldState, VisualState newState, FrameworkElement control)', 'void'),
  \ dotnet#method('RaiseCurrentStateChanged(', 'class FrameworkElement stateGroupsRoot, VisualState oldState, VisualState newState, FrameworkElement control)', 'void'),
  \ dotnet#method('add_CurrentStateChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentStateChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_CurrentStateChanging(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentStateChanging(', 'class EventHandler value)', 'void'),
  \ dotnet#method('VisualStateGroup(', ')', 'void'),
  \ dotnet#event('CurrentStateChanged', 'EventHandler'),
  \ dotnet#event('CurrentStateChanging', 'EventHandler'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('States', 'IList'),
  \ dotnet#prop('Transitions', 'IList'),
  \ dotnet#prop('CurrentState', 'VisualState'),
  \ dotnet#prop('CurrentStoryboards', 'Collection'),
  \ ])

call dotnet#class('VisualStateManager', 'DependencyObject', [ 
  \ dotnet#method('GoToState(', 'class FrameworkElement control, string stateName, bool useTransitions)', 'static bool'),
  \ dotnet#method('GoToElementState(', 'class FrameworkElement stateGroupsRoot, string stateName, bool useTransitions)', 'static bool'),
  \ dotnet#method('GoToStateCore(', 'class FrameworkElement control, FrameworkElement stateGroupsRoot, string stateName, VisualStateGroup group, VisualState state, bool useTransitions)', 'bool'),
  \ dotnet#method('GetCustomVisualStateManager(', 'class FrameworkElement obj)', 'static VisualStateManager'),
  \ dotnet#method('SetCustomVisualStateManager(', 'class FrameworkElement obj, VisualStateManager value)', 'static void'),
  \ dotnet#method('GetVisualStateGroupsInternal(', 'class FrameworkElement obj)', 'static Collection'),
  \ dotnet#method('GetVisualStateGroups(', 'class FrameworkElement obj)', 'static IList'),
  \ dotnet#method('TryGetState(', 'class IList groups, string stateName, [out] VisualStateGroup& group, [out] VisualState& state)', 'static bool'),
  \ dotnet#method('RaiseCurrentStateChanging(', 'class VisualStateGroup stateGroup, VisualState oldState, VisualState newState, FrameworkElement control, FrameworkElement stateGroupsRoot)', 'void'),
  \ dotnet#method('RaiseCurrentStateChanged(', 'class VisualStateGroup stateGroup, VisualState oldState, VisualState newState, FrameworkElement control, FrameworkElement stateGroupsRoot)', 'void'),
  \ dotnet#method('GetTransition(', 'class FrameworkElement element, VisualStateGroup group, VisualState from, VisualState to)', 'static VisualTransition'),
  \ dotnet#method('VisualStateManager(', ')', 'void'),
  \ dotnet#method('VisualStateManager(', ')', 'static void .'),
  \ ])

call dotnet#class('VisualTransition', 'DependencyObject', [ 
  \ dotnet#method('VisualTransition(', ')', 'void'),
  \ dotnet#method('get_From(', ')', 'string'),
  \ dotnet#method('set_From(', 'string value)', 'void'),
  \ dotnet#method('get_To(', ')', 'string'),
  \ dotnet#method('set_To(', 'string value)', 'void'),
  \ dotnet#method('get_Storyboard(', ')', 'Storyboard'),
  \ dotnet#method('set_Storyboard(', 'class Storyboard value)', 'void'),
  \ dotnet#method('get_GeneratedDuration(', ')', 'Duration'),
  \ dotnet#method('set_GeneratedDuration(', 'Duration value)', 'void'),
  \ dotnet#method('get_GeneratedEasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_GeneratedEasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsDefault(', ')', 'bool'),
  \ dotnet#method('get_DynamicStoryboardCompleted(', ')', 'bool'),
  \ dotnet#method('set_DynamicStoryboardCompleted(', 'bool value)', 'void'),
  \ dotnet#method('get_ExplicitStoryboardCompleted(', ')', 'bool'),
  \ dotnet#method('set_ExplicitStoryboardCompleted(', 'bool value)', 'void'),
  \ dotnet#prop('From', 'string'),
  \ dotnet#prop('To', 'string'),
  \ dotnet#prop('Storyboard', 'Storyboard'),
  \ dotnet#prop('GeneratedDuration', 'Duration'),
  \ dotnet#prop('GeneratedEasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsDefault', 'bool'),
  \ dotnet#prop('DynamicStoryboardCompleted', 'bool'),
  \ dotnet#prop('ExplicitStoryboardCompleted', 'bool'),
  \ ])

call dotnet#class('WindowCollection', 'Object', [ 
  \ dotnet#method('WindowCollection(', ')', 'void'),
  \ dotnet#method('WindowCollection(', 'int32 count)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'Window'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class Window[] array, int32 index)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('Clone(', ')', 'WindowCollection'),
  \ dotnet#method('Remove(', 'class Window win)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('Add(', 'class Window win)', 'int32'),
  \ dotnet#method('HasItem(', 'class Window win)', 'bool'),
  \ dotnet#prop('Item(int32)', 'Window'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

