call dotnet#namespace('System.IO.Pipes')

call dotnet#class('PipeStream', 'Stream', [ 
  \ dotnet#method('PipeStream(', 'PipeDirection direction, int32 bufferSize)', 'void'),
  \ dotnet#method('PipeStream(', 'PipeDirection direction, PipeTransmissionMode transmissionMode, int32 outBufferSize)', 'void'),
  \ dotnet#method('InitializeHandle(', 'class SafePipeHandle handle, bool isExposed, bool isAsync)', 'void'),
  \ dotnet#method('Read(', '[in][out] uint8[] buffer, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('BeginRead(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndRead(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('Write(', 'uint8[] buffer, int32 offset, int32 count)', 'void'),
  \ dotnet#method('BeginWrite(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndWrite(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('ReadByte(', ')', 'int32'),
  \ dotnet#method('WriteByte(', 'uint8 value)', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('WaitForPipeDrain(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('get_IsConnected(', ')', 'bool'),
  \ dotnet#method('set_IsConnected(', 'bool value)', 'void'),
  \ dotnet#method('get_IsAsync(', ')', 'bool'),
  \ dotnet#method('get_IsMessageComplete(', ')', 'bool'),
  \ dotnet#method('get_TransmissionMode(', ')', ''),
  \ dotnet#method('get_InBufferSize(', ')', 'int32'),
  \ dotnet#method('get_OutBufferSize(', ')', 'int32'),
  \ dotnet#method('get_ReadMode(', ')', ''),
  \ dotnet#method('set_ReadMode(', 'PipeTransmissionMode value)', 'void'),
  \ dotnet#method('GetAccessControl(', ')', 'PipeSecurity'),
  \ dotnet#method('SetAccessControl(', 'class PipeSecurity pipeSecurity)', 'void'),
  \ dotnet#method('get_SafePipeHandle(', ')', 'SafePipeHandle'),
  \ dotnet#method('get_IsHandleExposed(', ')', 'bool'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('SetLength(', 'int64 value)', 'void'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin origin)', 'int64'),
  \ dotnet#method('CheckPipePropertyOperations(', ')', 'famorassem void'),
  \ dotnet#method('CheckReadOperations(', ')', 'famorassem void'),
  \ dotnet#method('CheckWriteOperations(', ')', 'famorassem void'),
  \ dotnet#method('PipeStream(', ')', 'static void .'),
  \ dotnet#prop('IsConnected', 'bool'),
  \ dotnet#prop('IsAsync', 'bool'),
  \ dotnet#prop('IsMessageComplete', 'bool'),
  \ dotnet#prop('TransmissionMode', 'PipeTransmissionMode'),
  \ dotnet#prop('InBufferSize', 'int32'),
  \ dotnet#prop('OutBufferSize', 'int32'),
  \ dotnet#prop('ReadMode', 'PipeTransmissionMode'),
  \ dotnet#prop('SafePipeHandle', 'SafePipeHandle'),
  \ dotnet#prop('IsHandleExposed', 'bool'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ ])

call dotnet#class('AnonymousPipeServerStream', 'PipeStream', [ 
  \ dotnet#method('AnonymousPipeServerStream(', ')', 'void'),
  \ dotnet#method('AnonymousPipeServerStream(', 'PipeDirection direction)', 'void'),
  \ dotnet#method('AnonymousPipeServerStream(', 'PipeDirection direction, HandleInheritability inheritability)', 'void'),
  \ dotnet#method('AnonymousPipeServerStream(', 'PipeDirection direction, HandleInheritability inheritability, int32 bufferSize)', 'void'),
  \ dotnet#method('AnonymousPipeServerStream(', 'PipeDirection direction, HandleInheritability inheritability, int32 bufferSize, PipeSecurity pipeSecurity)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('AnonymousPipeServerStream(', 'PipeDirection direction, SafePipeHandle serverSafePipeHandle, SafePipeHandle clientSafePipeHandle)', 'void'),
  \ dotnet#method('GetClientHandleAsString(', ')', 'string'),
  \ dotnet#method('get_ClientSafePipeHandle(', ')', 'SafePipeHandle'),
  \ dotnet#method('DisposeLocalCopyOfClientHandle(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('get_TransmissionMode(', ')', ''),
  \ dotnet#method('set_ReadMode(', 'PipeTransmissionMode value)', 'void'),
  \ dotnet#prop('ClientSafePipeHandle', 'SafePipeHandle'),
  \ dotnet#prop('TransmissionMode', 'PipeTransmissionMode'),
  \ dotnet#prop('ReadMode', 'PipeTransmissionMode'),
  \ ])

call dotnet#class('AnonymousPipeClientStream', 'PipeStream', [ 
  \ dotnet#method('AnonymousPipeClientStream(', 'string pipeHandleAsString)', 'void'),
  \ dotnet#method('AnonymousPipeClientStream(', 'PipeDirection direction, string pipeHandleAsString)', 'void'),
  \ dotnet#method('AnonymousPipeClientStream(', 'PipeDirection direction, SafePipeHandle safePipeHandle)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('get_TransmissionMode(', ')', ''),
  \ dotnet#method('set_ReadMode(', 'PipeTransmissionMode value)', 'void'),
  \ dotnet#prop('TransmissionMode', 'PipeTransmissionMode'),
  \ dotnet#prop('ReadMode', 'PipeTransmissionMode'),
  \ ])

call dotnet#class('PipeStreamImpersonationWorker', 'MulticastDelegate', [ 
  \ dotnet#method('PipeStreamImpersonationWorker(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', ')', 'void'),
  \ dotnet#method('BeginInvoke(', 'class AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('NamedPipeServerStream', 'PipeStream', [ 
  \ dotnet#method('NamedPipeServerStream(', 'string pipeName)', 'void'),
  \ dotnet#method('NamedPipeServerStream(', 'string pipeName, PipeDirection direction)', 'void'),
  \ dotnet#method('NamedPipeServerStream(', 'string pipeName, PipeDirection direction, int32 maxNumberOfServerInstances)', 'void'),
  \ dotnet#method('NamedPipeServerStream(', 'string pipeName, PipeDirection direction, int32 maxNumberOfServerInstances, PipeTransmissionMode transmissionMode)', 'void'),
  \ dotnet#method('NamedPipeServerStream(', 'string pipeName, PipeDirection direction, int32 maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options)', 'void'),
  \ dotnet#method('NamedPipeServerStream(', 'string pipeName, PipeDirection direction, int32 maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int32 inBufferSize, int32 outBufferSize)', 'void'),
  \ dotnet#method('NamedPipeServerStream(', 'string pipeName, PipeDirection direction, int32 maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int32 inBufferSize, int32 outBufferSize, PipeSecurity pipeSecurity)', 'void'),
  \ dotnet#method('NamedPipeServerStream(', 'string pipeName, PipeDirection direction, int32 maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int32 inBufferSize, int32 outBufferSize, PipeSecurity pipeSecurity, HandleInheritability inheritability)', 'void'),
  \ dotnet#method('NamedPipeServerStream(', 'string pipeName, PipeDirection direction, int32 maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int32 inBufferSize, int32 outBufferSize, PipeSecurity pipeSecurity, HandleInheritability inheritability, PipeAccessRights additionalAccessRights)', 'void'),
  \ dotnet#method('NamedPipeServerStream(', 'PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('WaitForConnection(', ')', 'void'),
  \ dotnet#method('BeginWaitForConnection(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndWaitForConnection(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('Disconnect(', ')', 'void'),
  \ dotnet#method('RunAsClient(', 'class PipeStreamImpersonationWorker impersonationWorker)', 'void'),
  \ dotnet#method('GetImpersonationUserName(', ')', 'string'),
  \ dotnet#method('NamedPipeServerStream(', ')', 'static void .'),
  \ ])

call dotnet#class('NamedPipeClientStream', 'PipeStream', [ 
  \ dotnet#method('NamedPipeClientStream(', 'string pipeName)', 'void'),
  \ dotnet#method('NamedPipeClientStream(', 'string serverName, string pipeName)', 'void'),
  \ dotnet#method('NamedPipeClientStream(', 'string serverName, string pipeName, PipeDirection direction)', 'void'),
  \ dotnet#method('NamedPipeClientStream(', 'string serverName, string pipeName, PipeDirection direction, PipeOptions options)', 'void'),
  \ dotnet#method('NamedPipeClientStream(', 'string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel)', 'void'),
  \ dotnet#method('NamedPipeClientStream(', 'string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel, HandleInheritability inheritability)', 'void'),
  \ dotnet#method('NamedPipeClientStream(', 'string serverName, string pipeName, PipeAccessRights desiredAccessRights, PipeOptions options, TokenImpersonationLevel impersonationLevel, HandleInheritability inheritability)', 'void'),
  \ dotnet#method('NamedPipeClientStream(', 'PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Connect(', ')', 'void'),
  \ dotnet#method('Connect(', 'int32 timeout)', 'void'),
  \ dotnet#method('get_NumberOfServerInstances(', ')', 'int32'),
  \ dotnet#method('CheckPipePropertyOperations(', ')', 'famorassem void'),
  \ dotnet#prop('NumberOfServerInstances', 'int32'),
  \ ])

call dotnet#class('PipeAccessRule', 'AccessRule', [ 
  \ dotnet#method('PipeAccessRule(', 'string identity, PipeAccessRights rights, AccessControlType type)', 'void'),
  \ dotnet#method('PipeAccessRule(', 'class IdentityReference identity, PipeAccessRights rights, AccessControlType type)', 'void'),
  \ dotnet#method('get_PipeAccessRights(', ')', 'PipeAccessRights'),
  \ dotnet#prop('PipeAccessRights', 'PipeAccessRights'),
  \ ])

call dotnet#class('PipeAuditRule', 'AuditRule', [ 
  \ dotnet#method('PipeAuditRule(', 'class IdentityReference identity, PipeAccessRights rights, AuditFlags flags)', 'void'),
  \ dotnet#method('PipeAuditRule(', 'string identity, PipeAccessRights rights, AuditFlags flags)', 'void'),
  \ dotnet#method('get_PipeAccessRights(', ')', 'PipeAccessRights'),
  \ dotnet#prop('PipeAccessRights', 'PipeAccessRights'),
  \ ])

call dotnet#class('PipeSecurity', 'NativeObjectSecurity', [ 
  \ dotnet#method('PipeSecurity(', ')', 'void'),
  \ dotnet#method('AddAccessRule(', 'class PipeAccessRule rule)', 'void'),
  \ dotnet#method('SetAccessRule(', 'class PipeAccessRule rule)', 'void'),
  \ dotnet#method('ResetAccessRule(', 'class PipeAccessRule rule)', 'void'),
  \ dotnet#method('RemoveAccessRule(', 'class PipeAccessRule rule)', 'bool'),
  \ dotnet#method('RemoveAccessRuleSpecific(', 'class PipeAccessRule rule)', 'void'),
  \ dotnet#method('AddAuditRule(', 'class PipeAuditRule rule)', 'void'),
  \ dotnet#method('SetAuditRule(', 'class PipeAuditRule rule)', 'void'),
  \ dotnet#method('RemoveAuditRule(', 'class PipeAuditRule rule)', 'bool'),
  \ dotnet#method('RemoveAuditRuleAll(', 'class PipeAuditRule rule)', 'void'),
  \ dotnet#method('RemoveAuditRuleSpecific(', 'class PipeAuditRule rule)', 'void'),
  \ dotnet#method('AccessRuleFPipeSecurityy(', 'class IdentityReference identityReference, int32 accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)', 'AccessRule'),
  \ dotnet#method('AuditRuleFPipeSecurityy(', 'class IdentityReference identityReference, int32 accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)', ''),
  \ dotnet#method('Persist(', 'class SafeHandle handle)', 'famorassem void'),
  \ dotnet#method('Persist(', 'string name)', 'famorassem void'),
  \ dotnet#method('get_AccessRightType(', ')', ''),
  \ dotnet#method('get_AccessRuleType(', ')', ''),
  \ dotnet#method('get_AuditRuleType(', ')', ''),
  \ dotnet#prop('AccessRightType', 'Type'),
  \ dotnet#prop('AccessRuleType', 'Type'),
  \ dotnet#prop('AuditRuleType', 'Type'),
  \ ])

