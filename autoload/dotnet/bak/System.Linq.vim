call dotnet#namespace('System.Linq')

call dotnet#class('Queryable', 'Object', [ 
  \ dotnet#method('AsQueryable(', 'class IEnumerable source)', 'static IQueryable'),
  \ dotnet#method('AsQueryable(', 'class IEnumerable source)', 'static IQueryable'),
  \ dotnet#method('Where(', 'class IQueryable source, Expression predicate)', 'static IQueryable'),
  \ dotnet#method('Where(', 'class IQueryable source, Expression predicate)', 'static IQueryable'),
  \ dotnet#method('OfType(', 'class IQueryable source)', 'static IQueryable'),
  \ dotnet#method('Cast(', 'class IQueryable source)', 'static IQueryable'),
  \ dotnet#method('Select(', 'class IQueryable source, Expression selQueryable)', 'static IQueryable'),
  \ dotnet#method('Select(', 'class IQueryable source, Expression selQueryable)', 'static IQueryable'),
  \ dotnet#method('SelectMany(', 'class IQueryable source, Expression selQueryable)', 'static IQueryable'),
  \ dotnet#method('SelectMany(', 'class IQueryable source, Expression selQueryable)', 'static IQueryable'),
  \ dotnet#method('SelectMany(', 'class IQueryable source, Expression collectionSelQueryable, Expression resultSelQueryable)', 'static IQueryable'),
  \ dotnet#method('SelectMany(', 'class IQueryable source, Expression collectionSelQueryable, Expression resultSelQueryable)', 'static IQueryable'),
  \ dotnet#method('Join(', 'class IQueryable outer, IEnumerable inner, Expression outerKeySelQueryable, Expression innerKeySelQueryable, Expression resultSelQueryable)', 'static IQueryable'),
  \ dotnet#method('Join(', 'class IQueryable outer, IEnumerable inner, Expression outerKeySelQueryable, Expression innerKeySelQueryable, Expression resultSelQueryable, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('GroupJoin(', 'class IQueryable outer, IEnumerable inner, Expression outerKeySelQueryable, Expression innerKeySelQueryable, Expression resultSelQueryable)', 'static IQueryable'),
  \ dotnet#method('GroupJoin(', 'class IQueryable outer, IEnumerable inner, Expression outerKeySelQueryable, Expression innerKeySelQueryable, Expression resultSelQueryable, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('OrderBy(', 'class IQueryable source, Expression keySelQueryable)', 'static IOrderedQueryable'),
  \ dotnet#method('OrderBy(', 'class IQueryable source, Expression keySelQueryable, IComparer comparer)', 'static IOrderedQueryable'),
  \ dotnet#method('OrderByDescending(', 'class IQueryable source, Expression keySelQueryable)', 'static IOrderedQueryable'),
  \ dotnet#method('OrderByDescending(', 'class IQueryable source, Expression keySelQueryable, IComparer comparer)', 'static IOrderedQueryable'),
  \ dotnet#method('ThenBy(', 'class IOrderedQueryable source, Expression keySelQueryable)', 'static IOrderedQueryable'),
  \ dotnet#method('ThenBy(', 'class IOrderedQueryable source, Expression keySelQueryable, IComparer comparer)', 'static IOrderedQueryable'),
  \ dotnet#method('ThenByDescending(', 'class IOrderedQueryable source, Expression keySelQueryable)', 'static IOrderedQueryable'),
  \ dotnet#method('ThenByDescending(', 'class IOrderedQueryable source, Expression keySelQueryable, IComparer comparer)', 'static IOrderedQueryable'),
  \ dotnet#method('Take(', 'class IQueryable source, int32 count)', 'static IQueryable'),
  \ dotnet#method('TakeWhile(', 'class IQueryable source, Expression predicate)', 'static IQueryable'),
  \ dotnet#method('TakeWhile(', 'class IQueryable source, Expression predicate)', 'static IQueryable'),
  \ dotnet#method('Skip(', 'class IQueryable source, int32 count)', 'static IQueryable'),
  \ dotnet#method('SkipWhile(', 'class IQueryable source, Expression predicate)', 'static IQueryable'),
  \ dotnet#method('SkipWhile(', 'class IQueryable source, Expression predicate)', 'static IQueryable'),
  \ dotnet#method('GroupBy(', 'class IQueryable source, Expression keySelQueryable)', 'static IQueryable'),
  \ dotnet#method('GroupBy(', 'class IQueryable source, Expression keySelQueryable, Expression elementSelQueryable)', 'static IQueryable'),
  \ dotnet#method('GroupBy(', 'class IQueryable source, Expression keySelQueryable, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('GroupBy(', 'class IQueryable source, Expression keySelQueryable, Expression elementSelQueryable, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('GroupBy(', 'class IQueryable source, Expression keySelQueryable, Expression elementSelQueryable, Expression resultSelQueryable)', 'static IQueryable'),
  \ dotnet#method('GroupBy(', 'class IQueryable source, Expression keySelQueryable, Expression resultSelQueryable)', 'static IQueryable'),
  \ dotnet#method('GroupBy(', 'class IQueryable source, Expression keySelQueryable, Expression resultSelQueryable, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('GroupBy(', 'class IQueryable source, Expression keySelQueryable, Expression elementSelQueryable, Expression resultSelQueryable, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('Distinct(', 'class IQueryable source)', 'static IQueryable'),
  \ dotnet#method('Distinct(', 'class IQueryable source, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('Concat(', 'class IQueryable source1, IEnumerable source2)', 'static IQueryable'),
  \ dotnet#method('Zip(', 'class IQueryable source1, IEnumerable source2, Expression resultSelQueryable)', 'static IQueryable'),
  \ dotnet#method('Union(', 'class IQueryable source1, IEnumerable source2)', 'static IQueryable'),
  \ dotnet#method('Union(', 'class IQueryable source1, IEnumerable source2, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('Intersect(', 'class IQueryable source1, IEnumerable source2)', 'static IQueryable'),
  \ dotnet#method('Intersect(', 'class IQueryable source1, IEnumerable source2, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('Except(', 'class IQueryable source1, IEnumerable source2)', 'static IQueryable'),
  \ dotnet#method('Except(', 'class IQueryable source1, IEnumerable source2, IEqualityComparer comparer)', 'static IQueryable'),
  \ dotnet#method('First(', 'class IQueryable source)', 'static !!TSource'),
  \ dotnet#method('First(', 'class IQueryable source, Expression predicate)', 'static !!TSource'),
  \ dotnet#method('FirstOrDefault(', 'class IQueryable source)', 'static !!TSource'),
  \ dotnet#method('FirstOrDefault(', 'class IQueryable source, Expression predicate)', 'static !!TSource'),
  \ dotnet#method('Last(', 'class IQueryable source)', 'static !!TSource'),
  \ dotnet#method('Last(', 'class IQueryable source, Expression predicate)', 'static !!TSource'),
  \ dotnet#method('LastOrDefault(', 'class IQueryable source)', 'static !!TSource'),
  \ dotnet#method('LastOrDefault(', 'class IQueryable source, Expression predicate)', 'static !!TSource'),
  \ dotnet#method('Single(', 'class IQueryable source)', 'static !!TSource'),
  \ dotnet#method('Single(', 'class IQueryable source, Expression predicate)', 'static !!TSource'),
  \ dotnet#method('SingleOrDefault(', 'class IQueryable source)', 'static !!TSource'),
  \ dotnet#method('SingleOrDefault(', 'class IQueryable source, Expression predicate)', 'static !!TSource'),
  \ dotnet#method('ElementAt(', 'class IQueryable source, int32 index)', 'static !!TSource'),
  \ dotnet#method('ElementAtOrDefault(', 'class IQueryable source, int32 index)', 'static !!TSource'),
  \ dotnet#method('DefaultIfEmpty(', 'class IQueryable source)', 'static IQueryable'),
  \ dotnet#method('DefaultIfEmpty(', 'class IQueryable source, !!TSource defaultValue)', 'static IQueryable'),
  \ dotnet#method('Contains(', 'class IQueryable source, !!TSource item)', 'static bool'),
  \ dotnet#method('Contains(', 'class IQueryable source, !!TSource item, IEqualityComparer comparer)', 'static bool'),
  \ dotnet#method('Reverse(', 'class IQueryable source)', 'static IQueryable'),
  \ dotnet#method('SequenceEqual(', 'class IQueryable source1, IEnumerable source2)', 'static bool'),
  \ dotnet#method('SequenceEqual(', 'class IQueryable source1, IEnumerable source2, IEqualityComparer comparer)', 'static bool'),
  \ dotnet#method('Any(', 'class IQueryable source)', 'static bool'),
  \ dotnet#method('Any(', 'class IQueryable source, Expression predicate)', 'static bool'),
  \ dotnet#method('All(', 'class IQueryable source, Expression predicate)', 'static bool'),
  \ dotnet#method('Count(', 'class IQueryable source)', 'static int32'),
  \ dotnet#method('Count(', 'class IQueryable source, Expression predicate)', 'static int32'),
  \ dotnet#method('LongCount(', 'class IQueryable source)', 'static int64'),
  \ dotnet#method('LongCount(', 'class IQueryable source, Expression predicate)', 'static int64'),
  \ dotnet#method('Min(', 'class IQueryable source)', 'static !!TSource'),
  \ dotnet#method('Min(', 'class IQueryable source, Expression selQueryable)', 'static !!TResult'),
  \ dotnet#method('Max(', 'class IQueryable source)', 'static !!TSource'),
  \ dotnet#method('Max(', 'class IQueryable source, Expression selQueryable)', 'static !!TResult'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static int32'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static int64'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static float32'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static float64'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static Decimal'),
  \ dotnet#method('Sum(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static int32'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static int64'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static float32'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static float64'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static Decimal'),
  \ dotnet#method('Sum(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static float64'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static float64'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static float32'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static float64'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static Decimal'),
  \ dotnet#method('Average(', 'class IQueryable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static float64'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static float32'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static float64'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static float64'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static Decimal'),
  \ dotnet#method('Average(', 'class IQueryable source, Expression selQueryable)', 'static Nullable'),
  \ dotnet#method('Aggregate(', 'class IQueryable source, Expression func)', 'static !!TSource'),
  \ dotnet#method('Aggregate(', 'class IQueryable source, !!TAccumulate seed, Expression func)', 'static !!TAccumulate'),
  \ dotnet#method('Aggregate(', 'class IQueryable source, !!TAccumulate seed, Expression func, Expression selQueryable)', 'static !!TResult'),
  \ ])

call dotnet#class('Enumerable', 'Object', [ 
  \ dotnet#method('Where(', 'class IEnumerable source, Func predicate)', 'static IEnumerable'),
  \ dotnet#method('Where(', 'class IEnumerable source, Func predicate)', 'static IEnumerable'),
  \ dotnet#method('Select(', 'class IEnumerable source, Func selEnumerable)', 'static IEnumerable'),
  \ dotnet#method('Select(', 'class IEnumerable source, Func selEnumerable)', 'static IEnumerable'),
  \ dotnet#method('SelectMany(', 'class IEnumerable source, Func selEnumerable)', 'static IEnumerable'),
  \ dotnet#method('SelectMany(', 'class IEnumerable source, Func selEnumerable)', 'static IEnumerable'),
  \ dotnet#method('SelectMany(', 'class IEnumerable source, Func collectionSelEnumerable, Func resultSelEnumerable)', 'static IEnumerable'),
  \ dotnet#method('SelectMany(', 'class IEnumerable source, Func collectionSelEnumerable, Func resultSelEnumerable)', 'static IEnumerable'),
  \ dotnet#method('Take(', 'class IEnumerable source, int32 count)', 'static IEnumerable'),
  \ dotnet#method('TakeWhile(', 'class IEnumerable source, Func predicate)', 'static IEnumerable'),
  \ dotnet#method('TakeWhile(', 'class IEnumerable source, Func predicate)', 'static IEnumerable'),
  \ dotnet#method('Skip(', 'class IEnumerable source, int32 count)', 'static IEnumerable'),
  \ dotnet#method('SkipWhile(', 'class IEnumerable source, Func predicate)', 'static IEnumerable'),
  \ dotnet#method('SkipWhile(', 'class IEnumerable source, Func predicate)', 'static IEnumerable'),
  \ dotnet#method('Join(', 'class IEnumerable outer, IEnumerable inner, Func outerKeySelEnumerable, Func innerKeySelEnumerable, Func resultSelEnumerable)', 'static IEnumerable'),
  \ dotnet#method('Join(', 'class IEnumerable outer, IEnumerable inner, Func outerKeySelEnumerable, Func innerKeySelEnumerable, Func resultSelEnumerable, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('GroupJoin(', 'class IEnumerable outer, IEnumerable inner, Func outerKeySelEnumerable, Func innerKeySelEnumerable, Func resultSelEnumerable)', 'static IEnumerable'),
  \ dotnet#method('GroupJoin(', 'class IEnumerable outer, IEnumerable inner, Func outerKeySelEnumerable, Func innerKeySelEnumerable, Func resultSelEnumerable, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('OrderBy(', 'class IEnumerable source, Func keySelEnumerable)', 'static IOrderedEnumerable'),
  \ dotnet#method('OrderBy(', 'class IEnumerable source, Func keySelEnumerable, IComparer comparer)', 'static IOrderedEnumerable'),
  \ dotnet#method('OrderByDescending(', 'class IEnumerable source, Func keySelEnumerable)', 'static IOrderedEnumerable'),
  \ dotnet#method('OrderByDescending(', 'class IEnumerable source, Func keySelEnumerable, IComparer comparer)', 'static IOrderedEnumerable'),
  \ dotnet#method('ThenBy(', 'class IOrderedEnumerable source, Func keySelEnumerable)', 'static IOrderedEnumerable'),
  \ dotnet#method('ThenBy(', 'class IOrderedEnumerable source, Func keySelEnumerable, IComparer comparer)', 'static IOrderedEnumerable'),
  \ dotnet#method('ThenByDescending(', 'class IOrderedEnumerable source, Func keySelEnumerable)', 'static IOrderedEnumerable'),
  \ dotnet#method('ThenByDescending(', 'class IOrderedEnumerable source, Func keySelEnumerable, IComparer comparer)', 'static IOrderedEnumerable'),
  \ dotnet#method('GroupBy(', 'class IEnumerable source, Func keySelEnumerable)', 'static IEnumerable'),
  \ dotnet#method('GroupBy(', 'class IEnumerable source, Func keySelEnumerable, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('GroupBy(', 'class IEnumerable source, Func keySelEnumerable, Func elementSelEnumerable)', 'static IEnumerable'),
  \ dotnet#method('GroupBy(', 'class IEnumerable source, Func keySelEnumerable, Func elementSelEnumerable, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('GroupBy(', 'class IEnumerable source, Func keySelEnumerable, Func resultSelEnumerable)', 'static IEnumerable'),
  \ dotnet#method('GroupBy(', 'class IEnumerable source, Func keySelEnumerable, Func elementSelEnumerable, Func resultSelEnumerable)', 'static IEnumerable'),
  \ dotnet#method('GroupBy(', 'class IEnumerable source, Func keySelEnumerable, Func resultSelEnumerable, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('GroupBy(', 'class IEnumerable source, Func keySelEnumerable, Func elementSelEnumerable, Func resultSelEnumerable, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('Concat(', 'class IEnumerable first, IEnumerable second)', 'static IEnumerable'),
  \ dotnet#method('Zip(', 'class IEnumerable first, IEnumerable second, Func resultSelEnumerable)', 'static IEnumerable'),
  \ dotnet#method('Distinct(', 'class IEnumerable source)', 'static IEnumerable'),
  \ dotnet#method('Distinct(', 'class IEnumerable source, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('Union(', 'class IEnumerable first, IEnumerable second)', 'static IEnumerable'),
  \ dotnet#method('Union(', 'class IEnumerable first, IEnumerable second, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('Intersect(', 'class IEnumerable first, IEnumerable second)', 'static IEnumerable'),
  \ dotnet#method('Intersect(', 'class IEnumerable first, IEnumerable second, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('Except(', 'class IEnumerable first, IEnumerable second)', 'static IEnumerable'),
  \ dotnet#method('Except(', 'class IEnumerable first, IEnumerable second, IEqualityComparer comparer)', 'static IEnumerable'),
  \ dotnet#method('Reverse(', 'class IEnumerable source)', 'static IEnumerable'),
  \ dotnet#method('SequenceEqual(', 'class IEnumerable first, IEnumerable second)', 'static bool'),
  \ dotnet#method('SequenceEqual(', 'class IEnumerable first, IEnumerable second, IEqualityComparer comparer)', 'static bool'),
  \ dotnet#method('AsEnumerable(', 'class IEnumerable source)', 'static IEnumerable'),
  \ dotnet#method('ToArray(', 'class IEnumerable source)', 'static !!TSource[]'),
  \ dotnet#method('ToList(', 'class IEnumerable source)', 'static List'),
  \ dotnet#method('ToDictionary(', 'class IEnumerable source, Func keySelEnumerable)', 'static Dictionary'),
  \ dotnet#method('ToDictionary(', 'class IEnumerable source, Func keySelEnumerable, IEqualityComparer comparer)', 'static Dictionary'),
  \ dotnet#method('ToDictionary(', 'class IEnumerable source, Func keySelEnumerable, Func elementSelEnumerable)', 'static Dictionary'),
  \ dotnet#method('ToDictionary(', 'class IEnumerable source, Func keySelEnumerable, Func elementSelEnumerable, IEqualityComparer comparer)', 'static Dictionary'),
  \ dotnet#method('ToLookup(', 'class IEnumerable source, Func keySelEnumerable)', 'static ILookup'),
  \ dotnet#method('ToLookup(', 'class IEnumerable source, Func keySelEnumerable, IEqualityComparer comparer)', 'static ILookup'),
  \ dotnet#method('ToLookup(', 'class IEnumerable source, Func keySelEnumerable, Func elementSelEnumerable)', 'static ILookup'),
  \ dotnet#method('ToLookup(', 'class IEnumerable source, Func keySelEnumerable, Func elementSelEnumerable, IEqualityComparer comparer)', 'static ILookup'),
  \ dotnet#method('DefaultIfEmpty(', 'class IEnumerable source)', 'static IEnumerable'),
  \ dotnet#method('DefaultIfEmpty(', 'class IEnumerable source, !!TSource defaultValue)', 'static IEnumerable'),
  \ dotnet#method('OfType(', 'class IEnumerable source)', 'static IEnumerable'),
  \ dotnet#method('Cast(', 'class IEnumerable source)', 'static IEnumerable'),
  \ dotnet#method('First(', 'class IEnumerable source)', 'static !!TSource'),
  \ dotnet#method('First(', 'class IEnumerable source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('FirstOrDefault(', 'class IEnumerable source)', 'static !!TSource'),
  \ dotnet#method('FirstOrDefault(', 'class IEnumerable source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('Last(', 'class IEnumerable source)', 'static !!TSource'),
  \ dotnet#method('Last(', 'class IEnumerable source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('LastOrDefault(', 'class IEnumerable source)', 'static !!TSource'),
  \ dotnet#method('LastOrDefault(', 'class IEnumerable source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('Single(', 'class IEnumerable source)', 'static !!TSource'),
  \ dotnet#method('Single(', 'class IEnumerable source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('SingleOrDefault(', 'class IEnumerable source)', 'static !!TSource'),
  \ dotnet#method('SingleOrDefault(', 'class IEnumerable source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('ElementAt(', 'class IEnumerable source, int32 index)', 'static !!TSource'),
  \ dotnet#method('ElementAtOrDefault(', 'class IEnumerable source, int32 index)', 'static !!TSource'),
  \ dotnet#method('Range(', 'int32 start, int32 count)', 'static IEnumerable'),
  \ dotnet#method('Repeat(', '!!TResult element, int32 count)', 'static IEnumerable'),
  \ dotnet#method('Empty(', ')', 'static IEnumerable'),
  \ dotnet#method('Any(', 'class IEnumerable source)', 'static bool'),
  \ dotnet#method('Any(', 'class IEnumerable source, Func predicate)', 'static bool'),
  \ dotnet#method('All(', 'class IEnumerable source, Func predicate)', 'static bool'),
  \ dotnet#method('Count(', 'class IEnumerable source)', 'static int32'),
  \ dotnet#method('Count(', 'class IEnumerable source, Func predicate)', 'static int32'),
  \ dotnet#method('LongCount(', 'class IEnumerable source)', 'static int64'),
  \ dotnet#method('LongCount(', 'class IEnumerable source, Func predicate)', 'static int64'),
  \ dotnet#method('Contains(', 'class IEnumerable source, !!TSource value)', 'static bool'),
  \ dotnet#method('Contains(', 'class IEnumerable source, !!TSource value, IEqualityComparer comparer)', 'static bool'),
  \ dotnet#method('Aggregate(', 'class IEnumerable source, Func func)', 'static !!TSource'),
  \ dotnet#method('Aggregate(', 'class IEnumerable source, !!TAccumulate seed, Func func)', 'static !!TAccumulate'),
  \ dotnet#method('Aggregate(', 'class IEnumerable source, !!TAccumulate seed, Func func, Func resultSelEnumerable)', 'static !!TResult'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static int32'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static int64'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static float32'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static float64'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static Decimal'),
  \ dotnet#method('Sum(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static int32'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static int64'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static float32'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static float64'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static Decimal'),
  \ dotnet#method('Sum(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static int32'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static int64'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static float32'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static float64'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static Decimal'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source)', 'static !!TSource'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static int32'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static int64'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static float32'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static float64'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static Decimal'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class IEnumerable source, Func selEnumerable)', 'static !!TResult'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static int32'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static int64'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static float64'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static float32'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static Decimal'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source)', 'static !!TSource'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static int32'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static int64'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static float32'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static float64'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static Decimal'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class IEnumerable source, Func selEnumerable)', 'static !!TResult'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static float64'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static float64'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static float32'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static float64'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static Decimal'),
  \ dotnet#method('Average(', 'class IEnumerable source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static float64'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static float64'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static float32'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static float64'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static Decimal'),
  \ dotnet#method('Average(', 'class IEnumerable source, Func selEnumerable)', 'static Nullable'),
  \ ])

call dotnet#class('Lookup', 'Object', [ 
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Item(', '!TKey key)', ''),
  \ dotnet#method('Contains(', '!TKey key)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(!TKey)', 'IEnumerable'),
  \ ])

call dotnet#class('ParallelEnumerable', 'Object', [ 
  \ dotnet#method('AsParallel(', 'class IEnumerable source)', 'static ParallelQuery'),
  \ dotnet#method('AsParallel(', 'class Partitioner source)', 'static ParallelQuery'),
  \ dotnet#method('AsOrdered(', 'class ParallelQuery source)', 'static ParallelQuery'),
  \ dotnet#method('AsOrdered(', 'class ParallelQuery source)', 'static ParallelQuery'),
  \ dotnet#method('AsUnordered(', 'class ParallelQuery source)', 'static ParallelQuery'),
  \ dotnet#method('AsParallel(', 'class IEnumerable source)', 'static ParallelQuery'),
  \ dotnet#method('AsSequential(', 'class ParallelQuery source)', 'static IEnumerable'),
  \ dotnet#method('WithDegreeOfParallelism(', 'class ParallelQuery source, int32 degreeOfParallelism)', 'static ParallelQuery'),
  \ dotnet#method('WithCancellation(', 'class ParallelQuery source, CancellationToken cancellationToken)', 'static ParallelQuery'),
  \ dotnet#method('WithExecutionMode(', 'class ParallelQuery source, ParallelExecutionMode executionMode)', 'static ParallelQuery'),
  \ dotnet#method('WithMergeOptions(', 'class ParallelQuery source, ParallelMergeOptions mergeOptions)', 'static ParallelQuery'),
  \ dotnet#method('Range(', 'int32 start, int32 count)', 'static ParallelQuery'),
  \ dotnet#method('Repeat(', '!!TResult element, int32 count)', 'static ParallelQuery'),
  \ dotnet#method('Empty(', ')', 'static ParallelQuery'),
  \ dotnet#method('ForAll(', 'class ParallelQuery source, Action action)', 'static void'),
  \ dotnet#method('Where(', 'class ParallelQuery source, Func predicate)', 'static ParallelQuery'),
  \ dotnet#method('Where(', 'class ParallelQuery source, Func predicate)', 'static ParallelQuery'),
  \ dotnet#method('Select(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('Select(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('Zip(', 'class ParallelQuery first, ParallelQuery second, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('Zip(', 'class ParallelQuery first, IEnumerable second, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('Join(', 'class ParallelQuery outer, ParallelQuery inner, Func outerKeySelParallelEnumerable, Func innerKeySelParallelEnumerable, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('Join(', 'class ParallelQuery outer, IEnumerable inner, Func outerKeySelParallelEnumerable, Func innerKeySelParallelEnumerable, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('Join(', 'class ParallelQuery outer, ParallelQuery inner, Func outerKeySelParallelEnumerable, Func innerKeySelParallelEnumerable, Func resultSelParallelEnumerable, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('Join(', 'class ParallelQuery outer, IEnumerable inner, Func outerKeySelParallelEnumerable, Func innerKeySelParallelEnumerable, Func resultSelParallelEnumerable, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('GroupJoin(', 'class ParallelQuery outer, ParallelQuery inner, Func outerKeySelParallelEnumerable, Func innerKeySelParallelEnumerable, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('GroupJoin(', 'class ParallelQuery outer, IEnumerable inner, Func outerKeySelParallelEnumerable, Func innerKeySelParallelEnumerable, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('GroupJoin(', 'class ParallelQuery outer, ParallelQuery inner, Func outerKeySelParallelEnumerable, Func innerKeySelParallelEnumerable, Func resultSelParallelEnumerable, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('GroupJoin(', 'class ParallelQuery outer, IEnumerable inner, Func outerKeySelParallelEnumerable, Func innerKeySelParallelEnumerable, Func resultSelParallelEnumerable, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('SelectMany(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('SelectMany(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('SelectMany(', 'class ParallelQuery source, Func collectionSelParallelEnumerable, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('SelectMany(', 'class ParallelQuery source, Func collectionSelParallelEnumerable, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('OrderBy(', 'class ParallelQuery source, Func keySelParallelEnumerable)', 'static OrderedParallelQuery'),
  \ dotnet#method('OrderBy(', 'class ParallelQuery source, Func keySelParallelEnumerable, IComparer comparer)', 'static OrderedParallelQuery'),
  \ dotnet#method('OrderByDescending(', 'class ParallelQuery source, Func keySelParallelEnumerable)', 'static OrderedParallelQuery'),
  \ dotnet#method('OrderByDescending(', 'class ParallelQuery source, Func keySelParallelEnumerable, IComparer comparer)', 'static OrderedParallelQuery'),
  \ dotnet#method('ThenBy(', 'class OrderedParallelQuery source, Func keySelParallelEnumerable)', 'static OrderedParallelQuery'),
  \ dotnet#method('ThenBy(', 'class OrderedParallelQuery source, Func keySelParallelEnumerable, IComparer comparer)', 'static OrderedParallelQuery'),
  \ dotnet#method('ThenByDescending(', 'class OrderedParallelQuery source, Func keySelParallelEnumerable)', 'static OrderedParallelQuery'),
  \ dotnet#method('ThenByDescending(', 'class OrderedParallelQuery source, Func keySelParallelEnumerable, IComparer comparer)', 'static OrderedParallelQuery'),
  \ dotnet#method('GroupBy(', 'class ParallelQuery source, Func keySelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('GroupBy(', 'class ParallelQuery source, Func keySelParallelEnumerable, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('GroupBy(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func elementSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('GroupBy(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func elementSelParallelEnumerable, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('GroupBy(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('GroupBy(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func resultSelParallelEnumerable, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('GroupBy(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func elementSelParallelEnumerable, Func resultSelParallelEnumerable)', 'static ParallelQuery'),
  \ dotnet#method('GroupBy(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func elementSelParallelEnumerable, Func resultSelParallelEnumerable, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('Aggregate(', 'class ParallelQuery source, Func func)', 'static !!TSource'),
  \ dotnet#method('Aggregate(', 'class ParallelQuery source, !!TAccumulate seed, Func func)', 'static !!TAccumulate'),
  \ dotnet#method('Aggregate(', 'class ParallelQuery source, !!TAccumulate seed, Func func, Func resultSelParallelEnumerable)', 'static !!TResult'),
  \ dotnet#method('Aggregate(', 'class ParallelQuery source, !!TAccumulate seed, Func updateAccumulatorFunc, Func combineAccumulatorsFunc, Func resultSelParallelEnumerable)', 'static !!TResult'),
  \ dotnet#method('Aggregate(', 'class ParallelQuery source, Func seedFParallelEnumerabley, Func updateAccumulatorFunc, Func combineAccumulatorsFunc, Func resultSelParallelEnumerable)', 'static !!TResult'),
  \ dotnet#method('Count(', 'class ParallelQuery source)', 'static int32'),
  \ dotnet#method('Count(', 'class ParallelQuery source, Func predicate)', 'static int32'),
  \ dotnet#method('LongCount(', 'class ParallelQuery source)', 'static int64'),
  \ dotnet#method('LongCount(', 'class ParallelQuery source, Func predicate)', 'static int64'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static int32'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static int64'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static float32'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static float64'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static Decimal'),
  \ dotnet#method('Sum(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static int32'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static int64'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float32'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float64'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Decimal'),
  \ dotnet#method('Sum(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static int32'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static int64'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static float32'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static float64'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static Decimal'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source)', 'static !!TSource'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static int32'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static int64'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float32'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float64'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Decimal'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Min(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static !!TResult'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static int32'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static int64'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static float32'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static float64'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static Decimal'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source)', 'static !!TSource'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static int32'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static int64'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float32'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float64'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Decimal'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Max(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static !!TResult'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static float64'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static float64'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static float32'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static float64'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static Decimal'),
  \ dotnet#method('Average(', 'class ParallelQuery source)', 'static Nullable'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float64'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float64'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float32'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static float64'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Decimal'),
  \ dotnet#method('Average(', 'class ParallelQuery source, Func selParallelEnumerable)', 'static Nullable'),
  \ dotnet#method('Any(', 'class ParallelQuery source, Func predicate)', 'static bool'),
  \ dotnet#method('Any(', 'class ParallelQuery source)', 'static bool'),
  \ dotnet#method('All(', 'class ParallelQuery source, Func predicate)', 'static bool'),
  \ dotnet#method('Contains(', 'class ParallelQuery source, !!TSource value)', 'static bool'),
  \ dotnet#method('Contains(', 'class ParallelQuery source, !!TSource value, IEqualityComparer comparer)', 'static bool'),
  \ dotnet#method('Take(', 'class ParallelQuery source, int32 count)', 'static ParallelQuery'),
  \ dotnet#method('TakeWhile(', 'class ParallelQuery source, Func predicate)', 'static ParallelQuery'),
  \ dotnet#method('TakeWhile(', 'class ParallelQuery source, Func predicate)', 'static ParallelQuery'),
  \ dotnet#method('Skip(', 'class ParallelQuery source, int32 count)', 'static ParallelQuery'),
  \ dotnet#method('SkipWhile(', 'class ParallelQuery source, Func predicate)', 'static ParallelQuery'),
  \ dotnet#method('SkipWhile(', 'class ParallelQuery source, Func predicate)', 'static ParallelQuery'),
  \ dotnet#method('Concat(', 'class ParallelQuery first, ParallelQuery second)', 'static ParallelQuery'),
  \ dotnet#method('Concat(', 'class ParallelQuery first, IEnumerable second)', 'static ParallelQuery'),
  \ dotnet#method('SequenceEqual(', 'class ParallelQuery first, ParallelQuery second)', 'static bool'),
  \ dotnet#method('SequenceEqual(', 'class ParallelQuery first, IEnumerable second)', 'static bool'),
  \ dotnet#method('SequenceEqual(', 'class ParallelQuery first, ParallelQuery second, IEqualityComparer comparer)', 'static bool'),
  \ dotnet#method('SequenceEqual(', 'class ParallelQuery first, IEnumerable second, IEqualityComparer comparer)', 'static bool'),
  \ dotnet#method('Distinct(', 'class ParallelQuery source)', 'static ParallelQuery'),
  \ dotnet#method('Distinct(', 'class ParallelQuery source, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('Union(', 'class ParallelQuery first, ParallelQuery second)', 'static ParallelQuery'),
  \ dotnet#method('Union(', 'class ParallelQuery first, IEnumerable second)', 'static ParallelQuery'),
  \ dotnet#method('Union(', 'class ParallelQuery first, ParallelQuery second, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('Union(', 'class ParallelQuery first, IEnumerable second, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('Intersect(', 'class ParallelQuery first, ParallelQuery second)', 'static ParallelQuery'),
  \ dotnet#method('Intersect(', 'class ParallelQuery first, IEnumerable second)', 'static ParallelQuery'),
  \ dotnet#method('Intersect(', 'class ParallelQuery first, ParallelQuery second, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('Intersect(', 'class ParallelQuery first, IEnumerable second, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('Except(', 'class ParallelQuery first, ParallelQuery second)', 'static ParallelQuery'),
  \ dotnet#method('Except(', 'class ParallelQuery first, IEnumerable second)', 'static ParallelQuery'),
  \ dotnet#method('Except(', 'class ParallelQuery first, ParallelQuery second, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('Except(', 'class ParallelQuery first, IEnumerable second, IEqualityComparer comparer)', 'static ParallelQuery'),
  \ dotnet#method('AsEnumerable(', 'class ParallelQuery source)', 'static IEnumerable'),
  \ dotnet#method('ToArray(', 'class ParallelQuery source)', 'static !!TSource[]'),
  \ dotnet#method('ToList(', 'class ParallelQuery source)', 'static List'),
  \ dotnet#method('ToDictionary(', 'class ParallelQuery source, Func keySelParallelEnumerable)', 'static Dictionary'),
  \ dotnet#method('ToDictionary(', 'class ParallelQuery source, Func keySelParallelEnumerable, IEqualityComparer comparer)', 'static Dictionary'),
  \ dotnet#method('ToDictionary(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func elementSelParallelEnumerable)', 'static Dictionary'),
  \ dotnet#method('ToDictionary(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func elementSelParallelEnumerable, IEqualityComparer comparer)', 'static Dictionary'),
  \ dotnet#method('ToLookup(', 'class ParallelQuery source, Func keySelParallelEnumerable)', 'static ILookup'),
  \ dotnet#method('ToLookup(', 'class ParallelQuery source, Func keySelParallelEnumerable, IEqualityComparer comparer)', 'static ILookup'),
  \ dotnet#method('ToLookup(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func elementSelParallelEnumerable)', 'static ILookup'),
  \ dotnet#method('ToLookup(', 'class ParallelQuery source, Func keySelParallelEnumerable, Func elementSelParallelEnumerable, IEqualityComparer comparer)', 'static ILookup'),
  \ dotnet#method('Reverse(', 'class ParallelQuery source)', 'static ParallelQuery'),
  \ dotnet#method('OfType(', 'class ParallelQuery source)', 'static ParallelQuery'),
  \ dotnet#method('Cast(', 'class ParallelQuery source)', 'static ParallelQuery'),
  \ dotnet#method('First(', 'class ParallelQuery source)', 'static !!TSource'),
  \ dotnet#method('First(', 'class ParallelQuery source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('FirstOrDefault(', 'class ParallelQuery source)', 'static !!TSource'),
  \ dotnet#method('FirstOrDefault(', 'class ParallelQuery source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('Last(', 'class ParallelQuery source)', 'static !!TSource'),
  \ dotnet#method('Last(', 'class ParallelQuery source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('LastOrDefault(', 'class ParallelQuery source)', 'static !!TSource'),
  \ dotnet#method('LastOrDefault(', 'class ParallelQuery source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('Single(', 'class ParallelQuery source)', 'static !!TSource'),
  \ dotnet#method('Single(', 'class ParallelQuery source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('SingleOrDefault(', 'class ParallelQuery source)', 'static !!TSource'),
  \ dotnet#method('SingleOrDefault(', 'class ParallelQuery source, Func predicate)', 'static !!TSource'),
  \ dotnet#method('DefaultIfEmpty(', 'class ParallelQuery source)', 'static ParallelQuery'),
  \ dotnet#method('DefaultIfEmpty(', 'class ParallelQuery source, !!TSource defaultValue)', 'static ParallelQuery'),
  \ dotnet#method('ElementAt(', 'class ParallelQuery source, int32 index)', 'static !!TSource'),
  \ dotnet#method('ElementAtOrDefault(', 'class ParallelQuery source, int32 index)', 'static !!TSource'),
  \ ])

call dotnet#class('EnumerableQuery', 'Object', [ 
  \ dotnet#method('get_Expression(', ')', 'abstract strict'),
  \ dotnet#method('EnumerableQuery(', ')', 'void'),
  \ dotnet#prop('Expression', 'Expression'),
  \ ])

call dotnet#class('EnumerableQuery', 'EnumerableQuery', [ 
  \ dotnet#method('get_Provider(', ')', ''),
  \ dotnet#method('EnumerableQuery`1(', 'class Expression expression)', 'void EnumerableQuery`'),
  \ dotnet#method('get_Expression(', ')', 'strict'),
  \ dotnet#method('get_Expression(', ')', ''),
  \ dotnet#method('get_ElementType(', ')', ''),
  \ dotnet#method('CreateQuery(', 'class Expression expression)', ''),
  \ dotnet#method('CreateQuery(', 'class Expression expression)', ''),
  \ dotnet#method('Execute(', 'class Expression expression)', 'object '),
  \ dotnet#method('Execute(', 'class Expression expression)', '!!S '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Provider', 'IQueryProvider'),
  \ dotnet#prop('Expression', 'Expression'),
  \ dotnet#prop('Expression', 'Expression'),
  \ dotnet#prop('ElementType', 'Type'),
  \ ])

call dotnet#class('EnumerableExecutor', 'Object', [ 
  \ dotnet#method('EnumerableExecutor(', ')', 'void'),
  \ ])

call dotnet#class('EnumerableExecutor', 'EnumerableExecutor', [ 
  \ dotnet#method('EnumerableExecutor`1(', 'class Expression expression)', 'void EnumerableExecutor`'),
  \ ])

call dotnet#class('ParallelQuery', 'Object', [ 
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ ])

call dotnet#class('ParallelQuery', 'ParallelQuery', [ 
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ ])

call dotnet#class('OrderedParallelQuery', 'ParallelQuery', [ 
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ ])

