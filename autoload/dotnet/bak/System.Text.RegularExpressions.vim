call dotnet#namespace('System.Text.RegularExpressions')

call dotnet#class('Regex', 'Object', [ 
  \ dotnet#field('pattern', 'string'),
  \ dotnet#field('fRegexy', 'RegexRunnerFRegexy'),
  \ dotnet#field('roptions', 'RegexOptions'),
  \ dotnet#field('caps', 'Hashtable'),
  \ dotnet#field('capnames', 'Hashtable'),
  \ dotnet#field('capslist', 'string[]'),
  \ dotnet#field('capsize', 'int32'),
  \ dotnet#method('Regex(', ')', 'void'),
  \ dotnet#method('Regex(', 'string pattern)', 'void'),
  \ dotnet#method('Regex(', 'string pattern, RegexOptions options)', 'void'),
  \ dotnet#method('Regex(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo si, StreamingContext context)', 'void '),
  \ dotnet#method('Escape(', 'string str)', 'static string'),
  \ dotnet#method('Unescape(', 'string str)', 'static string'),
  \ dotnet#method('get_CacheSize(', ')', 'static int32'),
  \ dotnet#method('set_CacheSize(', 'int32 value)', 'static void'),
  \ dotnet#method('get_Options(', ')', 'RegexOptions'),
  \ dotnet#method('get_RightToLeft(', ')', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetGroupNames(', ')', 'string[]'),
  \ dotnet#method('GetGroupNumbers(', ')', 'int32[]'),
  \ dotnet#method('GroupNameFromNumber(', 'int32 i)', 'string'),
  \ dotnet#method('GroupNumberFromName(', 'string name)', 'int32'),
  \ dotnet#method('IsMatch(', 'string input, string pattern)', 'static bool'),
  \ dotnet#method('IsMatch(', 'string input, string pattern, RegexOptions options)', 'static bool'),
  \ dotnet#method('IsMatch(', 'string input)', 'bool'),
  \ dotnet#method('IsMatch(', 'string input, int32 startat)', 'bool'),
  \ dotnet#method('Match(', 'string input, string pattern)', 'static Match'),
  \ dotnet#method('Match(', 'string input, string pattern, RegexOptions options)', 'static Match'),
  \ dotnet#method('Match(', 'string input)', 'Match'),
  \ dotnet#method('Match(', 'string input, int32 startat)', 'Match'),
  \ dotnet#method('Match(', 'string input, int32 beginning, int32 length)', 'Match'),
  \ dotnet#method('Matches(', 'string input, string pattern)', 'static MatchCollection'),
  \ dotnet#method('Matches(', 'string input, string pattern, RegexOptions options)', 'static MatchCollection'),
  \ dotnet#method('Matches(', 'string input)', 'MatchCollection'),
  \ dotnet#method('Matches(', 'string input, int32 startat)', 'MatchCollection'),
  \ dotnet#method('Replace(', 'string input, string pattern, string replacement)', 'static string'),
  \ dotnet#method('Replace(', 'string input, string pattern, string replacement, RegexOptions options)', 'static string'),
  \ dotnet#method('Replace(', 'string input, string replacement)', 'string'),
  \ dotnet#method('Replace(', 'string input, string replacement, int32 count)', 'string'),
  \ dotnet#method('Replace(', 'string input, string replacement, int32 count, int32 startat)', 'string'),
  \ dotnet#method('Replace(', 'string input, string pattern, MatchEvaluator evaluator)', 'static string'),
  \ dotnet#method('Replace(', 'string input, string pattern, MatchEvaluator evaluator, RegexOptions options)', 'static string'),
  \ dotnet#method('Replace(', 'string input, MatchEvaluator evaluator)', 'string'),
  \ dotnet#method('Replace(', 'string input, MatchEvaluator evaluator, int32 count)', 'string'),
  \ dotnet#method('Replace(', 'string input, MatchEvaluator evaluator, int32 count, int32 startat)', 'string'),
  \ dotnet#method('Split(', 'string input, string pattern)', 'static string[]'),
  \ dotnet#method('Split(', 'string input, string pattern, RegexOptions options)', 'static string[]'),
  \ dotnet#method('Split(', 'string input)', 'string[]'),
  \ dotnet#method('Split(', 'string input, int32 count)', 'string[]'),
  \ dotnet#method('Split(', 'string input, int32 count, int32 startat)', 'string[]'),
  \ dotnet#method('CompileToAssembly(', 'class RegexCompilationInfo[] regexinfos, AssemblyName assemblyname)', 'static void'),
  \ dotnet#method('CompileToAssembly(', 'class RegexCompilationInfo[] regexinfos, AssemblyName assemblyname, CustomAttributeBuilder[] attributes)', 'static void'),
  \ dotnet#method('CompileToAssembly(', 'class RegexCompilationInfo[] regexinfos, AssemblyName assemblyname, CustomAttributeBuilder[] attributes, string resourceFile)', 'static void'),
  \ dotnet#method('InitializeReferences(', ')', 'void'),
  \ dotnet#method('UseOptionC(', ')', 'bool'),
  \ dotnet#method('UseOptionR(', ')', 'bool'),
  \ dotnet#method('Regex(', ')', 'static void .'),
  \ dotnet#prop('CacheSize', 'int32'),
  \ dotnet#prop('Options', 'RegexOptions'),
  \ dotnet#prop('RightToLeft', 'bool'),
  \ ])

call dotnet#class('MatchEvaluator', 'MulticastDelegate', [ 
  \ dotnet#method('MatchEvaluator(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class Match match)', 'string'),
  \ dotnet#method('BeginInvoke(', 'class Match match, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'string'),
  \ ])

call dotnet#class('Capture', 'Object', [ 
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Value(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Value', 'string'),
  \ ])

call dotnet#class('CaptureCollection', 'Object', [ 
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Item(', 'int32 i)', 'Capture'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'Capture'),
  \ ])

call dotnet#class('RegexCompilationInfo', 'Object', [ 
  \ dotnet#method('RegexCompilationInfo(', 'string pattern, RegexOptions options, string name, string fullnamespace, bool ispublic)', 'void'),
  \ dotnet#method('get_Pattern(', ')', 'string'),
  \ dotnet#method('set_Pattern(', 'string value)', 'void'),
  \ dotnet#method('get_Options(', ')', 'RegexOptions'),
  \ dotnet#method('set_Options(', 'RegexOptions value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Namespace(', ')', 'string'),
  \ dotnet#method('set_Namespace(', 'string value)', 'void'),
  \ dotnet#method('get_IsPublic(', ')', 'bool'),
  \ dotnet#method('set_IsPublic(', 'bool value)', 'void'),
  \ dotnet#prop('Pattern', 'string'),
  \ dotnet#prop('Options', 'RegexOptions'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Namespace', 'string'),
  \ dotnet#prop('IsPublic', 'bool'),
  \ ])

call dotnet#class('Group', 'Capture', [ 
  \ dotnet#method('get_Success(', ')', 'bool'),
  \ dotnet#method('get_Captures(', ')', 'CaptureCollection'),
  \ dotnet#method('Synchronized(', 'class Group inner)', 'static Group'),
  \ dotnet#method('Group(', ')', 'static void .'),
  \ dotnet#prop('Success', 'bool'),
  \ dotnet#prop('Captures', 'CaptureCollection'),
  \ ])

call dotnet#class('GroupCollection', 'Object', [ 
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Item(', 'int32 groupnum)', 'Group'),
  \ dotnet#method('get_Item(', 'string groupname)', 'Group'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'Group'),
  \ dotnet#prop('Item(string)', 'Group'),
  \ ])

call dotnet#class('RegexRunner', 'Object', [ 
  \ dotnet#field('runtextbeg', 'int32'),
  \ dotnet#field('runtextend', 'int32'),
  \ dotnet#field('runtextstart', 'int32'),
  \ dotnet#field('runtext', 'string'),
  \ dotnet#field('runtextpos', 'int32'),
  \ dotnet#field('runtrack', 'int32[]'),
  \ dotnet#field('runtrackpos', 'int32'),
  \ dotnet#field('runstack', 'int32[]'),
  \ dotnet#field('runstackpos', 'int32'),
  \ dotnet#field('runcrawl', 'int32[]'),
  \ dotnet#field('runcrawlpos', 'int32'),
  \ dotnet#field('runtrackcount', 'int32'),
  \ dotnet#field('runmatch', 'Match'),
  \ dotnet#field('runregex', 'Regex'),
  \ dotnet#method('RegexRunner(', ')', 'famorassem void'),
  \ dotnet#method('Scan(', 'class Regex regex, string text, int32 textbeg, int32 textend, int32 textstart, int32 prevlen, bool quick)', 'famorassem Match'),
  \ dotnet#method('Go(', ')', 'abstract void'),
  \ dotnet#method('FindFirstChar(', ')', 'abstract bool'),
  \ dotnet#method('InitTrackCount(', ')', 'abstract void'),
  \ dotnet#method('EnsureStorage(', ')', 'void'),
  \ dotnet#method('IsBoundary(', 'int32 index, int32 startpos, int32 endpos)', 'bool'),
  \ dotnet#method('IsECMABoundary(', 'int32 index, int32 startpos, int32 endpos)', 'bool'),
  \ dotnet#method('CharInSet(', 'char ch, string set, string category)', 'static bool'),
  \ dotnet#method('CharInClass(', 'char ch, string charClass)', 'static bool'),
  \ dotnet#method('DoubleTrack(', ')', 'void'),
  \ dotnet#method('DoubleStack(', ')', 'void'),
  \ dotnet#method('DoubleCrawl(', ')', 'void'),
  \ dotnet#method('Crawl(', 'int32 i)', 'void'),
  \ dotnet#method('Popcrawl(', ')', 'int32'),
  \ dotnet#method('Crawlpos(', ')', 'int32'),
  \ dotnet#method('Capture(', 'int32 capnum, int32 start, int32 end)', 'void'),
  \ dotnet#method('TransferCapture(', 'int32 capnum, int32 uncapnum, int32 start, int32 end)', 'void'),
  \ dotnet#method('Uncapture(', ')', 'void'),
  \ dotnet#method('IsMatched(', 'int32 cap)', 'bool'),
  \ dotnet#method('MatchIndex(', 'int32 cap)', 'int32'),
  \ dotnet#method('MatchLength(', 'int32 cap)', 'int32'),
  \ ])

call dotnet#class('Match', 'Group', [ 
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('get_Groups(', ')', ''),
  \ dotnet#method('NextMatch(', ')', 'Match'),
  \ dotnet#method('Result(', 'string replacement)', 'string'),
  \ dotnet#method('Synchronized(', 'class Match inner)', 'static Match'),
  \ dotnet#method('Match(', ')', 'static void .'),
  \ dotnet#prop('Empty', 'Match'),
  \ dotnet#prop('Groups', 'GroupCollection'),
  \ ])

call dotnet#class('MatchCollection', 'Object', [ 
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_Item(', 'int32 i)', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('MatchCollection(', ')', 'static void .'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'Match'),
  \ ])

call dotnet#class('RegexRunnerFRegexRunnerFactoryy', 'Object', [ 
  \ dotnet#method('RegexRunnerFactory(', ')', 'void'),
  \ dotnet#method('CreateInstance(', ')', 'famorassem abstract'),
  \ ])

