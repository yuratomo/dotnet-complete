call dotnet#namespace('System.Windows.Markup')

call dotnet#class('DesignerSerializationOptionsAttribute', 'Attribute', [ 
  \ dotnet#method('DesignerSerializationOptionsAttribute(', 'DesignerSerializationOptions designerSerializationOptions)', 'void'),
  \ dotnet#method('get_DesignerSerializationOptions(', ')', 'DesignerSerializationOptions'),
  \ dotnet#prop('DesignerSerializationOptions', 'DesignerSerializationOptions'),
  \ ])

call dotnet#class('InternalTypeHelper', 'Object', [ 
  \ dotnet#method('InternalTypeHelper(', ')', 'void'),
  \ dotnet#method('CreateInstance(', 'class Type type, CultureInfo culture)', 'famorassem abstract object'),
  \ dotnet#method('GetPropertyValue(', 'class PropertyInfo propertyInfo, object target, CultureInfo culture)', 'famorassem abstract object'),
  \ dotnet#method('SetPropertyValue(', 'class PropertyInfo propertyInfo, object target, object value, CultureInfo culture)', 'famorassem abstract void'),
  \ dotnet#method('CreateDelegate(', 'class Type delegateType, object target, string handler)', 'famorassem abstract'),
  \ dotnet#method('AddEventHandler(', 'class EventInfo eventInfo, object target, Delegate handler)', 'famorassem abstract void'),
  \ ])

call dotnet#class('ServiceProviders', 'Object', [ 
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object'),
  \ dotnet#method('AddService(', 'class Type serviceType, object service)', 'void'),
  \ dotnet#method('ServiceProviders(', ')', 'void'),
  \ ])

call dotnet#class('XmlLanguage', 'Object', [ 
  \ dotnet#field('_start', 'XmlLanguage'),
  \ dotnet#method('XmlLanguage(', 'class XmlLanguage start)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'XmlLanguage/MatchingLanguageEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#field('_start', 'XmlLanguage'),
  \ dotnet#field('_current', 'XmlLanguage'),
  \ dotnet#field('_atStart', 'bool'),
  \ dotnet#field('_pastEnd', 'bool'),
  \ dotnet#field('_maxCultureDepth', 'int32'),
  \ dotnet#method('XmlLanguage(', 'class XmlLanguage start)', 'void'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#prop('Current', 'XmlLanguage'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('GetLanguage(', 'string ietfLanguageTag)', 'static XmlLanguage'),
  \ dotnet#method('get_IetfLanguageTag(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetEquivalentCulture(', ')', 'CultureInfo'),
  \ dotnet#method('GetSpecificCulture(', ')', 'CultureInfo'),
  \ dotnet#method('GetCompatibleCulture(', ')', 'CultureInfo'),
  \ dotnet#method('RangeIncludes(', 'class XmlLanguage language)', 'bool'),
  \ dotnet#method('RangeIncludes(', 'class CultureInfo culture)', 'bool'),
  \ dotnet#method('GetSpecificity(', ')', 'int32'),
  \ dotnet#method('get_MatchingLanguages(', ')', '.method'),
  \ dotnet#method('XmlLanguage(', ')', 'static void .'),
  \ dotnet#prop('Empty', 'XmlLanguage'),
  \ dotnet#prop('IetfLanguageTag', 'string'),
  \ dotnet#prop('MatchingLanguages', 'XmlLanguage/MatchingLanguageCollection'),
  \ ])

call dotnet#class('XmlLanguageConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('XmlLanguageConverter(', ')', 'void'),
  \ ])

call dotnet#class('ComponentResourceKeyConverter', 'ExpressionConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('ComponentResourceKeyConverter(', ')', 'void'),
  \ ])

call dotnet#class('EventSetterHandlerConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('EventSetterHandlerConverter(', ')', 'void'),
  \ ])

call dotnet#class('ResourceReferenceExpressionConverter', 'ExpressionConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('ResourceReferenceExpressionConverter(', ')', 'void'),
  \ ])

call dotnet#class('XamlTypeMapper', 'Object', [ 
  \ dotnet#method('XamlTypeMapper(', 'class ConstrXamlTypeMapperInfo[] constrXamlTypeMappers)', 'void'),
  \ dotnet#method('GetParameters(', 'int32 constrXamlTypeMapperIndex)', 'ParameterInfo[]'),
  \ dotnet#method('get_ConstrXamlTypeMappers(', ')', '.method'),
  \ dotnet#prop('ConstrXamlTypeMappers', 'ConstrXamlTypeMapperInfo[]'),
  \ dotnet#method('XamlTypeMapper(', 'class Type baseType)', 'void'),
  \ dotnet#method('get_ClrNamespace(', ')', 'string'),
  \ dotnet#method('set_ClrNamespace(', 'string value)', 'void'),
  \ dotnet#method('get_BaseType(', ')', '.method'),
  \ dotnet#method('get_Converter(', ')', '.method'),
  \ dotnet#method('set_Converter(', 'class TypeConverter value)', 'void'),
  \ dotnet#method('get_TypeConverterType(', ')', '.method'),
  \ dotnet#method('set_TypeConverterType(', 'class Type value)', 'void'),
  \ dotnet#method('get_TrimSurroundingWhitespace(', ')', 'bool'),
  \ dotnet#method('set_TrimSurroundingWhitespace(', 'bool value)', 'void'),
  \ dotnet#method('get_TrimSurroundingWhitespaceSet(', ')', 'bool'),
  \ dotnet#method('set_TrimSurroundingWhitespaceSet(', 'bool value)', 'void'),
  \ dotnet#method('GetPropertyAndType(', 'string dpName)', 'XamlTypeMapper/PropertyAndType'),
  \ dotnet#method('SetPropertyAndType(', 'string dpName, PropertyInfo dpInfo, Type ownerType, bool isInternal)', 'void'),
  \ dotnet#method('get_PropertyConverters(', ')', '.method'),
  \ dotnet#method('SetPropertyConverter(', 'object dpOrPi, TypeConverter converter)', 'void'),
  \ dotnet#prop('ClrNamespace', 'string'),
  \ dotnet#prop('BaseType', 'Type'),
  \ dotnet#prop('Converter', 'TypeConverter'),
  \ dotnet#prop('TypeConverterType', 'Type'),
  \ dotnet#prop('TrimSurroundingWhitespace', 'bool'),
  \ dotnet#prop('TrimSurroundingWhitespaceSet', 'bool'),
  \ dotnet#prop('PropertyConverters', 'HybridDictionary'),
  \ dotnet#field('PropInfo', 'PropertyInfo'),
  \ dotnet#field('Setter', 'MethodInfo'),
  \ dotnet#field('OwnerType', 'Type'),
  \ dotnet#field('PropInfoSet', 'bool'),
  \ dotnet#field('SetterSet', 'bool'),
  \ dotnet#field('IsInternal', 'bool'),
  \ dotnet#method('XamlTypeMapper(', 'class MethodInfo dpSetter, PropertyInfo dpInfo, bool setterSet, bool propInfoSet, Type ot, bool isInternal)', 'void'),
  \ dotnet#method('XamlTypeMapper(', 'class XamlTypeMapper typeMapper)', 'void'),
  \ dotnet#method('GetAllXamlNamespaces(', ')', 'IEnumerable'),
  \ dotnet#method('GetXamlType(', 'class Type type)', 'XamlType'),
  \ dotnet#method('TryGetCompatibleXamlNamespace(', 'string xamlNamespace, [out] string& compatibleNamespace)', 'bool'),
  \ dotnet#method('GetNamespaceMapHashList(', ')', 'Hashtable'),
  \ dotnet#method('SetMappingProcessingInstruction(', 'string xamlNamespace, ClrNamespaceAssemblyPair pair)', 'void'),
  \ dotnet#method('GetXamlType(', 'string xamlNamespace, string name, XamlType[] typeArguments)', 'XamlType'),
  \ dotnet#method('OnAssemblyResolve(', 'string assemblyName)', 'Assembly'),
  \ dotnet#method('XamlTypeMapper(', 'string[] assemblyNames)', 'void'),
  \ dotnet#method('XamlTypeMapper(', 'string[] assemblyNames, NamespaceMapEntry[] namespaceMaps)', 'void'),
  \ dotnet#method('GetType(', 'string xmlNamespace, string localName)', 'Type'),
  \ dotnet#method('AddMappingProcessingInstruction(', 'string xmlNamespace, string clrNamespace, string assemblyName)', 'void'),
  \ dotnet#method('SetAssemblyPath(', 'string assemblyName, string assemblyPath)', 'void'),
  \ dotnet#method('get_DefaultMapper(', ')', 'static'),
  \ dotnet#method('Initialize(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'XamlTypeMapper'),
  \ dotnet#method('AssemblyPathFor(', 'string assemblyName)', 'string'),
  \ dotnet#method('GetRoutedEvent(', 'class Type owner, string xmlNamespace, string localName)', 'RoutedEvent'),
  \ dotnet#method('ParseProperty(', 'object targetObject, Type propType, string propName, object dpOrPiOrFi, ITypeDescriptorContext typeContext, ParserContext parserContext, string value, int16 converterTypeId)', 'object'),
  \ dotnet#method('ValidateNames(', 'string value, int32 lineNumber, int32 linePosition)', 'void'),
  \ dotnet#method('ValidateEnums(', 'string propName, Type propType, string attribValue)', 'void'),
  \ dotnet#method('UpdateClrPropertyInfo(', 'class Type currentParentType, BamlAttributeInfoRecord attribInfo)', 'void'),
  \ dotnet#method('UpdateAttachedPropertySetter(', 'class BamlAttributeInfoRecord attributeInfo)', 'void'),
  \ dotnet#method('UpdateAttachedPropertyGetter(', 'class BamlAttributeInfoRecord attributeInfo)', 'void'),
  \ dotnet#method('GetClrInfo(', 'bool isEvent, Type owner, string xmlNamespace, string localName, string& propName)', 'MemberInfo'),
  \ dotnet#method('IsAllowedPropertySet(', 'class PropertyInfo pi)', 'bool'),
  \ dotnet#method('IsAllowedPropertyGet(', 'class PropertyInfo pi)', 'bool'),
  \ dotnet#method('IsAllowedPropertySet(', 'class PropertyInfo pi, bool allowProtected, [out] bool& isPublic)', 'static bool'),
  \ dotnet#method('AllowInternalType(', 'class Type type)', 'bool'),
  \ dotnet#method('GetClrInfoForClass(', 'bool isEvent, Type owner, string xmlNamespace, string localName, string globalClassName, string& propName)', 'MemberInfo'),
  \ dotnet#method('GetClrEventInfo(', 'class Type owner, string eventName)', 'EventInfo'),
  \ dotnet#method('GetDependencyObject(', 'bool isEvent, Type owner, string xmlNamespace, string localName, Type& baseType, string& dynamicObjectName)', 'object'),
  \ dotnet#method('DependencyPropertyFromName(', 'string localName, string xmlNamespace, Type& ownerType)', 'DependencyProperty'),
  \ dotnet#method('GetXmlLangProperty(', 'string xmlNamespace, string localName)', 'PropertyInfo'),
  \ dotnet#method('RoutedEventFromName(', 'string localName, Type ownerType)', 'RoutedEvent'),
  \ dotnet#method('GetPropertyType(', 'object propertyMember)', 'static Type'),
  \ dotnet#method('GetPropertyType(', 'object propertyMember, [out] Type& propertyType, [out] bool& propertyCanWrite)', 'static void'),
  \ dotnet#method('GetPropertyName(', 'object propertyMember)', 'static string'),
  \ dotnet#method('GetDeclaringType(', 'object propertyMember)', 'static Type'),
  \ dotnet#method('GetTypeFromName(', 'string typeName, DependencyObject element)', 'static Type'),
  \ dotnet#method('GetTargetTypeAndMember(', 'string valueParam, ParserContext context, bool isTypeExpected, [out] string& memberName)', 'Type'),
  \ dotnet#method('GetDependencyPropertyOwnerAndName(', 'string memberValue, ParserContext context, Type defaultTargetType, [out] string& memberName)', 'Type'),
  \ dotnet#method('GetStaticMemberInfo(', 'class Type targetType, string memberName, bool fieldInfoOnly)', 'MemberInfo'),
  \ dotnet#method('GetTypeOnly(', 'string xmlNamespace, string localName)', 'TypeAndSerializer'),
  \ dotnet#method('GetTypeAndSerializer(', 'string xmlNamespace, string localName, object dpOrPiorMi)', 'TypeAndSerializer'),
  \ dotnet#method('GetCustomBamlSerializerIdForType(', 'class Type objectType)', 'int32'),
  \ dotnet#method('GetXamlSerializerForType(', 'class Type objectType)', 'Type'),
  \ dotnet#method('GetInternalTypeHelperTypeFromAssembly(', 'class ParserContext pc)', 'static Type'),
  \ dotnet#method('CreateInternalInstance(', 'class ParserContext pc, Type type)', 'static object'),
  \ dotnet#method('GetInternalPropertyValue(', 'class ParserContext pc, object rootElement, PropertyInfo pi, object target)', 'static object'),
  \ dotnet#method('SetInternalPropertyValue(', 'class ParserContext pc, object rootElement, PropertyInfo pi, object target, object value)', 'static bool'),
  \ dotnet#method('CreateDelegate(', 'class ParserContext pc, Type delegateType, object target, string handler)', 'static Delegate'),
  \ dotnet#method('AddInternalEventHandler(', 'class ParserContext pc, object rootElement, EventInfo eventInfo, object target, Delegate handler)', 'static bool'),
  \ dotnet#method('IsLocalAssembly(', 'string namespaceUri)', 'bool'),
  \ dotnet#method('GetTypeFromBaseString(', 'string typeString, ParserContext context, bool throwOnError)', 'Type'),
  \ dotnet#method('ProcessNameString(', 'class ParserContext parserContext, string& nameString)', 'static string'),
  \ dotnet#method('ParsePropertyName(', 'class ParserContext parserContext, string propertyName, Type& ownerType)', 'static DependencyProperty'),
  \ dotnet#method('ParseEventName(', 'class ParserContext parserContext, string eventName, Type ownerType)', 'static RoutedEvent'),
  \ dotnet#method('CreateInstance(', 'class Type t)', 'object'),
  \ dotnet#method('IsXmlNamespaceKnown(', 'string xmlNamespace, [out] string& newXmlNamespace)', 'bool'),
  \ dotnet#method('SetUriToAssemblyNameMapping(', 'string xmlNamespace, int16[] assemblyIds)', 'void'),
  \ dotnet#method('GetNamespaceMapEntries(', 'string xmlNamespace)', 'NamespaceMapEntry[]'),
  \ dotnet#method('GetXmlNamespace(', 'string clrNamespaceFullName, string assemblyFullName)', 'string'),
  \ dotnet#method('GetClrNamespacePairFromCache(', 'string namespaceUri)', 'static List'),
  \ dotnet#method('GetTypeConverterType(', 'class Type type)', 'Type'),
  \ dotnet#method('GetTypeConverter(', 'class Type type)', 'TypeConverter'),
  \ dotnet#method('GetPropertyConverterType(', 'class Type propType, object dpOrPiOrMi)', 'Type'),
  \ dotnet#method('GetPropertyConverter(', 'class Type propType, object dpOrPiOrMi)', 'TypeConverter'),
  \ dotnet#method('GetDictionaryKey(', 'string keyString, ParserContext context)', 'object'),
  \ dotnet#method('GetConstrXamlTypeMappers(', 'class Type type)', 'XamlTypeMapper/ConstrXamlTypeMapperData'),
  \ dotnet#method('GetCachedTrimSurroundingWhitespace(', 'class Type t)', 'bool'),
  \ dotnet#method('ThrowException(', 'string id, string parameter)', 'void'),
  \ dotnet#method('ThrowExceptionWithLine(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('get_PITable(', ')', '.method'),
  \ dotnet#method('get_MapTable(', ')', '.method'),
  \ dotnet#method('set_MapTable(', 'class BamlMapTable value)', 'void'),
  \ dotnet#method('set_LineNumber(', 'int32 value)', 'void'),
  \ dotnet#method('set_LinePosition(', 'int32 value)', 'void'),
  \ dotnet#method('get_NamespaceMapHashList(', ')', '.method'),
  \ dotnet#method('get_SchemaContext(', ')', '.method'),
  \ dotnet#method('XamlTypeMapper(', ')', 'static void .'),
  \ dotnet#prop('DefaultMapper', 'XamlTypeMapper'),
  \ dotnet#prop('PITable', 'HybridDictionary'),
  \ dotnet#prop('MapTable', 'BamlMapTable'),
  \ dotnet#prop('LineNumber', 'int32'),
  \ dotnet#prop('LinePosition', 'int32'),
  \ dotnet#prop('NamespaceMapHashList', 'Hashtable'),
  \ dotnet#prop('SchemaContext', 'XamlSchemaContext'),
  \ ])

call dotnet#class('DependencyPropertyConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('ResolveProperty(', 'class IServiceProvider serviceProvider, string targetName, object source)', 'static DependencyProperty'),
  \ dotnet#method('DependencyPropertyConverter(', ')', 'void'),
  \ ])

call dotnet#class('NamespaceMapEntry', 'Object', [ 
  \ dotnet#method('NamespaceMapEntry(', ')', 'void'),
  \ dotnet#method('NamespaceMapEntry(', 'string xmlNamespace, string assemblyName, string clrNamespace)', 'void'),
  \ dotnet#method('NamespaceMapEntry(', 'string xmlNamespace, string assemblyName, string clrNamespace, string assemblyPath)', 'void'),
  \ dotnet#method('get_XmlNamespace(', ')', 'string'),
  \ dotnet#method('set_XmlNamespace(', 'string value)', 'void'),
  \ dotnet#method('get_AssemblyName(', ')', 'string'),
  \ dotnet#method('set_AssemblyName(', 'string value)', 'void'),
  \ dotnet#method('get_ClrNamespace(', ')', 'string'),
  \ dotnet#method('set_ClrNamespace(', 'string value)', 'void'),
  \ dotnet#method('get_Assembly(', ')', '.method'),
  \ dotnet#method('get_AssemblyPath(', ')', 'string'),
  \ dotnet#method('set_AssemblyPath(', 'string value)', 'void'),
  \ dotnet#prop('XmlNamespace', 'string'),
  \ dotnet#prop('AssemblyName', 'string'),
  \ dotnet#prop('ClrNamespace', 'string'),
  \ dotnet#prop('', 'Assembly'),
  \ dotnet#prop('AssemblyPath', 'string'),
  \ ])

call dotnet#class('ParserContext', 'Object', [ 
  \ dotnet#method('ParserContext(', ')', 'void'),
  \ dotnet#method('Initialize(', ')', 'void'),
  \ dotnet#method('ParserContext(', 'class XmlParserContext xmlParserContext)', 'void'),
  \ dotnet#method('ParserContext(', 'class XmlReader xmlReader)', 'void'),
  \ dotnet#method('ParserContext(', 'class ParserContext parserContext)', 'void'),
  \ dotnet#method('PushScope(', ')', 'void'),
  \ dotnet#method('PopScope(', ')', 'void'),
  \ dotnet#method('get_XmlnsDictionary(', ')', 'XmlnsDictionary'),
  \ dotnet#method('get_XmlLang(', ')', 'string'),
  \ dotnet#method('set_XmlLang(', 'string value)', 'void'),
  \ dotnet#method('get_XmlSpace(', ')', 'string'),
  \ dotnet#method('set_XmlSpace(', 'string value)', 'void'),
  \ dotnet#method('get_TargetType(', ')', '.method'),
  \ dotnet#method('set_TargetType(', 'class Type value)', 'void'),
  \ dotnet#method('get_XamlTypeMapper(', ')', 'XamlTypeMapper'),
  \ dotnet#method('set_XamlTypeMapper(', 'class XamlTypeMapper value)', 'void'),
  \ dotnet#method('get_NameScopeStack(', ')', '.method'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_SkipJournaledProperties(', ')', 'bool'),
  \ dotnet#method('set_SkipJournaledProperties(', 'bool value)', 'void'),
  \ dotnet#method('get_StreamCreatedAssembly(', ')', '.method'),
  \ dotnet#method('set_StreamCreatedAssembly(', 'class Assembly value)', 'void'),
  \ dotnet#method('op_Implicit(', 'class ParserContext parserContext)', 'static'),
  \ dotnet#method('ToXmlParserContext(', 'class ParserContext parserContext)', 'static XmlParserContext'),
  \ dotnet#method('get_LineNumber(', ')', 'int32'),
  \ dotnet#method('set_LineNumber(', 'int32 value)', 'void'),
  \ dotnet#method('get_LinePosition(', ')', 'int32'),
  \ dotnet#method('set_LinePosition(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsDebugBamlStream(', ')', 'bool'),
  \ dotnet#method('set_IsDebugBamlStream(', 'bool value)', 'void'),
  \ dotnet#method('get_RootElement(', ')', 'object'),
  \ dotnet#method('set_RootElement(', 'object value)', 'void'),
  \ dotnet#method('get_OwnsBamlStream(', ')', 'bool'),
  \ dotnet#method('set_OwnsBamlStream(', 'bool value)', 'void'),
  \ dotnet#method('get_MapTable(', ')', '.method'),
  \ dotnet#method('set_MapTable(', 'class BamlMapTable value)', 'void'),
  \ dotnet#method('get_StyleConnParserContext(', ')', '.method'),
  \ dotnet#method('set_StyleConnParserContext(', 'class IStyleConnParserContext value)', 'void'),
  \ dotnet#method('get_ProvideValueProvider(', ')', '.method'),
  \ dotnet#method('get_StaticResourcesStack(', ')', '.method'),
  \ dotnet#method('get_InDeferredSection(', ')', 'bool'),
  \ dotnet#method('ScopedCopy(', ')', 'ParserContext'),
  \ dotnet#method('ScopedCopy(', 'bool copyNameScopeStack)', 'ParserContext'),
  \ dotnet#method('TrimState(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ParserContext'),
  \ dotnet#method('get_FreezeFreezables(', ')', 'bool'),
  \ dotnet#method('set_FreezeFreezables(', 'bool value)', 'void'),
  \ dotnet#method('TryCacheFreezable(', 'string value, Freezable freezable)', 'bool'),
  \ dotnet#method('TryGetFreezable(', 'string value)', 'Freezable'),
  \ dotnet#prop('XmlnsDictionary', 'XmlnsDictionary'),
  \ dotnet#prop('XmlLang', 'string'),
  \ dotnet#prop('XmlSpace', 'string'),
  \ dotnet#prop('TargetType', 'Type'),
  \ dotnet#prop('XamlTypeMapper', 'XamlTypeMapper'),
  \ dotnet#prop('NameScopeStack', 'Stack'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('SkipJournaledProperties', 'bool'),
  \ dotnet#prop('StreamCreatedAssembly', 'Assembly'),
  \ dotnet#prop('LineNumber', 'int32'),
  \ dotnet#prop('LinePosition', 'int32'),
  \ dotnet#prop('IsDebugBamlStream', 'bool'),
  \ dotnet#prop('RootElement', 'object'),
  \ dotnet#prop('OwnsBamlStream', 'bool'),
  \ dotnet#prop('MapTable', 'BamlMapTable'),
  \ dotnet#prop('StyleConnParserContext', 'IStyleConnParserContext'),
  \ dotnet#prop('ProvideValueProvider', 'ProvideValueServiceProvider'),
  \ dotnet#prop('StaticResourcesStack', 'List'),
  \ dotnet#prop('InDeferredSection', 'bool'),
  \ dotnet#prop('FreezeFreezables', 'bool'),
  \ ])

call dotnet#class('RoutedEventConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('RoutedEventConverter(', ')', 'void'),
  \ ])

call dotnet#class('SetterTriggerConditionValueConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('ResolveValue(', 'class ITypeDescriptorContext serviceProvider, DependencyProperty property, CultureInfo culture, object source)', 'static object'),
  \ dotnet#method('SetterTriggerConditionValueConverter(', ')', 'void'),
  \ ])

call dotnet#class('TemplateKeyConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('TemplateKeyConverter(', ')', 'void'),
  \ ])

call dotnet#class('XamlDesignerSerializationManager', 'ServiceProviders', [ 
  \ dotnet#method('XamlDesignerSerializationManager(', 'class XmlWriter xmlWriter)', 'void'),
  \ dotnet#method('get_XamlWriterMode(', ')', 'XamlWriterMode'),
  \ dotnet#method('set_XamlWriterMode(', 'XamlWriterMode value)', 'void'),
  \ dotnet#method('get_XmlWriter(', ')', '.method'),
  \ dotnet#method('ClearXmlWriter(', ')', 'void'),
  \ dotnet#prop('XamlWriterMode', 'XamlWriterMode'),
  \ dotnet#prop('XmlWriter', 'XmlWriter'),
  \ ])

call dotnet#class('XamlInstanceCreator', 'Object', [ 
  \ dotnet#method('CreateObject(', ')', 'abstract object'),
  \ dotnet#method('XamlInstanceCreator(', ')', 'void'),
  \ ])

call dotnet#class('XamlParseException', 'SystemException', [ 
  \ dotnet#method('XamlParseException(', ')', 'void'),
  \ dotnet#method('XamlParseException(', 'string message)', 'void'),
  \ dotnet#method('XamlParseException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('XamlParseException(', 'string message, int32 lineNumber, int32 linePosition)', 'void'),
  \ dotnet#method('XamlParseException(', 'string message, int32 lineNumber, int32 linePosition, Exception innerException)', 'void'),
  \ dotnet#method('XamlParseException(', 'string message, int32 lineNumber, int32 linePosition, Uri baseUri, Exception innerException)', 'void'),
  \ dotnet#method('get_LineNumber(', ')', 'int32'),
  \ dotnet#method('set_LineNumber(', 'int32 value)', 'void'),
  \ dotnet#method('get_LinePosition(', ')', 'int32'),
  \ dotnet#method('set_LinePosition(', 'int32 value)', 'void'),
  \ dotnet#method('get_KeyContext(', ')', 'object'),
  \ dotnet#method('set_KeyContext(', 'object value)', 'void'),
  \ dotnet#method('get_UidContext(', ')', 'string'),
  \ dotnet#method('set_UidContext(', 'string value)', 'void'),
  \ dotnet#method('get_NameContext(', ')', 'string'),
  \ dotnet#method('set_NameContext(', 'string value)', 'void'),
  \ dotnet#method('get_BaseUri(', ')', 'Uri'),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void'),
  \ dotnet#method('XamlParseException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetMarkupFilePath(', 'class Uri resourceUri)', 'static string'),
  \ dotnet#method('GenerateErrorMessageContext(', 'int32 lineNumber, int32 linePosition, Uri baseUri, XamlObjectIds xamlObjectIds, Type objectType)', 'static string'),
  \ dotnet#method('ThrowException(', 'string message, Exception innerException, int32 lineNumber, int32 linePosition, Uri baseUri, XamlObjectIds currentXamlObjectIds, XamlObjectIds contextXamlObjectIds, Type objectType)', 'static void'),
  \ dotnet#method('ThrowException(', 'class ParserContext parserContext, int32 lineNumber, int32 linePosition, string message, Exception innerException)', 'static void'),
  \ dotnet#method('ThrowException(', 'string message, Exception innerException, int32 lineNumber, int32 linePosition)', 'static void'),
  \ dotnet#prop('LineNumber', 'int32'),
  \ dotnet#prop('LinePosition', 'int32'),
  \ dotnet#prop('KeyContext', 'object'),
  \ dotnet#prop('UidContext', 'string'),
  \ dotnet#prop('NameContext', 'string'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ ])

call dotnet#class('XamlReader', 'Object', [ 
  \ dotnet#method('Parse(', 'string xamlText)', 'static object'),
  \ dotnet#method('Parse(', 'string xamlText, ParserContext parserContext)', 'static object'),
  \ dotnet#method('Load(', 'class Stream stream)', 'static object'),
  \ dotnet#method('Load(', 'class XmlReader reader)', 'static object'),
  \ dotnet#method('Load(', 'class Stream stream, ParserContext parserContext)', 'static object'),
  \ dotnet#method('LoadAsync(', 'class Stream stream)', 'object'),
  \ dotnet#method('LoadAsync(', 'class XmlReader reader)', 'object'),
  \ dotnet#method('LoadAsync(', 'class Stream stream, ParserContext parserContext)', 'object'),
  \ dotnet#method('ShouldReWrapException(', 'class Exception e, Uri baseUri)', 'static bool'),
  \ dotnet#method('RewrapException(', 'class Exception e, Uri baseUri)', 'static void'),
  \ dotnet#method('RewrapException(', 'class Exception e, IXamlLineInfo lineInfo, Uri baseUri)', 'static void'),
  \ dotnet#method('WrapException(', 'class Exception e, IXamlLineInfo lineInfo, Uri baseUri)', 'static XamlParseException'),
  \ dotnet#method('Post(', ')', 'void'),
  \ dotnet#method('Post(', 'DispatcherPriority priority)', 'void'),
  \ dotnet#method('HandleAsyncQueueItem(', ')', 'strict void'),
  \ dotnet#method('TreeBuildComplete(', ')', 'void'),
  \ dotnet#method('CancelAsync(', ')', 'void'),
  \ dotnet#method('add_LoadCompleted(', 'class AsyncCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_LoadCompleted(', 'class AsyncCompletedEventHandler value)', 'void'),
  \ dotnet#method('CreateObjectWriterSettings(', ')', 'static XamlObjectWriterSettings'),
  \ dotnet#method('CreateObjectWriterSettings(', 'class XamlObjectWriterSettings parentSettings)', 'static XamlObjectWriterSettings'),
  \ dotnet#method('CreateObjectWriterSettingsForBaml(', ')', 'static XamlObjectWriterSettings'),
  \ dotnet#method('CreateBamlReaderSettings(', ')', 'static Baml2006ReaderSettings'),
  \ dotnet#method('CreateSchemaContextSettings(', ')', 'static XamlSchemaContextSettings'),
  \ dotnet#method('get_BamlSharedSchemaContext(', ')', 'static'),
  \ dotnet#method('get_XamlV3SharedSchemaContext(', ')', 'static'),
  \ dotnet#method('GetWpfSchemaContext(', ')', 'static XamlSchemaContext'),
  \ dotnet#method('Load(', 'class XmlReader reader, ParserContext parserContext, XamlParseMode parseMode)', 'static object'),
  \ dotnet#method('Load(', 'class XamlReader xamlReader, ParserContext parserContext)', 'static object'),
  \ dotnet#method('Load(', 'class XamlReader reader)', 'static object'),
  \ dotnet#method('LoadBaml(', 'class Stream stream, ParserContext parserContext, object parent, bool closeStream)', 'static object'),
  \ dotnet#method('XamlReader(', ')', 'void'),
  \ dotnet#method('XamlReader(', ')', 'static void .'),
  \ dotnet#event('LoadCompleted', 'AsyncCompletedEventHandler'),
  \ dotnet#prop('BamlSharedSchemaContext', 'WpfSharedBamlSchemaContext'),
  \ dotnet#prop('XamlV3SharedSchemaContext', 'WpfSharedBamlSchemaContext'),
  \ ])

call dotnet#class('XamlWriter', 'Object', [ 
  \ dotnet#method('Save(', 'object obj)', 'static string'),
  \ dotnet#method('Save(', 'object obj, TextWriter writer)', 'static void'),
  \ dotnet#method('Save(', 'object obj, Stream stream)', 'static void'),
  \ dotnet#method('Save(', 'object obj, XmlWriter xmlWriter)', 'static void'),
  \ dotnet#method('Save(', 'object obj, XamlDesignerSerializationManager manager)', 'static void'),
  \ ])

call dotnet#class('XmlAttributeProperties', 'Object', [ 
  \ dotnet#method('GetXmlSpace(', 'class DependencyObject dependencyObject)', 'static string'),
  \ dotnet#method('SetXmlSpace(', 'class DependencyObject dependencyObject, string value)', 'static void'),
  \ dotnet#method('GetXmlnsDictionary(', 'class DependencyObject dependencyObject)', 'static XmlnsDictionary'),
  \ dotnet#method('SetXmlnsDictionary(', 'class DependencyObject dependencyObject, XmlnsDictionary value)', 'static void'),
  \ dotnet#method('GetXmlnsDefinition(', 'class DependencyObject dependencyObject)', 'static string'),
  \ dotnet#method('SetXmlnsDefinition(', 'class DependencyObject dependencyObject, string value)', 'static void'),
  \ dotnet#method('GetXmlNamespaceMaps(', 'class DependencyObject dependencyObject)', 'static string'),
  \ dotnet#method('SetXmlNamespaceMaps(', 'class DependencyObject dependencyObject, string value)', 'static void'),
  \ dotnet#method('get_XmlSpaceSetter(', ')', 'static'),
  \ dotnet#method('XmlAttributeProperties(', ')', 'void'),
  \ dotnet#method('XmlAttributeProperties(', ')', 'static void .'),
  \ dotnet#prop('XmlSpaceSetter', 'MethodInfo'),
  \ ])

call dotnet#class('XmlnsDictionary', 'Object', [ 
  \ dotnet#method('XmlnsDictionary(', ')', 'void'),
  \ dotnet#method('XmlnsDictionary(', 'class XmlnsDictionary xmlnsDictionary)', 'void'),
  \ dotnet#method('Add(', 'object prefix, object xmlNamespace)', 'void'),
  \ dotnet#method('Add(', 'string prefix, string xmlNamespace)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object key)', 'bool'),
  \ dotnet#method('Remove(', 'string prefix)', 'void'),
  \ dotnet#method('Remove(', 'object prefix)', 'void'),
  \ dotnet#method('CopyTo(', 'DictionaryEntry[] array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('GetNamespace(', 'string prefix)', 'string'),
  \ dotnet#method('GetNamespacePrefixes(', ')', ''),
  \ dotnet#method('GetDictionaryEnumerator(', ')', 'IDictionaryEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('Seal(', ')', 'void'),
  \ dotnet#method('LookupNamespace(', 'string prefix)', 'string'),
  \ dotnet#method('LookupPrefix(', 'string xmlNamespace)', 'string'),
  \ dotnet#method('DefaultNamespace(', ')', 'string'),
  \ dotnet#method('PushScope(', ')', 'void'),
  \ dotnet#method('PopScope(', ')', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_Item(', 'string prefix)', 'string'),
  \ dotnet#method('set_Item(', 'string prefix, string value)', 'void'),
  \ dotnet#method('get_Item(', 'object prefix)', 'object'),
  \ dotnet#method('set_Item(', 'object prefix, object value)', 'void'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Sealed(', ')', 'bool'),
  \ dotnet#method('Unseal(', ')', 'void'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(string)', 'string'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Sealed', 'bool'),
  \ ])

