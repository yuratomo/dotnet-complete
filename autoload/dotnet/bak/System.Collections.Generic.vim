call dotnet#namespace('System.Collections.Generic')

call dotnet#class('Comparer', 'Object', [ 
  \ dotnet#method('get_Default(', ')', 'static'),
  \ dotnet#method('Compare(', '!T x, !T y)', 'abstract int32'),
  \ dotnet#method('Compare(', 'object x, object y)', 'int32 '),
  \ dotnet#method('Comparer`1(', ')', 'void Comparer`'),
  \ dotnet#prop('Default', 'Comparer'),
  \ ])

call dotnet#class('Dictionary', 'Object', [ 
  \ dotnet#field('dictionary', 'Dictionary'),
  \ dotnet#field('version', 'int32'),
  \ dotnet#field('index', 'int32'),
  \ dotnet#field('current', 'KeyValuePair'),
  \ dotnet#field('getEnumeratorRetType', 'int32'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#method('get_Entry(', ')', ''),
  \ dotnet#method('get_Key(', ')', 'object '),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#prop('Current', 'KeyValuePair'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Entry', 'DictionaryEntry'),
  \ dotnet#prop('Key', 'object'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#field('dictionary', 'Dictionary'),
  \ dotnet#field('index', 'int32'),
  \ dotnet#field('version', 'int32'),
  \ dotnet#field('currentKey', '!TKey'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', '!TKey'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#prop('Current', '!TKey'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('GetEnumerator(', ')', 'Dictionary'),
  \ dotnet#method('CopyTo(', '!TKey[] array, int32 index)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('Add(', '!TKey item)', 'void Add(!TKey item)'),
  \ dotnet#method('Clear(', ')', 'void Clear()'),
  \ dotnet#method('Contains(', '!TKey item)', 'bool Contains(!TKey item)'),
  \ dotnet#method('Remove(', '!TKey item)', 'bool Remove(!TKey item)'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#field('dictionary', 'Dictionary'),
  \ dotnet#field('index', 'int32'),
  \ dotnet#field('version', 'int32'),
  \ dotnet#field('currentValue', '!TValue'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', '!TValue'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#prop('Current', '!TValue'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('GetEnumerator(', ')', 'Dictionary'),
  \ dotnet#method('CopyTo(', '!TValue[] array, int32 index)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('Add(', '!TValue item)', 'void Add(!TValue item)'),
  \ dotnet#method('Remove(', '!TValue item)', 'bool Remove(!TValue item)'),
  \ dotnet#method('Clear(', ')', 'void Clear()'),
  \ dotnet#method('Contains(', '!TValue item)', 'bool Contains(!TValue item)'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#method('Dictionary`2(', ')', 'void Dictionary`'),
  \ dotnet#method('Dictionary`2(', 'int32 capacity)', 'void Dictionary`'),
  \ dotnet#method('Dictionary`2(', 'int32 capacity, IEqualityComparer comparer)', 'void Dictionary`'),
  \ dotnet#method('Dictionary`2(', 'class SerializationInfo info, StreamingContext context)', 'void Dictionary`'),
  \ dotnet#method('get_Comparer(', ')', 'IEqualityComparer'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Keys(', ')', 'Dictionary'),
  \ dotnet#method('get_Keys(', ')', 'get_Keys()'),
  \ dotnet#method('get_Values(', ')', 'Dictionary'),
  \ dotnet#method('get_Values(', ')', 'get_Values()'),
  \ dotnet#method('get_Item(', '!TKey key)', '!TValue'),
  \ dotnet#method('set_Item(', '!TKey key, !TValue value)', 'void'),
  \ dotnet#method('Add(', '!TKey key, !TValue value)', 'void'),
  \ dotnet#method('Add(', 'KeyValuePair keyValuePair)', 'void Add(valuetype KeyValuePair keyValuePair)'),
  \ dotnet#method('Contains(', 'KeyValuePair keyValuePair)', 'bool Contains(valuetype KeyValuePair keyValuePair)'),
  \ dotnet#method('Remove(', 'KeyValuePair keyValuePair)', 'bool Remove(valuetype KeyValuePair keyValuePair)'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('ContainsKey(', '!TKey key)', 'bool'),
  \ dotnet#method('ContainsValue(', '!TValue value)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', 'Dictionary'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#method('Remove(', '!TKey key)', 'bool'),
  \ dotnet#method('TryGetValue(', '!TKey key, [out] !TValue& value)', 'bool'),
  \ dotnet#method('GetValueOrDefault(', '!TKey key)', '!TValue'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('CopyTo(', 'KeyValuePair[] array, int32 index)', 'void CopyTo(valuetype KeyValuePair[] array'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('get_Item(', 'object key)', 'object '),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void '),
  \ dotnet#method('Add(', 'object key, object value)', 'void '),
  \ dotnet#method('Contains(', 'object key)', 'bool '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Remove(', 'object key)', 'void '),
  \ dotnet#prop('Comparer', 'IEqualityComparer'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Keys', 'Dictionary'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'Dictionary'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('Item(!TKey)', '!TValue'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('Item(object)', 'object'),
  \ ])

call dotnet#class('EqualityComparer', 'Object', [ 
  \ dotnet#method('get_Default(', ')', 'static'),
  \ dotnet#method('Equals(', '!T x, !T y)', 'abstract bool'),
  \ dotnet#method('GetHashCode(', '!T obj)', 'abstract int32'),
  \ dotnet#method('IndexOf(', '!T[] array, !T value, int32 startIndex, int32 count)', 'strict int32'),
  \ dotnet#method('LastIndexOf(', '!T[] array, !T value, int32 startIndex, int32 count)', 'strict int32'),
  \ dotnet#method('GetHashCode(', 'object obj)', 'int32 '),
  \ dotnet#method('Equals(', 'object x, object y)', 'bool '),
  \ dotnet#method('EqualityComparer`1(', ')', 'void EqualityComparer`'),
  \ dotnet#prop('Default', 'EqualityComparer'),
  \ ])

call dotnet#class('KeyNotFoundException', 'SystemException', [ 
  \ dotnet#method('KeyNotFoundException(', ')', 'void'),
  \ dotnet#method('KeyNotFoundException(', 'string message)', 'void'),
  \ dotnet#method('KeyNotFoundException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('KeyNotFoundException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('KeyValuePair', 'ValueType', [ 
  \ dotnet#field('key', '!TKey'),
  \ dotnet#field('value', '!TValue'),
  \ dotnet#method('KeyValuePair`2(', '!TKey key, !TValue value)', 'void KeyValuePair`'),
  \ dotnet#method('get_Key(', ')', '!TKey'),
  \ dotnet#method('get_Value(', ')', '!TValue'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Key', '!TKey'),
  \ dotnet#prop('Value', '!TValue'),
  \ ])

call dotnet#class('List', 'Object', [ 
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Add(', '!T item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', '!T item)', 'bool'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('Remove(', '!T item)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_Item(', 'int32 index)', '!T'),
  \ dotnet#method('set_Item(', 'int32 index, !T value)', 'void'),
  \ dotnet#method('IndexOf(', '!T item)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, !T item)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', '!T'),
  \ dotnet#field('list', 'List'),
  \ dotnet#field('index', 'int32'),
  \ dotnet#field('version', 'int32'),
  \ dotnet#field('current', '!T'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', '!T'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#prop('Current', '!T'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('List`1(', ')', 'void List`'),
  \ dotnet#method('List`1(', 'int32 capacity)', 'void List`'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_Item(', 'int32 index)', '!T'),
  \ dotnet#method('set_Item(', 'int32 index, !T value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', '!T item)', 'void'),
  \ dotnet#method('Add(', 'object item)', 'int32 '),
  \ dotnet#method('AddRange(', 'class IEnumerable collection)', 'void'),
  \ dotnet#method('AsReadOnly(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('BinarySearch(', 'int32 index, int32 count, !T item, IComparer comparer)', 'int32'),
  \ dotnet#method('BinarySearch(', '!T item)', 'int32'),
  \ dotnet#method('BinarySearch(', '!T item, IComparer comparer)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', '!T item)', 'bool'),
  \ dotnet#method('Contains(', 'object item)', 'bool '),
  \ dotnet#method('ConvertAll(', 'class Converter converter)', 'List'),
  \ dotnet#method('CopyTo(', '!T[] array)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void '),
  \ dotnet#method('CopyTo(', 'int32 index, !T[] array, int32 arrayIndex, int32 count)', 'void'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('Exists(', 'class Predicate match)', 'bool'),
  \ dotnet#method('Find(', 'class Predicate match)', '!T'),
  \ dotnet#method('FindAll(', 'class Predicate match)', 'List'),
  \ dotnet#method('FindIndex(', 'class Predicate match)', 'int32'),
  \ dotnet#method('FindIndex(', 'int32 startIndex, Predicate match)', 'int32'),
  \ dotnet#method('FindIndex(', 'int32 startIndex, int32 count, Predicate match)', 'int32'),
  \ dotnet#method('FindLast(', 'class Predicate match)', '!T'),
  \ dotnet#method('FindLastIndex(', 'class Predicate match)', 'int32'),
  \ dotnet#method('FindLastIndex(', 'int32 startIndex, Predicate match)', 'int32'),
  \ dotnet#method('FindLastIndex(', 'int32 startIndex, int32 count, Predicate match)', 'int32'),
  \ dotnet#method('ForEach(', 'class Action action)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'List'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetRange(', 'int32 index, int32 count)', 'List'),
  \ dotnet#method('IndexOf(', '!T item)', 'int32'),
  \ dotnet#method('IndexOf(', 'object item)', 'int32 '),
  \ dotnet#method('IndexOf(', '!T item, int32 index)', 'int32'),
  \ dotnet#method('IndexOf(', '!T item, int32 index, int32 count)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, !T item)', 'void'),
  \ dotnet#method('Insert(', 'int32 index, object item)', 'void '),
  \ dotnet#method('InsertRange(', 'int32 index, IEnumerable collection)', 'void'),
  \ dotnet#method('LastIndexOf(', '!T item)', 'int32'),
  \ dotnet#method('LastIndexOf(', '!T item, int32 index)', 'int32'),
  \ dotnet#method('LastIndexOf(', '!T item, int32 index, int32 count)', 'int32'),
  \ dotnet#method('Remove(', '!T item)', 'bool'),
  \ dotnet#method('Remove(', 'object item)', 'void '),
  \ dotnet#method('RemoveAll(', 'class Predicate match)', 'int32'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('Reverse(', ')', 'void'),
  \ dotnet#method('Reverse(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('Sort(', ')', 'void'),
  \ dotnet#method('Sort(', 'class IComparer comparer)', 'void'),
  \ dotnet#method('Sort(', 'int32 index, int32 count, IComparer comparer)', 'void'),
  \ dotnet#method('Sort(', 'class Comparison comparison)', 'void'),
  \ dotnet#method('ToArray(', ')', '!T[]'),
  \ dotnet#method('TrimExcess(', ')', 'void'),
  \ dotnet#method('TrueForAll(', 'class Predicate match)', 'bool'),
  \ dotnet#method('Synchronized(', 'class List list)', 'static IList'),
  \ dotnet#method('List`1(', ')', 'static void .List`'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(int32)', '!T'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ ])

call dotnet#class('HashSet', 'Object', [ 
  \ dotnet#field('set', 'HashSet'),
  \ dotnet#field('index', 'int32'),
  \ dotnet#field('version', 'int32'),
  \ dotnet#field('current', '!T'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', '!T'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#prop('Current', '!T'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('HashSet`1(', ')', 'void HashSet`'),
  \ dotnet#method('HashSet`1(', 'class SerializationInfo info, StreamingContext context)', 'void HashSet`'),
  \ dotnet#method('Add(', '!T item)', 'void Add(!T item)'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', '!T item)', 'bool'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('Remove(', '!T item)', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'HashSet'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#method('Add(', '!T item)', 'bool'),
  \ dotnet#method('UnionWith(', 'class IEnumerable other)', 'void'),
  \ dotnet#method('IntersectWith(', 'class IEnumerable other)', 'void'),
  \ dotnet#method('ExceptWith(', 'class IEnumerable other)', 'void'),
  \ dotnet#method('SymmetricExceptWith(', 'class IEnumerable other)', 'void'),
  \ dotnet#method('IsSubsetOf(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('IsProperSubsetOf(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('IsSupersetOf(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('IsProperSupersetOf(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('Overlaps(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('SetEquals(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('CopyTo(', '!T[] array)', 'void'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 arrayIndex, int32 count)', 'void'),
  \ dotnet#method('RemoveWhere(', 'class Predicate match)', 'int32'),
  \ dotnet#method('get_Comparer(', ')', 'IEqualityComparer'),
  \ dotnet#method('TrimExcess(', ')', 'void'),
  \ dotnet#method('CreateSetComparer(', ')', 'static IEqualityComparer'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Comparer', 'IEqualityComparer'),
  \ ])

call dotnet#class('LinkedList', 'Object', [ 
  \ dotnet#field('list', 'LinkedList'),
  \ dotnet#field('node', 'LinkedListNode'),
  \ dotnet#field('version', 'int32'),
  \ dotnet#field('current', '!T'),
  \ dotnet#field('index', 'int32'),
  \ dotnet#field('siInfo', 'SerializationInfo'),
  \ dotnet#method('get_Current(', ')', '!T'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#prop('Current', '!T'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('LinkedList`1(', ')', 'void LinkedList`'),
  \ dotnet#method('LinkedList`1(', 'class SerializationInfo info, StreamingContext context)', 'void LinkedList`'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_First(', ')', 'LinkedListNode'),
  \ dotnet#method('get_Last(', ')', 'LinkedListNode'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('Add(', '!T value)', 'void Add(!T value)'),
  \ dotnet#method('AddAfter(', 'class LinkedListNode node, !T value)', 'LinkedListNode'),
  \ dotnet#method('AddAfter(', 'class LinkedListNode node, LinkedListNode newNode)', 'void'),
  \ dotnet#method('AddBefore(', 'class LinkedListNode node, !T value)', 'LinkedListNode'),
  \ dotnet#method('AddBefore(', 'class LinkedListNode node, LinkedListNode newNode)', 'void'),
  \ dotnet#method('AddFirst(', '!T value)', 'LinkedListNode'),
  \ dotnet#method('AddFirst(', 'class LinkedListNode node)', 'void'),
  \ dotnet#method('AddLast(', '!T value)', 'LinkedListNode'),
  \ dotnet#method('AddLast(', 'class LinkedListNode node)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', '!T value)', 'bool'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 index)', 'void'),
  \ dotnet#method('Find(', '!T value)', 'LinkedListNode'),
  \ dotnet#method('FindLast(', '!T value)', 'LinkedListNode'),
  \ dotnet#method('GetEnumerator(', ')', 'LinkedList'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('Remove(', '!T value)', 'bool'),
  \ dotnet#method('Remove(', 'class LinkedListNode node)', 'void'),
  \ dotnet#method('RemoveFirst(', ')', 'void'),
  \ dotnet#method('RemoveLast(', ')', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('First', 'LinkedListNode'),
  \ dotnet#prop('Last', 'LinkedListNode'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('LinkedListNode', 'Object', [ 
  \ dotnet#method('LinkedListNode`1(', '!T value)', 'void LinkedListNode`'),
  \ dotnet#method('get_List(', ')', 'LinkedList'),
  \ dotnet#method('get_Next(', ')', 'LinkedListNode'),
  \ dotnet#method('get_Previous(', ')', 'LinkedListNode'),
  \ dotnet#method('get_Value(', ')', '!T'),
  \ dotnet#method('set_Value(', '!T value)', 'void'),
  \ dotnet#prop('List', 'LinkedList'),
  \ dotnet#prop('Next', 'LinkedListNode'),
  \ dotnet#prop('Previous', 'LinkedListNode'),
  \ dotnet#prop('Value', '!T'),
  \ ])

call dotnet#class('Queue', 'Object', [ 
  \ dotnet#field('_q', 'Queue'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#field('_version', 'int32'),
  \ dotnet#field('_currentElement', '!T'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', '!T'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#prop('Current', '!T'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('Queue`1(', ')', 'void Queue`'),
  \ dotnet#method('Queue`1(', 'int32 capacity)', 'void Queue`'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('Enqueue(', '!T item)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'Queue'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Dequeue(', ')', '!T'),
  \ dotnet#method('Peek(', ')', '!T'),
  \ dotnet#method('Contains(', '!T item)', 'bool'),
  \ dotnet#method('ToArray(', ')', '!T[]'),
  \ dotnet#method('TrimExcess(', ')', 'void'),
  \ dotnet#method('Queue`1(', ')', 'static void .Queue`'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('SortedList', 'Object', [ 
  \ dotnet#method('SortedList`2(', ')', 'void SortedList`'),
  \ dotnet#method('SortedList`2(', 'int32 capacity)', 'void SortedList`'),
  \ dotnet#method('SortedList`2(', 'int32 capacity, IComparer comparer)', 'void SortedList`'),
  \ dotnet#method('Add(', '!TKey key, !TValue value)', 'void'),
  \ dotnet#method('Add(', 'KeyValuePair keyValuePair)', 'void Add(valuetype KeyValuePair keyValuePair)'),
  \ dotnet#method('Contains(', 'KeyValuePair keyValuePair)', 'bool Contains(valuetype KeyValuePair keyValuePair)'),
  \ dotnet#method('Remove(', 'KeyValuePair keyValuePair)', 'bool Remove(valuetype KeyValuePair keyValuePair)'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Comparer(', ')', 'IComparer'),
  \ dotnet#method('Add(', 'object key, object value)', 'void '),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Keys(', ')', 'IList'),
  \ dotnet#method('get_Keys(', ')', 'get_Keys()'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', 'IList'),
  \ dotnet#method('get_Values(', ')', 'get_Values()'),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object key)', 'bool '),
  \ dotnet#method('ContainsKey(', '!TKey key)', 'bool'),
  \ dotnet#method('ContainsValue(', '!TValue value)', 'bool'),
  \ dotnet#method('CopyTo(', 'KeyValuePair[] array, int32 arrayIndex)', 'void CopyTo(valuetype KeyValuePair[] array'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Item(', '!TKey key)', '!TValue'),
  \ dotnet#method('set_Item(', '!TKey key, !TValue value)', 'void'),
  \ dotnet#method('get_Item(', 'object key)', 'object '),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void '),
  \ dotnet#method('IndexOfKey(', '!TKey key)', 'int32'),
  \ dotnet#method('IndexOfValue(', '!TValue value)', 'int32'),
  \ dotnet#method('TryGetValue(', '!TKey key, [out] !TValue& value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('Remove(', '!TKey key)', 'bool'),
  \ dotnet#method('Remove(', 'object key)', 'void '),
  \ dotnet#method('TrimExcess(', ')', 'void'),
  \ dotnet#method('SortedList`2(', ')', 'static void .SortedList`'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Comparer', 'IComparer'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Keys', 'IList'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'IList'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(!TKey)', '!TValue'),
  \ dotnet#prop('Item(object)', 'object'),
  \ ])

call dotnet#class('Stack', 'Object', [ 
  \ dotnet#field('_stack', 'Stack'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#field('_version', 'int32'),
  \ dotnet#field('currentElement', '!T'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', '!T'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#prop('Current', '!T'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('Stack`1(', ')', 'void Stack`'),
  \ dotnet#method('Stack`1(', 'int32 capacity)', 'void Stack`'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', '!T item)', 'bool'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', 'Stack'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('TrimExcess(', ')', 'void'),
  \ dotnet#method('Peek(', ')', '!T'),
  \ dotnet#method('Pop(', ')', '!T'),
  \ dotnet#method('Push(', '!T item)', 'void'),
  \ dotnet#method('ToArray(', ')', '!T[]'),
  \ dotnet#method('Stack`1(', ')', 'static void .Stack`'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('SortedDictionary', 'Object', [ 
  \ dotnet#field('treeEnum', 'SortedSet'),
  \ dotnet#field('getEnumeratorRetType', 'int32'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Key(', ')', 'object '),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('get_Entry(', ')', ''),
  \ dotnet#prop('Current', 'KeyValuePair'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Key', 'object'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Entry', 'DictionaryEntry'),
  \ dotnet#field('dictEnum', 'SortedDictionary'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', '!TKey'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#prop('Current', '!TKey'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('GetEnumerator(', ')', 'SortedDictionary'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', '!TKey[] array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('Add(', '!TKey item)', 'void Add(!TKey item)'),
  \ dotnet#method('Clear(', ')', 'void Clear()'),
  \ dotnet#method('Contains(', '!TKey item)', 'bool Contains(!TKey item)'),
  \ dotnet#method('Remove(', '!TKey item)', 'bool Remove(!TKey item)'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#field('dictEnum', 'SortedDictionary'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', '!TValue'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#prop('Current', '!TValue'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('GetEnumerator(', ')', 'SortedDictionary'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', '!TValue[] array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('Add(', '!TValue item)', 'void Add(!TValue item)'),
  \ dotnet#method('Clear(', ')', 'void Clear()'),
  \ dotnet#method('Contains(', '!TValue item)', 'bool Contains(!TValue item)'),
  \ dotnet#method('Remove(', '!TValue item)', 'bool Remove(!TValue item)'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#method('SortedDictionary`2(', ')', 'void SortedDictionary`'),
  \ dotnet#method('Add(', 'KeyValuePair keyValuePair)', 'void Add(valuetype KeyValuePair keyValuePair)'),
  \ dotnet#method('Contains(', 'KeyValuePair keyValuePair)', 'bool Contains(valuetype KeyValuePair keyValuePair)'),
  \ dotnet#method('Remove(', 'KeyValuePair keyValuePair)', 'bool Remove(valuetype KeyValuePair keyValuePair)'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('get_Item(', '!TKey key)', '!TValue'),
  \ dotnet#method('set_Item(', '!TKey key, !TValue value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Comparer(', ')', 'IComparer'),
  \ dotnet#method('get_Keys(', ')', 'SortedDictionary'),
  \ dotnet#method('get_Keys(', ')', 'get_Keys()'),
  \ dotnet#method('get_Values(', ')', 'SortedDictionary'),
  \ dotnet#method('get_Values(', ')', 'get_Values()'),
  \ dotnet#method('Add(', '!TKey key, !TValue value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('ContainsKey(', '!TKey key)', 'bool'),
  \ dotnet#method('ContainsValue(', '!TValue value)', 'bool'),
  \ dotnet#method('CopyTo(', 'KeyValuePair[] array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'SortedDictionary'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('Remove(', '!TKey key)', 'bool'),
  \ dotnet#method('TryGetValue(', '!TKey key, [out] !TValue& value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('get_Item(', 'object key)', 'object '),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void '),
  \ dotnet#method('Add(', 'object key, object value)', 'void '),
  \ dotnet#method('Contains(', 'object key)', 'bool '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Remove(', 'object key)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(!TKey)', '!TValue'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Comparer', 'IComparer'),
  \ dotnet#prop('Keys', 'SortedDictionary'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'SortedDictionary'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('SortedSet', 'Object', [ 
  \ dotnet#field('tree', 'SortedSet'),
  \ dotnet#field('version', 'int32'),
  \ dotnet#field('stack', 'Stack'),
  \ dotnet#field('current', 'SortedSet'),
  \ dotnet#field('reverse', 'bool'),
  \ dotnet#field('siInfo', 'SerializationInfo'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', '!T'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#method('SortedSet`1(', ')', 'static void .SortedSet`'),
  \ dotnet#prop('Current', '!T'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('SortedSet`1(', ')', 'void SortedSet`'),
  \ dotnet#method('SortedSet`1(', 'class SerializationInfo info, StreamingContext context)', 'void SortedSet`'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Comparer(', ')', 'IComparer'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('Add(', '!T item)', 'bool'),
  \ dotnet#method('Add(', '!T item)', 'void Add(!T item)'),
  \ dotnet#method('Remove(', '!T item)', 'bool'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', '!T item)', 'bool'),
  \ dotnet#method('CopyTo(', '!T[] array)', 'void'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', '!T[] array, int32 index, int32 count)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', 'SortedSet'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CreateSetComparer(', ')', 'static IEqualityComparer'),
  \ dotnet#method('CreateSetComparer(', 'class IEqualityComparer memberEqualityComparer)', 'static IEqualityComparer'),
  \ dotnet#method('UnionWith(', 'class IEnumerable other)', 'void'),
  \ dotnet#method('IntersectWith(', 'class IEnumerable other)', 'void'),
  \ dotnet#method('ExceptWith(', 'class IEnumerable other)', 'void'),
  \ dotnet#method('SymmetricExceptWith(', 'class IEnumerable other)', 'void'),
  \ dotnet#method('IsSubsetOf(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('IsProperSubsetOf(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('IsSupersetOf(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('IsProperSupersetOf(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('SetEquals(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('Overlaps(', 'class IEnumerable other)', 'bool'),
  \ dotnet#method('RemoveWhere(', 'class Predicate match)', 'int32'),
  \ dotnet#method('get_Min(', ')', '!T'),
  \ dotnet#method('get_Max(', ')', '!T'),
  \ dotnet#method('Reverse(', ')', 'IEnumerable'),
  \ dotnet#method('GetViewBetween(', '!T lowerValue, !T upperValue)', ''),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#method('SortedSet`1(', ')', 'static void .SortedSet`'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Comparer', 'IComparer'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Min', '!T'),
  \ dotnet#prop('Max', '!T'),
  \ ])

