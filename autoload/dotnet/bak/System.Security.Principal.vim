call dotnet#namespace('System.Security.Principal')

call dotnet#class('GenericIdentity', 'Object', [ 
  \ dotnet#method('GenericIdentity(', 'string name)', 'void'),
  \ dotnet#method('GenericIdentity(', 'string name, string type)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_AuthenticationType(', ')', 'string'),
  \ dotnet#method('get_IsAuthenticated(', ')', 'bool'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('AuthenticationType', 'string'),
  \ dotnet#prop('IsAuthenticated', 'bool'),
  \ ])

call dotnet#class('GenericPrincipal', 'Object', [ 
  \ dotnet#method('GenericPrincipal(', 'class IIdentity identity, string[] roles)', 'void'),
  \ dotnet#method('get_Identity(', ')', ''),
  \ dotnet#method('IsInRole(', 'string role)', 'bool'),
  \ dotnet#prop('Identity', 'IIdentity'),
  \ ])

call dotnet#class('WindowsIdentity', 'Object', [ 
  \ dotnet#method('WindowsIdentity(', ')', 'static void .'),
  \ dotnet#method('WindowsIdentity(', ')', 'void'),
  \ dotnet#method('WindowsIdentity(', 'class SafeTokenHandle safeTokenHandle)', 'void'),
  \ dotnet#method('WindowsIdentity(', 'native int userToken)', 'void'),
  \ dotnet#method('WindowsIdentity(', 'native int userToken, string type)', 'void'),
  \ dotnet#method('WindowsIdentity(', 'native int userToken, string type, WindowsAccountType acctType)', 'void'),
  \ dotnet#method('WindowsIdentity(', 'native int userToken, string type, WindowsAccountType acctType, bool isAuthenticated)', 'void'),
  \ dotnet#method('WindowsIdentity(', 'string sUserPrincipalName)', 'void'),
  \ dotnet#method('WindowsIdentity(', 'string sUserPrincipalName, string type)', 'void'),
  \ dotnet#method('WindowsIdentity(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('GetCurrent(', ')', 'static WindowsIdentity'),
  \ dotnet#method('GetCurrent(', 'bool ifImpersonating)', 'static WindowsIdentity'),
  \ dotnet#method('GetCurrent(', 'TokenAccessLevels desiredAccess)', 'static WindowsIdentity'),
  \ dotnet#method('GetAnonymous(', ')', 'static WindowsIdentity'),
  \ dotnet#method('get_AuthenticationType(', ')', 'string'),
  \ dotnet#method('get_ImpersonationLevel(', ')', 'TokenImpersonationLevel'),
  \ dotnet#method('get_IsAuthenticated(', ')', 'bool'),
  \ dotnet#method('get_IsGuest(', ')', 'bool'),
  \ dotnet#method('get_IsSystem(', ')', 'bool'),
  \ dotnet#method('get_IsAnonymous(', ')', 'bool'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('GetName(', ') noinlining', 'reqsecobj string'),
  \ dotnet#method('get_Owner(', ')', 'SecurityIdentifier'),
  \ dotnet#method('get_User(', ')', 'SecurityIdentifier'),
  \ dotnet#method('get_Groups(', ')', 'IdentityReferenceCollection'),
  \ dotnet#method('get_Token(', ')', 'int'),
  \ dotnet#method('Impersonate(', ') noinlining', 'reqsecobj'),
  \ dotnet#method('Impersonate(', 'native int userToken) noinlining', 'static reqsecobj'),
  \ dotnet#method('Impersonate(', 'StackCrawlMark& stackMark)', 'WindowsImpersonationContext'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_TokenHandle(', ')', '.method'),
  \ dotnet#method('SafeRevertToSelf(', 'StackCrawlMark& stackMark)', 'static WindowsImpersonationContext'),
  \ dotnet#method('SafeImpersonate(', 'class SafeTokenHandle userToken, WindowsIdentity wi, StackCrawlMark& stackMark)', 'static WindowsImpersonationContext'),
  \ dotnet#method('GetCurrentThreadWI(', ')', 'static WindowsIdentity'),
  \ dotnet#method('UpdateThreadWI(', 'class WindowsIdentity wi)', 'static void'),
  \ dotnet#method('GetCurrentInternal(', 'TokenAccessLevels desiredAccess, bool threadOnly)', 'static WindowsIdentity'),
  \ dotnet#method('GetCurrentThreadToken(', 'TokenAccessLevels desiredAccess, [out] int32& hr)', 'static SafeTokenHandle'),
  \ dotnet#method('QueryImpersonation(', ')', 'static ImpersonationQueryResult'),
  \ dotnet#prop('AuthenticationType', 'string'),
  \ dotnet#prop('ImpersonationLevel', 'TokenImpersonationLevel'),
  \ dotnet#prop('IsAuthenticated', 'bool'),
  \ dotnet#prop('IsGuest', 'bool'),
  \ dotnet#prop('IsSystem', 'bool'),
  \ dotnet#prop('IsAnonymous', 'bool'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Owner', 'SecurityIdentifier'),
  \ dotnet#prop('User', 'SecurityIdentifier'),
  \ dotnet#prop('Groups', 'IdentityReferenceCollection'),
  \ dotnet#prop('Token', 'int'),
  \ dotnet#prop('TokenHandle', 'SafeTokenHandle'),
  \ ])

call dotnet#class('WindowsImpersonationContext', 'Object', [ 
  \ dotnet#method('WindowsImpersonationContext(', ')', 'void'),
  \ dotnet#method('WindowsImpersonationContext(', 'class SafeTokenHandle safeTokenHandle, WindowsIdentity wi, bool isImpersonating, FrameSecurityDescriptor fsd)', 'void'),
  \ dotnet#method('Undo(', ')', 'void'),
  \ dotnet#method('UndoNoThrow(', ')', 'bool'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ ])

call dotnet#class('WindowsPrincipal', 'Object', [ 
  \ dotnet#method('WindowsPrincipal(', ')', 'void'),
  \ dotnet#method('WindowsPrincipal(', 'class WindowsIdentity ntIdentity)', 'void'),
  \ dotnet#method('get_Identity(', ')', ''),
  \ dotnet#method('IsInRole(', 'string role)', 'bool'),
  \ dotnet#method('IsInRole(', 'WindowsBuiltInRole role)', 'bool'),
  \ dotnet#method('IsInRole(', 'int32 rid)', 'bool'),
  \ dotnet#method('IsInRole(', 'class SecurityIdentifier sid)', 'bool'),
  \ dotnet#prop('Identity', 'IIdentity'),
  \ ])

call dotnet#class('IdentityReference', 'Object', [ 
  \ dotnet#method('IdentityReference(', ')', 'void'),
  \ dotnet#method('get_Value(', ')', 'abstract string'),
  \ dotnet#method('IsValidTargetType(', 'class Type targetType)', 'abstract bool'),
  \ dotnet#method('Translate(', 'class Type targetType)', 'abstract'),
  \ dotnet#method('Equals(', 'object o)', 'abstract bool'),
  \ dotnet#method('GetHashCode(', ')', 'abstract int32'),
  \ dotnet#method('ToString(', ')', 'abstract string'),
  \ dotnet#method('op_Equality(', 'class IdentityReference left, IdentityReference right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class IdentityReference left, IdentityReference right)', 'static bool'),
  \ dotnet#prop('Value', 'string'),
  \ ])

call dotnet#class('IdentityReferenceCollection', 'Object', [ 
  \ dotnet#method('IdentityReferenceCollection(', ')', 'void'),
  \ dotnet#method('IdentityReferenceCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('CopyTo(', 'class IdentityReference[] array, int32 offset)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Add(', 'class IdentityReference identity)', 'void'),
  \ dotnet#method('Remove(', 'class IdentityReference identity)', 'bool'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class IdentityReference identity)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Item(', 'int32 index)', 'IdentityReference'),
  \ dotnet#method('set_Item(', 'int32 index, IdentityReference value)', 'void'),
  \ dotnet#method('get_Identities(', ')', '.method'),
  \ dotnet#method('Translate(', 'class Type targetType)', 'IdentityReferenceCollection'),
  \ dotnet#method('Translate(', 'class Type targetType, bool forceSuccess)', 'IdentityReferenceCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'IdentityReference'),
  \ dotnet#prop('Identities', 'List'),
  \ ])

call dotnet#class('NTAccount', 'IdentityReference', [ 
  \ dotnet#method('NTAccount(', 'string domainName, string accountName)', 'void'),
  \ dotnet#method('NTAccount(', 'string name)', 'void'),
  \ dotnet#method('get_Value(', ')', 'string'),
  \ dotnet#method('IsValidTargetType(', 'class Type targetType)', 'bool'),
  \ dotnet#method('Translate(', 'class Type targetType)', 'IdentityReference'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Translate(', 'class IdentityReferenceCollection sourceAccounts, Type targetType, bool forceSuccess)', 'static IdentityReferenceCollection'),
  \ dotnet#method('Translate(', 'class IdentityReferenceCollection sourceAccounts, Type targetType, [out] bool& someFailed)', 'static IdentityReferenceCollection'),
  \ dotnet#method('op_Equality(', 'class NTAccount left, NTAccount right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class NTAccount left, NTAccount right)', 'static bool'),
  \ dotnet#prop('Value', 'string'),
  \ ])

call dotnet#class('SecurityIdentifier', 'IdentityReference', [ 
  \ dotnet#method('SecurityIdentifier(', 'string sddlForm)', 'void'),
  \ dotnet#method('SecurityIdentifier(', 'uint8[] binaryForm, int32 offset)', 'void'),
  \ dotnet#method('SecurityIdentifier(', 'native int binaryForm)', 'void'),
  \ dotnet#method('SecurityIdentifier(', 'native int binaryForm, bool noDemand)', 'void'),
  \ dotnet#method('SecurityIdentifier(', 'WellKnownSidType sidType, SecurityIdentifier domainSid)', 'void'),
  \ dotnet#method('SecurityIdentifier(', 'class SecurityIdentifier domainSid, uint32 rid)', 'void'),
  \ dotnet#method('SecurityIdentifier(', 'IdentifierAuthority identifierAuthority, int32[] subAuthorities)', 'void'),
  \ dotnet#method('get_Revision(', ')', 'static uint8'),
  \ dotnet#method('get_BinaryForm(', ')', 'uint8[]'),
  \ dotnet#method('get_IdentifierAuthority(', ')', '.method'),
  \ dotnet#method('get_SubAuthorityCount(', ')', 'int32'),
  \ dotnet#method('get_BinaryLength(', ')', 'int32'),
  \ dotnet#method('get_AccountDomainSid(', ')', 'SecurityIdentifier'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'class SecurityIdentifier sid)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Value(', ')', 'string'),
  \ dotnet#method('IsValidTargetTypeStatic(', 'class Type targetType)', 'static bool'),
  \ dotnet#method('IsValidTargetType(', 'class Type targetType)', 'bool'),
  \ dotnet#method('GetAccountDomainSid(', ')', 'SecurityIdentifier'),
  \ dotnet#method('IsAccountSid(', ')', 'bool'),
  \ dotnet#method('Translate(', 'class Type targetType)', 'IdentityReference'),
  \ dotnet#method('op_Equality(', 'class SecurityIdentifier left, SecurityIdentifier right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class SecurityIdentifier left, SecurityIdentifier right)', 'static bool'),
  \ dotnet#method('CompareTo(', 'class SecurityIdentifier sid)', 'int32'),
  \ dotnet#method('GetSubAuthority(', 'int32 index)', 'int32'),
  \ dotnet#method('IsWellKnown(', 'WellKnownSidType type)', 'bool'),
  \ dotnet#method('GetBinaryForm(', 'uint8[] binaryForm, int32 offset)', 'void'),
  \ dotnet#method('IsEqualDomainSid(', 'class SecurityIdentifier sid)', 'bool'),
  \ dotnet#method('Translate(', 'class IdentityReferenceCollection sourceSids, Type targetType, bool forceSuccess)', 'static IdentityReferenceCollection'),
  \ dotnet#method('Translate(', 'class IdentityReferenceCollection sourceSids, Type targetType, [out] bool& someFailed)', 'static IdentityReferenceCollection'),
  \ dotnet#method('SecurityIdentifier(', ')', 'static void .'),
  \ dotnet#prop('Revision', 'uint8'),
  \ dotnet#prop('BinaryForm', 'uint8[]'),
  \ dotnet#prop('IdentifierAuthority', 'IdentifierAuthority'),
  \ dotnet#prop('SubAuthorityCount', 'int32'),
  \ dotnet#prop('BinaryLength', 'int32'),
  \ dotnet#prop('AccountDomainSid', 'SecurityIdentifier'),
  \ dotnet#prop('Value', 'string'),
  \ ])

call dotnet#class('IdentityNotMappedException', 'SystemException', [ 
  \ dotnet#method('IdentityNotMappedException(', ')', 'void'),
  \ dotnet#method('IdentityNotMappedException(', 'string message)', 'void'),
  \ dotnet#method('IdentityNotMappedException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('IdentityNotMappedException(', 'string message, IdentityReferenceCollection unmappedIdentities)', 'void'),
  \ dotnet#method('IdentityNotMappedException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_UnmappedIdentities(', ')', 'IdentityReferenceCollection'),
  \ dotnet#prop('UnmappedIdentities', 'IdentityReferenceCollection'),
  \ ])

