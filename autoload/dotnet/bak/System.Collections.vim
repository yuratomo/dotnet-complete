call dotnet#namespace('System.Collections')

call dotnet#class('CaseInsensitiveComparer', 'Object', [ 
  \ dotnet#method('CaseInsensitiveComparer(', ')', 'void'),
  \ dotnet#method('CaseInsensitiveComparer(', 'class CultureInfo culture)', 'void'),
  \ dotnet#method('get_Default(', ')', 'static'),
  \ dotnet#method('get_DefaultInvariant(', ')', 'static'),
  \ dotnet#method('Compare(', 'object a, object b)', 'int32'),
  \ dotnet#prop('Default', 'CaseInsensitiveComparer'),
  \ dotnet#prop('DefaultInvariant', 'CaseInsensitiveComparer'),
  \ ])

call dotnet#class('CaseInsensitiveHashCodeProvider', 'Object', [ 
  \ dotnet#method('CaseInsensitiveHashCodeProvider(', ')', 'void'),
  \ dotnet#method('CaseInsensitiveHashCodeProvider(', 'class CultureInfo culture)', 'void'),
  \ dotnet#method('get_Default(', ')', 'static'),
  \ dotnet#method('get_DefaultInvariant(', ')', 'static'),
  \ dotnet#method('GetHashCode(', 'object obj)', 'int32'),
  \ dotnet#method('CaseInsensitiveHashCodeProvider(', ')', 'static void .'),
  \ dotnet#prop('Default', 'CaseInsensitiveHashCodeProvider'),
  \ dotnet#prop('DefaultInvariant', 'CaseInsensitiveHashCodeProvider'),
  \ ])

call dotnet#class('CollectionBase', 'Object', [ 
  \ dotnet#method('CollectionBase(', ')', 'void'),
  \ dotnet#method('CollectionBase(', 'int32 capacity)', 'void'),
  \ dotnet#method('get_InnerList(', ')', 'ArrayList'),
  \ dotnet#method('get_List(', ')', 'IList'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('OnSet(', 'int32 index, object oldValue, object newValue)', 'void'),
  \ dotnet#method('OnInsert(', 'int32 index, object value)', 'void'),
  \ dotnet#method('OnClear(', ')', 'void'),
  \ dotnet#method('OnRemove(', 'int32 index, object value)', 'void'),
  \ dotnet#method('OnValidate(', 'object value)', 'void'),
  \ dotnet#method('OnSetComplete(', 'int32 index, object oldValue, object newValue)', 'void'),
  \ dotnet#method('OnInsertComplete(', 'int32 index, object value)', 'void'),
  \ dotnet#method('OnClearComplete(', ')', 'void'),
  \ dotnet#method('OnRemoveComplete(', 'int32 index, object value)', 'void'),
  \ dotnet#prop('InnerList', 'ArrayList'),
  \ dotnet#prop('List', 'IList'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ ])

call dotnet#class('DictionaryBase', 'Object', [ 
  \ dotnet#method('get_InnerHashtable(', ')', 'Hashtable'),
  \ dotnet#method('get_Dictionary(', ')', 'IDictionary'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'object key)', 'object '),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void '),
  \ dotnet#method('Contains(', 'object key)', 'bool '),
  \ dotnet#method('Add(', 'object key, object value)', 'void '),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Remove(', 'object key)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('OnGet(', 'object key, object currentValue)', 'object'),
  \ dotnet#method('OnSet(', 'object key, object oldValue, object newValue)', 'void'),
  \ dotnet#method('OnInsert(', 'object key, object value)', 'void'),
  \ dotnet#method('OnClear(', ')', 'void'),
  \ dotnet#method('OnRemove(', 'object key, object value)', 'void'),
  \ dotnet#method('OnValidate(', 'object key, object value)', 'void'),
  \ dotnet#method('OnSetComplete(', 'object key, object oldValue, object newValue)', 'void'),
  \ dotnet#method('OnInsertComplete(', 'object key, object value)', 'void'),
  \ dotnet#method('OnClearComplete(', ')', 'void'),
  \ dotnet#method('OnRemoveComplete(', 'object key, object value)', 'void'),
  \ dotnet#method('DictionaryBase(', ')', 'void'),
  \ dotnet#prop('InnerHashtable', 'Hashtable'),
  \ dotnet#prop('Dictionary', 'IDictionary'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('Item(object)', 'object'),
  \ ])

call dotnet#class('ReadOnlyCollectionBase', 'Object', [ 
  \ dotnet#method('get_InnerList(', ')', 'ArrayList'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('ReadOnlyCollectionBase(', ')', 'void'),
  \ dotnet#prop('InnerList', 'ArrayList'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('Queue', 'Object', [ 
  \ dotnet#method('Queue(', 'class Queue queue)', 'void'),
  \ dotnet#method('get_Items(', ')', 'object[]'),
  \ dotnet#prop('Items', 'object[]'),
  \ dotnet#method('Queue(', ')', 'void'),
  \ dotnet#method('Queue(', 'int32 capacity)', 'void'),
  \ dotnet#method('Queue(', 'int32 capacity, float32 growFQueue)', 'void'),
  \ dotnet#method('Queue(', 'class ICollection col)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('Enqueue(', 'object obj)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Dequeue(', ')', 'object'),
  \ dotnet#method('Peek(', ')', 'object'),
  \ dotnet#method('Synchronized(', 'class Queue queue)', 'static Queue'),
  \ dotnet#method('Contains(', 'object obj)', 'bool'),
  \ dotnet#method('GetElement(', 'int32 i)', 'object'),
  \ dotnet#method('ToArray(', ')', 'object[]'),
  \ dotnet#method('TrimToSize(', ')', 'void'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('ArrayList', 'Object', [ 
  \ dotnet#method('ArrayList(', 'class ArrayList arrayList)', 'void'),
  \ dotnet#method('get_Items(', ')', 'object[]'),
  \ dotnet#prop('Items', 'object[]'),
  \ dotnet#method('ArrayList(', 'bool trash)', 'void'),
  \ dotnet#method('ArrayList(', ')', 'void'),
  \ dotnet#method('ArrayList(', 'int32 capacity)', 'void'),
  \ dotnet#method('ArrayList(', 'class ICollection c)', 'void'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object'),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void'),
  \ dotnet#method('Adapter(', 'class IList list)', 'static ArrayList'),
  \ dotnet#method('Add(', 'object value)', 'int32'),
  \ dotnet#method('AddRange(', 'class ICollection c)', 'void'),
  \ dotnet#method('BinarySearch(', 'int32 index, int32 count, object value, IComparer comparer)', 'int32'),
  \ dotnet#method('BinarySearch(', 'object value)', 'int32'),
  \ dotnet#method('BinarySearch(', 'object value, IComparer comparer)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('Contains(', 'object item)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void'),
  \ dotnet#method('CopyTo(', 'int32 index, Array array, int32 arrayIndex, int32 count)', 'void'),
  \ dotnet#method('FixedSize(', 'class IList list)', 'static IList'),
  \ dotnet#method('FixedSize(', 'class ArrayList list)', 'static ArrayList'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', 'int32 index, int32 count)', ''),
  \ dotnet#method('IndexOf(', 'object value)', 'int32'),
  \ dotnet#method('IndexOf(', 'object value, int32 startIndex)', 'int32'),
  \ dotnet#method('IndexOf(', 'object value, int32 startIndex, int32 count)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void'),
  \ dotnet#method('InsertRange(', 'int32 index, ICollection c)', 'void'),
  \ dotnet#method('LastIndexOf(', 'object value)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'object value, int32 startIndex)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'object value, int32 startIndex, int32 count)', 'int32'),
  \ dotnet#method('ReadOnly(', 'class IList list)', 'static IList'),
  \ dotnet#method('ReadOnly(', 'class ArrayList list)', 'static ArrayList'),
  \ dotnet#method('Remove(', 'object obj)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('Repeat(', 'object value, int32 count)', 'static ArrayList'),
  \ dotnet#method('Reverse(', ')', 'void'),
  \ dotnet#method('Reverse(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('SetRange(', 'int32 index, ICollection c)', 'void'),
  \ dotnet#method('GetRange(', 'int32 index, int32 count)', ''),
  \ dotnet#method('Sort(', ')', 'void'),
  \ dotnet#method('Sort(', 'class IComparer comparer)', 'void'),
  \ dotnet#method('Sort(', 'int32 index, int32 count, IComparer comparer)', 'void'),
  \ dotnet#method('Synchronized(', 'class IList list)', 'static IList'),
  \ dotnet#method('Synchronized(', 'class ArrayList list)', 'static ArrayList'),
  \ dotnet#method('ToArray(', ')', 'object[]'),
  \ dotnet#method('ToArray(', 'class Type type)', 'Array'),
  \ dotnet#method('TrimToSize(', ')', 'void'),
  \ dotnet#method('ArrayList(', ')', 'static void .'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ ])

call dotnet#class('BitArray', 'Object', [ 
  \ dotnet#method('BitArray(', ')', 'void'),
  \ dotnet#method('BitArray(', 'int32 length)', 'void'),
  \ dotnet#method('BitArray(', 'int32 length, bool defaultValue)', 'void'),
  \ dotnet#method('BitArray(', 'uint8[] bytes)', 'void'),
  \ dotnet#method('BitArray(', 'bool[] values)', 'void'),
  \ dotnet#method('BitArray(', 'int32[] values)', 'void'),
  \ dotnet#method('BitArray(', 'class BitArray bits)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'bool'),
  \ dotnet#method('set_Item(', 'int32 index, bool value)', 'void'),
  \ dotnet#method('Get(', 'int32 index)', 'bool'),
  \ dotnet#method('Set(', 'int32 index, bool value)', 'void'),
  \ dotnet#method('SetAll(', 'bool value)', 'void'),
  \ dotnet#method('And(', 'class BitArray value)', 'BitArray'),
  \ dotnet#method('Or(', 'class BitArray value)', 'BitArray'),
  \ dotnet#method('Xor(', 'class BitArray value)', 'BitArray'),
  \ dotnet#method('Not(', ')', 'BitArray'),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('set_Length(', 'int32 value)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#prop('Item(int32)', 'bool'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ ])

call dotnet#class('Stack', 'Object', [ 
  \ dotnet#method('Stack(', 'class Stack stack)', 'void'),
  \ dotnet#method('get_Items(', ')', 'object[]'),
  \ dotnet#prop('Items', 'object[]'),
  \ dotnet#method('Stack(', ')', 'void'),
  \ dotnet#method('Stack(', 'int32 initialCapacity)', 'void'),
  \ dotnet#method('Stack(', 'class ICollection col)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('Contains(', 'object obj)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Peek(', ')', 'object'),
  \ dotnet#method('Pop(', ')', 'object'),
  \ dotnet#method('Push(', 'object obj)', 'void'),
  \ dotnet#method('Synchronized(', 'class Stack stack)', 'static Stack'),
  \ dotnet#method('ToArray(', ')', 'object[]'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('Comparer', 'Object', [ 
  \ dotnet#method('Comparer(', ')', 'void'),
  \ dotnet#method('Comparer(', 'class CultureInfo culture)', 'void'),
  \ dotnet#method('Compare(', 'object a, object b)', 'int32'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('Comparer(', ')', 'static void .'),
  \ ])

call dotnet#class('Hashtable', 'Object', [ 
  \ dotnet#method('Hashtable(', 'class Hashtable hashtable)', 'void'),
  \ dotnet#method('get_Items(', ')', ''),
  \ dotnet#prop('Items', 'KeyValuePairs[]'),
  \ dotnet#method('get_hcp(', ')', 'IHashCodeProvider'),
  \ dotnet#method('set_hcp(', 'class IHashCodeProvider value)', 'void'),
  \ dotnet#method('get_comparer(', ')', 'IComparer'),
  \ dotnet#method('set_comparer(', 'class IComparer value)', 'void'),
  \ dotnet#method('get_EqualityComparer(', ')', 'IEqualityComparer'),
  \ dotnet#method('Hashtable(', 'bool trash)', 'void'),
  \ dotnet#method('Hashtable(', ')', 'void'),
  \ dotnet#method('Hashtable(', 'int32 capacity)', 'void'),
  \ dotnet#method('Hashtable(', 'int32 capacity, float32 loadFHashtable)', 'void'),
  \ dotnet#method('Hashtable(', 'int32 capacity, float32 loadFHashtable, IHashCodeProvider hcp, IComparer comparer)', 'void'),
  \ dotnet#method('Hashtable(', 'int32 capacity, float32 loadFHashtable, IEqualityComparer equalityComparer)', 'void'),
  \ dotnet#method('Hashtable(', 'class IHashCodeProvider hcp, IComparer comparer)', 'void'),
  \ dotnet#method('Hashtable(', 'class IEqualityComparer equalityComparer)', 'void'),
  \ dotnet#method('Hashtable(', 'int32 capacity, IHashCodeProvider hcp, IComparer comparer)', 'void'),
  \ dotnet#method('Hashtable(', 'int32 capacity, IEqualityComparer equalityComparer)', 'void'),
  \ dotnet#method('Hashtable(', 'class IDictionary d)', 'void'),
  \ dotnet#method('Hashtable(', 'class IDictionary d, float32 loadFHashtable)', 'void'),
  \ dotnet#method('Hashtable(', 'class IDictionary d, IHashCodeProvider hcp, IComparer comparer)', 'void'),
  \ dotnet#method('Hashtable(', 'class IDictionary d, IEqualityComparer equalityComparer)', 'void'),
  \ dotnet#method('Hashtable(', 'class IDictionary d, float32 loadFHashtable, IHashCodeProvider hcp, IComparer comparer)', 'void'),
  \ dotnet#method('Hashtable(', 'class IDictionary d, float32 loadFHashtable, IEqualityComparer equalityComparer)', 'void'),
  \ dotnet#method('Hashtable(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('Add(', 'object key, object value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('Contains(', 'object key)', 'bool'),
  \ dotnet#method('ContainsKey(', 'object key)', 'bool'),
  \ dotnet#method('ContainsValue(', 'object value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void'),
  \ dotnet#method('ToKeyValuePairsArray(', ')', 'strict'),
  \ dotnet#method('get_Item(', 'object key)', 'object'),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetHash(', 'object key)', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('KeyEquals(', 'object item, object key)', 'bool'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('Remove(', 'object key)', 'void'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('Synchronized(', 'class Hashtable table)', 'static Hashtable'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#prop('hcp', 'IHashCodeProvider'),
  \ dotnet#prop('comparer', 'IComparer'),
  \ dotnet#prop('EqualityComparer', 'IEqualityComparer'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ ])

call dotnet#class('DictionaryEntry', 'ValueType', [ 
  \ dotnet#field('_key', 'object'),
  \ dotnet#field('_value', 'object'),
  \ dotnet#method('DictionaryEntry(', 'object key, object value)', 'void'),
  \ dotnet#method('get_Key(', ')', 'object'),
  \ dotnet#method('set_Key(', 'object value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('set_Value(', 'object value)', 'void'),
  \ dotnet#prop('Key', 'object'),
  \ dotnet#prop('Value', 'object'),
  \ ])

call dotnet#class('SortedList', 'Object', [ 
  \ dotnet#method('SortedList(', 'class SortedList sortedList)', 'void'),
  \ dotnet#method('get_Items(', ')', ''),
  \ dotnet#prop('Items', 'KeyValuePairs[]'),
  \ dotnet#method('SortedList(', ')', 'void'),
  \ dotnet#method('SortedList(', 'int32 initialCapacity)', 'void'),
  \ dotnet#method('SortedList(', 'class IComparer comparer)', 'void'),
  \ dotnet#method('SortedList(', 'class IComparer comparer, int32 capacity)', 'void'),
  \ dotnet#method('SortedList(', 'class IDictionary d)', 'void'),
  \ dotnet#method('SortedList(', 'class IDictionary d, IComparer comparer)', 'void'),
  \ dotnet#method('Add(', 'object key, object value)', 'void'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('Contains(', 'object key)', 'bool'),
  \ dotnet#method('ContainsKey(', 'object key)', 'bool'),
  \ dotnet#method('ContainsValue(', 'object value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void'),
  \ dotnet#method('ToKeyValuePairsArray(', ')', 'strict'),
  \ dotnet#method('GetByIndex(', 'int32 index)', 'object'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetKey(', 'int32 index)', 'object'),
  \ dotnet#method('GetKeyList(', ')', ''),
  \ dotnet#method('GetValueList(', ')', ''),
  \ dotnet#method('get_Item(', 'object key)', 'object'),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void'),
  \ dotnet#method('IndexOfKey(', 'object key)', 'int32'),
  \ dotnet#method('IndexOfValue(', 'object value)', 'int32'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('Remove(', 'object key)', 'void'),
  \ dotnet#method('SetByIndex(', 'int32 index, object value)', 'void'),
  \ dotnet#method('Synchronized(', 'class SortedList list)', 'static SortedList'),
  \ dotnet#method('TrimToSize(', ')', 'void'),
  \ dotnet#method('SortedList(', ')', 'static void .'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(object)', 'object'),
  \ ])

call dotnet#class('StructuralComparisons', 'Object', [ 
  \ dotnet#method('get_StructuralComparer(', ')', 'static'),
  \ dotnet#method('get_StructuralEqualityComparer(', ')', 'static'),
  \ dotnet#prop('StructuralComparer', 'IComparer'),
  \ dotnet#prop('StructuralEqualityComparer', 'IEqualityComparer'),
  \ ])

