call dotnet#namespace('System.Windows.Media.TextFormatting')

call dotnet#class('TextLine', 'Object', [ 
  \ dotnet#method('Dispose(', ')', 'abstract void'),
  \ dotnet#method('Draw(', 'class DrawingContext drawingContext, Point origin, InvertAxes inversion)', 'abstract void'),
  \ dotnet#method('Collapse(', 'class TextCollapsingProperties[] collapsingPropertiesList)', 'abstract'),
  \ dotnet#method('GetTextCollapsedRanges(', ')', 'abstract'),
  \ dotnet#method('GetCharacterHitFromDistance(', 'float64 distance)', 'abstract'),
  \ dotnet#method('GetDistanceFromCharacterHit(', 'CharacterHit characterHit)', 'abstract float64'),
  \ dotnet#method('GetNextCaretCharacterHit(', 'CharacterHit characterHit)', 'abstract'),
  \ dotnet#method('GetPreviousCaretCharacterHit(', 'CharacterHit characterHit)', 'abstract'),
  \ dotnet#method('GetBackspaceCaretCharacterHit(', 'CharacterHit characterHit)', 'abstract'),
  \ dotnet#method('IsAtCaretCharacterHit(', 'CharacterHit characterHit, int32 cpFirst)', 'bool'),
  \ dotnet#method('GetTextBounds(', 'int32 firstTextSourceCharacterIndex, int32 textLength)', 'abstract'),
  \ dotnet#method('GetTextRunSpans(', ')', 'abstract'),
  \ dotnet#method('GetIndexedGlyphRuns(', ')', 'abstract'),
  \ dotnet#method('get_HasOverflowed(', ')', 'abstract bool'),
  \ dotnet#method('get_HasCollapsed(', ')', 'abstract bool'),
  \ dotnet#method('get_IsTruncated(', ')', 'bool'),
  \ dotnet#method('GetTextLineBreak(', ')', 'abstract'),
  \ dotnet#method('get_Length(', ')', 'abstract int32'),
  \ dotnet#method('get_TrailingWhitespaceLength(', ')', 'abstract int32'),
  \ dotnet#method('get_DependentLength(', ')', 'abstract int32'),
  \ dotnet#method('get_NewlineLength(', ')', 'abstract int32'),
  \ dotnet#method('get_Start(', ')', 'abstract float64'),
  \ dotnet#method('get_Width(', ')', 'abstract float64'),
  \ dotnet#method('get_WidthIncludingTrailingWhitespace(', ')', 'abstract float64'),
  \ dotnet#method('get_Height(', ')', 'abstract float64'),
  \ dotnet#method('get_TextHeight(', ')', 'abstract float64'),
  \ dotnet#method('get_Extent(', ')', 'abstract float64'),
  \ dotnet#method('get_Baseline(', ')', 'abstract float64'),
  \ dotnet#method('get_TextBaseline(', ')', 'abstract float64'),
  \ dotnet#method('get_MarkerBaseline(', ')', 'abstract float64'),
  \ dotnet#method('get_MarkerHeight(', ')', 'abstract float64'),
  \ dotnet#method('get_OverhangLeading(', ')', 'abstract float64'),
  \ dotnet#method('get_OverhangTrailing(', ')', 'abstract float64'),
  \ dotnet#method('get_OverhangAfter(', ')', 'abstract float64'),
  \ dotnet#method('TextLine(', ')', 'void'),
  \ dotnet#prop('HasOverflowed', 'bool'),
  \ dotnet#prop('HasCollapsed', 'bool'),
  \ dotnet#prop('IsTruncated', 'bool'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('TrailingWhitespaceLength', 'int32'),
  \ dotnet#prop('DependentLength', 'int32'),
  \ dotnet#prop('NewlineLength', 'int32'),
  \ dotnet#prop('Start', 'float64'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('WidthIncludingTrailingWhitespace', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('TextHeight', 'float64'),
  \ dotnet#prop('Extent', 'float64'),
  \ dotnet#prop('Baseline', 'float64'),
  \ dotnet#prop('TextBaseline', 'float64'),
  \ dotnet#prop('MarkerBaseline', 'float64'),
  \ dotnet#prop('MarkerHeight', 'float64'),
  \ dotnet#prop('OverhangLeading', 'float64'),
  \ dotnet#prop('OverhangTrailing', 'float64'),
  \ dotnet#prop('OverhangAfter', 'float64'),
  \ ])

call dotnet#class('TextRunProperties', 'Object', [ 
  \ dotnet#method('get_Typeface(', ')', 'abstract'),
  \ dotnet#method('get_FontRenderingEmSize(', ')', 'abstract float64'),
  \ dotnet#method('get_FontHintingEmSize(', ')', 'abstract float64'),
  \ dotnet#method('get_TextDecorations(', ')', 'abstract'),
  \ dotnet#method('get_ForegroundBrush(', ')', 'abstract'),
  \ dotnet#method('get_BackgroundBrush(', ')', 'abstract'),
  \ dotnet#method('get_CultureInfo(', ')', 'abstract'),
  \ dotnet#method('get_TextEffects(', ')', 'abstract'),
  \ dotnet#method('get_BaselineAlignment(', ')', ''),
  \ dotnet#method('get_TypographyProperties(', ')', ''),
  \ dotnet#method('get_NumberSubstitution(', ')', ''),
  \ dotnet#method('TextRunProperties(', ')', 'void'),
  \ dotnet#prop('Typeface', 'Typeface'),
  \ dotnet#prop('FontRenderingEmSize', 'float64'),
  \ dotnet#prop('FontHintingEmSize', 'float64'),
  \ dotnet#prop('TextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('ForegroundBrush', 'Brush'),
  \ dotnet#prop('BackgroundBrush', 'Brush'),
  \ dotnet#prop('CultureInfo', 'CultureInfo'),
  \ dotnet#prop('TextEffects', 'TextEffectCollection'),
  \ dotnet#prop('BaselineAlignment', 'BaselineAlignment'),
  \ dotnet#prop('TypographyProperties', 'TextRunTypographyProperties'),
  \ dotnet#prop('NumberSubstitution', 'NumberSubstitution'),
  \ ])

call dotnet#class('TextParagraphProperties', 'Object', [ 
  \ dotnet#method('get_FlowDirection(', ')', 'abstract'),
  \ dotnet#method('get_TextAlignment(', ')', 'abstract'),
  \ dotnet#method('get_LineHeight(', ')', 'abstract float64'),
  \ dotnet#method('get_FirstLineInParagraph(', ')', 'abstract bool'),
  \ dotnet#method('get_AlwaysCollapsible(', ')', 'bool'),
  \ dotnet#method('get_DefaultTextRunProperties(', ')', 'abstract'),
  \ dotnet#method('get_TextDecorations(', ')', ''),
  \ dotnet#method('get_TextWrapping(', ')', 'abstract'),
  \ dotnet#method('get_TextMarkerProperties(', ')', 'abstract'),
  \ dotnet#method('get_Indent(', ')', 'abstract float64'),
  \ dotnet#method('get_ParagraphIndent(', ')', 'float64'),
  \ dotnet#method('get_DefaultIncrementalTab(', ')', 'float64'),
  \ dotnet#method('get_Tabs(', ')', ''),
  \ dotnet#method('get_Hyphenator(', ')', 'strict'),
  \ dotnet#method('set_Hyphenator(', 'class TextLexicalService value)', 'strict void'),
  \ dotnet#method('TextParagraphProperties(', ')', 'void'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('FirstLineInParagraph', 'bool'),
  \ dotnet#prop('AlwaysCollapsible', 'bool'),
  \ dotnet#prop('DefaultTextRunProperties', 'TextRunProperties'),
  \ dotnet#prop('TextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('TextWrapping', 'TextWrapping'),
  \ dotnet#prop('TextMarkerProperties', 'TextMarkerProperties'),
  \ dotnet#prop('Indent', 'float64'),
  \ dotnet#prop('ParagraphIndent', 'float64'),
  \ dotnet#prop('DefaultIncrementalTab', 'float64'),
  \ dotnet#prop('Tabs', 'IList'),
  \ dotnet#prop('Hyphenator', 'TextLexicalService'),
  \ ])

call dotnet#class('TextRun', 'Object', [ 
  \ dotnet#method('get_CharacterBufferReference(', ')', 'abstract'),
  \ dotnet#method('get_Length(', ')', 'abstract int32'),
  \ dotnet#method('get_Properties(', ')', 'abstract'),
  \ dotnet#method('TextRun(', ')', 'void'),
  \ dotnet#prop('CharacterBufferReference', 'CharacterBufferReference'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Properties', 'TextRunProperties'),
  \ ])

call dotnet#class('TextFormatter', 'Object', [ 
  \ dotnet#method('Create(', 'TextFormattingMode textFormattingMode)', 'static TextFormatter'),
  \ dotnet#method('Create(', ')', 'static TextFormatter'),
  \ dotnet#method('CreateFromContext(', 'class TextFormatterContext soleContext)', 'static TextFormatter'),
  \ dotnet#method('CreateFromContext(', 'class TextFormatterContext soleContext, TextFormattingMode textFormattingMode)', 'static TextFormatter'),
  \ dotnet#method('FromCurrentDispatcher(', ')', 'static TextFormatter'),
  \ dotnet#method('FromCurrentDispatcher(', 'TextFormattingMode textFormattingMode)', 'static TextFormatter'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('FormatLine(', 'class TextSource textSource, int32 firstCharIndex, float64 paragraphWidth, TextParagraphProperties paragraphProperties, TextLineBreak previousLineBreak)', 'abstract'),
  \ dotnet#method('FormatLine(', 'class TextSource textSource, int32 firstCharIndex, float64 paragraphWidth, TextParagraphProperties paragraphProperties, TextLineBreak previousLineBreak, TextRunCache textRunCache)', 'abstract'),
  \ dotnet#method('RecreateLine(', 'class TextSource textSource, int32 firstCharIndex, int32 lineLength, float64 paragraphWidth, TextParagraphProperties paragraphProperties, TextLineBreak previousLineBreak, TextRunCache textRunCache)', 'abstract strict'),
  \ dotnet#method('CreateParagraphCache(', 'class TextSource textSource, int32 firstCharIndex, float64 paragraphWidth, TextParagraphProperties paragraphProperties, TextLineBreak previousLineBreak, TextRunCache textRunCache)', 'abstract strict'),
  \ dotnet#method('FormatMinMaxParagraphWidth(', 'class TextSource textSource, int32 firstCharIndex, TextParagraphProperties paragraphProperties)', 'abstract'),
  \ dotnet#method('FormatMinMaxParagraphWidth(', 'class TextSource textSource, int32 firstCharIndex, TextParagraphProperties paragraphProperties, TextRunCache textRunCache)', 'abstract'),
  \ dotnet#method('TextFormatter(', ')', 'void'),
  \ dotnet#method('TextFormatter(', ')', 'static void .'),
  \ ])

call dotnet#class('TextSource', 'Object', [ 
  \ dotnet#method('GetTextRun(', 'int32 textSourceCharacterIndex)', 'abstract'),
  \ dotnet#method('GetPrecedingText(', 'int32 textSourceCharacterIndexLimit)', 'abstract'),
  \ dotnet#method('GetTextEffectCharacterIndexFromTextSourceCharacterIndex(', 'int32 textSourceCharacterIndex)', 'abstract int32'),
  \ dotnet#method('TextSource(', ')', 'void'),
  \ ])

call dotnet#class('CharacterBufferReference', 'ValueType', [ 
  \ dotnet#field('_charBuffer', 'CharacterBuffer'),
  \ dotnet#field('_offsetToFirstChar', 'int32'),
  \ dotnet#method('CharacterBufferReference(', 'char[] characterArray, int32 offsetToFirstChar)', 'void'),
  \ dotnet#method('CharacterBufferReference(', 'string characterString, int32 offsetToFirstChar)', 'void'),
  \ dotnet#method('CharacterBufferReference(', 'char* unsafeCharacterString, int32 characterLength)', 'void'),
  \ dotnet#method('CharacterBufferReference(', 'class CharacterBuffer charBuffer, int32 offsetToFirstChar)', 'void'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'CharacterBufferReference value)', 'bool'),
  \ dotnet#method('op_Equality(', 'CharacterBufferReference left, CharacterBufferReference right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'CharacterBufferReference left, CharacterBufferReference right)', 'static bool'),
  \ dotnet#method('get_CharacterBuffer(', ')', '.method'),
  \ dotnet#method('get_OffsetToFirstChar(', ')', 'int32'),
  \ dotnet#prop('CharacterBuffer', 'CharacterBuffer'),
  \ dotnet#prop('OffsetToFirstChar', 'int32'),
  \ ])

call dotnet#class('CharacterHit', 'ValueType', [ 
  \ dotnet#field('_firstCharacterIndex', 'int32'),
  \ dotnet#field('_trailingLength', 'int32'),
  \ dotnet#method('CharacterHit(', 'int32 firstCharacterIndex, int32 trailingLength)', 'void'),
  \ dotnet#method('get_FirstCharacterIndex(', ')', 'int32'),
  \ dotnet#method('get_TrailingLength(', ')', 'int32'),
  \ dotnet#method('op_Equality(', 'CharacterHit left, CharacterHit right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'CharacterHit left, CharacterHit right)', 'static bool'),
  \ dotnet#method('Equals(', 'CharacterHit obj)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('FirstCharacterIndex', 'int32'),
  \ dotnet#prop('TrailingLength', 'int32'),
  \ ])

call dotnet#class('CharacterBufferRange', 'ValueType', [ 
  \ dotnet#field('_charBufferRef', 'CharacterBufferReference'),
  \ dotnet#field('_length', 'int32'),
  \ dotnet#method('CharacterBufferRange(', 'char[] characterArray, int32 offsetToFirstChar, int32 characterLength)', 'void'),
  \ dotnet#method('CharacterBufferRange(', 'string characterString, int32 offsetToFirstChar, int32 characterLength)', 'void'),
  \ dotnet#method('CharacterBufferRange(', 'char* unsafeCharacterString, int32 characterLength)', 'void'),
  \ dotnet#method('CharacterBufferRange(', 'CharacterBufferReference characterBufferReference, int32 characterLength)', 'void'),
  \ dotnet#method('CharacterBufferRange(', 'CharacterBufferRange characterBufferRange, int32 offsetToFirstChar, int32 characterLength)', 'void'),
  \ dotnet#method('CharacterBufferRange(', 'string charString)', 'void'),
  \ dotnet#method('CharacterBufferRange(', 'class CharacterBuffer charBuffer, int32 offsetToFirstChar, int32 characterLength)', 'void'),
  \ dotnet#method('CharacterBufferRange(', 'class TextRun textRun)', 'void'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'CharacterBufferRange value)', 'bool'),
  \ dotnet#method('op_Equality(', 'CharacterBufferRange left, CharacterBufferRange right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'CharacterBufferRange left, CharacterBufferRange right)', 'static bool'),
  \ dotnet#method('get_CharacterBufferReference(', ')', 'CharacterBufferReference'),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_CharacterBuffer(', ')', '.method'),
  \ dotnet#method('get_OffsetToFirstChar(', ')', 'int32'),
  \ dotnet#method('get_Item(', 'int32 index)', 'char'),
  \ dotnet#prop('CharacterBufferReference', 'CharacterBufferReference'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Empty', 'CharacterBufferRange'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('CharacterBuffer', 'CharacterBuffer'),
  \ dotnet#prop('OffsetToFirstChar', 'int32'),
  \ dotnet#prop('Item(int32)', 'char'),
  \ ])

call dotnet#class('CultureSpecificCharacterBufferRange', 'Object', [ 
  \ dotnet#method('CultureSpecificCharacterBufferRange(', 'class CultureInfo culture, CharacterBufferRange characterBufferRange)', 'void'),
  \ dotnet#method('get_CultureInfo(', ')', 'CultureInfo'),
  \ dotnet#method('get_CharacterBufferRange(', ')', 'CharacterBufferRange'),
  \ dotnet#prop('CultureInfo', 'CultureInfo'),
  \ dotnet#prop('CharacterBufferRange', 'CharacterBufferRange'),
  \ ])

call dotnet#class('IndexedGlyphRun', 'Object', [ 
  \ dotnet#method('IndexedGlyphRun(', 'int32 textSourceCharacterIndex, int32 textSourceCharacterLength, GlyphRun glyphRun)', 'void'),
  \ dotnet#method('get_TextSourceCharacterIndex(', ')', 'int32'),
  \ dotnet#method('get_TextSourceLength(', ')', 'int32'),
  \ dotnet#method('get_GlyphRun(', ')', 'GlyphRun'),
  \ dotnet#prop('TextSourceCharacterIndex', 'int32'),
  \ dotnet#prop('TextSourceLength', 'int32'),
  \ dotnet#prop('GlyphRun', 'GlyphRun'),
  \ ])

call dotnet#class('MinMaxParagraphWidth', 'ValueType', [ 
  \ dotnet#field('_minWidth', 'float64'),
  \ dotnet#field('_maxWidth', 'float64'),
  \ dotnet#method('MinMaxParagraphWidth(', 'float64 minWidth, float64 maxWidth)', 'void'),
  \ dotnet#method('get_MinWidth(', ')', 'float64'),
  \ dotnet#method('get_MaxWidth(', ')', 'float64'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'MinMaxParagraphWidth value)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'MinMaxParagraphWidth left, MinMaxParagraphWidth right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'MinMaxParagraphWidth left, MinMaxParagraphWidth right)', 'static bool'),
  \ dotnet#prop('MinWidth', 'float64'),
  \ dotnet#prop('MaxWidth', 'float64'),
  \ ])

call dotnet#class('TextBounds', 'Object', [ 
  \ dotnet#method('TextBounds(', 'Rect bounds, FlowDirection flowDirection, IList runBounds)', 'void'),
  \ dotnet#method('get_Rectangle(', ')', 'Rect'),
  \ dotnet#method('get_TextRunBounds(', ')', 'IList'),
  \ dotnet#method('get_FlowDirection(', ')', 'FlowDirection'),
  \ dotnet#prop('Rectangle', 'Rect'),
  \ dotnet#prop('TextRunBounds', 'IList'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ ])

call dotnet#class('TextRunBounds', 'Object', [ 
  \ dotnet#method('TextRunBounds(', 'Rect bounds, int32 cpFirst, int32 cpEnd, TextRun textRun)', 'void'),
  \ dotnet#method('get_TextSourceCharacterIndex(', ')', 'int32'),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Rectangle(', ')', 'Rect'),
  \ dotnet#method('get_TextRun(', ')', 'TextRun'),
  \ dotnet#prop('TextSourceCharacterIndex', 'int32'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Rectangle', 'Rect'),
  \ dotnet#prop('TextRun', 'TextRun'),
  \ ])

call dotnet#class('TextCharacters', 'TextRun', [ 
  \ dotnet#method('TextCharacters(', 'char[] characterArray, int32 offsetToFirstChar, int32 length, TextRunProperties textRunProperties)', 'void'),
  \ dotnet#method('TextCharacters(', 'string characterString, TextRunProperties textRunProperties)', 'void'),
  \ dotnet#method('TextCharacters(', 'string characterString, int32 offsetToFirstChar, int32 length, TextRunProperties textRunProperties)', 'void'),
  \ dotnet#method('TextCharacters(', 'char* unsafeCharacterString, int32 length, TextRunProperties textRunProperties)', 'void'),
  \ dotnet#method('get_CharacterBufferReference(', ')', ''),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Properties(', ')', ''),
  \ dotnet#method('GetTextShapeableSymbols(', 'class GlyphingCache glyphingCache, CharacterBufferReference characterBufferReference, int32 length, bool rightToLeft, bool isRightToLeftParagraph, CultureInfo digitCulture, TextModifierScope textModifierScope, TextFormattingMode textFormattingMode, bool isSideways)', ''),
  \ dotnet#method('Add(', 'class IList shapeables, CharacterBufferRange characterBufferRange, TextRunProperties textRunProperties, ItemProps textItem, ShapeTypeface shapeTypeface, float64 emScale, bool nullShape, TextFormattingMode textFormattingMode)', 'void '),
  \ dotnet#prop('CharacterBufferReference', 'CharacterBufferReference'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Properties', 'TextRunProperties'),
  \ ])

call dotnet#class('TextCollapsingProperties', 'Object', [ 
  \ dotnet#method('get_Width(', ')', 'abstract float64'),
  \ dotnet#method('get_Symbol(', ')', 'abstract'),
  \ dotnet#method('get_Style(', ')', 'abstract'),
  \ dotnet#method('TextCollapsingProperties(', ')', 'void'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Symbol', 'TextRun'),
  \ dotnet#prop('Style', 'TextCollapsingStyle'),
  \ ])

call dotnet#class('TextCollapsedRange', 'Object', [ 
  \ dotnet#method('TextCollapsedRange(', 'int32 cp, int32 length, float64 width)', 'void'),
  \ dotnet#method('get_TextSourceCharacterIndex(', ')', 'int32'),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#prop('TextSourceCharacterIndex', 'int32'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Width', 'float64'),
  \ ])

call dotnet#class('TextEmbeddedObject', 'TextRun', [ 
  \ dotnet#method('get_BreakBefore(', ')', 'abstract'),
  \ dotnet#method('get_BreakAfter(', ')', 'abstract'),
  \ dotnet#method('get_HasFixedSize(', ')', 'abstract bool'),
  \ dotnet#method('Format(', 'float64 remainingParagraphWidth)', 'abstract'),
  \ dotnet#method('ComputeBoundingBox(', 'bool rightToLeft, bool sideways)', 'abstract'),
  \ dotnet#method('Draw(', 'class DrawingContext drawingContext, Point origin, bool rightToLeft, bool sideways)', 'abstract void'),
  \ dotnet#method('TextEmbeddedObject(', ')', 'void'),
  \ dotnet#prop('BreakBefore', 'LineBreakCondition'),
  \ dotnet#prop('BreakAfter', 'LineBreakCondition'),
  \ dotnet#prop('HasFixedSize', 'bool'),
  \ ])

call dotnet#class('TextEmbeddedObjectMetrics', 'Object', [ 
  \ dotnet#method('TextEmbeddedObjectMetrics(', 'float64 width, float64 height, float64 baseline)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('get_Height(', ')', 'float64'),
  \ dotnet#method('get_Baseline(', ')', 'float64'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Baseline', 'float64'),
  \ ])

call dotnet#class('TextEndOfLine', 'TextRun', [ 
  \ dotnet#method('TextEndOfLine(', 'int32 length)', 'void'),
  \ dotnet#method('TextEndOfLine(', 'int32 length, TextRunProperties textRunProperties)', 'void'),
  \ dotnet#method('get_CharacterBufferReference(', ')', ''),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Properties(', ')', ''),
  \ dotnet#prop('CharacterBufferReference', 'CharacterBufferReference'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Properties', 'TextRunProperties'),
  \ ])

call dotnet#class('TextEndOfParagraph', 'TextEndOfLine', [ 
  \ dotnet#method('TextEndOfParagraph(', 'int32 length)', 'void'),
  \ dotnet#method('TextEndOfParagraph(', 'int32 length, TextRunProperties textRunProperties)', 'void'),
  \ ])

call dotnet#class('TextEndOfSegment', 'TextRun', [ 
  \ dotnet#method('TextEndOfSegment(', 'int32 length)', 'void'),
  \ dotnet#method('get_CharacterBufferReference(', ')', ''),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Properties(', ')', ''),
  \ dotnet#prop('CharacterBufferReference', 'CharacterBufferReference'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Properties', 'TextRunProperties'),
  \ ])

call dotnet#class('TextHidden', 'TextRun', [ 
  \ dotnet#method('TextHidden(', 'int32 length)', 'void'),
  \ dotnet#method('get_CharacterBufferReference(', ')', ''),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Properties(', ')', ''),
  \ dotnet#prop('CharacterBufferReference', 'CharacterBufferReference'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Properties', 'TextRunProperties'),
  \ ])

call dotnet#class('TextLineBreak', 'Object', [ 
  \ dotnet#method('TextLineBreak(', 'class TextModifierScope currentScope, SecurityCriticalDataForSet breakRecord)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'TextLineBreak'),
  \ dotnet#method('get_TextModifierScope(', ')', '.method'),
  \ dotnet#method('get_BreakRecord(', ')', '.method'),
  \ dotnet#prop('TextModifierScope', 'TextModifierScope'),
  \ dotnet#prop('BreakRecord', 'SecurityCriticalDataForSet'),
  \ ])

call dotnet#class('TextMarkerProperties', 'Object', [ 
  \ dotnet#method('get_Offset(', ')', 'abstract float64'),
  \ dotnet#method('get_TextSource(', ')', 'abstract'),
  \ dotnet#method('TextMarkerProperties(', ')', 'void'),
  \ dotnet#prop('Offset', 'float64'),
  \ dotnet#prop('TextSource', 'TextSource'),
  \ ])

call dotnet#class('TextModifier', 'TextRun', [ 
  \ dotnet#method('get_CharacterBufferReference(', ')', ''),
  \ dotnet#method('ModifyProperties(', 'class TextRunProperties properties)', 'abstract'),
  \ dotnet#method('get_HasDirectionalEmbedding(', ')', 'abstract bool'),
  \ dotnet#method('get_FlowDirection(', ')', 'abstract'),
  \ dotnet#method('TextModifier(', ')', 'void'),
  \ dotnet#prop('CharacterBufferReference', 'CharacterBufferReference'),
  \ dotnet#prop('HasDirectionalEmbedding', 'bool'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ ])

call dotnet#class('TextRunCache', 'Object', [ 
  \ dotnet#method('TextRunCache(', ')', 'void'),
  \ dotnet#method('Change(', 'int32 textSourceCharacterIndex, int32 addition, int32 removal)', 'void'),
  \ dotnet#method('Invalidate(', ')', 'void'),
  \ dotnet#method('GetTextRunSpans(', ')', 'IList'),
  \ dotnet#method('get_Imp(', ')', '.method'),
  \ dotnet#method('set_Imp(', 'class TextRunCacheImp value)', 'void'),
  \ dotnet#prop('Imp', 'TextRunCacheImp'),
  \ ])

call dotnet#class('TextRunTypographyProperties', 'Object', [ 
  \ dotnet#method('get_StandardLigatures(', ')', 'abstract bool'),
  \ dotnet#method('get_ContextualLigatures(', ')', 'abstract bool'),
  \ dotnet#method('get_DiscretionaryLigatures(', ')', 'abstract bool'),
  \ dotnet#method('get_HistoricalLigatures(', ')', 'abstract bool'),
  \ dotnet#method('get_ContextualAlternates(', ')', 'abstract bool'),
  \ dotnet#method('get_HistoricalForms(', ')', 'abstract bool'),
  \ dotnet#method('get_Kerning(', ')', 'abstract bool'),
  \ dotnet#method('get_CapitalSpacing(', ')', 'abstract bool'),
  \ dotnet#method('get_CaseSensitiveForms(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet1(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet2(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet3(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet4(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet5(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet6(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet7(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet8(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet9(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet10(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet11(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet12(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet13(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet14(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet15(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet16(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet17(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet18(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet19(', ')', 'abstract bool'),
  \ dotnet#method('get_StylisticSet20(', ')', 'abstract bool'),
  \ dotnet#method('get_SlashedZero(', ')', 'abstract bool'),
  \ dotnet#method('get_MathematicalGreek(', ')', 'abstract bool'),
  \ dotnet#method('get_EastAsianExpertForms(', ')', 'abstract bool'),
  \ dotnet#method('get_Variants(', ')', 'abstract'),
  \ dotnet#method('get_Capitals(', ')', 'abstract'),
  \ dotnet#method('get_Fraction(', ')', 'abstract'),
  \ dotnet#method('get_NumeralStyle(', ')', 'abstract'),
  \ dotnet#method('get_NumeralAlignment(', ')', 'abstract'),
  \ dotnet#method('get_EastAsianWidths(', ')', 'abstract'),
  \ dotnet#method('get_EastAsianLanguage(', ')', 'abstract'),
  \ dotnet#method('get_StandardSwashes(', ')', 'abstract int32'),
  \ dotnet#method('get_ContextualSwashes(', ')', 'abstract int32'),
  \ dotnet#method('get_StylisticAlternates(', ')', 'abstract int32'),
  \ dotnet#method('get_AnnotationAlternates(', ')', 'abstract int32'),
  \ dotnet#method('OnPropertiesChanged(', ')', 'void'),
  \ dotnet#method('get_CachedFeatureSet(', ')', '.method'),
  \ dotnet#method('set_CachedFeatureSet(', 'DWriteFontFeature[] value)', 'void'),
  \ dotnet#method('TextRunTypographyProperties(', ')', 'void'),
  \ dotnet#prop('StandardLigatures', 'bool'),
  \ dotnet#prop('ContextualLigatures', 'bool'),
  \ dotnet#prop('DiscretionaryLigatures', 'bool'),
  \ dotnet#prop('HistoricalLigatures', 'bool'),
  \ dotnet#prop('ContextualAlternates', 'bool'),
  \ dotnet#prop('HistoricalForms', 'bool'),
  \ dotnet#prop('Kerning', 'bool'),
  \ dotnet#prop('CapitalSpacing', 'bool'),
  \ dotnet#prop('CaseSensitiveForms', 'bool'),
  \ dotnet#prop('StylisticSet1', 'bool'),
  \ dotnet#prop('StylisticSet2', 'bool'),
  \ dotnet#prop('StylisticSet3', 'bool'),
  \ dotnet#prop('StylisticSet4', 'bool'),
  \ dotnet#prop('StylisticSet5', 'bool'),
  \ dotnet#prop('StylisticSet6', 'bool'),
  \ dotnet#prop('StylisticSet7', 'bool'),
  \ dotnet#prop('StylisticSet8', 'bool'),
  \ dotnet#prop('StylisticSet9', 'bool'),
  \ dotnet#prop('StylisticSet10', 'bool'),
  \ dotnet#prop('StylisticSet11', 'bool'),
  \ dotnet#prop('StylisticSet12', 'bool'),
  \ dotnet#prop('StylisticSet13', 'bool'),
  \ dotnet#prop('StylisticSet14', 'bool'),
  \ dotnet#prop('StylisticSet15', 'bool'),
  \ dotnet#prop('StylisticSet16', 'bool'),
  \ dotnet#prop('StylisticSet17', 'bool'),
  \ dotnet#prop('StylisticSet18', 'bool'),
  \ dotnet#prop('StylisticSet19', 'bool'),
  \ dotnet#prop('StylisticSet20', 'bool'),
  \ dotnet#prop('SlashedZero', 'bool'),
  \ dotnet#prop('MathematicalGreek', 'bool'),
  \ dotnet#prop('EastAsianExpertForms', 'bool'),
  \ dotnet#prop('Variants', 'FontVariants'),
  \ dotnet#prop('Capitals', 'FontCapitals'),
  \ dotnet#prop('Fraction', 'FontFraction'),
  \ dotnet#prop('NumeralStyle', 'FontNumeralStyle'),
  \ dotnet#prop('NumeralAlignment', 'FontNumeralAlignment'),
  \ dotnet#prop('EastAsianWidths', 'FontEastAsianWidths'),
  \ dotnet#prop('EastAsianLanguage', 'FontEastAsianLanguage'),
  \ dotnet#prop('StandardSwashes', 'int32'),
  \ dotnet#prop('ContextualSwashes', 'int32'),
  \ dotnet#prop('StylisticAlternates', 'int32'),
  \ dotnet#prop('AnnotationAlternates', 'int32'),
  \ dotnet#prop('CachedFeatureSet', 'DWriteFontFeature[]'),
  \ ])

call dotnet#class('TextSimpleMarkerProperties', 'TextMarkerProperties', [ 
  \ dotnet#method('TextSimpleMarkerProperties(', 'TextMarkerStyle style, float64 offset, int32 autoNumberingIndex, TextParagraphProperties textParagraphProperties)', 'void'),
  \ dotnet#method('get_Offset(', ')', 'float64'),
  \ dotnet#method('get_TextSource(', ')', ''),
  \ dotnet#prop('Offset', 'float64'),
  \ dotnet#prop('TextSource', 'TextSource'),
  \ ])

call dotnet#class('TextSpan', 'Object', [ 
  \ dotnet#method('TextSpan`1(', 'int32 length, !T value)', 'void TextSpan`'),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('get_Value(', ')', '!T'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Value', '!T'),
  \ ])

call dotnet#class('TextTabProperties', 'Object', [ 
  \ dotnet#method('TextTabProperties(', 'TextTabAlignment alignment, float64 location, int32 tabLeader, int32 aligningChar)', 'void'),
  \ dotnet#method('get_Alignment(', ')', 'TextTabAlignment'),
  \ dotnet#method('get_Location(', ')', 'float64'),
  \ dotnet#method('get_TabLeader(', ')', 'int32'),
  \ dotnet#method('get_AligningCharacter(', ')', 'int32'),
  \ dotnet#prop('Alignment', 'TextTabAlignment'),
  \ dotnet#prop('Location', 'float64'),
  \ dotnet#prop('TabLeader', 'int32'),
  \ dotnet#prop('AligningCharacter', 'int32'),
  \ ])

call dotnet#class('TextTrailingCharacterEllipsis', 'TextCollapsingProperties', [ 
  \ dotnet#method('TextTrailingCharacterEllipsis(', 'float64 width, TextRunProperties textRunProperties)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('get_Symbol(', ')', ''),
  \ dotnet#method('get_Style(', ')', ''),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Symbol', 'TextRun'),
  \ dotnet#prop('Style', 'TextCollapsingStyle'),
  \ ])

call dotnet#class('TextTrailingWordEllipsis', 'TextCollapsingProperties', [ 
  \ dotnet#method('TextTrailingWordEllipsis(', 'float64 width, TextRunProperties textRunProperties)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('get_Symbol(', ')', ''),
  \ dotnet#method('get_Style(', ')', ''),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Symbol', 'TextRun'),
  \ dotnet#prop('Style', 'TextCollapsingStyle'),
  \ ])

