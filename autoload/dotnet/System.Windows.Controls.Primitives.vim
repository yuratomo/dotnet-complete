call dotnet#namespace('System.Windows.Controls.Primitives')

call dotnet#class('MenuBase', 'ItemsControl', [ 
  \ dotnet#method('MenuBase(', ')', 'void'),
  \ dotnet#method('HandleMouseButton(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeave(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('IsDescendant(', 'class DependencyObject reference, DependencyObject node)', 'static bool'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('add_InternalMenuModeChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_InternalMenuModeChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('SetSuspendingPopupAnimation(', 'class ItemsControl menu, MenuItem ignore, bool suspend)', 'static void'),
  \ dotnet#method('KeyboardLeaveMenuMode(', ')', 'void'),
  \ dotnet#method('get_CurrentSelection(', ')', '.method'),
  \ dotnet#method('set_CurrentSelection(', 'class MenuItem value)', 'void'),
  \ dotnet#method('get_HasCapture(', ')', 'bool'),
  \ dotnet#method('get_IgnoreNextLeftRelease(', ')', 'bool'),
  \ dotnet#method('set_IgnoreNextLeftRelease(', 'bool value)', 'void'),
  \ dotnet#method('get_IgnoreNextRightRelease(', ')', 'bool'),
  \ dotnet#method('set_IgnoreNextRightRelease(', 'bool value)', 'void'),
  \ dotnet#method('get_IsMenuMode(', ')', 'bool'),
  \ dotnet#method('set_IsMenuMode(', 'bool value)', 'void'),
  \ dotnet#method('get_OpenOnMouseEnter(', ')', 'bool'),
  \ dotnet#method('set_OpenOnMouseEnter(', 'bool value)', 'void'),
  \ dotnet#method('MenuBase(', ')', 'static void .'),
  \ dotnet#event('InternalMenuModeChanged', 'EventHandler'),
  \ dotnet#prop('CurrentSelection', 'MenuItem'),
  \ dotnet#prop('HasCapture', 'bool'),
  \ dotnet#prop('IgnoreNextLeftRelease', 'bool'),
  \ dotnet#prop('IgnoreNextRightRelease', 'bool'),
  \ dotnet#prop('IsMenuMode', 'bool'),
  \ dotnet#prop('OpenOnMouseEnter', 'bool'),
  \ ])

call dotnet#class('DocumentViewerBase', 'Control', [ 
  \ dotnet#method('DocumentViewerBase(', ')', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('PreviousPage(', ')', 'void'),
  \ dotnet#method('NextPage(', ')', 'void'),
  \ dotnet#method('FirstPage(', ')', 'void'),
  \ dotnet#method('LastPage(', ')', 'void'),
  \ dotnet#method('GoToPage(', 'int32 pageNumber)', 'void'),
  \ dotnet#method('Print(', ')', 'void'),
  \ dotnet#method('CancelPrint(', ')', 'void'),
  \ dotnet#method('CanGoToPage(', 'int32 pageNumber)', 'bool'),
  \ dotnet#method('get_Document(', ')', 'IDocumentPaginatorSource'),
  \ dotnet#method('set_Document(', 'class IDocumentPaginatorSource value)', 'void'),
  \ dotnet#method('get_PageCount(', ')', 'int32'),
  \ dotnet#method('get_MasterPageNumber(', ')', 'int32'),
  \ dotnet#method('get_CanGoToPreviousPage(', ')', 'bool'),
  \ dotnet#method('get_CanGoToNextPage(', ')', 'bool'),
  \ dotnet#method('get_PageViews(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('GetIsMasterPage(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetIsMasterPage(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('add_PageViewsChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PageViewsChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('InvalidatePageViews(', ')', 'void'),
  \ dotnet#method('GetMasterPageView(', ')', 'DocumentPageView'),
  \ dotnet#method('GetPageViewsCollection(', '[out] bool& changed)', 'family'),
  \ dotnet#method('OnPageViewsChanged(', ')', 'void'),
  \ dotnet#method('OnMasterPageNumberChanged(', ')', 'void'),
  \ dotnet#method('OnBringIntoView(', 'class DependencyObject element, Rect rect, int32 pageNumber)', 'void'),
  \ dotnet#method('OnPreviousPageCommand(', ')', 'void'),
  \ dotnet#method('OnNextPageCommand(', ')', 'void'),
  \ dotnet#method('OnFirstPageCommand(', ')', 'void'),
  \ dotnet#method('OnLastPageCommand(', ')', 'void'),
  \ dotnet#method('OnGoToPageCommand(', 'int32 pageNumber)', 'void'),
  \ dotnet#method('OnPrintCommand(', ')', 'void'),
  \ dotnet#method('OnCancelPrintCommand(', ')', 'void'),
  \ dotnet#method('OnDocumentChanged(', ')', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('IsMasterPageView(', 'class DocumentPageView pageView)', 'bool'),
  \ dotnet#method('Find(', 'class FindToolBar findToolBar)', 'ITextRange'),
  \ dotnet#method('get_IsSelectionEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsSelectionEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_TextEditor(', ')', '.method'),
  \ dotnet#method('get_TextEditorRenderScope(', ')', '.method'),
  \ dotnet#method('set_TextEditorRenderScope(', 'class FrameworkElement value)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object '),
  \ dotnet#method('DocumentViewerBase(', ')', 'static void .'),
  \ dotnet#event('PageViewsChanged', 'EventHandler'),
  \ dotnet#prop('Document', 'IDocumentPaginatorSource'),
  \ dotnet#prop('PageCount', 'int32'),
  \ dotnet#prop('MasterPageNumber', 'int32'),
  \ dotnet#prop('CanGoToPreviousPage', 'bool'),
  \ dotnet#prop('CanGoToNextPage', 'bool'),
  \ dotnet#prop('PageViews', 'ReadOnlyCollection'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('IsSelectionEnabled', 'bool'),
  \ dotnet#prop('TextEditor', 'TextEditor'),
  \ dotnet#prop('TextEditorRenderScope', 'FrameworkElement'),
  \ ])

call dotnet#class('ButtonBase', 'ContentControl', [ 
  \ dotnet#method('ButtonBase(', ')', 'void'),
  \ dotnet#method('OnClick(', ')', 'void'),
  \ dotnet#method('OnIsPressedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('AutomationButtonBaseClick(', ')', 'void'),
  \ dotnet#method('OnRenderSizeChanged(', 'class SizeChangedInfo sizeInfo)', 'famorassem void'),
  \ dotnet#method('add_Click(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Click(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('get_IsPressed(', ')', 'bool'),
  \ dotnet#method('set_IsPressed(', 'bool value)', 'void'),
  \ dotnet#method('get_Command(', ')', ''),
  \ dotnet#method('set_Command(', 'class ICommand value)', 'void'),
  \ dotnet#method('get_IsEnabledCore(', ')', 'bool'),
  \ dotnet#method('get_CommandParameter(', ')', 'object'),
  \ dotnet#method('set_CommandParameter(', 'object value)', 'void'),
  \ dotnet#method('get_CommandTarget(', ')', ''),
  \ dotnet#method('set_CommandTarget(', 'class IInputElement value)', 'void'),
  \ dotnet#method('get_ClickMode(', ')', 'ClickMode'),
  \ dotnet#method('set_ClickMode(', 'ClickMode value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnLostMouseCapture(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseEnter(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeave(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnKeyUp(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('OnAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('ButtonBase(', ')', 'static void .'),
  \ dotnet#event('Click', 'RoutedEventHandler'),
  \ dotnet#prop('IsPressed', 'bool'),
  \ dotnet#prop('Command', 'ICommand'),
  \ dotnet#prop('IsEnabledCore', 'bool'),
  \ dotnet#prop('CommandParameter', 'object'),
  \ dotnet#prop('CommandTarget', 'IInputElement'),
  \ dotnet#prop('ClickMode', 'ClickMode'),
  \ ])

call dotnet#class('ToggleButton', 'ButtonBase', [ 
  \ dotnet#method('ToggleButton(', ')', 'void'),
  \ dotnet#method('add_Checked(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Checked(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_Unchecked(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Unchecked(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_Indeterminate(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Indeterminate(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('get_IsChecked(', ')', 'Nullable'),
  \ dotnet#method('set_IsChecked(', 'Nullable value)', 'void'),
  \ dotnet#method('OnChecked(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnUnchecked(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnIndeterminate(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_IsThreeState(', ')', 'bool'),
  \ dotnet#method('set_IsThreeState(', 'bool value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnClick(', ')', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('OnToggle(', ')', 'famorassem void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ToggleButton(', ')', 'static void .'),
  \ dotnet#event('Checked', 'RoutedEventHandler'),
  \ dotnet#event('Unchecked', 'RoutedEventHandler'),
  \ dotnet#event('Indeterminate', 'RoutedEventHandler'),
  \ dotnet#prop('IsChecked', 'Nullable'),
  \ dotnet#prop('IsThreeState', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('SelSelector', 'ItemsControl', [ 
  \ dotnet#method('Selector(', 'class SelSelector s)', 'void'),
  \ dotnet#method('get_IsActive(', ')', 'bool'),
  \ dotnet#method('Begin(', ')', 'void'),
  \ dotnet#method('End(', ')', 'void'),
  \ dotnet#method('Select(', 'object o, bool assumeInItemsCollection)', 'bool'),
  \ dotnet#method('Unselect(', 'object o)', 'bool'),
  \ dotnet#method('Validate(', ')', 'void'),
  \ dotnet#method('Cancel(', ')', 'void'),
  \ dotnet#method('CleanupDeferSelection(', ')', 'void'),
  \ dotnet#method('Cleanup(', ')', 'void'),
  \ dotnet#method('SelectJustThisItem(', 'object item, bool assumeInItemsCollection)', 'void'),
  \ dotnet#prop('IsActive', 'bool'),
  \ dotnet#method('Selector(', 'int32 capacity)', 'void'),
  \ dotnet#method('Selector(', 'class SelSelector/InternalSelectedItemsStorage collection)', 'void'),
  \ dotnet#method('Add(', 'object t)', 'void'),
  \ dotnet#method('Remove(', 'object t)', 'bool'),
  \ dotnet#method('Contains(', 'object t)', 'bool'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_UsesItemHashCodes(', ')', 'bool'),
  \ dotnet#method('set_UsesItemHashCodes(', 'bool value)', 'void'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('UsesItemHashCodes', 'bool'),
  \ dotnet#field('_selectedItems', 'SelSelector/InternalSelectedItemsStorage'),
  \ dotnet#method('Selector(', ')', 'void'),
  \ dotnet#method('add_SelectionChanged(', 'class SelectionChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_SelectionChanged(', 'class SelectionChangedEventHandler value)', 'void'),
  \ dotnet#method('AddSelectedHandler(', 'class DependencyObject element, RoutedEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveSelectedHandler(', 'class DependencyObject element, RoutedEventHandler handler)', 'static void'),
  \ dotnet#method('AddUnselectedHandler(', 'class DependencyObject element, RoutedEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveUnselectedHandler(', 'class DependencyObject element, RoutedEventHandler handler)', 'static void'),
  \ dotnet#method('GetIsSelectionActive(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('GetIsSelected(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetIsSelected(', 'class DependencyObject element, bool isSelected)', 'static void'),
  \ dotnet#method('get_IsSynchronizedWithCurrentItem(', ')', 'Nullable'),
  \ dotnet#method('set_IsSynchronizedWithCurrentItem(', 'Nullable value)', 'void'),
  \ dotnet#method('get_SelectedIndex(', ')', 'int32'),
  \ dotnet#method('set_SelectedIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_SelectedItem(', ')', 'object'),
  \ dotnet#method('set_SelectedItem(', 'object value)', 'void'),
  \ dotnet#method('get_SelectedValue(', ')', 'object'),
  \ dotnet#method('set_SelectedValue(', 'object value)', 'void'),
  \ dotnet#method('get_SelectedValuePath(', ')', 'string'),
  \ dotnet#method('set_SelectedValuePath(', 'string value)', 'void'),
  \ dotnet#method('get_SelectedItemsImpl(', ')', '.method'),
  \ dotnet#method('SetSelectedItemsImpl(', 'class IEnumerable selectedItems)', 'bool'),
  \ dotnet#method('get_CanSelectMultiple(', ')', 'bool'),
  \ dotnet#method('set_CanSelectMultiple(', 'bool value)', 'void'),
  \ dotnet#method('ClearContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('RaiseIsSelectedChangedAutomationEvent(', 'class DependencyObject container, bool isSelected)', 'void'),
  \ dotnet#method('SetInitialMousePosition(', ')', 'void'),
  \ dotnet#method('DidMouseMove(', ')', 'bool'),
  \ dotnet#method('ResetLastMousePosition(', ')', 'void'),
  \ dotnet#method('SelectAllImpl(', ')', 'strict void'),
  \ dotnet#method('UnselectAllImpl(', ')', 'strict void'),
  \ dotnet#method('OnItemsChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('OnSelectionChanged(', 'class SelectionChangedEventArgs e)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('OnItemsSourceChanged(', 'class IEnumerable oldValue, IEnumerable newValue)', 'void'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('OnInitialized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('UpdatePublicSelectionProperties(', ')', 'void'),
  \ dotnet#method('ItemGetIsSelectable(', 'object item)', 'static bool'),
  \ dotnet#method('UiGetIsSelectable(', 'class DependencyObject o)', 'static bool'),
  \ dotnet#method('NotifyIsSelectedChanged(', 'class FrameworkElement container, bool selected, RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_SelectionChange(', ')', '.method'),
  \ dotnet#method('get_InternalSelectedItem(', ')', 'object'),
  \ dotnet#method('get_InternalSelectedIndex(', ')', 'int32'),
  \ dotnet#method('Selector(', ')', 'static void .'),
  \ dotnet#event('SelectionChanged', 'SelectionChangedEventHandler'),
  \ dotnet#prop('IsSynchronizedWithCurrentItem', 'Nullable'),
  \ dotnet#prop('SelectedIndex', 'int32'),
  \ dotnet#prop('SelectedItem', 'object'),
  \ dotnet#prop('SelectedValue', 'object'),
  \ dotnet#prop('SelectedValuePath', 'string'),
  \ dotnet#prop('SelectedItemsImpl', 'IList'),
  \ dotnet#prop('CanSelectMultiple', 'bool'),
  \ dotnet#prop('SelectionChange', 'SelSelector/SelectionChanger'),
  \ dotnet#prop('InternalSelectedItem', 'object'),
  \ dotnet#prop('InternalSelectedIndex', 'int32'),
  \ ])

call dotnet#class('MultiSelMultiSelector', 'SelMultiSelector', [ 
  \ dotnet#method('get_CanSelectMultipleItems(', ')', 'bool'),
  \ dotnet#method('set_CanSelectMultipleItems(', 'bool value)', 'void'),
  \ dotnet#method('get_SelectedItems(', ')', 'IList'),
  \ dotnet#method('BeginUpdateSelectedItems(', ')', 'void'),
  \ dotnet#method('EndUpdateSelectedItems(', ')', 'void'),
  \ dotnet#method('get_IsUpdatingSelectedItems(', ')', 'bool'),
  \ dotnet#method('SelectAll(', ')', 'void'),
  \ dotnet#method('UnselectAll(', ')', 'void'),
  \ dotnet#method('MultiSelector(', ')', 'void'),
  \ dotnet#prop('CanSelectMultipleItems', 'bool'),
  \ dotnet#prop('SelectedItems', 'IList'),
  \ dotnet#prop('IsUpdatingSelectedItems', 'bool'),
  \ ])

call dotnet#class('GridViewRowPresenterBase', 'FrameworkElement', [ 
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Columns(', ')', 'GridViewColumnCollection'),
  \ dotnet#method('set_Columns(', 'class GridViewColumnCollection value)', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('OnColumnCollectionChanged(', 'class GridViewColumnCollectionChangedEventArgs e)', 'strict void'),
  \ dotnet#method('OnColumnPropertyChanged(', 'class GridViewColumn column, string propertyName)', 'abstract strict void'),
  \ dotnet#method('EnsureDesiredWidthList(', ')', 'void'),
  \ dotnet#method('get_DesiredWidthList(', ')', '.method'),
  \ dotnet#method('get_NeedUpdateVisualTree(', ')', 'bool'),
  \ dotnet#method('set_NeedUpdateVisualTree(', 'bool value)', 'void'),
  \ dotnet#method('get_InternalChildren(', ')', '.method'),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs args)', 'bool '),
  \ dotnet#method('GridViewRowPresenterBase(', ')', 'void'),
  \ dotnet#method('set_DesiredWidthList(', 'class List value)', 'void'),
  \ dotnet#method('GridViewRowPresenterBase(', ')', 'static void .'),
  \ dotnet#prop('Columns', 'GridViewColumnCollection'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('DesiredWidthList', 'List'),
  \ dotnet#prop('NeedUpdateVisualTree', 'bool'),
  \ dotnet#prop('InternalChildren', 'UIElementCollection'),
  \ ])

call dotnet#class('Thumb', 'Control', [ 
  \ dotnet#method('Thumb(', ')', 'void'),
  \ dotnet#method('add_DragStarted(', 'class DragStartedEventHandler value)', 'void'),
  \ dotnet#method('remove_DragStarted(', 'class DragStartedEventHandler value)', 'void'),
  \ dotnet#method('add_DragDelta(', 'class DragDeltaEventHandler value)', 'void'),
  \ dotnet#method('remove_DragDelta(', 'class DragDeltaEventHandler value)', 'void'),
  \ dotnet#method('add_DragCompleted(', 'class DragCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_DragCompleted(', 'class DragCompletedEventHandler value)', 'void'),
  \ dotnet#method('get_IsDragging(', ')', 'bool'),
  \ dotnet#method('set_IsDragging(', 'bool value)', 'void'),
  \ dotnet#method('CancelDrag(', ')', 'void'),
  \ dotnet#method('OnDraggingChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Thumb(', ')', 'static void .'),
  \ dotnet#event('DragStarted', 'DragStartedEventHandler'),
  \ dotnet#event('DragDelta', 'DragDeltaEventHandler'),
  \ dotnet#event('DragCompleted', 'DragCompletedEventHandler'),
  \ dotnet#prop('IsDragging', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('BulletDecorator', 'Decorator', [ 
  \ dotnet#method('BulletDecorator(', ')', 'void'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Bullet(', ')', 'UIElement'),
  \ dotnet#method('set_Bullet(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('OnRender(', 'class DrawingContext dc)', 'void'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('BulletDecorator(', ')', 'static void .'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('Bullet', 'UIElement'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ ])

call dotnet#class('CalendarButton', 'Button', [ 
  \ dotnet#method('CalendarButton(', ')', 'void'),
  \ dotnet#method('get_HasSelectedDays(', ')', 'bool'),
  \ dotnet#method('set_HasSelectedDays(', 'bool value)', 'void'),
  \ dotnet#method('get_IsInactive(', ')', 'bool'),
  \ dotnet#method('set_IsInactive(', 'bool value)', 'void'),
  \ dotnet#method('get_Owner(', ')', '.method'),
  \ dotnet#method('set_Owner(', 'class Calendar value)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('SetContentInternal(', 'string value)', 'void'),
  \ dotnet#method('CalendarButton(', ')', 'static void .'),
  \ dotnet#prop('HasSelectedDays', 'bool'),
  \ dotnet#prop('IsInactive', 'bool'),
  \ dotnet#prop('Owner', 'Calendar'),
  \ ])

call dotnet#class('CalendarDayButton', 'Button', [ 
  \ dotnet#method('CalendarDayButton(', ')', 'void'),
  \ dotnet#method('get_IsToday(', ')', 'bool'),
  \ dotnet#method('get_IsSelected(', ')', 'bool'),
  \ dotnet#method('get_IsInactive(', ')', 'bool'),
  \ dotnet#method('get_IsBlackedOut(', ')', 'bool'),
  \ dotnet#method('get_IsHighlighted(', ')', 'bool'),
  \ dotnet#method('get_Owner(', ')', '.method'),
  \ dotnet#method('set_Owner(', 'class Calendar value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('NotifyNeedsVisualStateUpdate(', ')', 'void'),
  \ dotnet#method('SetContentInternal(', 'string value)', 'void'),
  \ dotnet#method('CalendarDayButton(', ')', 'static void .'),
  \ dotnet#prop('IsToday', 'bool'),
  \ dotnet#prop('IsSelected', 'bool'),
  \ dotnet#prop('IsInactive', 'bool'),
  \ dotnet#prop('IsBlackedOut', 'bool'),
  \ dotnet#prop('IsHighlighted', 'bool'),
  \ dotnet#prop('Owner', 'Calendar'),
  \ ])

call dotnet#class('CalendarItem', 'Control', [ 
  \ dotnet#method('CalendarItem(', ')', 'void'),
  \ dotnet#method('get_MonthView(', ')', '.method'),
  \ dotnet#method('get_Owner(', ')', '.method'),
  \ dotnet#method('set_Owner(', 'class Calendar value)', 'void'),
  \ dotnet#method('get_YearView(', ')', '.method'),
  \ dotnet#method('get_HeaderButton(', ')', '.method'),
  \ dotnet#method('get_NextButton(', ')', '.method'),
  \ dotnet#method('get_PreviousButton(', ')', '.method'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnMouseUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnLostMouseCapture(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('UpdateDecadeMode(', ')', 'void'),
  \ dotnet#method('UpdateMonthMode(', ')', 'void'),
  \ dotnet#method('UpdateYearMode(', ')', 'void'),
  \ dotnet#method('GetCalendarDayButtons(', ')', 'IEnumerable'),
  \ dotnet#method('GetFocusedCalendarDayButton(', ')', 'CalendarDayButton'),
  \ dotnet#method('GetCalendarDayButton(', 'DateTime date)', 'CalendarDayButton'),
  \ dotnet#method('GetCalendarButton(', 'DateTime date, CalendarMode mode)', 'CalendarButton'),
  \ dotnet#method('GetFocusedCalendarButton(', ')', 'CalendarButton'),
  \ dotnet#method('FocusDate(', 'DateTime date)', 'void'),
  \ dotnet#method('get_DayTitleTemplateResourceKey(', ')', 'static'),
  \ dotnet#method('CalendarItem(', ')', 'static void .'),
  \ dotnet#prop('MonthView', 'Grid'),
  \ dotnet#prop('Owner', 'Calendar'),
  \ dotnet#prop('YearView', 'Grid'),
  \ dotnet#prop('HeaderButton', 'Button'),
  \ dotnet#prop('NextButton', 'Button'),
  \ dotnet#prop('PreviousButton', 'Button'),
  \ dotnet#prop('DayTitleTemplateResourceKey', 'ComponentResourceKey'),
  \ ])

call dotnet#class('CustomPopupPlacement', 'ValueType', [ 
  \ dotnet#field('_point', 'Point'),
  \ dotnet#field('_primaryAxis', 'PopupPrimaryAxis'),
  \ dotnet#method('CustomPopupPlacement(', 'Point point, PopupPrimaryAxis primaryAxis)', 'void'),
  \ dotnet#method('get_Point(', ')', 'Point'),
  \ dotnet#method('set_Point(', 'Point value)', 'void'),
  \ dotnet#method('get_PrimaryAxis(', ')', 'PopupPrimaryAxis'),
  \ dotnet#method('set_PrimaryAxis(', 'PopupPrimaryAxis value)', 'void'),
  \ dotnet#method('op_Equality(', 'CustomPopupPlacement placement1, CustomPopupPlacement placement2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'CustomPopupPlacement placement1, CustomPopupPlacement placement2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Point', 'Point'),
  \ dotnet#prop('PrimaryAxis', 'PopupPrimaryAxis'),
  \ ])

call dotnet#class('CustomPopupPlacementCallback', 'MulticastDelegate', [ 
  \ dotnet#method('CustomPopupPlacementCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'Size popupSize, Size targetSize, Point offset)', ''),
  \ dotnet#method('BeginInvoke(', 'Size popupSize, Size targetSize, Point offset, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('DataGridCellsPresenter', 'ItemsControl', [ 
  \ dotnet#method('DataGridCellsPresenter(', ')', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('SyncProperties(', 'bool forcePrepareCells)', 'void'),
  \ dotnet#method('get_Item(', ')', 'object'),
  \ dotnet#method('set_Item(', 'object value)', 'void'),
  \ dotnet#method('OnItemChanged(', 'object oldItem, object newItem)', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('IsItemItsOwnContainerInternal(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('ClearContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('OnColumnsChanged(', 'class ObservableCollection columns, NotifyCollectionChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, string propertyName, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('OnRender(', 'class DrawingContext drawingContext)', 'void'),
  \ dotnet#method('InvalidateDataGridCellsPanelMeasureAndArrange(', ')', 'void'),
  \ dotnet#method('get_InternalItemsHost(', ')', '.method'),
  \ dotnet#method('set_InternalItemsHost(', 'class Panel value)', 'void'),
  \ dotnet#method('ScrollCellIntoView(', 'int32 index)', 'void'),
  \ dotnet#method('get_DataGridRowOwner(', ')', '.method'),
  \ dotnet#method('get_CellTrackingRoot(', ')', '.method'),
  \ dotnet#method('DataGridCellsPresenter(', ')', 'static void .'),
  \ dotnet#prop('Item', 'object'),
  \ dotnet#prop('InternalItemsHost', 'Panel'),
  \ dotnet#prop('DataGridRowOwner', 'DataGridRow'),
  \ dotnet#prop('CellTrackingRoot', 'ContainerTracking'),
  \ ])

call dotnet#class('DataGridColumnHeader', 'ButtonBase', [ 
  \ dotnet#method('DataGridColumnHeader(', ')', 'void'),
  \ dotnet#method('get_Column(', ')', 'DataGridColumn'),
  \ dotnet#method('get_SeparatorBrush(', ')', 'Brush'),
  \ dotnet#method('set_SeparatorBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_SeparatorVisibility(', ')', 'Visibility'),
  \ dotnet#method('set_SeparatorVisibility(', 'Visibility value)', 'void'),
  \ dotnet#method('PrepareColumnHeader(', 'object item, DataGridColumn column)', 'void'),
  \ dotnet#method('ClearHeader(', ')', 'void'),
  \ dotnet#method('get_Tracker(', ')', '.method'),
  \ dotnet#method('get_DisplayIndex(', ')', 'int32'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('get_CanUserSort(', ')', 'bool'),
  \ dotnet#method('get_SortDirection(', ')', 'Nullable'),
  \ dotnet#method('OnClick(', ')', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('Invoke(', ')', 'void'),
  \ dotnet#method('get_IsFrozen(', ')', 'bool'),
  \ dotnet#method('get_ParentPresenter(', ')', '.method'),
  \ dotnet#method('get_SuppressClickEvent(', ')', 'bool'),
  \ dotnet#method('set_SuppressClickEvent(', 'bool value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnLostMouseCapture(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('get_ColumnHeaderDropSeparatorStyleKey(', ')', 'static'),
  \ dotnet#method('get_ColumnFloatingHeaderStyleKey(', ')', 'static'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('get_Column(', ')', ''),
  \ dotnet#method('DataGridColumnHeader(', ')', 'static void .'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ dotnet#prop('SeparatorBrush', 'Brush'),
  \ dotnet#prop('SeparatorVisibility', 'Visibility'),
  \ dotnet#prop('Tracker', 'ContainerTracking'),
  \ dotnet#prop('DisplayIndex', 'int32'),
  \ dotnet#prop('CanUserSort', 'bool'),
  \ dotnet#prop('SortDirection', 'Nullable'),
  \ dotnet#prop('IsFrozen', 'bool'),
  \ dotnet#prop('ParentPresenter', 'DataGridColumnHeadersPresenter'),
  \ dotnet#prop('SuppressClickEvent', 'bool'),
  \ dotnet#prop('ColumnHeaderDropSeparatorStyleKey', 'ComponentResourceKey'),
  \ dotnet#prop('ColumnFloatingHeaderStyleKey', 'ComponentResourceKey'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ ])

call dotnet#class('DataGridColumnHeadersPresenter', 'ItemsControl', [ 
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('GetLayoutClip(', 'Size layoutSlotSize)', 'Geometry'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('IsItemItsOwnContainerInternal(', 'object item)', 'bool'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('ClearContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, string propertyName, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('get_InternalItemsHost(', ')', '.method'),
  \ dotnet#method('set_InternalItemsHost(', 'class Panel value)', 'void'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('OnHeaderMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnHeaderMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnHeaderMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnHeaderLostMouseCapture(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('get_ParentDataGrid(', ')', '.method'),
  \ dotnet#method('get_HeaderTrackingRoot(', ')', '.method'),
  \ dotnet#method('DataGridColumnHeadersPresenter(', ')', 'void'),
  \ dotnet#method('DataGridColumnHeadersPresenter(', ')', 'static void .'),
  \ dotnet#prop('InternalItemsHost', 'Panel'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('ParentDataGrid', 'DataGrid'),
  \ dotnet#prop('HeaderTrackingRoot', 'ContainerTracking'),
  \ ])

call dotnet#class('DataGridDetailsPresenter', 'ContentPresenter', [ 
  \ dotnet#method('DataGridDetailsPresenter(', ')', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('get_DetailsElement(', ')', '.method'),
  \ dotnet#method('SyncProperties(', ')', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('OnRender(', 'class DrawingContext drawingContext)', 'void'),
  \ dotnet#method('get_DataGridRowOwner(', ')', '.method'),
  \ dotnet#method('DataGridDetailsPresenter(', ')', 'static void .'),
  \ dotnet#prop('DetailsElement', 'FrameworkElement'),
  \ dotnet#prop('DataGridRowOwner', 'DataGridRow'),
  \ ])

call dotnet#class('DataGridRowHeader', 'ButtonBase', [ 
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_SeparatorBrush(', ')', 'Brush'),
  \ dotnet#method('set_SeparatorBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_SeparatorVisibility(', ')', 'Visibility'),
  \ dotnet#method('set_SeparatorVisibility(', 'Visibility value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('SyncProperties(', ')', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('get_IsRowSelected(', ')', 'bool'),
  \ dotnet#method('OnClick(', ')', 'void'),
  \ dotnet#method('get_ParentRow(', ')', '.method'),
  \ dotnet#method('DataGridRowHeader(', ')', 'void'),
  \ dotnet#method('DataGridRowHeader(', ')', 'static void .'),
  \ dotnet#prop('SeparatorBrush', 'Brush'),
  \ dotnet#prop('SeparatorVisibility', 'Visibility'),
  \ dotnet#prop('IsRowSelected', 'bool'),
  \ dotnet#prop('ParentRow', 'DataGridRow'),
  \ ])

call dotnet#class('DataGridRowsPresenter', 'VirtualizingStackPanel', [ 
  \ dotnet#method('InternalBringIndexIntoView(', 'int32 index)', 'void'),
  \ dotnet#method('OnIsItemsHostChanged(', 'bool oldIsItemsHost, bool newIsItemsHost)', 'void'),
  \ dotnet#method('OnViewportSizeChanged(', 'Size oldViewportSize, Size newViewportSize)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('get_AvailableSize(', ')', '.method'),
  \ dotnet#method('OnCleanUpVirtualizedItem(', 'class CleanUpVirtualizedItemEventArgs e)', 'void'),
  \ dotnet#method('get_Owner(', ')', '.method'),
  \ dotnet#method('DataGridRowsPresenter(', ')', 'void'),
  \ dotnet#prop('AvailableSize', 'Size'),
  \ dotnet#prop('Owner', 'DataGrid'),
  \ ])

call dotnet#class('TextBoxBase', 'Control', [ 
  \ dotnet#method('TextBoxBase(', ')', 'void'),
  \ dotnet#method('AppendText(', 'string textData)', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('Copy(', ')', 'void'),
  \ dotnet#method('Cut(', ')', 'void'),
  \ dotnet#method('Paste(', ')', 'void'),
  \ dotnet#method('SelectAll(', ')', 'void'),
  \ dotnet#method('LineLeft(', ')', 'void'),
  \ dotnet#method('LineRight(', ')', 'void'),
  \ dotnet#method('PageLeft(', ')', 'void'),
  \ dotnet#method('PageRight(', ')', 'void'),
  \ dotnet#method('LineUp(', ')', 'void'),
  \ dotnet#method('LineDown(', ')', 'void'),
  \ dotnet#method('PageUp(', ')', 'void'),
  \ dotnet#method('PageDown(', ')', 'void'),
  \ dotnet#method('ScrollToHome(', ')', 'void'),
  \ dotnet#method('ScrollToEnd(', ')', 'void'),
  \ dotnet#method('ScrollToHorizontalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('ScrollToVerticalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('Undo(', ')', 'bool'),
  \ dotnet#method('Redo(', ')', 'bool'),
  \ dotnet#method('LockCurrentUndoUnit(', ')', 'void'),
  \ dotnet#method('BeginChange(', ')', 'void'),
  \ dotnet#method('EndChange(', ')', 'void'),
  \ dotnet#method('DeclareChangeBlock(', ')', 'IDisposable'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('set_IsReadOnly(', 'bool value)', 'void'),
  \ dotnet#method('get_IsReadOnlyCaretVisible(', ')', 'bool'),
  \ dotnet#method('set_IsReadOnlyCaretVisible(', 'bool value)', 'void'),
  \ dotnet#method('get_AcceptsReturn(', ')', 'bool'),
  \ dotnet#method('set_AcceptsReturn(', 'bool value)', 'void'),
  \ dotnet#method('get_AcceptsTab(', ')', 'bool'),
  \ dotnet#method('set_AcceptsTab(', 'bool value)', 'void'),
  \ dotnet#method('get_SpellCheck(', ')', 'SpellCheck'),
  \ dotnet#method('get_HorizontalScrollBarVisibility(', ')', 'ScrollBarVisibility'),
  \ dotnet#method('set_HorizontalScrollBarVisibility(', 'ScrollBarVisibility value)', 'void'),
  \ dotnet#method('get_VerticalScrollBarVisibility(', ')', 'ScrollBarVisibility'),
  \ dotnet#method('set_VerticalScrollBarVisibility(', 'ScrollBarVisibility value)', 'void'),
  \ dotnet#method('get_ExtentWidth(', ')', 'float64'),
  \ dotnet#method('get_ExtentHeight(', ')', 'float64'),
  \ dotnet#method('get_ViewportWidth(', ')', 'float64'),
  \ dotnet#method('get_ViewportHeight(', ')', 'float64'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('get_CanUndo(', ')', 'bool'),
  \ dotnet#method('get_CanRedo(', ')', 'bool'),
  \ dotnet#method('get_IsUndoEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsUndoEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_UndoLimit(', ')', 'int32'),
  \ dotnet#method('set_UndoLimit(', 'int32 value)', 'void'),
  \ dotnet#method('get_AutoWordSelection(', ')', 'bool'),
  \ dotnet#method('set_AutoWordSelection(', 'bool value)', 'void'),
  \ dotnet#method('get_SelectionBrush(', ')', 'Brush'),
  \ dotnet#method('set_SelectionBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_SelectionOpacity(', ')', 'float64'),
  \ dotnet#method('set_SelectionOpacity(', 'float64 value)', 'void'),
  \ dotnet#method('get_CaretBrush(', ')', 'Brush'),
  \ dotnet#method('set_CaretBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('add_TextChanged(', 'class TextChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_TextChanged(', 'class TextChangedEventHandler value)', 'void'),
  \ dotnet#method('add_SelectionChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_SelectionChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnTextChanged(', 'class TextChangedEventArgs e)', 'void'),
  \ dotnet#method('OnSelectionChanged(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnTemplateChanged(', 'class ControlTemplate oldTemplate, ControlTemplate newTemplate)', 'void'),
  \ dotnet#method('OnMouseWheel(', 'class MouseWheelEventArgs e)', 'void'),
  \ dotnet#method('OnPreviewKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnKeyUp(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnTextInput(', 'class TextCompositionEventArgs e)', 'void'),
  \ dotnet#method('OnMouseDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnQueryCursor(', 'class QueryCursorEventArgs e)', 'void'),
  \ dotnet#method('OnQueryContinueDrag(', 'class QueryContinueDragEventArgs e)', 'void'),
  \ dotnet#method('OnGiveFeedback(', 'class GiveFeedbackEventArgs e)', 'void'),
  \ dotnet#method('OnDragEnter(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('OnDragOver(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('OnDragLeave(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('OnDrop(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('OnContextMenuOpening(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('OnGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('OnLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('OnLostFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('CreateRenderScope(', ')', 'abstract strict'),
  \ dotnet#method('OnTextContainerChanged(', 'object sender, TextContainerChangedEventArgs e)', 'strict void'),
  \ dotnet#method('InitializeTextContainer(', 'class TextContainer textContainer)', 'void'),
  \ dotnet#method('GetTextPositionFromPointInternal(', 'Point point, bool snapToText)', 'TextPointer'),
  \ dotnet#method('GetRectangleFromTextPosition(', 'class TextPointer position, [out] Rect& rect)', 'bool'),
  \ dotnet#method('AttachToVisualTree(', ')', 'strict void'),
  \ dotnet#method('DoLineUp(', ')', 'strict void'),
  \ dotnet#method('DoLineDown(', ')', 'strict void'),
  \ dotnet#method('AddToEventRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict void'),
  \ dotnet#method('ChangeUndoEnabled(', 'bool value)', 'void'),
  \ dotnet#method('ChangeUndoLimit(', 'object value)', 'void'),
  \ dotnet#method('get_ScrollViewer(', ')', '.method'),
  \ dotnet#method('get_TextSelectionInternal(', ')', '.method'),
  \ dotnet#method('get_TextContainer(', ')', '.method'),
  \ dotnet#method('get_RenderScope(', ')', '.method'),
  \ dotnet#method('get_PendingUndoAction(', ')', '.method'),
  \ dotnet#method('set_PendingUndoAction(', 'UndoAction value)', 'void'),
  \ dotnet#method('get_TextEditor(', ')', '.method'),
  \ dotnet#method('get_IsContentHostAvailable(', ')', 'bool'),
  \ dotnet#method('OnScrollChanged(', 'object sender, ScrollChangedEventArgs e)', 'strict void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('OnScrollViewerPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('TextBoxBase(', ')', 'static void .'),
  \ dotnet#event('TextChanged', 'TextChangedEventHandler'),
  \ dotnet#event('SelectionChanged', 'RoutedEventHandler'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnlyCaretVisible', 'bool'),
  \ dotnet#prop('AcceptsReturn', 'bool'),
  \ dotnet#prop('AcceptsTab', 'bool'),
  \ dotnet#prop('SpellCheck', 'SpellCheck'),
  \ dotnet#prop('HorizontalScrollBarVisibility', 'ScrollBarVisibility'),
  \ dotnet#prop('VerticalScrollBarVisibility', 'ScrollBarVisibility'),
  \ dotnet#prop('ExtentWidth', 'float64'),
  \ dotnet#prop('ExtentHeight', 'float64'),
  \ dotnet#prop('ViewportWidth', 'float64'),
  \ dotnet#prop('ViewportHeight', 'float64'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('CanUndo', 'bool'),
  \ dotnet#prop('CanRedo', 'bool'),
  \ dotnet#prop('IsUndoEnabled', 'bool'),
  \ dotnet#prop('UndoLimit', 'int32'),
  \ dotnet#prop('AutoWordSelection', 'bool'),
  \ dotnet#prop('SelectionBrush', 'Brush'),
  \ dotnet#prop('SelectionOpacity', 'float64'),
  \ dotnet#prop('CaretBrush', 'Brush'),
  \ dotnet#prop('ScrollViewer', 'ScrollViewer'),
  \ dotnet#prop('TextSelectionInternal', 'TextSelection'),
  \ dotnet#prop('TextContainer', 'TextContainer'),
  \ dotnet#prop('RenderScope', 'FrameworkElement'),
  \ dotnet#prop('PendingUndoAction', 'UndoAction'),
  \ dotnet#prop('TextEditor', 'TextEditor'),
  \ dotnet#prop('IsContentHostAvailable', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('DatePickerTextBox', 'TextBox', [ 
  \ dotnet#method('DatePickerTextBox(', ')', 'void'),
  \ dotnet#method('get_Watermark(', ')', 'object'),
  \ dotnet#method('set_Watermark(', 'object value)', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('OnGotFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('DatePickerTextBox(', ')', 'static void .'),
  \ dotnet#prop('Watermark', 'object'),
  \ ])

call dotnet#class('DocumentPageView', 'FrameworkElement', [ 
  \ dotnet#method('DocumentPageView(', ')', 'void'),
  \ dotnet#method('get_DocumentPaginator(', ')', 'DocumentPaginator'),
  \ dotnet#method('set_DocumentPaginator(', 'class DocumentPaginator value)', 'void'),
  \ dotnet#method('get_DocumentPage(', ')', 'DocumentPage'),
  \ dotnet#method('get_PageNumber(', ')', 'int32'),
  \ dotnet#method('set_PageNumber(', 'int32 value)', 'void'),
  \ dotnet#method('get_Stretch(', ')', 'Stretch'),
  \ dotnet#method('set_Stretch(', 'Stretch value)', 'void'),
  \ dotnet#method('get_StretchDirection(', ')', 'StretchDirection'),
  \ dotnet#method('set_StretchDirection(', 'StretchDirection value)', 'void'),
  \ dotnet#method('add_PageConnected(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PageConnected(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_PageDisconnected(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PageDisconnected(', 'class EventHandler value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'family'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'family'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_IsDisposed(', ')', 'bool'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('SetPageZoom(', 'float64 pageZoom)', 'void'),
  \ dotnet#method('SuspendLayout(', ')', 'void'),
  \ dotnet#method('ResumeLayout(', ')', 'void'),
  \ dotnet#method('DuplicateVisual(', ')', 'void'),
  \ dotnet#method('RemoveDuplicateVisual(', ')', 'void'),
  \ dotnet#method('get_UseAsynchronousGetPage(', ')', 'bool'),
  \ dotnet#method('set_UseAsynchronousGetPage(', 'bool value)', 'void'),
  \ dotnet#method('get_DocumentPageInternal(', ')', '.method'),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object '),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('DocumentPageView(', ')', 'static void .'),
  \ dotnet#event('PageConnected', 'EventHandler'),
  \ dotnet#event('PageDisconnected', 'EventHandler'),
  \ dotnet#prop('DocumentPaginator', 'DocumentPaginator'),
  \ dotnet#prop('DocumentPage', 'DocumentPage'),
  \ dotnet#prop('PageNumber', 'int32'),
  \ dotnet#prop('Stretch', 'Stretch'),
  \ dotnet#prop('StretchDirection', 'StretchDirection'),
  \ dotnet#prop('IsDisposed', 'bool'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('UseAsynchronousGetPage', 'bool'),
  \ dotnet#prop('DocumentPageInternal', 'DocumentPage'),
  \ ])

call dotnet#class('DragCompletedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('DragCompletedEventArgs(', 'float64 horizontalChange, float64 verticalChange, bool canceled)', 'void'),
  \ dotnet#method('get_HorizontalChange(', ')', 'float64'),
  \ dotnet#method('get_VerticalChange(', ')', 'float64'),
  \ dotnet#method('get_Canceled(', ')', 'bool'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('HorizontalChange', 'float64'),
  \ dotnet#prop('VerticalChange', 'float64'),
  \ dotnet#prop('Canceled', 'bool'),
  \ ])

call dotnet#class('DragCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DragCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DragCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DragCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DragDeltaEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('DragDeltaEventArgs(', 'float64 horizontalChange, float64 verticalChange)', 'void'),
  \ dotnet#method('get_HorizontalChange(', ')', 'float64'),
  \ dotnet#method('get_VerticalChange(', ')', 'float64'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('HorizontalChange', 'float64'),
  \ dotnet#prop('VerticalChange', 'float64'),
  \ ])

call dotnet#class('DragDeltaEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DragDeltaEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DragDeltaEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DragDeltaEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DragStartedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('DragStartedEventArgs(', 'float64 horizontalOffset, float64 verticalOffset)', 'void'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ ])

call dotnet#class('DragStartedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DragStartedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DragStartedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DragStartedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('GeneratorPosition', 'ValueType', [ 
  \ dotnet#field('_index', 'int32'),
  \ dotnet#field('_offset', 'int32'),
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void'),
  \ dotnet#method('get_Offset(', ')', 'int32'),
  \ dotnet#method('set_Offset(', 'int32 value)', 'void'),
  \ dotnet#method('GeneratorPosition(', 'int32 index, int32 offset)', 'void'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('op_Equality(', 'GeneratorPosition gp1, GeneratorPosition gp2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'GeneratorPosition gp1, GeneratorPosition gp2)', 'static bool'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('Offset', 'int32'),
  \ ])

call dotnet#class('ItemsChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('ItemsChangedEventArgs(', 'NotifyCollectionChangedAction action, GeneratorPosition position, GeneratorPosition oldPosition, int32 itemCount, int32 itemUICount)', 'void'),
  \ dotnet#method('ItemsChangedEventArgs(', 'NotifyCollectionChangedAction action, GeneratorPosition position, int32 itemCount, int32 itemUICount)', 'void'),
  \ dotnet#method('get_Action(', ')', 'NotifyCollectionChangedAction'),
  \ dotnet#method('get_Position(', ')', 'GeneratorPosition'),
  \ dotnet#method('get_OldPosition(', ')', 'GeneratorPosition'),
  \ dotnet#method('get_ItemCount(', ')', 'int32'),
  \ dotnet#method('get_ItemUICount(', ')', 'int32'),
  \ dotnet#prop('Action', 'NotifyCollectionChangedAction'),
  \ dotnet#prop('Position', 'GeneratorPosition'),
  \ dotnet#prop('OldPosition', 'GeneratorPosition'),
  \ dotnet#prop('ItemCount', 'int32'),
  \ dotnet#prop('ItemUICount', 'int32'),
  \ ])

call dotnet#class('ItemsChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ItemsChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ItemsChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ItemsChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('LayoutInformation', 'Object', [ 
  \ dotnet#method('GetLayoutSlot(', 'class FrameworkElement element)', 'static Rect'),
  \ dotnet#method('GetLayoutClip(', 'class FrameworkElement element)', 'static Geometry'),
  \ dotnet#method('GetLayoutExceptionElement(', 'class Dispatcher dispatcher)', 'static UIElement'),
  \ ])

call dotnet#class('Popup', 'FrameworkElement', [ 
  \ dotnet#method('Popup(', ')', 'void'),
  \ dotnet#method('get_Child(', ')', 'UIElement'),
  \ dotnet#method('set_Child(', 'class UIElement value)', 'void'),
  \ dotnet#method('pushTextRenderingMode(', ')', 'strict void'),
  \ dotnet#method('get_IsOpen(', ')', 'bool'),
  \ dotnet#method('set_IsOpen(', 'bool value)', 'void'),
  \ dotnet#method('OnOpened(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnClosed(', 'class EventArgs e)', 'void'),
  \ dotnet#method('get_Placement(', ')', 'PlacementMode'),
  \ dotnet#method('set_Placement(', 'PlacementMode value)', 'void'),
  \ dotnet#method('get_CustomPopupPlacementCallback(', ')', 'CustomPopupPlacementCallback'),
  \ dotnet#method('set_CustomPopupPlacementCallback(', 'class CustomPopupPlacementCallback value)', 'void'),
  \ dotnet#method('get_StaysOpen(', ')', 'bool'),
  \ dotnet#method('set_StaysOpen(', 'bool value)', 'void'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('set_HorizontalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('set_VerticalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_PlacementTarget(', ')', 'UIElement'),
  \ dotnet#method('set_PlacementTarget(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_PlacementRectangle(', ')', 'Rect'),
  \ dotnet#method('set_PlacementRectangle(', 'Rect value)', 'void'),
  \ dotnet#method('get_DropOpposite(', ')', 'bool'),
  \ dotnet#method('set_DropOpposite(', 'bool value)', 'void'),
  \ dotnet#method('get_PopupAnimation(', ')', 'PopupAnimation'),
  \ dotnet#method('set_PopupAnimation(', 'PopupAnimation value)', 'void'),
  \ dotnet#method('get_AllowsTransparency(', ')', 'bool'),
  \ dotnet#method('set_AllowsTransparency(', 'bool value)', 'void'),
  \ dotnet#method('get_HasDropShadow(', ')', 'bool'),
  \ dotnet#method('CreateRootPopup(', 'class Popup popup, UIElement child)', 'static void'),
  \ dotnet#method('IsRootedInPopup(', 'class Popup parentPopup, UIElement element)', 'static bool'),
  \ dotnet#method('add_Opened(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Opened(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_Closed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Closed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_PopupCouldClose(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PopupCouldClose(', 'class EventHandler value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('OnPreviewMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnPreviewMouseRightButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnPreviewMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnPreviewMouseRightButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('OnThemeChanged(', ')', 'strict void'),
  \ dotnet#method('BlockReverseInheritance(', ')', 'strict bool'),
  \ dotnet#method('GetUIParentCore(', ')', 'famorassem DependencyObject'),
  \ dotnet#method('IgnoreModelParentBuildRoute(', 'class RoutedEventArgs e)', 'strict bool'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('ForceClose(', ')', 'void'),
  \ dotnet#method('Reposition(', ')', 'void'),
  \ dotnet#method('RestrictSize(', 'Size desiredSize)', 'Size'),
  \ dotnet#method('get_HitTestable(', ')', 'bool'),
  \ dotnet#method('set_HitTestable(', 'bool value)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('Popup(', ')', 'static void .'),
  \ dotnet#event('Opened', 'EventHandler'),
  \ dotnet#event('Closed', 'EventHandler'),
  \ dotnet#event('PopupCouldClose', 'EventHandler'),
  \ dotnet#prop('Child', 'UIElement'),
  \ dotnet#prop('IsOpen', 'bool'),
  \ dotnet#prop('Placement', 'PlacementMode'),
  \ dotnet#prop('CustomPopupPlacementCallback', 'CustomPopupPlacementCallback'),
  \ dotnet#prop('StaysOpen', 'bool'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('PlacementTarget', 'UIElement'),
  \ dotnet#prop('PlacementRectangle', 'Rect'),
  \ dotnet#prop('DropOpposite', 'bool'),
  \ dotnet#prop('PopupAnimation', 'PopupAnimation'),
  \ dotnet#prop('AllowsTransparency', 'bool'),
  \ dotnet#prop('HasDropShadow', 'bool'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('HitTestable', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('RangeBase', 'Control', [ 
  \ dotnet#method('RangeBase(', ')', 'void'),
  \ dotnet#method('add_ValueChanged(', 'class RoutedPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_ValueChanged(', 'class RoutedPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_Minimum(', ')', 'float64'),
  \ dotnet#method('set_Minimum(', 'float64 value)', 'void'),
  \ dotnet#method('OnMinimumChanged(', 'float64 oldMinimum, float64 newMinimum)', 'void'),
  \ dotnet#method('get_Maximum(', ')', 'float64'),
  \ dotnet#method('set_Maximum(', 'float64 value)', 'void'),
  \ dotnet#method('OnMaximumChanged(', 'float64 oldMaximum, float64 newMaximum)', 'void'),
  \ dotnet#method('ConstrainToRange(', 'class DependencyObject d, object value)', 'static object'),
  \ dotnet#method('get_Value(', ')', 'float64'),
  \ dotnet#method('set_Value(', 'float64 value)', 'void'),
  \ dotnet#method('OnValueChanged(', 'float64 oldValue, float64 newValue)', 'void'),
  \ dotnet#method('get_LargeChange(', ')', 'float64'),
  \ dotnet#method('set_LargeChange(', 'float64 value)', 'void'),
  \ dotnet#method('get_SmallChange(', ')', 'float64'),
  \ dotnet#method('set_SmallChange(', 'float64 value)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('RangeBase(', ')', 'static void .'),
  \ dotnet#event('ValueChanged', 'RoutedPropertyChangedEventHandler'),
  \ dotnet#prop('Minimum', 'float64'),
  \ dotnet#prop('Maximum', 'float64'),
  \ dotnet#prop('Value', 'float64'),
  \ dotnet#prop('LargeChange', 'float64'),
  \ dotnet#prop('SmallChange', 'float64'),
  \ ])

call dotnet#class('RepeatButton', 'ButtonBase', [ 
  \ dotnet#method('RepeatButton(', ')', 'void'),
  \ dotnet#method('get_Delay(', ')', 'int32'),
  \ dotnet#method('set_Delay(', 'int32 value)', 'void'),
  \ dotnet#method('get_Interval(', ')', 'int32'),
  \ dotnet#method('set_Interval(', 'int32 value)', 'void'),
  \ dotnet#method('GetKeyboardDelay(', ')', 'static int32'),
  \ dotnet#method('GetKeyboardSpeed(', ')', 'static int32'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnClick(', ')', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnLostMouseCapture(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseEnter(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeave(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnKeyUp(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('RepeatButton(', ')', 'static void .'),
  \ dotnet#prop('Delay', 'int32'),
  \ dotnet#prop('Interval', 'int32'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ResizeGrip', 'Control', [ 
  \ dotnet#method('ResizeGrip(', ')', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('ResizeGrip(', ')', 'static void .'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('SelectiveScrollingGrid', 'Grid', [ 
  \ dotnet#method('GetSelectiveScrollingOrientation(', 'class DependencyObject obj)', 'static SelectiveScrollingOrientation'),
  \ dotnet#method('SetSelectiveScrollingOrientation(', 'class DependencyObject obj, SelectiveScrollingOrientation value)', 'static void'),
  \ dotnet#method('SelectiveScrollingGrid(', ')', 'void'),
  \ dotnet#method('SelectiveScrollingGrid(', ')', 'static void .'),
  \ ])

call dotnet#class('ScrollBar', 'RangeBase', [ 
  \ dotnet#method('ScrollBar(', ')', 'void'),
  \ dotnet#method('add_Scroll(', 'class ScrollEventHandler value)', 'void'),
  \ dotnet#method('remove_Scroll(', 'class ScrollEventHandler value)', 'void'),
  \ dotnet#method('get_Orientation(', ')', 'Orientation'),
  \ dotnet#method('set_Orientation(', 'Orientation value)', 'void'),
  \ dotnet#method('get_ViewportSize(', ')', 'float64'),
  \ dotnet#method('set_ViewportSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_Track(', ')', 'Track'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnPreviewMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnPreviewMouseRightButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('get_IsEnabledCore(', ')', 'bool'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('ScrollToLastMousePoint(', ')', 'void'),
  \ dotnet#method('RaiseScrollEvent(', 'ScrollEventType scrollEventType)', 'void'),
  \ dotnet#method('IsValidOrientation(', 'object o)', 'static bool'),
  \ dotnet#method('get_IsStandalone(', ')', 'bool'),
  \ dotnet#method('set_IsStandalone(', 'bool value)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('OnContextMenuOpening(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('OnContextMenuClosing(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('ScrollBar(', ')', 'static void .'),
  \ dotnet#event('Scroll', 'ScrollEventHandler'),
  \ dotnet#prop('Orientation', 'Orientation'),
  \ dotnet#prop('ViewportSize', 'float64'),
  \ dotnet#prop('Track', 'Track'),
  \ dotnet#prop('IsEnabledCore', 'bool'),
  \ dotnet#prop('IsStandalone', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('ScrollEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('ScrollEventArgs(', 'ScrollEventType scrollEventType, float64 newValue)', 'void'),
  \ dotnet#method('get_ScrollEventType(', ')', 'ScrollEventType'),
  \ dotnet#method('get_NewValue(', ')', 'float64'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('ScrollEventType', 'ScrollEventType'),
  \ dotnet#prop('NewValue', 'float64'),
  \ ])

call dotnet#class('ScrollEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ScrollEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ScrollEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ScrollEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('StatusBar', 'ItemsControl', [ 
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('ShouldApplyItemContainerStyle(', 'class DependencyObject container, object item)', 'bool'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('get_SeparatorStyleKey(', ')', 'static'),
  \ dotnet#method('StatusBar(', ')', 'void'),
  \ dotnet#method('StatusBar(', ')', 'static void .'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('SeparatorStyleKey', 'ResourceKey'),
  \ ])

call dotnet#class('StatusBarItem', 'ContentControl', [ 
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('StatusBarItem(', ')', 'void'),
  \ dotnet#method('StatusBarItem(', ')', 'static void .'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('TabPanel', 'Panel', [ 
  \ dotnet#method('TabPanel(', ')', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('GetLayoutClip(', 'Size layoutSlotSize)', 'Geometry'),
  \ dotnet#method('TabPanel(', ')', 'static void .'),
  \ ])

call dotnet#class('TickBar', 'FrameworkElement', [ 
  \ dotnet#method('TickBar(', ')', 'void'),
  \ dotnet#method('get_Fill(', ')', 'Brush'),
  \ dotnet#method('set_Fill(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Minimum(', ')', 'float64'),
  \ dotnet#method('set_Minimum(', 'float64 value)', 'void'),
  \ dotnet#method('get_Maximum(', ')', 'float64'),
  \ dotnet#method('set_Maximum(', 'float64 value)', 'void'),
  \ dotnet#method('get_SelectionStart(', ')', 'float64'),
  \ dotnet#method('set_SelectionStart(', 'float64 value)', 'void'),
  \ dotnet#method('get_SelectionEnd(', ')', 'float64'),
  \ dotnet#method('set_SelectionEnd(', 'float64 value)', 'void'),
  \ dotnet#method('get_IsSelectionRangeEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsSelectionRangeEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_TickFrequency(', ')', 'float64'),
  \ dotnet#method('set_TickFrequency(', 'float64 value)', 'void'),
  \ dotnet#method('get_Ticks(', ')', 'DoubleCollection'),
  \ dotnet#method('set_Ticks(', 'class DoubleCollection value)', 'void'),
  \ dotnet#method('get_IsDirectionReversed(', ')', 'bool'),
  \ dotnet#method('set_IsDirectionReversed(', 'bool value)', 'void'),
  \ dotnet#method('get_Placement(', ')', 'TickBarPlacement'),
  \ dotnet#method('set_Placement(', 'TickBarPlacement value)', 'void'),
  \ dotnet#method('get_ReservedSpace(', ')', 'float64'),
  \ dotnet#method('set_ReservedSpace(', 'float64 value)', 'void'),
  \ dotnet#method('OnRender(', 'class DrawingContext dc)', 'void'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('TickBar(', ')', 'static void .'),
  \ dotnet#prop('Fill', 'Brush'),
  \ dotnet#prop('Minimum', 'float64'),
  \ dotnet#prop('Maximum', 'float64'),
  \ dotnet#prop('SelectionStart', 'float64'),
  \ dotnet#prop('SelectionEnd', 'float64'),
  \ dotnet#prop('IsSelectionRangeEnabled', 'bool'),
  \ dotnet#prop('TickFrequency', 'float64'),
  \ dotnet#prop('Ticks', 'DoubleCollection'),
  \ dotnet#prop('IsDirectionReversed', 'bool'),
  \ dotnet#prop('Placement', 'TickBarPlacement'),
  \ dotnet#prop('ReservedSpace', 'float64'),
  \ ])

call dotnet#class('ToolBarOverflowPanel', 'Panel', [ 
  \ dotnet#method('get_WrapWidth(', ')', 'float64'),
  \ dotnet#method('set_WrapWidth(', 'float64 value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeBounds)', 'Size'),
  \ dotnet#method('CreateUIElementCollection(', 'class FrameworkElement logicalParent)', 'UIElementCollection'),
  \ dotnet#method('ToolBarOverflowPanel(', ')', 'void'),
  \ dotnet#method('ToolBarOverflowPanel(', ')', 'static void .'),
  \ dotnet#prop('WrapWidth', 'float64'),
  \ ])

call dotnet#class('ToolBarPanel', 'StackPanel', [ 
  \ dotnet#method('ToolBarPanel(', ')', 'void'),
  \ dotnet#method('get_MinLength(', ')', 'float64'),
  \ dotnet#method('get_MaxLength(', ')', 'float64'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('GenerateChildren(', ')', 'strict void'),
  \ dotnet#method('OnItemsChangedInternal(', 'object sender, ItemsChangedEventArgs args)', 'strict void'),
  \ dotnet#method('get_GeneratedItemsCollection(', ')', '.method'),
  \ dotnet#method('set_MinLength(', 'float64 value)', 'void'),
  \ dotnet#method('set_MaxLength(', 'float64 value)', 'void'),
  \ dotnet#prop('MinLength', 'float64'),
  \ dotnet#prop('MaxLength', 'float64'),
  \ dotnet#prop('GeneratedItemsCollection', 'List'),
  \ ])

call dotnet#class('Track', 'FrameworkElement', [ 
  \ dotnet#method('Track(', ')', 'void'),
  \ dotnet#method('ValueFromPoint(', 'Point pt)', 'float64'),
  \ dotnet#method('ValueFromDistance(', 'float64 horizontal, float64 vertical)', 'float64'),
  \ dotnet#method('get_DecreaseRepeatButton(', ')', 'RepeatButton'),
  \ dotnet#method('set_DecreaseRepeatButton(', 'class RepeatButton value)', 'void'),
  \ dotnet#method('get_Thumb(', ')', 'Thumb'),
  \ dotnet#method('set_Thumb(', 'class Thumb value)', 'void'),
  \ dotnet#method('get_IncreaseRepeatButton(', ')', 'RepeatButton'),
  \ dotnet#method('set_IncreaseRepeatButton(', 'class RepeatButton value)', 'void'),
  \ dotnet#method('get_Orientation(', ')', 'Orientation'),
  \ dotnet#method('set_Orientation(', 'Orientation value)', 'void'),
  \ dotnet#method('get_Minimum(', ')', 'float64'),
  \ dotnet#method('set_Minimum(', 'float64 value)', 'void'),
  \ dotnet#method('get_Maximum(', ')', 'float64'),
  \ dotnet#method('set_Maximum(', 'float64 value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'float64'),
  \ dotnet#method('set_Value(', 'float64 value)', 'void'),
  \ dotnet#method('get_ViewportSize(', ')', 'float64'),
  \ dotnet#method('set_ViewportSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_IsDirectionReversed(', ')', 'bool'),
  \ dotnet#method('set_IsDirectionReversed(', 'bool value)', 'void'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('Track(', ')', 'static void .'),
  \ dotnet#prop('DecreaseRepeatButton', 'RepeatButton'),
  \ dotnet#prop('Thumb', 'Thumb'),
  \ dotnet#prop('IncreaseRepeatButton', 'RepeatButton'),
  \ dotnet#prop('Orientation', 'Orientation'),
  \ dotnet#prop('Minimum', 'float64'),
  \ dotnet#prop('Maximum', 'float64'),
  \ dotnet#prop('Value', 'float64'),
  \ dotnet#prop('ViewportSize', 'float64'),
  \ dotnet#prop('IsDirectionReversed', 'bool'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('UniformGrid', 'Panel', [ 
  \ dotnet#method('UniformGrid(', ')', 'void'),
  \ dotnet#method('get_FirstColumn(', ')', 'int32'),
  \ dotnet#method('set_FirstColumn(', 'int32 value)', 'void'),
  \ dotnet#method('get_Columns(', ')', 'int32'),
  \ dotnet#method('set_Columns(', 'int32 value)', 'void'),
  \ dotnet#method('get_Rows(', ')', 'int32'),
  \ dotnet#method('set_Rows(', 'int32 value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('UniformGrid(', ')', 'static void .'),
  \ dotnet#prop('FirstColumn', 'int32'),
  \ dotnet#prop('Columns', 'int32'),
  \ dotnet#prop('Rows', 'int32'),
  \ ])

