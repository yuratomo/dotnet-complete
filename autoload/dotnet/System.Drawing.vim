call dotnet#namespace('System.Drawing')

call dotnet#class('Image', 'MarshalByRefObject', [ 
  \ dotnet#method('Image(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', ')', 'bool'),
  \ dotnet#method('BeginInvoke(', 'class AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'bool'),
  \ dotnet#method('get_Tag(', ')', 'object'),
  \ dotnet#method('set_Tag(', 'object value)', 'void'),
  \ dotnet#method('FromFile(', 'string filename)', 'static Image'),
  \ dotnet#method('FromFile(', 'string filename, bool useEmbeddedColorManagement)', 'static Image'),
  \ dotnet#method('FromStream(', 'class Stream stream)', 'static Image'),
  \ dotnet#method('FromStream(', 'class Stream stream, bool useEmbeddedColorManagement)', 'static Image'),
  \ dotnet#method('FromStream(', 'class Stream stream, bool useEmbeddedColorManagement, bool validateImageData)', 'static Image'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo si, StreamingContext context)', 'void '),
  \ dotnet#method('GetEncoderParameterList(', 'Guid encoder)', 'EncoderParameters'),
  \ dotnet#method('Save(', 'string filename)', 'void'),
  \ dotnet#method('Save(', 'string filename, ImageFormat format)', 'void'),
  \ dotnet#method('Save(', 'string filename, ImageCodecInfo encoder, EncoderParameters encoderParams)', 'void'),
  \ dotnet#method('Save(', 'class Stream stream, ImageFormat format)', 'void'),
  \ dotnet#method('Save(', 'class Stream stream, ImageCodecInfo encoder, EncoderParameters encoderParams)', 'void'),
  \ dotnet#method('SaveAdd(', 'class EncoderParameters encoderParams)', 'void'),
  \ dotnet#method('SaveAdd(', 'class Image image, EncoderParameters encoderParams)', 'void'),
  \ dotnet#method('get_PhysicalDimension(', ')', 'SizeF'),
  \ dotnet#method('get_Size(', ')', 'Size'),
  \ dotnet#method('get_Width(', ')', 'int32'),
  \ dotnet#method('get_Height(', ')', 'int32'),
  \ dotnet#method('get_HorizontalResolution(', ')', 'float32'),
  \ dotnet#method('get_VerticalResolution(', ')', 'float32'),
  \ dotnet#method('get_Flags(', ')', 'int32'),
  \ dotnet#method('get_RawFormat(', ')', 'ImageFormat'),
  \ dotnet#method('get_PixelFormat(', ')', 'PixelFormat'),
  \ dotnet#method('GetBounds(', 'GraphicsUnit& pageUnit)', 'RectangleF'),
  \ dotnet#method('get_Palette(', ')', 'ColorPalette'),
  \ dotnet#method('set_Palette(', 'class ColorPalette value)', 'void'),
  \ dotnet#method('GetThumbnailImage(', 'int32 thumbWidth, int32 thumbHeight, Image/GetThumbnailImageAbort callback, int callbackData)', 'Image'),
  \ dotnet#method('get_FrameDimensionsList(', ')', 'Guid[]'),
  \ dotnet#method('GetFrameCount(', 'class FrameDimension dimension)', 'int32'),
  \ dotnet#method('SelectActiveFrame(', 'class FrameDimension dimension, int32 frameIndex)', 'int32'),
  \ dotnet#method('RotateFlip(', 'RotateFlipType rotateFlipType)', 'void'),
  \ dotnet#method('get_PropertyIdList(', ')', 'int32[]'),
  \ dotnet#method('GetPropertyItem(', 'int32 propid)', 'PropertyItem'),
  \ dotnet#method('RemovePropertyItem(', 'int32 propid)', 'void'),
  \ dotnet#method('SetPropertyItem(', 'class PropertyItem propitem)', 'void'),
  \ dotnet#method('get_PropertyItems(', ')', 'PropertyItem[]'),
  \ dotnet#method('FromHbitmap(', 'native int hbitmap)', 'static Bitmap'),
  \ dotnet#method('FromHbitmap(', 'native int hbitmap, int hpalette)', 'static Bitmap'),
  \ dotnet#method('GetPixelFormatSize(', 'PixelFormat pixfmt)', 'static int32'),
  \ dotnet#method('IsAlphaPixelFormat(', 'PixelFormat pixfmt)', 'static bool'),
  \ dotnet#method('IsExtendedPixelFormat(', 'PixelFormat pixfmt)', 'static bool'),
  \ dotnet#method('IsCanonicalPixelFormat(', 'PixelFormat pixfmt)', 'static bool'),
  \ dotnet#method('Image(', ')', 'void'),
  \ dotnet#prop('Tag', 'object'),
  \ dotnet#prop('PhysicalDimension', 'SizeF'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('Width', 'int32'),
  \ dotnet#prop('Height', 'int32'),
  \ dotnet#prop('HorizontalResolution', 'float32'),
  \ dotnet#prop('VerticalResolution', 'float32'),
  \ dotnet#prop('Flags', 'int32'),
  \ dotnet#prop('RawFormat', 'ImageFormat'),
  \ dotnet#prop('PixelFormat', 'PixelFormat'),
  \ dotnet#prop('Palette', 'ColorPalette'),
  \ dotnet#prop('FrameDimensionsList', 'Guid[]'),
  \ dotnet#prop('PropertyIdList', 'int32[]'),
  \ dotnet#prop('PropertyItems', 'PropertyItem[]'),
  \ ])

call dotnet#class('Bitmap', 'Image', [ 
  \ dotnet#method('Bitmap(', 'string filename)', 'void'),
  \ dotnet#method('Bitmap(', 'string filename, bool useIcm)', 'void'),
  \ dotnet#method('Bitmap(', 'class Type type, string resource)', 'void'),
  \ dotnet#method('Bitmap(', 'class Stream stream)', 'void'),
  \ dotnet#method('Bitmap(', 'class Stream stream, bool useIcm)', 'void'),
  \ dotnet#method('Bitmap(', 'int32 width, int32 height, int32 stride, PixelFormat format, int scan0)', 'void'),
  \ dotnet#method('Bitmap(', 'int32 width, int32 height, PixelFormat format)', 'void'),
  \ dotnet#method('Bitmap(', 'int32 width, int32 height)', 'void'),
  \ dotnet#method('Bitmap(', 'int32 width, int32 height, Graphics g)', 'void'),
  \ dotnet#method('Bitmap(', 'class Image original)', 'void'),
  \ dotnet#method('Bitmap(', 'class Image original, int32 width, int32 height)', 'void'),
  \ dotnet#method('FromHicon(', 'native int hicon)', 'static Bitmap'),
  \ dotnet#method('FromResource(', 'native int hinstance, string bitmapName)', 'static Bitmap'),
  \ dotnet#method('GetHbitmap(', ')', 'int'),
  \ dotnet#method('GetHbitmap(', 'Color background)', 'int'),
  \ dotnet#method('GetHicon(', ')', 'int'),
  \ dotnet#method('Bitmap(', 'class Image original, Size newSize)', 'void'),
  \ dotnet#method('Clone(', 'Rectangle rect, PixelFormat format)', 'Bitmap'),
  \ dotnet#method('Clone(', 'RectangleF rect, PixelFormat format)', 'Bitmap'),
  \ dotnet#method('MakeTransparent(', ')', 'void'),
  \ dotnet#method('MakeTransparent(', 'Color transparentColor)', 'void'),
  \ dotnet#method('LockBits(', 'Rectangle rect, ImageLockMode flags, PixelFormat format)', 'BitmapData'),
  \ dotnet#method('LockBits(', 'Rectangle rect, ImageLockMode flags, PixelFormat format, BitmapData bitmapData)', 'BitmapData'),
  \ dotnet#method('UnlockBits(', 'class BitmapData bitmapdata)', 'void'),
  \ dotnet#method('GetPixel(', 'int32 x, int32 y)', 'Color'),
  \ dotnet#method('SetPixel(', 'int32 x, int32 y, Color color)', 'void'),
  \ dotnet#method('SetResolution(', 'float32 xDpi, float32 yDpi)', 'void'),
  \ dotnet#method('Bitmap(', ')', 'void'),
  \ dotnet#method('Bitmap(', ')', 'static void .'),
  \ ])

call dotnet#class('Brush', 'MarshalByRefObject', [ 
  \ dotnet#method('Clone(', ')', 'abstract object'),
  \ dotnet#method('SetNativeBrush(', 'native int brush)', 'famorassem void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Brush(', ')', 'void'),
  \ ])

call dotnet#class('Brushes', 'Object', [ 
  \ dotnet#method('get_Transparent(', ')', 'static Brush'),
  \ dotnet#method('get_AliceBlue(', ')', 'static Brush'),
  \ dotnet#method('get_AntiqueWhite(', ')', 'static Brush'),
  \ dotnet#method('get_Aqua(', ')', 'static Brush'),
  \ dotnet#method('get_Aquamarine(', ')', 'static Brush'),
  \ dotnet#method('get_Azure(', ')', 'static Brush'),
  \ dotnet#method('get_Beige(', ')', 'static Brush'),
  \ dotnet#method('get_Bisque(', ')', 'static Brush'),
  \ dotnet#method('get_Black(', ')', 'static Brush'),
  \ dotnet#method('get_BlanchedAlmond(', ')', 'static Brush'),
  \ dotnet#method('get_Blue(', ')', 'static Brush'),
  \ dotnet#method('get_BlueViolet(', ')', 'static Brush'),
  \ dotnet#method('get_Brown(', ')', 'static Brush'),
  \ dotnet#method('get_BurlyWood(', ')', 'static Brush'),
  \ dotnet#method('get_CadetBlue(', ')', 'static Brush'),
  \ dotnet#method('get_Chartreuse(', ')', 'static Brush'),
  \ dotnet#method('get_Chocolate(', ')', 'static Brush'),
  \ dotnet#method('get_Coral(', ')', 'static Brush'),
  \ dotnet#method('get_CornflowerBlue(', ')', 'static Brush'),
  \ dotnet#method('get_Cornsilk(', ')', 'static Brush'),
  \ dotnet#method('get_Crimson(', ')', 'static Brush'),
  \ dotnet#method('get_Cyan(', ')', 'static Brush'),
  \ dotnet#method('get_DarkBlue(', ')', 'static Brush'),
  \ dotnet#method('get_DarkCyan(', ')', 'static Brush'),
  \ dotnet#method('get_DarkGoldenrod(', ')', 'static Brush'),
  \ dotnet#method('get_DarkGray(', ')', 'static Brush'),
  \ dotnet#method('get_DarkGreen(', ')', 'static Brush'),
  \ dotnet#method('get_DarkKhaki(', ')', 'static Brush'),
  \ dotnet#method('get_DarkMagenta(', ')', 'static Brush'),
  \ dotnet#method('get_DarkOliveGreen(', ')', 'static Brush'),
  \ dotnet#method('get_DarkOrange(', ')', 'static Brush'),
  \ dotnet#method('get_DarkOrchid(', ')', 'static Brush'),
  \ dotnet#method('get_DarkRed(', ')', 'static Brush'),
  \ dotnet#method('get_DarkSalmon(', ')', 'static Brush'),
  \ dotnet#method('get_DarkSeaGreen(', ')', 'static Brush'),
  \ dotnet#method('get_DarkSlateBlue(', ')', 'static Brush'),
  \ dotnet#method('get_DarkSlateGray(', ')', 'static Brush'),
  \ dotnet#method('get_DarkTurquoise(', ')', 'static Brush'),
  \ dotnet#method('get_DarkViolet(', ')', 'static Brush'),
  \ dotnet#method('get_DeepPink(', ')', 'static Brush'),
  \ dotnet#method('get_DeepSkyBlue(', ')', 'static Brush'),
  \ dotnet#method('get_DimGray(', ')', 'static Brush'),
  \ dotnet#method('get_DodgerBlue(', ')', 'static Brush'),
  \ dotnet#method('get_Firebrick(', ')', 'static Brush'),
  \ dotnet#method('get_FloralWhite(', ')', 'static Brush'),
  \ dotnet#method('get_ForestGreen(', ')', 'static Brush'),
  \ dotnet#method('get_Fuchsia(', ')', 'static Brush'),
  \ dotnet#method('get_Gainsboro(', ')', 'static Brush'),
  \ dotnet#method('get_GhostWhite(', ')', 'static Brush'),
  \ dotnet#method('get_Gold(', ')', 'static Brush'),
  \ dotnet#method('get_Goldenrod(', ')', 'static Brush'),
  \ dotnet#method('get_Gray(', ')', 'static Brush'),
  \ dotnet#method('get_Green(', ')', 'static Brush'),
  \ dotnet#method('get_GreenYellow(', ')', 'static Brush'),
  \ dotnet#method('get_Honeydew(', ')', 'static Brush'),
  \ dotnet#method('get_HotPink(', ')', 'static Brush'),
  \ dotnet#method('get_IndianRed(', ')', 'static Brush'),
  \ dotnet#method('get_Indigo(', ')', 'static Brush'),
  \ dotnet#method('get_Ivory(', ')', 'static Brush'),
  \ dotnet#method('get_Khaki(', ')', 'static Brush'),
  \ dotnet#method('get_Lavender(', ')', 'static Brush'),
  \ dotnet#method('get_LavenderBlush(', ')', 'static Brush'),
  \ dotnet#method('get_LawnGreen(', ')', 'static Brush'),
  \ dotnet#method('get_LemonChiffon(', ')', 'static Brush'),
  \ dotnet#method('get_LightBlue(', ')', 'static Brush'),
  \ dotnet#method('get_LightCoral(', ')', 'static Brush'),
  \ dotnet#method('get_LightCyan(', ')', 'static Brush'),
  \ dotnet#method('get_LightGoldenrodYellow(', ')', 'static Brush'),
  \ dotnet#method('get_LightGreen(', ')', 'static Brush'),
  \ dotnet#method('get_LightGray(', ')', 'static Brush'),
  \ dotnet#method('get_LightPink(', ')', 'static Brush'),
  \ dotnet#method('get_LightSalmon(', ')', 'static Brush'),
  \ dotnet#method('get_LightSeaGreen(', ')', 'static Brush'),
  \ dotnet#method('get_LightSkyBlue(', ')', 'static Brush'),
  \ dotnet#method('get_LightSlateGray(', ')', 'static Brush'),
  \ dotnet#method('get_LightSteelBlue(', ')', 'static Brush'),
  \ dotnet#method('get_LightYellow(', ')', 'static Brush'),
  \ dotnet#method('get_Lime(', ')', 'static Brush'),
  \ dotnet#method('get_LimeGreen(', ')', 'static Brush'),
  \ dotnet#method('get_Linen(', ')', 'static Brush'),
  \ dotnet#method('get_Magenta(', ')', 'static Brush'),
  \ dotnet#method('get_Maroon(', ')', 'static Brush'),
  \ dotnet#method('get_MediumAquamarine(', ')', 'static Brush'),
  \ dotnet#method('get_MediumBlue(', ')', 'static Brush'),
  \ dotnet#method('get_MediumOrchid(', ')', 'static Brush'),
  \ dotnet#method('get_MediumPurple(', ')', 'static Brush'),
  \ dotnet#method('get_MediumSeaGreen(', ')', 'static Brush'),
  \ dotnet#method('get_MediumSlateBlue(', ')', 'static Brush'),
  \ dotnet#method('get_MediumSpringGreen(', ')', 'static Brush'),
  \ dotnet#method('get_MediumTurquoise(', ')', 'static Brush'),
  \ dotnet#method('get_MediumVioletRed(', ')', 'static Brush'),
  \ dotnet#method('get_MidnightBlue(', ')', 'static Brush'),
  \ dotnet#method('get_MintCream(', ')', 'static Brush'),
  \ dotnet#method('get_MistyRose(', ')', 'static Brush'),
  \ dotnet#method('get_Moccasin(', ')', 'static Brush'),
  \ dotnet#method('get_NavajoWhite(', ')', 'static Brush'),
  \ dotnet#method('get_Navy(', ')', 'static Brush'),
  \ dotnet#method('get_OldLace(', ')', 'static Brush'),
  \ dotnet#method('get_Olive(', ')', 'static Brush'),
  \ dotnet#method('get_OliveDrab(', ')', 'static Brush'),
  \ dotnet#method('get_Orange(', ')', 'static Brush'),
  \ dotnet#method('get_OrangeRed(', ')', 'static Brush'),
  \ dotnet#method('get_Orchid(', ')', 'static Brush'),
  \ dotnet#method('get_PaleGoldenrod(', ')', 'static Brush'),
  \ dotnet#method('get_PaleGreen(', ')', 'static Brush'),
  \ dotnet#method('get_PaleTurquoise(', ')', 'static Brush'),
  \ dotnet#method('get_PaleVioletRed(', ')', 'static Brush'),
  \ dotnet#method('get_PapayaWhip(', ')', 'static Brush'),
  \ dotnet#method('get_PeachPuff(', ')', 'static Brush'),
  \ dotnet#method('get_Peru(', ')', 'static Brush'),
  \ dotnet#method('get_Pink(', ')', 'static Brush'),
  \ dotnet#method('get_Plum(', ')', 'static Brush'),
  \ dotnet#method('get_PowderBlue(', ')', 'static Brush'),
  \ dotnet#method('get_Purple(', ')', 'static Brush'),
  \ dotnet#method('get_Red(', ')', 'static Brush'),
  \ dotnet#method('get_RosyBrown(', ')', 'static Brush'),
  \ dotnet#method('get_RoyalBlue(', ')', 'static Brush'),
  \ dotnet#method('get_SaddleBrown(', ')', 'static Brush'),
  \ dotnet#method('get_Salmon(', ')', 'static Brush'),
  \ dotnet#method('get_SandyBrown(', ')', 'static Brush'),
  \ dotnet#method('get_SeaGreen(', ')', 'static Brush'),
  \ dotnet#method('get_SeaShell(', ')', 'static Brush'),
  \ dotnet#method('get_Sienna(', ')', 'static Brush'),
  \ dotnet#method('get_Silver(', ')', 'static Brush'),
  \ dotnet#method('get_SkyBlue(', ')', 'static Brush'),
  \ dotnet#method('get_SlateBlue(', ')', 'static Brush'),
  \ dotnet#method('get_SlateGray(', ')', 'static Brush'),
  \ dotnet#method('get_Snow(', ')', 'static Brush'),
  \ dotnet#method('get_SpringGreen(', ')', 'static Brush'),
  \ dotnet#method('get_SteelBlue(', ')', 'static Brush'),
  \ dotnet#method('get_Tan(', ')', 'static Brush'),
  \ dotnet#method('get_Teal(', ')', 'static Brush'),
  \ dotnet#method('get_Thistle(', ')', 'static Brush'),
  \ dotnet#method('get_Tomato(', ')', 'static Brush'),
  \ dotnet#method('get_Turquoise(', ')', 'static Brush'),
  \ dotnet#method('get_Violet(', ')', 'static Brush'),
  \ dotnet#method('get_Wheat(', ')', 'static Brush'),
  \ dotnet#method('get_White(', ')', 'static Brush'),
  \ dotnet#method('get_WhiteSmoke(', ')', 'static Brush'),
  \ dotnet#method('get_Yellow(', ')', 'static Brush'),
  \ dotnet#method('get_YellowGreen(', ')', 'static Brush'),
  \ dotnet#method('Brushes(', ')', 'void'),
  \ dotnet#method('Brushes(', ')', 'static void .'),
  \ dotnet#prop('Transparent', 'Brush'),
  \ dotnet#prop('AliceBlue', 'Brush'),
  \ dotnet#prop('AntiqueWhite', 'Brush'),
  \ dotnet#prop('Aqua', 'Brush'),
  \ dotnet#prop('Aquamarine', 'Brush'),
  \ dotnet#prop('Azure', 'Brush'),
  \ dotnet#prop('Beige', 'Brush'),
  \ dotnet#prop('Bisque', 'Brush'),
  \ dotnet#prop('Black', 'Brush'),
  \ dotnet#prop('BlanchedAlmond', 'Brush'),
  \ dotnet#prop('Blue', 'Brush'),
  \ dotnet#prop('BlueViolet', 'Brush'),
  \ dotnet#prop('Brown', 'Brush'),
  \ dotnet#prop('BurlyWood', 'Brush'),
  \ dotnet#prop('CadetBlue', 'Brush'),
  \ dotnet#prop('Chartreuse', 'Brush'),
  \ dotnet#prop('Chocolate', 'Brush'),
  \ dotnet#prop('Coral', 'Brush'),
  \ dotnet#prop('CornflowerBlue', 'Brush'),
  \ dotnet#prop('Cornsilk', 'Brush'),
  \ dotnet#prop('Crimson', 'Brush'),
  \ dotnet#prop('Cyan', 'Brush'),
  \ dotnet#prop('DarkBlue', 'Brush'),
  \ dotnet#prop('DarkCyan', 'Brush'),
  \ dotnet#prop('DarkGoldenrod', 'Brush'),
  \ dotnet#prop('DarkGray', 'Brush'),
  \ dotnet#prop('DarkGreen', 'Brush'),
  \ dotnet#prop('DarkKhaki', 'Brush'),
  \ dotnet#prop('DarkMagenta', 'Brush'),
  \ dotnet#prop('DarkOliveGreen', 'Brush'),
  \ dotnet#prop('DarkOrange', 'Brush'),
  \ dotnet#prop('DarkOrchid', 'Brush'),
  \ dotnet#prop('DarkRed', 'Brush'),
  \ dotnet#prop('DarkSalmon', 'Brush'),
  \ dotnet#prop('DarkSeaGreen', 'Brush'),
  \ dotnet#prop('DarkSlateBlue', 'Brush'),
  \ dotnet#prop('DarkSlateGray', 'Brush'),
  \ dotnet#prop('DarkTurquoise', 'Brush'),
  \ dotnet#prop('DarkViolet', 'Brush'),
  \ dotnet#prop('DeepPink', 'Brush'),
  \ dotnet#prop('DeepSkyBlue', 'Brush'),
  \ dotnet#prop('DimGray', 'Brush'),
  \ dotnet#prop('DodgerBlue', 'Brush'),
  \ dotnet#prop('Firebrick', 'Brush'),
  \ dotnet#prop('FloralWhite', 'Brush'),
  \ dotnet#prop('ForestGreen', 'Brush'),
  \ dotnet#prop('Fuchsia', 'Brush'),
  \ dotnet#prop('Gainsboro', 'Brush'),
  \ dotnet#prop('GhostWhite', 'Brush'),
  \ dotnet#prop('Gold', 'Brush'),
  \ dotnet#prop('Goldenrod', 'Brush'),
  \ dotnet#prop('Gray', 'Brush'),
  \ dotnet#prop('Green', 'Brush'),
  \ dotnet#prop('GreenYellow', 'Brush'),
  \ dotnet#prop('Honeydew', 'Brush'),
  \ dotnet#prop('HotPink', 'Brush'),
  \ dotnet#prop('IndianRed', 'Brush'),
  \ dotnet#prop('Indigo', 'Brush'),
  \ dotnet#prop('Ivory', 'Brush'),
  \ dotnet#prop('Khaki', 'Brush'),
  \ dotnet#prop('Lavender', 'Brush'),
  \ dotnet#prop('LavenderBlush', 'Brush'),
  \ dotnet#prop('LawnGreen', 'Brush'),
  \ dotnet#prop('LemonChiffon', 'Brush'),
  \ dotnet#prop('LightBlue', 'Brush'),
  \ dotnet#prop('LightCoral', 'Brush'),
  \ dotnet#prop('LightCyan', 'Brush'),
  \ dotnet#prop('LightGoldenrodYellow', 'Brush'),
  \ dotnet#prop('LightGreen', 'Brush'),
  \ dotnet#prop('LightGray', 'Brush'),
  \ dotnet#prop('LightPink', 'Brush'),
  \ dotnet#prop('LightSalmon', 'Brush'),
  \ dotnet#prop('LightSeaGreen', 'Brush'),
  \ dotnet#prop('LightSkyBlue', 'Brush'),
  \ dotnet#prop('LightSlateGray', 'Brush'),
  \ dotnet#prop('LightSteelBlue', 'Brush'),
  \ dotnet#prop('LightYellow', 'Brush'),
  \ dotnet#prop('Lime', 'Brush'),
  \ dotnet#prop('LimeGreen', 'Brush'),
  \ dotnet#prop('Linen', 'Brush'),
  \ dotnet#prop('Magenta', 'Brush'),
  \ dotnet#prop('Maroon', 'Brush'),
  \ dotnet#prop('MediumAquamarine', 'Brush'),
  \ dotnet#prop('MediumBlue', 'Brush'),
  \ dotnet#prop('MediumOrchid', 'Brush'),
  \ dotnet#prop('MediumPurple', 'Brush'),
  \ dotnet#prop('MediumSeaGreen', 'Brush'),
  \ dotnet#prop('MediumSlateBlue', 'Brush'),
  \ dotnet#prop('MediumSpringGreen', 'Brush'),
  \ dotnet#prop('MediumTurquoise', 'Brush'),
  \ dotnet#prop('MediumVioletRed', 'Brush'),
  \ dotnet#prop('MidnightBlue', 'Brush'),
  \ dotnet#prop('MintCream', 'Brush'),
  \ dotnet#prop('MistyRose', 'Brush'),
  \ dotnet#prop('Moccasin', 'Brush'),
  \ dotnet#prop('NavajoWhite', 'Brush'),
  \ dotnet#prop('Navy', 'Brush'),
  \ dotnet#prop('OldLace', 'Brush'),
  \ dotnet#prop('Olive', 'Brush'),
  \ dotnet#prop('OliveDrab', 'Brush'),
  \ dotnet#prop('Orange', 'Brush'),
  \ dotnet#prop('OrangeRed', 'Brush'),
  \ dotnet#prop('Orchid', 'Brush'),
  \ dotnet#prop('PaleGoldenrod', 'Brush'),
  \ dotnet#prop('PaleGreen', 'Brush'),
  \ dotnet#prop('PaleTurquoise', 'Brush'),
  \ dotnet#prop('PaleVioletRed', 'Brush'),
  \ dotnet#prop('PapayaWhip', 'Brush'),
  \ dotnet#prop('PeachPuff', 'Brush'),
  \ dotnet#prop('Peru', 'Brush'),
  \ dotnet#prop('Pink', 'Brush'),
  \ dotnet#prop('Plum', 'Brush'),
  \ dotnet#prop('PowderBlue', 'Brush'),
  \ dotnet#prop('Purple', 'Brush'),
  \ dotnet#prop('Red', 'Brush'),
  \ dotnet#prop('RosyBrown', 'Brush'),
  \ dotnet#prop('RoyalBlue', 'Brush'),
  \ dotnet#prop('SaddleBrown', 'Brush'),
  \ dotnet#prop('Salmon', 'Brush'),
  \ dotnet#prop('SandyBrown', 'Brush'),
  \ dotnet#prop('SeaGreen', 'Brush'),
  \ dotnet#prop('SeaShell', 'Brush'),
  \ dotnet#prop('Sienna', 'Brush'),
  \ dotnet#prop('Silver', 'Brush'),
  \ dotnet#prop('SkyBlue', 'Brush'),
  \ dotnet#prop('SlateBlue', 'Brush'),
  \ dotnet#prop('SlateGray', 'Brush'),
  \ dotnet#prop('Snow', 'Brush'),
  \ dotnet#prop('SpringGreen', 'Brush'),
  \ dotnet#prop('SteelBlue', 'Brush'),
  \ dotnet#prop('Tan', 'Brush'),
  \ dotnet#prop('Teal', 'Brush'),
  \ dotnet#prop('Thistle', 'Brush'),
  \ dotnet#prop('Tomato', 'Brush'),
  \ dotnet#prop('Turquoise', 'Brush'),
  \ dotnet#prop('Violet', 'Brush'),
  \ dotnet#prop('Wheat', 'Brush'),
  \ dotnet#prop('White', 'Brush'),
  \ dotnet#prop('WhiteSmoke', 'Brush'),
  \ dotnet#prop('Yellow', 'Brush'),
  \ dotnet#prop('YellowGreen', 'Brush'),
  \ ])

call dotnet#class('BufferedGraphics', 'Object', [ 
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Graphics(', ')', 'Graphics'),
  \ dotnet#method('Render(', ')', 'void'),
  \ dotnet#method('Render(', 'class Graphics target)', 'void'),
  \ dotnet#method('Render(', 'native int targetDC)', 'void'),
  \ dotnet#method('BufferedGraphics(', ')', 'static void .'),
  \ dotnet#prop('Graphics', 'Graphics'),
  \ ])

call dotnet#class('BufferedGraphicsContext', 'Object', [ 
  \ dotnet#method('BufferedGraphicsContext(', ')', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('get_MaximumBuffer(', ')', 'Size'),
  \ dotnet#method('set_MaximumBuffer(', 'Size value)', 'void'),
  \ dotnet#method('Allocate(', 'class Graphics targetGraphics, Rectangle targetRectangle)', 'BufferedGraphics'),
  \ dotnet#method('Allocate(', 'native int targetDC, Rectangle targetRectangle)', 'BufferedGraphics'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Invalidate(', ')', 'void'),
  \ dotnet#prop('MaximumBuffer', 'Size'),
  \ ])

call dotnet#class('BufferedGraphicsManager', 'Object', [ 
  \ dotnet#method('get_Current(', ')', 'static'),
  \ dotnet#method('BufferedGraphicsManager(', ')', 'void'),
  \ dotnet#method('BufferedGraphicsManager(', ')', 'static void .'),
  \ dotnet#prop('Current', 'BufferedGraphicsContext'),
  \ ])

call dotnet#class('Color', 'ValueType', [ 
  \ dotnet#field('name', 'string'),
  \ dotnet#field('value', 'int64'),
  \ dotnet#field('knownColor', 'int16'),
  \ dotnet#field('state', 'int16'),
  \ dotnet#method('get_Transparent(', ')', 'static'),
  \ dotnet#method('get_AliceBlue(', ')', 'static'),
  \ dotnet#method('get_AntiqueWhite(', ')', 'static'),
  \ dotnet#method('get_Aqua(', ')', 'static'),
  \ dotnet#method('get_Aquamarine(', ')', 'static'),
  \ dotnet#method('get_Azure(', ')', 'static'),
  \ dotnet#method('get_Beige(', ')', 'static'),
  \ dotnet#method('get_Bisque(', ')', 'static'),
  \ dotnet#method('get_Black(', ')', 'static'),
  \ dotnet#method('get_BlanchedAlmond(', ')', 'static'),
  \ dotnet#method('get_Blue(', ')', 'static'),
  \ dotnet#method('get_BlueViolet(', ')', 'static'),
  \ dotnet#method('get_Brown(', ')', 'static'),
  \ dotnet#method('get_BurlyWood(', ')', 'static'),
  \ dotnet#method('get_CadetBlue(', ')', 'static'),
  \ dotnet#method('get_Chartreuse(', ')', 'static'),
  \ dotnet#method('get_Chocolate(', ')', 'static'),
  \ dotnet#method('get_Coral(', ')', 'static'),
  \ dotnet#method('get_CornflowerBlue(', ')', 'static'),
  \ dotnet#method('get_Cornsilk(', ')', 'static'),
  \ dotnet#method('get_Crimson(', ')', 'static'),
  \ dotnet#method('get_Cyan(', ')', 'static'),
  \ dotnet#method('get_DarkBlue(', ')', 'static'),
  \ dotnet#method('get_DarkCyan(', ')', 'static'),
  \ dotnet#method('get_DarkGoldenrod(', ')', 'static'),
  \ dotnet#method('get_DarkGray(', ')', 'static'),
  \ dotnet#method('get_DarkGreen(', ')', 'static'),
  \ dotnet#method('get_DarkKhaki(', ')', 'static'),
  \ dotnet#method('get_DarkMagenta(', ')', 'static'),
  \ dotnet#method('get_DarkOliveGreen(', ')', 'static'),
  \ dotnet#method('get_DarkOrange(', ')', 'static'),
  \ dotnet#method('get_DarkOrchid(', ')', 'static'),
  \ dotnet#method('get_DarkRed(', ')', 'static'),
  \ dotnet#method('get_DarkSalmon(', ')', 'static'),
  \ dotnet#method('get_DarkSeaGreen(', ')', 'static'),
  \ dotnet#method('get_DarkSlateBlue(', ')', 'static'),
  \ dotnet#method('get_DarkSlateGray(', ')', 'static'),
  \ dotnet#method('get_DarkTurquoise(', ')', 'static'),
  \ dotnet#method('get_DarkViolet(', ')', 'static'),
  \ dotnet#method('get_DeepPink(', ')', 'static'),
  \ dotnet#method('get_DeepSkyBlue(', ')', 'static'),
  \ dotnet#method('get_DimGray(', ')', 'static'),
  \ dotnet#method('get_DodgerBlue(', ')', 'static'),
  \ dotnet#method('get_Firebrick(', ')', 'static'),
  \ dotnet#method('get_FloralWhite(', ')', 'static'),
  \ dotnet#method('get_ForestGreen(', ')', 'static'),
  \ dotnet#method('get_Fuchsia(', ')', 'static'),
  \ dotnet#method('get_Gainsboro(', ')', 'static'),
  \ dotnet#method('get_GhostWhite(', ')', 'static'),
  \ dotnet#method('get_Gold(', ')', 'static'),
  \ dotnet#method('get_Goldenrod(', ')', 'static'),
  \ dotnet#method('get_Gray(', ')', 'static'),
  \ dotnet#method('get_Green(', ')', 'static'),
  \ dotnet#method('get_GreenYellow(', ')', 'static'),
  \ dotnet#method('get_Honeydew(', ')', 'static'),
  \ dotnet#method('get_HotPink(', ')', 'static'),
  \ dotnet#method('get_IndianRed(', ')', 'static'),
  \ dotnet#method('get_Indigo(', ')', 'static'),
  \ dotnet#method('get_Ivory(', ')', 'static'),
  \ dotnet#method('get_Khaki(', ')', 'static'),
  \ dotnet#method('get_Lavender(', ')', 'static'),
  \ dotnet#method('get_LavenderBlush(', ')', 'static'),
  \ dotnet#method('get_LawnGreen(', ')', 'static'),
  \ dotnet#method('get_LemonChiffon(', ')', 'static'),
  \ dotnet#method('get_LightBlue(', ')', 'static'),
  \ dotnet#method('get_LightCoral(', ')', 'static'),
  \ dotnet#method('get_LightCyan(', ')', 'static'),
  \ dotnet#method('get_LightGoldenrodYellow(', ')', 'static'),
  \ dotnet#method('get_LightGreen(', ')', 'static'),
  \ dotnet#method('get_LightGray(', ')', 'static'),
  \ dotnet#method('get_LightPink(', ')', 'static'),
  \ dotnet#method('get_LightSalmon(', ')', 'static'),
  \ dotnet#method('get_LightSeaGreen(', ')', 'static'),
  \ dotnet#method('get_LightSkyBlue(', ')', 'static'),
  \ dotnet#method('get_LightSlateGray(', ')', 'static'),
  \ dotnet#method('get_LightSteelBlue(', ')', 'static'),
  \ dotnet#method('get_LightYellow(', ')', 'static'),
  \ dotnet#method('get_Lime(', ')', 'static'),
  \ dotnet#method('get_LimeGreen(', ')', 'static'),
  \ dotnet#method('get_Linen(', ')', 'static'),
  \ dotnet#method('get_Magenta(', ')', 'static'),
  \ dotnet#method('get_Maroon(', ')', 'static'),
  \ dotnet#method('get_MediumAquamarine(', ')', 'static'),
  \ dotnet#method('get_MediumBlue(', ')', 'static'),
  \ dotnet#method('get_MediumOrchid(', ')', 'static'),
  \ dotnet#method('get_MediumPurple(', ')', 'static'),
  \ dotnet#method('get_MediumSeaGreen(', ')', 'static'),
  \ dotnet#method('get_MediumSlateBlue(', ')', 'static'),
  \ dotnet#method('get_MediumSpringGreen(', ')', 'static'),
  \ dotnet#method('get_MediumTurquoise(', ')', 'static'),
  \ dotnet#method('get_MediumVioletRed(', ')', 'static'),
  \ dotnet#method('get_MidnightBlue(', ')', 'static'),
  \ dotnet#method('get_MintCream(', ')', 'static'),
  \ dotnet#method('get_MistyRose(', ')', 'static'),
  \ dotnet#method('get_Moccasin(', ')', 'static'),
  \ dotnet#method('get_NavajoWhite(', ')', 'static'),
  \ dotnet#method('get_Navy(', ')', 'static'),
  \ dotnet#method('get_OldLace(', ')', 'static'),
  \ dotnet#method('get_Olive(', ')', 'static'),
  \ dotnet#method('get_OliveDrab(', ')', 'static'),
  \ dotnet#method('get_Orange(', ')', 'static'),
  \ dotnet#method('get_OrangeRed(', ')', 'static'),
  \ dotnet#method('get_Orchid(', ')', 'static'),
  \ dotnet#method('get_PaleGoldenrod(', ')', 'static'),
  \ dotnet#method('get_PaleGreen(', ')', 'static'),
  \ dotnet#method('get_PaleTurquoise(', ')', 'static'),
  \ dotnet#method('get_PaleVioletRed(', ')', 'static'),
  \ dotnet#method('get_PapayaWhip(', ')', 'static'),
  \ dotnet#method('get_PeachPuff(', ')', 'static'),
  \ dotnet#method('get_Peru(', ')', 'static'),
  \ dotnet#method('get_Pink(', ')', 'static'),
  \ dotnet#method('get_Plum(', ')', 'static'),
  \ dotnet#method('get_PowderBlue(', ')', 'static'),
  \ dotnet#method('get_Purple(', ')', 'static'),
  \ dotnet#method('get_Red(', ')', 'static'),
  \ dotnet#method('get_RosyBrown(', ')', 'static'),
  \ dotnet#method('get_RoyalBlue(', ')', 'static'),
  \ dotnet#method('get_SaddleBrown(', ')', 'static'),
  \ dotnet#method('get_Salmon(', ')', 'static'),
  \ dotnet#method('get_SandyBrown(', ')', 'static'),
  \ dotnet#method('get_SeaGreen(', ')', 'static'),
  \ dotnet#method('get_SeaShell(', ')', 'static'),
  \ dotnet#method('get_Sienna(', ')', 'static'),
  \ dotnet#method('get_Silver(', ')', 'static'),
  \ dotnet#method('get_SkyBlue(', ')', 'static'),
  \ dotnet#method('get_SlateBlue(', ')', 'static'),
  \ dotnet#method('get_SlateGray(', ')', 'static'),
  \ dotnet#method('get_Snow(', ')', 'static'),
  \ dotnet#method('get_SpringGreen(', ')', 'static'),
  \ dotnet#method('get_SteelBlue(', ')', 'static'),
  \ dotnet#method('get_Tan(', ')', 'static'),
  \ dotnet#method('get_Teal(', ')', 'static'),
  \ dotnet#method('get_Thistle(', ')', 'static'),
  \ dotnet#method('get_Tomato(', ')', 'static'),
  \ dotnet#method('get_Turquoise(', ')', 'static'),
  \ dotnet#method('get_Violet(', ')', 'static'),
  \ dotnet#method('get_Wheat(', ')', 'static'),
  \ dotnet#method('get_White(', ')', 'static'),
  \ dotnet#method('get_WhiteSmoke(', ')', 'static'),
  \ dotnet#method('get_Yellow(', ')', 'static'),
  \ dotnet#method('get_YellowGreen(', ')', 'static'),
  \ dotnet#method('get_R(', ')', 'uint8'),
  \ dotnet#method('get_G(', ')', 'uint8'),
  \ dotnet#method('get_B(', ')', 'uint8'),
  \ dotnet#method('get_A(', ')', 'uint8'),
  \ dotnet#method('get_IsKnownColor(', ')', 'bool'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_IsNamedColor(', ')', 'bool'),
  \ dotnet#method('get_IsSystemColor(', ')', 'bool'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('FromArgb(', 'int32 argb)', 'static Color'),
  \ dotnet#method('FromArgb(', 'int32 alpha, int32 red, int32 green, int32 blue)', 'static Color'),
  \ dotnet#method('FromArgb(', 'int32 alpha, Color baseColor)', 'static Color'),
  \ dotnet#method('FromArgb(', 'int32 red, int32 green, int32 blue)', 'static Color'),
  \ dotnet#method('FromKnownColor(', 'KnownColor color)', 'static Color'),
  \ dotnet#method('FromName(', 'string name)', 'static Color'),
  \ dotnet#method('GetBrightness(', ')', 'float32'),
  \ dotnet#method('GetHue(', ')', 'float32'),
  \ dotnet#method('GetSaturation(', ')', 'float32'),
  \ dotnet#method('ToArgb(', ')', 'int32'),
  \ dotnet#method('ToKnownColor(', ')', 'KnownColor'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('op_Equality(', 'Color left, Color right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Color left, Color right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Color(', ')', 'static void .'),
  \ dotnet#prop('Transparent', 'Color'),
  \ dotnet#prop('AliceBlue', 'Color'),
  \ dotnet#prop('AntiqueWhite', 'Color'),
  \ dotnet#prop('Aqua', 'Color'),
  \ dotnet#prop('Aquamarine', 'Color'),
  \ dotnet#prop('Azure', 'Color'),
  \ dotnet#prop('Beige', 'Color'),
  \ dotnet#prop('Bisque', 'Color'),
  \ dotnet#prop('Black', 'Color'),
  \ dotnet#prop('BlanchedAlmond', 'Color'),
  \ dotnet#prop('Blue', 'Color'),
  \ dotnet#prop('BlueViolet', 'Color'),
  \ dotnet#prop('Brown', 'Color'),
  \ dotnet#prop('BurlyWood', 'Color'),
  \ dotnet#prop('CadetBlue', 'Color'),
  \ dotnet#prop('Chartreuse', 'Color'),
  \ dotnet#prop('Chocolate', 'Color'),
  \ dotnet#prop('Coral', 'Color'),
  \ dotnet#prop('CornflowerBlue', 'Color'),
  \ dotnet#prop('Cornsilk', 'Color'),
  \ dotnet#prop('Crimson', 'Color'),
  \ dotnet#prop('Cyan', 'Color'),
  \ dotnet#prop('DarkBlue', 'Color'),
  \ dotnet#prop('DarkCyan', 'Color'),
  \ dotnet#prop('DarkGoldenrod', 'Color'),
  \ dotnet#prop('DarkGray', 'Color'),
  \ dotnet#prop('DarkGreen', 'Color'),
  \ dotnet#prop('DarkKhaki', 'Color'),
  \ dotnet#prop('DarkMagenta', 'Color'),
  \ dotnet#prop('DarkOliveGreen', 'Color'),
  \ dotnet#prop('DarkOrange', 'Color'),
  \ dotnet#prop('DarkOrchid', 'Color'),
  \ dotnet#prop('DarkRed', 'Color'),
  \ dotnet#prop('DarkSalmon', 'Color'),
  \ dotnet#prop('DarkSeaGreen', 'Color'),
  \ dotnet#prop('DarkSlateBlue', 'Color'),
  \ dotnet#prop('DarkSlateGray', 'Color'),
  \ dotnet#prop('DarkTurquoise', 'Color'),
  \ dotnet#prop('DarkViolet', 'Color'),
  \ dotnet#prop('DeepPink', 'Color'),
  \ dotnet#prop('DeepSkyBlue', 'Color'),
  \ dotnet#prop('DimGray', 'Color'),
  \ dotnet#prop('DodgerBlue', 'Color'),
  \ dotnet#prop('Firebrick', 'Color'),
  \ dotnet#prop('FloralWhite', 'Color'),
  \ dotnet#prop('ForestGreen', 'Color'),
  \ dotnet#prop('Fuchsia', 'Color'),
  \ dotnet#prop('Gainsboro', 'Color'),
  \ dotnet#prop('GhostWhite', 'Color'),
  \ dotnet#prop('Gold', 'Color'),
  \ dotnet#prop('Goldenrod', 'Color'),
  \ dotnet#prop('Gray', 'Color'),
  \ dotnet#prop('Green', 'Color'),
  \ dotnet#prop('GreenYellow', 'Color'),
  \ dotnet#prop('Honeydew', 'Color'),
  \ dotnet#prop('HotPink', 'Color'),
  \ dotnet#prop('IndianRed', 'Color'),
  \ dotnet#prop('Indigo', 'Color'),
  \ dotnet#prop('Ivory', 'Color'),
  \ dotnet#prop('Khaki', 'Color'),
  \ dotnet#prop('Lavender', 'Color'),
  \ dotnet#prop('LavenderBlush', 'Color'),
  \ dotnet#prop('LawnGreen', 'Color'),
  \ dotnet#prop('LemonChiffon', 'Color'),
  \ dotnet#prop('LightBlue', 'Color'),
  \ dotnet#prop('LightCoral', 'Color'),
  \ dotnet#prop('LightCyan', 'Color'),
  \ dotnet#prop('LightGoldenrodYellow', 'Color'),
  \ dotnet#prop('LightGreen', 'Color'),
  \ dotnet#prop('LightGray', 'Color'),
  \ dotnet#prop('LightPink', 'Color'),
  \ dotnet#prop('LightSalmon', 'Color'),
  \ dotnet#prop('LightSeaGreen', 'Color'),
  \ dotnet#prop('LightSkyBlue', 'Color'),
  \ dotnet#prop('LightSlateGray', 'Color'),
  \ dotnet#prop('LightSteelBlue', 'Color'),
  \ dotnet#prop('LightYellow', 'Color'),
  \ dotnet#prop('Lime', 'Color'),
  \ dotnet#prop('LimeGreen', 'Color'),
  \ dotnet#prop('Linen', 'Color'),
  \ dotnet#prop('Magenta', 'Color'),
  \ dotnet#prop('Maroon', 'Color'),
  \ dotnet#prop('MediumAquamarine', 'Color'),
  \ dotnet#prop('MediumBlue', 'Color'),
  \ dotnet#prop('MediumOrchid', 'Color'),
  \ dotnet#prop('MediumPurple', 'Color'),
  \ dotnet#prop('MediumSeaGreen', 'Color'),
  \ dotnet#prop('MediumSlateBlue', 'Color'),
  \ dotnet#prop('MediumSpringGreen', 'Color'),
  \ dotnet#prop('MediumTurquoise', 'Color'),
  \ dotnet#prop('MediumVioletRed', 'Color'),
  \ dotnet#prop('MidnightBlue', 'Color'),
  \ dotnet#prop('MintCream', 'Color'),
  \ dotnet#prop('MistyRose', 'Color'),
  \ dotnet#prop('Moccasin', 'Color'),
  \ dotnet#prop('NavajoWhite', 'Color'),
  \ dotnet#prop('Navy', 'Color'),
  \ dotnet#prop('OldLace', 'Color'),
  \ dotnet#prop('Olive', 'Color'),
  \ dotnet#prop('OliveDrab', 'Color'),
  \ dotnet#prop('Orange', 'Color'),
  \ dotnet#prop('OrangeRed', 'Color'),
  \ dotnet#prop('Orchid', 'Color'),
  \ dotnet#prop('PaleGoldenrod', 'Color'),
  \ dotnet#prop('PaleGreen', 'Color'),
  \ dotnet#prop('PaleTurquoise', 'Color'),
  \ dotnet#prop('PaleVioletRed', 'Color'),
  \ dotnet#prop('PapayaWhip', 'Color'),
  \ dotnet#prop('PeachPuff', 'Color'),
  \ dotnet#prop('Peru', 'Color'),
  \ dotnet#prop('Pink', 'Color'),
  \ dotnet#prop('Plum', 'Color'),
  \ dotnet#prop('PowderBlue', 'Color'),
  \ dotnet#prop('Purple', 'Color'),
  \ dotnet#prop('Red', 'Color'),
  \ dotnet#prop('RosyBrown', 'Color'),
  \ dotnet#prop('RoyalBlue', 'Color'),
  \ dotnet#prop('SaddleBrown', 'Color'),
  \ dotnet#prop('Salmon', 'Color'),
  \ dotnet#prop('SandyBrown', 'Color'),
  \ dotnet#prop('SeaGreen', 'Color'),
  \ dotnet#prop('SeaShell', 'Color'),
  \ dotnet#prop('Sienna', 'Color'),
  \ dotnet#prop('Silver', 'Color'),
  \ dotnet#prop('SkyBlue', 'Color'),
  \ dotnet#prop('SlateBlue', 'Color'),
  \ dotnet#prop('SlateGray', 'Color'),
  \ dotnet#prop('Snow', 'Color'),
  \ dotnet#prop('SpringGreen', 'Color'),
  \ dotnet#prop('SteelBlue', 'Color'),
  \ dotnet#prop('Tan', 'Color'),
  \ dotnet#prop('Teal', 'Color'),
  \ dotnet#prop('Thistle', 'Color'),
  \ dotnet#prop('Tomato', 'Color'),
  \ dotnet#prop('Turquoise', 'Color'),
  \ dotnet#prop('Violet', 'Color'),
  \ dotnet#prop('Wheat', 'Color'),
  \ dotnet#prop('White', 'Color'),
  \ dotnet#prop('WhiteSmoke', 'Color'),
  \ dotnet#prop('Yellow', 'Color'),
  \ dotnet#prop('YellowGreen', 'Color'),
  \ dotnet#prop('R', 'uint8'),
  \ dotnet#prop('G', 'uint8'),
  \ dotnet#prop('B', 'uint8'),
  \ dotnet#prop('A', 'uint8'),
  \ dotnet#prop('IsKnownColor', 'bool'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('IsNamedColor', 'bool'),
  \ dotnet#prop('IsSystemColor', 'bool'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('ColorConverter', 'TypeConverter', [ 
  \ dotnet#method('ColorConverter(', ')', 'void'),
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('GetStandardValues(', 'class ITypeDescriptorContext context)', 'TypeConverter/StandardValuesCollection'),
  \ dotnet#method('GetStandardValuesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('ColorConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('FontConverter', 'TypeConverter', [ 
  \ dotnet#method('FontConverter(', ')', 'void'),
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('GetStandardValues(', 'class ITypeDescriptorContext context)', 'TypeConverter/StandardValuesCollection'),
  \ dotnet#method('GetStandardValuesExclusive(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('GetStandardValuesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('FontConverter(', ')', 'void'),
  \ dotnet#method('GetStandardValues(', 'class ITypeDescriptorContext context)', 'TypeConverter/StandardValuesCollection'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('CreateInstance(', 'class ITypeDescriptorContext context, IDictionary propertyValues)', 'object'),
  \ dotnet#method('GetCreateInstanceSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('GetProperties(', 'class ITypeDescriptorContext context, object value, Attribute[] attributes)', 'PropertyDescriptorCollection'),
  \ dotnet#method('GetPropertiesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('FontConverter(', ')', 'void'),
  \ ])

call dotnet#class('Graphics', 'MarshalByRefObject', [ 
  \ dotnet#method('Graphics(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'native int callbackdata)', 'bool'),
  \ dotnet#method('BeginInvoke(', 'native int callbackdata, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'bool'),
  \ dotnet#method('Graphics(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'EmfPlusRecordType recordType, int32 flags, int32 dataSize, int data, PlayRecordCallback callbackData)', 'bool'),
  \ dotnet#method('BeginInvoke(', 'EmfPlusRecordType recordType, int32 flags, int32 dataSize, int data, PlayRecordCallback callbackData, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'bool'),
  \ dotnet#method('FromHdc(', 'native int hdc)', 'static Graphics'),
  \ dotnet#method('FromHdcInternal(', 'native int hdc)', 'static Graphics'),
  \ dotnet#method('FromHdc(', 'native int hdc, int hdevice)', 'static Graphics'),
  \ dotnet#method('FromHwnd(', 'native int hwnd)', 'static Graphics'),
  \ dotnet#method('FromHwndInternal(', 'native int hwnd)', 'static Graphics'),
  \ dotnet#method('FromImage(', 'class Image image)', 'static Graphics'),
  \ dotnet#method('GetHdc(', ')', 'int'),
  \ dotnet#method('ReleaseHdc(', 'native int hdc)', 'void'),
  \ dotnet#method('ReleaseHdc(', ')', 'void'),
  \ dotnet#method('ReleaseHdcInternal(', 'native int hdc)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Flush(', 'FlushIntention intention)', 'void'),
  \ dotnet#method('get_CompositingMode(', ')', 'CompositingMode'),
  \ dotnet#method('set_CompositingMode(', 'CompositingMode value)', 'void'),
  \ dotnet#method('get_RenderingOrigin(', ')', 'Point'),
  \ dotnet#method('set_RenderingOrigin(', 'Point value)', 'void'),
  \ dotnet#method('get_CompositingQuality(', ')', 'CompositingQuality'),
  \ dotnet#method('set_CompositingQuality(', 'CompositingQuality value)', 'void'),
  \ dotnet#method('get_TextRenderingHint(', ')', 'TextRenderingHint'),
  \ dotnet#method('set_TextRenderingHint(', 'TextRenderingHint value)', 'void'),
  \ dotnet#method('get_TextContrast(', ')', 'int32'),
  \ dotnet#method('set_TextContrast(', 'int32 value)', 'void'),
  \ dotnet#method('get_SmoothingMode(', ')', 'SmoothingMode'),
  \ dotnet#method('set_SmoothingMode(', 'SmoothingMode value)', 'void'),
  \ dotnet#method('get_PixelOffsetMode(', ')', 'PixelOffsetMode'),
  \ dotnet#method('set_PixelOffsetMode(', 'PixelOffsetMode value)', 'void'),
  \ dotnet#method('get_InterpolationMode(', ')', 'InterpolationMode'),
  \ dotnet#method('set_InterpolationMode(', 'InterpolationMode value)', 'void'),
  \ dotnet#method('get_Transform(', ')', 'Matrix'),
  \ dotnet#method('set_Transform(', 'class Matrix value)', 'void'),
  \ dotnet#method('get_PageUnit(', ')', 'GraphicsUnit'),
  \ dotnet#method('set_PageUnit(', 'GraphicsUnit value)', 'void'),
  \ dotnet#method('get_PageScale(', ')', 'float32'),
  \ dotnet#method('set_PageScale(', 'float32 value)', 'void'),
  \ dotnet#method('get_DpiX(', ')', 'float32'),
  \ dotnet#method('get_DpiY(', ')', 'float32'),
  \ dotnet#method('CopyFromScreen(', 'Point upperLeftSource, Point upperLeftDestination, Size blockRegionSize)', 'void'),
  \ dotnet#method('CopyFromScreen(', 'int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, Size blockRegionSize)', 'void'),
  \ dotnet#method('CopyFromScreen(', 'Point upperLeftSource, Point upperLeftDestination, Size blockRegionSize, CopyPixelOperation copyPixelOperation)', 'void'),
  \ dotnet#method('CopyFromScreen(', 'int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, Size blockRegionSize, CopyPixelOperation copyPixelOperation)', 'void'),
  \ dotnet#method('ResetTransform(', ')', 'void'),
  \ dotnet#method('MultiplyTransform(', 'class Matrix matrix)', 'void'),
  \ dotnet#method('MultiplyTransform(', 'class Matrix matrix, MatrixOrder order)', 'void'),
  \ dotnet#method('TranslateTransform(', 'float32 dx, float32 dy)', 'void'),
  \ dotnet#method('TranslateTransform(', 'float32 dx, float32 dy, MatrixOrder order)', 'void'),
  \ dotnet#method('ScaleTransform(', 'float32 sx, float32 sy)', 'void'),
  \ dotnet#method('ScaleTransform(', 'float32 sx, float32 sy, MatrixOrder order)', 'void'),
  \ dotnet#method('RotateTransform(', 'float32 angle)', 'void'),
  \ dotnet#method('RotateTransform(', 'float32 angle, MatrixOrder order)', 'void'),
  \ dotnet#method('TransformPoints(', 'CoordinateSpace destSpace, CoordinateSpace srcSpace, PointF[] pts)', 'void'),
  \ dotnet#method('TransformPoints(', 'CoordinateSpace destSpace, CoordinateSpace srcSpace, Point[] pts)', 'void'),
  \ dotnet#method('GetNearestColor(', 'Color color)', 'Color'),
  \ dotnet#method('DrawLine(', 'class Pen pen, float32 x1, float32 y1, float32 x2, float32 y2)', 'void'),
  \ dotnet#method('DrawLine(', 'class Pen pen, PointF pt1, PointF pt2)', 'void'),
  \ dotnet#method('DrawLines(', 'class Pen pen, PointF[] points)', 'void'),
  \ dotnet#method('DrawLine(', 'class Pen pen, int32 x1, int32 y1, int32 x2, int32 y2)', 'void'),
  \ dotnet#method('DrawLine(', 'class Pen pen, Point pt1, Point pt2)', 'void'),
  \ dotnet#method('DrawLines(', 'class Pen pen, Point[] points)', 'void'),
  \ dotnet#method('DrawArc(', 'class Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle)', 'void'),
  \ dotnet#method('DrawArc(', 'class Pen pen, RectangleF rect, float32 startAngle, float32 sweepAngle)', 'void'),
  \ dotnet#method('DrawArc(', 'class Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle)', 'void'),
  \ dotnet#method('DrawArc(', 'class Pen pen, Rectangle rect, float32 startAngle, float32 sweepAngle)', 'void'),
  \ dotnet#method('DrawBezier(', 'class Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4)', 'void'),
  \ dotnet#method('DrawBezier(', 'class Pen pen, PointF pt1, PointF pt2, PointF pt3, PointF pt4)', 'void'),
  \ dotnet#method('DrawBeziers(', 'class Pen pen, PointF[] points)', 'void'),
  \ dotnet#method('DrawBezier(', 'class Pen pen, Point pt1, Point pt2, Point pt3, Point pt4)', 'void'),
  \ dotnet#method('DrawBeziers(', 'class Pen pen, Point[] points)', 'void'),
  \ dotnet#method('DrawRectangle(', 'class Pen pen, Rectangle rect)', 'void'),
  \ dotnet#method('DrawRectangle(', 'class Pen pen, float32 x, float32 y, float32 width, float32 height)', 'void'),
  \ dotnet#method('DrawRectangle(', 'class Pen pen, int32 x, int32 y, int32 width, int32 height)', 'void'),
  \ dotnet#method('DrawRectangles(', 'class Pen pen, RectangleF[] rects)', 'void'),
  \ dotnet#method('DrawRectangles(', 'class Pen pen, Rectangle[] rects)', 'void'),
  \ dotnet#method('DrawEllipse(', 'class Pen pen, RectangleF rect)', 'void'),
  \ dotnet#method('DrawEllipse(', 'class Pen pen, float32 x, float32 y, float32 width, float32 height)', 'void'),
  \ dotnet#method('DrawEllipse(', 'class Pen pen, Rectangle rect)', 'void'),
  \ dotnet#method('DrawEllipse(', 'class Pen pen, int32 x, int32 y, int32 width, int32 height)', 'void'),
  \ dotnet#method('DrawPie(', 'class Pen pen, RectangleF rect, float32 startAngle, float32 sweepAngle)', 'void'),
  \ dotnet#method('DrawPie(', 'class Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle)', 'void'),
  \ dotnet#method('DrawPie(', 'class Pen pen, Rectangle rect, float32 startAngle, float32 sweepAngle)', 'void'),
  \ dotnet#method('DrawPie(', 'class Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle)', 'void'),
  \ dotnet#method('DrawPolygon(', 'class Pen pen, PointF[] points)', 'void'),
  \ dotnet#method('DrawPolygon(', 'class Pen pen, Point[] points)', 'void'),
  \ dotnet#method('DrawPath(', 'class Pen pen, GraphicsPath path)', 'void'),
  \ dotnet#method('DrawCurve(', 'class Pen pen, PointF[] points)', 'void'),
  \ dotnet#method('DrawCurve(', 'class Pen pen, PointF[] points, float32 tension)', 'void'),
  \ dotnet#method('DrawCurve(', 'class Pen pen, PointF[] points, int32 offset, int32 numberOfSegments)', 'void'),
  \ dotnet#method('DrawCurve(', 'class Pen pen, PointF[] points, int32 offset, int32 numberOfSegments, float32 tension)', 'void'),
  \ dotnet#method('DrawCurve(', 'class Pen pen, Point[] points)', 'void'),
  \ dotnet#method('DrawCurve(', 'class Pen pen, Point[] points, float32 tension)', 'void'),
  \ dotnet#method('DrawCurve(', 'class Pen pen, Point[] points, int32 offset, int32 numberOfSegments, float32 tension)', 'void'),
  \ dotnet#method('DrawClosedCurve(', 'class Pen pen, PointF[] points)', 'void'),
  \ dotnet#method('DrawClosedCurve(', 'class Pen pen, PointF[] points, float32 tension, FillMode fillmode)', 'void'),
  \ dotnet#method('DrawClosedCurve(', 'class Pen pen, Point[] points)', 'void'),
  \ dotnet#method('DrawClosedCurve(', 'class Pen pen, Point[] points, float32 tension, FillMode fillmode)', 'void'),
  \ dotnet#method('Clear(', 'Color color)', 'void'),
  \ dotnet#method('FillRectangle(', 'class Brush brush, RectangleF rect)', 'void'),
  \ dotnet#method('FillRectangle(', 'class Brush brush, float32 x, float32 y, float32 width, float32 height)', 'void'),
  \ dotnet#method('FillRectangle(', 'class Brush brush, Rectangle rect)', 'void'),
  \ dotnet#method('FillRectangle(', 'class Brush brush, int32 x, int32 y, int32 width, int32 height)', 'void'),
  \ dotnet#method('FillRectangles(', 'class Brush brush, RectangleF[] rects)', 'void'),
  \ dotnet#method('FillRectangles(', 'class Brush brush, Rectangle[] rects)', 'void'),
  \ dotnet#method('FillPolygon(', 'class Brush brush, PointF[] points)', 'void'),
  \ dotnet#method('FillPolygon(', 'class Brush brush, PointF[] points, FillMode fillMode)', 'void'),
  \ dotnet#method('FillPolygon(', 'class Brush brush, Point[] points)', 'void'),
  \ dotnet#method('FillPolygon(', 'class Brush brush, Point[] points, FillMode fillMode)', 'void'),
  \ dotnet#method('FillEllipse(', 'class Brush brush, RectangleF rect)', 'void'),
  \ dotnet#method('FillEllipse(', 'class Brush brush, float32 x, float32 y, float32 width, float32 height)', 'void'),
  \ dotnet#method('FillEllipse(', 'class Brush brush, Rectangle rect)', 'void'),
  \ dotnet#method('FillEllipse(', 'class Brush brush, int32 x, int32 y, int32 width, int32 height)', 'void'),
  \ dotnet#method('FillPie(', 'class Brush brush, Rectangle rect, float32 startAngle, float32 sweepAngle)', 'void'),
  \ dotnet#method('FillPie(', 'class Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle)', 'void'),
  \ dotnet#method('FillPie(', 'class Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle)', 'void'),
  \ dotnet#method('FillPath(', 'class Brush brush, GraphicsPath path)', 'void'),
  \ dotnet#method('FillClosedCurve(', 'class Brush brush, PointF[] points)', 'void'),
  \ dotnet#method('FillClosedCurve(', 'class Brush brush, PointF[] points, FillMode fillmode)', 'void'),
  \ dotnet#method('FillClosedCurve(', 'class Brush brush, PointF[] points, FillMode fillmode, float32 tension)', 'void'),
  \ dotnet#method('FillClosedCurve(', 'class Brush brush, Point[] points)', 'void'),
  \ dotnet#method('FillClosedCurve(', 'class Brush brush, Point[] points, FillMode fillmode)', 'void'),
  \ dotnet#method('FillClosedCurve(', 'class Brush brush, Point[] points, FillMode fillmode, float32 tension)', 'void'),
  \ dotnet#method('FillRegion(', 'class Brush brush, Region region)', 'void'),
  \ dotnet#method('DrawString(', 'string s, Font font, Brush brush, float32 x, float32 y)', 'void'),
  \ dotnet#method('DrawString(', 'string s, Font font, Brush brush, PointF point)', 'void'),
  \ dotnet#method('DrawString(', 'string s, Font font, Brush brush, float32 x, float32 y, StringFormat format)', 'void'),
  \ dotnet#method('DrawString(', 'string s, Font font, Brush brush, PointF point, StringFormat format)', 'void'),
  \ dotnet#method('DrawString(', 'string s, Font font, Brush brush, RectangleF layoutRectangle)', 'void'),
  \ dotnet#method('DrawString(', 'string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format)', 'void'),
  \ dotnet#method('MeasureString(', 'string text, Font font, SizeF layoutArea, StringFormat stringFormat, [out] int32& charactersFitted, [out] int32& linesFilled)', 'SizeF'),
  \ dotnet#method('MeasureString(', 'string text, Font font, PointF origin, StringFormat stringFormat)', 'SizeF'),
  \ dotnet#method('MeasureString(', 'string text, Font font, SizeF layoutArea)', 'SizeF'),
  \ dotnet#method('MeasureString(', 'string text, Font font, SizeF layoutArea, StringFormat stringFormat)', 'SizeF'),
  \ dotnet#method('MeasureString(', 'string text, Font font)', 'SizeF'),
  \ dotnet#method('MeasureString(', 'string text, Font font, int32 width)', 'SizeF'),
  \ dotnet#method('MeasureString(', 'string text, Font font, int32 width, StringFormat format)', 'SizeF'),
  \ dotnet#method('MeasureCharacterRanges(', 'string text, Font font, RectangleF layoutRect, StringFormat stringFormat)', 'Region[]'),
  \ dotnet#method('DrawIcon(', 'class Icon icon, int32 x, int32 y)', 'void'),
  \ dotnet#method('DrawIcon(', 'class Icon icon, Rectangle targetRect)', 'void'),
  \ dotnet#method('DrawIconUnstretched(', 'class Icon icon, Rectangle targetRect)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, PointF point)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, float32 x, float32 y)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, RectangleF rect)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, float32 x, float32 y, float32 width, float32 height)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Point point)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, int32 x, int32 y)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle rect)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, int32 x, int32 y, int32 width, int32 height)', 'void'),
  \ dotnet#method('DrawImageUnscaled(', 'class Image image, Point point)', 'void'),
  \ dotnet#method('DrawImageUnscaled(', 'class Image image, int32 x, int32 y)', 'void'),
  \ dotnet#method('DrawImageUnscaled(', 'class Image image, Rectangle rect)', 'void'),
  \ dotnet#method('DrawImageUnscaled(', 'class Image image, int32 x, int32 y, int32 width, int32 height)', 'void'),
  \ dotnet#method('DrawImageUnscaledAndClipped(', 'class Image image, Rectangle rect)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, PointF[] destPoints)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Point[] destPoints)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, float32 x, float32 y, RectangleF srcRect, GraphicsUnit srcUnit)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, int32 x, int32 y, Rectangle srcRect, GraphicsUnit srcUnit)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, RectangleF destRect, RectangleF srcRect, GraphicsUnit srcUnit)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle destRect, Rectangle srcRect, GraphicsUnit srcUnit)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, Graphics/DrawImageAbort callback)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, Graphics/DrawImageAbort callback, int32 callbackData)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, Graphics/DrawImageAbort callback)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, Graphics/DrawImageAbort callback, int32 callbackData)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, GraphicsUnit srcUnit)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, Graphics/DrawImageAbort callback)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, Graphics/DrawImageAbort callback, int callbackData)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, GraphicsUnit srcUnit)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr, Graphics/DrawImageAbort callback)', 'void'),
  \ dotnet#method('DrawImage(', 'class Image image, Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, Graphics/DrawImageAbort callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF destPoint, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF destPoint, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF destPoint, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point destPoint, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point destPoint, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point destPoint, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, RectangleF destRect, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, RectangleF destRect, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, RectangleF destRect, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Rectangle destRect, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Rectangle destRect, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Rectangle destRect, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF[] destPoints, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF[] destPoints, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF[] destPoints, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point[] destPoints, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point[] destPoints, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point[] destPoints, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF destPoint, RectangleF srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF destPoint, RectangleF srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF destPoint, RectangleF srcRect, GraphicsUnit unit, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point destPoint, Rectangle srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point destPoint, Rectangle srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point destPoint, Rectangle srcRect, GraphicsUnit unit, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, RectangleF destRect, RectangleF srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, RectangleF destRect, RectangleF srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, RectangleF destRect, RectangleF srcRect, GraphicsUnit unit, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Rectangle destRect, Rectangle srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Rectangle destRect, Rectangle srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Rectangle destRect, Rectangle srcRect, GraphicsUnit unit, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, PointF[] destPoints, RectangleF srcRect, GraphicsUnit unit, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, Graphics/EnumerateMetafileProc callback, int callbackData)', 'void'),
  \ dotnet#method('EnumerateMetafile(', 'class Metafile metafile, Point[] destPoints, Rectangle srcRect, GraphicsUnit unit, Graphics/EnumerateMetafileProc callback, int callbackData, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('SetClip(', 'class Graphics g)', 'void'),
  \ dotnet#method('SetClip(', 'class Graphics g, CombineMode combineMode)', 'void'),
  \ dotnet#method('SetClip(', 'Rectangle rect)', 'void'),
  \ dotnet#method('SetClip(', 'Rectangle rect, CombineMode combineMode)', 'void'),
  \ dotnet#method('SetClip(', 'RectangleF rect)', 'void'),
  \ dotnet#method('SetClip(', 'RectangleF rect, CombineMode combineMode)', 'void'),
  \ dotnet#method('SetClip(', 'class GraphicsPath path)', 'void'),
  \ dotnet#method('SetClip(', 'class GraphicsPath path, CombineMode combineMode)', 'void'),
  \ dotnet#method('SetClip(', 'class Region region, CombineMode combineMode)', 'void'),
  \ dotnet#method('IntersectClip(', 'Rectangle rect)', 'void'),
  \ dotnet#method('IntersectClip(', 'RectangleF rect)', 'void'),
  \ dotnet#method('IntersectClip(', 'class Region region)', 'void'),
  \ dotnet#method('ExcludeClip(', 'Rectangle rect)', 'void'),
  \ dotnet#method('ExcludeClip(', 'class Region region)', 'void'),
  \ dotnet#method('ResetClip(', ')', 'void'),
  \ dotnet#method('TranslateClip(', 'float32 dx, float32 dy)', 'void'),
  \ dotnet#method('TranslateClip(', 'int32 dx, int32 dy)', 'void'),
  \ dotnet#method('GetContextInfo(', ')', 'object'),
  \ dotnet#method('get_Clip(', ')', 'Region'),
  \ dotnet#method('set_Clip(', 'class Region value)', 'void'),
  \ dotnet#method('get_ClipBounds(', ')', 'RectangleF'),
  \ dotnet#method('get_IsClipEmpty(', ')', 'bool'),
  \ dotnet#method('get_VisibleClipBounds(', ')', 'RectangleF'),
  \ dotnet#method('get_IsVisibleClipEmpty(', ')', 'bool'),
  \ dotnet#method('IsVisible(', 'int32 x, int32 y)', 'bool'),
  \ dotnet#method('IsVisible(', 'Point point)', 'bool'),
  \ dotnet#method('IsVisible(', 'float32 x, float32 y)', 'bool'),
  \ dotnet#method('IsVisible(', 'PointF point)', 'bool'),
  \ dotnet#method('IsVisible(', 'int32 x, int32 y, int32 width, int32 height)', 'bool'),
  \ dotnet#method('IsVisible(', 'Rectangle rect)', 'bool'),
  \ dotnet#method('IsVisible(', 'float32 x, float32 y, float32 width, float32 height)', 'bool'),
  \ dotnet#method('IsVisible(', 'RectangleF rect)', 'bool'),
  \ dotnet#method('Save(', ')', 'GraphicsState'),
  \ dotnet#method('Restore(', 'class GraphicsState gstate)', 'void'),
  \ dotnet#method('BeginContainer(', 'RectangleF dstrect, RectangleF srcrect, GraphicsUnit unit)', 'GraphicsContainer'),
  \ dotnet#method('BeginContainer(', ')', 'GraphicsContainer'),
  \ dotnet#method('EndContainer(', 'class GraphicsContainer container)', 'void'),
  \ dotnet#method('BeginContainer(', 'Rectangle dstrect, Rectangle srcrect, GraphicsUnit unit)', 'GraphicsContainer'),
  \ dotnet#method('AddMetafileComment(', 'uint8[] data)', 'void'),
  \ dotnet#method('GetHalftonePalette(', ')', 'static int'),
  \ dotnet#method('Graphics(', ')', 'static void .'),
  \ dotnet#prop('CompositingMode', 'CompositingMode'),
  \ dotnet#prop('RenderingOrigin', 'Point'),
  \ dotnet#prop('CompositingQuality', 'CompositingQuality'),
  \ dotnet#prop('TextRenderingHint', 'TextRenderingHint'),
  \ dotnet#prop('TextContrast', 'int32'),
  \ dotnet#prop('SmoothingMode', 'SmoothingMode'),
  \ dotnet#prop('PixelOffsetMode', 'PixelOffsetMode'),
  \ dotnet#prop('InterpolationMode', 'InterpolationMode'),
  \ dotnet#prop('Transform', 'Matrix'),
  \ dotnet#prop('PageUnit', 'GraphicsUnit'),
  \ dotnet#prop('PageScale', 'float32'),
  \ dotnet#prop('DpiX', 'float32'),
  \ dotnet#prop('DpiY', 'float32'),
  \ dotnet#prop('Clip', 'Region'),
  \ dotnet#prop('ClipBounds', 'RectangleF'),
  \ dotnet#prop('IsClipEmpty', 'bool'),
  \ dotnet#prop('VisibleClipBounds', 'RectangleF'),
  \ dotnet#prop('IsVisibleClipEmpty', 'bool'),
  \ ])

call dotnet#class('Icon', 'MarshalByRefObject', [ 
  \ dotnet#method('Icon(', 'string fileName)', 'void'),
  \ dotnet#method('Icon(', 'string fileName, Size size)', 'void'),
  \ dotnet#method('Icon(', 'string fileName, int32 width, int32 height)', 'void'),
  \ dotnet#method('Icon(', 'class Icon original, Size size)', 'void'),
  \ dotnet#method('Icon(', 'class Icon original, int32 width, int32 height)', 'void'),
  \ dotnet#method('Icon(', 'class Type type, string resource)', 'void'),
  \ dotnet#method('Icon(', 'class Stream stream)', 'void'),
  \ dotnet#method('Icon(', 'class Stream stream, Size size)', 'void'),
  \ dotnet#method('Icon(', 'class Stream stream, int32 width, int32 height)', 'void'),
  \ dotnet#method('ExtractAssociatedIcon(', 'string filePath)', 'static Icon'),
  \ dotnet#method('get_Handle(', ')', 'int'),
  \ dotnet#method('get_Height(', ')', 'int32'),
  \ dotnet#method('get_Size(', ')', 'Size'),
  \ dotnet#method('get_Width(', ')', 'int32'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('FromHandle(', 'native int handle)', 'static Icon'),
  \ dotnet#method('Save(', 'class Stream outputStream)', 'void'),
  \ dotnet#method('ToBitmap(', ')', 'Bitmap'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo si, StreamingContext context)', 'void '),
  \ dotnet#method('Icon(', ')', 'void'),
  \ dotnet#prop('Handle', 'int'),
  \ dotnet#prop('Height', 'int32'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('Width', 'int32'),
  \ ])

call dotnet#class('IconConverter', 'ExpandableObjectConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('IconConverter(', ')', 'void'),
  \ ])

call dotnet#class('ImageAnimator', 'Object', [ 
  \ dotnet#method('UpdateFrames(', 'class Image image)', 'static void'),
  \ dotnet#method('UpdateFrames(', ')', 'static void'),
  \ dotnet#method('Animate(', 'class Image image, EventHandler onFrameChangedHandler)', 'static void'),
  \ dotnet#method('CanAnimate(', 'class Image image)', 'static bool'),
  \ dotnet#method('StopAnimate(', 'class Image image, EventHandler onFrameChangedHandler)', 'static void'),
  \ dotnet#method('ImageAnimator(', ')', 'void'),
  \ dotnet#method('ImageAnimator(', ')', 'static void .'),
  \ ])

call dotnet#class('ImageConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('GetProperties(', 'class ITypeDescriptorContext context, object value, Attribute[] attributes)', 'PropertyDescriptorCollection'),
  \ dotnet#method('GetPropertiesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('ImageConverter(', ')', 'void'),
  \ ])

call dotnet#class('Pen', 'MarshalByRefObject', [ 
  \ dotnet#method('Pen(', 'Color color)', 'void'),
  \ dotnet#method('Pen(', 'Color color, float32 width)', 'void'),
  \ dotnet#method('Pen(', 'class Brush brush)', 'void'),
  \ dotnet#method('Pen(', 'class Brush brush, float32 width)', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('get_Width(', ')', 'float32'),
  \ dotnet#method('set_Width(', 'float32 value)', 'void'),
  \ dotnet#method('SetLineCap(', 'LineCap startCap, LineCap endCap, DashCap dashCap)', 'void'),
  \ dotnet#method('get_StartCap(', ')', 'LineCap'),
  \ dotnet#method('set_StartCap(', 'LineCap value)', 'void'),
  \ dotnet#method('get_EndCap(', ')', 'LineCap'),
  \ dotnet#method('set_EndCap(', 'LineCap value)', 'void'),
  \ dotnet#method('get_DashCap(', ')', 'DashCap'),
  \ dotnet#method('set_DashCap(', 'DashCap value)', 'void'),
  \ dotnet#method('get_LineJoin(', ')', 'LineJoin'),
  \ dotnet#method('set_LineJoin(', 'LineJoin value)', 'void'),
  \ dotnet#method('get_CustomStartCap(', ')', 'CustomLineCap'),
  \ dotnet#method('set_CustomStartCap(', 'class CustomLineCap value)', 'void'),
  \ dotnet#method('get_CustomEndCap(', ')', 'CustomLineCap'),
  \ dotnet#method('set_CustomEndCap(', 'class CustomLineCap value)', 'void'),
  \ dotnet#method('get_MiterLimit(', ')', 'float32'),
  \ dotnet#method('set_MiterLimit(', 'float32 value)', 'void'),
  \ dotnet#method('get_Alignment(', ')', 'PenAlignment'),
  \ dotnet#method('set_Alignment(', 'PenAlignment value)', 'void'),
  \ dotnet#method('get_Transform(', ')', 'Matrix'),
  \ dotnet#method('set_Transform(', 'class Matrix value)', 'void'),
  \ dotnet#method('ResetTransform(', ')', 'void'),
  \ dotnet#method('MultiplyTransform(', 'class Matrix matrix)', 'void'),
  \ dotnet#method('MultiplyTransform(', 'class Matrix matrix, MatrixOrder order)', 'void'),
  \ dotnet#method('TranslateTransform(', 'float32 dx, float32 dy)', 'void'),
  \ dotnet#method('TranslateTransform(', 'float32 dx, float32 dy, MatrixOrder order)', 'void'),
  \ dotnet#method('ScaleTransform(', 'float32 sx, float32 sy)', 'void'),
  \ dotnet#method('ScaleTransform(', 'float32 sx, float32 sy, MatrixOrder order)', 'void'),
  \ dotnet#method('RotateTransform(', 'float32 angle)', 'void'),
  \ dotnet#method('RotateTransform(', 'float32 angle, MatrixOrder order)', 'void'),
  \ dotnet#method('get_PenType(', ')', 'PenType'),
  \ dotnet#method('get_Color(', ')', 'Color'),
  \ dotnet#method('set_Color(', 'Color value)', 'void'),
  \ dotnet#method('get_Brush(', ')', 'Brush'),
  \ dotnet#method('set_Brush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_DashStyle(', ')', 'DashStyle'),
  \ dotnet#method('set_DashStyle(', 'DashStyle value)', 'void'),
  \ dotnet#method('get_DashOffset(', ')', 'float32'),
  \ dotnet#method('set_DashOffset(', 'float32 value)', 'void'),
  \ dotnet#method('get_DashPattern(', ')', 'float32[]'),
  \ dotnet#method('set_DashPattern(', 'float32[] value)', 'void'),
  \ dotnet#method('get_CompoundArray(', ')', 'float32[]'),
  \ dotnet#method('set_CompoundArray(', 'float32[] value)', 'void'),
  \ dotnet#prop('Width', 'float32'),
  \ dotnet#prop('StartCap', 'LineCap'),
  \ dotnet#prop('EndCap', 'LineCap'),
  \ dotnet#prop('DashCap', 'DashCap'),
  \ dotnet#prop('LineJoin', 'LineJoin'),
  \ dotnet#prop('CustomStartCap', 'CustomLineCap'),
  \ dotnet#prop('CustomEndCap', 'CustomLineCap'),
  \ dotnet#prop('MiterLimit', 'float32'),
  \ dotnet#prop('Alignment', 'PenAlignment'),
  \ dotnet#prop('Transform', 'Matrix'),
  \ dotnet#prop('PenType', 'PenType'),
  \ dotnet#prop('Color', 'Color'),
  \ dotnet#prop('Brush', 'Brush'),
  \ dotnet#prop('DashStyle', 'DashStyle'),
  \ dotnet#prop('DashOffset', 'float32'),
  \ dotnet#prop('DashPattern', 'float32[]'),
  \ dotnet#prop('CompoundArray', 'float32[]'),
  \ ])

call dotnet#class('Pens', 'Object', [ 
  \ dotnet#method('get_Transparent(', ')', 'static Pen'),
  \ dotnet#method('get_AliceBlue(', ')', 'static Pen'),
  \ dotnet#method('get_AntiqueWhite(', ')', 'static Pen'),
  \ dotnet#method('get_Aqua(', ')', 'static Pen'),
  \ dotnet#method('get_Aquamarine(', ')', 'static Pen'),
  \ dotnet#method('get_Azure(', ')', 'static Pen'),
  \ dotnet#method('get_Beige(', ')', 'static Pen'),
  \ dotnet#method('get_Bisque(', ')', 'static Pen'),
  \ dotnet#method('get_Black(', ')', 'static Pen'),
  \ dotnet#method('get_BlanchedAlmond(', ')', 'static Pen'),
  \ dotnet#method('get_Blue(', ')', 'static Pen'),
  \ dotnet#method('get_BlueViolet(', ')', 'static Pen'),
  \ dotnet#method('get_Brown(', ')', 'static Pen'),
  \ dotnet#method('get_BurlyWood(', ')', 'static Pen'),
  \ dotnet#method('get_CadetBlue(', ')', 'static Pen'),
  \ dotnet#method('get_Chartreuse(', ')', 'static Pen'),
  \ dotnet#method('get_Chocolate(', ')', 'static Pen'),
  \ dotnet#method('get_Coral(', ')', 'static Pen'),
  \ dotnet#method('get_CornflowerBlue(', ')', 'static Pen'),
  \ dotnet#method('get_Cornsilk(', ')', 'static Pen'),
  \ dotnet#method('get_Crimson(', ')', 'static Pen'),
  \ dotnet#method('get_Cyan(', ')', 'static Pen'),
  \ dotnet#method('get_DarkBlue(', ')', 'static Pen'),
  \ dotnet#method('get_DarkCyan(', ')', 'static Pen'),
  \ dotnet#method('get_DarkGoldenrod(', ')', 'static Pen'),
  \ dotnet#method('get_DarkGray(', ')', 'static Pen'),
  \ dotnet#method('get_DarkGreen(', ')', 'static Pen'),
  \ dotnet#method('get_DarkKhaki(', ')', 'static Pen'),
  \ dotnet#method('get_DarkMagenta(', ')', 'static Pen'),
  \ dotnet#method('get_DarkOliveGreen(', ')', 'static Pen'),
  \ dotnet#method('get_DarkOrange(', ')', 'static Pen'),
  \ dotnet#method('get_DarkOrchid(', ')', 'static Pen'),
  \ dotnet#method('get_DarkRed(', ')', 'static Pen'),
  \ dotnet#method('get_DarkSalmon(', ')', 'static Pen'),
  \ dotnet#method('get_DarkSeaGreen(', ')', 'static Pen'),
  \ dotnet#method('get_DarkSlateBlue(', ')', 'static Pen'),
  \ dotnet#method('get_DarkSlateGray(', ')', 'static Pen'),
  \ dotnet#method('get_DarkTurquoise(', ')', 'static Pen'),
  \ dotnet#method('get_DarkViolet(', ')', 'static Pen'),
  \ dotnet#method('get_DeepPink(', ')', 'static Pen'),
  \ dotnet#method('get_DeepSkyBlue(', ')', 'static Pen'),
  \ dotnet#method('get_DimGray(', ')', 'static Pen'),
  \ dotnet#method('get_DodgerBlue(', ')', 'static Pen'),
  \ dotnet#method('get_Firebrick(', ')', 'static Pen'),
  \ dotnet#method('get_FloralWhite(', ')', 'static Pen'),
  \ dotnet#method('get_ForestGreen(', ')', 'static Pen'),
  \ dotnet#method('get_Fuchsia(', ')', 'static Pen'),
  \ dotnet#method('get_Gainsboro(', ')', 'static Pen'),
  \ dotnet#method('get_GhostWhite(', ')', 'static Pen'),
  \ dotnet#method('get_Gold(', ')', 'static Pen'),
  \ dotnet#method('get_Goldenrod(', ')', 'static Pen'),
  \ dotnet#method('get_Gray(', ')', 'static Pen'),
  \ dotnet#method('get_Green(', ')', 'static Pen'),
  \ dotnet#method('get_GreenYellow(', ')', 'static Pen'),
  \ dotnet#method('get_Honeydew(', ')', 'static Pen'),
  \ dotnet#method('get_HotPink(', ')', 'static Pen'),
  \ dotnet#method('get_IndianRed(', ')', 'static Pen'),
  \ dotnet#method('get_Indigo(', ')', 'static Pen'),
  \ dotnet#method('get_Ivory(', ')', 'static Pen'),
  \ dotnet#method('get_Khaki(', ')', 'static Pen'),
  \ dotnet#method('get_Lavender(', ')', 'static Pen'),
  \ dotnet#method('get_LavenderBlush(', ')', 'static Pen'),
  \ dotnet#method('get_LawnGreen(', ')', 'static Pen'),
  \ dotnet#method('get_LemonChiffon(', ')', 'static Pen'),
  \ dotnet#method('get_LightBlue(', ')', 'static Pen'),
  \ dotnet#method('get_LightCoral(', ')', 'static Pen'),
  \ dotnet#method('get_LightCyan(', ')', 'static Pen'),
  \ dotnet#method('get_LightGoldenrodYellow(', ')', 'static Pen'),
  \ dotnet#method('get_LightGreen(', ')', 'static Pen'),
  \ dotnet#method('get_LightGray(', ')', 'static Pen'),
  \ dotnet#method('get_LightPink(', ')', 'static Pen'),
  \ dotnet#method('get_LightSalmon(', ')', 'static Pen'),
  \ dotnet#method('get_LightSeaGreen(', ')', 'static Pen'),
  \ dotnet#method('get_LightSkyBlue(', ')', 'static Pen'),
  \ dotnet#method('get_LightSlateGray(', ')', 'static Pen'),
  \ dotnet#method('get_LightSteelBlue(', ')', 'static Pen'),
  \ dotnet#method('get_LightYellow(', ')', 'static Pen'),
  \ dotnet#method('get_Lime(', ')', 'static Pen'),
  \ dotnet#method('get_LimeGreen(', ')', 'static Pen'),
  \ dotnet#method('get_Linen(', ')', 'static Pen'),
  \ dotnet#method('get_Magenta(', ')', 'static Pen'),
  \ dotnet#method('get_Maroon(', ')', 'static Pen'),
  \ dotnet#method('get_MediumAquamarine(', ')', 'static Pen'),
  \ dotnet#method('get_MediumBlue(', ')', 'static Pen'),
  \ dotnet#method('get_MediumOrchid(', ')', 'static Pen'),
  \ dotnet#method('get_MediumPurple(', ')', 'static Pen'),
  \ dotnet#method('get_MediumSeaGreen(', ')', 'static Pen'),
  \ dotnet#method('get_MediumSlateBlue(', ')', 'static Pen'),
  \ dotnet#method('get_MediumSpringGreen(', ')', 'static Pen'),
  \ dotnet#method('get_MediumTurquoise(', ')', 'static Pen'),
  \ dotnet#method('get_MediumVioletRed(', ')', 'static Pen'),
  \ dotnet#method('get_MidnightBlue(', ')', 'static Pen'),
  \ dotnet#method('get_MintCream(', ')', 'static Pen'),
  \ dotnet#method('get_MistyRose(', ')', 'static Pen'),
  \ dotnet#method('get_Moccasin(', ')', 'static Pen'),
  \ dotnet#method('get_NavajoWhite(', ')', 'static Pen'),
  \ dotnet#method('get_Navy(', ')', 'static Pen'),
  \ dotnet#method('get_OldLace(', ')', 'static Pen'),
  \ dotnet#method('get_Olive(', ')', 'static Pen'),
  \ dotnet#method('get_OliveDrab(', ')', 'static Pen'),
  \ dotnet#method('get_Orange(', ')', 'static Pen'),
  \ dotnet#method('get_OrangeRed(', ')', 'static Pen'),
  \ dotnet#method('get_Orchid(', ')', 'static Pen'),
  \ dotnet#method('get_PaleGoldenrod(', ')', 'static Pen'),
  \ dotnet#method('get_PaleGreen(', ')', 'static Pen'),
  \ dotnet#method('get_PaleTurquoise(', ')', 'static Pen'),
  \ dotnet#method('get_PaleVioletRed(', ')', 'static Pen'),
  \ dotnet#method('get_PapayaWhip(', ')', 'static Pen'),
  \ dotnet#method('get_PeachPuff(', ')', 'static Pen'),
  \ dotnet#method('get_Peru(', ')', 'static Pen'),
  \ dotnet#method('get_Pink(', ')', 'static Pen'),
  \ dotnet#method('get_Plum(', ')', 'static Pen'),
  \ dotnet#method('get_PowderBlue(', ')', 'static Pen'),
  \ dotnet#method('get_Purple(', ')', 'static Pen'),
  \ dotnet#method('get_Red(', ')', 'static Pen'),
  \ dotnet#method('get_RosyBrown(', ')', 'static Pen'),
  \ dotnet#method('get_RoyalBlue(', ')', 'static Pen'),
  \ dotnet#method('get_SaddleBrown(', ')', 'static Pen'),
  \ dotnet#method('get_Salmon(', ')', 'static Pen'),
  \ dotnet#method('get_SandyBrown(', ')', 'static Pen'),
  \ dotnet#method('get_SeaGreen(', ')', 'static Pen'),
  \ dotnet#method('get_SeaShell(', ')', 'static Pen'),
  \ dotnet#method('get_Sienna(', ')', 'static Pen'),
  \ dotnet#method('get_Silver(', ')', 'static Pen'),
  \ dotnet#method('get_SkyBlue(', ')', 'static Pen'),
  \ dotnet#method('get_SlateBlue(', ')', 'static Pen'),
  \ dotnet#method('get_SlateGray(', ')', 'static Pen'),
  \ dotnet#method('get_Snow(', ')', 'static Pen'),
  \ dotnet#method('get_SpringGreen(', ')', 'static Pen'),
  \ dotnet#method('get_SteelBlue(', ')', 'static Pen'),
  \ dotnet#method('get_Tan(', ')', 'static Pen'),
  \ dotnet#method('get_Teal(', ')', 'static Pen'),
  \ dotnet#method('get_Thistle(', ')', 'static Pen'),
  \ dotnet#method('get_Tomato(', ')', 'static Pen'),
  \ dotnet#method('get_Turquoise(', ')', 'static Pen'),
  \ dotnet#method('get_Violet(', ')', 'static Pen'),
  \ dotnet#method('get_Wheat(', ')', 'static Pen'),
  \ dotnet#method('get_White(', ')', 'static Pen'),
  \ dotnet#method('get_WhiteSmoke(', ')', 'static Pen'),
  \ dotnet#method('get_Yellow(', ')', 'static Pen'),
  \ dotnet#method('get_YellowGreen(', ')', 'static Pen'),
  \ dotnet#method('Pens(', ')', 'void'),
  \ dotnet#method('Pens(', ')', 'static void .'),
  \ dotnet#prop('Transparent', 'Pen'),
  \ dotnet#prop('AliceBlue', 'Pen'),
  \ dotnet#prop('AntiqueWhite', 'Pen'),
  \ dotnet#prop('Aqua', 'Pen'),
  \ dotnet#prop('Aquamarine', 'Pen'),
  \ dotnet#prop('Azure', 'Pen'),
  \ dotnet#prop('Beige', 'Pen'),
  \ dotnet#prop('Bisque', 'Pen'),
  \ dotnet#prop('Black', 'Pen'),
  \ dotnet#prop('BlanchedAlmond', 'Pen'),
  \ dotnet#prop('Blue', 'Pen'),
  \ dotnet#prop('BlueViolet', 'Pen'),
  \ dotnet#prop('Brown', 'Pen'),
  \ dotnet#prop('BurlyWood', 'Pen'),
  \ dotnet#prop('CadetBlue', 'Pen'),
  \ dotnet#prop('Chartreuse', 'Pen'),
  \ dotnet#prop('Chocolate', 'Pen'),
  \ dotnet#prop('Coral', 'Pen'),
  \ dotnet#prop('CornflowerBlue', 'Pen'),
  \ dotnet#prop('Cornsilk', 'Pen'),
  \ dotnet#prop('Crimson', 'Pen'),
  \ dotnet#prop('Cyan', 'Pen'),
  \ dotnet#prop('DarkBlue', 'Pen'),
  \ dotnet#prop('DarkCyan', 'Pen'),
  \ dotnet#prop('DarkGoldenrod', 'Pen'),
  \ dotnet#prop('DarkGray', 'Pen'),
  \ dotnet#prop('DarkGreen', 'Pen'),
  \ dotnet#prop('DarkKhaki', 'Pen'),
  \ dotnet#prop('DarkMagenta', 'Pen'),
  \ dotnet#prop('DarkOliveGreen', 'Pen'),
  \ dotnet#prop('DarkOrange', 'Pen'),
  \ dotnet#prop('DarkOrchid', 'Pen'),
  \ dotnet#prop('DarkRed', 'Pen'),
  \ dotnet#prop('DarkSalmon', 'Pen'),
  \ dotnet#prop('DarkSeaGreen', 'Pen'),
  \ dotnet#prop('DarkSlateBlue', 'Pen'),
  \ dotnet#prop('DarkSlateGray', 'Pen'),
  \ dotnet#prop('DarkTurquoise', 'Pen'),
  \ dotnet#prop('DarkViolet', 'Pen'),
  \ dotnet#prop('DeepPink', 'Pen'),
  \ dotnet#prop('DeepSkyBlue', 'Pen'),
  \ dotnet#prop('DimGray', 'Pen'),
  \ dotnet#prop('DodgerBlue', 'Pen'),
  \ dotnet#prop('Firebrick', 'Pen'),
  \ dotnet#prop('FloralWhite', 'Pen'),
  \ dotnet#prop('ForestGreen', 'Pen'),
  \ dotnet#prop('Fuchsia', 'Pen'),
  \ dotnet#prop('Gainsboro', 'Pen'),
  \ dotnet#prop('GhostWhite', 'Pen'),
  \ dotnet#prop('Gold', 'Pen'),
  \ dotnet#prop('Goldenrod', 'Pen'),
  \ dotnet#prop('Gray', 'Pen'),
  \ dotnet#prop('Green', 'Pen'),
  \ dotnet#prop('GreenYellow', 'Pen'),
  \ dotnet#prop('Honeydew', 'Pen'),
  \ dotnet#prop('HotPink', 'Pen'),
  \ dotnet#prop('IndianRed', 'Pen'),
  \ dotnet#prop('Indigo', 'Pen'),
  \ dotnet#prop('Ivory', 'Pen'),
  \ dotnet#prop('Khaki', 'Pen'),
  \ dotnet#prop('Lavender', 'Pen'),
  \ dotnet#prop('LavenderBlush', 'Pen'),
  \ dotnet#prop('LawnGreen', 'Pen'),
  \ dotnet#prop('LemonChiffon', 'Pen'),
  \ dotnet#prop('LightBlue', 'Pen'),
  \ dotnet#prop('LightCoral', 'Pen'),
  \ dotnet#prop('LightCyan', 'Pen'),
  \ dotnet#prop('LightGoldenrodYellow', 'Pen'),
  \ dotnet#prop('LightGreen', 'Pen'),
  \ dotnet#prop('LightGray', 'Pen'),
  \ dotnet#prop('LightPink', 'Pen'),
  \ dotnet#prop('LightSalmon', 'Pen'),
  \ dotnet#prop('LightSeaGreen', 'Pen'),
  \ dotnet#prop('LightSkyBlue', 'Pen'),
  \ dotnet#prop('LightSlateGray', 'Pen'),
  \ dotnet#prop('LightSteelBlue', 'Pen'),
  \ dotnet#prop('LightYellow', 'Pen'),
  \ dotnet#prop('Lime', 'Pen'),
  \ dotnet#prop('LimeGreen', 'Pen'),
  \ dotnet#prop('Linen', 'Pen'),
  \ dotnet#prop('Magenta', 'Pen'),
  \ dotnet#prop('Maroon', 'Pen'),
  \ dotnet#prop('MediumAquamarine', 'Pen'),
  \ dotnet#prop('MediumBlue', 'Pen'),
  \ dotnet#prop('MediumOrchid', 'Pen'),
  \ dotnet#prop('MediumPurple', 'Pen'),
  \ dotnet#prop('MediumSeaGreen', 'Pen'),
  \ dotnet#prop('MediumSlateBlue', 'Pen'),
  \ dotnet#prop('MediumSpringGreen', 'Pen'),
  \ dotnet#prop('MediumTurquoise', 'Pen'),
  \ dotnet#prop('MediumVioletRed', 'Pen'),
  \ dotnet#prop('MidnightBlue', 'Pen'),
  \ dotnet#prop('MintCream', 'Pen'),
  \ dotnet#prop('MistyRose', 'Pen'),
  \ dotnet#prop('Moccasin', 'Pen'),
  \ dotnet#prop('NavajoWhite', 'Pen'),
  \ dotnet#prop('Navy', 'Pen'),
  \ dotnet#prop('OldLace', 'Pen'),
  \ dotnet#prop('Olive', 'Pen'),
  \ dotnet#prop('OliveDrab', 'Pen'),
  \ dotnet#prop('Orange', 'Pen'),
  \ dotnet#prop('OrangeRed', 'Pen'),
  \ dotnet#prop('Orchid', 'Pen'),
  \ dotnet#prop('PaleGoldenrod', 'Pen'),
  \ dotnet#prop('PaleGreen', 'Pen'),
  \ dotnet#prop('PaleTurquoise', 'Pen'),
  \ dotnet#prop('PaleVioletRed', 'Pen'),
  \ dotnet#prop('PapayaWhip', 'Pen'),
  \ dotnet#prop('PeachPuff', 'Pen'),
  \ dotnet#prop('Peru', 'Pen'),
  \ dotnet#prop('Pink', 'Pen'),
  \ dotnet#prop('Plum', 'Pen'),
  \ dotnet#prop('PowderBlue', 'Pen'),
  \ dotnet#prop('Purple', 'Pen'),
  \ dotnet#prop('Red', 'Pen'),
  \ dotnet#prop('RosyBrown', 'Pen'),
  \ dotnet#prop('RoyalBlue', 'Pen'),
  \ dotnet#prop('SaddleBrown', 'Pen'),
  \ dotnet#prop('Salmon', 'Pen'),
  \ dotnet#prop('SandyBrown', 'Pen'),
  \ dotnet#prop('SeaGreen', 'Pen'),
  \ dotnet#prop('SeaShell', 'Pen'),
  \ dotnet#prop('Sienna', 'Pen'),
  \ dotnet#prop('Silver', 'Pen'),
  \ dotnet#prop('SkyBlue', 'Pen'),
  \ dotnet#prop('SlateBlue', 'Pen'),
  \ dotnet#prop('SlateGray', 'Pen'),
  \ dotnet#prop('Snow', 'Pen'),
  \ dotnet#prop('SpringGreen', 'Pen'),
  \ dotnet#prop('SteelBlue', 'Pen'),
  \ dotnet#prop('Tan', 'Pen'),
  \ dotnet#prop('Teal', 'Pen'),
  \ dotnet#prop('Thistle', 'Pen'),
  \ dotnet#prop('Tomato', 'Pen'),
  \ dotnet#prop('Turquoise', 'Pen'),
  \ dotnet#prop('Violet', 'Pen'),
  \ dotnet#prop('Wheat', 'Pen'),
  \ dotnet#prop('White', 'Pen'),
  \ dotnet#prop('WhiteSmoke', 'Pen'),
  \ dotnet#prop('Yellow', 'Pen'),
  \ dotnet#prop('YellowGreen', 'Pen'),
  \ ])

call dotnet#class('Point', 'ValueType', [ 
  \ dotnet#field('x', 'int32'),
  \ dotnet#field('y', 'int32'),
  \ dotnet#method('Point(', 'int32 x, int32 y)', 'void'),
  \ dotnet#method('Point(', 'Size sz)', 'void'),
  \ dotnet#method('Point(', 'int32 dw)', 'void'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_X(', ')', 'int32'),
  \ dotnet#method('set_X(', 'int32 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'int32'),
  \ dotnet#method('set_Y(', 'int32 value)', 'void'),
  \ dotnet#method('op_Implicit(', 'Point p)', 'static'),
  \ dotnet#method('op_Explicit(', 'Point p)', 'static Size'),
  \ dotnet#method('op_Addition(', 'Point pt, Size sz)', 'static'),
  \ dotnet#method('op_Subtraction(', 'Point pt, Size sz)', 'static'),
  \ dotnet#method('op_Equality(', 'Point left, Point right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Point left, Point right)', 'static bool'),
  \ dotnet#method('Add(', 'Point pt, Size sz)', 'static Point'),
  \ dotnet#method('Subtract(', 'Point pt, Size sz)', 'static Point'),
  \ dotnet#method('Ceiling(', 'PointF value)', 'static Point'),
  \ dotnet#method('Truncate(', 'PointF value)', 'static Point'),
  \ dotnet#method('Round(', 'PointF value)', 'static Point'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Offset(', 'int32 dx, int32 dy)', 'void'),
  \ dotnet#method('Offset(', 'Point p)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Point(', ')', 'static void .'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('X', 'int32'),
  \ dotnet#prop('Y', 'int32'),
  \ ])

call dotnet#class('PointConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('CreateInstance(', 'class ITypeDescriptorContext context, IDictionary propertyValues)', 'object'),
  \ dotnet#method('GetCreateInstanceSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('GetProperties(', 'class ITypeDescriptorContext context, object value, Attribute[] attributes)', 'PropertyDescriptorCollection'),
  \ dotnet#method('GetPropertiesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('PointConverter(', ')', 'void'),
  \ ])

call dotnet#class('Rectangle', 'ValueType', [ 
  \ dotnet#field('x', 'int32'),
  \ dotnet#field('y', 'int32'),
  \ dotnet#field('width', 'int32'),
  \ dotnet#field('height', 'int32'),
  \ dotnet#method('Rectangle(', 'int32 x, int32 y, int32 width, int32 height)', 'void'),
  \ dotnet#method('Rectangle(', 'Point location, Size size)', 'void'),
  \ dotnet#method('FromLTRB(', 'int32 left, int32 top, int32 right, int32 bottom)', 'static Rectangle'),
  \ dotnet#method('get_Location(', ')', 'Point'),
  \ dotnet#method('set_Location(', 'Point value)', 'void'),
  \ dotnet#method('get_Size(', ')', 'Size'),
  \ dotnet#method('set_Size(', 'Size value)', 'void'),
  \ dotnet#method('get_X(', ')', 'int32'),
  \ dotnet#method('set_X(', 'int32 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'int32'),
  \ dotnet#method('set_Y(', 'int32 value)', 'void'),
  \ dotnet#method('get_Width(', ')', 'int32'),
  \ dotnet#method('set_Width(', 'int32 value)', 'void'),
  \ dotnet#method('get_Height(', ')', 'int32'),
  \ dotnet#method('set_Height(', 'int32 value)', 'void'),
  \ dotnet#method('get_Left(', ')', 'int32'),
  \ dotnet#method('get_Top(', ')', 'int32'),
  \ dotnet#method('get_Right(', ')', 'int32'),
  \ dotnet#method('get_Bottom(', ')', 'int32'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'Rectangle left, Rectangle right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Rectangle left, Rectangle right)', 'static bool'),
  \ dotnet#method('Ceiling(', 'RectangleF value)', 'static Rectangle'),
  \ dotnet#method('Truncate(', 'RectangleF value)', 'static Rectangle'),
  \ dotnet#method('Round(', 'RectangleF value)', 'static Rectangle'),
  \ dotnet#method('Contains(', 'int32 x, int32 y)', 'bool'),
  \ dotnet#method('Contains(', 'Point pt)', 'bool'),
  \ dotnet#method('Contains(', 'Rectangle rect)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Inflate(', 'int32 width, int32 height)', 'void'),
  \ dotnet#method('Inflate(', 'Size size)', 'void'),
  \ dotnet#method('Inflate(', 'Rectangle rect, int32 x, int32 y)', 'static Rectangle'),
  \ dotnet#method('Intersect(', 'Rectangle rect)', 'void'),
  \ dotnet#method('Intersect(', 'Rectangle a, Rectangle b)', 'static Rectangle'),
  \ dotnet#method('IntersectsWith(', 'Rectangle rect)', 'bool'),
  \ dotnet#method('Union(', 'Rectangle a, Rectangle b)', 'static Rectangle'),
  \ dotnet#method('Offset(', 'Point pos)', 'void'),
  \ dotnet#method('Offset(', 'int32 x, int32 y)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Rectangle(', ')', 'static void .'),
  \ dotnet#prop('Location', 'Point'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('X', 'int32'),
  \ dotnet#prop('Y', 'int32'),
  \ dotnet#prop('Width', 'int32'),
  \ dotnet#prop('Height', 'int32'),
  \ dotnet#prop('Left', 'int32'),
  \ dotnet#prop('Top', 'int32'),
  \ dotnet#prop('Right', 'int32'),
  \ dotnet#prop('Bottom', 'int32'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ ])

call dotnet#class('RectangleConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('CreateInstance(', 'class ITypeDescriptorContext context, IDictionary propertyValues)', 'object'),
  \ dotnet#method('GetCreateInstanceSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('GetProperties(', 'class ITypeDescriptorContext context, object value, Attribute[] attributes)', 'PropertyDescriptorCollection'),
  \ dotnet#method('GetPropertiesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('RectangleConverter(', ')', 'void'),
  \ ])

call dotnet#class('Region', 'MarshalByRefObject', [ 
  \ dotnet#method('Region(', ')', 'void'),
  \ dotnet#method('Region(', 'RectangleF rect)', 'void'),
  \ dotnet#method('Region(', 'Rectangle rect)', 'void'),
  \ dotnet#method('Region(', 'class GraphicsPath path)', 'void'),
  \ dotnet#method('Region(', 'class RegionData rgnData)', 'void'),
  \ dotnet#method('FromHrgn(', 'native int hrgn)', 'static Region'),
  \ dotnet#method('Clone(', ')', 'Region'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('MakeInfinite(', ')', 'void'),
  \ dotnet#method('MakeEmpty(', ')', 'void'),
  \ dotnet#method('Intersect(', 'RectangleF rect)', 'void'),
  \ dotnet#method('Intersect(', 'Rectangle rect)', 'void'),
  \ dotnet#method('Intersect(', 'class GraphicsPath path)', 'void'),
  \ dotnet#method('Intersect(', 'class Region region)', 'void'),
  \ dotnet#method('ReleaseHrgn(', 'native int regionHandle)', 'void'),
  \ dotnet#method('Union(', 'RectangleF rect)', 'void'),
  \ dotnet#method('Union(', 'Rectangle rect)', 'void'),
  \ dotnet#method('Union(', 'class GraphicsPath path)', 'void'),
  \ dotnet#method('Union(', 'class Region region)', 'void'),
  \ dotnet#method('Xor(', 'RectangleF rect)', 'void'),
  \ dotnet#method('Xor(', 'Rectangle rect)', 'void'),
  \ dotnet#method('Xor(', 'class GraphicsPath path)', 'void'),
  \ dotnet#method('Xor(', 'class Region region)', 'void'),
  \ dotnet#method('Exclude(', 'RectangleF rect)', 'void'),
  \ dotnet#method('Exclude(', 'Rectangle rect)', 'void'),
  \ dotnet#method('Exclude(', 'class GraphicsPath path)', 'void'),
  \ dotnet#method('Exclude(', 'class Region region)', 'void'),
  \ dotnet#method('Complement(', 'RectangleF rect)', 'void'),
  \ dotnet#method('Complement(', 'Rectangle rect)', 'void'),
  \ dotnet#method('Complement(', 'class GraphicsPath path)', 'void'),
  \ dotnet#method('Complement(', 'class Region region)', 'void'),
  \ dotnet#method('Translate(', 'float32 dx, float32 dy)', 'void'),
  \ dotnet#method('Translate(', 'int32 dx, int32 dy)', 'void'),
  \ dotnet#method('Transform(', 'class Matrix matrix)', 'void'),
  \ dotnet#method('GetBounds(', 'class Graphics g)', 'RectangleF'),
  \ dotnet#method('GetHrgn(', 'class Graphics g)', 'int'),
  \ dotnet#method('IsEmpty(', 'class Graphics g)', 'bool'),
  \ dotnet#method('IsInfinite(', 'class Graphics g)', 'bool'),
  \ dotnet#method('Equals(', 'class Region region, Graphics g)', 'bool'),
  \ dotnet#method('GetRegionData(', ')', 'RegionData'),
  \ dotnet#method('IsVisible(', 'float32 x, float32 y)', 'bool'),
  \ dotnet#method('IsVisible(', 'PointF point)', 'bool'),
  \ dotnet#method('IsVisible(', 'float32 x, float32 y, Graphics g)', 'bool'),
  \ dotnet#method('IsVisible(', 'PointF point, Graphics g)', 'bool'),
  \ dotnet#method('IsVisible(', 'float32 x, float32 y, float32 width, float32 height)', 'bool'),
  \ dotnet#method('IsVisible(', 'RectangleF rect)', 'bool'),
  \ dotnet#method('IsVisible(', 'float32 x, float32 y, float32 width, float32 height, Graphics g)', 'bool'),
  \ dotnet#method('IsVisible(', 'RectangleF rect, Graphics g)', 'bool'),
  \ dotnet#method('IsVisible(', 'int32 x, int32 y, Graphics g)', 'bool'),
  \ dotnet#method('IsVisible(', 'Point point)', 'bool'),
  \ dotnet#method('IsVisible(', 'Point point, Graphics g)', 'bool'),
  \ dotnet#method('IsVisible(', 'int32 x, int32 y, int32 width, int32 height)', 'bool'),
  \ dotnet#method('IsVisible(', 'Rectangle rect)', 'bool'),
  \ dotnet#method('IsVisible(', 'int32 x, int32 y, int32 width, int32 height, Graphics g)', 'bool'),
  \ dotnet#method('IsVisible(', 'Rectangle rect, Graphics g)', 'bool'),
  \ dotnet#method('GetRegionScans(', 'class Matrix matrix)', 'RectangleF[]'),
  \ ])

call dotnet#class('Size', 'ValueType', [ 
  \ dotnet#field('width', 'int32'),
  \ dotnet#field('height', 'int32'),
  \ dotnet#method('Size(', 'Point pt)', 'void'),
  \ dotnet#method('Size(', 'int32 width, int32 height)', 'void'),
  \ dotnet#method('op_Implicit(', 'Size p)', 'static'),
  \ dotnet#method('op_Addition(', 'Size sz1, Size sz2)', 'static Size'),
  \ dotnet#method('op_Subtraction(', 'Size sz1, Size sz2)', 'static Size'),
  \ dotnet#method('op_Equality(', 'Size sz1, Size sz2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Size sz1, Size sz2)', 'static bool'),
  \ dotnet#method('op_Explicit(', 'Size size)', 'static'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Width(', ')', 'int32'),
  \ dotnet#method('set_Width(', 'int32 value)', 'void'),
  \ dotnet#method('get_Height(', ')', 'int32'),
  \ dotnet#method('set_Height(', 'int32 value)', 'void'),
  \ dotnet#method('Add(', 'Size sz1, Size sz2)', 'static Size'),
  \ dotnet#method('Ceiling(', 'SizeF value)', 'static Size'),
  \ dotnet#method('Subtract(', 'Size sz1, Size sz2)', 'static Size'),
  \ dotnet#method('Truncate(', 'SizeF value)', 'static Size'),
  \ dotnet#method('Round(', 'SizeF value)', 'static Size'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Size(', ')', 'static void .'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('Width', 'int32'),
  \ dotnet#prop('Height', 'int32'),
  \ ])

call dotnet#class('SizeConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('CreateInstance(', 'class ITypeDescriptorContext context, IDictionary propertyValues)', 'object'),
  \ dotnet#method('GetCreateInstanceSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('GetProperties(', 'class ITypeDescriptorContext context, object value, Attribute[] attributes)', 'PropertyDescriptorCollection'),
  \ dotnet#method('GetPropertiesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('SizeConverter(', ')', 'void'),
  \ ])

call dotnet#class('SolidBrush', 'Brush', [ 
  \ dotnet#method('SolidBrush(', 'Color color)', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('get_Color(', ')', 'Color'),
  \ dotnet#method('set_Color(', 'Color value)', 'void'),
  \ dotnet#prop('Color', 'Color'),
  \ ])

call dotnet#class('SystemBrushes', 'Object', [ 
  \ dotnet#method('get_ActiveBorder(', ')', 'static Brush'),
  \ dotnet#method('get_ActiveCaption(', ')', 'static Brush'),
  \ dotnet#method('get_ActiveCaptionText(', ')', 'static Brush'),
  \ dotnet#method('get_AppWorkspace(', ')', 'static Brush'),
  \ dotnet#method('get_ButtonFace(', ')', 'static Brush'),
  \ dotnet#method('get_ButtonHighlight(', ')', 'static Brush'),
  \ dotnet#method('get_ButtonShadow(', ')', 'static Brush'),
  \ dotnet#method('get_Control(', ')', 'static Brush'),
  \ dotnet#method('get_ControlLightLight(', ')', 'static Brush'),
  \ dotnet#method('get_ControlLight(', ')', 'static Brush'),
  \ dotnet#method('get_ControlDark(', ')', 'static Brush'),
  \ dotnet#method('get_ControlDarkDark(', ')', 'static Brush'),
  \ dotnet#method('get_ControlText(', ')', 'static Brush'),
  \ dotnet#method('get_Desktop(', ')', 'static Brush'),
  \ dotnet#method('get_GradientActiveCaption(', ')', 'static Brush'),
  \ dotnet#method('get_GradientInactiveCaption(', ')', 'static Brush'),
  \ dotnet#method('get_GrayText(', ')', 'static Brush'),
  \ dotnet#method('get_Highlight(', ')', 'static Brush'),
  \ dotnet#method('get_HighlightText(', ')', 'static Brush'),
  \ dotnet#method('get_HotTrack(', ')', 'static Brush'),
  \ dotnet#method('get_InactiveCaption(', ')', 'static Brush'),
  \ dotnet#method('get_InactiveBorder(', ')', 'static Brush'),
  \ dotnet#method('get_InactiveCaptionText(', ')', 'static Brush'),
  \ dotnet#method('get_Info(', ')', 'static Brush'),
  \ dotnet#method('get_InfoText(', ')', 'static Brush'),
  \ dotnet#method('get_Menu(', ')', 'static Brush'),
  \ dotnet#method('get_MenuBar(', ')', 'static Brush'),
  \ dotnet#method('get_MenuHighlight(', ')', 'static Brush'),
  \ dotnet#method('get_MenuText(', ')', 'static Brush'),
  \ dotnet#method('get_ScrollBar(', ')', 'static Brush'),
  \ dotnet#method('get_Window(', ')', 'static Brush'),
  \ dotnet#method('get_WindowFrame(', ')', 'static Brush'),
  \ dotnet#method('get_WindowText(', ')', 'static Brush'),
  \ dotnet#method('FromSystemColor(', 'Color c)', 'static Brush'),
  \ dotnet#method('SystemBrushes(', ')', 'void'),
  \ dotnet#method('SystemBrushes(', ')', 'static void .'),
  \ dotnet#prop('ActiveBorder', 'Brush'),
  \ dotnet#prop('ActiveCaption', 'Brush'),
  \ dotnet#prop('ActiveCaptionText', 'Brush'),
  \ dotnet#prop('AppWorkspace', 'Brush'),
  \ dotnet#prop('ButtonFace', 'Brush'),
  \ dotnet#prop('ButtonHighlight', 'Brush'),
  \ dotnet#prop('ButtonShadow', 'Brush'),
  \ dotnet#prop('Control', 'Brush'),
  \ dotnet#prop('ControlLightLight', 'Brush'),
  \ dotnet#prop('ControlLight', 'Brush'),
  \ dotnet#prop('ControlDark', 'Brush'),
  \ dotnet#prop('ControlDarkDark', 'Brush'),
  \ dotnet#prop('ControlText', 'Brush'),
  \ dotnet#prop('Desktop', 'Brush'),
  \ dotnet#prop('GradientActiveCaption', 'Brush'),
  \ dotnet#prop('GradientInactiveCaption', 'Brush'),
  \ dotnet#prop('GrayText', 'Brush'),
  \ dotnet#prop('Highlight', 'Brush'),
  \ dotnet#prop('HighlightText', 'Brush'),
  \ dotnet#prop('HotTrack', 'Brush'),
  \ dotnet#prop('InactiveCaption', 'Brush'),
  \ dotnet#prop('InactiveBorder', 'Brush'),
  \ dotnet#prop('InactiveCaptionText', 'Brush'),
  \ dotnet#prop('Info', 'Brush'),
  \ dotnet#prop('InfoText', 'Brush'),
  \ dotnet#prop('Menu', 'Brush'),
  \ dotnet#prop('MenuBar', 'Brush'),
  \ dotnet#prop('MenuHighlight', 'Brush'),
  \ dotnet#prop('MenuText', 'Brush'),
  \ dotnet#prop('ScrollBar', 'Brush'),
  \ dotnet#prop('Window', 'Brush'),
  \ dotnet#prop('WindowFrame', 'Brush'),
  \ dotnet#prop('WindowText', 'Brush'),
  \ ])

call dotnet#class('SystemColors', 'Object', [ 
  \ dotnet#method('get_ActiveBorder(', ')', 'static'),
  \ dotnet#method('get_ActiveCaption(', ')', 'static'),
  \ dotnet#method('get_ActiveCaptionText(', ')', 'static'),
  \ dotnet#method('get_AppWorkspace(', ')', 'static'),
  \ dotnet#method('get_ButtonFace(', ')', 'static'),
  \ dotnet#method('get_ButtonHighlight(', ')', 'static'),
  \ dotnet#method('get_ButtonShadow(', ')', 'static'),
  \ dotnet#method('get_Control(', ')', 'static'),
  \ dotnet#method('get_ControlDark(', ')', 'static'),
  \ dotnet#method('get_ControlDarkDark(', ')', 'static'),
  \ dotnet#method('get_ControlLight(', ')', 'static'),
  \ dotnet#method('get_ControlLightLight(', ')', 'static'),
  \ dotnet#method('get_ControlText(', ')', 'static'),
  \ dotnet#method('get_Desktop(', ')', 'static'),
  \ dotnet#method('get_GradientActiveCaption(', ')', 'static'),
  \ dotnet#method('get_GradientInactiveCaption(', ')', 'static'),
  \ dotnet#method('get_GrayText(', ')', 'static'),
  \ dotnet#method('get_Highlight(', ')', 'static'),
  \ dotnet#method('get_HighlightText(', ')', 'static'),
  \ dotnet#method('get_HotTrack(', ')', 'static'),
  \ dotnet#method('get_InactiveBorder(', ')', 'static'),
  \ dotnet#method('get_InactiveCaption(', ')', 'static'),
  \ dotnet#method('get_InactiveCaptionText(', ')', 'static'),
  \ dotnet#method('get_Info(', ')', 'static'),
  \ dotnet#method('get_InfoText(', ')', 'static'),
  \ dotnet#method('get_Menu(', ')', 'static'),
  \ dotnet#method('get_MenuBar(', ')', 'static'),
  \ dotnet#method('get_MenuHighlight(', ')', 'static'),
  \ dotnet#method('get_MenuText(', ')', 'static'),
  \ dotnet#method('get_ScrollBar(', ')', 'static'),
  \ dotnet#method('get_Window(', ')', 'static'),
  \ dotnet#method('get_WindowFrame(', ')', 'static'),
  \ dotnet#method('get_WindowText(', ')', 'static'),
  \ dotnet#method('SystemColors(', ')', 'void'),
  \ dotnet#prop('ActiveBorder', 'Color'),
  \ dotnet#prop('ActiveCaption', 'Color'),
  \ dotnet#prop('ActiveCaptionText', 'Color'),
  \ dotnet#prop('AppWorkspace', 'Color'),
  \ dotnet#prop('ButtonFace', 'Color'),
  \ dotnet#prop('ButtonHighlight', 'Color'),
  \ dotnet#prop('ButtonShadow', 'Color'),
  \ dotnet#prop('Control', 'Color'),
  \ dotnet#prop('ControlDark', 'Color'),
  \ dotnet#prop('ControlDarkDark', 'Color'),
  \ dotnet#prop('ControlLight', 'Color'),
  \ dotnet#prop('ControlLightLight', 'Color'),
  \ dotnet#prop('ControlText', 'Color'),
  \ dotnet#prop('Desktop', 'Color'),
  \ dotnet#prop('GradientActiveCaption', 'Color'),
  \ dotnet#prop('GradientInactiveCaption', 'Color'),
  \ dotnet#prop('GrayText', 'Color'),
  \ dotnet#prop('Highlight', 'Color'),
  \ dotnet#prop('HighlightText', 'Color'),
  \ dotnet#prop('HotTrack', 'Color'),
  \ dotnet#prop('InactiveBorder', 'Color'),
  \ dotnet#prop('InactiveCaption', 'Color'),
  \ dotnet#prop('InactiveCaptionText', 'Color'),
  \ dotnet#prop('Info', 'Color'),
  \ dotnet#prop('InfoText', 'Color'),
  \ dotnet#prop('Menu', 'Color'),
  \ dotnet#prop('MenuBar', 'Color'),
  \ dotnet#prop('MenuHighlight', 'Color'),
  \ dotnet#prop('MenuText', 'Color'),
  \ dotnet#prop('ScrollBar', 'Color'),
  \ dotnet#prop('Window', 'Color'),
  \ dotnet#prop('WindowFrame', 'Color'),
  \ dotnet#prop('WindowText', 'Color'),
  \ ])

call dotnet#class('SystemFonts', 'Object', [ 
  \ dotnet#method('get_CaptionFont(', ')', 'static Font'),
  \ dotnet#method('get_SmallCaptionFont(', ')', 'static Font'),
  \ dotnet#method('get_MenuFont(', ')', 'static Font'),
  \ dotnet#method('get_StatusFont(', ')', 'static Font'),
  \ dotnet#method('get_MessageBoxFont(', ')', 'static Font'),
  \ dotnet#method('get_IconTitleFont(', ')', 'static Font'),
  \ dotnet#method('get_DefaultFont(', ')', 'static Font'),
  \ dotnet#method('get_DialogFont(', ')', 'static Font'),
  \ dotnet#method('GetFontByName(', 'string systemFontName)', 'static Font'),
  \ dotnet#method('SystemFonts(', ')', 'void'),
  \ dotnet#method('SystemFonts(', ')', 'static void .'),
  \ dotnet#prop('CaptionFont', 'Font'),
  \ dotnet#prop('SmallCaptionFont', 'Font'),
  \ dotnet#prop('MenuFont', 'Font'),
  \ dotnet#prop('StatusFont', 'Font'),
  \ dotnet#prop('MessageBoxFont', 'Font'),
  \ dotnet#prop('IconTitleFont', 'Font'),
  \ dotnet#prop('DefaultFont', 'Font'),
  \ dotnet#prop('DialogFont', 'Font'),
  \ ])

call dotnet#class('SystemIcons', 'Object', [ 
  \ dotnet#method('get_Application(', ')', 'static Icon'),
  \ dotnet#method('get_Asterisk(', ')', 'static Icon'),
  \ dotnet#method('get_Error(', ')', 'static Icon'),
  \ dotnet#method('get_Exclamation(', ')', 'static Icon'),
  \ dotnet#method('get_Hand(', ')', 'static Icon'),
  \ dotnet#method('get_Information(', ')', 'static Icon'),
  \ dotnet#method('get_Question(', ')', 'static Icon'),
  \ dotnet#method('get_Warning(', ')', 'static Icon'),
  \ dotnet#method('get_WinLogo(', ')', 'static Icon'),
  \ dotnet#method('get_Shield(', ')', 'static Icon'),
  \ dotnet#method('SystemIcons(', ')', 'void'),
  \ dotnet#prop('Application', 'Icon'),
  \ dotnet#prop('Asterisk', 'Icon'),
  \ dotnet#prop('Error', 'Icon'),
  \ dotnet#prop('Exclamation', 'Icon'),
  \ dotnet#prop('Hand', 'Icon'),
  \ dotnet#prop('Information', 'Icon'),
  \ dotnet#prop('Question', 'Icon'),
  \ dotnet#prop('Warning', 'Icon'),
  \ dotnet#prop('WinLogo', 'Icon'),
  \ dotnet#prop('Shield', 'Icon'),
  \ ])

call dotnet#class('SystemPens', 'Object', [ 
  \ dotnet#method('get_ActiveBorder(', ')', 'static Pen'),
  \ dotnet#method('get_ActiveCaption(', ')', 'static Pen'),
  \ dotnet#method('get_ActiveCaptionText(', ')', 'static Pen'),
  \ dotnet#method('get_AppWorkspace(', ')', 'static Pen'),
  \ dotnet#method('get_ButtonFace(', ')', 'static Pen'),
  \ dotnet#method('get_ButtonHighlight(', ')', 'static Pen'),
  \ dotnet#method('get_ButtonShadow(', ')', 'static Pen'),
  \ dotnet#method('get_Control(', ')', 'static Pen'),
  \ dotnet#method('get_ControlText(', ')', 'static Pen'),
  \ dotnet#method('get_ControlDark(', ')', 'static Pen'),
  \ dotnet#method('get_ControlDarkDark(', ')', 'static Pen'),
  \ dotnet#method('get_ControlLight(', ')', 'static Pen'),
  \ dotnet#method('get_ControlLightLight(', ')', 'static Pen'),
  \ dotnet#method('get_Desktop(', ')', 'static Pen'),
  \ dotnet#method('get_GradientActiveCaption(', ')', 'static Pen'),
  \ dotnet#method('get_GradientInactiveCaption(', ')', 'static Pen'),
  \ dotnet#method('get_GrayText(', ')', 'static Pen'),
  \ dotnet#method('get_Highlight(', ')', 'static Pen'),
  \ dotnet#method('get_HighlightText(', ')', 'static Pen'),
  \ dotnet#method('get_HotTrack(', ')', 'static Pen'),
  \ dotnet#method('get_InactiveBorder(', ')', 'static Pen'),
  \ dotnet#method('get_InactiveCaption(', ')', 'static Pen'),
  \ dotnet#method('get_InactiveCaptionText(', ')', 'static Pen'),
  \ dotnet#method('get_Info(', ')', 'static Pen'),
  \ dotnet#method('get_InfoText(', ')', 'static Pen'),
  \ dotnet#method('get_Menu(', ')', 'static Pen'),
  \ dotnet#method('get_MenuBar(', ')', 'static Pen'),
  \ dotnet#method('get_MenuHighlight(', ')', 'static Pen'),
  \ dotnet#method('get_MenuText(', ')', 'static Pen'),
  \ dotnet#method('get_ScrollBar(', ')', 'static Pen'),
  \ dotnet#method('get_Window(', ')', 'static Pen'),
  \ dotnet#method('get_WindowFrame(', ')', 'static Pen'),
  \ dotnet#method('get_WindowText(', ')', 'static Pen'),
  \ dotnet#method('FromSystemColor(', 'Color c)', 'static Pen'),
  \ dotnet#method('SystemPens(', ')', 'void'),
  \ dotnet#method('SystemPens(', ')', 'static void .'),
  \ dotnet#prop('ActiveBorder', 'Pen'),
  \ dotnet#prop('ActiveCaption', 'Pen'),
  \ dotnet#prop('ActiveCaptionText', 'Pen'),
  \ dotnet#prop('AppWorkspace', 'Pen'),
  \ dotnet#prop('ButtonFace', 'Pen'),
  \ dotnet#prop('ButtonHighlight', 'Pen'),
  \ dotnet#prop('ButtonShadow', 'Pen'),
  \ dotnet#prop('Control', 'Pen'),
  \ dotnet#prop('ControlText', 'Pen'),
  \ dotnet#prop('ControlDark', 'Pen'),
  \ dotnet#prop('ControlDarkDark', 'Pen'),
  \ dotnet#prop('ControlLight', 'Pen'),
  \ dotnet#prop('ControlLightLight', 'Pen'),
  \ dotnet#prop('Desktop', 'Pen'),
  \ dotnet#prop('GradientActiveCaption', 'Pen'),
  \ dotnet#prop('GradientInactiveCaption', 'Pen'),
  \ dotnet#prop('GrayText', 'Pen'),
  \ dotnet#prop('Highlight', 'Pen'),
  \ dotnet#prop('HighlightText', 'Pen'),
  \ dotnet#prop('HotTrack', 'Pen'),
  \ dotnet#prop('InactiveBorder', 'Pen'),
  \ dotnet#prop('InactiveCaption', 'Pen'),
  \ dotnet#prop('InactiveCaptionText', 'Pen'),
  \ dotnet#prop('Info', 'Pen'),
  \ dotnet#prop('InfoText', 'Pen'),
  \ dotnet#prop('Menu', 'Pen'),
  \ dotnet#prop('MenuBar', 'Pen'),
  \ dotnet#prop('MenuHighlight', 'Pen'),
  \ dotnet#prop('MenuText', 'Pen'),
  \ dotnet#prop('ScrollBar', 'Pen'),
  \ dotnet#prop('Window', 'Pen'),
  \ dotnet#prop('WindowFrame', 'Pen'),
  \ dotnet#prop('WindowText', 'Pen'),
  \ ])

call dotnet#class('ToolboxBitmapAttribute', 'Attribute', [ 
  \ dotnet#method('ToolboxBitmapAttribute(', 'string imageFile)', 'void'),
  \ dotnet#method('ToolboxBitmapAttribute(', 'class Type t)', 'void'),
  \ dotnet#method('ToolboxBitmapAttribute(', 'class Type t, string name)', 'void'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetImage(', 'object component)', 'Image'),
  \ dotnet#method('GetImage(', 'object component, bool large)', 'Image'),
  \ dotnet#method('GetImage(', 'class Type type)', 'Image'),
  \ dotnet#method('GetImage(', 'class Type type, bool large)', 'Image'),
  \ dotnet#method('GetImage(', 'class Type type, string imgName, bool large)', 'Image'),
  \ dotnet#method('GetImageFromResource(', 'class Type t, string imageName, bool large)', 'static Image'),
  \ dotnet#method('ToolboxBitmapAttribute(', ')', 'static void .'),
  \ ])

call dotnet#class('ColorTranslator', 'Object', [ 
  \ dotnet#method('ToWin32(', 'Color c)', 'static int32'),
  \ dotnet#method('ToOle(', 'Color c)', 'static int32'),
  \ dotnet#method('FromOle(', 'int32 oleColor)', 'static Color'),
  \ dotnet#method('FromWin32(', 'int32 win32Color)', 'static Color'),
  \ dotnet#method('FromHtml(', 'string htmlColor)', 'static Color'),
  \ dotnet#method('ToHtml(', 'Color c)', 'static string'),
  \ dotnet#method('ColorTranslator(', ')', 'void'),
  \ ])

call dotnet#class('Font', 'MarshalByRefObject', [ 
  \ dotnet#method('GetObjectData(', 'class SerializationInfo si, StreamingContext context)', 'void '),
  \ dotnet#method('Font(', 'class Font prototype, FontStyle newStyle)', 'void'),
  \ dotnet#method('Font(', 'class Fontfamily, float32 emSize, FontStyle style, GraphicsUnit unit)', 'void'),
  \ dotnet#method('Font(', 'class Fontfamily, float32 emSize, FontStyle style, GraphicsUnit unit, uint8 gdiCharSet)', 'void'),
  \ dotnet#method('Font(', 'class Fontfamily, float32 emSize, FontStyle style, GraphicsUnit unit, uint8 gdiCharSet, bool gdiVerticalFont)', 'void'),
  \ dotnet#method('Font(', 'string familyName, float32 emSize, FontStyle style, GraphicsUnit unit, uint8 gdiCharSet)', 'void'),
  \ dotnet#method('Font(', 'string familyName, float32 emSize, FontStyle style, GraphicsUnit unit, uint8 gdiCharSet, bool gdiVerticalFont)', 'void'),
  \ dotnet#method('Font(', 'class Fontfamily, float32 emSize, FontStyle style)', 'void'),
  \ dotnet#method('Font(', 'class Fontfamily, float32 emSize, GraphicsUnit unit)', 'void'),
  \ dotnet#method('Font(', 'class Fontfamily, float32 emSize)', 'void'),
  \ dotnet#method('Font(', 'string familyName, float32 emSize, FontStyle style, GraphicsUnit unit)', 'void'),
  \ dotnet#method('Font(', 'string familyName, float32 emSize, FontStyle style)', 'void'),
  \ dotnet#method('Font(', 'string familyName, float32 emSize, GraphicsUnit unit)', 'void'),
  \ dotnet#method('Font(', 'string familyName, float32 emSize)', 'void'),
  \ dotnet#method('FromHfont(', 'native int hfont)', 'static Font'),
  \ dotnet#method('FromLogFont(', 'object lf)', 'static Font'),
  \ dotnet#method('FromLogFont(', 'object lf, int hdc)', 'static Font'),
  \ dotnet#method('FromHdc(', 'native int hdc)', 'static Font'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('get_FontFamily(', ')', 'FontFamily'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Bold(', ')', 'bool'),
  \ dotnet#method('get_GdiCharSet(', ')', 'uint8'),
  \ dotnet#method('get_GdiVerticalFont(', ')', 'bool'),
  \ dotnet#method('get_Italic(', ')', 'bool'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_OriginalFontName(', ')', 'string'),
  \ dotnet#method('get_Strikeout(', ')', 'bool'),
  \ dotnet#method('get_Underline(', ')', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToLogFont(', 'object logFont)', 'void'),
  \ dotnet#method('ToLogFont(', 'object logFont, Graphics graphics)', 'void'),
  \ dotnet#method('ToHfont(', ')', 'int'),
  \ dotnet#method('GetHeight(', 'class Graphics graphics)', 'float32'),
  \ dotnet#method('GetHeight(', ')', 'float32'),
  \ dotnet#method('GetHeight(', 'float32 dpi)', 'float32'),
  \ dotnet#method('get_Style(', ')', 'FontStyle'),
  \ dotnet#method('get_Size(', ')', 'float32'),
  \ dotnet#method('get_SizeInPoints(', ')', 'float32'),
  \ dotnet#method('get_Unit(', ')', 'GraphicsUnit'),
  \ dotnet#method('get_Height(', ')', 'int32'),
  \ dotnet#method('get_IsSystemFont(', ')', 'bool'),
  \ dotnet#method('get_SystemFontName(', ')', 'string'),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('Bold', 'bool'),
  \ dotnet#prop('GdiCharSet', 'uint8'),
  \ dotnet#prop('GdiVerticalFont', 'bool'),
  \ dotnet#prop('Italic', 'bool'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('OriginalFontName', 'string'),
  \ dotnet#prop('Strikeout', 'bool'),
  \ dotnet#prop('Underline', 'bool'),
  \ dotnet#prop('Style', 'FontStyle'),
  \ dotnet#prop('Size', 'float32'),
  \ dotnet#prop('SizeInPoints', 'float32'),
  \ dotnet#prop('Unit', 'GraphicsUnit'),
  \ dotnet#prop('Height', 'int32'),
  \ dotnet#prop('IsSystemFont', 'bool'),
  \ dotnet#prop('SystemFontName', 'string'),
  \ ])

call dotnet#class('FontFamily', 'MarshalByRefObject', [ 
  \ dotnet#method('FontFamily(', 'string name)', 'void'),
  \ dotnet#method('FontFamily(', 'string name, FontCollection fontCollection)', 'void'),
  \ dotnet#method('FontFamily(', 'GenericFontFamilies genericFamily)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('GetName(', 'int32 language)', 'string'),
  \ dotnet#method('get_Families(', ')', 'static'),
  \ dotnet#method('get_GenericSansSerif(', ')', 'static'),
  \ dotnet#method('get_GenericSerif(', ')', 'static'),
  \ dotnet#method('get_GenericMonospace(', ')', 'static'),
  \ dotnet#method('GetFamilies(', 'class Graphics graphics)', 'static FontFamily[]'),
  \ dotnet#method('IsStyleAvailable(', 'FontStyle style)', 'bool'),
  \ dotnet#method('GetEmHeight(', 'FontStyle style)', 'int32'),
  \ dotnet#method('GetCellAscent(', 'FontStyle style)', 'int32'),
  \ dotnet#method('GetCellDescent(', 'FontStyle style)', 'int32'),
  \ dotnet#method('GetLineSpacing(', 'FontStyle style)', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Families', 'FontFamily[]'),
  \ dotnet#prop('GenericSansSerif', 'FontFamily'),
  \ dotnet#prop('GenericSerif', 'FontFamily'),
  \ dotnet#prop('GenericMonospace', 'FontFamily'),
  \ ])

call dotnet#class('ImageFormatConverter', 'TypeConverter', [ 
  \ dotnet#method('ImageFormatConverter(', ')', 'void'),
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('GetStandardValues(', 'class ITypeDescriptorContext context)', 'TypeConverter/StandardValuesCollection'),
  \ dotnet#method('GetStandardValuesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ ])

call dotnet#class('PointF', 'ValueType', [ 
  \ dotnet#field('x', 'float32'),
  \ dotnet#field('y', 'float32'),
  \ dotnet#method('PointF(', 'float32 x, float32 y)', 'void'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_X(', ')', 'float32'),
  \ dotnet#method('set_X(', 'float32 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float32'),
  \ dotnet#method('set_Y(', 'float32 value)', 'void'),
  \ dotnet#method('op_Addition(', 'PointF pt, Size sz)', 'static'),
  \ dotnet#method('op_Subtraction(', 'PointF pt, Size sz)', 'static'),
  \ dotnet#method('op_Addition(', 'PointF pt, SizeF sz)', 'static'),
  \ dotnet#method('op_Subtraction(', 'PointF pt, SizeF sz)', 'static'),
  \ dotnet#method('op_Equality(', 'PointF left, PointF right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'PointF left, PointF right)', 'static bool'),
  \ dotnet#method('Add(', 'PointF pt, Size sz)', 'static PointF'),
  \ dotnet#method('Subtract(', 'PointF pt, Size sz)', 'static PointF'),
  \ dotnet#method('Add(', 'PointF pt, SizeF sz)', 'static PointF'),
  \ dotnet#method('Subtract(', 'PointF pt, SizeF sz)', 'static PointF'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('PointF(', ')', 'static void .'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('X', 'float32'),
  \ dotnet#prop('Y', 'float32'),
  \ ])

call dotnet#class('RectangleF', 'ValueType', [ 
  \ dotnet#field('x', 'float32'),
  \ dotnet#field('y', 'float32'),
  \ dotnet#field('width', 'float32'),
  \ dotnet#field('height', 'float32'),
  \ dotnet#method('RectangleF(', 'float32 x, float32 y, float32 width, float32 height)', 'void'),
  \ dotnet#method('RectangleF(', 'PointF location, SizeF size)', 'void'),
  \ dotnet#method('FromLTRB(', 'float32 left, float32 top, float32 right, float32 bottom)', 'static RectangleF'),
  \ dotnet#method('get_Location(', ')', 'PointF'),
  \ dotnet#method('set_Location(', 'PointF value)', 'void'),
  \ dotnet#method('get_Size(', ')', 'SizeF'),
  \ dotnet#method('set_Size(', 'SizeF value)', 'void'),
  \ dotnet#method('get_X(', ')', 'float32'),
  \ dotnet#method('set_X(', 'float32 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float32'),
  \ dotnet#method('set_Y(', 'float32 value)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float32'),
  \ dotnet#method('set_Width(', 'float32 value)', 'void'),
  \ dotnet#method('get_Height(', ')', 'float32'),
  \ dotnet#method('set_Height(', 'float32 value)', 'void'),
  \ dotnet#method('get_Left(', ')', 'float32'),
  \ dotnet#method('get_Top(', ')', 'float32'),
  \ dotnet#method('get_Right(', ')', 'float32'),
  \ dotnet#method('get_Bottom(', ')', 'float32'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'RectangleF left, RectangleF right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'RectangleF left, RectangleF right)', 'static bool'),
  \ dotnet#method('Contains(', 'float32 x, float32 y)', 'bool'),
  \ dotnet#method('Contains(', 'PointF pt)', 'bool'),
  \ dotnet#method('Contains(', 'RectangleF rect)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Inflate(', 'float32 x, float32 y)', 'void'),
  \ dotnet#method('Inflate(', 'SizeF size)', 'void'),
  \ dotnet#method('Inflate(', 'RectangleF rect, float32 x, float32 y)', 'static RectangleF'),
  \ dotnet#method('Intersect(', 'RectangleF rect)', 'void'),
  \ dotnet#method('Intersect(', 'RectangleF a, RectangleF b)', 'static RectangleF'),
  \ dotnet#method('IntersectsWith(', 'RectangleF rect)', 'bool'),
  \ dotnet#method('Union(', 'RectangleF a, RectangleF b)', 'static RectangleF'),
  \ dotnet#method('Offset(', 'PointF pos)', 'void'),
  \ dotnet#method('Offset(', 'float32 x, float32 y)', 'void'),
  \ dotnet#method('op_Implicit(', 'Rectangle r)', 'static'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('RectangleF(', ')', 'static void .'),
  \ dotnet#prop('Location', 'PointF'),
  \ dotnet#prop('Size', 'SizeF'),
  \ dotnet#prop('X', 'float32'),
  \ dotnet#prop('Y', 'float32'),
  \ dotnet#prop('Width', 'float32'),
  \ dotnet#prop('Height', 'float32'),
  \ dotnet#prop('Left', 'float32'),
  \ dotnet#prop('Top', 'float32'),
  \ dotnet#prop('Right', 'float32'),
  \ dotnet#prop('Bottom', 'float32'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ ])

call dotnet#class('SizeF', 'ValueType', [ 
  \ dotnet#field('width', 'float32'),
  \ dotnet#field('height', 'float32'),
  \ dotnet#method('SizeF(', 'SizeF size)', 'void'),
  \ dotnet#method('SizeF(', 'PointF pt)', 'void'),
  \ dotnet#method('SizeF(', 'float32 width, float32 height)', 'void'),
  \ dotnet#method('op_Addition(', 'SizeF sz1, SizeF sz2)', 'static'),
  \ dotnet#method('op_Subtraction(', 'SizeF sz1, SizeF sz2)', 'static'),
  \ dotnet#method('op_Equality(', 'SizeF sz1, SizeF sz2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'SizeF sz1, SizeF sz2)', 'static bool'),
  \ dotnet#method('op_Explicit(', 'SizeF size)', 'static'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Width(', ')', 'float32'),
  \ dotnet#method('set_Width(', 'float32 value)', 'void'),
  \ dotnet#method('get_Height(', ')', 'float32'),
  \ dotnet#method('set_Height(', 'float32 value)', 'void'),
  \ dotnet#method('Add(', 'SizeF sz1, SizeF sz2)', 'static SizeF'),
  \ dotnet#method('Subtract(', 'SizeF sz1, SizeF sz2)', 'static SizeF'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToPointF(', ')', 'PointF'),
  \ dotnet#method('ToSize(', ')', 'Size'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('SizeF(', ')', 'static void .'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('Width', 'float32'),
  \ dotnet#prop('Height', 'float32'),
  \ ])

call dotnet#class('SizeFConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('CreateInstance(', 'class ITypeDescriptorContext context, IDictionary propertyValues)', 'object'),
  \ dotnet#method('GetCreateInstanceSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('GetProperties(', 'class ITypeDescriptorContext context, object value, Attribute[] attributes)', 'PropertyDescriptorCollection'),
  \ dotnet#method('GetPropertiesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('SizeFConverter(', ')', 'void'),
  \ ])

call dotnet#class('CharacterRange', 'ValueType', [ 
  \ dotnet#field('first', 'int32'),
  \ dotnet#field('length', 'int32'),
  \ dotnet#method('CharacterRange(', 'int32 First, int32 Length)', 'void'),
  \ dotnet#method('get_First(', ')', 'int32'),
  \ dotnet#method('set_First(', 'int32 value)', 'void'),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('set_Length(', 'int32 value)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'CharacterRange cr1, CharacterRange cr2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'CharacterRange cr1, CharacterRange cr2)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('First', 'int32'),
  \ dotnet#prop('Length', 'int32'),
  \ ])

call dotnet#class('StringFormat', 'MarshalByRefObject', [ 
  \ dotnet#method('StringFormat(', ')', 'void'),
  \ dotnet#method('StringFormat(', 'StringFormatFlags options)', 'void'),
  \ dotnet#method('StringFormat(', 'StringFormatFlags options, int32 language)', 'void'),
  \ dotnet#method('StringFormat(', 'class StringFormat format)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('get_FormatFlags(', ')', 'StringFormatFlags'),
  \ dotnet#method('set_FormatFlags(', 'StringFormatFlags value)', 'void'),
  \ dotnet#method('SetMeasurableCharacterRanges(', 'CharacterRange[] ranges)', 'void'),
  \ dotnet#method('get_Alignment(', ')', 'StringAlignment'),
  \ dotnet#method('set_Alignment(', 'StringAlignment value)', 'void'),
  \ dotnet#method('get_LineAlignment(', ')', 'StringAlignment'),
  \ dotnet#method('set_LineAlignment(', 'StringAlignment value)', 'void'),
  \ dotnet#method('get_HotkeyPrefix(', ')', 'HotkeyPrefix'),
  \ dotnet#method('set_HotkeyPrefix(', 'HotkeyPrefix value)', 'void'),
  \ dotnet#method('SetTabStops(', 'float32 firstTabOffset, float32[] tabStops)', 'void'),
  \ dotnet#method('GetTabStops(', '[out] float32& firstTabOffset)', 'float32[]'),
  \ dotnet#method('get_Trimming(', ')', 'StringTrimming'),
  \ dotnet#method('set_Trimming(', 'StringTrimming value)', 'void'),
  \ dotnet#method('get_GenericDefault(', ')', 'static'),
  \ dotnet#method('get_GenericTypographic(', ')', 'static'),
  \ dotnet#method('SetDigitSubstitution(', 'int32 language, StringDigitSubstitute substitute)', 'void'),
  \ dotnet#method('get_DigitSubstitutionMethod(', ')', 'StringDigitSubstitute'),
  \ dotnet#method('get_DigitSubstitutionLanguage(', ')', 'int32'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('FormatFlags', 'StringFormatFlags'),
  \ dotnet#prop('Alignment', 'StringAlignment'),
  \ dotnet#prop('LineAlignment', 'StringAlignment'),
  \ dotnet#prop('HotkeyPrefix', 'HotkeyPrefix'),
  \ dotnet#prop('Trimming', 'StringTrimming'),
  \ dotnet#prop('GenericDefault', 'StringFormat'),
  \ dotnet#prop('GenericTypographic', 'StringFormat'),
  \ dotnet#prop('DigitSubstitutionMethod', 'StringDigitSubstitute'),
  \ dotnet#prop('DigitSubstitutionLanguage', 'int32'),
  \ ])

call dotnet#class('TextureBrush', 'Brush', [ 
  \ dotnet#method('TextureBrush(', 'class Image bitmap)', 'void'),
  \ dotnet#method('TextureBrush(', 'class Image image, WrapMode wrapMode)', 'void'),
  \ dotnet#method('TextureBrush(', 'class Image image, WrapMode wrapMode, RectangleF dstRect)', 'void'),
  \ dotnet#method('TextureBrush(', 'class Image image, WrapMode wrapMode, Rectangle dstRect)', 'void'),
  \ dotnet#method('TextureBrush(', 'class Image image, RectangleF dstRect)', 'void'),
  \ dotnet#method('TextureBrush(', 'class Image image, RectangleF dstRect, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('TextureBrush(', 'class Image image, Rectangle dstRect)', 'void'),
  \ dotnet#method('TextureBrush(', 'class Image image, Rectangle dstRect, ImageAttributes imageAttr)', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('get_Transform(', ')', 'Matrix'),
  \ dotnet#method('set_Transform(', 'class Matrix value)', 'void'),
  \ dotnet#method('get_WrapMode(', ')', 'WrapMode'),
  \ dotnet#method('set_WrapMode(', 'WrapMode value)', 'void'),
  \ dotnet#method('get_Image(', ')', 'Image'),
  \ dotnet#method('ResetTransform(', ')', 'void'),
  \ dotnet#method('MultiplyTransform(', 'class Matrix matrix)', 'void'),
  \ dotnet#method('MultiplyTransform(', 'class Matrix matrix, MatrixOrder order)', 'void'),
  \ dotnet#method('TranslateTransform(', 'float32 dx, float32 dy)', 'void'),
  \ dotnet#method('TranslateTransform(', 'float32 dx, float32 dy, MatrixOrder order)', 'void'),
  \ dotnet#method('ScaleTransform(', 'float32 sx, float32 sy)', 'void'),
  \ dotnet#method('ScaleTransform(', 'float32 sx, float32 sy, MatrixOrder order)', 'void'),
  \ dotnet#method('RotateTransform(', 'float32 angle)', 'void'),
  \ dotnet#method('RotateTransform(', 'float32 angle, MatrixOrder order)', 'void'),
  \ dotnet#prop('Transform', 'Matrix'),
  \ dotnet#prop('WrapMode', 'WrapMode'),
  \ dotnet#prop('Image', 'Image'),
  \ ])

