call dotnet#namespace('System.Windows.Data')

call dotnet#class('DataSourceProvider', 'Object', [ 
  \ dotnet#method('DataSourceProvider(', ')', 'void'),
  \ dotnet#method('InitialLoad(', ')', 'void'),
  \ dotnet#method('Refresh(', ')', 'void'),
  \ dotnet#method('get_IsInitialLoadEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsInitialLoadEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_Data(', ')', 'object'),
  \ dotnet#method('add_DataChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DataChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_Error(', ')', 'Exception'),
  \ dotnet#method('DeferRefresh(', ')', ''),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('get_IsRefreshDeferred(', ')', 'bool'),
  \ dotnet#method('get_Dispatcher(', ')', 'Dispatcher'),
  \ dotnet#method('set_Dispatcher(', 'class Dispatcher value)', 'void'),
  \ dotnet#method('BeginQuery(', ')', 'void'),
  \ dotnet#method('OnQueryFinished(', 'object newData)', 'void'),
  \ dotnet#method('OnQueryFinished(', 'object newData, Exception error, DispatcherOperationCallback completionWork, object callbackArguments)', 'void'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'class PropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('DataSourceProvider(', ')', 'static void .'),
  \ dotnet#event('DataChanged', 'EventHandler'),
  \ dotnet#event('PropertyChanged', 'PropertyChangedEventHandler'),
  \ dotnet#prop('IsInitialLoadEnabled', 'bool'),
  \ dotnet#prop('Data', 'object'),
  \ dotnet#prop('Error', 'Exception'),
  \ dotnet#prop('IsRefreshDeferred', 'bool'),
  \ dotnet#prop('Dispatcher', 'Dispatcher'),
  \ ])

call dotnet#class('CollectionView', 'DispatcherObject', [ 
  \ dotnet#method('CollectionView(', 'class CollectionView collectionView, IEnumerator baseEnumerator, NewItemPlaceholderPosition placeholderPosition, object newItem)', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', 'object'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('CollectionView(', 'class IEnumerable collection)', 'void'),
  \ dotnet#method('CollectionView(', 'class IEnumerable collection, int32 moveToFirst)', 'void'),
  \ dotnet#method('CollectionView(', 'class IEnumerable collection, bool shouldProcessCollectionChanged)', 'void'),
  \ dotnet#method('get_Culture(', ')', ''),
  \ dotnet#method('set_Culture(', 'class CultureInfo value)', 'void'),
  \ dotnet#method('Contains(', 'object item)', 'bool'),
  \ dotnet#method('get_SourceCollection(', ')', ''),
  \ dotnet#method('get_Filter(', ')', ''),
  \ dotnet#method('set_Filter(', 'class Predicate value)', 'void'),
  \ dotnet#method('get_CanFilter(', ')', 'bool'),
  \ dotnet#method('get_SortDescriptions(', ')', ''),
  \ dotnet#method('get_CanSort(', ')', 'bool'),
  \ dotnet#method('get_CanGroup(', ')', 'bool'),
  \ dotnet#method('get_GroupDescriptions(', ')', ''),
  \ dotnet#method('get_Groups(', ')', ''),
  \ dotnet#method('Refresh(', ')', 'void'),
  \ dotnet#method('RefreshInternal(', ')', 'void'),
  \ dotnet#method('DeferRefresh(', ')', ''),
  \ dotnet#method('get_CurrentItem(', ')', 'object'),
  \ dotnet#method('get_CurrentPosition(', ')', 'int32'),
  \ dotnet#method('get_IsCurrentAfterLast(', ')', 'bool'),
  \ dotnet#method('get_IsCurrentBeforeFirst(', ')', 'bool'),
  \ dotnet#method('MoveCurrentToFirst(', ')', 'bool'),
  \ dotnet#method('MoveCurrentToLast(', ')', 'bool'),
  \ dotnet#method('MoveCurrentToNext(', ')', 'bool'),
  \ dotnet#method('MoveCurrentToPrevious(', ')', 'bool'),
  \ dotnet#method('MoveCurrentTo(', 'object item)', 'bool'),
  \ dotnet#method('MoveCurrentToPosition(', 'int32 position)', 'bool'),
  \ dotnet#method('add_CurrentChanging(', 'class CurrentChangingEventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentChanging(', 'class CurrentChangingEventHandler value)', 'void'),
  \ dotnet#method('add_CurrentChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('PassesFilter(', 'object item)', 'bool'),
  \ dotnet#method('IndexOf(', 'object item)', 'int32'),
  \ dotnet#method('GetItemAt(', 'int32 index)', 'object'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Comparer(', ')', ''),
  \ dotnet#method('get_NeedsRefresh(', ')', 'bool'),
  \ dotnet#method('get_NewItemPlaceholder(', ')', 'static object'),
  \ dotnet#method('add_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('add_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void '),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('OnPropertyChanged(', 'class PropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('RefreshOverride(', ')', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'family'),
  \ dotnet#method('OnCollectionChanged(', 'class NotifyCollectionChangedEventArgs args)', 'void'),
  \ dotnet#method('SetCurrent(', 'object newItem, int32 newPosition)', 'void'),
  \ dotnet#method('SetCurrent(', 'object newItem, int32 newPosition, int32 count)', 'void'),
  \ dotnet#method('OKToChangeCurrent(', ')', 'bool'),
  \ dotnet#method('OnCurrentChanging(', ')', 'void'),
  \ dotnet#method('OnCurrentChanging(', 'class CurrentChangingEventArgs args)', 'void'),
  \ dotnet#method('OnCurrentChanged(', ')', 'void'),
  \ dotnet#method('ProcessCollectionChanged(', 'class NotifyCollectionChangedEventArgs args)', 'void'),
  \ dotnet#method('OnCollectionChanged(', 'object sender, NotifyCollectionChangedEventArgs args)', 'void'),
  \ dotnet#method('OnBeginChangeLogging(', 'class NotifyCollectionChangedEventArgs args)', 'void'),
  \ dotnet#method('ClearChangeLog(', ')', 'void'),
  \ dotnet#method('RefreshOrDefer(', ')', 'void'),
  \ dotnet#method('get_IsDynamic(', ')', 'bool'),
  \ dotnet#method('get_UpdatedOutsideDispatcher(', ')', 'bool'),
  \ dotnet#method('get_IsRefreshDeferred(', ')', 'bool'),
  \ dotnet#method('get_IsCurrentInSync(', ')', 'bool'),
  \ dotnet#method('SetViewManagerData(', 'object value)', 'void'),
  \ dotnet#method('HasReliableHashCodes(', ')', 'strict bool'),
  \ dotnet#method('VerifyRefreshNotDeferred(', ')', 'void'),
  \ dotnet#method('InvalidateEnumerableWrapper(', ')', 'void'),
  \ dotnet#method('GetItemProperties(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('GetItemType(', 'bool useRepresentativeItem)', 'Type'),
  \ dotnet#method('GetRepresentativeItem(', ')', 'object'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Timestamp(', ')', 'int32'),
  \ dotnet#method('CollectionView(', ')', 'static void .'),
  \ dotnet#event('CurrentChanging', 'CurrentChangingEventHandler'),
  \ dotnet#event('CurrentChanged', 'EventHandler'),
  \ dotnet#event('CollectionChanged', 'NotifyCollectionChangedEventHandler'),
  \ dotnet#event('PropertyChanged', 'PropertyChangedEventHandler'),
  \ dotnet#prop('Culture', 'CultureInfo'),
  \ dotnet#prop('SourceCollection', 'IEnumerable'),
  \ dotnet#prop('Filter', 'Predicate'),
  \ dotnet#prop('CanFilter', 'bool'),
  \ dotnet#prop('SortDescriptions', 'SortDescriptionCollection'),
  \ dotnet#prop('CanSort', 'bool'),
  \ dotnet#prop('CanGroup', 'bool'),
  \ dotnet#prop('GroupDescriptions', 'ObservableCollection'),
  \ dotnet#prop('Groups', 'ReadOnlyObservableCollection'),
  \ dotnet#prop('CurrentItem', 'object'),
  \ dotnet#prop('CurrentPosition', 'int32'),
  \ dotnet#prop('IsCurrentAfterLast', 'bool'),
  \ dotnet#prop('IsCurrentBeforeFirst', 'bool'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('Comparer', 'IComparer'),
  \ dotnet#prop('NeedsRefresh', 'bool'),
  \ dotnet#prop('NewItemPlaceholder', 'object'),
  \ dotnet#prop('IsDynamic', 'bool'),
  \ dotnet#prop('UpdatedOutsideDispatcher', 'bool'),
  \ dotnet#prop('IsRefreshDeferred', 'bool'),
  \ dotnet#prop('IsCurrentInSync', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Timestamp', 'int32'),
  \ ])

call dotnet#class('CollectionViewGroup', 'Object', [ 
  \ dotnet#method('CollectionViewGroup(', 'object name)', 'void'),
  \ dotnet#method('get_Name(', ')', 'object'),
  \ dotnet#method('get_Items(', ')', 'ReadOnlyObservableCollection'),
  \ dotnet#method('get_ItemCount(', ')', 'int32'),
  \ dotnet#method('get_IsBottomLevel(', ')', 'abstract bool'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'class PropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('get_ProtectedItems(', ')', 'ObservableCollection'),
  \ dotnet#method('get_ProtectedItemCount(', ')', 'int32'),
  \ dotnet#method('set_ProtectedItemCount(', 'int32 value)', 'void'),
  \ dotnet#event('PropertyChanged', 'PropertyChangedEventHandler'),
  \ dotnet#prop('Name', 'object'),
  \ dotnet#prop('Items', 'ReadOnlyObservableCollection'),
  \ dotnet#prop('ItemCount', 'int32'),
  \ dotnet#prop('IsBottomLevel', 'bool'),
  \ dotnet#prop('ProtectedItems', 'ObservableCollection'),
  \ dotnet#prop('ProtectedItemCount', 'int32'),
  \ ])

call dotnet#class('BindingBase', 'MarkupExtension', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('BindingBase(', ')', 'void'),
  \ dotnet#method('get_FallbackValue(', ')', 'object'),
  \ dotnet#method('set_FallbackValue(', 'object value)', 'void'),
  \ dotnet#method('ShouldSerializeFallbackValue(', ')', 'bool'),
  \ dotnet#method('get_StringFormat(', ')', 'string'),
  \ dotnet#method('set_StringFormat(', 'string value)', 'void'),
  \ dotnet#method('get_TargetNullValue(', ')', 'object'),
  \ dotnet#method('set_TargetNullValue(', 'object value)', 'void'),
  \ dotnet#method('ShouldSerializeTargetNullValue(', ')', 'bool'),
  \ dotnet#method('get_BindingGroupName(', ')', 'string'),
  \ dotnet#method('set_BindingGroupName(', 'string value)', 'void'),
  \ dotnet#method('ProvideValue(', 'class IServiceProvider serviceProvider)', 'object'),
  \ dotnet#method('CreateBindingExpressionOverride(', 'class DependencyObject targetObject, DependencyProperty targetProperty, BindingExpressionBase owner)', 'abstract strict'),
  \ dotnet#method('TestFlag(', 'BindingBase/BindingFlags flag)', 'bool'),
  \ dotnet#method('SetFlag(', 'BindingBase/BindingFlags flag)', 'void'),
  \ dotnet#method('ClearFlag(', 'BindingBase/BindingFlags flag)', 'void'),
  \ dotnet#method('ChangeFlag(', 'BindingBase/BindingFlags flag, bool value)', 'void'),
  \ dotnet#method('GetFlagsWithinMask(', 'BindingBase/BindingFlags mask)', 'BindingBase/BindingFlags'),
  \ dotnet#method('ChangeFlagsWithinMask(', 'BindingBase/BindingFlags mask, BindingBase/BindingFlags flags)', 'void'),
  \ dotnet#method('FlagsFrom(', 'BindingMode bindingMode)', 'static BindingBase/BindingFlags'),
  \ dotnet#method('FlagsFrom(', 'UpdateSourceTrigger updateSourceTrigger)', 'static BindingBase/BindingFlags'),
  \ dotnet#method('get_Flags(', ')', '.method'),
  \ dotnet#method('get_ConverterCultureInternal(', ')', 'strict'),
  \ dotnet#method('get_ValidationRulesInternal(', ')', 'strict'),
  \ dotnet#method('CreateBindingExpression(', 'class DependencyObject targetObject, DependencyProperty targetProperty)', 'BindingExpressionBase'),
  \ dotnet#method('CreateBindingExpression(', 'class DependencyObject targetObject, DependencyProperty targetProperty, BindingExpressionBase owner)', 'BindingExpressionBase'),
  \ dotnet#method('CheckSealed(', ')', 'void'),
  \ dotnet#method('GetValidationRule(', 'class Type type)', 'ValidationRule'),
  \ dotnet#method('LookupValidationRule(', 'class Type type)', 'strict'),
  \ dotnet#method('LookupValidationRule(', 'class Type type, Collection collection)', 'static ValidationRule'),
  \ dotnet#method('Clone(', 'BindingMode mode)', 'BindingBase'),
  \ dotnet#method('InitializeClone(', 'class BindingBase clone, BindingMode mode)', 'strict void'),
  \ dotnet#method('CreateClone(', ')', 'abstract strict'),
  \ dotnet#prop('FallbackValue', 'object'),
  \ dotnet#prop('StringFormat', 'string'),
  \ dotnet#prop('TargetNullValue', 'object'),
  \ dotnet#prop('BindingGroupName', 'string'),
  \ dotnet#prop('Flags', 'BindingBase/BindingFlags'),
  \ dotnet#prop('ConverterCultureInternal', 'CultureInfo'),
  \ dotnet#prop('ValidationRulesInternal', 'Collection'),
  \ ])

call dotnet#class('Binding', 'BindingBase', [ 
  \ dotnet#method('AddSourceUpdatedHandler(', 'class DependencyObject element, EventHandler handler)', 'static void'),
  \ dotnet#method('RemoveSourceUpdatedHandler(', 'class DependencyObject element, EventHandler handler)', 'static void'),
  \ dotnet#method('AddTargetUpdatedHandler(', 'class DependencyObject element, EventHandler handler)', 'static void'),
  \ dotnet#method('RemoveTargetUpdatedHandler(', 'class DependencyObject element, EventHandler handler)', 'static void'),
  \ dotnet#method('GetXmlNamespaceManager(', 'class DependencyObject target)', 'static XmlNamespaceManager'),
  \ dotnet#method('SetXmlNamespaceManager(', 'class DependencyObject target, XmlNamespaceManager value)', 'static void'),
  \ dotnet#method('Binding(', ')', 'void'),
  \ dotnet#method('Binding(', 'string path)', 'void'),
  \ dotnet#method('get_ValidationRules(', ')', 'Collection'),
  \ dotnet#method('ShouldSerializeValidationRules(', ')', 'bool'),
  \ dotnet#method('get_ValidatesOnExceptions(', ')', 'bool'),
  \ dotnet#method('set_ValidatesOnExceptions(', 'bool value)', 'void'),
  \ dotnet#method('get_ValidatesOnDataErrors(', ')', 'bool'),
  \ dotnet#method('set_ValidatesOnDataErrors(', 'bool value)', 'void'),
  \ dotnet#method('get_Path(', ')', 'PropertyPath'),
  \ dotnet#method('set_Path(', 'class PropertyPath value)', 'void'),
  \ dotnet#method('ShouldSerializePath(', ')', 'bool'),
  \ dotnet#method('get_XPath(', ')', 'string'),
  \ dotnet#method('set_XPath(', 'string value)', 'void'),
  \ dotnet#method('get_Mode(', ')', 'BindingMode'),
  \ dotnet#method('set_Mode(', 'BindingMode value)', 'void'),
  \ dotnet#method('get_UpdateSourceTrigger(', ')', 'UpdateSourceTrigger'),
  \ dotnet#method('set_UpdateSourceTrigger(', 'UpdateSourceTrigger value)', 'void'),
  \ dotnet#method('get_NotifyOnSourceUpdated(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnSourceUpdated(', 'bool value)', 'void'),
  \ dotnet#method('get_NotifyOnTargetUpdated(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnTargetUpdated(', 'bool value)', 'void'),
  \ dotnet#method('get_NotifyOnValidationError(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnValidationError(', 'bool value)', 'void'),
  \ dotnet#method('get_Converter(', ')', 'IValueConverter'),
  \ dotnet#method('set_Converter(', 'class IValueConverter value)', 'void'),
  \ dotnet#method('get_ConverterParameter(', ')', 'object'),
  \ dotnet#method('set_ConverterParameter(', 'object value)', 'void'),
  \ dotnet#method('get_ConverterCulture(', ')', 'CultureInfo'),
  \ dotnet#method('set_ConverterCulture(', 'class CultureInfo value)', 'void'),
  \ dotnet#method('get_Source(', ')', 'object'),
  \ dotnet#method('set_Source(', 'object value)', 'void'),
  \ dotnet#method('ShouldSerializeSource(', ')', 'bool'),
  \ dotnet#method('get_RelativeSource(', ')', 'RelativeSource'),
  \ dotnet#method('set_RelativeSource(', 'class RelativeSource value)', 'void'),
  \ dotnet#method('get_ElementName(', ')', 'string'),
  \ dotnet#method('set_ElementName(', 'string value)', 'void'),
  \ dotnet#method('get_IsAsync(', ')', 'bool'),
  \ dotnet#method('set_IsAsync(', 'bool value)', 'void'),
  \ dotnet#method('get_AsyncState(', ')', 'object'),
  \ dotnet#method('set_AsyncState(', 'object value)', 'void'),
  \ dotnet#method('get_BindsDirectlyToSource(', ')', 'bool'),
  \ dotnet#method('set_BindsDirectlyToSource(', 'bool value)', 'void'),
  \ dotnet#method('get_UpdateSourceExceptionFilter(', ')', 'UpdateSourceExceptionFilterCallback'),
  \ dotnet#method('set_UpdateSourceExceptionFilter(', 'class UpdateSourceExceptionFilterCallback value)', 'void'),
  \ dotnet#method('CreateBindingExpressionOverride(', 'class DependencyObject target, DependencyProperty dp, BindingExpressionBase owner)', 'strict'),
  \ dotnet#method('LookupValidationRule(', 'class Type type)', 'strict'),
  \ dotnet#method('DoFilterException(', 'object bindExpr, Exception exception)', 'object'),
  \ dotnet#method('UsePath(', 'class PropertyPath path)', 'void'),
  \ dotnet#method('CreateClone(', ')', 'strict'),
  \ dotnet#method('InitializeClone(', 'class BindingBase baseClone, BindingMode mode)', 'strict void'),
  \ dotnet#method('get_ConverterCultureInternal(', ')', 'strict'),
  \ dotnet#method('get_SourceReference(', ')', '.method'),
  \ dotnet#method('set_SourceReference(', 'class ObjectRef value)', 'void'),
  \ dotnet#method('get_WorkerData(', ')', 'object'),
  \ dotnet#method('set_WorkerData(', 'object value)', 'void'),
  \ dotnet#method('get_TreeContextIsRequired(', ')', 'bool'),
  \ dotnet#method('get_ValidationRulesInternal(', ')', 'strict'),
  \ dotnet#method('get_TransfersDefaultValue(', ')', 'bool'),
  \ dotnet#method('set_TransfersDefaultValue(', 'bool value)', 'void'),
  \ dotnet#method('Binding(', ')', 'static void .'),
  \ dotnet#prop('ValidationRules', 'Collection'),
  \ dotnet#prop('ValidatesOnExceptions', 'bool'),
  \ dotnet#prop('ValidatesOnDataErrors', 'bool'),
  \ dotnet#prop('Path', 'PropertyPath'),
  \ dotnet#prop('XPath', 'string'),
  \ dotnet#prop('Mode', 'BindingMode'),
  \ dotnet#prop('UpdateSourceTrigger', 'UpdateSourceTrigger'),
  \ dotnet#prop('NotifyOnSourceUpdated', 'bool'),
  \ dotnet#prop('NotifyOnTargetUpdated', 'bool'),
  \ dotnet#prop('NotifyOnValidationError', 'bool'),
  \ dotnet#prop('Converter', 'IValueConverter'),
  \ dotnet#prop('ConverterParameter', 'object'),
  \ dotnet#prop('ConverterCulture', 'CultureInfo'),
  \ dotnet#prop('Source', 'object'),
  \ dotnet#prop('RelativeSource', 'RelativeSource'),
  \ dotnet#prop('ElementName', 'string'),
  \ dotnet#prop('IsAsync', 'bool'),
  \ dotnet#prop('AsyncState', 'object'),
  \ dotnet#prop('BindsDirectlyToSource', 'bool'),
  \ dotnet#prop('UpdateSourceExceptionFilter', 'UpdateSourceExceptionFilterCallback'),
  \ dotnet#prop('ConverterCultureInternal', 'CultureInfo'),
  \ dotnet#prop('SourceReference', 'ObjectRef'),
  \ dotnet#prop('WorkerData', 'object'),
  \ dotnet#prop('TreeContextIsRequired', 'bool'),
  \ dotnet#prop('ValidationRulesInternal', 'Collection'),
  \ dotnet#prop('TransfersDefaultValue', 'bool'),
  \ ])

call dotnet#class('UpdateSourceExceptionFilterCallback', 'MulticastDelegate', [ 
  \ dotnet#method('UpdateSourceExceptionFilterCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object bindExpression, Exception exception)', 'object'),
  \ dotnet#method('BeginInvoke(', 'object bindExpression, Exception exception, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'object'),
  \ ])

call dotnet#class('BindingExpressionBase', 'Expression', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('BindingExpressionBase(', 'class BindingExpression bindingExpression, object rawValue, object convertedValue)', 'void'),
  \ dotnet#method('get_BindingExpression(', ')', '.method'),
  \ dotnet#method('get_RawValue(', ')', 'object'),
  \ dotnet#method('get_ConvertedValue(', ')', 'object'),
  \ dotnet#prop('BindingExpression', 'BindingExpression'),
  \ dotnet#prop('RawValue', 'object'),
  \ dotnet#prop('ConvertedValue', 'object'),
  \ dotnet#method('BindingExpressionBase(', 'class BindingBase binding, BindingExpressionBase parent)', 'void'),
  \ dotnet#method('get_ParentBindingBase(', ')', 'BindingBase'),
  \ dotnet#method('get_Status(', ')', 'BindingStatus'),
  \ dotnet#method('get_ValidationError(', ')', ''),
  \ dotnet#method('get_HasError(', ')', 'bool'),
  \ dotnet#method('UpdateTarget(', ')', 'void'),
  \ dotnet#method('UpdateSource(', ')', 'void'),
  \ dotnet#method('ValidateWithoutUpdate(', ')', 'bool'),
  \ dotnet#method('OnAttach(', 'class DependencyObject d, DependencyProperty dp)', 'void'),
  \ dotnet#method('OnDetach(', 'class DependencyObject d, DependencyProperty dp)', 'void'),
  \ dotnet#method('OnPropertyInvalidation(', 'class DependencyObject d, DependencyPropertyChangedEventArgs args)', 'strict void'),
  \ dotnet#method('GetSources(', ')', 'strict'),
  \ dotnet#method('Copy(', 'class DependencyObject targetObject, DependencyProperty targetDP)', 'strict'),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool '),
  \ dotnet#method('CreateUntargetedBindingExpression(', 'class DependencyObject d, BindingBase binding)', 'static BindingExpressionBase'),
  \ dotnet#method('Attach(', 'class DependencyObject d)', 'void'),
  \ dotnet#method('add_ValueChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ValueChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_IsAttaching(', ')', 'bool'),
  \ dotnet#method('set_IsAttaching(', 'bool value)', 'void'),
  \ dotnet#method('get_IsDetaching(', ')', 'bool'),
  \ dotnet#method('set_IsDetaching(', 'bool value)', 'void'),
  \ dotnet#method('get_IsDynamic(', ')', 'bool'),
  \ dotnet#method('get_IsReflective(', ')', 'bool'),
  \ dotnet#method('set_IsReflective(', 'bool value)', 'void'),
  \ dotnet#method('get_UseDefaultValueConverter(', ')', 'bool'),
  \ dotnet#method('set_UseDefaultValueConverter(', 'bool value)', 'void'),
  \ dotnet#method('get_IsOneWayToSource(', ')', 'bool'),
  \ dotnet#method('get_IsUpdateOnPropertyChanged(', ')', 'bool'),
  \ dotnet#method('get_IsUpdateOnLostFocus(', ')', 'bool'),
  \ dotnet#method('get_IsTransferPending(', ')', 'bool'),
  \ dotnet#method('set_IsTransferPending(', 'bool value)', 'void'),
  \ dotnet#method('get_TransferIsDeferred(', ')', 'bool'),
  \ dotnet#method('set_TransferIsDeferred(', 'bool value)', 'void'),
  \ dotnet#method('get_IsInTransfer(', ')', 'bool'),
  \ dotnet#method('set_IsInTransfer(', 'bool value)', 'void'),
  \ dotnet#method('get_IsInUpdate(', ')', 'bool'),
  \ dotnet#method('set_IsInUpdate(', 'bool value)', 'void'),
  \ dotnet#method('get_UsingFallbackValue(', ')', 'bool'),
  \ dotnet#method('set_UsingFallbackValue(', 'bool value)', 'void'),
  \ dotnet#method('get_UsingMentor(', ')', 'bool'),
  \ dotnet#method('set_UsingMentor(', 'bool value)', 'void'),
  \ dotnet#method('get_ResolveNamesInTemplate(', ')', 'bool'),
  \ dotnet#method('set_ResolveNamesInTemplate(', 'bool value)', 'void'),
  \ dotnet#method('get_NeedsDataTransfer(', ')', 'bool'),
  \ dotnet#method('set_NeedsDataTransfer(', 'bool value)', 'void'),
  \ dotnet#method('get_NeedsUpdate(', ')', 'bool'),
  \ dotnet#method('set_NeedsUpdate(', 'bool value)', 'void'),
  \ dotnet#method('get_NeedsValidation(', ')', 'bool'),
  \ dotnet#method('set_NeedsValidation(', 'bool value)', 'void'),
  \ dotnet#method('get_NotifyOnTargetUpdated(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnTargetUpdated(', 'bool value)', 'void'),
  \ dotnet#method('get_NotifyOnSourceUpdated(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnSourceUpdated(', 'bool value)', 'void'),
  \ dotnet#method('get_NotifyOnValidationError(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnValidationError(', 'bool value)', 'void'),
  \ dotnet#method('get_IsInPriorityBindingExpression(', ')', 'bool'),
  \ dotnet#method('get_IsInMultiBindingExpression(', ')', 'bool'),
  \ dotnet#method('get_IsInBindingExpressionCollection(', ')', 'bool'),
  \ dotnet#method('get_ValidatesOnExceptions(', ')', 'bool'),
  \ dotnet#method('get_ValidatesOnDataErrors(', ')', 'bool'),
  \ dotnet#method('get_ParentMultiBindingExpression(', ')', '.method'),
  \ dotnet#method('get_ParentPriorityBindingExpression(', ')', '.method'),
  \ dotnet#method('get_ParentBindingExpressionBase(', ')', '.method'),
  \ dotnet#method('get_FallbackValue(', ')', 'object'),
  \ dotnet#method('get_DefaultValue(', ')', 'object'),
  \ dotnet#method('get_EffectiveStringFormat(', ')', 'string'),
  \ dotnet#method('get_EffectiveTargetNullValue(', ')', 'object'),
  \ dotnet#method('get_RootBindingExpression(', ')', '.method'),
  \ dotnet#method('get_BindingGroup(', ')', '.method'),
  \ dotnet#method('get_IsParentBindingUpdateTriggerDefault(', ')', 'strict bool'),
  \ dotnet#method('get_UsesLanguage(', ')', 'bool'),
  \ dotnet#method('AttachOverride(', 'class DependencyObject target, DependencyProperty dp)', 'strict bool'),
  \ dotnet#method('DetachOverride(', ')', 'strict void'),
  \ dotnet#method('InvalidateChild(', 'class BindingExpressionBase bindingExpression)', 'abstract strict void'),
  \ dotnet#method('ChangeSourcesForChild(', 'class BindingExpressionBase bindingExpression, WeakDependencySource[] newSources)', 'abstract strict void'),
  \ dotnet#method('ReplaceChild(', 'class BindingExpressionBase bindingExpression)', 'abstract strict void'),
  \ dotnet#method('HandlePropertyInvalidation(', 'class DependencyObject d, DependencyPropertyChangedEventArgs args)', 'abstract strict void'),
  \ dotnet#method('OnBindingGroupChanged(', 'bool joining)', 'void'),
  \ dotnet#method('UpdateBindingGroup(', 'class BindingGroup bg)', 'abstract strict void'),
  \ dotnet#method('UpdateValue(', ')', 'void'),
  \ dotnet#method('GetRawProposedValue(', ')', 'strict object'),
  \ dotnet#method('ConvertProposedValue(', 'object rawValue)', 'abstract strict object'),
  \ dotnet#method('ObtainConvertedProposedValue(', 'class BindingGroup bindingGroup)', 'abstract strict bool'),
  \ dotnet#method('UpdateSource(', 'object convertedValue)', 'abstract strict object'),
  \ dotnet#method('UpdateSource(', 'class BindingGroup bindingGroup)', 'abstract strict bool'),
  \ dotnet#method('CommitSource(', 'object value)', 'strict object'),
  \ dotnet#method('StoreValueInBindingGroup(', 'object value, BindingGroup bindingGroup)', 'abstract strict void'),
  \ dotnet#method('Validate(', 'object value, ValidationStep validationStep)', 'strict bool'),
  \ dotnet#method('CheckValidationRules(', 'class BindingGroup bindingGroup, ValidationStep validationStep)', 'abstract strict bool'),
  \ dotnet#method('ValidateAndConvertProposedValue(', '[out] Collection& values)', 'abstract strict bool'),
  \ dotnet#method('GetCulture(', ')', 'CultureInfo'),
  \ dotnet#method('InvalidateCulture(', ')', 'void'),
  \ dotnet#method('BeginSourceUpdate(', ')', 'void'),
  \ dotnet#method('EndSourceUpdate(', ')', 'void'),
  \ dotnet#method('ShouldUpdateWithCurrentValue(', 'class DependencyObject target, [out] object& currentValue)', 'bool'),
  \ dotnet#method('ChangeValue(', 'object newValue, bool notify)', 'void'),
  \ dotnet#method('Dirty(', ')', 'void'),
  \ dotnet#method('Invalidate(', 'bool isASubPropertyChange)', 'void'),
  \ dotnet#method('UseFallbackValue(', ')', 'object'),
  \ dotnet#method('IsNullValue(', 'object value)', 'bool'),
  \ dotnet#method('NullValueForType(', 'class Type type)', 'object'),
  \ dotnet#method('LookupValidationRule(', 'class Type type)', 'ValidationRule'),
  \ dotnet#method('JoinBindingGroup(', 'bool isReflective, DependencyObject contextElement)', 'void'),
  \ dotnet#method('LeaveBindingGroup(', ')', 'void'),
  \ dotnet#method('RejoinBindingGroup(', 'bool isReflective, DependencyObject contextElement)', 'void'),
  \ dotnet#method('FindBindingGroup(', 'bool isReflective, DependencyObject contextElement)', 'BindingGroup'),
  \ dotnet#method('JoinBindingGroup(', 'class BindingGroup bg, bool explicitJoin)', 'void'),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'strict bool'),
  \ dotnet#method('get_TargetProperty(', ')', '.method'),
  \ dotnet#method('get_TargetElement(', ')', '.method'),
  \ dotnet#method('get_TargetElementReference(', ')', '.method'),
  \ dotnet#method('get_Engine(', ')', '.method'),
  \ dotnet#method('get_Dispatcher(', ')', '.method'),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('set_Value(', 'object value)', 'void'),
  \ dotnet#method('get_WeakSources(', ')', '.method'),
  \ dotnet#method('get_IsDisconnected(', ')', 'strict bool'),
  \ dotnet#method('get_TraceLog(', ')', '.method'),
  \ dotnet#method('Attach(', 'class DependencyObject target, DependencyProperty dp)', 'void'),
  \ dotnet#method('Detach(', ')', 'void'),
  \ dotnet#method('Disconnect(', ')', 'strict void'),
  \ dotnet#method('SetStatus(', 'BindingStatus status)', 'void'),
  \ dotnet#method('ConvertFallbackValue(', 'object value, DependencyProperty dp, object sender)', 'static object'),
  \ dotnet#method('ConvertTargetNullValue(', 'object value, DependencyProperty dp, object sender)', 'static object'),
  \ dotnet#method('get_TraceLevel(', ')', '.method'),
  \ dotnet#method('Activate(', ')', 'strict void'),
  \ dotnet#method('Deactivate(', ')', 'strict void'),
  \ dotnet#method('Update(', 'bool synchronous)', 'strict void'),
  \ dotnet#method('UpdateValidationError(', 'class ValidationError validationError)', 'void'),
  \ dotnet#method('AddValidationError(', 'class ValidationError validationError)', 'void'),
  \ dotnet#method('RemoveValidationError(', 'class ValidationError validationError)', 'void'),
  \ dotnet#method('GetValidationErrors(', 'ValidationStep validationStep)', 'ValidationError'),
  \ dotnet#method('ChangeSources(', 'class WeakDependencySource[] newSources)', 'void'),
  \ dotnet#method('CombineSources(', 'int32 index, Collection bindingExpressions, int32 count, WeakDependencySource[] newSources)', 'static WeakDependencySource[]'),
  \ dotnet#method('ResolvePropertyDefaultSettings(', 'BindingMode mode, UpdateSourceTrigger updateTrigger, FrameworkPropertyMetadata fwMetaData)', 'void'),
  \ dotnet#method('GetDefaultUpdateSourceTrigger(', 'class FrameworkPropertyMetadata fwMetaData)', 'UpdateSourceTrigger'),
  \ dotnet#method('SetUpdateSourceTrigger(', 'UpdateSourceTrigger ust)', 'void'),
  \ dotnet#method('GetEffectiveTargetType(', ')', 'Type'),
  \ dotnet#method('DetermineEffectiveStringFormat(', ')', 'void'),
  \ dotnet#method('DetermineEffectiveTargetNullValue(', ')', 'void'),
  \ dotnet#method('CreateReference(', 'object item)', 'static object'),
  \ dotnet#method('CreateReference(', 'class WeakReference item)', 'static object'),
  \ dotnet#method('ReplaceReference(', 'object oldReference, object item)', 'static object'),
  \ dotnet#method('GetReference(', 'object reference)', 'static object'),
  \ dotnet#method('InitializeTracing(', 'class BindingExpressionBase expr, DependencyObject d, DependencyProperty dp)', 'static void'),
  \ dotnet#method('BindingExpressionBase(', ')', 'static void .'),
  \ dotnet#event('ValueChanged', 'EventHandler'),
  \ dotnet#prop('ParentBindingBase', 'BindingBase'),
  \ dotnet#prop('Status', 'BindingStatus'),
  \ dotnet#prop('ValidationError', 'ValidationError'),
  \ dotnet#prop('HasError', 'bool'),
  \ dotnet#prop('IsAttaching', 'bool'),
  \ dotnet#prop('IsDetaching', 'bool'),
  \ dotnet#prop('IsDynamic', 'bool'),
  \ dotnet#prop('IsReflective', 'bool'),
  \ dotnet#prop('UseDefaultValueConverter', 'bool'),
  \ dotnet#prop('IsOneWayToSource', 'bool'),
  \ dotnet#prop('IsUpdateOnPropertyChanged', 'bool'),
  \ dotnet#prop('IsUpdateOnLostFocus', 'bool'),
  \ dotnet#prop('IsTransferPending', 'bool'),
  \ dotnet#prop('TransferIsDeferred', 'bool'),
  \ dotnet#prop('IsInTransfer', 'bool'),
  \ dotnet#prop('IsInUpdate', 'bool'),
  \ dotnet#prop('UsingFallbackValue', 'bool'),
  \ dotnet#prop('UsingMentor', 'bool'),
  \ dotnet#prop('ResolveNamesInTemplate', 'bool'),
  \ dotnet#prop('NeedsDataTransfer', 'bool'),
  \ dotnet#prop('NeedsUpdate', 'bool'),
  \ dotnet#prop('NeedsValidation', 'bool'),
  \ dotnet#prop('NotifyOnTargetUpdated', 'bool'),
  \ dotnet#prop('NotifyOnSourceUpdated', 'bool'),
  \ dotnet#prop('NotifyOnValidationError', 'bool'),
  \ dotnet#prop('IsInPriorityBindingExpression', 'bool'),
  \ dotnet#prop('IsInMultiBindingExpression', 'bool'),
  \ dotnet#prop('IsInBindingExpressionCollection', 'bool'),
  \ dotnet#prop('ValidatesOnExceptions', 'bool'),
  \ dotnet#prop('ValidatesOnDataErrors', 'bool'),
  \ dotnet#prop('ParentMultiBindingExpression', 'MultiBindingExpression'),
  \ dotnet#prop('ParentPriorityBindingExpression', 'PriorityBindingExpression'),
  \ dotnet#prop('ParentBindingExpressionBase', 'BindingExpressionBase'),
  \ dotnet#prop('FallbackValue', 'object'),
  \ dotnet#prop('DefaultValue', 'object'),
  \ dotnet#prop('EffectiveStringFormat', 'string'),
  \ dotnet#prop('EffectiveTargetNullValue', 'object'),
  \ dotnet#prop('RootBindingExpression', 'BindingExpressionBase'),
  \ dotnet#prop('BindingGroup', 'BindingGroup'),
  \ dotnet#prop('IsParentBindingUpdateTriggerDefault', 'bool'),
  \ dotnet#prop('UsesLanguage', 'bool'),
  \ dotnet#prop('TargetProperty', 'DependencyProperty'),
  \ dotnet#prop('TargetElement', 'DependencyObject'),
  \ dotnet#prop('TargetElementReference', 'WeakReference'),
  \ dotnet#prop('Engine', 'DataBindEngine'),
  \ dotnet#prop('Dispatcher', 'Dispatcher'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('WeakSources', 'WeakDependencySource[]'),
  \ dotnet#prop('IsDisconnected', 'bool'),
  \ dotnet#prop('TraceLog', 'TraceLog'),
  \ dotnet#prop('TraceLevel', 'TraceEventType'),
  \ ])

call dotnet#class('BindingExpression', 'BindingExpressionBase', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('TransferValue(', ')', 'void '),
  \ dotnet#method('UpdateValue(', ')', 'void '),
  \ dotnet#method('AttachToContext(', 'bool lastChance)', 'bool '),
  \ dotnet#method('VerifySourceReference(', 'bool lastChance)', 'void '),
  \ dotnet#method('OnTargetUpdated(', ')', 'void '),
  \ dotnet#method('get_TargetElement(', ')', ''),
  \ dotnet#method('get_ParentBinding(', ')', 'Binding'),
  \ dotnet#method('get_DataItem(', ')', 'object'),
  \ dotnet#method('get_DataSource(', ')', 'object'),
  \ dotnet#method('UpdateSource(', ')', 'void'),
  \ dotnet#method('UpdateTarget(', ')', 'void'),
  \ dotnet#method('GetValue(', 'class DependencyObject d, DependencyProperty dp)', 'strict object'),
  \ dotnet#method('SetValue(', 'class DependencyObject d, DependencyProperty dp, object value)', 'strict bool'),
  \ dotnet#method('OnPropertyInvalidation(', 'class DependencyObject d, DependencyPropertyChangedEventArgs args)', 'strict void'),
  \ dotnet#method('InvalidateChild(', 'class BindingExpressionBase bindingExpression)', 'strict void'),
  \ dotnet#method('ChangeSourcesForChild(', 'class BindingExpressionBase bindingExpression, WeakDependencySource[] newSources)', 'strict void'),
  \ dotnet#method('ReplaceChild(', 'class BindingExpressionBase bindingExpression)', 'strict void'),
  \ dotnet#method('UpdateBindingGroup(', 'class BindingGroup bg)', 'strict void'),
  \ dotnet#method('get_ContextElement(', ')', '.method'),
  \ dotnet#method('get_CollectionViewSource(', ')', '.method'),
  \ dotnet#method('set_CollectionViewSource(', 'class CollectionViewSource value)', 'void'),
  \ dotnet#method('get_IgnoreSourcePropertyChange(', ')', 'bool'),
  \ dotnet#method('get_Path(', ')', '.method'),
  \ dotnet#method('get_Converter(', ')', '.method'),
  \ dotnet#method('set_Converter(', 'class IValueConverter value)', 'void'),
  \ dotnet#method('get_ConverterSourceType(', ')', '.method'),
  \ dotnet#method('get_SourceItem(', ')', 'object'),
  \ dotnet#method('get_SourcePropertyName(', ')', 'string'),
  \ dotnet#method('get_SourceValue(', ')', 'object'),
  \ dotnet#method('get_IsParentBindingUpdateTriggerDefault(', ')', 'strict bool'),
  \ dotnet#method('get_IsDisconnected(', ')', 'strict bool'),
  \ dotnet#method('CreateBindingExpression(', 'class DependencyObject d, DependencyProperty dp, Binding binding, BindingExpressionBase parent)', 'static BindingExpression'),
  \ dotnet#method('SetupDefaultValueConverter(', 'class Type type)', 'void'),
  \ dotnet#method('HasLocalDataContext(', 'class DependencyObject d)', 'static bool'),
  \ dotnet#method('AttachOverride(', 'class DependencyObject target, DependencyProperty dp)', 'strict bool'),
  \ dotnet#method('DetachOverride(', ')', 'strict void'),
  \ dotnet#method('Activate(', ')', 'strict void'),
  \ dotnet#method('Activate(', 'object item)', 'void'),
  \ dotnet#method('Deactivate(', ')', 'strict void'),
  \ dotnet#method('Disconnect(', ')', 'strict void'),
  \ dotnet#method('ChangeWorkerSources(', 'class WeakDependencySource[] newWorkerSources, int32 n)', 'void'),
  \ dotnet#method('TransferValue(', 'object newValue, bool isASubPropertyChange)', 'void'),
  \ dotnet#method('ScheduleTransfer(', 'bool isASubPropertyChange)', 'void'),
  \ dotnet#method('Update(', 'bool synchronous)', 'strict void'),
  \ dotnet#method('ConvertProposedValue(', 'object value)', 'strict object'),
  \ dotnet#method('ObtainConvertedProposedValue(', 'class BindingGroup bindingGroup)', 'strict bool'),
  \ dotnet#method('UpdateSource(', 'object value)', 'strict object'),
  \ dotnet#method('UpdateSource(', 'class BindingGroup bindingGroup)', 'strict bool'),
  \ dotnet#method('StoreValueInBindingGroup(', 'object value, BindingGroup bindingGroup)', 'strict void'),
  \ dotnet#method('Validate(', 'object value, ValidationStep validationStep)', 'strict bool'),
  \ dotnet#method('CheckValidationRules(', 'class BindingGroup bindingGroup, ValidationStep validationStep)', 'strict bool'),
  \ dotnet#method('ValidateAndConvertProposedValue(', '[out] Collection& values)', 'strict bool'),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool '),
  \ dotnet#method('ChangingValue(', ')', 'IDisposable'),
  \ dotnet#method('CancelPendingTasks(', ')', 'void'),
  \ dotnet#method('OnTargetUpdated(', 'class DependencyObject d, DependencyProperty dp)', 'static void'),
  \ dotnet#method('OnSourceUpdated(', 'class DependencyObject d, DependencyProperty dp)', 'static void'),
  \ dotnet#method('HandlePropertyInvalidation(', 'class DependencyObject d, DependencyPropertyChangedEventArgs args)', 'strict void'),
  \ dotnet#method('BindingExpression(', ')', 'static void .'),
  \ dotnet#prop('TargetElement', 'DependencyObject'),
  \ dotnet#prop('ParentBinding', 'Binding'),
  \ dotnet#prop('DataItem', 'object'),
  \ dotnet#prop('DataSource', 'object'),
  \ dotnet#prop('ContextElement', 'DependencyObject'),
  \ dotnet#prop('CollectionViewSource', 'CollectionViewSource'),
  \ dotnet#prop('IgnoreSourcePropertyChange', 'bool'),
  \ dotnet#prop('Path', 'PropertyPath'),
  \ dotnet#prop('Converter', 'IValueConverter'),
  \ dotnet#prop('ConverterSourceType', 'Type'),
  \ dotnet#prop('SourceItem', 'object'),
  \ dotnet#prop('SourcePropertyName', 'string'),
  \ dotnet#prop('SourceValue', 'object'),
  \ dotnet#prop('IsParentBindingUpdateTriggerDefault', 'bool'),
  \ dotnet#prop('IsDisconnected', 'bool'),
  \ ])

call dotnet#class('BindingGroup', 'DependencyObject', [ 
  \ dotnet#method('BindingGroup(', 'object item, string propertyName, object rawValue, object convertedValue, BindingExpression bindExpr)', 'void'),
  \ dotnet#method('get_Item(', ')', 'object'),
  \ dotnet#method('get_PropertyName(', ')', 'string'),
  \ dotnet#method('get_RawValue(', ')', 'object'),
  \ dotnet#method('get_ConvertedValue(', ')', 'object'),
  \ dotnet#method('get_ValidationError(', ')', ''),
  \ dotnet#method('get_Binding(', ')', ''),
  \ dotnet#method('get_ItemReference(', ')', ''),
  \ dotnet#method('get_Dependents(', ')', ''),
  \ dotnet#method('AddDependent(', 'class BindingExpressionBase dependent)', 'void'),
  \ dotnet#prop('Item', 'object'),
  \ dotnet#prop('PropertyName', 'string'),
  \ dotnet#prop('RawValue', 'object'),
  \ dotnet#prop('ConvertedValue', 'object'),
  \ dotnet#prop('ValidationError', 'ValidationError'),
  \ dotnet#prop('Binding', 'Binding'),
  \ dotnet#prop('ItemReference', 'WeakReference'),
  \ dotnet#prop('Dependents', 'Collection'),
  \ dotnet#method('BindingGroup(', ')', 'void'),
  \ dotnet#method('BindingGroup(', 'class BindingGroup master)', 'void'),
  \ dotnet#method('get_ValidationRules(', ')', 'Collection'),
  \ dotnet#method('get_BindingExpressions(', ')', 'Collection'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_NotifyOnValidationError(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnValidationError(', 'bool value)', 'void'),
  \ dotnet#method('get_SharesProposedValues(', ')', 'bool'),
  \ dotnet#method('set_SharesProposedValues(', 'bool value)', 'void'),
  \ dotnet#method('get_CanRestoreValues(', ')', 'bool'),
  \ dotnet#method('get_Items(', ')', 'IList'),
  \ dotnet#method('BeginEdit(', ')', 'void'),
  \ dotnet#method('CommitEdit(', ')', 'bool'),
  \ dotnet#method('CancelEdit(', ')', 'void'),
  \ dotnet#method('ValidateWithoutUpdate(', ')', 'bool'),
  \ dotnet#method('UpdateSources(', ')', 'bool'),
  \ dotnet#method('GetValue(', 'object item, string propertyName)', 'object'),
  \ dotnet#method('TryGetValue(', 'object item, string propertyName, [out] object& value)', 'bool'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#method('UpdateTable(', 'class BindingExpression bindingExpression)', 'void'),
  \ dotnet#method('AddToValueTable(', 'class BindingExpressionBase bindingExpressionBase)', 'void'),
  \ dotnet#method('GetValue(', 'class BindingExpressionBase bindingExpressionBase)', 'object'),
  \ dotnet#method('SetValue(', 'class BindingExpressionBase bindingExpressionBase, object value)', 'void'),
  \ dotnet#method('UseSourceValue(', 'class BindingExpressionBase bindingExpressionBase)', 'void'),
  \ dotnet#method('GetProposedValueEntry(', 'object item, string propertyName)', 'BindingGroup/ProposedValueEntry'),
  \ dotnet#method('RemoveProposedValueEntry(', 'class BindingGroup/ProposedValueEntry entry)', 'void'),
  \ dotnet#method('AddBindingForProposedValue(', 'class BindingExpressionBase dependent, object item, string propertyName)', 'void'),
  \ dotnet#method('AddValidationError(', 'class ValidationError validationError)', 'void'),
  \ dotnet#method('RemoveValidationError(', 'class ValidationError validationError)', 'void'),
  \ dotnet#method('BindingGroup(', ')', 'static void .'),
  \ dotnet#prop('ValidationRules', 'Collection'),
  \ dotnet#prop('BindingExpressions', 'Collection'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('NotifyOnValidationError', 'bool'),
  \ dotnet#prop('SharesProposedValues', 'bool'),
  \ dotnet#prop('CanRestoreValues', 'bool'),
  \ dotnet#prop('Items', 'IList'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ ])

call dotnet#class('BindingListCollectionView', 'CollectionView', [ 
  \ dotnet#method('BindingListCollectionView(', 'class IBindingList list)', 'void'),
  \ dotnet#method('PassesFilter(', 'object item)', 'bool'),
  \ dotnet#method('Contains(', 'object item)', 'bool'),
  \ dotnet#method('MoveCurrentToPosition(', 'int32 position)', 'bool'),
  \ dotnet#method('Compare(', 'object o1, object o2)', 'int32 '),
  \ dotnet#method('IndexOf(', 'object item)', 'int32'),
  \ dotnet#method('GetItemAt(', 'int32 index)', 'object'),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('get_SortDescriptions(', ')', ''),
  \ dotnet#method('get_CanSort(', ')', 'bool'),
  \ dotnet#method('get_CanFilter(', ')', 'bool'),
  \ dotnet#method('get_CustomFilter(', ')', 'string'),
  \ dotnet#method('set_CustomFilter(', 'string value)', 'void'),
  \ dotnet#method('get_CanCustomFilter(', ')', 'bool'),
  \ dotnet#method('get_CanGroup(', ')', 'bool'),
  \ dotnet#method('get_GroupDescriptions(', ')', ''),
  \ dotnet#method('get_Groups(', ')', ''),
  \ dotnet#method('get_GroupBySelBindingListCollectionView(', ')', 'GroupDescriptionSelBindingListCollectionViewCallback'),
  \ dotnet#method('set_GroupBySelBindingListCollectionView(', 'class GroupDescriptionSelBindingListCollectionViewCallback value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_IsDataInGroupOrder(', ')', 'bool'),
  \ dotnet#method('set_IsDataInGroupOrder(', 'bool value)', 'void'),
  \ dotnet#method('get_NewItemPlaceholderPosition(', ')', ''),
  \ dotnet#method('set_NewItemPlaceholderPosition(', 'NewItemPlaceholderPosition value)', 'void'),
  \ dotnet#method('get_CanAddNew(', ')', 'bool'),
  \ dotnet#method('AddNew(', ')', 'object'),
  \ dotnet#method('CommitNew(', ')', 'void'),
  \ dotnet#method('CancelNew(', ')', 'void'),
  \ dotnet#method('get_IsAddingNew(', ')', 'bool'),
  \ dotnet#method('get_CurrentAddItem(', ')', 'object'),
  \ dotnet#method('get_CanRemove(', ')', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('Remove(', 'object item)', 'void'),
  \ dotnet#method('EditItem(', 'object item)', 'void'),
  \ dotnet#method('CommitEdit(', ')', 'void'),
  \ dotnet#method('CancelEdit(', ')', 'void'),
  \ dotnet#method('get_CanCancelEdit(', ')', 'bool'),
  \ dotnet#method('get_IsEditingItem(', ')', 'bool'),
  \ dotnet#method('get_CurrentEditItem(', ')', 'object'),
  \ dotnet#method('get_ItemProperties(', ')', ''),
  \ dotnet#method('RefreshOverride(', ')', 'void'),
  \ dotnet#method('OnBeginChangeLogging(', 'class NotifyCollectionChangedEventArgs args)', 'void'),
  \ dotnet#method('ProcessCollectionChanged(', 'class NotifyCollectionChangedEventArgs args)', 'void'),
  \ dotnet#prop('SortDescriptions', 'SortDescriptionCollection'),
  \ dotnet#prop('CanSort', 'bool'),
  \ dotnet#prop('CanFilter', 'bool'),
  \ dotnet#prop('CustomFilter', 'string'),
  \ dotnet#prop('CanCustomFilter', 'bool'),
  \ dotnet#prop('CanGroup', 'bool'),
  \ dotnet#prop('GroupDescriptions', 'ObservableCollection'),
  \ dotnet#prop('Groups', 'ReadOnlyObservableCollection'),
  \ dotnet#prop('GroupBySelBindingListCollectionView', 'GroupDescriptionSelBindingListCollectionViewCallback'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('IsDataInGroupOrder', 'bool'),
  \ dotnet#prop('NewItemPlaceholderPosition', 'NewItemPlaceholderPosition'),
  \ dotnet#prop('CanAddNew', 'bool'),
  \ dotnet#prop('IsAddingNew', 'bool'),
  \ dotnet#prop('CurrentAddItem', 'object'),
  \ dotnet#prop('CanRemove', 'bool'),
  \ dotnet#prop('CanCancelEdit', 'bool'),
  \ dotnet#prop('IsEditingItem', 'bool'),
  \ dotnet#prop('CurrentEditItem', 'object'),
  \ dotnet#prop('ItemProperties', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('BindingOperations', 'Object', [ 
  \ dotnet#method('SetBinding(', 'class DependencyObject target, DependencyProperty dp, BindingBase binding)', 'static BindingExpressionBase'),
  \ dotnet#method('GetBindingBase(', 'class DependencyObject target, DependencyProperty dp)', 'static BindingBase'),
  \ dotnet#method('GetBinding(', 'class DependencyObject target, DependencyProperty dp)', 'static Binding'),
  \ dotnet#method('GetPriorityBinding(', 'class DependencyObject target, DependencyProperty dp)', 'static PriorityBinding'),
  \ dotnet#method('GetMultiBinding(', 'class DependencyObject target, DependencyProperty dp)', 'static MultiBinding'),
  \ dotnet#method('GetBindingExpressionBase(', 'class DependencyObject target, DependencyProperty dp)', 'static BindingExpressionBase'),
  \ dotnet#method('GetBindingExpression(', 'class DependencyObject target, DependencyProperty dp)', 'static BindingExpression'),
  \ dotnet#method('GetMultiBindingExpression(', 'class DependencyObject target, DependencyProperty dp)', 'static MultiBindingExpression'),
  \ dotnet#method('GetPriorityBindingExpression(', 'class DependencyObject target, DependencyProperty dp)', 'static PriorityBindingExpression'),
  \ dotnet#method('ClearBinding(', 'class DependencyObject target, DependencyProperty dp)', 'static void'),
  \ dotnet#method('ClearAllBindings(', 'class DependencyObject target)', 'static void'),
  \ dotnet#method('IsDataBound(', 'class DependencyObject target, DependencyProperty dp)', 'static bool'),
  \ dotnet#method('IsValidUpdateSourceTrigger(', 'UpdateSourceTrigger value)', 'static bool'),
  \ dotnet#method('get_IsCleanupEnabled(', ')', 'static bool'),
  \ dotnet#method('set_IsCleanupEnabled(', 'bool value)', 'static void'),
  \ dotnet#method('Cleanup(', ')', 'static bool'),
  \ dotnet#method('PrintStats(', ')', 'static void'),
  \ dotnet#method('get_TraceAccessorTableSize(', ')', 'static bool'),
  \ dotnet#method('set_TraceAccessorTableSize(', 'bool value)', 'static void'),
  \ dotnet#prop('IsCleanupEnabled', 'bool'),
  \ dotnet#prop('TraceAccessorTableSize', 'bool'),
  \ ])

call dotnet#class('CollectionContainer', 'DependencyObject', [ 
  \ dotnet#method('get_Collection(', ')', 'IEnumerable'),
  \ dotnet#method('set_Collection(', 'class IEnumerable value)', 'void'),
  \ dotnet#method('ShouldSerializeCollection(', ')', 'bool'),
  \ dotnet#method('get_View(', ')', '.method'),
  \ dotnet#method('get_ViewCount(', ')', 'int32'),
  \ dotnet#method('get_ViewIsEmpty(', ')', 'bool'),
  \ dotnet#method('ViewItem(', 'int32 index)', 'object'),
  \ dotnet#method('ViewIndexOf(', 'object item)', 'int32'),
  \ dotnet#method('add_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void '),
  \ dotnet#method('add_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('OnContainedCollectionChanged(', 'class NotifyCollectionChangedEventArgs args)', 'void'),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool '),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool'),
  \ dotnet#method('CollectionContainer(', ')', 'void'),
  \ dotnet#method('CollectionContainer(', ')', 'static void .'),
  \ dotnet#event('CollectionChanged', 'NotifyCollectionChangedEventHandler'),
  \ dotnet#prop('Collection', 'IEnumerable'),
  \ dotnet#prop('View', 'ICollectionView'),
  \ dotnet#prop('ViewCount', 'int32'),
  \ dotnet#prop('ViewIsEmpty', 'bool'),
  \ ])

call dotnet#class('CollectionViewSource', 'DependencyObject', [ 
  \ dotnet#method('CollectionViewSource(', ')', 'void'),
  \ dotnet#method('get_View(', ')', 'ICollectionView'),
  \ dotnet#method('get_Source(', ')', 'object'),
  \ dotnet#method('set_Source(', 'object value)', 'void'),
  \ dotnet#method('OnSourceChanged(', 'object oldSource, object newSource)', 'void'),
  \ dotnet#method('get_CollectionViewType(', ')', 'Type'),
  \ dotnet#method('set_CollectionViewType(', 'class Type value)', 'void'),
  \ dotnet#method('OnCollectionViewTypeChanged(', 'class Type oldCollectionViewType, Type newCollectionViewType)', 'void'),
  \ dotnet#method('get_Culture(', ')', 'CultureInfo'),
  \ dotnet#method('set_Culture(', 'class CultureInfo value)', 'void'),
  \ dotnet#method('get_SortDescriptions(', ')', 'SortDescriptionCollection'),
  \ dotnet#method('get_GroupDescriptions(', ')', 'ObservableCollection'),
  \ dotnet#method('add_Filter(', 'class FilterEventHandler value)', 'void'),
  \ dotnet#method('remove_Filter(', 'class FilterEventHandler value)', 'void'),
  \ dotnet#method('GetDefaultView(', 'object source)', 'static ICollectionView'),
  \ dotnet#method('IsDefaultView(', 'class ICollectionView view)', 'static bool'),
  \ dotnet#method('DeferRefresh(', ')', 'IDisposable'),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool '),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool'),
  \ dotnet#method('get_CollectionView(', ')', '.method'),
  \ dotnet#method('get_PropertyForInheritanceContext(', ')', '.method'),
  \ dotnet#method('GetDefaultCollectionView(', 'object source, bool createView)', 'static CollectionView'),
  \ dotnet#method('GetDefaultCollectionView(', 'object source, DependencyObject d)', 'static CollectionView'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#method('IsShareableInTemplate(', ')', 'bool'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('CollectionViewSource(', ')', 'static void .'),
  \ dotnet#event('Filter', 'FilterEventHandler'),
  \ dotnet#prop('View', 'ICollectionView'),
  \ dotnet#prop('Source', 'object'),
  \ dotnet#prop('CollectionViewType', 'Type'),
  \ dotnet#prop('Culture', 'CultureInfo'),
  \ dotnet#prop('SortDescriptions', 'SortDescriptionCollection'),
  \ dotnet#prop('GroupDescriptions', 'ObservableCollection'),
  \ dotnet#prop('CollectionView', 'CollectionView'),
  \ dotnet#prop('PropertyForInheritanceContext', 'DependencyProperty'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('CompositeCollection', 'Object', [ 
  \ dotnet#method('CompositeCollection(', ')', 'void'),
  \ dotnet#method('CompositeCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object newItem)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object containItem)', 'bool'),
  \ dotnet#method('IndexOf(', 'object indexItem)', 'int32'),
  \ dotnet#method('Insert(', 'int32 insertIndex, object insertItem)', 'void'),
  \ dotnet#method('Remove(', 'object removeItem)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 removeIndex)', 'void'),
  \ dotnet#method('CreateView(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Item(', 'int32 itemIndex)', 'object'),
  \ dotnet#method('set_Item(', 'int32 itemIndex, object value)', 'void'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('add_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void '),
  \ dotnet#method('add_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool '),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool'),
  \ dotnet#method('add_ContainedCollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_ContainedCollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#event('CollectionChanged', 'NotifyCollectionChangedEventHandler'),
  \ dotnet#event('ContainedCollectionChanged', 'NotifyCollectionChangedEventHandler'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ ])

call dotnet#class('DataChangedEventManager', 'WeakEventManager', [ 
  \ dotnet#method('AddListener(', 'class DataSourceProvider source, IWeakEventListener listener)', 'static void'),
  \ dotnet#method('RemoveListener(', 'class DataSourceProvider source, IWeakEventListener listener)', 'static void'),
  \ dotnet#method('StartListening(', 'object source)', 'void'),
  \ dotnet#method('StopListening(', 'object source)', 'void'),
  \ dotnet#method('DataChangedEventManager(', ')', 'void'),
  \ ])

call dotnet#class('DataTransferEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('DataTransferEventArgs(', 'class DependencyObject targetObject, DependencyProperty dp)', 'void'),
  \ dotnet#method('get_TargetObject(', ')', 'DependencyObject'),
  \ dotnet#method('get_Property(', ')', 'DependencyProperty'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('TargetObject', 'DependencyObject'),
  \ dotnet#prop('Property', 'DependencyProperty'),
  \ ])

call dotnet#class('FilterEventArgs', 'EventArgs', [ 
  \ dotnet#method('FilterEventArgs(', 'object item)', 'void'),
  \ dotnet#method('get_Item(', ')', 'object'),
  \ dotnet#method('get_Accepted(', ')', 'bool'),
  \ dotnet#method('set_Accepted(', 'bool value)', 'void'),
  \ dotnet#prop('Item', 'object'),
  \ dotnet#prop('Accepted', 'bool'),
  \ ])

call dotnet#class('FilterEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('FilterEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, FilterEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, FilterEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ListCollectionView', 'CollectionView', [ 
  \ dotnet#method('ListCollectionView(', 'class IList list)', 'void'),
  \ dotnet#method('RefreshOverride(', ')', 'void'),
  \ dotnet#method('Contains(', 'object item)', 'bool'),
  \ dotnet#method('MoveCurrentToPosition(', 'int32 position)', 'bool'),
  \ dotnet#method('get_CanGroup(', ')', 'bool'),
  \ dotnet#method('get_GroupDescriptions(', ')', ''),
  \ dotnet#method('get_Groups(', ')', ''),
  \ dotnet#method('PassesFilter(', 'object item)', 'bool'),
  \ dotnet#method('IndexOf(', 'object item)', 'int32'),
  \ dotnet#method('GetItemAt(', 'int32 index)', 'object'),
  \ dotnet#method('Compare(', 'object o1, object o2)', 'int32 '),
  \ dotnet#method('Compare(', 'object o1, object o2)', 'int32'),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('get_SortDescriptions(', ')', ''),
  \ dotnet#method('get_CanSort(', ')', 'bool'),
  \ dotnet#method('get_CanFilter(', ')', 'bool'),
  \ dotnet#method('get_Filter(', ')', ''),
  \ dotnet#method('set_Filter(', 'class Predicate value)', 'void'),
  \ dotnet#method('get_CustomSort(', ')', 'IComparer'),
  \ dotnet#method('set_CustomSort(', 'class IComparer value)', 'void'),
  \ dotnet#method('get_GroupBySelListCollectionView(', ')', ''),
  \ dotnet#method('set_GroupBySelListCollectionView(', 'class GroupDescriptionSelListCollectionViewCallback value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_IsDataInGroupOrder(', ')', 'bool'),
  \ dotnet#method('set_IsDataInGroupOrder(', 'bool value)', 'void'),
  \ dotnet#method('get_NewItemPlaceholderPosition(', ')', ''),
  \ dotnet#method('set_NewItemPlaceholderPosition(', 'NewItemPlaceholderPosition value)', 'void'),
  \ dotnet#method('get_CanAddNew(', ')', 'bool'),
  \ dotnet#method('get_CanAddNewItem(', ')', 'bool'),
  \ dotnet#method('AddNew(', ')', 'object'),
  \ dotnet#method('AddNewItem(', 'object newItem)', 'object'),
  \ dotnet#method('CommitNew(', ')', 'void'),
  \ dotnet#method('CancelNew(', ')', 'void'),
  \ dotnet#method('get_IsAddingNew(', ')', 'bool'),
  \ dotnet#method('get_CurrentAddItem(', ')', 'object'),
  \ dotnet#method('get_CanRemove(', ')', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('Remove(', 'object item)', 'void'),
  \ dotnet#method('EditItem(', 'object item)', 'void'),
  \ dotnet#method('CommitEdit(', ')', 'void'),
  \ dotnet#method('CancelEdit(', ')', 'void'),
  \ dotnet#method('get_CanCancelEdit(', ')', 'bool'),
  \ dotnet#method('get_IsEditingItem(', ')', 'bool'),
  \ dotnet#method('get_CurrentEditItem(', ')', 'object'),
  \ dotnet#method('get_ItemProperties(', ')', ''),
  \ dotnet#method('OnBeginChangeLogging(', 'class NotifyCollectionChangedEventArgs args)', 'void'),
  \ dotnet#method('ProcessCollectionChanged(', 'class NotifyCollectionChangedEventArgs args)', 'void'),
  \ dotnet#method('InternalIndexOf(', 'object item)', 'int32'),
  \ dotnet#method('InternalItemAt(', 'int32 index)', 'object'),
  \ dotnet#method('InternalContains(', 'object item)', 'bool'),
  \ dotnet#method('InternalGetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('get_UsesLocalArray(', ')', 'bool'),
  \ dotnet#method('get_InternalList(', ')', 'IList'),
  \ dotnet#method('get_ActiveComparer(', ')', 'IComparer'),
  \ dotnet#method('set_ActiveComparer(', 'class IComparer value)', 'void'),
  \ dotnet#method('get_ActiveFilter(', ')', 'Predicate'),
  \ dotnet#method('set_ActiveFilter(', 'class Predicate value)', 'void'),
  \ dotnet#method('get_IsGrouping(', ')', 'bool'),
  \ dotnet#method('get_InternalCount(', ')', 'int32'),
  \ dotnet#method('get_ShadowCollection(', ')', '.method'),
  \ dotnet#method('set_ShadowCollection(', 'class ArrayList value)', 'void'),
  \ dotnet#method('AdjustShadowCopy(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('get_HasSortDescriptions(', ')', 'bool'),
  \ dotnet#prop('CanGroup', 'bool'),
  \ dotnet#prop('GroupDescriptions', 'ObservableCollection'),
  \ dotnet#prop('Groups', 'ReadOnlyObservableCollection'),
  \ dotnet#prop('SortDescriptions', 'SortDescriptionCollection'),
  \ dotnet#prop('CanSort', 'bool'),
  \ dotnet#prop('CanFilter', 'bool'),
  \ dotnet#prop('Filter', 'Predicate'),
  \ dotnet#prop('CustomSort', 'IComparer'),
  \ dotnet#prop('GroupBySelListCollectionView', 'GroupDescriptionSelListCollectionViewCallback'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('IsDataInGroupOrder', 'bool'),
  \ dotnet#prop('NewItemPlaceholderPosition', 'NewItemPlaceholderPosition'),
  \ dotnet#prop('CanAddNew', 'bool'),
  \ dotnet#prop('CanAddNewItem', 'bool'),
  \ dotnet#prop('IsAddingNew', 'bool'),
  \ dotnet#prop('CurrentAddItem', 'object'),
  \ dotnet#prop('CanRemove', 'bool'),
  \ dotnet#prop('CanCancelEdit', 'bool'),
  \ dotnet#prop('IsEditingItem', 'bool'),
  \ dotnet#prop('CurrentEditItem', 'object'),
  \ dotnet#prop('ItemProperties', 'ReadOnlyCollection'),
  \ dotnet#prop('UsesLocalArray', 'bool'),
  \ dotnet#prop('InternalList', 'IList'),
  \ dotnet#prop('ActiveComparer', 'IComparer'),
  \ dotnet#prop('ActiveFilter', 'Predicate'),
  \ dotnet#prop('IsGrouping', 'bool'),
  \ dotnet#prop('InternalCount', 'int32'),
  \ dotnet#prop('ShadowCollection', 'ArrayList'),
  \ dotnet#prop('HasSortDescriptions', 'bool'),
  \ ])

call dotnet#class('GroupDescriptionSelGroupDescriptionSelectorCallbackCallback', 'MulticastDelegate', [ 
  \ dotnet#method('GroupDescriptionSelectorCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class CollectionViewGroup group, int32 level)', ''),
  \ dotnet#method('BeginInvoke(', 'class CollectionViewGroup group, int32 level, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('MultiBinding', 'BindingBase', [ 
  \ dotnet#method('MultiBinding(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_Bindings(', ')', 'Collection'),
  \ dotnet#method('ShouldSerializeBindings(', ')', 'bool'),
  \ dotnet#method('get_Mode(', ')', 'BindingMode'),
  \ dotnet#method('set_Mode(', 'BindingMode value)', 'void'),
  \ dotnet#method('get_UpdateSourceTrigger(', ')', 'UpdateSourceTrigger'),
  \ dotnet#method('set_UpdateSourceTrigger(', 'UpdateSourceTrigger value)', 'void'),
  \ dotnet#method('get_NotifyOnSourceUpdated(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnSourceUpdated(', 'bool value)', 'void'),
  \ dotnet#method('get_NotifyOnTargetUpdated(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnTargetUpdated(', 'bool value)', 'void'),
  \ dotnet#method('get_NotifyOnValidationError(', ')', 'bool'),
  \ dotnet#method('set_NotifyOnValidationError(', 'bool value)', 'void'),
  \ dotnet#method('get_Converter(', ')', 'IMultiValueConverter'),
  \ dotnet#method('set_Converter(', 'class IMultiValueConverter value)', 'void'),
  \ dotnet#method('get_ConverterParameter(', ')', 'object'),
  \ dotnet#method('set_ConverterParameter(', 'object value)', 'void'),
  \ dotnet#method('get_ConverterCulture(', ')', 'CultureInfo'),
  \ dotnet#method('set_ConverterCulture(', 'class CultureInfo value)', 'void'),
  \ dotnet#method('get_ValidationRules(', ')', 'Collection'),
  \ dotnet#method('ShouldSerializeValidationRules(', ')', 'bool'),
  \ dotnet#method('get_UpdateSourceExceptionFilter(', ')', 'UpdateSourceExceptionFilterCallback'),
  \ dotnet#method('set_UpdateSourceExceptionFilter(', 'class UpdateSourceExceptionFilterCallback value)', 'void'),
  \ dotnet#method('get_ValidatesOnExceptions(', ')', 'bool'),
  \ dotnet#method('set_ValidatesOnExceptions(', 'bool value)', 'void'),
  \ dotnet#method('get_ValidatesOnDataErrors(', ')', 'bool'),
  \ dotnet#method('set_ValidatesOnDataErrors(', 'bool value)', 'void'),
  \ dotnet#method('CreateBindingExpressionOverride(', 'class DependencyObject target, DependencyProperty dp, BindingExpressionBase owner)', 'strict'),
  \ dotnet#method('LookupValidationRule(', 'class Type type)', 'strict'),
  \ dotnet#method('DoFilterException(', 'object bindExpr, Exception exception)', 'object'),
  \ dotnet#method('CheckTrigger(', 'class BindingBase bb)', 'static void'),
  \ dotnet#method('CreateClone(', ')', 'strict'),
  \ dotnet#method('InitializeClone(', 'class BindingBase baseClone, BindingMode mode)', 'strict void'),
  \ dotnet#method('get_ValidationRulesInternal(', ')', 'strict'),
  \ dotnet#method('get_ConverterCultureInternal(', ')', 'strict'),
  \ dotnet#prop('Bindings', 'Collection'),
  \ dotnet#prop('Mode', 'BindingMode'),
  \ dotnet#prop('UpdateSourceTrigger', 'UpdateSourceTrigger'),
  \ dotnet#prop('NotifyOnSourceUpdated', 'bool'),
  \ dotnet#prop('NotifyOnTargetUpdated', 'bool'),
  \ dotnet#prop('NotifyOnValidationError', 'bool'),
  \ dotnet#prop('Converter', 'IMultiValueConverter'),
  \ dotnet#prop('ConverterParameter', 'object'),
  \ dotnet#prop('ConverterCulture', 'CultureInfo'),
  \ dotnet#prop('ValidationRules', 'Collection'),
  \ dotnet#prop('UpdateSourceExceptionFilter', 'UpdateSourceExceptionFilterCallback'),
  \ dotnet#prop('ValidatesOnExceptions', 'bool'),
  \ dotnet#prop('ValidatesOnDataErrors', 'bool'),
  \ dotnet#prop('ValidationRulesInternal', 'Collection'),
  \ dotnet#prop('ConverterCultureInternal', 'CultureInfo'),
  \ ])

call dotnet#class('MultiBindingExpression', 'BindingExpressionBase', [ 
  \ dotnet#method('TransferValue(', ')', 'void '),
  \ dotnet#method('UpdateValue(', ')', 'void '),
  \ dotnet#method('AttachToContext(', 'bool lastChance)', 'bool '),
  \ dotnet#method('VerifySourceReference(', 'bool lastChance)', 'void '),
  \ dotnet#method('OnTargetUpdated(', ')', 'void '),
  \ dotnet#method('get_TargetElement(', ')', ''),
  \ dotnet#method('get_ParentMultiBinding(', ')', 'MultiBinding'),
  \ dotnet#method('get_BindingExpressions(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('UpdateSource(', ')', 'void'),
  \ dotnet#method('UpdateTarget(', ')', 'void'),
  \ dotnet#method('GetValue(', 'class DependencyObject d, DependencyProperty dp)', 'strict object'),
  \ dotnet#method('SetValue(', 'class DependencyObject d, DependencyProperty dp, object value)', 'strict bool'),
  \ dotnet#method('get_IsParentBindingUpdateTriggerDefault(', ')', 'strict bool'),
  \ dotnet#method('CreateBindingExpression(', 'class DependencyObject d, DependencyProperty dp, MultiBinding binding, BindingExpressionBase owner)', 'static MultiBindingExpression'),
  \ dotnet#method('get_ValidationError(', ')', ''),
  \ dotnet#method('get_HasError(', ')', 'bool'),
  \ dotnet#method('AttachOverride(', 'class DependencyObject d, DependencyProperty dp)', 'strict bool'),
  \ dotnet#method('DetachOverride(', ')', 'strict void'),
  \ dotnet#method('InvalidateChild(', 'class BindingExpressionBase bindingExpression)', 'strict void'),
  \ dotnet#method('ChangeSourcesForChild(', 'class BindingExpressionBase bindingExpression, WeakDependencySource[] newSources)', 'strict void'),
  \ dotnet#method('ReplaceChild(', 'class BindingExpressionBase bindingExpression)', 'strict void'),
  \ dotnet#method('UpdateBindingGroup(', 'class BindingGroup bg)', 'strict void'),
  \ dotnet#method('ConvertProposedValue(', 'object value)', 'strict object'),
  \ dotnet#method('ObtainConvertedProposedValue(', 'class BindingGroup bindingGroup)', 'strict bool'),
  \ dotnet#method('UpdateSource(', 'object convertedValue)', 'strict object'),
  \ dotnet#method('UpdateSource(', 'class BindingGroup bindingGroup)', 'strict bool'),
  \ dotnet#method('StoreValueInBindingGroup(', 'object value, BindingGroup bindingGroup)', 'strict void'),
  \ dotnet#method('Validate(', 'object value, ValidationStep validationStep)', 'strict bool'),
  \ dotnet#method('CheckValidationRules(', 'class BindingGroup bindingGroup, ValidationStep validationStep)', 'strict bool'),
  \ dotnet#method('ValidateAndConvertProposedValue(', '[out] Collection& values)', 'strict bool'),
  \ dotnet#method('HandlePropertyInvalidation(', 'class DependencyObject d, DependencyPropertyChangedEventArgs args)', 'strict void'),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'strict bool'),
  \ dotnet#method('Update(', 'bool synchronous)', 'strict void'),
  \ dotnet#prop('TargetElement', 'DependencyObject'),
  \ dotnet#prop('ParentMultiBinding', 'MultiBinding'),
  \ dotnet#prop('BindingExpressions', 'ReadOnlyCollection'),
  \ dotnet#prop('IsParentBindingUpdateTriggerDefault', 'bool'),
  \ dotnet#prop('ValidationError', 'ValidationError'),
  \ dotnet#prop('HasError', 'bool'),
  \ ])

call dotnet#class('ObjectDataProvider', 'DataSourceProvider', [ 
  \ dotnet#method('ObjectDataProvider(', ')', 'void'),
  \ dotnet#method('get_ObjectType(', ')', 'Type'),
  \ dotnet#method('set_ObjectType(', 'class Type value)', 'void'),
  \ dotnet#method('ShouldSerializeObjectType(', ')', 'bool'),
  \ dotnet#method('get_ObjectInstance(', ')', 'object'),
  \ dotnet#method('set_ObjectInstance(', 'object value)', 'void'),
  \ dotnet#method('ShouldSerializeObjectInstance(', ')', 'bool'),
  \ dotnet#method('get_MethodName(', ')', 'string'),
  \ dotnet#method('set_MethodName(', 'string value)', 'void'),
  \ dotnet#method('get_ConstrObjectDataProviderParameters(', ')', 'IList'),
  \ dotnet#method('ShouldSerializeConstrObjectDataProviderParameters(', ')', 'bool'),
  \ dotnet#method('get_MethodParameters(', ')', 'IList'),
  \ dotnet#method('ShouldSerializeMethodParameters(', ')', 'bool'),
  \ dotnet#method('get_IsAsynchronous(', ')', 'bool'),
  \ dotnet#method('set_IsAsynchronous(', 'bool value)', 'void'),
  \ dotnet#method('BeginQuery(', ')', 'void'),
  \ dotnet#prop('ObjectType', 'Type'),
  \ dotnet#prop('ObjectInstance', 'object'),
  \ dotnet#prop('MethodName', 'string'),
  \ dotnet#prop('ConstrObjectDataProviderParameters', 'IList'),
  \ dotnet#prop('MethodParameters', 'IList'),
  \ dotnet#prop('IsAsynchronous', 'bool'),
  \ ])

call dotnet#class('PriorityBinding', 'BindingBase', [ 
  \ dotnet#method('PriorityBinding(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_Bindings(', ')', 'Collection'),
  \ dotnet#method('ShouldSerializeBindings(', ')', 'bool'),
  \ dotnet#method('CreateBindingExpressionOverride(', 'class DependencyObject target, DependencyProperty dp, BindingExpressionBase owner)', 'strict'),
  \ dotnet#method('CreateClone(', ')', 'strict'),
  \ dotnet#method('InitializeClone(', 'class BindingBase baseClone, BindingMode mode)', 'strict void'),
  \ dotnet#prop('Bindings', 'Collection'),
  \ ])

call dotnet#class('PriorityBindingExpression', 'BindingExpressionBase', [ 
  \ dotnet#method('get_ParentPriorityBinding(', ')', 'PriorityBinding'),
  \ dotnet#method('get_BindingExpressions(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_ActiveBindingExpression(', ')', 'BindingExpressionBase'),
  \ dotnet#method('UpdateTarget(', ')', 'void'),
  \ dotnet#method('UpdateSource(', ')', 'void'),
  \ dotnet#method('GetValue(', 'class DependencyObject d, DependencyProperty dp)', 'strict object'),
  \ dotnet#method('SetValue(', 'class DependencyObject d, DependencyProperty dp, object value)', 'strict bool'),
  \ dotnet#method('CreateBindingExpression(', 'class DependencyObject d, DependencyProperty dp, PriorityBinding binding, BindingExpressionBase owner)', 'static PriorityBindingExpression'),
  \ dotnet#method('get_AttentiveBindingExpressions(', ')', 'int32'),
  \ dotnet#method('AttachOverride(', 'class DependencyObject d, DependencyProperty dp)', 'strict bool'),
  \ dotnet#method('DetachOverride(', ')', 'strict void'),
  \ dotnet#method('InvalidateChild(', 'class BindingExpressionBase bindingExpression)', 'strict void'),
  \ dotnet#method('ChangeSourcesForChild(', 'class BindingExpressionBase bindingExpression, WeakDependencySource[] newSources)', 'strict void'),
  \ dotnet#method('ReplaceChild(', 'class BindingExpressionBase bindingExpression)', 'strict void'),
  \ dotnet#method('UpdateBindingGroup(', 'class BindingGroup bg)', 'strict void'),
  \ dotnet#method('GetRawProposedValue(', ')', 'strict object'),
  \ dotnet#method('ConvertProposedValue(', 'object rawValue)', 'strict object'),
  \ dotnet#method('ObtainConvertedProposedValue(', 'class BindingGroup bindingGroup)', 'strict bool'),
  \ dotnet#method('UpdateSource(', 'object convertedValue)', 'strict object'),
  \ dotnet#method('UpdateSource(', 'class BindingGroup bindingGroup)', 'strict bool'),
  \ dotnet#method('StoreValueInBindingGroup(', 'object value, BindingGroup bindingGroup)', 'strict void'),
  \ dotnet#method('Validate(', 'object value, ValidationStep validationStep)', 'strict bool'),
  \ dotnet#method('CheckValidationRules(', 'class BindingGroup bindingGroup, ValidationStep validationStep)', 'strict bool'),
  \ dotnet#method('ValidateAndConvertProposedValue(', '[out] Collection& values)', 'strict bool'),
  \ dotnet#method('HandlePropertyInvalidation(', 'class DependencyObject d, DependencyPropertyChangedEventArgs args)', 'strict void'),
  \ dotnet#prop('ParentPriorityBinding', 'PriorityBinding'),
  \ dotnet#prop('BindingExpressions', 'ReadOnlyCollection'),
  \ dotnet#prop('ActiveBindingExpression', 'BindingExpressionBase'),
  \ dotnet#prop('AttentiveBindingExpressions', 'int32'),
  \ ])

call dotnet#class('PropertyGroupDescription', 'GroupDescription', [ 
  \ dotnet#method('PropertyGroupDescription(', ')', 'void'),
  \ dotnet#method('PropertyGroupDescription(', 'string propertyName)', 'void'),
  \ dotnet#method('PropertyGroupDescription(', 'string propertyName, IValueConverter converter)', 'void'),
  \ dotnet#method('PropertyGroupDescription(', 'string propertyName, IValueConverter converter, StringComparison stringComparison)', 'void'),
  \ dotnet#method('get_PropertyName(', ')', 'string'),
  \ dotnet#method('set_PropertyName(', 'string value)', 'void'),
  \ dotnet#method('get_Converter(', ')', 'IValueConverter'),
  \ dotnet#method('set_Converter(', 'class IValueConverter value)', 'void'),
  \ dotnet#method('get_StringComparison(', ')', 'StringComparison'),
  \ dotnet#method('set_StringComparison(', 'StringComparison value)', 'void'),
  \ dotnet#method('GroupNameFromItem(', 'object item, int32 level, CultureInfo culture)', 'object'),
  \ dotnet#method('NamesMatch(', 'object groupName, object itemName)', 'bool'),
  \ dotnet#prop('PropertyName', 'string'),
  \ dotnet#prop('Converter', 'IValueConverter'),
  \ dotnet#prop('StringComparison', 'StringComparison'),
  \ ])

call dotnet#class('RelativeSource', 'MarkupExtension', [ 
  \ dotnet#method('RelativeSource(', ')', 'void'),
  \ dotnet#method('RelativeSource(', 'RelativeSourceMode mode)', 'void'),
  \ dotnet#method('RelativeSource(', 'RelativeSourceMode mode, Type ancestorType, int32 ancestorLevel)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#method('get_PreviousData(', ')', 'static'),
  \ dotnet#method('get_TemplatedParent(', ')', 'static'),
  \ dotnet#method('get_Self(', ')', 'static'),
  \ dotnet#method('get_Mode(', ')', 'RelativeSourceMode'),
  \ dotnet#method('set_Mode(', 'RelativeSourceMode value)', 'void'),
  \ dotnet#method('get_AncestorType(', ')', 'Type'),
  \ dotnet#method('set_AncestorType(', 'class Type value)', 'void'),
  \ dotnet#method('ShouldSerializeAncestorType(', ')', 'bool'),
  \ dotnet#method('get_AncestorLevel(', ')', 'int32'),
  \ dotnet#method('set_AncestorLevel(', 'int32 value)', 'void'),
  \ dotnet#method('ShouldSerializeAncestorLevel(', ')', 'bool'),
  \ dotnet#method('ProvideValue(', 'class IServiceProvider serviceProvider)', 'object'),
  \ dotnet#prop('PreviousData', 'RelativeSource'),
  \ dotnet#prop('TemplatedParent', 'RelativeSource'),
  \ dotnet#prop('Self', 'RelativeSource'),
  \ dotnet#prop('Mode', 'RelativeSourceMode'),
  \ dotnet#prop('AncestorType', 'Type'),
  \ dotnet#prop('AncestorLevel', 'int32'),
  \ ])

call dotnet#class('ValueConversionAttribute', 'Attribute', [ 
  \ dotnet#method('ValueConversionAttribute(', 'class Type sourceType, Type targetType)', 'void'),
  \ dotnet#method('get_SourceType(', ')', 'Type'),
  \ dotnet#method('get_TargetType(', ')', 'Type'),
  \ dotnet#method('get_ParameterType(', ')', 'Type'),
  \ dotnet#method('set_ParameterType(', 'class Type value)', 'void'),
  \ dotnet#method('get_TypeId(', ')', 'object'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('SourceType', 'Type'),
  \ dotnet#prop('TargetType', 'Type'),
  \ dotnet#prop('ParameterType', 'Type'),
  \ dotnet#prop('TypeId', 'object'),
  \ ])

call dotnet#class('ValueUnavailableException', 'SystemException', [ 
  \ dotnet#method('ValueUnavailableException(', ')', 'void'),
  \ dotnet#method('ValueUnavailableException(', 'string message)', 'void'),
  \ dotnet#method('ValueUnavailableException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('ValueUnavailableException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('XmlNamespaceMappingCollection', 'XmlNamespaceManager', [ 
  \ dotnet#method('XmlNamespaceMappingCollection(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddChild(', 'object value)', 'void'),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void'),
  \ dotnet#method('Add(', 'class XmlNamespaceMapping mapping)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class XmlNamespaceMapping mapping)', 'bool'),
  \ dotnet#method('CopyTo(', 'class XmlNamespaceMapping[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('Remove(', 'class XmlNamespaceMapping mapping)', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('ProtectedGetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ ])

call dotnet#class('XmlDataProvider', 'DataSourceProvider', [ 
  \ dotnet#method('XmlDataProvider(', ')', 'void'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('ShouldSerializeSource(', ')', 'bool'),
  \ dotnet#method('get_Document(', ')', 'XmlDocument'),
  \ dotnet#method('set_Document(', 'class XmlDocument value)', 'void'),
  \ dotnet#method('get_XPath(', ')', 'string'),
  \ dotnet#method('set_XPath(', 'string value)', 'void'),
  \ dotnet#method('ShouldSerializeXPath(', ')', 'bool'),
  \ dotnet#method('get_XmlNamespaceManager(', ')', 'XmlNamespaceManager'),
  \ dotnet#method('set_XmlNamespaceManager(', 'class XmlNamespaceManager value)', 'void'),
  \ dotnet#method('get_IsAsynchronous(', ')', 'bool'),
  \ dotnet#method('set_IsAsynchronous(', 'bool value)', 'void'),
  \ dotnet#method('get_XmlSerializer(', ')', 'IXmlSerializable'),
  \ dotnet#method('ShouldSerializeXmlSerializer(', ')', 'bool'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('get_BaseUri(', ')', 'family'),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void'),
  \ dotnet#method('BeginQuery(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('Document', 'XmlDocument'),
  \ dotnet#prop('XPath', 'string'),
  \ dotnet#prop('XmlNamespaceManager', 'XmlNamespaceManager'),
  \ dotnet#prop('IsAsynchronous', 'bool'),
  \ dotnet#prop('XmlSerializer', 'IXmlSerializable'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ ])

call dotnet#class('XmlNamespaceMapping', 'Object', [ 
  \ dotnet#method('XmlNamespaceMapping(', ')', 'void'),
  \ dotnet#method('XmlNamespaceMapping(', 'string prefix, Uri uri)', 'void'),
  \ dotnet#method('get_Prefix(', ')', 'string'),
  \ dotnet#method('set_Prefix(', 'string value)', 'void'),
  \ dotnet#method('get_Uri(', ')', 'Uri'),
  \ dotnet#method('set_Uri(', 'class Uri value)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'class XmlNamespaceMapping mappingA, XmlNamespaceMapping mappingB)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class XmlNamespaceMapping mappingA, XmlNamespaceMapping mappingB)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#prop('Prefix', 'string'),
  \ dotnet#prop('Uri', 'Uri'),
  \ ])

