call dotnet#namespace('System.Windows.Input')

call dotnet#class('KeyConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('KeyConverter(', ')', 'void'),
  \ ])

call dotnet#class('KeyInterop', 'Object', [ 
  \ dotnet#method('KeyFromVirtualKey(', 'int32 virtualKey)', 'static Key'),
  \ dotnet#method('VirtualKeyFromKey(', 'Key key)', 'static int32'),
  \ ])

call dotnet#class('KeyValueSerializer', 'ValueSerializer', [ 
  \ dotnet#method('CanConvertFromString(', 'string value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('CanConvertToString(', 'object value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('ConvertFromString(', 'string value, IValueSerializerContext context)', 'object'),
  \ dotnet#method('ConvertToString(', 'object value, IValueSerializerContext context)', 'string'),
  \ dotnet#method('KeyValueSerializer(', ')', 'void'),
  \ ])

call dotnet#class('ModifierKeysConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('IsDefinedModifierKeys(', 'ModifierKeys modifierKeys)', 'static bool'),
  \ dotnet#method('MatchModifiers(', 'ModifierKeys modifierKeys)', 'static string'),
  \ dotnet#method('ModifierKeysConverter(', ')', 'void'),
  \ dotnet#method('ModifierKeysConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('ModifierKeysValueSerializer', 'ValueSerializer', [ 
  \ dotnet#method('CanConvertFromString(', 'string value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('CanConvertToString(', 'object value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('ConvertFromString(', 'string value, IValueSerializerContext context)', 'object'),
  \ dotnet#method('ConvertToString(', 'object value, IValueSerializerContext context)', 'string'),
  \ dotnet#method('ModifierKeysValueSerializer(', ')', 'void'),
  \ ])

call dotnet#class('TraversalRequest', 'Object', [ 
  \ dotnet#method('TraversalRequest(', 'FocusNavigationDirection focusNavigationDirection)', 'void'),
  \ dotnet#method('get_Wrapped(', ')', 'bool'),
  \ dotnet#method('set_Wrapped(', 'bool value)', 'void'),
  \ dotnet#method('get_FocusNavigationDirection(', ')', 'FocusNavigationDirection'),
  \ dotnet#prop('Wrapped', 'bool'),
  \ dotnet#prop('FocusNavigationDirection', 'FocusNavigationDirection'),
  \ ])

call dotnet#class('CanExecuteRoutedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('CanExecuteRoutedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, CanExecuteRoutedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, CanExecuteRoutedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('CanExecuteRoutedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('CanExecuteRoutedEventArgs(', 'class ICommand command, object parameter)', 'void'),
  \ dotnet#method('get_Command(', ')', 'ICommand'),
  \ dotnet#method('get_Parameter(', ')', 'object'),
  \ dotnet#method('get_CanExecute(', ')', 'bool'),
  \ dotnet#method('set_CanExecute(', 'bool value)', 'void'),
  \ dotnet#method('get_ContinueRouting(', ')', 'bool'),
  \ dotnet#method('set_ContinueRouting(', 'bool value)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object target)', 'void'),
  \ dotnet#prop('Command', 'ICommand'),
  \ dotnet#prop('Parameter', 'object'),
  \ dotnet#prop('CanExecute', 'bool'),
  \ dotnet#prop('ContinueRouting', 'bool'),
  \ ])

call dotnet#class('InputDevice', 'DispatcherObject', [ 
  \ dotnet#method('InputDevice(', ')', 'void'),
  \ dotnet#method('get_Target(', ')', 'abstract'),
  \ dotnet#method('get_ActiveSource(', ')', 'abstract'),
  \ dotnet#prop('Target', 'IInputElement'),
  \ dotnet#prop('ActiveSource', 'PresentationSource'),
  \ ])

call dotnet#class('InputEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('InputEventArgs(', 'class InputDevice inputDevice, int32 timestamp)', 'void'),
  \ dotnet#method('get_Device(', ')', 'InputDevice'),
  \ dotnet#method('set_Device(', 'class InputDevice value)', 'void'),
  \ dotnet#method('get_Timestamp(', ')', 'int32'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Device', 'InputDevice'),
  \ dotnet#prop('Timestamp', 'int32'),
  \ ])

call dotnet#class('CommandBinding', 'Object', [ 
  \ dotnet#method('CommandBinding(', ')', 'void'),
  \ dotnet#method('CommandBinding(', 'class ICommand command)', 'void'),
  \ dotnet#method('CommandBinding(', 'class ICommand command, ExecutedRoutedEventHandler executed)', 'void'),
  \ dotnet#method('CommandBinding(', 'class ICommand command, ExecutedRoutedEventHandler executed, CanExecuteRoutedEventHandler canExecute)', 'void'),
  \ dotnet#method('get_Command(', ')', 'ICommand'),
  \ dotnet#method('set_Command(', 'class ICommand value)', 'void'),
  \ dotnet#method('add_PreviewExecuted(', 'class ExecutedRoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewExecuted(', 'class ExecutedRoutedEventHandler value)', 'void'),
  \ dotnet#method('add_Executed(', 'class ExecutedRoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Executed(', 'class ExecutedRoutedEventHandler value)', 'void'),
  \ dotnet#method('add_PreviewCanExecute(', 'class CanExecuteRoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewCanExecute(', 'class CanExecuteRoutedEventHandler value)', 'void'),
  \ dotnet#method('add_CanExecute(', 'class CanExecuteRoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_CanExecute(', 'class CanExecuteRoutedEventHandler value)', 'void'),
  \ dotnet#method('OnCanExecute(', 'object sender, CanExecuteRoutedEventArgs e)', 'void'),
  \ dotnet#method('OnExecuted(', 'object sender, ExecutedRoutedEventArgs e)', 'void'),
  \ dotnet#event('PreviewExecuted', 'ExecutedRoutedEventHandler'),
  \ dotnet#event('Executed', 'ExecutedRoutedEventHandler'),
  \ dotnet#event('PreviewCanExecute', 'CanExecuteRoutedEventHandler'),
  \ dotnet#event('CanExecute', 'CanExecuteRoutedEventHandler'),
  \ dotnet#prop('Command', 'ICommand'),
  \ ])

call dotnet#class('CommandBindingCollection', 'Object', [ 
  \ dotnet#method('CommandBindingCollection(', ')', 'void'),
  \ dotnet#method('CommandBindingCollection(', 'class IList commandBindings)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('Contains(', 'object key)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object commandBinding)', 'int32 '),
  \ dotnet#method('Remove(', 'object commandBinding)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'CommandBinding'),
  \ dotnet#method('set_Item(', 'int32 index, CommandBinding value)', 'void'),
  \ dotnet#method('Add(', 'class CommandBinding commandBinding)', 'int32'),
  \ dotnet#method('AddRange(', 'class ICollection collection)', 'void'),
  \ dotnet#method('Insert(', 'int32 index, CommandBinding commandBinding)', 'void'),
  \ dotnet#method('Remove(', 'class CommandBinding commandBinding)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('IndexOf(', 'class CommandBinding value)', 'int32'),
  \ dotnet#method('Contains(', 'class CommandBinding commandBinding)', 'bool'),
  \ dotnet#method('CopyTo(', 'class CommandBinding[] commandBindings, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('FindMatch(', 'object targetElement, InputEventArgs inputEventArgs)', 'ICommand'),
  \ dotnet#method('FindMatch(', 'class ICommand command, int32& index)', 'CommandBinding'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'CommandBinding'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Count', 'int32'),
  \ ])

call dotnet#class('CommandManager', 'Object', [ 
  \ dotnet#method('add_RequerySuggested(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_RequerySuggested(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('AddPreviewExecutedHandler(', 'class UIElement element, ExecutedRoutedEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewExecutedHandler(', 'class UIElement element, ExecutedRoutedEventHandler handler)', 'static void'),
  \ dotnet#method('AddExecutedHandler(', 'class UIElement element, ExecutedRoutedEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveExecutedHandler(', 'class UIElement element, ExecutedRoutedEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewCanExecuteHandler(', 'class UIElement element, CanExecuteRoutedEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewCanExecuteHandler(', 'class UIElement element, CanExecuteRoutedEventHandler handler)', 'static void'),
  \ dotnet#method('AddCanExecuteHandler(', 'class UIElement element, CanExecuteRoutedEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveCanExecuteHandler(', 'class UIElement element, CanExecuteRoutedEventHandler handler)', 'static void'),
  \ dotnet#method('RegisterClassInputBinding(', 'class Type type, InputBinding inputBinding)', 'static void'),
  \ dotnet#method('RegisterClassCommandBinding(', 'class Type type, CommandBinding commandBinding)', 'static void'),
  \ dotnet#method('InvalidateRequerySuggested(', ')', 'static void'),
  \ dotnet#method('TranslateInput(', 'class IInputElement targetElement, InputEventArgs inputEventArgs)', 'static void'),
  \ dotnet#method('OnCanExecute(', 'object sender, CanExecuteRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnExecuted(', 'object sender, ExecutedRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnCommandDevice(', 'object sender, CommandDeviceEventArgs e)', 'static void'),
  \ dotnet#method('CallWeakReferenceHandlers(', 'class List handlers)', 'static void'),
  \ dotnet#method('AddWeakReferenceHandler(', 'class List& handlers, EventHandler handler)', 'static void'),
  \ dotnet#method('RemoveWeakReferenceHandler(', 'class List handlers, EventHandler handler)', 'static void'),
  \ dotnet#method('CommandManager(', ')', 'void'),
  \ dotnet#method('CommandManager(', ')', 'static void .'),
  \ dotnet#event('RequerySuggested', 'EventHandler'),
  \ ])

call dotnet#class('ExecutedRoutedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ExecutedRoutedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ExecutedRoutedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ExecutedRoutedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ExecutedRoutedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('ExecutedRoutedEventArgs(', 'class ICommand command, object parameter)', 'void'),
  \ dotnet#method('get_Command(', ')', 'ICommand'),
  \ dotnet#method('get_Parameter(', ')', 'object'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object target)', 'void'),
  \ dotnet#prop('Command', 'ICommand'),
  \ dotnet#prop('Parameter', 'object'),
  \ ])

call dotnet#class('InputBinding', 'Freezable', [ 
  \ dotnet#method('InputBinding(', ')', 'void'),
  \ dotnet#method('InputBinding(', 'class ICommand command, InputGesture gesture)', 'void'),
  \ dotnet#method('get_Command(', ')', ''),
  \ dotnet#method('set_Command(', 'class ICommand value)', 'void'),
  \ dotnet#method('get_CommandParameter(', ')', 'object'),
  \ dotnet#method('set_CommandParameter(', 'object value)', 'void'),
  \ dotnet#method('get_CommandTarget(', ')', ''),
  \ dotnet#method('set_CommandTarget(', 'class IInputElement value)', 'void'),
  \ dotnet#method('get_Gesture(', ')', ''),
  \ dotnet#method('set_Gesture(', 'class InputGesture value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#method('InputBinding(', ')', 'static void .'),
  \ dotnet#prop('Command', 'ICommand'),
  \ dotnet#prop('CommandParameter', 'object'),
  \ dotnet#prop('CommandTarget', 'IInputElement'),
  \ dotnet#prop('Gesture', 'InputGesture'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ ])

call dotnet#class('InputBindingCollection', 'Object', [ 
  \ dotnet#method('InputBindingCollection(', ')', 'void'),
  \ dotnet#method('InputBindingCollection(', 'class IList inputBindings)', 'void'),
  \ dotnet#method('InputBindingCollection(', 'class DependencyObject owner)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('Contains(', 'object key)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object inputBinding)', 'int32 '),
  \ dotnet#method('Remove(', 'object inputBinding)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'InputBinding'),
  \ dotnet#method('set_Item(', 'int32 index, InputBinding value)', 'void'),
  \ dotnet#method('Add(', 'class InputBinding inputBinding)', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('IndexOf(', 'class InputBinding value)', 'int32'),
  \ dotnet#method('AddRange(', 'class ICollection collection)', 'void'),
  \ dotnet#method('Insert(', 'int32 index, InputBinding inputBinding)', 'void'),
  \ dotnet#method('Remove(', 'class InputBinding inputBinding)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Contains(', 'class InputBinding key)', 'bool'),
  \ dotnet#method('CopyTo(', 'class InputBinding[] inputBindings, int32 index)', 'void'),
  \ dotnet#method('FindMatch(', 'object targetElement, InputEventArgs inputEventArgs)', 'InputBinding'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'InputBinding'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ ])

call dotnet#class('InputGesture', 'Object', [ 
  \ dotnet#method('Matches(', 'object targetElement, InputEventArgs inputEventArgs)', 'abstract bool'),
  \ dotnet#method('InputGesture(', ')', 'void'),
  \ ])

call dotnet#class('InputGestureCollection', 'Object', [ 
  \ dotnet#method('InputGestureCollection(', ')', 'void'),
  \ dotnet#method('InputGestureCollection(', 'class IList inputGestures)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('Contains(', 'object key)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object inputGesture)', 'int32 '),
  \ dotnet#method('Remove(', 'object inputGesture)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Item(', 'int32 index)', 'InputGesture'),
  \ dotnet#method('set_Item(', 'int32 index, InputGesture value)', 'void'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('IndexOf(', 'class InputGesture value)', 'int32'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('Add(', 'class InputGesture inputGesture)', 'int32'),
  \ dotnet#method('AddRange(', 'class ICollection collection)', 'void'),
  \ dotnet#method('Insert(', 'int32 index, InputGesture inputGesture)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'class InputGesture inputGesture)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class InputGesture key)', 'bool'),
  \ dotnet#method('CopyTo(', 'class InputGesture[] inputGestures, int32 index)', 'void'),
  \ dotnet#method('Seal(', ')', 'void'),
  \ dotnet#method('FindMatch(', 'object targetElement, InputEventArgs inputEventArgs)', 'InputGesture'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'InputGesture'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Count', 'int32'),
  \ ])

call dotnet#class('KeyBinding', 'InputBinding', [ 
  \ dotnet#method('KeyBinding(', ')', 'void'),
  \ dotnet#method('KeyBinding(', 'class ICommand command, KeyGesture gesture)', 'void'),
  \ dotnet#method('KeyBinding(', 'class ICommand command, Key key, ModifierKeys modifiers)', 'void'),
  \ dotnet#method('get_Gesture(', ')', ''),
  \ dotnet#method('set_Gesture(', 'class InputGesture value)', 'void'),
  \ dotnet#method('get_Modifiers(', ')', 'ModifierKeys'),
  \ dotnet#method('set_Modifiers(', 'ModifierKeys value)', 'void'),
  \ dotnet#method('get_Key(', ')', 'Key'),
  \ dotnet#method('set_Key(', 'Key value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('KeyBinding(', ')', 'static void .'),
  \ dotnet#prop('Gesture', 'InputGesture'),
  \ dotnet#prop('Modifiers', 'ModifierKeys'),
  \ dotnet#prop('Key', 'Key'),
  \ ])

call dotnet#class('KeyGesture', 'InputGesture', [ 
  \ dotnet#method('KeyGesture(', 'Key key)', 'void'),
  \ dotnet#method('KeyGesture(', 'Key key, ModifierKeys modifiers)', 'void'),
  \ dotnet#method('KeyGesture(', 'Key key, ModifierKeys modifiers, string displayString)', 'void'),
  \ dotnet#method('KeyGesture(', 'Key key, ModifierKeys modifiers, bool validateGesture)', 'void'),
  \ dotnet#method('get_Modifiers(', ')', 'ModifierKeys'),
  \ dotnet#method('get_Key(', ')', 'Key'),
  \ dotnet#method('get_DisplayString(', ')', 'string'),
  \ dotnet#method('GetDisplayStringForCulture(', 'class CultureInfo culture)', 'string'),
  \ dotnet#method('Matches(', 'object targetElement, InputEventArgs inputEventArgs)', 'bool'),
  \ dotnet#method('IsDefinedKey(', 'Key key)', 'static bool'),
  \ dotnet#method('IsValid(', 'Key key, ModifierKeys modifiers)', 'static bool'),
  \ dotnet#method('AddGesturesFromResourceStrings(', 'string keyGestures, string displayStrings, InputGestureCollection gestures)', 'static void'),
  \ dotnet#method('CreateFromResourceStrings(', 'string keyGestureToken, string keyDisplayString)', 'static KeyGesture'),
  \ dotnet#method('KeyGesture(', ')', 'static void .'),
  \ dotnet#prop('Modifiers', 'ModifierKeys'),
  \ dotnet#prop('Key', 'Key'),
  \ dotnet#prop('DisplayString', 'string'),
  \ ])

call dotnet#class('KeyGestureConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('IsDefinedKey(', 'Key key)', 'static bool'),
  \ dotnet#method('KeyGestureConverter(', ')', 'void'),
  \ dotnet#method('KeyGestureConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('KeyGestureValueSerializer', 'ValueSerializer', [ 
  \ dotnet#method('CanConvertFromString(', 'string value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('CanConvertToString(', 'object value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('ConvertFromString(', 'string value, IValueSerializerContext context)', 'object'),
  \ dotnet#method('ConvertToString(', 'object value, IValueSerializerContext context)', 'string'),
  \ dotnet#method('KeyGestureValueSerializer(', ')', 'void'),
  \ ])

call dotnet#class('MouseActionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('IsDefinedMouseAction(', 'MouseAction mouseAction)', 'static bool'),
  \ dotnet#method('MouseActionConverter(', ')', 'void'),
  \ ])

call dotnet#class('MouseActionValueSerializer', 'ValueSerializer', [ 
  \ dotnet#method('CanConvertFromString(', 'string value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('CanConvertToString(', 'object value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('ConvertFromString(', 'string value, IValueSerializerContext context)', 'object'),
  \ dotnet#method('ConvertToString(', 'object value, IValueSerializerContext context)', 'string'),
  \ dotnet#method('MouseActionValueSerializer(', ')', 'void'),
  \ ])

call dotnet#class('MouseBinding', 'InputBinding', [ 
  \ dotnet#method('MouseBinding(', ')', 'void'),
  \ dotnet#method('MouseBinding(', 'class ICommand command, MouseAction mouseAction)', 'void'),
  \ dotnet#method('MouseBinding(', 'class ICommand command, MouseGesture gesture)', 'void'),
  \ dotnet#method('get_Gesture(', ')', ''),
  \ dotnet#method('set_Gesture(', 'class InputGesture value)', 'void'),
  \ dotnet#method('get_MouseAction(', ')', 'MouseAction'),
  \ dotnet#method('set_MouseAction(', 'MouseAction value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('MouseBinding(', ')', 'static void .'),
  \ dotnet#prop('Gesture', 'InputGesture'),
  \ dotnet#prop('MouseAction', 'MouseAction'),
  \ ])

call dotnet#class('MouseGesture', 'InputGesture', [ 
  \ dotnet#method('MouseGesture(', ')', 'void'),
  \ dotnet#method('MouseGesture(', 'MouseAction mouseAction)', 'void'),
  \ dotnet#method('MouseGesture(', 'MouseAction mouseAction, ModifierKeys modifiers)', 'void'),
  \ dotnet#method('get_MouseAction(', ')', 'MouseAction'),
  \ dotnet#method('set_MouseAction(', 'MouseAction value)', 'void'),
  \ dotnet#method('get_Modifiers(', ')', 'ModifierKeys'),
  \ dotnet#method('set_Modifiers(', 'ModifierKeys value)', 'void'),
  \ dotnet#method('Matches(', 'object targetElement, InputEventArgs inputEventArgs)', 'bool'),
  \ dotnet#method('IsDefinedMouseAction(', 'MouseAction mouseAction)', 'static bool'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'string propertyName)', 'strict void'),
  \ dotnet#method('GetMouseAction(', 'class InputEventArgs inputArgs)', 'static MouseAction'),
  \ dotnet#event('PropertyChanged', 'PropertyChangedEventHandler'),
  \ dotnet#prop('MouseAction', 'MouseAction'),
  \ dotnet#prop('Modifiers', 'ModifierKeys'),
  \ ])

call dotnet#class('MouseGestureConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('MouseGestureConverter(', ')', 'void'),
  \ ])

call dotnet#class('MouseGestureValueSerializer', 'ValueSerializer', [ 
  \ dotnet#method('CanConvertFromString(', 'string value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('CanConvertToString(', 'object value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('ConvertFromString(', 'string value, IValueSerializerContext context)', 'object'),
  \ dotnet#method('ConvertToString(', 'object value, IValueSerializerContext context)', 'string'),
  \ dotnet#method('MouseGestureValueSerializer(', ')', 'void'),
  \ ])

call dotnet#class('RoutedCommand', 'Object', [ 
  \ dotnet#method('RoutedCommand(', ')', 'void'),
  \ dotnet#method('RoutedCommand(', 'string name, Type ownerType)', 'void'),
  \ dotnet#method('RoutedCommand(', 'string name, Type ownerType, InputGestureCollection inputGestures)', 'void'),
  \ dotnet#method('RoutedCommand(', 'string name, Type ownerType, uint8 commandId)', 'void'),
  \ dotnet#method('Execute(', 'object parameter)', 'void '),
  \ dotnet#method('CanExecute(', 'object parameter)', 'bool '),
  \ dotnet#method('add_CanExecuteChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CanExecuteChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('Execute(', 'object parameter, IInputElement target)', 'void'),
  \ dotnet#method('CanExecute(', 'object parameter, IInputElement target)', 'bool'),
  \ dotnet#method('CriticalCanExecute(', 'object parameter, IInputElement target, bool trusted, [out] bool& continueRouting)', 'bool'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_OwnerType(', ')', 'Type'),
  \ dotnet#method('get_CommandId(', ')', 'uint8'),
  \ dotnet#method('get_InputGestures(', ')', 'InputGestureCollection'),
  \ dotnet#method('get_InputGesturesInternal(', ')', '.method'),
  \ dotnet#method('get_IsBlockedByRM(', ')', 'bool'),
  \ dotnet#method('set_IsBlockedByRM(', 'bool value)', 'void'),
  \ dotnet#method('get_AreInputGesturesDelayLoaded(', ')', 'bool'),
  \ dotnet#method('set_AreInputGesturesDelayLoaded(', 'bool value)', 'void'),
  \ dotnet#method('ExecuteCore(', 'object parameter, IInputElement target, bool userInitiated)', 'bool'),
  \ dotnet#event('CanExecuteChanged', 'EventHandler'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('OwnerType', 'Type'),
  \ dotnet#prop('CommandId', 'uint8'),
  \ dotnet#prop('InputGestures', 'InputGestureCollection'),
  \ dotnet#prop('InputGesturesInternal', 'InputGestureCollection'),
  \ dotnet#prop('IsBlockedByRM', 'bool'),
  \ dotnet#prop('AreInputGesturesDelayLoaded', 'bool'),
  \ ])

call dotnet#class('RoutedUICommand', 'RoutedCommand', [ 
  \ dotnet#method('RoutedUICommand(', ')', 'void'),
  \ dotnet#method('RoutedUICommand(', 'string text, string name, Type ownerType)', 'void'),
  \ dotnet#method('RoutedUICommand(', 'string text, string name, Type ownerType, InputGestureCollection inputGestures)', 'void'),
  \ dotnet#method('RoutedUICommand(', 'string name, Type ownerType, uint8 commandId)', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#prop('Text', 'string'),
  \ ])

call dotnet#class('ApplicationCommands', 'Object', [ 
  \ dotnet#method('get_Cut(', ')', 'static'),
  \ dotnet#method('get_Copy(', ')', 'static'),
  \ dotnet#method('get_Paste(', ')', 'static'),
  \ dotnet#method('get_Delete(', ')', 'static'),
  \ dotnet#method('get_Undo(', ')', 'static'),
  \ dotnet#method('get_Redo(', ')', 'static'),
  \ dotnet#method('get_Find(', ')', 'static'),
  \ dotnet#method('get_Replace(', ')', 'static'),
  \ dotnet#method('get_SelectAll(', ')', 'static'),
  \ dotnet#method('get_Help(', ')', 'static'),
  \ dotnet#method('get_New(', ')', 'static'),
  \ dotnet#method('get_Open(', ')', 'static'),
  \ dotnet#method('get_Close(', ')', 'static'),
  \ dotnet#method('get_Save(', ')', 'static'),
  \ dotnet#method('get_SaveAs(', ')', 'static'),
  \ dotnet#method('get_Print(', ')', 'static'),
  \ dotnet#method('get_CancelPrint(', ')', 'static'),
  \ dotnet#method('get_PrintPreview(', ')', 'static'),
  \ dotnet#method('get_Properties(', ')', 'static'),
  \ dotnet#method('get_ContextMenu(', ')', 'static'),
  \ dotnet#method('get_Stop(', ')', 'static'),
  \ dotnet#method('get_CorrectionList(', ')', 'static'),
  \ dotnet#method('get_NotACommand(', ')', 'static'),
  \ dotnet#method('GetUIText(', 'uint8 commandId)', 'static string'),
  \ dotnet#method('LoadDefaultGestureFromResource(', 'uint8 commandId)', 'static InputGestureCollection'),
  \ dotnet#method('ApplicationCommands(', ')', 'static void .'),
  \ dotnet#prop('Cut', 'RoutedUICommand'),
  \ dotnet#prop('Copy', 'RoutedUICommand'),
  \ dotnet#prop('Paste', 'RoutedUICommand'),
  \ dotnet#prop('Delete', 'RoutedUICommand'),
  \ dotnet#prop('Undo', 'RoutedUICommand'),
  \ dotnet#prop('Redo', 'RoutedUICommand'),
  \ dotnet#prop('Find', 'RoutedUICommand'),
  \ dotnet#prop('Replace', 'RoutedUICommand'),
  \ dotnet#prop('SelectAll', 'RoutedUICommand'),
  \ dotnet#prop('Help', 'RoutedUICommand'),
  \ dotnet#prop('New', 'RoutedUICommand'),
  \ dotnet#prop('Open', 'RoutedUICommand'),
  \ dotnet#prop('Close', 'RoutedUICommand'),
  \ dotnet#prop('Save', 'RoutedUICommand'),
  \ dotnet#prop('SaveAs', 'RoutedUICommand'),
  \ dotnet#prop('Print', 'RoutedUICommand'),
  \ dotnet#prop('CancelPrint', 'RoutedUICommand'),
  \ dotnet#prop('PrintPreview', 'RoutedUICommand'),
  \ dotnet#prop('Properties', 'RoutedUICommand'),
  \ dotnet#prop('ContextMenu', 'RoutedUICommand'),
  \ dotnet#prop('Stop', 'RoutedUICommand'),
  \ dotnet#prop('CorrectionList', 'RoutedUICommand'),
  \ dotnet#prop('NotACommand', 'RoutedUICommand'),
  \ ])

call dotnet#class('ComponentCommands', 'Object', [ 
  \ dotnet#method('get_ScrollPageUp(', ')', 'static'),
  \ dotnet#method('get_ScrollPageDown(', ')', 'static'),
  \ dotnet#method('get_ScrollPageLeft(', ')', 'static'),
  \ dotnet#method('get_ScrollPageRight(', ')', 'static'),
  \ dotnet#method('get_ScrollByLine(', ')', 'static'),
  \ dotnet#method('get_MoveLeft(', ')', 'static'),
  \ dotnet#method('get_MoveRight(', ')', 'static'),
  \ dotnet#method('get_MoveUp(', ')', 'static'),
  \ dotnet#method('get_MoveDown(', ')', 'static'),
  \ dotnet#method('get_MoveToHome(', ')', 'static'),
  \ dotnet#method('get_MoveToEnd(', ')', 'static'),
  \ dotnet#method('get_MoveToPageUp(', ')', 'static'),
  \ dotnet#method('get_MoveToPageDown(', ')', 'static'),
  \ dotnet#method('get_ExtendSelectionUp(', ')', 'static'),
  \ dotnet#method('get_ExtendSelectionDown(', ')', 'static'),
  \ dotnet#method('get_ExtendSelectionLeft(', ')', 'static'),
  \ dotnet#method('get_ExtendSelectionRight(', ')', 'static'),
  \ dotnet#method('get_SelectToHome(', ')', 'static'),
  \ dotnet#method('get_SelectToEnd(', ')', 'static'),
  \ dotnet#method('get_SelectToPageUp(', ')', 'static'),
  \ dotnet#method('get_SelectToPageDown(', ')', 'static'),
  \ dotnet#method('get_MoveFocusUp(', ')', 'static'),
  \ dotnet#method('get_MoveFocusDown(', ')', 'static'),
  \ dotnet#method('get_MoveFocusForward(', ')', 'static'),
  \ dotnet#method('get_MoveFocusBack(', ')', 'static'),
  \ dotnet#method('get_MoveFocusPageUp(', ')', 'static'),
  \ dotnet#method('get_MoveFocusPageDown(', ')', 'static'),
  \ dotnet#method('GetUIText(', 'uint8 commandId)', 'static string'),
  \ dotnet#method('LoadDefaultGestureFromResource(', 'uint8 commandId)', 'static InputGestureCollection'),
  \ dotnet#method('ComponentCommands(', ')', 'static void .'),
  \ dotnet#prop('ScrollPageUp', 'RoutedUICommand'),
  \ dotnet#prop('ScrollPageDown', 'RoutedUICommand'),
  \ dotnet#prop('ScrollPageLeft', 'RoutedUICommand'),
  \ dotnet#prop('ScrollPageRight', 'RoutedUICommand'),
  \ dotnet#prop('ScrollByLine', 'RoutedUICommand'),
  \ dotnet#prop('MoveLeft', 'RoutedUICommand'),
  \ dotnet#prop('MoveRight', 'RoutedUICommand'),
  \ dotnet#prop('MoveUp', 'RoutedUICommand'),
  \ dotnet#prop('MoveDown', 'RoutedUICommand'),
  \ dotnet#prop('MoveToHome', 'RoutedUICommand'),
  \ dotnet#prop('MoveToEnd', 'RoutedUICommand'),
  \ dotnet#prop('MoveToPageUp', 'RoutedUICommand'),
  \ dotnet#prop('MoveToPageDown', 'RoutedUICommand'),
  \ dotnet#prop('ExtendSelectionUp', 'RoutedUICommand'),
  \ dotnet#prop('ExtendSelectionDown', 'RoutedUICommand'),
  \ dotnet#prop('ExtendSelectionLeft', 'RoutedUICommand'),
  \ dotnet#prop('ExtendSelectionRight', 'RoutedUICommand'),
  \ dotnet#prop('SelectToHome', 'RoutedUICommand'),
  \ dotnet#prop('SelectToEnd', 'RoutedUICommand'),
  \ dotnet#prop('SelectToPageUp', 'RoutedUICommand'),
  \ dotnet#prop('SelectToPageDown', 'RoutedUICommand'),
  \ dotnet#prop('MoveFocusUp', 'RoutedUICommand'),
  \ dotnet#prop('MoveFocusDown', 'RoutedUICommand'),
  \ dotnet#prop('MoveFocusForward', 'RoutedUICommand'),
  \ dotnet#prop('MoveFocusBack', 'RoutedUICommand'),
  \ dotnet#prop('MoveFocusPageUp', 'RoutedUICommand'),
  \ dotnet#prop('MoveFocusPageDown', 'RoutedUICommand'),
  \ ])

call dotnet#class('MediaCommands', 'Object', [ 
  \ dotnet#method('get_Play(', ')', 'static'),
  \ dotnet#method('get_Pause(', ')', 'static'),
  \ dotnet#method('get_Stop(', ')', 'static'),
  \ dotnet#method('get_Record(', ')', 'static'),
  \ dotnet#method('get_NextTrack(', ')', 'static'),
  \ dotnet#method('get_PreviousTrack(', ')', 'static'),
  \ dotnet#method('get_FastForward(', ')', 'static'),
  \ dotnet#method('get_Rewind(', ')', 'static'),
  \ dotnet#method('get_ChannelUp(', ')', 'static'),
  \ dotnet#method('get_ChannelDown(', ')', 'static'),
  \ dotnet#method('get_TogglePlayPause(', ')', 'static'),
  \ dotnet#method('get_Select(', ')', 'static'),
  \ dotnet#method('get_IncreaseVolume(', ')', 'static'),
  \ dotnet#method('get_DecreaseVolume(', ')', 'static'),
  \ dotnet#method('get_MuteVolume(', ')', 'static'),
  \ dotnet#method('get_IncreaseTreble(', ')', 'static'),
  \ dotnet#method('get_DecreaseTreble(', ')', 'static'),
  \ dotnet#method('get_IncreaseBass(', ')', 'static'),
  \ dotnet#method('get_DecreaseBass(', ')', 'static'),
  \ dotnet#method('get_BoostBass(', ')', 'static'),
  \ dotnet#method('get_IncreaseMicrophoneVolume(', ')', 'static'),
  \ dotnet#method('get_DecreaseMicrophoneVolume(', ')', 'static'),
  \ dotnet#method('get_MuteMicrophoneVolume(', ')', 'static'),
  \ dotnet#method('get_ToggleMicrophoneOnOff(', ')', 'static'),
  \ dotnet#method('GetUIText(', 'uint8 commandId)', 'static string'),
  \ dotnet#method('LoadDefaultGestureFromResource(', 'uint8 commandId)', 'static InputGestureCollection'),
  \ dotnet#method('MediaCommands(', ')', 'static void .'),
  \ dotnet#prop('Play', 'RoutedUICommand'),
  \ dotnet#prop('Pause', 'RoutedUICommand'),
  \ dotnet#prop('Stop', 'RoutedUICommand'),
  \ dotnet#prop('Record', 'RoutedUICommand'),
  \ dotnet#prop('NextTrack', 'RoutedUICommand'),
  \ dotnet#prop('PreviousTrack', 'RoutedUICommand'),
  \ dotnet#prop('FastForward', 'RoutedUICommand'),
  \ dotnet#prop('Rewind', 'RoutedUICommand'),
  \ dotnet#prop('ChannelUp', 'RoutedUICommand'),
  \ dotnet#prop('ChannelDown', 'RoutedUICommand'),
  \ dotnet#prop('TogglePlayPause', 'RoutedUICommand'),
  \ dotnet#prop('Select', 'RoutedUICommand'),
  \ dotnet#prop('IncreaseVolume', 'RoutedUICommand'),
  \ dotnet#prop('DecreaseVolume', 'RoutedUICommand'),
  \ dotnet#prop('MuteVolume', 'RoutedUICommand'),
  \ dotnet#prop('IncreaseTreble', 'RoutedUICommand'),
  \ dotnet#prop('DecreaseTreble', 'RoutedUICommand'),
  \ dotnet#prop('IncreaseBass', 'RoutedUICommand'),
  \ dotnet#prop('DecreaseBass', 'RoutedUICommand'),
  \ dotnet#prop('BoostBass', 'RoutedUICommand'),
  \ dotnet#prop('IncreaseMicrophoneVolume', 'RoutedUICommand'),
  \ dotnet#prop('DecreaseMicrophoneVolume', 'RoutedUICommand'),
  \ dotnet#prop('MuteMicrophoneVolume', 'RoutedUICommand'),
  \ dotnet#prop('ToggleMicrophoneOnOff', 'RoutedUICommand'),
  \ ])

call dotnet#class('NavigationCommands', 'Object', [ 
  \ dotnet#method('get_BrowseBack(', ')', 'static'),
  \ dotnet#method('get_BrowseForward(', ')', 'static'),
  \ dotnet#method('get_BrowseHome(', ')', 'static'),
  \ dotnet#method('get_BrowseStop(', ')', 'static'),
  \ dotnet#method('get_Refresh(', ')', 'static'),
  \ dotnet#method('get_Favorites(', ')', 'static'),
  \ dotnet#method('get_Search(', ')', 'static'),
  \ dotnet#method('get_IncreaseZoom(', ')', 'static'),
  \ dotnet#method('get_DecreaseZoom(', ')', 'static'),
  \ dotnet#method('get_Zoom(', ')', 'static'),
  \ dotnet#method('get_NextPage(', ')', 'static'),
  \ dotnet#method('get_PreviousPage(', ')', 'static'),
  \ dotnet#method('get_FirstPage(', ')', 'static'),
  \ dotnet#method('get_LastPage(', ')', 'static'),
  \ dotnet#method('get_GoToPage(', ')', 'static'),
  \ dotnet#method('get_NavigateJournal(', ')', 'static'),
  \ dotnet#method('GetUIText(', 'uint8 commandId)', 'static string'),
  \ dotnet#method('LoadDefaultGestureFromResource(', 'uint8 commandId)', 'static InputGestureCollection'),
  \ dotnet#method('NavigationCommands(', ')', 'static void .'),
  \ dotnet#prop('BrowseBack', 'RoutedUICommand'),
  \ dotnet#prop('BrowseForward', 'RoutedUICommand'),
  \ dotnet#prop('BrowseHome', 'RoutedUICommand'),
  \ dotnet#prop('BrowseStop', 'RoutedUICommand'),
  \ dotnet#prop('Refresh', 'RoutedUICommand'),
  \ dotnet#prop('Favorites', 'RoutedUICommand'),
  \ dotnet#prop('Search', 'RoutedUICommand'),
  \ dotnet#prop('IncreaseZoom', 'RoutedUICommand'),
  \ dotnet#prop('DecreaseZoom', 'RoutedUICommand'),
  \ dotnet#prop('Zoom', 'RoutedUICommand'),
  \ dotnet#prop('NextPage', 'RoutedUICommand'),
  \ dotnet#prop('PreviousPage', 'RoutedUICommand'),
  \ dotnet#prop('FirstPage', 'RoutedUICommand'),
  \ dotnet#prop('LastPage', 'RoutedUICommand'),
  \ dotnet#prop('GoToPage', 'RoutedUICommand'),
  \ dotnet#prop('NavigateJournal', 'RoutedUICommand'),
  \ ])

call dotnet#class('AccessKeyManager', 'Object', [ 
  \ dotnet#method('Register(', 'string key, IInputElement element)', 'static void'),
  \ dotnet#method('Unregister(', 'string key, IInputElement element)', 'static void'),
  \ dotnet#method('IsKeyRegistered(', 'object scope, string key)', 'static bool'),
  \ dotnet#method('ProcessKey(', 'object scope, string key, bool isMultiple)', 'static bool'),
  \ dotnet#method('AddAccessKeyPressedHandler(', 'class DependencyObject element, AccessKeyPressedEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveAccessKeyPressedHandler(', 'class DependencyObject element, AccessKeyPressedEventHandler handler)', 'static void'),
  \ dotnet#method('InternalGetAccessKeyCharacter(', 'class DependencyObject d)', 'static string'),
  \ dotnet#method('AccessKeyManager(', ')', 'void'),
  \ dotnet#method('AccessKeyManager(', ')', 'static void .'),
  \ ])

call dotnet#class('AccessKeyPressedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('AccessKeyPressedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, AccessKeyPressedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, AccessKeyPressedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('AccessKeyPressedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('AccessKeyPressedEventArgs(', ')', 'void'),
  \ dotnet#method('AccessKeyPressedEventArgs(', 'string key)', 'void'),
  \ dotnet#method('get_Scope(', ')', 'object'),
  \ dotnet#method('set_Scope(', 'object value)', 'void'),
  \ dotnet#method('get_Target(', ')', 'UIElement'),
  \ dotnet#method('set_Target(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_Key(', ')', 'string'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Scope', 'object'),
  \ dotnet#prop('Target', 'UIElement'),
  \ dotnet#prop('Key', 'string'),
  \ ])

call dotnet#class('AccessKeyEventArgs', 'EventArgs', [ 
  \ dotnet#method('AccessKeyEventArgs(', 'string key, bool isMultiple, bool userInitiated)', 'void'),
  \ dotnet#method('ClearUserInitiated(', ')', 'void'),
  \ dotnet#method('get_Key(', ')', 'string'),
  \ dotnet#method('get_IsMultiple(', ')', 'bool'),
  \ dotnet#method('get_UserInitiated(', ')', 'bool'),
  \ dotnet#prop('Key', 'string'),
  \ dotnet#prop('IsMultiple', 'bool'),
  \ dotnet#prop('UserInitiated', 'bool'),
  \ ])

call dotnet#class('Cursor', 'Object', [ 
  \ dotnet#method('Cursor(', 'CursorType cursorType)', 'void'),
  \ dotnet#method('Cursor(', 'string cursorFile)', 'void'),
  \ dotnet#method('Cursor(', 'class Stream cursorStream)', 'void'),
  \ dotnet#method('Cursor(', 'class SafeHandle cursorHandle)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_CursorType(', ')', '.method'),
  \ dotnet#method('get_Handle(', ')', '.method'),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Cursor(', ')', 'static void .'),
  \ dotnet#prop('CursorType', 'CursorType'),
  \ dotnet#prop('Handle', 'SafeHandle'),
  \ dotnet#prop('FileName', 'string'),
  \ ])

call dotnet#class('Cursors', 'Object', [ 
  \ dotnet#method('get_None(', ')', 'static'),
  \ dotnet#method('get_No(', ')', 'static'),
  \ dotnet#method('get_Arrow(', ')', 'static'),
  \ dotnet#method('get_AppStarting(', ')', 'static'),
  \ dotnet#method('get_Cross(', ')', 'static'),
  \ dotnet#method('get_Help(', ')', 'static'),
  \ dotnet#method('get_IBeam(', ')', 'static'),
  \ dotnet#method('get_SizeAll(', ')', 'static'),
  \ dotnet#method('get_SizeNESW(', ')', 'static'),
  \ dotnet#method('get_SizeNS(', ')', 'static'),
  \ dotnet#method('get_SizeNWSE(', ')', 'static'),
  \ dotnet#method('get_SizeWE(', ')', 'static'),
  \ dotnet#method('get_UpArrow(', ')', 'static'),
  \ dotnet#method('get_Wait(', ')', 'static'),
  \ dotnet#method('get_Hand(', ')', 'static'),
  \ dotnet#method('get_Pen(', ')', 'static'),
  \ dotnet#method('get_ScrollNS(', ')', 'static'),
  \ dotnet#method('get_ScrollWE(', ')', 'static'),
  \ dotnet#method('get_ScrollAll(', ')', 'static'),
  \ dotnet#method('get_ScrollN(', ')', 'static'),
  \ dotnet#method('get_ScrollS(', ')', 'static'),
  \ dotnet#method('get_ScrollW(', ')', 'static'),
  \ dotnet#method('get_ScrollE(', ')', 'static'),
  \ dotnet#method('get_ScrollNW(', ')', 'static'),
  \ dotnet#method('get_ScrollNE(', ')', 'static'),
  \ dotnet#method('get_ScrollSW(', ')', 'static'),
  \ dotnet#method('get_ScrollSE(', ')', 'static'),
  \ dotnet#method('get_ArrowCD(', ')', 'static'),
  \ dotnet#method('EnsureCursor(', 'CursorType cursorType)', 'static Cursor'),
  \ dotnet#method('Cursors(', ')', 'static void .'),
  \ dotnet#prop('None', 'Cursor'),
  \ dotnet#prop('No', 'Cursor'),
  \ dotnet#prop('Arrow', 'Cursor'),
  \ dotnet#prop('AppStarting', 'Cursor'),
  \ dotnet#prop('Cross', 'Cursor'),
  \ dotnet#prop('Help', 'Cursor'),
  \ dotnet#prop('IBeam', 'Cursor'),
  \ dotnet#prop('SizeAll', 'Cursor'),
  \ dotnet#prop('SizeNESW', 'Cursor'),
  \ dotnet#prop('SizeNS', 'Cursor'),
  \ dotnet#prop('SizeNWSE', 'Cursor'),
  \ dotnet#prop('SizeWE', 'Cursor'),
  \ dotnet#prop('UpArrow', 'Cursor'),
  \ dotnet#prop('Wait', 'Cursor'),
  \ dotnet#prop('Hand', 'Cursor'),
  \ dotnet#prop('Pen', 'Cursor'),
  \ dotnet#prop('ScrollNS', 'Cursor'),
  \ dotnet#prop('ScrollWE', 'Cursor'),
  \ dotnet#prop('ScrollAll', 'Cursor'),
  \ dotnet#prop('ScrollN', 'Cursor'),
  \ dotnet#prop('ScrollS', 'Cursor'),
  \ dotnet#prop('ScrollW', 'Cursor'),
  \ dotnet#prop('ScrollE', 'Cursor'),
  \ dotnet#prop('ScrollNW', 'Cursor'),
  \ dotnet#prop('ScrollNE', 'Cursor'),
  \ dotnet#prop('ScrollSW', 'Cursor'),
  \ dotnet#prop('ScrollSE', 'Cursor'),
  \ dotnet#prop('ArrowCD', 'Cursor'),
  \ ])

call dotnet#class('CursorConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('GetStandardValues(', 'class ITypeDescriptorContext context)', 'TypeConverter/StandardValuesCollection'),
  \ dotnet#method('GetStandardValuesSupported(', 'class ITypeDescriptorContext context)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('CursorConverter(', ')', 'void'),
  \ ])

call dotnet#class('TextComposition', 'DispatcherObject', [ 
  \ dotnet#method('TextComposition(', 'class InputManager inputManager, IInputElement source, string resultText)', 'void'),
  \ dotnet#method('TextComposition(', 'class InputManager inputManager, IInputElement source, string resultText, TextCompositionAutoComplete autoComplete)', 'void'),
  \ dotnet#method('TextComposition(', 'class InputManager inputManager, IInputElement source, string resultText, TextCompositionAutoComplete autoComplete, InputDevice inputDevice)', 'void'),
  \ dotnet#method('Complete(', ')', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('get_CompositionText(', ')', 'string'),
  \ dotnet#method('set_CompositionText(', 'string value)', 'void'),
  \ dotnet#method('get_SystemText(', ')', 'string'),
  \ dotnet#method('set_SystemText(', 'string value)', 'void'),
  \ dotnet#method('get_ControlText(', ')', 'string'),
  \ dotnet#method('set_ControlText(', 'string value)', 'void'),
  \ dotnet#method('get_SystemCompositionText(', ')', 'string'),
  \ dotnet#method('set_SystemCompositionText(', 'string value)', 'void'),
  \ dotnet#method('get_AutoComplete(', ')', 'TextCompositionAutoComplete'),
  \ dotnet#method('SetText(', 'string resultText)', 'void'),
  \ dotnet#method('SetCompositionText(', 'string compositionText)', 'void'),
  \ dotnet#method('MakeSystem(', ')', 'void'),
  \ dotnet#method('MakeControl(', ')', 'void'),
  \ dotnet#method('ClearTexts(', ')', 'void'),
  \ dotnet#method('get_Source(', ')', '.method'),
  \ dotnet#method('get__InputDevice(', ')', '.method'),
  \ dotnet#method('get__InputManager(', ')', '.method'),
  \ dotnet#method('get_Stage(', ')', '.method'),
  \ dotnet#method('set_Stage(', 'TextCompositionStage value)', 'void'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('CompositionText', 'string'),
  \ dotnet#prop('SystemText', 'string'),
  \ dotnet#prop('ControlText', 'string'),
  \ dotnet#prop('SystemCompositionText', 'string'),
  \ dotnet#prop('AutoComplete', 'TextCompositionAutoComplete'),
  \ dotnet#prop('Source', 'IInputElement'),
  \ dotnet#prop('_InputDevice', 'InputDevice'),
  \ dotnet#prop('_InputManager', 'InputManager'),
  \ dotnet#prop('Stage', 'TextCompositionStage'),
  \ ])

call dotnet#class('KeyboardEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('KeyboardEventArgs(', 'class KeyboardDevice keyboard, int32 timestamp)', 'void'),
  \ dotnet#method('get_KeyboardDevice(', ')', 'KeyboardDevice'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('KeyboardDevice', 'KeyboardDevice'),
  \ ])

call dotnet#class('KeyboardFocusChangedEventArgs', 'KeyboardEventArgs', [ 
  \ dotnet#method('KeyboardFocusChangedEventArgs(', 'class KeyboardDevice keyboard, int32 timestamp, IInputElement oldFocus, IInputElement newFocus)', 'void'),
  \ dotnet#method('get_OldFocus(', ')', 'IInputElement'),
  \ dotnet#method('get_NewFocus(', ')', 'IInputElement'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('OldFocus', 'IInputElement'),
  \ dotnet#prop('NewFocus', 'IInputElement'),
  \ ])

call dotnet#class('KeyboardFocusChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('KeyboardFocusChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, KeyboardFocusChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('FocusManager', 'Object', [ 
  \ dotnet#method('GetFocusedElement(', 'class DependencyObject element)', 'static IInputElement'),
  \ dotnet#method('GetFocusedElement(', 'class DependencyObject element, bool validate)', 'static IInputElement'),
  \ dotnet#method('SetFocusedElement(', 'class DependencyObject element, IInputElement value)', 'static void'),
  \ dotnet#method('SetIsFocusScope(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetIsFocusScope(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('GetFocusScope(', 'class DependencyObject element)', 'static DependencyObject'),
  \ dotnet#method('FocusManager(', ')', 'static void .'),
  \ ])

call dotnet#class('InertiaExpansionBehavior', 'Object', [ 
  \ dotnet#method('InertiaExpansionBehavior(', ')', 'void'),
  \ dotnet#method('InertiaExpansionBehavior(', 'VInertiaExpansionBehavior initialVelocity)', 'void'),
  \ dotnet#method('get_InitialVelocity(', ')', 'VInertiaExpansionBehavior'),
  \ dotnet#method('set_InitialVelocity(', 'VInertiaExpansionBehavior value)', 'void'),
  \ dotnet#method('get_DesiredDeceleration(', ')', 'float64'),
  \ dotnet#method('set_DesiredDeceleration(', 'float64 value)', 'void'),
  \ dotnet#method('get_DesiredExpansion(', ')', 'VInertiaExpansionBehavior'),
  \ dotnet#method('set_DesiredExpansion(', 'VInertiaExpansionBehavior value)', 'void'),
  \ dotnet#method('get_InitialRadius(', ')', 'float64'),
  \ dotnet#method('set_InitialRadius(', 'float64 value)', 'void'),
  \ dotnet#method('CanUseForInertia(', ')', 'bool'),
  \ dotnet#method('ApplyParameters(', 'class InertiaExpansionBehavior behavior, InertiaProcessor2D processor, VInertiaExpansionBehavior initialVelocity)', 'static void'),
  \ dotnet#prop('InitialVelocity', 'VInertiaExpansionBehavior'),
  \ dotnet#prop('DesiredDeceleration', 'float64'),
  \ dotnet#prop('DesiredExpansion', 'VInertiaExpansionBehavior'),
  \ dotnet#prop('InitialRadius', 'float64'),
  \ ])

call dotnet#class('InertiaRotationBehavior', 'Object', [ 
  \ dotnet#method('InertiaRotationBehavior(', ')', 'void'),
  \ dotnet#method('InertiaRotationBehavior(', 'float64 initialVelocity)', 'void'),
  \ dotnet#method('get_InitialVelocity(', ')', 'float64'),
  \ dotnet#method('set_InitialVelocity(', 'float64 value)', 'void'),
  \ dotnet#method('get_DesiredDeceleration(', ')', 'float64'),
  \ dotnet#method('set_DesiredDeceleration(', 'float64 value)', 'void'),
  \ dotnet#method('get_DesiredRotation(', ')', 'float64'),
  \ dotnet#method('set_DesiredRotation(', 'float64 value)', 'void'),
  \ dotnet#method('CanUseForInertia(', ')', 'bool'),
  \ dotnet#method('ApplyParameters(', 'class InertiaRotationBehavior behavior, InertiaProcessor2D processor, float64 initialVelocity)', 'static void'),
  \ dotnet#prop('InitialVelocity', 'float64'),
  \ dotnet#prop('DesiredDeceleration', 'float64'),
  \ dotnet#prop('DesiredRotation', 'float64'),
  \ ])

call dotnet#class('InertiaTranslationBehavior', 'Object', [ 
  \ dotnet#method('InertiaTranslationBehavior(', ')', 'void'),
  \ dotnet#method('InertiaTranslationBehavior(', 'VInertiaTranslationBehavior initialVelocity)', 'void'),
  \ dotnet#method('get_InitialVelocity(', ')', 'VInertiaTranslationBehavior'),
  \ dotnet#method('set_InitialVelocity(', 'VInertiaTranslationBehavior value)', 'void'),
  \ dotnet#method('get_DesiredDeceleration(', ')', 'float64'),
  \ dotnet#method('set_DesiredDeceleration(', 'float64 value)', 'void'),
  \ dotnet#method('get_DesiredDisplacement(', ')', 'float64'),
  \ dotnet#method('set_DesiredDisplacement(', 'float64 value)', 'void'),
  \ dotnet#method('CanUseForInertia(', ')', 'bool'),
  \ dotnet#method('ApplyParameters(', 'class InertiaTranslationBehavior behavior, InertiaProcessor2D processor, VInertiaTranslationBehavior initialVelocity)', 'static void'),
  \ dotnet#prop('InitialVelocity', 'VInertiaTranslationBehavior'),
  \ dotnet#prop('DesiredDeceleration', 'float64'),
  \ dotnet#prop('DesiredDisplacement', 'float64'),
  \ ])

call dotnet#class('InputEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InputEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InputEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InputEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InputLanguageEventArgs', 'EventArgs', [ 
  \ dotnet#method('InputLanguageEventArgs(', 'class CultureInfo newLanguageId, CultureInfo previousLanguageId)', 'void'),
  \ dotnet#method('get_NewLanguage(', ')', ''),
  \ dotnet#method('get_PreviousLanguage(', ')', ''),
  \ dotnet#prop('NewLanguage', 'CultureInfo'),
  \ dotnet#prop('PreviousLanguage', 'CultureInfo'),
  \ ])

call dotnet#class('InputLanguageChangedEventArgs', 'InputLanguageEventArgs', [ 
  \ dotnet#method('InputLanguageChangedEventArgs(', 'class CultureInfo newLanguageId, CultureInfo previousLanguageId)', 'void'),
  \ ])

call dotnet#class('InputLanguageChangingEventArgs', 'InputLanguageEventArgs', [ 
  \ dotnet#method('InputLanguageChangingEventArgs(', 'class CultureInfo newLanguageId, CultureInfo previousLanguageId)', 'void'),
  \ dotnet#method('get_Rejected(', ')', 'bool'),
  \ dotnet#method('set_Rejected(', 'bool value)', 'void'),
  \ dotnet#prop('Rejected', 'bool'),
  \ ])

call dotnet#class('InputLanguageManager', 'DispatcherObject', [ 
  \ dotnet#method('SetInputLanguage(', 'class DependencyObject target, CultureInfo inputLanguage)', 'static void'),
  \ dotnet#method('GetInputLanguage(', 'class DependencyObject target)', 'static CultureInfo'),
  \ dotnet#method('SetRestoreInputLanguage(', 'class DependencyObject target, bool restore)', 'static void'),
  \ dotnet#method('GetRestoreInputLanguage(', 'class DependencyObject target)', 'static bool'),
  \ dotnet#method('RegisterInputLanguageSource(', 'class IInputLanguageSource inputLanguageSource)', 'void'),
  \ dotnet#method('ReportInputLanguageChanged(', 'class CultureInfo newLanguageId, CultureInfo previousLanguageId)', 'void'),
  \ dotnet#method('ReportInputLanguageChanging(', 'class CultureInfo newLanguageId, CultureInfo previousLanguageId)', 'bool'),
  \ dotnet#method('get_Current(', ')', 'static'),
  \ dotnet#method('get_CurrentInputLanguage(', ')', 'CultureInfo'),
  \ dotnet#method('set_CurrentInputLanguage(', 'class CultureInfo value)', 'void'),
  \ dotnet#method('get_AvailableInputLanguages(', ')', 'IEnumerable'),
  \ dotnet#method('add_InputLanguageChanged(', 'class InputLanguageEventHandler value)', 'void'),
  \ dotnet#method('remove_InputLanguageChanged(', 'class InputLanguageEventHandler value)', 'void'),
  \ dotnet#method('add_InputLanguageChanging(', 'class InputLanguageEventHandler value)', 'void'),
  \ dotnet#method('remove_InputLanguageChanging(', 'class InputLanguageEventHandler value)', 'void'),
  \ dotnet#method('Focus(', 'class DependencyObject focus, DependencyObject focused)', 'void'),
  \ dotnet#method('get_Source(', ')', '.method'),
  \ dotnet#method('get_IsMultipleKeyboardLayout(', ')', 'static bool'),
  \ dotnet#method('InputLanguageManager(', ')', 'void'),
  \ dotnet#method('InputLanguageManager(', ')', 'static void .'),
  \ dotnet#event('InputLanguageChanged', 'InputLanguageEventHandler'),
  \ dotnet#event('InputLanguageChanging', 'InputLanguageEventHandler'),
  \ dotnet#prop('Current', 'InputLanguageManager'),
  \ dotnet#prop('CurrentInputLanguage', 'CultureInfo'),
  \ dotnet#prop('AvailableInputLanguages', 'IEnumerable'),
  \ dotnet#prop('Source', 'IInputLanguageSource'),
  \ dotnet#prop('IsMultipleKeyboardLayout', 'bool'),
  \ ])

call dotnet#class('InputLanguageEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InputLanguageEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InputLanguageEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InputLanguageEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InputManager', 'DispatcherObject', [ 
  \ dotnet#method('get_Current(', ')', 'static'),
  \ dotnet#method('get_UnsecureCurrent(', ')', 'static'),
  \ dotnet#method('get_IsSynchronizedInput(', ')', 'static bool'),
  \ dotnet#method('get_SynchronizedInputEvent(', ')', 'static'),
  \ dotnet#method('get_SynchronizeInputType(', ')', 'static'),
  \ dotnet#method('get_ListeningElement(', ')', 'static'),
  \ dotnet#method('get_SynchronizedInputState(', ')', 'static'),
  \ dotnet#method('set_SynchronizedInputState(', 'SynchronizedInputStates value)', 'static void'),
  \ dotnet#method('add_PreProcessInput(', 'class PreProcessInputEventHandler value)', 'void'),
  \ dotnet#method('remove_PreProcessInput(', 'class PreProcessInputEventHandler value)', 'void'),
  \ dotnet#method('add_PreNotifyInput(', 'class NotifyInputEventHandler value)', 'void'),
  \ dotnet#method('remove_PreNotifyInput(', 'class NotifyInputEventHandler value)', 'void'),
  \ dotnet#method('add_PostNotifyInput(', 'class NotifyInputEventHandler value)', 'void'),
  \ dotnet#method('remove_PostNotifyInput(', 'class NotifyInputEventHandler value)', 'void'),
  \ dotnet#method('add_PostProcessInput(', 'class ProcessInputEventHandler value)', 'void'),
  \ dotnet#method('remove_PostProcessInput(', 'class ProcessInputEventHandler value)', 'void'),
  \ dotnet#method('add_TranslateAccelerator(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('remove_TranslateAccelerator(', 'class KeyEventHandler value)', 'void'),
  \ dotnet#method('RaiseTranslateAccelerator(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('RegisterInputProvider(', 'class IInputProvider inputProvider)', 'InputProviderSite'),
  \ dotnet#method('UnregisterInputProvider(', 'class IInputProvider inputProvider)', 'void'),
  \ dotnet#method('get_InputProviders(', ')', 'ICollection'),
  \ dotnet#method('get_UnsecureInputProviders(', ')', '.method'),
  \ dotnet#method('get_PrimaryKeyboardDevice(', ')', 'KeyboardDevice'),
  \ dotnet#method('get_PrimaryMouseDevice(', ')', 'MouseDevice'),
  \ dotnet#method('get_StylusLogic(', ')', '.method'),
  \ dotnet#method('get_PrimaryCommandDevice(', ')', '.method'),
  \ dotnet#method('get_InDragDrop(', ')', 'bool'),
  \ dotnet#method('set_InDragDrop(', 'bool value)', 'void'),
  \ dotnet#method('get_MostRecentInputDevice(', ')', 'InputDevice'),
  \ dotnet#method('set_MostRecentInputDevice(', 'class InputDevice value)', 'void'),
  \ dotnet#method('PushMenuMode(', 'class PresentationSource menuSite)', 'void'),
  \ dotnet#method('PopMenuMode(', 'class PresentationSource menuSite)', 'void'),
  \ dotnet#method('get_IsInMenuMode(', ')', 'bool'),
  \ dotnet#method('add_EnterMenuMode(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_EnterMenuMode(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_LeaveMenuMode(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_LeaveMenuMode(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_HitTestInvalidatedAsync(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_HitTestInvalidatedAsync(', 'class EventHandler value)', 'void'),
  \ dotnet#method('NotifyHitTestInvalidated(', ')', 'void'),
  \ dotnet#method('SafeCurrentNotifyHitTestInvalidated(', ')', 'static void'),
  \ dotnet#method('InvalidateInputDevices(', ')', 'void'),
  \ dotnet#method('ProcessInput(', 'class InputEventArgs input)', 'bool'),
  \ dotnet#method('PushInput(', 'class StagingAreaInputItem inputItem)', 'StagingAreaInputItem'),
  \ dotnet#method('PushInput(', 'class InputEventArgs input, StagingAreaInputItem promote)', 'StagingAreaInputItem'),
  \ dotnet#method('PushMarker(', ')', 'StagingAreaInputItem'),
  \ dotnet#method('PopInput(', ')', 'StagingAreaInputItem'),
  \ dotnet#method('PeekInput(', ')', 'StagingAreaInputItem'),
  \ dotnet#method('ContinueProcessingStagingArea(', 'object unused)', 'object'),
  \ dotnet#method('StartListeningSynchronizedInput(', 'class DependencyObject d, SynchronizedInputType inputType)', 'static bool'),
  \ dotnet#method('CancelSynchronizedInput(', ')', 'static void'),
  \ dotnet#method('InputManager(', ')', 'void'),
  \ dotnet#method('InputManager(', ')', 'static void .'),
  \ dotnet#event('PreProcessInput', 'PreProcessInputEventHandler'),
  \ dotnet#event('PreNotifyInput', 'NotifyInputEventHandler'),
  \ dotnet#event('PostNotifyInput', 'NotifyInputEventHandler'),
  \ dotnet#event('PostProcessInput', 'ProcessInputEventHandler'),
  \ dotnet#event('TranslateAccelerator', 'KeyEventHandler'),
  \ dotnet#event('EnterMenuMode', 'EventHandler'),
  \ dotnet#event('LeaveMenuMode', 'EventHandler'),
  \ dotnet#event('HitTestInvalidatedAsync', 'EventHandler'),
  \ dotnet#prop('Current', 'InputManager'),
  \ dotnet#prop('UnsecureCurrent', 'InputManager'),
  \ dotnet#prop('IsSynchronizedInput', 'bool'),
  \ dotnet#prop('SynchronizedInputEvent', 'RoutedEvent'),
  \ dotnet#prop('SynchronizeInputType', 'SynchronizedInputType'),
  \ dotnet#prop('ListeningElement', 'DependencyObject'),
  \ dotnet#prop('SynchronizedInputState', 'SynchronizedInputStates'),
  \ dotnet#prop('InputProviders', 'ICollection'),
  \ dotnet#prop('UnsecureInputProviders', 'ICollection'),
  \ dotnet#prop('PrimaryKeyboardDevice', 'KeyboardDevice'),
  \ dotnet#prop('PrimaryMouseDevice', 'MouseDevice'),
  \ dotnet#prop('StylusLogic', 'StylusLogic'),
  \ dotnet#prop('PrimaryCommandDevice', 'CommandDevice'),
  \ dotnet#prop('InDragDrop', 'bool'),
  \ dotnet#prop('MostRecentInputDevice', 'InputDevice'),
  \ dotnet#prop('IsInMenuMode', 'bool'),
  \ ])

call dotnet#class('InputMethod', 'DispatcherObject', [ 
  \ dotnet#method('InputMethod(', ')', 'void'),
  \ dotnet#method('SetIsInputMethodEnabled(', 'class DependencyObject target, bool value)', 'static void'),
  \ dotnet#method('GetIsInputMethodEnabled(', 'class DependencyObject target)', 'static bool'),
  \ dotnet#method('SetIsInputMethodSuspended(', 'class DependencyObject target, bool value)', 'static void'),
  \ dotnet#method('GetIsInputMethodSuspended(', 'class DependencyObject target)', 'static bool'),
  \ dotnet#method('SetPreferredImeState(', 'class DependencyObject target, InputMethodState value)', 'static void'),
  \ dotnet#method('GetPreferredImeState(', 'class DependencyObject target)', 'static InputMethodState'),
  \ dotnet#method('SetPreferredImeConversionMode(', 'class DependencyObject target, ImeConversionModeValues value)', 'static void'),
  \ dotnet#method('GetPreferredImeConversionMode(', 'class DependencyObject target)', 'static ImeConversionModeValues'),
  \ dotnet#method('SetPreferredImeSentenceMode(', 'class DependencyObject target, ImeSentenceModeValues value)', 'static void'),
  \ dotnet#method('GetPreferredImeSentenceMode(', 'class DependencyObject target)', 'static ImeSentenceModeValues'),
  \ dotnet#method('SetInputScope(', 'class DependencyObject target, InputScope value)', 'static void'),
  \ dotnet#method('GetInputScope(', 'class DependencyObject target)', 'static InputScope'),
  \ dotnet#method('get_Current(', ')', 'static'),
  \ dotnet#method('ShowConfigureUI(', ')', 'void'),
  \ dotnet#method('ShowConfigureUI(', 'class UIElement element)', 'void'),
  \ dotnet#method('ShowRegisterWordUI(', ')', 'void'),
  \ dotnet#method('ShowRegisterWordUI(', 'string registeredText)', 'void'),
  \ dotnet#method('ShowRegisterWordUI(', 'class UIElement element, string registeredText)', 'void'),
  \ dotnet#method('get_ImeState(', ')', 'InputMethodState'),
  \ dotnet#method('set_ImeState(', 'InputMethodState value)', 'void'),
  \ dotnet#method('get_MicrophoneState(', ')', 'InputMethodState'),
  \ dotnet#method('set_MicrophoneState(', 'InputMethodState value)', 'void'),
  \ dotnet#method('get_HandwritingState(', ')', 'InputMethodState'),
  \ dotnet#method('set_HandwritingState(', 'InputMethodState value)', 'void'),
  \ dotnet#method('get_SpeechMode(', ')', 'SpeechMode'),
  \ dotnet#method('set_SpeechMode(', 'SpeechMode value)', 'void'),
  \ dotnet#method('get_ImeConversionMode(', ')', 'ImeConversionModeValues'),
  \ dotnet#method('set_ImeConversionMode(', 'ImeConversionModeValues value)', 'void'),
  \ dotnet#method('get_ImeSentenceMode(', ')', 'ImeSentenceModeValues'),
  \ dotnet#method('set_ImeSentenceMode(', 'ImeSentenceModeValues value)', 'void'),
  \ dotnet#method('get_CanShowConfigurationUI(', ')', 'bool'),
  \ dotnet#method('get_CanShowRegisterWordUI(', ')', 'bool'),
  \ dotnet#method('add_StateChanged(', 'class InputMethodStateChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_StateChanged(', 'class InputMethodStateChangedEventHandler value)', 'void'),
  \ dotnet#method('GotKeyboardFocus(', 'class DependencyObject focus)', 'void'),
  \ dotnet#method('OnChange(', 'Guid& rguid)', 'void'),
  \ dotnet#method('IsImm32ImeCurrent(', ')', 'static bool'),
  \ dotnet#method('IsImm32Ime(', 'native int hkl)', 'static bool'),
  \ dotnet#method('EnableOrDisableInputMethod(', 'bool bEnabled)', 'void'),
  \ dotnet#method('get_TextServicesContext(', ')', '.method'),
  \ dotnet#method('set_TextServicesContext(', 'class TextServicesContext value)', 'void'),
  \ dotnet#method('get_TextServicesCompartmentContext(', ')', '.method'),
  \ dotnet#method('set_TextServicesCompartmentContext(', 'class TextServicesCompartmentContext value)', 'void'),
  \ dotnet#method('get_InputLanguageManager(', ')', '.method'),
  \ dotnet#method('set_InputLanguageManager(', 'class InputLanguageManager value)', 'void'),
  \ dotnet#method('get_DefaultTextStore(', ')', '.method'),
  \ dotnet#method('set_DefaultTextStore(', 'class DefaultTextStore value)', 'void'),
  \ dotnet#method('InputMethod(', ')', 'static void .'),
  \ dotnet#event('StateChanged', 'InputMethodStateChangedEventHandler'),
  \ dotnet#prop('Current', 'InputMethod'),
  \ dotnet#prop('ImeState', 'InputMethodState'),
  \ dotnet#prop('MicrophoneState', 'InputMethodState'),
  \ dotnet#prop('HandwritingState', 'InputMethodState'),
  \ dotnet#prop('SpeechMode', 'SpeechMode'),
  \ dotnet#prop('ImeConversionMode', 'ImeConversionModeValues'),
  \ dotnet#prop('ImeSentenceMode', 'ImeSentenceModeValues'),
  \ dotnet#prop('CanShowConfigurationUI', 'bool'),
  \ dotnet#prop('CanShowRegisterWordUI', 'bool'),
  \ dotnet#prop('TextServicesContext', 'TextServicesContext'),
  \ dotnet#prop('TextServicesCompartmentContext', 'TextServicesCompartmentContext'),
  \ dotnet#prop('InputLanguageManager', 'InputLanguageManager'),
  \ dotnet#prop('DefaultTextStore', 'DefaultTextStore'),
  \ ])

call dotnet#class('InputMethodStateChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InputMethodStateChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InputMethodStateChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InputMethodStateChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InputMethodStateChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('InputMethodStateChangedEventArgs(', 'InputMethodStateType statetype)', 'void'),
  \ dotnet#method('get_IsImeStateChanged(', ')', 'bool'),
  \ dotnet#method('get_IsMicrophoneStateChanged(', ')', 'bool'),
  \ dotnet#method('get_IsHandwritingStateChanged(', ')', 'bool'),
  \ dotnet#method('get_IsSpeechModeChanged(', ')', 'bool'),
  \ dotnet#method('get_IsImeConversionModeChanged(', ')', 'bool'),
  \ dotnet#method('get_IsImeSentenceModeChanged(', ')', 'bool'),
  \ dotnet#prop('IsImeStateChanged', 'bool'),
  \ dotnet#prop('IsMicrophoneStateChanged', 'bool'),
  \ dotnet#prop('IsHandwritingStateChanged', 'bool'),
  \ dotnet#prop('IsSpeechModeChanged', 'bool'),
  \ dotnet#prop('IsImeConversionModeChanged', 'bool'),
  \ dotnet#prop('IsImeSentenceModeChanged', 'bool'),
  \ ])

call dotnet#class('InputScope', 'Object', [ 
  \ dotnet#method('get_Names(', ')', 'IList'),
  \ dotnet#method('get_SrgsMarkup(', ')', 'string'),
  \ dotnet#method('set_SrgsMarkup(', 'string value)', 'void'),
  \ dotnet#method('get_RegularExpression(', ')', 'string'),
  \ dotnet#method('set_RegularExpression(', 'string value)', 'void'),
  \ dotnet#method('get_PhraseList(', ')', 'IList'),
  \ dotnet#method('InputScope(', ')', 'void'),
  \ dotnet#prop('Names', 'IList'),
  \ dotnet#prop('SrgsMarkup', 'string'),
  \ dotnet#prop('RegularExpression', 'string'),
  \ dotnet#prop('PhraseList', 'IList'),
  \ ])

call dotnet#class('InputScopeName', 'Object', [ 
  \ dotnet#method('InputScopeName(', ')', 'void'),
  \ dotnet#method('InputScopeName(', 'InputScopeNameValue nameValue)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void'),
  \ dotnet#method('AddText(', 'string name)', 'void'),
  \ dotnet#method('get_NameValue(', ')', 'InputScopeNameValue'),
  \ dotnet#method('set_NameValue(', 'InputScopeNameValue value)', 'void'),
  \ dotnet#prop('NameValue', 'InputScopeNameValue'),
  \ ])

call dotnet#class('InputScopePhrase', 'Object', [ 
  \ dotnet#method('InputScopePhrase(', ')', 'void'),
  \ dotnet#method('InputScopePhrase(', 'string name)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void'),
  \ dotnet#method('AddText(', 'string name)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('InputScopeConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('InputScopeConverter(', ')', 'void'),
  \ ])

call dotnet#class('InputScopeNameConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('InputScopeNameConverter(', ')', 'void'),
  \ ])

call dotnet#class('Keyboard', 'Object', [ 
  \ dotnet#method('AddPreviewKeyDownHandler(', 'class DependencyObject element, KeyEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewKeyDownHandler(', 'class DependencyObject element, KeyEventHandler handler)', 'static void'),
  \ dotnet#method('AddKeyDownHandler(', 'class DependencyObject element, KeyEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveKeyDownHandler(', 'class DependencyObject element, KeyEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewKeyUpHandler(', 'class DependencyObject element, KeyEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewKeyUpHandler(', 'class DependencyObject element, KeyEventHandler handler)', 'static void'),
  \ dotnet#method('AddKeyUpHandler(', 'class DependencyObject element, KeyEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveKeyUpHandler(', 'class DependencyObject element, KeyEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewGotKeyboardFocusHandler(', 'class DependencyObject element, KeyboardFocusChangedEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewGotKeyboardFocusHandler(', 'class DependencyObject element, KeyboardFocusChangedEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewKeyboardInputProviderAcquireFocusHandler(', 'class DependencyObject element, KeyboardInputProviderAcquireFocusEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewKeyboardInputProviderAcquireFocusHandler(', 'class DependencyObject element, KeyboardInputProviderAcquireFocusEventHandler handler)', 'static void'),
  \ dotnet#method('AddKeyboardInputProviderAcquireFocusHandler(', 'class DependencyObject element, KeyboardInputProviderAcquireFocusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveKeyboardInputProviderAcquireFocusHandler(', 'class DependencyObject element, KeyboardInputProviderAcquireFocusEventHandler handler)', 'static void'),
  \ dotnet#method('AddGotKeyboardFocusHandler(', 'class DependencyObject element, KeyboardFocusChangedEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveGotKeyboardFocusHandler(', 'class DependencyObject element, KeyboardFocusChangedEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewLostKeyboardFocusHandler(', 'class DependencyObject element, KeyboardFocusChangedEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewLostKeyboardFocusHandler(', 'class DependencyObject element, KeyboardFocusChangedEventHandler handler)', 'static void'),
  \ dotnet#method('AddLostKeyboardFocusHandler(', 'class DependencyObject element, KeyboardFocusChangedEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveLostKeyboardFocusHandler(', 'class DependencyObject element, KeyboardFocusChangedEventHandler handler)', 'static void'),
  \ dotnet#method('get_FocusedElement(', ')', 'static'),
  \ dotnet#method('ClearFocus(', ')', 'static void'),
  \ dotnet#method('Focus(', 'class IInputElement element)', 'static IInputElement'),
  \ dotnet#method('get_DefaultRestoreFocusMode(', ')', 'static'),
  \ dotnet#method('set_DefaultRestoreFocusMode(', 'RestoreFocusMode value)', 'static void'),
  \ dotnet#method('get_Modifiers(', ')', 'static'),
  \ dotnet#method('IsKeyDown(', 'Key key)', 'static bool'),
  \ dotnet#method('IsKeyUp(', 'Key key)', 'static bool'),
  \ dotnet#method('IsKeyToggled(', 'Key key)', 'static bool'),
  \ dotnet#method('GetKeyStates(', 'Key key)', 'static KeyStates'),
  \ dotnet#method('get_PrimaryDevice(', ')', 'static'),
  \ dotnet#method('IsValidKey(', 'Key key)', 'static bool'),
  \ dotnet#method('IsFocusable(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('Keyboard(', ')', 'static void .'),
  \ dotnet#prop('FocusedElement', 'IInputElement'),
  \ dotnet#prop('DefaultRestoreFocusMode', 'RestoreFocusMode'),
  \ dotnet#prop('Modifiers', 'ModifierKeys'),
  \ dotnet#prop('PrimaryDevice', 'KeyboardDevice'),
  \ ])

call dotnet#class('KeyboardDevice', 'InputDevice', [ 
  \ dotnet#method('KeyboardDevice(', 'class InputManager inputManager)', 'void'),
  \ dotnet#method('GetKeyStatesFromSystem(', 'Key key)', 'abstract'),
  \ dotnet#method('get_Target(', ')', ''),
  \ dotnet#method('get_ForceTarget(', ')', '.method'),
  \ dotnet#method('set_ForceTarget(', 'class IInputElement value)', 'void'),
  \ dotnet#method('get_ActiveSource(', ')', ''),
  \ dotnet#method('get_DefaultRestoreFocusMode(', ')', 'RestoreFocusMode'),
  \ dotnet#method('set_DefaultRestoreFocusMode(', 'RestoreFocusMode value)', 'void'),
  \ dotnet#method('get_FocusedElement(', ')', 'IInputElement'),
  \ dotnet#method('ClearFocus(', ')', 'void'),
  \ dotnet#method('Focus(', 'class IInputElement element)', 'IInputElement'),
  \ dotnet#method('get_Modifiers(', ')', 'ModifierKeys'),
  \ dotnet#method('IsKeyDown(', 'Key key)', 'bool'),
  \ dotnet#method('IsKeyUp(', 'Key key)', 'bool'),
  \ dotnet#method('IsKeyToggled(', 'Key key)', 'bool'),
  \ dotnet#method('GetKeyStates(', 'Key key)', 'KeyStates'),
  \ dotnet#method('get_TextServicesManager(', ')', '.method'),
  \ dotnet#method('get_TextCompositionManager(', ')', '.method'),
  \ dotnet#method('ReevaluateFocusAsync(', 'class DependencyObject element, DependencyObject oldParent, bool isCoreParent)', 'void'),
  \ dotnet#method('get_IsActive(', ')', 'bool'),
  \ dotnet#prop('Target', 'IInputElement'),
  \ dotnet#prop('ForceTarget', 'IInputElement'),
  \ dotnet#prop('ActiveSource', 'PresentationSource'),
  \ dotnet#prop('DefaultRestoreFocusMode', 'RestoreFocusMode'),
  \ dotnet#prop('FocusedElement', 'IInputElement'),
  \ dotnet#prop('Modifiers', 'ModifierKeys'),
  \ dotnet#prop('TextServicesManager', 'TextServicesManager'),
  \ dotnet#prop('TextCompositionManager', 'TextCompositionManager'),
  \ dotnet#prop('IsActive', 'bool'),
  \ ])

call dotnet#class('KeyboardEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('KeyboardEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, KeyboardEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, KeyboardEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('KeyboardInputProviderAcquireFocusEventArgs', 'KeyboardEventArgs', [ 
  \ dotnet#method('KeyboardInputProviderAcquireFocusEventArgs(', 'class KeyboardDevice keyboard, int32 timestamp, bool focusAcquired)', 'void'),
  \ dotnet#method('get_FocusAcquired(', ')', 'bool'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('FocusAcquired', 'bool'),
  \ ])

call dotnet#class('KeyboardInputProviderAcquireFocusEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('KeyboardInputProviderAcquireFocusEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, KeyboardInputProviderAcquireFocusEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, KeyboardInputProviderAcquireFocusEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('KeyEventArgs', 'KeyboardEventArgs', [ 
  \ dotnet#method('KeyEventArgs(', 'class KeyboardDevice keyboard, PresentationSource inputSource, int32 timestamp, Key key)', 'void'),
  \ dotnet#method('get_InputSource(', ')', 'PresentationSource'),
  \ dotnet#method('get_Key(', ')', 'Key'),
  \ dotnet#method('get_RealKey(', ')', '.method'),
  \ dotnet#method('get_ImeProcessedKey(', ')', 'Key'),
  \ dotnet#method('get_SystemKey(', ')', 'Key'),
  \ dotnet#method('get_DeadCharProcessedKey(', ')', 'Key'),
  \ dotnet#method('get_KeyStates(', ')', 'KeyStates'),
  \ dotnet#method('get_IsRepeat(', ')', 'bool'),
  \ dotnet#method('get_IsDown(', ')', 'bool'),
  \ dotnet#method('get_IsUp(', ')', 'bool'),
  \ dotnet#method('get_IsToggled(', ')', 'bool'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('SetRepeat(', 'bool newRepeatState)', 'void'),
  \ dotnet#method('MarkNormal(', ')', 'void'),
  \ dotnet#method('MarkSystem(', ')', 'void'),
  \ dotnet#method('MarkImeProcessed(', ')', 'void'),
  \ dotnet#method('MarkDeadCharProcessed(', ')', 'void'),
  \ dotnet#method('get_UnsafeInputSource(', ')', '.method'),
  \ dotnet#method('get_ScanCode(', ')', 'int32'),
  \ dotnet#method('set_ScanCode(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsExtendedKey(', ')', 'bool'),
  \ dotnet#method('set_IsExtendedKey(', 'bool value)', 'void'),
  \ dotnet#prop('InputSource', 'PresentationSource'),
  \ dotnet#prop('Key', 'Key'),
  \ dotnet#prop('RealKey', 'Key'),
  \ dotnet#prop('ImeProcessedKey', 'Key'),
  \ dotnet#prop('SystemKey', 'Key'),
  \ dotnet#prop('DeadCharProcessedKey', 'Key'),
  \ dotnet#prop('KeyStates', 'KeyStates'),
  \ dotnet#prop('IsRepeat', 'bool'),
  \ dotnet#prop('IsDown', 'bool'),
  \ dotnet#prop('IsUp', 'bool'),
  \ dotnet#prop('IsToggled', 'bool'),
  \ dotnet#prop('UnsafeInputSource', 'PresentationSource'),
  \ dotnet#prop('ScanCode', 'int32'),
  \ dotnet#prop('IsExtendedKey', 'bool'),
  \ ])

call dotnet#class('KeyEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('KeyEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, KeyEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, KeyEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('Manipulation', 'Object', [ 
  \ dotnet#method('IsManipulationActive(', 'class UIElement element)', 'static bool'),
  \ dotnet#method('StartInertia(', 'class UIElement element)', 'static void'),
  \ dotnet#method('CompleteManipulation(', 'class UIElement element)', 'static void'),
  \ dotnet#method('TryCompleteManipulation(', 'class UIElement element)', 'static bool'),
  \ dotnet#method('SetManipulationMode(', 'class UIElement element, ManipulationModes mode)', 'static void'),
  \ dotnet#method('GetManipulationMode(', 'class UIElement element)', 'static ManipulationModes'),
  \ dotnet#method('SetManipulationContainer(', 'class UIElement element, IInputElement container)', 'static void'),
  \ dotnet#method('GetManipulationContainer(', 'class UIElement element)', 'static IInputElement'),
  \ dotnet#method('SetManipulationPivot(', 'class UIElement element, ManipulationPivot pivot)', 'static void'),
  \ dotnet#method('GetManipulationPivot(', 'class UIElement element)', 'static ManipulationPivot'),
  \ dotnet#method('AddManipulator(', 'class UIElement element, IManipulator manipulator)', 'static void'),
  \ dotnet#method('RemoveManipulator(', 'class UIElement element, IManipulator manipulator)', 'static void'),
  \ dotnet#method('TryRemoveManipulator(', 'class UIElement element, IManipulator manipulator)', 'static bool'),
  \ dotnet#method('SetManipulationParameter(', 'class UIElement element, ManipulationParameters2D parameter)', 'static void'),
  \ dotnet#method('FindManipulationParent(', 'class Visual visual)', 'static UIElement'),
  \ dotnet#method('Manipulation(', ')', 'static void .'),
  \ ])

call dotnet#class('ManipulationBoundaryFeedbackEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('ManipulationBoundaryFeedbackEventArgs(', 'class ManipulationDevice manipulationDevice, int32 timestamp, IInputElement manipulationContainer, ManipulationDelta boundaryFeedback)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('get_ManipulationContainer(', ')', 'IInputElement'),
  \ dotnet#method('get_BoundaryFeedback(', ')', 'ManipulationDelta'),
  \ dotnet#method('get_CompensateForBoundaryFeedback(', ')', '.method'),
  \ dotnet#method('set_CompensateForBoundaryFeedback(', 'class Func value)', 'void'),
  \ dotnet#method('get_Manipulators(', ')', 'IEnumerable'),
  \ dotnet#method('set_ManipulationContainer(', 'class IInputElement value)', 'void'),
  \ dotnet#method('set_BoundaryFeedback(', 'class ManipulationDelta value)', 'void'),
  \ dotnet#prop('ManipulationContainer', 'IInputElement'),
  \ dotnet#prop('BoundaryFeedback', 'ManipulationDelta'),
  \ dotnet#prop('CompensateForBoundaryFeedback', 'Func'),
  \ dotnet#prop('Manipulators', 'IEnumerable'),
  \ ])

call dotnet#class('ManipulationCompletedEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('ManipulationCompletedEventArgs(', 'class ManipulationDevice manipulationDevice, int32 timestamp, IInputElement manipulationContainer, Point origin, ManipulationDelta total, ManipulationVelocities velocities, bool isInertial)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('get_IsInertial(', ')', 'bool'),
  \ dotnet#method('get_ManipulationContainer(', ')', 'IInputElement'),
  \ dotnet#method('get_ManipulationOrigin(', ')', 'Point'),
  \ dotnet#method('get_TotalManipulation(', ')', 'ManipulationDelta'),
  \ dotnet#method('get_FinalVelocities(', ')', 'ManipulationVelocities'),
  \ dotnet#method('Cancel(', ')', 'bool'),
  \ dotnet#method('get_RequestedCancel(', ')', 'bool'),
  \ dotnet#method('get_Manipulators(', ')', 'IEnumerable'),
  \ dotnet#method('set_IsInertial(', 'bool value)', 'void'),
  \ dotnet#method('set_ManipulationContainer(', 'class IInputElement value)', 'void'),
  \ dotnet#method('set_ManipulationOrigin(', 'Point value)', 'void'),
  \ dotnet#method('set_TotalManipulation(', 'class ManipulationDelta value)', 'void'),
  \ dotnet#method('set_FinalVelocities(', 'class ManipulationVelocities value)', 'void'),
  \ dotnet#method('set_RequestedCancel(', 'bool value)', 'void'),
  \ dotnet#prop('IsInertial', 'bool'),
  \ dotnet#prop('ManipulationContainer', 'IInputElement'),
  \ dotnet#prop('ManipulationOrigin', 'Point'),
  \ dotnet#prop('TotalManipulation', 'ManipulationDelta'),
  \ dotnet#prop('FinalVelocities', 'ManipulationVelocities'),
  \ dotnet#prop('RequestedCancel', 'bool'),
  \ dotnet#prop('Manipulators', 'IEnumerable'),
  \ ])

call dotnet#class('ManipulationDelta', 'Object', [ 
  \ dotnet#method('ManipulationDelta(', 'VManipulationDelta translation, float64 rotation, VManipulationDelta scale, VManipulationDelta expansion)', 'void'),
  \ dotnet#method('get_Translation(', ')', 'VManipulationDelta'),
  \ dotnet#method('get_Rotation(', ')', 'float64'),
  \ dotnet#method('get_Scale(', ')', 'VManipulationDelta'),
  \ dotnet#method('get_Expansion(', ')', 'VManipulationDelta'),
  \ dotnet#method('set_Translation(', 'VManipulationDelta value)', 'void'),
  \ dotnet#method('set_Rotation(', 'float64 value)', 'void'),
  \ dotnet#method('set_Scale(', 'VManipulationDelta value)', 'void'),
  \ dotnet#method('set_Expansion(', 'VManipulationDelta value)', 'void'),
  \ dotnet#prop('Translation', 'VManipulationDelta'),
  \ dotnet#prop('Rotation', 'float64'),
  \ dotnet#prop('Scale', 'VManipulationDelta'),
  \ dotnet#prop('Expansion', 'VManipulationDelta'),
  \ ])

call dotnet#class('ManipulationDeltaEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('ManipulationDeltaEventArgs(', 'class ManipulationDevice manipulationDevice, int32 timestamp, IInputElement manipulationContainer, Point origin, ManipulationDelta delta, ManipulationDelta cumulative, ManipulationVelocities velocities, bool isInertial)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('get_IsInertial(', ')', 'bool'),
  \ dotnet#method('get_ManipulationContainer(', ')', 'IInputElement'),
  \ dotnet#method('get_ManipulationOrigin(', ')', 'Point'),
  \ dotnet#method('get_CumulativeManipulation(', ')', 'ManipulationDelta'),
  \ dotnet#method('get_DeltaManipulation(', ')', 'ManipulationDelta'),
  \ dotnet#method('get_Velocities(', ')', 'ManipulationVelocities'),
  \ dotnet#method('ReportBoundaryFeedback(', 'class ManipulationDelta unusedManipulation)', 'void'),
  \ dotnet#method('get_UnusedManipulation(', ')', '.method'),
  \ dotnet#method('Complete(', ')', 'void'),
  \ dotnet#method('StartInertia(', ')', 'void'),
  \ dotnet#method('Cancel(', ')', 'bool'),
  \ dotnet#method('get_RequestedComplete(', ')', 'bool'),
  \ dotnet#method('get_RequestedInertia(', ')', 'bool'),
  \ dotnet#method('get_RequestedCancel(', ')', 'bool'),
  \ dotnet#method('get_Manipulators(', ')', 'IEnumerable'),
  \ dotnet#method('set_IsInertial(', 'bool value)', 'void'),
  \ dotnet#method('set_ManipulationContainer(', 'class IInputElement value)', 'void'),
  \ dotnet#method('set_ManipulationOrigin(', 'Point value)', 'void'),
  \ dotnet#method('set_CumulativeManipulation(', 'class ManipulationDelta value)', 'void'),
  \ dotnet#method('set_DeltaManipulation(', 'class ManipulationDelta value)', 'void'),
  \ dotnet#method('set_Velocities(', 'class ManipulationVelocities value)', 'void'),
  \ dotnet#method('set_UnusedManipulation(', 'class ManipulationDelta value)', 'void'),
  \ dotnet#method('set_RequestedComplete(', 'bool value)', 'void'),
  \ dotnet#method('set_RequestedInertia(', 'bool value)', 'void'),
  \ dotnet#method('set_RequestedCancel(', 'bool value)', 'void'),
  \ dotnet#prop('IsInertial', 'bool'),
  \ dotnet#prop('ManipulationContainer', 'IInputElement'),
  \ dotnet#prop('ManipulationOrigin', 'Point'),
  \ dotnet#prop('CumulativeManipulation', 'ManipulationDelta'),
  \ dotnet#prop('DeltaManipulation', 'ManipulationDelta'),
  \ dotnet#prop('Velocities', 'ManipulationVelocities'),
  \ dotnet#prop('UnusedManipulation', 'ManipulationDelta'),
  \ dotnet#prop('RequestedComplete', 'bool'),
  \ dotnet#prop('RequestedInertia', 'bool'),
  \ dotnet#prop('RequestedCancel', 'bool'),
  \ dotnet#prop('Manipulators', 'IEnumerable'),
  \ ])

call dotnet#class('ManipulationInertiaStartingEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('ManipulationInertiaStartingEventArgs(', 'class ManipulationDevice manipulationDevice, int32 timestamp, IInputElement manipulationContainer, Point origin, ManipulationVelocities initialVelocities, bool isInInertia)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('get_ManipulationContainer(', ')', 'IInputElement'),
  \ dotnet#method('get_ManipulationOrigin(', ')', 'Point'),
  \ dotnet#method('set_ManipulationOrigin(', 'Point value)', 'void'),
  \ dotnet#method('get_InitialVelocities(', ')', 'ManipulationVelocities'),
  \ dotnet#method('get_TranslationBehavior(', ')', 'InertiaTranslationBehavior'),
  \ dotnet#method('set_TranslationBehavior(', 'class InertiaTranslationBehavior value)', 'void'),
  \ dotnet#method('get_RotationBehavior(', ')', 'InertiaRotationBehavior'),
  \ dotnet#method('set_RotationBehavior(', 'class InertiaRotationBehavior value)', 'void'),
  \ dotnet#method('get_ExpansionBehavior(', ')', 'InertiaExpansionBehavior'),
  \ dotnet#method('set_ExpansionBehavior(', 'class InertiaExpansionBehavior value)', 'void'),
  \ dotnet#method('Cancel(', ')', 'bool'),
  \ dotnet#method('get_RequestedCancel(', ')', 'bool'),
  \ dotnet#method('get_Manipulators(', ')', 'IEnumerable'),
  \ dotnet#method('SetInertiaParameter(', 'class InertiaParameters2D parameter)', 'void'),
  \ dotnet#method('CanBeginInertia(', ')', 'bool'),
  \ dotnet#method('ApplyParameters(', 'class InertiaProcessor2D processor)', 'void'),
  \ dotnet#method('set_ManipulationContainer(', 'class IInputElement value)', 'void'),
  \ dotnet#method('set_InitialVelocities(', 'class ManipulationVelocities value)', 'void'),
  \ dotnet#method('set_RequestedCancel(', 'bool value)', 'void'),
  \ dotnet#prop('ManipulationContainer', 'IInputElement'),
  \ dotnet#prop('ManipulationOrigin', 'Point'),
  \ dotnet#prop('InitialVelocities', 'ManipulationVelocities'),
  \ dotnet#prop('TranslationBehavior', 'InertiaTranslationBehavior'),
  \ dotnet#prop('RotationBehavior', 'InertiaRotationBehavior'),
  \ dotnet#prop('ExpansionBehavior', 'InertiaExpansionBehavior'),
  \ dotnet#prop('RequestedCancel', 'bool'),
  \ dotnet#prop('Manipulators', 'IEnumerable'),
  \ ])

call dotnet#class('ManipulationPivot', 'Object', [ 
  \ dotnet#method('ManipulationPivot(', ')', 'void'),
  \ dotnet#method('ManipulationPivot(', 'Point center, float64 radius)', 'void'),
  \ dotnet#method('get_Center(', ')', 'Point'),
  \ dotnet#method('set_Center(', 'Point value)', 'void'),
  \ dotnet#method('get_Radius(', ')', 'float64'),
  \ dotnet#method('set_Radius(', 'float64 value)', 'void'),
  \ dotnet#prop('Center', 'Point'),
  \ dotnet#prop('Radius', 'float64'),
  \ ])

call dotnet#class('ManipulationStartedEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('ManipulationStartedEventArgs(', 'class ManipulationDevice manipulationDevice, int32 timestamp, IInputElement manipulationContainer, Point origin)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('get_ManipulationContainer(', ')', 'IInputElement'),
  \ dotnet#method('get_ManipulationOrigin(', ')', 'Point'),
  \ dotnet#method('Complete(', ')', 'void'),
  \ dotnet#method('Cancel(', ')', 'bool'),
  \ dotnet#method('get_RequestedComplete(', ')', 'bool'),
  \ dotnet#method('get_RequestedCancel(', ')', 'bool'),
  \ dotnet#method('get_Manipulators(', ')', 'IEnumerable'),
  \ dotnet#method('set_ManipulationContainer(', 'class IInputElement value)', 'void'),
  \ dotnet#method('set_ManipulationOrigin(', 'Point value)', 'void'),
  \ dotnet#method('set_RequestedComplete(', 'bool value)', 'void'),
  \ dotnet#method('set_RequestedCancel(', 'bool value)', 'void'),
  \ dotnet#prop('ManipulationContainer', 'IInputElement'),
  \ dotnet#prop('ManipulationOrigin', 'Point'),
  \ dotnet#prop('RequestedComplete', 'bool'),
  \ dotnet#prop('RequestedCancel', 'bool'),
  \ dotnet#prop('Manipulators', 'IEnumerable'),
  \ ])

call dotnet#class('ManipulationStartingEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('ManipulationStartingEventArgs(', 'class ManipulationDevice manipulationDevice, int32 timestamp)', 'void'),
  \ dotnet#method('get_Mode(', ')', 'ManipulationModes'),
  \ dotnet#method('set_Mode(', 'ManipulationModes value)', 'void'),
  \ dotnet#method('get_ManipulationContainer(', ')', 'IInputElement'),
  \ dotnet#method('set_ManipulationContainer(', 'class IInputElement value)', 'void'),
  \ dotnet#method('get_Pivot(', ')', 'ManipulationPivot'),
  \ dotnet#method('set_Pivot(', 'class ManipulationPivot value)', 'void'),
  \ dotnet#method('get_IsSingleTouchEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsSingleTouchEnabled(', 'bool value)', 'void'),
  \ dotnet#method('Cancel(', ')', 'bool'),
  \ dotnet#method('get_RequestedCancel(', ')', 'bool'),
  \ dotnet#method('get_Manipulators(', ')', 'IEnumerable'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('SetManipulationParameter(', 'class ManipulationParameters2D parameter)', 'void'),
  \ dotnet#method('get_Parameters(', ')', '.method'),
  \ dotnet#method('set_RequestedCancel(', 'bool value)', 'void'),
  \ dotnet#prop('Mode', 'ManipulationModes'),
  \ dotnet#prop('ManipulationContainer', 'IInputElement'),
  \ dotnet#prop('Pivot', 'ManipulationPivot'),
  \ dotnet#prop('IsSingleTouchEnabled', 'bool'),
  \ dotnet#prop('RequestedCancel', 'bool'),
  \ dotnet#prop('Manipulators', 'IEnumerable'),
  \ dotnet#prop('Parameters', 'IList'),
  \ ])

call dotnet#class('ManipulationVelocities', 'Object', [ 
  \ dotnet#method('ManipulationVelocities(', 'VManipulationVelocities linearVelocity, float64 angularVelocity, VManipulationVelocities expansionVelocity)', 'void'),
  \ dotnet#method('get_LinearVelocity(', ')', 'VManipulationVelocities'),
  \ dotnet#method('get_AngularVelocity(', ')', 'float64'),
  \ dotnet#method('get_ExpansionVelocity(', ')', 'VManipulationVelocities'),
  \ dotnet#method('set_LinearVelocity(', 'VManipulationVelocities value)', 'void'),
  \ dotnet#method('set_AngularVelocity(', 'float64 value)', 'void'),
  \ dotnet#method('set_ExpansionVelocity(', 'VManipulationVelocities value)', 'void'),
  \ dotnet#prop('LinearVelocity', 'VManipulationVelocities'),
  \ dotnet#prop('AngularVelocity', 'float64'),
  \ dotnet#prop('ExpansionVelocity', 'VManipulationVelocities'),
  \ ])

call dotnet#class('Mouse', 'Object', [ 
  \ dotnet#method('AddPreviewMouseMoveHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewMouseMoveHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('AddMouseMoveHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveMouseMoveHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewMouseDownOutsideCapturedElementHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewMouseDownOutsideCapturedElementHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewMouseUpOutsideCapturedElementHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewMouseUpOutsideCapturedElementHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewMouseDownHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewMouseDownHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('AddMouseDownHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveMouseDownHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewMouseUpHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewMouseUpHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('AddMouseUpHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveMouseUpHandler(', 'class DependencyObject element, MouseButtonEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewMouseWheelHandler(', 'class DependencyObject element, MouseWheelEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewMouseWheelHandler(', 'class DependencyObject element, MouseWheelEventHandler handler)', 'static void'),
  \ dotnet#method('AddMouseWheelHandler(', 'class DependencyObject element, MouseWheelEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveMouseWheelHandler(', 'class DependencyObject element, MouseWheelEventHandler handler)', 'static void'),
  \ dotnet#method('AddMouseEnterHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveMouseEnterHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('AddMouseLeaveHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveMouseLeaveHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('AddGotMouseCaptureHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveGotMouseCaptureHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('AddLostMouseCaptureHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveLostMouseCaptureHandler(', 'class DependencyObject element, MouseEventHandler handler)', 'static void'),
  \ dotnet#method('AddQueryCursorHandler(', 'class DependencyObject element, QueryCursorEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveQueryCursorHandler(', 'class DependencyObject element, QueryCursorEventHandler handler)', 'static void'),
  \ dotnet#method('get_DirectlyOver(', ')', 'static'),
  \ dotnet#method('get_Captured(', ')', 'static'),
  \ dotnet#method('get_CapturedMode(', ')', 'static'),
  \ dotnet#method('Capture(', 'class IInputElement element)', 'static bool'),
  \ dotnet#method('Capture(', 'class IInputElement element, CaptureMode captureMode)', 'static bool'),
  \ dotnet#method('GetIntermediatePoints(', 'class IInputElement relativeTo, Point[] points)', 'static int32'),
  \ dotnet#method('get_OverrideCursor(', ')', 'static'),
  \ dotnet#method('set_OverrideCursor(', 'class Cursor value)', 'static void'),
  \ dotnet#method('SetCursor(', 'class Cursor cursor)', 'static bool'),
  \ dotnet#method('get_LeftButton(', ')', 'static'),
  \ dotnet#method('get_RightButton(', ')', 'static'),
  \ dotnet#method('get_MiddleButton(', ')', 'static'),
  \ dotnet#method('get_XButton1(', ')', 'static'),
  \ dotnet#method('get_XButton2(', ')', 'static'),
  \ dotnet#method('GetPosition(', 'class IInputElement relativeTo)', 'static Point'),
  \ dotnet#method('Synchronize(', ')', 'static void'),
  \ dotnet#method('UpdateCursor(', ')', 'static void'),
  \ dotnet#method('get_PrimaryDevice(', ')', 'static'),
  \ dotnet#method('Mouse(', ')', 'static void .'),
  \ dotnet#prop('DirectlyOver', 'IInputElement'),
  \ dotnet#prop('Captured', 'IInputElement'),
  \ dotnet#prop('CapturedMode', 'CaptureMode'),
  \ dotnet#prop('OverrideCursor', 'Cursor'),
  \ dotnet#prop('LeftButton', 'MouseButtonState'),
  \ dotnet#prop('RightButton', 'MouseButtonState'),
  \ dotnet#prop('MiddleButton', 'MouseButtonState'),
  \ dotnet#prop('XButton1', 'MouseButtonState'),
  \ dotnet#prop('XButton2', 'MouseButtonState'),
  \ dotnet#prop('PrimaryDevice', 'MouseDevice'),
  \ ])

call dotnet#class('MouseEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('MouseEventArgs(', 'class MouseDevice mouse, int32 timestamp)', 'void'),
  \ dotnet#method('MouseEventArgs(', 'class MouseDevice mouse, int32 timestamp, StylusDevice stylusDevice)', 'void'),
  \ dotnet#method('get_MouseDevice(', ')', 'MouseDevice'),
  \ dotnet#method('get_StylusDevice(', ')', 'StylusDevice'),
  \ dotnet#method('GetPosition(', 'class IInputElement relativeTo)', 'Point'),
  \ dotnet#method('get_LeftButton(', ')', 'MouseButtonState'),
  \ dotnet#method('get_RightButton(', ')', 'MouseButtonState'),
  \ dotnet#method('get_MiddleButton(', ')', 'MouseButtonState'),
  \ dotnet#method('get_XButton1(', ')', 'MouseButtonState'),
  \ dotnet#method('get_XButton2(', ')', 'MouseButtonState'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('MouseDevice', 'MouseDevice'),
  \ dotnet#prop('StylusDevice', 'StylusDevice'),
  \ dotnet#prop('LeftButton', 'MouseButtonState'),
  \ dotnet#prop('RightButton', 'MouseButtonState'),
  \ dotnet#prop('MiddleButton', 'MouseButtonState'),
  \ dotnet#prop('XButton1', 'MouseButtonState'),
  \ dotnet#prop('XButton2', 'MouseButtonState'),
  \ ])

call dotnet#class('MouseButtonEventArgs', 'MouseEventArgs', [ 
  \ dotnet#method('MouseButtonEventArgs(', 'class MouseDevice mouse, int32 timestamp, MouseButton button)', 'void'),
  \ dotnet#method('MouseButtonEventArgs(', 'class MouseDevice mouse, int32 timestamp, MouseButton button, StylusDevice stylusDevice)', 'void'),
  \ dotnet#method('get_ChangedButton(', ')', 'MouseButton'),
  \ dotnet#method('get_ButtonState(', ')', 'MouseButtonState'),
  \ dotnet#method('get_ClickCount(', ')', 'int32'),
  \ dotnet#method('set_ClickCount(', 'int32 value)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('ChangedButton', 'MouseButton'),
  \ dotnet#prop('ButtonState', 'MouseButtonState'),
  \ dotnet#prop('ClickCount', 'int32'),
  \ ])

call dotnet#class('MouseButtonEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('MouseButtonEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, MouseButtonEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('MouseDevice', 'InputDevice', [ 
  \ dotnet#method('MouseDevice(', 'class InputManager inputManager)', 'void'),
  \ dotnet#method('GetButtonState(', 'MouseButton mouseButton)', 'MouseButtonState'),
  \ dotnet#method('GetScreenPosition(', ')', 'Point'),
  \ dotnet#method('GetButtonStateFromSystem(', 'MouseButton mouseButton)', 'abstract strict'),
  \ dotnet#method('GetScreenPositionFromSystem(', ')', 'Point'),
  \ dotnet#method('GetClientPosition(', ')', 'Point'),
  \ dotnet#method('GetClientPosition(', 'class PresentationSource presentationSource)', 'Point'),
  \ dotnet#method('get_Target(', ')', ''),
  \ dotnet#method('get_ActiveSource(', ')', ''),
  \ dotnet#method('get_CriticalActiveSource(', ')', '.method'),
  \ dotnet#method('get_DirectlyOver(', ')', 'IInputElement'),
  \ dotnet#method('get_RawDirectlyOver(', ')', '.method'),
  \ dotnet#method('get_Captured(', ')', 'IInputElement'),
  \ dotnet#method('get_CapturedMode(', ')', '.method'),
  \ dotnet#method('Capture(', 'class IInputElement element)', 'bool'),
  \ dotnet#method('Capture(', 'class IInputElement element, CaptureMode captureMode)', 'bool'),
  \ dotnet#method('get_OverrideCursor(', ')', 'Cursor'),
  \ dotnet#method('set_OverrideCursor(', 'class Cursor value)', 'void'),
  \ dotnet#method('SetCursor(', 'class Cursor cursor)', 'bool'),
  \ dotnet#method('get_LeftButton(', ')', 'MouseButtonState'),
  \ dotnet#method('get_RightButton(', ')', 'MouseButtonState'),
  \ dotnet#method('get_MiddleButton(', ')', 'MouseButtonState'),
  \ dotnet#method('get_XButton1(', ')', 'MouseButtonState'),
  \ dotnet#method('get_XButton2(', ')', 'MouseButtonState'),
  \ dotnet#method('GetPosition(', 'class IInputElement relativeTo)', 'Point'),
  \ dotnet#method('ReevaluateMouseOver(', 'class DependencyObject element, DependencyObject oldParent, bool isCoreParent)', 'void'),
  \ dotnet#method('ReevaluateCapture(', 'class DependencyObject element, DependencyObject oldParent, bool isCoreParent)', 'void'),
  \ dotnet#method('Synchronize(', ')', 'void'),
  \ dotnet#method('UpdateCursor(', ')', 'void'),
  \ dotnet#method('GlobalHitTest(', 'bool clientUnits, Point pt, PresentationSource inputSource)', 'static IInputElement'),
  \ dotnet#method('GlobalHitTest(', 'Point ptClient, PresentationSource inputSource)', 'static IInputElement'),
  \ dotnet#method('LocalHitTest(', 'bool clientUnits, Point pt, PresentationSource inputSource)', 'static IInputElement'),
  \ dotnet#method('LocalHitTest(', 'Point ptClient, PresentationSource inputSource)', 'static IInputElement'),
  \ dotnet#method('IsSameSpot(', 'Point newPosition, StylusDevice stylusDevice)', 'bool'),
  \ dotnet#method('CalculateClickCount(', 'MouseButton button, int32 timeStamp, StylusDevice stylusDevice, Point downPt)', 'int32'),
  \ dotnet#method('get_PositionRelativeToOver(', ')', '.method'),
  \ dotnet#method('get_NonRelativePosition(', ')', '.method'),
  \ dotnet#method('get_IsActive(', ')', 'bool'),
  \ dotnet#method('get_StylusDevice(', ')', '.method'),
  \ dotnet#prop('Target', 'IInputElement'),
  \ dotnet#prop('ActiveSource', 'PresentationSource'),
  \ dotnet#prop('CriticalActiveSource', 'PresentationSource'),
  \ dotnet#prop('DirectlyOver', 'IInputElement'),
  \ dotnet#prop('RawDirectlyOver', 'IInputElement'),
  \ dotnet#prop('Captured', 'IInputElement'),
  \ dotnet#prop('CapturedMode', 'CaptureMode'),
  \ dotnet#prop('OverrideCursor', 'Cursor'),
  \ dotnet#prop('LeftButton', 'MouseButtonState'),
  \ dotnet#prop('RightButton', 'MouseButtonState'),
  \ dotnet#prop('MiddleButton', 'MouseButtonState'),
  \ dotnet#prop('XButton1', 'MouseButtonState'),
  \ dotnet#prop('XButton2', 'MouseButtonState'),
  \ dotnet#prop('PositionRelativeToOver', 'Point'),
  \ dotnet#prop('NonRelativePosition', 'Point'),
  \ dotnet#prop('IsActive', 'bool'),
  \ dotnet#prop('StylusDevice', 'StylusDevice'),
  \ ])

call dotnet#class('MouseEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('MouseEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, MouseEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, MouseEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('MouseWheelEventArgs', 'MouseEventArgs', [ 
  \ dotnet#method('MouseWheelEventArgs(', 'class MouseDevice mouse, int32 timestamp, int32 delta)', 'void'),
  \ dotnet#method('get_Delta(', ')', 'int32'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Delta', 'int32'),
  \ ])

call dotnet#class('MouseWheelEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('MouseWheelEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, MouseWheelEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, MouseWheelEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('NotifyInputEventArgs', 'EventArgs', [ 
  \ dotnet#method('NotifyInputEventArgs(', ')', 'void'),
  \ dotnet#method('Reset(', 'class StagingAreaInputItem input, InputManager inputManager)', 'strict void'),
  \ dotnet#method('get_StagingItem(', ')', 'StagingAreaInputItem'),
  \ dotnet#method('get_InputManager(', ')', 'InputManager'),
  \ dotnet#method('get_UnsecureInputManager(', ')', '.method'),
  \ dotnet#prop('StagingItem', 'StagingAreaInputItem'),
  \ dotnet#prop('InputManager', 'InputManager'),
  \ dotnet#prop('UnsecureInputManager', 'InputManager'),
  \ ])

call dotnet#class('NotifyInputEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('NotifyInputEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, NotifyInputEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, NotifyInputEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ProcessInputEventArgs', 'NotifyInputEventArgs', [ 
  \ dotnet#method('ProcessInputEventArgs(', ')', 'void'),
  \ dotnet#method('Reset(', 'class StagingAreaInputItem input, InputManager inputManager)', 'strict void'),
  \ dotnet#method('PushInput(', 'class InputEventArgs input, StagingAreaInputItem promote)', 'StagingAreaInputItem'),
  \ dotnet#method('PushInput(', 'class StagingAreaInputItem input)', 'StagingAreaInputItem'),
  \ dotnet#method('PopInput(', ')', 'StagingAreaInputItem'),
  \ dotnet#method('PeekInput(', ')', 'StagingAreaInputItem'),
  \ ])

call dotnet#class('PreProcessInputEventArgs', 'ProcessInputEventArgs', [ 
  \ dotnet#method('PreProcessInputEventArgs(', ')', 'void'),
  \ dotnet#method('Reset(', 'class StagingAreaInputItem input, InputManager inputManager)', 'strict void'),
  \ dotnet#method('Cancel(', ')', 'void'),
  \ dotnet#method('get_Canceled(', ')', 'bool'),
  \ dotnet#prop('Canceled', 'bool'),
  \ ])

call dotnet#class('PreProcessInputEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('PreProcessInputEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, PreProcessInputEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, PreProcessInputEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ProcessInputEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ProcessInputEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ProcessInputEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ProcessInputEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('QueryCursorEventArgs', 'MouseEventArgs', [ 
  \ dotnet#method('QueryCursorEventArgs(', 'class MouseDevice mouse, int32 timestamp)', 'void'),
  \ dotnet#method('QueryCursorEventArgs(', 'class MouseDevice mouse, int32 timestamp, StylusDevice stylusDevice)', 'void'),
  \ dotnet#method('get_Cursor(', ')', 'Cursor'),
  \ dotnet#method('set_Cursor(', 'class Cursor value)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Cursor', 'Cursor'),
  \ ])

call dotnet#class('QueryCursorEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('QueryCursorEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, QueryCursorEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, QueryCursorEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('StagingAreaInputItem', 'Object', [ 
  \ dotnet#method('StagingAreaInputItem(', 'bool isMarker)', 'void'),
  \ dotnet#method('Reset(', 'class InputEventArgs input, StagingAreaInputItem promote)', 'void'),
  \ dotnet#method('get_Input(', ')', 'InputEventArgs'),
  \ dotnet#method('GetData(', 'object key)', 'object'),
  \ dotnet#method('SetData(', 'object key, object value)', 'void'),
  \ dotnet#method('get_IsMarker(', ')', 'bool'),
  \ dotnet#prop('Input', 'InputEventArgs'),
  \ dotnet#prop('IsMarker', 'bool'),
  \ ])

call dotnet#class('Touch', 'Object', [ 
  \ dotnet#method('add_FrameReported(', 'class TouchFrameEventHandler value)', 'static void'),
  \ dotnet#method('remove_FrameReported(', 'class TouchFrameEventHandler value)', 'static void'),
  \ dotnet#method('ReportFrame(', ')', 'static void'),
  \ dotnet#method('Touch(', ')', 'static void .'),
  \ dotnet#event('FrameReported', 'TouchFrameEventHandler'),
  \ ])

call dotnet#class('TouchDevice', 'InputDevice', [ 
  \ dotnet#method('TouchDevice(', 'int32 deviceId)', 'void'),
  \ dotnet#method('get_Id(', ')', 'int32'),
  \ dotnet#method('add_Activated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Activated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_Deactivated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Deactivated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_IsActive(', ')', 'bool'),
  \ dotnet#method('get_Target(', ')', ''),
  \ dotnet#method('get_ActiveSource(', ')', ''),
  \ dotnet#method('SetActiveSource(', 'class PresentationSource activeSource)', 'void'),
  \ dotnet#method('get_DirectlyOver(', ')', 'IInputElement'),
  \ dotnet#method('GetTouchPoint(', 'class IInputElement relativeTo)', 'abstract'),
  \ dotnet#method('GetIntermediateTouchPoints(', 'class IInputElement relativeTo)', 'abstract'),
  \ dotnet#method('get_Captured(', ')', 'IInputElement'),
  \ dotnet#method('get_CaptureMode(', ')', 'CaptureMode'),
  \ dotnet#method('Capture(', 'class IInputElement element)', 'bool'),
  \ dotnet#method('Capture(', 'class IInputElement element, CaptureMode captureMode)', 'bool'),
  \ dotnet#method('ReevaluateCapturedWithin(', 'class DependencyObject element, DependencyObject oldParent, bool isCoreParent)', 'static void'),
  \ dotnet#method('OnCapture(', 'class IInputElement element, CaptureMode captureMode)', 'void'),
  \ dotnet#method('ReportDown(', ')', 'bool'),
  \ dotnet#method('ReportMove(', ')', 'bool'),
  \ dotnet#method('ReportUp(', ')', 'bool'),
  \ dotnet#method('Activate(', ')', 'void'),
  \ dotnet#method('Deactivate(', ')', 'void'),
  \ dotnet#method('Synchronize(', ')', 'void'),
  \ dotnet#method('OnManipulationEnded(', 'bool cancel)', 'void'),
  \ dotnet#method('OnManipulationStarted(', ')', 'void'),
  \ dotnet#method('ReevaluateDirectlyOver(', 'class DependencyObject element, DependencyObject oldParent, bool isCoreParent)', 'static void'),
  \ dotnet#method('get_PromotingToManipulation(', ')', 'bool'),
  \ dotnet#method('GetTouchPoints(', 'class IInputElement relativeTo)', 'static TouchPointCollection'),
  \ dotnet#method('GetPrimaryTouchPoint(', 'class IInputElement relativeTo)', 'static TouchPoint'),
  \ dotnet#method('ReleaseAllCaptures(', 'class IInputElement element)', 'static void'),
  \ dotnet#method('GetCapturedTouches(', 'class IInputElement element, bool includeWithin)', 'static IEnumerable'),
  \ dotnet#method('GetTouchesOver(', 'class IInputElement element, bool includeWithin)', 'static IEnumerable'),
  \ dotnet#method('get_Id(', ')', 'int32 '),
  \ dotnet#method('GetPosition(', 'class IInputElement relativeTo)', ''),
  \ dotnet#method('add_Updated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Updated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('ManipulationEnded(', 'bool cancel)', 'void '),
  \ dotnet#method('set_PromotingToManipulation(', 'bool value)', 'void'),
  \ dotnet#event('Activated', 'EventHandler'),
  \ dotnet#event('Deactivated', 'EventHandler'),
  \ dotnet#event('Updated', 'EventHandler'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('IsActive', 'bool'),
  \ dotnet#prop('Target', 'IInputElement'),
  \ dotnet#prop('ActiveSource', 'PresentationSource'),
  \ dotnet#prop('DirectlyOver', 'IInputElement'),
  \ dotnet#prop('Captured', 'IInputElement'),
  \ dotnet#prop('CaptureMode', 'CaptureMode'),
  \ dotnet#prop('PromotingToManipulation', 'bool'),
  \ dotnet#prop('Id', 'int32'),
  \ ])

call dotnet#class('TouchEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('TouchEventArgs(', 'class TouchDevice touchDevice, int32 timestamp)', 'void'),
  \ dotnet#method('get_TouchDevice(', ')', 'TouchDevice'),
  \ dotnet#method('GetTouchPoint(', 'class IInputElement relativeTo)', 'TouchPoint'),
  \ dotnet#method('GetIntermediateTouchPoints(', 'class IInputElement relativeTo)', 'TouchPointCollection'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('TouchDevice', 'TouchDevice'),
  \ ])

call dotnet#class('TouchFrameEventArgs', 'EventArgs', [ 
  \ dotnet#method('TouchFrameEventArgs(', 'int32 timestamp)', 'void'),
  \ dotnet#method('get_Timestamp(', ')', 'int32'),
  \ dotnet#method('GetTouchPoints(', 'class IInputElement relativeTo)', 'TouchPointCollection'),
  \ dotnet#method('GetPrimaryTouchPoint(', 'class IInputElement relativeTo)', 'TouchPoint'),
  \ dotnet#method('SuspendMousePromotionUntilTouchUp(', ')', 'void'),
  \ dotnet#method('set_Timestamp(', 'int32 value)', 'void'),
  \ dotnet#prop('Timestamp', 'int32'),
  \ ])

call dotnet#class('TouchFrameEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('TouchFrameEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, TouchFrameEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, TouchFrameEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('TouchPoint', 'Object', [ 
  \ dotnet#method('TouchPoint(', 'class TouchDevice device, Point position, Rect bounds, TouchAction action)', 'void'),
  \ dotnet#method('get_TouchDevice(', ')', 'TouchDevice'),
  \ dotnet#method('get_Position(', ')', 'Point'),
  \ dotnet#method('get_Bounds(', ')', 'Rect'),
  \ dotnet#method('get_Size(', ')', 'Size'),
  \ dotnet#method('get_Action(', ')', 'TouchAction'),
  \ dotnet#method('Equals(', 'class TouchPoint other)', 'bool Equals(class TouchPoint other)'),
  \ dotnet#method('set_TouchDevice(', 'class TouchDevice value)', 'void'),
  \ dotnet#method('set_Position(', 'Point value)', 'void'),
  \ dotnet#method('set_Bounds(', 'Rect value)', 'void'),
  \ dotnet#method('set_Action(', 'TouchAction value)', 'void'),
  \ dotnet#prop('TouchDevice', 'TouchDevice'),
  \ dotnet#prop('Position', 'Point'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('Action', 'TouchAction'),
  \ ])

call dotnet#class('TouchPointCollection', 'Collection', [ 
  \ dotnet#method('TouchPointCollection(', ')', 'void'),
  \ ])

call dotnet#class('Stylus', 'Object', [ 
  \ dotnet#method('AddPreviewStylusDownHandler(', 'class DependencyObject element, StylusDownEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewStylusDownHandler(', 'class DependencyObject element, StylusDownEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusDownHandler(', 'class DependencyObject element, StylusDownEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusDownHandler(', 'class DependencyObject element, StylusDownEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewStylusUpHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewStylusUpHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusUpHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusUpHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewStylusMoveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewStylusMoveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusMoveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusMoveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewStylusInAirMoveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewStylusInAirMoveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusInAirMoveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusInAirMoveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusEnterHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusEnterHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusLeaveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusLeaveHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewStylusInRangeHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewStylusInRangeHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusInRangeHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusInRangeHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewStylusOutOfRangeHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewStylusOutOfRangeHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusOutOfRangeHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusOutOfRangeHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewStylusSystemGestureHandler(', 'class DependencyObject element, StylusSystemGestureEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewStylusSystemGestureHandler(', 'class DependencyObject element, StylusSystemGestureEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusSystemGestureHandler(', 'class DependencyObject element, StylusSystemGestureEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusSystemGestureHandler(', 'class DependencyObject element, StylusSystemGestureEventHandler handler)', 'static void'),
  \ dotnet#method('AddGotStylusCaptureHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveGotStylusCaptureHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddLostStylusCaptureHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveLostStylusCaptureHandler(', 'class DependencyObject element, StylusEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusButtonDownHandler(', 'class DependencyObject element, StylusButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusButtonDownHandler(', 'class DependencyObject element, StylusButtonEventHandler handler)', 'static void'),
  \ dotnet#method('AddStylusButtonUpHandler(', 'class DependencyObject element, StylusButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveStylusButtonUpHandler(', 'class DependencyObject element, StylusButtonEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewStylusButtonDownHandler(', 'class DependencyObject element, StylusButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewStylusButtonDownHandler(', 'class DependencyObject element, StylusButtonEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewStylusButtonUpHandler(', 'class DependencyObject element, StylusButtonEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewStylusButtonUpHandler(', 'class DependencyObject element, StylusButtonEventHandler handler)', 'static void'),
  \ dotnet#method('GetIsPressAndHoldEnabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetIsPressAndHoldEnabled(', 'class DependencyObject element, bool enabled)', 'static void'),
  \ dotnet#method('GetIsFlicksEnabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetIsFlicksEnabled(', 'class DependencyObject element, bool enabled)', 'static void'),
  \ dotnet#method('GetIsTapFeedbackEnabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetIsTapFeedbackEnabled(', 'class DependencyObject element, bool enabled)', 'static void'),
  \ dotnet#method('GetIsTouchFeedbackEnabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetIsTouchFeedbackEnabled(', 'class DependencyObject element, bool enabled)', 'static void'),
  \ dotnet#method('get_DirectlyOver(', ')', 'static'),
  \ dotnet#method('get_Captured(', ')', 'static'),
  \ dotnet#method('Capture(', 'class IInputElement element)', 'static bool'),
  \ dotnet#method('Capture(', 'class IInputElement element, CaptureMode captureMode)', 'static bool'),
  \ dotnet#method('Synchronize(', ')', 'static void'),
  \ dotnet#method('get_CurrentStylusDevice(', ')', 'static'),
  \ dotnet#method('Stylus(', ')', 'static void .'),
  \ dotnet#prop('DirectlyOver', 'IInputElement'),
  \ dotnet#prop('Captured', 'IInputElement'),
  \ dotnet#prop('CurrentStylusDevice', 'StylusDevice'),
  \ ])

call dotnet#class('StylusButton', 'Object', [ 
  \ dotnet#method('StylusButton(', 'string name, Guid id)', 'void'),
  \ dotnet#method('get_Guid(', ')', 'Guid'),
  \ dotnet#method('get_StylusButtonState(', ')', 'StylusButtonState'),
  \ dotnet#method('get_CachedButtonState(', ')', '.method'),
  \ dotnet#method('set_CachedButtonState(', 'StylusButtonState value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_StylusDevice(', ')', 'StylusDevice'),
  \ dotnet#method('SetOwner(', 'class StylusDevice stylusDevice)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Guid', 'Guid'),
  \ dotnet#prop('StylusButtonState', 'StylusButtonState'),
  \ dotnet#prop('CachedButtonState', 'StylusButtonState'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('StylusDevice', 'StylusDevice'),
  \ ])

call dotnet#class('StylusButtonCollection', 'ReadOnlyCollection', [ 
  \ dotnet#method('StylusButtonCollection(', 'class StylusButton[] buttons)', 'void'),
  \ dotnet#method('GetStylusButtonByGuid(', 'Guid guid)', 'StylusButton'),
  \ ])

call dotnet#class('StylusDeviceCollection', 'ReadOnlyCollection', [ 
  \ dotnet#method('StylusDeviceCollection(', 'class StylusDevice[] styluses)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('AddStylusDevice(', 'int32 index, StylusDevice stylusDevice)', 'void'),
  \ ])

call dotnet#class('StylusDevice', 'InputDevice', [ 
  \ dotnet#method('StylusDevice(', 'class TabletDevice tabletDevice, string sName, int32 id, bool fInverted, StylusButtonCollection stylusButtonCollection)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Target(', ')', ''),
  \ dotnet#method('get_ActiveSource(', ')', ''),
  \ dotnet#method('get_CriticalActiveSource(', ')', '.method'),
  \ dotnet#method('get_ActivePenContext(', ')', '.method'),
  \ dotnet#method('get_CurrentNonVerifiedTarget(', ')', '.method'),
  \ dotnet#method('set_CurrentNonVerifiedTarget(', 'class StylusPlugInCollection value)', 'void'),
  \ dotnet#method('get_CurrentVerifiedTarget(', ')', '.method'),
  \ dotnet#method('set_CurrentVerifiedTarget(', 'class StylusPlugInCollection value)', 'void'),
  \ dotnet#method('get_DirectlyOver(', ')', 'IInputElement'),
  \ dotnet#method('get_Captured(', ')', 'IInputElement'),
  \ dotnet#method('get_CapturedMode(', ')', '.method'),
  \ dotnet#method('Capture(', 'class IInputElement element, CaptureMode captureMode)', 'bool'),
  \ dotnet#method('Capture(', 'class IInputElement element)', 'bool'),
  \ dotnet#method('GetCapturedPlugInCollection(', 'bool& elementHasCapture)', 'StylusPlugInCollection'),
  \ dotnet#method('Synchronize(', ')', 'void'),
  \ dotnet#method('ChangeStylusCapture(', 'class IInputElement stylusCapture, CaptureMode captureMode, int32 timestamp)', 'void'),
  \ dotnet#method('ChangeStylusOver(', 'class IInputElement stylusOver)', 'void'),
  \ dotnet#method('FindTarget(', 'class PresentationSource inputSource, Point position)', 'IInputElement'),
  \ dotnet#method('LocalHitTest(', 'class PresentationSource inputSource, Point pt)', 'static IInputElement'),
  \ dotnet#method('GlobalHitTest(', 'class PresentationSource inputSource, Point pt)', 'static IInputElement'),
  \ dotnet#method('get_TabletDevice(', ')', 'TabletDevice'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Id(', ')', 'int32'),
  \ dotnet#method('GetStylusPoints(', 'class IInputElement relativeTo)', 'StylusPointCollection'),
  \ dotnet#method('GetStylusPoints(', 'class IInputElement relativeTo, StylusPointDescription subsetToReformatTo)', 'StylusPointCollection'),
  \ dotnet#method('get_StylusButtons(', ')', 'StylusButtonCollection'),
  \ dotnet#method('GetPosition(', 'class IInputElement relativeTo)', 'Point'),
  \ dotnet#method('GetRawPosition(', 'class IInputElement relativeTo)', 'Point'),
  \ dotnet#method('get_RawStylusPoint(', ')', '.method'),
  \ dotnet#method('GetMouseButtonState(', 'MouseButton mouseButton, MouseDevice mouseDevice)', 'MouseButtonState'),
  \ dotnet#method('GetMouseScreenPosition(', 'class MouseDevice mouseDevice)', 'Point'),
  \ dotnet#method('GetElementTransform(', 'class IInputElement relativeTo)', 'static GeneralTransform'),
  \ dotnet#method('get_InAir(', ')', 'bool'),
  \ dotnet#method('get_Inverted(', ')', 'bool'),
  \ dotnet#method('get_InRange(', ')', 'bool'),
  \ dotnet#method('UpdateEventStylusPoints(', 'class RawStylusInputReport report, bool resetIfNoOverride)', 'void'),
  \ dotnet#method('get_TapCount(', ')', 'int32'),
  \ dotnet#method('set_TapCount(', 'int32 value)', 'void'),
  \ dotnet#method('get_LastTapTime(', ')', 'int32'),
  \ dotnet#method('set_LastTapTime(', 'int32 value)', 'void'),
  \ dotnet#method('get_LastTapPoint(', ')', '.method'),
  \ dotnet#method('set_LastTapPoint(', 'Point value)', 'void'),
  \ dotnet#method('get_LastTapBarrelDown(', ')', 'bool'),
  \ dotnet#method('set_LastTapBarrelDown(', 'bool value)', 'void'),
  \ dotnet#method('get_DoubleTapDeltaX(', ')', 'int32'),
  \ dotnet#method('get_DoubleTapDeltaY(', ')', 'int32'),
  \ dotnet#method('get_DoubleTapDeltaTime(', ')', 'int32'),
  \ dotnet#method('UpdateState(', 'class RawStylusInputReport report)', 'void'),
  \ dotnet#method('UpdateInRange(', 'bool inRange, PenContext penContext)', 'void'),
  \ dotnet#method('UpdateStateForSystemGesture(', 'class RawStylusSystemGestureInputReport report)', 'void'),
  \ dotnet#method('PlayBackCachedDownInputReport(', 'int32 timestamp)', 'void'),
  \ dotnet#method('GetMousePresentationSource(', ')', 'PresentationSource'),
  \ dotnet#method('GetMouseActionsFromStylusEventAndPlaybackCachedDown(', 'class RoutedEvent stylusEvent, StylusEventArgs stylusArgs)', 'RawMouseActions'),
  \ dotnet#method('get_LastMouseScreenPoint(', ')', '.method'),
  \ dotnet#method('set_LastMouseScreenPoint(', 'Point value)', 'void'),
  \ dotnet#method('get_SeenDoubleTapGesture(', ')', 'bool'),
  \ dotnet#method('set_SeenDoubleTapGesture(', 'bool value)', 'void'),
  \ dotnet#method('get_SeenHoldEnterGesture(', ')', 'bool'),
  \ dotnet#method('get_GestureWasFired(', ')', 'bool'),
  \ dotnet#method('get_SentMouseDown(', ')', 'bool'),
  \ dotnet#method('get_DetectedDrag(', ')', 'bool'),
  \ dotnet#method('get_LeftIsActiveMouseButton(', ')', 'bool'),
  \ dotnet#method('SetSawMouseButton1Down(', 'bool sawMouseButton1Down)', 'void'),
  \ dotnet#method('get_IgnoreStroke(', ')', 'bool'),
  \ dotnet#method('set_IgnoreStroke(', 'bool value)', 'void'),
  \ dotnet#method('get_TouchDevice(', ')', '.method'),
  \ dotnet#method('UpdateTouchActiveSource(', ')', 'void'),
  \ dotnet#prop('Target', 'IInputElement'),
  \ dotnet#prop('ActiveSource', 'PresentationSource'),
  \ dotnet#prop('CriticalActiveSource', 'PresentationSource'),
  \ dotnet#prop('ActivePenContext', 'PenContext'),
  \ dotnet#prop('CurrentNonVerifiedTarget', 'StylusPlugInCollection'),
  \ dotnet#prop('CurrentVerifiedTarget', 'StylusPlugInCollection'),
  \ dotnet#prop('DirectlyOver', 'IInputElement'),
  \ dotnet#prop('Captured', 'IInputElement'),
  \ dotnet#prop('CapturedMode', 'CaptureMode'),
  \ dotnet#prop('TabletDevice', 'TabletDevice'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('StylusButtons', 'StylusButtonCollection'),
  \ dotnet#prop('RawStylusPoint', 'StylusPoint'),
  \ dotnet#prop('InAir', 'bool'),
  \ dotnet#prop('Inverted', 'bool'),
  \ dotnet#prop('InRange', 'bool'),
  \ dotnet#prop('TapCount', 'int32'),
  \ dotnet#prop('LastTapTime', 'int32'),
  \ dotnet#prop('LastTapPoint', 'Point'),
  \ dotnet#prop('LastTapBarrelDown', 'bool'),
  \ dotnet#prop('DoubleTapDeltaX', 'int32'),
  \ dotnet#prop('DoubleTapDeltaY', 'int32'),
  \ dotnet#prop('DoubleTapDeltaTime', 'int32'),
  \ dotnet#prop('LastMouseScreenPoint', 'Point'),
  \ dotnet#prop('SeenDoubleTapGesture', 'bool'),
  \ dotnet#prop('SeenHoldEnterGesture', 'bool'),
  \ dotnet#prop('GestureWasFired', 'bool'),
  \ dotnet#prop('SentMouseDown', 'bool'),
  \ dotnet#prop('DetectedDrag', 'bool'),
  \ dotnet#prop('LeftIsActiveMouseButton', 'bool'),
  \ dotnet#prop('IgnoreStroke', 'bool'),
  \ dotnet#prop('TouchDevice', 'StylusTouchDevice'),
  \ ])

call dotnet#class('StylusEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('StylusEventArgs(', 'class StylusDevice stylus, int32 timestamp)', 'void'),
  \ dotnet#method('get_StylusDevice(', ')', 'StylusDevice'),
  \ dotnet#method('GetPosition(', 'class IInputElement relativeTo)', 'Point'),
  \ dotnet#method('get_InAir(', ')', 'bool'),
  \ dotnet#method('get_Inverted(', ')', 'bool'),
  \ dotnet#method('GetStylusPoints(', 'class IInputElement relativeTo)', 'StylusPointCollection'),
  \ dotnet#method('GetStylusPoints(', 'class IInputElement relativeTo, StylusPointDescription subsetToReformatTo)', 'StylusPointCollection'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#method('get_InputReport(', ')', '.method'),
  \ dotnet#method('set_InputReport(', 'class RawStylusInputReport value)', 'void'),
  \ dotnet#prop('StylusDevice', 'StylusDevice'),
  \ dotnet#prop('InAir', 'bool'),
  \ dotnet#prop('Inverted', 'bool'),
  \ dotnet#prop('InputReport', 'RawStylusInputReport'),
  \ ])

call dotnet#class('StylusEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('StylusEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, StylusEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, StylusEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('StylusSystemGestureEventArgs', 'StylusEventArgs', [ 
  \ dotnet#method('StylusSystemGestureEventArgs(', 'class StylusDevice stylusDevice, int32 timestamp, SystemGesture systemGesture)', 'void'),
  \ dotnet#method('StylusSystemGestureEventArgs(', 'class StylusDevice stylusDevice, int32 timestamp, SystemGesture systemGesture, int32 gestureX, int32 gestureY, int32 buttonState)', 'void'),
  \ dotnet#method('get_SystemGesture(', ')', 'SystemGesture'),
  \ dotnet#method('get_ButtonState(', ')', 'int32'),
  \ dotnet#method('get_GestureX(', ')', 'int32'),
  \ dotnet#method('get_GestureY(', ')', 'int32'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('SystemGesture', 'SystemGesture'),
  \ dotnet#prop('ButtonState', 'int32'),
  \ dotnet#prop('GestureX', 'int32'),
  \ dotnet#prop('GestureY', 'int32'),
  \ ])

call dotnet#class('StylusSystemGestureEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('StylusSystemGestureEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, StylusSystemGestureEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, StylusSystemGestureEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('StylusButtonEventArgs', 'StylusEventArgs', [ 
  \ dotnet#method('StylusButtonEventArgs(', 'class StylusDevice stylusDevice, int32 timestamp, StylusButton button)', 'void'),
  \ dotnet#method('get_StylusButton(', ')', 'StylusButton'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('StylusButton', 'StylusButton'),
  \ ])

call dotnet#class('StylusButtonEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('StylusButtonEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, StylusButtonEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, StylusButtonEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('StylusDownEventArgs', 'StylusEventArgs', [ 
  \ dotnet#method('StylusDownEventArgs(', 'class StylusDevice stylusDevice, int32 timestamp)', 'void'),
  \ dotnet#method('get_TapCount(', ')', 'int32'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('TapCount', 'int32'),
  \ ])

call dotnet#class('StylusDownEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('StylusDownEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, StylusDownEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, StylusDownEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('StylusPoint', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#field('_pressureFStylusPoint', 'float32'),
  \ dotnet#field('_additionalValues', 'int32[]'),
  \ dotnet#field('_stylusPointDescription', 'StylusPointDescription'),
  \ dotnet#method('StylusPoint(', 'float64 x, float64 y)', 'void'),
  \ dotnet#method('StylusPoint(', 'float64 x, float64 y, float32 pressureFStylusPoint)', 'void'),
  \ dotnet#method('StylusPoint(', 'float64 x, float64 y, float32 pressureFStylusPoint, StylusPointDescription stylusPointDescription, int32[] additionalValues)', 'void'),
  \ dotnet#method('StylusPoint(', 'float64 x, float64 y, float32 pressureFStylusPoint, StylusPointDescription stylusPointDescription, int32[] additionalValues, bool validateAdditionalData, bool validatePressureFStylusPoint)', 'void'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('get_PressureFStylusPoint(', ')', 'float32'),
  \ dotnet#method('set_PressureFStylusPoint(', 'float32 value)', 'void'),
  \ dotnet#method('get_Description(', ')', 'StylusPointDescription'),
  \ dotnet#method('set_Description(', 'class StylusPointDescription value)', 'void'),
  \ dotnet#method('HasProperty(', 'class StylusPointProperty stylusPointProperty)', 'bool'),
  \ dotnet#method('GetPropertyValue(', 'class StylusPointProperty stylusPointProperty)', 'int32'),
  \ dotnet#method('SetPropertyValue(', 'class StylusPointProperty stylusPointProperty, int32 value)', 'void'),
  \ dotnet#method('SetPropertyValue(', 'class StylusPointProperty stylusPointProperty, int32 value, bool copyBeforeWrite)', 'void'),
  \ dotnet#method('op_Explicit(', 'StylusPoint stylusPoint)', 'static'),
  \ dotnet#method('ToPoint(', ')', 'Point'),
  \ dotnet#method('op_Equality(', 'StylusPoint stylusPoint1, StylusPoint stylusPoint2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'StylusPoint stylusPoint1, StylusPoint stylusPoint2)', 'static bool'),
  \ dotnet#method('Equals(', 'StylusPoint stylusPoint1, StylusPoint stylusPoint2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'StylusPoint value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetAdditionalData(', ')', 'int32[]'),
  \ dotnet#method('GetUntruncatedPressureFStylusPoint(', ')', 'float32'),
  \ dotnet#method('GetPacketData(', ')', 'int32[]'),
  \ dotnet#method('get_HasDefaultPressure(', ')', 'bool'),
  \ dotnet#method('StylusPoint(', ')', 'static void .'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('PressureFStylusPoint', 'float32'),
  \ dotnet#prop('Description', 'StylusPointDescription'),
  \ dotnet#prop('HasDefaultPressure', 'bool'),
  \ ])

call dotnet#class('StylusPointCollection', 'Collection', [ 
  \ dotnet#method('add_Changed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Changed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_CountGoingToZero(', 'class CancelEventHandler value)', 'void'),
  \ dotnet#method('remove_CountGoingToZero(', 'class CancelEventHandler value)', 'void'),
  \ dotnet#method('StylusPointCollection(', ')', 'void'),
  \ dotnet#method('StylusPointCollection(', 'int32 initialCapacity)', 'void'),
  \ dotnet#method('StylusPointCollection(', 'class StylusPointDescription stylusPointDescription)', 'void'),
  \ dotnet#method('StylusPointCollection(', 'class StylusPointDescription stylusPointDescription, int32 initialCapacity)', 'void'),
  \ dotnet#method('StylusPointCollection(', 'class IEnumerable stylusPoints)', 'void'),
  \ dotnet#method('StylusPointCollection(', 'class IEnumerable points)', 'void'),
  \ dotnet#method('StylusPointCollection(', 'class StylusPointDescription stylusPointDescription, int32[] rawPacketData, GeneralTransform tabletToView, Matrix tabletToViewMatrix)', 'void'),
  \ dotnet#method('Add(', 'class StylusPointCollection stylusPoints)', 'void'),
  \ dotnet#method('get_Description(', ')', 'StylusPointDescription'),
  \ dotnet#method('ClearItems(', ')', 'void'),
  \ dotnet#method('RemoveItem(', 'int32 index)', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, StylusPoint stylusPoint)', 'void'),
  \ dotnet#method('SetItem(', 'int32 index, StylusPoint stylusPoint)', 'void'),
  \ dotnet#method('Clone(', ')', 'StylusPointCollection'),
  \ dotnet#method('op_Explicit(', 'class StylusPointCollection stylusPoints)', 'static'),
  \ dotnet#method('Clone(', 'int32 count)', 'StylusPointCollection'),
  \ dotnet#method('Clone(', 'class GeneralTransform transform, StylusPointDescription descriptionToUse)', 'StylusPointCollection'),
  \ dotnet#method('OnChanged(', 'class EventArgs e)', 'void'),
  \ dotnet#method('Transform(', 'class GeneralTransform transform)', 'void'),
  \ dotnet#method('Reformat(', 'class StylusPointDescription subsetToReformatTo)', 'StylusPointCollection'),
  \ dotnet#method('Reformat(', 'class StylusPointDescription subsetToReformatTo, GeneralTransform transform)', 'StylusPointCollection'),
  \ dotnet#method('ToHiMetricArray(', ')', 'int32[]'),
  \ dotnet#method('ToISFReadyArrays(', '[out] int32[][]& output, [out] bool& shouldPersistPressure)', 'void'),
  \ dotnet#event('Changed', 'EventHandler'),
  \ dotnet#event('CountGoingToZero', 'CancelEventHandler'),
  \ dotnet#prop('Description', 'StylusPointDescription'),
  \ ])

call dotnet#class('StylusPointDescription', 'Object', [ 
  \ dotnet#method('StylusPointDescription(', ')', 'void'),
  \ dotnet#method('StylusPointDescription(', 'class IEnumerable stylusPointPropertyInfos)', 'void'),
  \ dotnet#method('StylusPointDescription(', 'class IEnumerable stylusPointPropertyInfos, int32 originalPressureIndex)', 'void'),
  \ dotnet#method('HasProperty(', 'class StylusPointProperty stylusPointProperty)', 'bool'),
  \ dotnet#method('get_PropertyCount(', ')', 'int32'),
  \ dotnet#method('GetPropertyInfo(', 'class StylusPointProperty stylusPointProperty)', 'StylusPointPropertyInfo'),
  \ dotnet#method('GetPropertyInfo(', 'Guid guid)', 'StylusPointPropertyInfo'),
  \ dotnet#method('GetPropertyIndex(', 'Guid guid)', 'int32'),
  \ dotnet#method('GetStylusPointProperties(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('GetStylusPointPropertyIds(', ')', 'Guid[]'),
  \ dotnet#method('GetInputArrayLengthPerPoint(', ')', 'int32'),
  \ dotnet#method('GetExpectedAdditionalDataCount(', ')', 'int32'),
  \ dotnet#method('GetOutputArrayLengthPerPoint(', ')', 'int32'),
  \ dotnet#method('get_ButtonCount(', ')', 'int32'),
  \ dotnet#method('GetButtonBitPosition(', 'class StylusPointProperty buttonProperty)', 'int32'),
  \ dotnet#method('get_ContainsTruePressure(', ')', 'bool'),
  \ dotnet#method('get_OriginalPressureIndex(', ')', 'int32'),
  \ dotnet#method('AreCompatible(', 'class StylusPointDescription stylusPointDescription1, StylusPointDescription stylusPointDescription2)', 'static bool'),
  \ dotnet#method('GetCommonDescription(', 'class StylusPointDescription stylusPointDescription, StylusPointDescription stylusPointDescriptionPreserveInfo)', 'static StylusPointDescription'),
  \ dotnet#method('IsSubsetOf(', 'class StylusPointDescription stylusPointDescriptionSuperset)', 'bool'),
  \ dotnet#method('StylusPointDescription(', ')', 'static void .'),
  \ dotnet#prop('PropertyCount', 'int32'),
  \ dotnet#prop('ButtonCount', 'int32'),
  \ dotnet#prop('ContainsTruePressure', 'bool'),
  \ dotnet#prop('OriginalPressureIndex', 'int32'),
  \ ])

call dotnet#class('StylusPointProperties', 'Object', [ 
  \ dotnet#method('StylusPointProperties(', ')', 'static void .'),
  \ ])

call dotnet#class('StylusPointProperty', 'Object', [ 
  \ dotnet#method('StylusPointProperty(', 'Guid identifier, bool isButton)', 'void'),
  \ dotnet#method('StylusPointProperty(', 'class StylusPointProperty stylusPointProperty)', 'void'),
  \ dotnet#method('get_Id(', ')', 'Guid'),
  \ dotnet#method('get_IsButton(', ')', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Id', 'Guid'),
  \ dotnet#prop('IsButton', 'bool'),
  \ ])

call dotnet#class('StylusPointPropertyInfo', 'StylusPointProperty', [ 
  \ dotnet#method('StylusPointPropertyInfo(', 'class StylusPointProperty stylusPointProperty)', 'void'),
  \ dotnet#method('StylusPointPropertyInfo(', 'class StylusPointProperty stylusPointProperty, int32 minimum, int32 maximum, StylusPointPropertyUnit unit, float32 resolution)', 'void'),
  \ dotnet#method('get_Minimum(', ')', 'int32'),
  \ dotnet#method('get_Maximum(', ')', 'int32'),
  \ dotnet#method('get_Resolution(', ')', 'float32'),
  \ dotnet#method('get_Unit(', ')', 'StylusPointPropertyUnit'),
  \ dotnet#method('AreCompatible(', 'class StylusPointPropertyInfo stylusPointPropertyInfo1, StylusPointPropertyInfo stylusPointPropertyInfo2)', 'static bool'),
  \ dotnet#prop('Minimum', 'int32'),
  \ dotnet#prop('Maximum', 'int32'),
  \ dotnet#prop('Resolution', 'float32'),
  \ dotnet#prop('Unit', 'StylusPointPropertyUnit'),
  \ ])

call dotnet#class('Tablet', 'Object', [ 
  \ dotnet#method('get_CurrentTabletDevice(', ')', 'static'),
  \ dotnet#method('get_TabletDevices(', ')', 'static'),
  \ dotnet#prop('CurrentTabletDevice', 'TabletDevice'),
  \ dotnet#prop('TabletDevices', 'TabletDeviceCollection'),
  \ ])

call dotnet#class('TabletDeviceCollection', 'Object', [ 
  \ dotnet#field('_tabletDeviceCollection', 'TabletDeviceCollection'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('TabletDeviceCollection(', 'class TabletDeviceCollection tabletDeviceCollection)', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'TabletDevice'),
  \ dotnet#method('TabletDeviceCollection(', ')', 'void'),
  \ dotnet#method('ShouldEnableTablets(', ')', 'static bool'),
  \ dotnet#method('UpdateTablets(', ')', 'void'),
  \ dotnet#method('HandleTabletAdded(', 'uint32 wisptisIndex, uint32& tabletIndexChanged)', 'bool'),
  \ dotnet#method('HandleTabletRemoved(', 'uint32 wisptisIndex)', 'uint32'),
  \ dotnet#method('UpdateStylusDevices(', 'int32 tabletId, int32 stylusId)', 'StylusDevice'),
  \ dotnet#method('DisposeTablets(', ')', 'void'),
  \ dotnet#method('CreateContexts(', 'native int hwnd, PenContexts contexts)', 'PenContext[]'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class TabletDevice[] array, int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'TabletDevice'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'TabletDevice'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ ])

call dotnet#class('TabletDevice', 'InputDevice', [ 
  \ dotnet#method('TabletDevice(', 'class TabletDeviceInfo tabletInfo, PenThread penThread)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('UpdateStylusDevices(', 'int32 stylusId)', 'StylusDevice'),
  \ dotnet#method('get_Target(', ')', ''),
  \ dotnet#method('get_ActiveSource(', ')', ''),
  \ dotnet#method('get_Id(', ')', 'int32'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_ProductId(', ')', 'string'),
  \ dotnet#method('get_TabletToScreen(', ')', '.method'),
  \ dotnet#method('get_TabletSize(', ')', '.method'),
  \ dotnet#method('get_ScreenSize(', ')', '.method'),
  \ dotnet#method('get_TabletHardwareCapabilities(', ')', 'TabletHardwareCapabilities'),
  \ dotnet#method('get_SupportedStylusPointProperties(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_StylusPointDescription(', ')', '.method'),
  \ dotnet#method('get_Type(', ')', 'TabletDeviceType'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_StylusDevices(', ')', 'StylusDeviceCollection'),
  \ dotnet#method('CreateContext(', 'native int hwnd, PenContexts contexts)', 'PenContext'),
  \ dotnet#method('get_PenThread(', ')', '.method'),
  \ dotnet#method('UpdateScreenMeasurements(', ')', 'void'),
  \ dotnet#method('get_DoubleTapSize(', ')', '.method'),
  \ dotnet#method('get_CancelSize(', ')', '.method'),
  \ dotnet#method('InvalidateSizeDeltas(', ')', 'void'),
  \ dotnet#method('UpdateSizeDeltas(', 'class StylusPointDescription description, StylusLogic stylusLogic)', 'void'),
  \ dotnet#method('GenerateStaticGesture(', 'class RawStylusInputReport stylusInputReport)', 'Nullable'),
  \ dotnet#method('GetLastTabletPoint(', 'class RawStylusInputReport stylusInputReport)', 'Point'),
  \ dotnet#prop('Target', 'IInputElement'),
  \ dotnet#prop('ActiveSource', 'PresentationSource'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('ProductId', 'string'),
  \ dotnet#prop('TabletToScreen', 'Matrix'),
  \ dotnet#prop('TabletSize', 'Size'),
  \ dotnet#prop('ScreenSize', 'Size'),
  \ dotnet#prop('TabletHardwareCapabilities', 'TabletHardwareCapabilities'),
  \ dotnet#prop('SupportedStylusPointProperties', 'ReadOnlyCollection'),
  \ dotnet#prop('StylusPointDescription', 'StylusPointDescription'),
  \ dotnet#prop('Type', 'TabletDeviceType'),
  \ dotnet#prop('StylusDevices', 'StylusDeviceCollection'),
  \ dotnet#prop('PenThread', 'PenThread'),
  \ dotnet#prop('DoubleTapSize', 'Size'),
  \ dotnet#prop('CancelSize', 'Size'),
  \ ])

call dotnet#class('TextCompositionEventArgs', 'InputEventArgs', [ 
  \ dotnet#method('TextCompositionEventArgs(', 'class InputDevice inputDevice, TextComposition composition)', 'void'),
  \ dotnet#method('get_TextComposition(', ')', 'TextComposition'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('get_SystemText(', ')', 'string'),
  \ dotnet#method('get_ControlText(', ')', 'string'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('TextComposition', 'TextComposition'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('SystemText', 'string'),
  \ dotnet#prop('ControlText', 'string'),
  \ ])

call dotnet#class('TextCompositionEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('TextCompositionEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, TextCompositionEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, TextCompositionEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('TextCompositionManager', 'DispatcherObject', [ 
  \ dotnet#method('DigitFromScanCode(', 'int32 scanCode)', 'static int32'),
  \ dotnet#method('AddPreviewTextInputStartHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewTextInputStartHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('AddTextInputStartHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveTextInputStartHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewTextInputUpdateHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewTextInputUpdateHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('AddTextInputUpdateHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveTextInputUpdateHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('AddPreviewTextInputHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('RemovePreviewTextInputHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('AddTextInputHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveTextInputHandler(', 'class DependencyObject element, TextCompositionEventHandler handler)', 'static void'),
  \ dotnet#method('TextCompositionManager(', 'class InputManager inputManager)', 'void'),
  \ dotnet#method('StartComposition(', 'class TextComposition composition) linkcheck', 'static bool'),
  \ dotnet#method('UpdateComposition(', 'class TextComposition composition) linkcheck', 'static bool'),
  \ dotnet#method('CompleteComposition(', 'class TextComposition composition) linkcheck', 'static bool'),
  \ dotnet#method('TextCompositionManager(', ')', 'static void .'),
  \ ])

call dotnet#class('CommandConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object source)', 'object'),
  \ dotnet#method('ConvertFromHelper(', 'class Type ownerType, string localName)', 'static ICommand'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('IsKnownType(', 'class Type commandType)', 'static bool'),
  \ dotnet#method('GetKnownControlCommand(', 'class Type ownerType, string commandName)', 'static object'),
  \ dotnet#method('CommandConverter(', ')', 'void'),
  \ ])

call dotnet#class('KeyboardNavigation', 'Object', [ 
  \ dotnet#method('KeyboardNavigation(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, EventArgs e)', 'bool'),
  \ dotnet#method('BeginInvoke(', 'object sender, EventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'bool'),
  \ dotnet#method('KeyboardNavigation(', ')', 'void'),
  \ dotnet#method('GetTabOnceActiveElement(', 'class DependencyObject d)', 'static DependencyObject'),
  \ dotnet#method('SetTabOnceActiveElement(', 'class DependencyObject d, DependencyObject value)', 'static void'),
  \ dotnet#method('GetVisualRoot(', 'class DependencyObject d)', 'static Visual'),
  \ dotnet#method('add_FocusChanged(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_FocusChanged(', 'class KeyboardFocusChangedEventHandler value)', 'void'),
  \ dotnet#method('NotifyFocusChanged(', 'object sender, KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('SetTabIndex(', 'class DependencyObject element, int32 index)', 'static void'),
  \ dotnet#method('GetTabIndex(', 'class DependencyObject element)', 'static int32'),
  \ dotnet#method('SetIsTabStop(', 'class DependencyObject element, bool isTabStop)', 'static void'),
  \ dotnet#method('GetIsTabStop(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetTabNavigation(', 'class DependencyObject element, KeyboardNavigationMode mode)', 'static void'),
  \ dotnet#method('GetTabNavigation(', 'class DependencyObject element)', 'static KeyboardNavigationMode'),
  \ dotnet#method('SetControlTabNavigation(', 'class DependencyObject element, KeyboardNavigationMode mode)', 'static void'),
  \ dotnet#method('GetControlTabNavigation(', 'class DependencyObject element)', 'static KeyboardNavigationMode'),
  \ dotnet#method('SetDirectionalNavigation(', 'class DependencyObject element, KeyboardNavigationMode mode)', 'static void'),
  \ dotnet#method('GetDirectionalNavigation(', 'class DependencyObject element)', 'static KeyboardNavigationMode'),
  \ dotnet#method('SetAcceptsReturn(', 'class DependencyObject element, bool enabled)', 'static void'),
  \ dotnet#method('GetAcceptsReturn(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('GetParentUIElementFromContentElement(', 'class ContentElement ce)', 'static UIElement'),
  \ dotnet#method('HideFocusVisual(', ')', 'void'),
  \ dotnet#method('IsKeyboardMostRecentInputDevice(', ')', 'static bool'),
  \ dotnet#method('get_AlwaysShowFocusVisual(', ')', 'static bool'),
  \ dotnet#method('set_AlwaysShowFocusVisual(', 'bool value)', 'static void'),
  \ dotnet#method('ShowFocusVisual(', ')', 'static void'),
  \ dotnet#method('UpdateFocusedElement(', 'class DependencyObject focusTarget)', 'static void'),
  \ dotnet#method('UpdateActiveElement(', 'class DependencyObject activeElement)', 'void'),
  \ dotnet#method('UpdateActiveElement(', 'class DependencyObject container, DependencyObject activeElement)', 'void'),
  \ dotnet#method('Navigate(', 'class DependencyObject currentElement, TraversalRequest request)', 'bool'),
  \ dotnet#method('get_Current(', ')', 'static'),
  \ dotnet#method('EnableKeyboardCues(', 'class DependencyObject element, bool enable)', 'static void'),
  \ dotnet#method('KeyToTraversalDirection(', 'Key key)', 'static FocusNavigationDirection'),
  \ dotnet#method('PredictFocusedElement(', 'class DependencyObject sourceElement, FocusNavigationDirection direction)', 'DependencyObject'),
  \ dotnet#method('Navigate(', 'class DependencyObject sourceElement, Key key, ModifierKeys modifiers)', 'bool'),
  \ dotnet#method('GetRectangle(', 'class DependencyObject element)', 'static Rect'),
  \ dotnet#method('add_EnterMenuMode(', 'class KeyboardNavigation/EnterMenuModeEventHandler value)', 'void'),
  \ dotnet#method('remove_EnterMenuMode(', 'class KeyboardNavigation/EnterMenuModeEventHandler value)', 'void'),
  \ dotnet#method('add_FocusEnterMainFocusScope(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_FocusEnterMainFocusScope(', 'class EventHandler value)', 'void'),
  \ dotnet#method('KeyboardNavigation(', ')', 'static void .'),
  \ dotnet#event('FocusChanged', 'KeyboardFocusChangedEventHandler'),
  \ dotnet#event('EnterMenuMode', 'KeyboardNavigation/EnterMenuModeEventHandler'),
  \ dotnet#event('FocusEnterMainFocusScope', 'EventHandler'),
  \ dotnet#prop('AlwaysShowFocusVisual', 'bool'),
  \ dotnet#prop('Current', 'KeyboardNavigation'),
  \ ])

