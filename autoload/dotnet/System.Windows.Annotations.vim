call dotnet#namespace('System.Windows.Annotations')

call dotnet#class('TextAnchor', 'Object', [ 
  \ dotnet#method('TextAnchor(', ')', 'void'),
  \ dotnet#method('TextAnchor(', 'class TextAnchor anchor)', 'void'),
  \ dotnet#method('Contains(', 'class ITextPointer textPointer)', 'bool'),
  \ dotnet#method('AddTextSegment(', 'class ITextPointer start, ITextPointer end)', 'void'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('IsOverlapping(', 'class ICollection textSegments)', 'bool'),
  \ dotnet#method('ExclusiveUnion(', 'class TextAnchor anchor, TextAnchor otherAnchor)', 'static TextAnchor'),
  \ dotnet#method('TrimToRelativeComplement(', 'class TextAnchor anchor, ICollection textSegments)', 'static TextAnchor'),
  \ dotnet#method('TrimToIntersectionWith(', 'class TextAnchor anchor, ICollection textSegments)', 'static TextAnchor'),
  \ dotnet#method('get_BoundingStart(', ')', 'ContentPosition'),
  \ dotnet#method('get_BoundingEnd(', ')', 'ContentPosition'),
  \ dotnet#method('get_Start(', ')', '.method'),
  \ dotnet#method('get_End(', ')', '.method'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('get_TextSegments(', ')', '.method'),
  \ dotnet#prop('BoundingStart', 'ContentPosition'),
  \ dotnet#prop('BoundingEnd', 'ContentPosition'),
  \ dotnet#prop('Start', 'ITextPointer'),
  \ dotnet#prop('End', 'ITextPointer'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('TextSegments', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('Annotation', 'Object', [ 
  \ dotnet#method('Annotation(', ')', 'void'),
  \ dotnet#method('Annotation(', 'class XmlQualifiedName annotationType)', 'void'),
  \ dotnet#method('Annotation(', 'class XmlQualifiedName annotationType, Guid id, DateTime creationTime, DateTime lastModificationTime)', 'void'),
  \ dotnet#method('GetSchema(', ')', ''),
  \ dotnet#method('WriteXml(', 'class XmlWriter writer)', 'void'),
  \ dotnet#method('ReadXml(', 'class XmlReader reader)', 'void'),
  \ dotnet#method('add_AuthorChanged(', 'class AnnotationAuthorChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_AuthorChanged(', 'class AnnotationAuthorChangedEventHandler value)', 'void'),
  \ dotnet#method('add_AnchorChanged(', 'class AnnotationResourceChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_AnchorChanged(', 'class AnnotationResourceChangedEventHandler value)', 'void'),
  \ dotnet#method('add_CargoChanged(', 'class AnnotationResourceChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_CargoChanged(', 'class AnnotationResourceChangedEventHandler value)', 'void'),
  \ dotnet#method('get_Id(', ')', 'Guid'),
  \ dotnet#method('get_AnnotationType(', ')', 'XmlQualifiedName'),
  \ dotnet#method('get_CreationTime(', ')', 'DateTime'),
  \ dotnet#method('get_LastModificationTime(', ')', 'DateTime'),
  \ dotnet#method('get_Authors(', ')', 'Collection'),
  \ dotnet#method('get_Anchors(', ')', 'Collection'),
  \ dotnet#method('get_Cargos(', ')', 'Collection'),
  \ dotnet#method('IsNamespaceDeclaration(', 'class XmlReader reader)', 'static bool'),
  \ dotnet#method('CheckForNonNamespaceAttribute(', 'class XmlReader reader, string elementName)', 'static void'),
  \ dotnet#method('Annotation(', ')', 'static void .'),
  \ dotnet#event('AuthorChanged', 'AnnotationAuthorChangedEventHandler'),
  \ dotnet#event('AnchorChanged', 'AnnotationResourceChangedEventHandler'),
  \ dotnet#event('CargoChanged', 'AnnotationResourceChangedEventHandler'),
  \ dotnet#prop('Id', 'Guid'),
  \ dotnet#prop('AnnotationType', 'XmlQualifiedName'),
  \ dotnet#prop('CreationTime', 'DateTime'),
  \ dotnet#prop('LastModificationTime', 'DateTime'),
  \ dotnet#prop('Authors', 'Collection'),
  \ dotnet#prop('Anchors', 'Collection'),
  \ dotnet#prop('Cargos', 'Collection'),
  \ ])

call dotnet#class('AnnotationAuthorChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('AnnotationAuthorChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, AnnotationAuthorChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, AnnotationAuthorChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('AnnotationAuthorChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('AnnotationAuthorChangedEventArgs(', 'class Annotation annotation, AnnotationAction action, object author)', 'void'),
  \ dotnet#method('get_Annotation(', ')', 'Annotation'),
  \ dotnet#method('get_Author(', ')', 'object'),
  \ dotnet#method('get_Action(', ')', 'AnnotationAction'),
  \ dotnet#prop('Annotation', 'Annotation'),
  \ dotnet#prop('Author', 'object'),
  \ dotnet#prop('Action', 'AnnotationAction'),
  \ ])

call dotnet#class('AnnotationDocumentPaginator', 'DocumentPaginator', [ 
  \ dotnet#method('AnnotationDocumentPaginator(', 'class DocumentPaginator originalPaginator, Stream annotationStore)', 'void'),
  \ dotnet#method('AnnotationDocumentPaginator(', 'class DocumentPaginator originalPaginator, Stream annotationStore, FlowDirection flowDirection)', 'void'),
  \ dotnet#method('AnnotationDocumentPaginator(', 'class DocumentPaginator originalPaginator, AnnotationStore annotationStore)', 'void'),
  \ dotnet#method('AnnotationDocumentPaginator(', 'class DocumentPaginator originalPaginator, AnnotationStore annotationStore, FlowDirection flowDirection)', 'void'),
  \ dotnet#method('get_IsPageCountValid(', ')', 'bool'),
  \ dotnet#method('get_PageCount(', ')', 'int32'),
  \ dotnet#method('get_PageSize(', ')', ''),
  \ dotnet#method('set_PageSize(', 'Size value)', 'void'),
  \ dotnet#method('get_Source(', ')', ''),
  \ dotnet#method('GetPage(', 'int32 pageNumber)', 'DocumentPage'),
  \ dotnet#method('GetPageAsync(', 'int32 pageNumber, object userState)', 'void'),
  \ dotnet#method('ComputePageCount(', ')', 'void'),
  \ dotnet#method('ComputePageCountAsync(', 'object userState)', 'void'),
  \ dotnet#method('CancelAsync(', 'object userState)', 'void'),
  \ dotnet#prop('IsPageCountValid', 'bool'),
  \ dotnet#prop('PageCount', 'int32'),
  \ dotnet#prop('PageSize', 'Size'),
  \ dotnet#prop('Source', 'IDocumentPaginatorSource'),
  \ ])

call dotnet#class('AnnotationResource', 'Object', [ 
  \ dotnet#method('AnnotationResource(', ')', 'void'),
  \ dotnet#method('AnnotationResource(', 'string name)', 'void'),
  \ dotnet#method('AnnotationResource(', 'Guid id)', 'void'),
  \ dotnet#method('GetSchema(', ')', ''),
  \ dotnet#method('WriteXml(', 'class XmlWriter writer)', 'void'),
  \ dotnet#method('ReadXml(', 'class XmlReader reader)', 'void'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('get_Id(', ')', 'Guid'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_ContentLocators(', ')', 'Collection'),
  \ dotnet#method('get_Contents(', ')', 'Collection'),
  \ dotnet#method('get_Owned(', ')', 'bool '),
  \ dotnet#method('set_Owned(', 'bool value)', 'void '),
  \ dotnet#method('get_ListSerializer(', ')', 'static'),
  \ dotnet#prop('Id', 'Guid'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('ContentLocators', 'Collection'),
  \ dotnet#prop('Contents', 'Collection'),
  \ dotnet#prop('Owned', 'bool'),
  \ dotnet#prop('ListSerializer', 'Serializer'),
  \ ])

call dotnet#class('AnnotationResourceChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('AnnotationResourceChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, AnnotationResourceChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, AnnotationResourceChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('AnnotationResourceChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('AnnotationResourceChangedEventArgs(', 'class Annotation annotation, AnnotationAction action, AnnotationResource resource)', 'void'),
  \ dotnet#method('get_Annotation(', ')', 'Annotation'),
  \ dotnet#method('get_Resource(', ')', 'AnnotationResource'),
  \ dotnet#method('get_Action(', ')', 'AnnotationAction'),
  \ dotnet#prop('Annotation', 'Annotation'),
  \ dotnet#prop('Resource', 'AnnotationResource'),
  \ dotnet#prop('Action', 'AnnotationAction'),
  \ ])

call dotnet#class('AnnotationHelper', 'Object', [ 
  \ dotnet#method('CreateHighlightForSelection(', 'class AnnotationService service, string author, Brush highlightBrush)', 'static Annotation'),
  \ dotnet#method('CreateTextStickyNoteForSelection(', 'class AnnotationService service, string author)', 'static Annotation'),
  \ dotnet#method('CreateInkStickyNoteForSelection(', 'class AnnotationService service, string author)', 'static Annotation'),
  \ dotnet#method('ClearHighlightsForSelection(', 'class AnnotationService service)', 'static void'),
  \ dotnet#method('DeleteTextStickyNotesForSelection(', 'class AnnotationService service)', 'static void'),
  \ dotnet#method('DeleteInkStickyNotesForSelection(', 'class AnnotationService service)', 'static void'),
  \ dotnet#method('GetAnchorInfo(', 'class AnnotationService service, Annotation annotation)', 'static IAnchorInfo'),
  \ dotnet#method('OnCreateHighlightCommand(', 'object sender, ExecutedRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnCreateTextStickyNoteCommand(', 'object sender, ExecutedRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnCreateInkStickyNoteCommand(', 'object sender, ExecutedRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnClearHighlightsCommand(', 'object sender, ExecutedRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnDeleteStickyNotesCommand(', 'object sender, ExecutedRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnDeleteAnnotationsCommand(', 'object sender, ExecutedRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnQueryCreateHighlightCommand(', 'object sender, CanExecuteRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnQueryCreateTextStickyNoteCommand(', 'object sender, CanExecuteRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnQueryCreateInkStickyNoteCommand(', 'object sender, CanExecuteRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnQueryClearHighlightsCommand(', 'object sender, CanExecuteRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnQueryDeleteStickyNotesCommand(', 'object sender, CanExecuteRoutedEventArgs e)', 'static void'),
  \ dotnet#method('OnQueryDeleteAnnotationsCommand(', 'object sender, CanExecuteRoutedEventArgs e)', 'static void'),
  \ dotnet#method('FindView(', 'class DocumentViewerBase viewer, int32 pageNb)', 'static DocumentPageView'),
  \ dotnet#method('GetFdrHost(', 'class FlowDocumentReader fdr)', 'static object'),
  \ ])

call dotnet#class('AnnotationService', 'DispatcherObject', [ 
  \ dotnet#method('AnnotationService(', 'class DocumentViewerBase viewer)', 'void'),
  \ dotnet#method('AnnotationService(', 'class FlowDocumentScrollViewer viewer)', 'void'),
  \ dotnet#method('AnnotationService(', 'class FlowDocumentReader viewer)', 'void'),
  \ dotnet#method('AnnotationService(', 'class DependencyObject root)', 'void'),
  \ dotnet#method('Enable(', 'class AnnotationStore annotationStore)', 'void'),
  \ dotnet#method('Disable(', ')', 'void'),
  \ dotnet#method('GetService(', 'class DocumentViewerBase viewer)', 'static AnnotationService'),
  \ dotnet#method('GetService(', 'class FlowDocumentReader reader)', 'static AnnotationService'),
  \ dotnet#method('GetService(', 'class FlowDocumentScrollViewer viewer)', 'static AnnotationService'),
  \ dotnet#method('LoadAnnotations(', 'class DependencyObject element)', 'void'),
  \ dotnet#method('UnloadAnnotations(', 'class DependencyObject element)', 'void'),
  \ dotnet#method('GetAttachedAnnotations(', ')', 'IList'),
  \ dotnet#method('get_IsEnabled(', ')', 'bool'),
  \ dotnet#method('get_Store(', ')', 'AnnotationStore'),
  \ dotnet#method('GetService(', 'class DependencyObject d)', 'static AnnotationService'),
  \ dotnet#method('GetChooser(', 'class DependencyObject d)', 'static AnnotationComponentChooser'),
  \ dotnet#method('SetSubTreeProcessorId(', 'class DependencyObject d, string id)', 'static void'),
  \ dotnet#method('GetSubTreeProcessorId(', 'class DependencyObject d)', 'static string'),
  \ dotnet#method('SetDataId(', 'class DependencyObject d, string id)', 'static void'),
  \ dotnet#method('GetDataId(', 'class DependencyObject d)', 'static string'),
  \ dotnet#method('add_AttachedAnnotationChanged(', 'class AttachedAnnotationChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_AttachedAnnotationChanged(', 'class AttachedAnnotationChangedEventHandler value)', 'void'),
  \ dotnet#method('get_LocatorManager(', ')', '.method'),
  \ dotnet#method('get_Root(', ')', '.method'),
  \ dotnet#method('AnnotationService(', ')', 'static void .'),
  \ dotnet#event('AttachedAnnotationChanged', 'AttachedAnnotationChangedEventHandler'),
  \ dotnet#prop('IsEnabled', 'bool'),
  \ dotnet#prop('Store', 'AnnotationStore'),
  \ dotnet#prop('LocatorManager', 'LocatorManager'),
  \ dotnet#prop('Root', 'DependencyObject'),
  \ ])

call dotnet#class('ContentLocatorBase', 'Object', [ 
  \ dotnet#method('ContentLocatorBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'abstract object'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('FireLocatorChanged(', 'string name)', 'void'),
  \ dotnet#method('get_Owned(', ')', 'bool '),
  \ dotnet#method('set_Owned(', 'bool value)', 'void '),
  \ dotnet#method('Merge(', 'class ContentLocatorBase other)', 'abstract strict'),
  \ dotnet#prop('Owned', 'bool'),
  \ ])

call dotnet#class('ContentLocatorPart', 'Object', [ 
  \ dotnet#method('ContentLocatorPart(', 'class XmlQualifiedName partType)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('get_NameValuePairs(', ')', 'IDictionary'),
  \ dotnet#method('get_PartType(', ')', 'XmlQualifiedName'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('Matches(', 'class ContentLocatorPart part)', 'bool'),
  \ dotnet#method('GetQueryFragment(', 'class XmlNamespaceManager namespaceManager)', 'string'),
  \ dotnet#method('get_Owned(', ')', 'bool '),
  \ dotnet#method('set_Owned(', 'bool value)', 'void '),
  \ dotnet#prop('NameValuePairs', 'IDictionary'),
  \ dotnet#prop('PartType', 'XmlQualifiedName'),
  \ dotnet#prop('Owned', 'bool'),
  \ ])

call dotnet#class('ContentLocator', 'ContentLocatorBase', [ 
  \ dotnet#method('ContentLocator(', ')', 'void'),
  \ dotnet#method('StartsWith(', 'class ContentLocator locator)', 'bool'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('GetSchema(', ')', ''),
  \ dotnet#method('WriteXml(', 'class XmlWriter writer)', 'void'),
  \ dotnet#method('ReadXml(', 'class XmlReader reader)', 'void'),
  \ dotnet#method('get_Parts(', ')', 'Collection'),
  \ dotnet#method('DotProduct(', 'class IList additionalLocatorParts)', 'IList'),
  \ dotnet#method('Merge(', 'class ContentLocatorBase other)', 'strict'),
  \ dotnet#method('Append(', 'class ContentLocator other)', 'void'),
  \ dotnet#prop('Parts', 'Collection'),
  \ ])

call dotnet#class('ContentLocatorGroup', 'ContentLocatorBase', [ 
  \ dotnet#method('ContentLocatorGroup(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('GetSchema(', ')', ''),
  \ dotnet#method('WriteXml(', 'class XmlWriter writer)', 'void'),
  \ dotnet#method('ReadXml(', 'class XmlReader reader)', 'void'),
  \ dotnet#method('get_Locators(', ')', 'Collection'),
  \ dotnet#method('Merge(', 'class ContentLocatorBase other)', 'strict'),
  \ dotnet#prop('Locators', 'Collection'),
  \ ])

