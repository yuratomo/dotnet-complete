call dotnet#namespace('System.Security.Permissions')

call dotnet#class('EnvironmentPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('EnvironmentPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('EnvironmentPermission(', 'EnvironmentPermissionAccess flag, string pathList)', 'void'),
  \ dotnet#method('SetPathList(', 'EnvironmentPermissionAccess flag, string pathList)', 'void'),
  \ dotnet#method('AddPathList(', 'EnvironmentPermissionAccess flag, string pathList)', 'void'),
  \ dotnet#method('GetPathList(', 'EnvironmentPermissionAccess flag)', 'string'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission other)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ ])

call dotnet#class('FileDialogPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('FileDialogPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('FileDialogPermission(', 'FileDialogPermissionAccess access)', 'void'),
  \ dotnet#method('get_Access(', ')', 'FileDialogPermissionAccess'),
  \ dotnet#method('set_Access(', 'FileDialogPermissionAccess value)', 'void'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#prop('Access', 'FileDialogPermissionAccess'),
  \ ])

call dotnet#class('FileIOPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('FileIOPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('FileIOPermission(', 'FileIOPermissionAccess access, string path)', 'void'),
  \ dotnet#method('FileIOPermission(', 'FileIOPermissionAccess access, string[] pathList)', 'void'),
  \ dotnet#method('FileIOPermission(', 'FileIOPermissionAccess access, AccessControlActions control, string path)', 'void'),
  \ dotnet#method('FileIOPermission(', 'FileIOPermissionAccess access, AccessControlActions control, string[] pathList)', 'void'),
  \ dotnet#method('FileIOPermission(', 'FileIOPermissionAccess access, string[] pathList, bool checkForDuplicates, bool needFullPath)', 'void'),
  \ dotnet#method('FileIOPermission(', 'FileIOPermissionAccess access, AccessControlActions control, string[] pathList, bool checkForDuplicates, bool needFullPath)', 'void'),
  \ dotnet#method('SetPathList(', 'FileIOPermissionAccess access, string path)', 'void'),
  \ dotnet#method('SetPathList(', 'FileIOPermissionAccess access, string[] pathList)', 'void'),
  \ dotnet#method('SetPathList(', 'FileIOPermissionAccess access, string[] pathList, bool checkForDuplicates)', 'void'),
  \ dotnet#method('SetPathList(', 'FileIOPermissionAccess access, AccessControlActions control, string[] pathList, bool checkForDuplicates)', 'void'),
  \ dotnet#method('AddPathList(', 'FileIOPermissionAccess access, string path)', 'void'),
  \ dotnet#method('AddPathList(', 'FileIOPermissionAccess access, string[] pathList)', 'void'),
  \ dotnet#method('AddPathList(', 'FileIOPermissionAccess access, string[] pathListOrig, bool checkForDuplicates, bool needFullPath, bool copyPathList)', 'void'),
  \ dotnet#method('AddPathList(', 'FileIOPermissionAccess access, AccessControlActions control, string[] pathListOrig, bool checkForDuplicates, bool needFullPath, bool copyPathList)', 'void'),
  \ dotnet#method('GetPathList(', 'FileIOPermissionAccess access)', 'string[]'),
  \ dotnet#method('get_AllLocalFiles(', ')', 'FileIOPermissionAccess'),
  \ dotnet#method('set_AllLocalFiles(', 'FileIOPermissionAccess value)', 'void'),
  \ dotnet#method('get_AllFiles(', ')', 'FileIOPermissionAccess'),
  \ dotnet#method('set_AllFiles(', 'FileIOPermissionAccess value)', 'void'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission other)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('FileIOPermission(', ')', 'static void .'),
  \ dotnet#prop('AllLocalFiles', 'FileIOPermissionAccess'),
  \ dotnet#prop('AllFiles', 'FileIOPermissionAccess'),
  \ ])

call dotnet#class('SecurityAttribute', 'Attribute', [ 
  \ dotnet#field('m_action', 'SecurityAction'),
  \ dotnet#field('m_unrestricted', 'bool'),
  \ dotnet#method('SecurityAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Action(', ')', 'SecurityAction'),
  \ dotnet#method('set_Action(', 'SecurityAction value)', 'void'),
  \ dotnet#method('get_Unrestricted(', ')', 'bool'),
  \ dotnet#method('set_Unrestricted(', 'bool value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'abstract'),
  \ dotnet#method('FindSecurityAttributeTypeHandle(', 'string typeName)', 'static int'),
  \ dotnet#prop('Action', 'SecurityAction'),
  \ dotnet#prop('Unrestricted', 'bool'),
  \ ])

call dotnet#class('CodeAccessSecurityAttribute', 'SecurityAttribute', [ 
  \ dotnet#method('CodeAccessSecurityAttribute(', 'SecurityAction action)', 'void'),
  \ ])

call dotnet#class('HostProtectionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('HostProtectionAttribute(', ')', 'void'),
  \ dotnet#method('HostProtectionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Resources(', ')', 'HostProtectionResource'),
  \ dotnet#method('set_Resources(', 'HostProtectionResource value)', 'void'),
  \ dotnet#method('get_Synchronization(', ')', 'bool'),
  \ dotnet#method('set_Synchronization(', 'bool value)', 'void'),
  \ dotnet#method('get_SharedState(', ')', 'bool'),
  \ dotnet#method('set_SharedState(', 'bool value)', 'void'),
  \ dotnet#method('get_ExternalProcessMgmt(', ')', 'bool'),
  \ dotnet#method('set_ExternalProcessMgmt(', 'bool value)', 'void'),
  \ dotnet#method('get_SelfAffectingProcessMgmt(', ')', 'bool'),
  \ dotnet#method('set_SelfAffectingProcessMgmt(', 'bool value)', 'void'),
  \ dotnet#method('get_ExternalThreading(', ')', 'bool'),
  \ dotnet#method('set_ExternalThreading(', 'bool value)', 'void'),
  \ dotnet#method('get_SelfAffectingThreading(', ')', 'bool'),
  \ dotnet#method('set_SelfAffectingThreading(', 'bool value)', 'void'),
  \ dotnet#method('get_SecurityInfrastructure(', ')', 'bool'),
  \ dotnet#method('set_SecurityInfrastructure(', 'bool value)', 'void'),
  \ dotnet#method('get_UI(', ')', 'bool'),
  \ dotnet#method('set_UI(', 'bool value)', 'void'),
  \ dotnet#method('get_MayLeakOnAbort(', ')', 'bool'),
  \ dotnet#method('set_MayLeakOnAbort(', 'bool value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Resources', 'HostProtectionResource'),
  \ dotnet#prop('Synchronization', 'bool'),
  \ dotnet#prop('SharedState', 'bool'),
  \ dotnet#prop('ExternalProcessMgmt', 'bool'),
  \ dotnet#prop('SelfAffectingProcessMgmt', 'bool'),
  \ dotnet#prop('ExternalThreading', 'bool'),
  \ dotnet#prop('SelfAffectingThreading', 'bool'),
  \ dotnet#prop('SecurityInfrastructure', 'bool'),
  \ dotnet#prop('UI', 'bool'),
  \ dotnet#prop('MayLeakOnAbort', 'bool'),
  \ ])

call dotnet#class('IsolatedStoragePermission', 'CodeAccessPermission', [ 
  \ dotnet#field('m_userQuota', 'int64'),
  \ dotnet#field('m_machineQuota', 'int64'),
  \ dotnet#field('m_expirationDays', 'int64'),
  \ dotnet#field('m_permanentData', 'bool'),
  \ dotnet#field('m_allowed', 'IsolatedStorageContainment'),
  \ dotnet#method('IsolatedStoragePermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('IsolatedStoragePermission(', 'IsolatedStorageContainment UsageAllowed, int64 ExpirationDays, bool PermanentData)', 'void'),
  \ dotnet#method('IsolatedStoragePermission(', 'IsolatedStorageContainment UsageAllowed, int64 ExpirationDays, bool PermanentData, int64 UserQuota)', 'void'),
  \ dotnet#method('set_UserQuota(', 'int64 value)', 'void'),
  \ dotnet#method('get_UserQuota(', ')', 'int64'),
  \ dotnet#method('set_UsageAllowed(', 'IsolatedStorageContainment value)', 'void'),
  \ dotnet#method('get_UsageAllowed(', ')', 'IsolatedStorageContainment'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('min(', 'int64 x, int64 y)', 'static int64'),
  \ dotnet#method('max(', 'int64 x, int64 y)', 'static int64'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('ToXml(', 'string permName)', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#prop('UserQuota', 'int64'),
  \ dotnet#prop('UsageAllowed', 'IsolatedStorageContainment'),
  \ ])

call dotnet#class('IsolatedStorageFilePermission', 'IsolatedStoragePermission', [ 
  \ dotnet#method('IsolatedStorageFilePermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('IsolatedStorageFilePermission(', 'IsolatedStorageContainment UsageAllowed, int64 ExpirationDays, bool PermanentData)', 'void'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ ])

call dotnet#class('EnvironmentPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('EnvironmentPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Read(', ')', 'string'),
  \ dotnet#method('set_Read(', 'string value)', 'void'),
  \ dotnet#method('get_Write(', ')', 'string'),
  \ dotnet#method('set_Write(', 'string value)', 'void'),
  \ dotnet#method('get_All(', ')', 'string'),
  \ dotnet#method('set_All(', 'string value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Read', 'string'),
  \ dotnet#prop('Write', 'string'),
  \ dotnet#prop('All', 'string'),
  \ ])

call dotnet#class('FileDialogPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('FileDialogPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Open(', ')', 'bool'),
  \ dotnet#method('set_Open(', 'bool value)', 'void'),
  \ dotnet#method('get_Save(', ')', 'bool'),
  \ dotnet#method('set_Save(', 'bool value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Open', 'bool'),
  \ dotnet#prop('Save', 'bool'),
  \ ])

call dotnet#class('FileIOPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('FileIOPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Read(', ')', 'string'),
  \ dotnet#method('set_Read(', 'string value)', 'void'),
  \ dotnet#method('get_Write(', ')', 'string'),
  \ dotnet#method('set_Write(', 'string value)', 'void'),
  \ dotnet#method('get_Append(', ')', 'string'),
  \ dotnet#method('set_Append(', 'string value)', 'void'),
  \ dotnet#method('get_PathDiscovery(', ')', 'string'),
  \ dotnet#method('set_PathDiscovery(', 'string value)', 'void'),
  \ dotnet#method('get_ViewAccessControl(', ')', 'string'),
  \ dotnet#method('set_ViewAccessControl(', 'string value)', 'void'),
  \ dotnet#method('get_ChangeAccessControl(', ')', 'string'),
  \ dotnet#method('set_ChangeAccessControl(', 'string value)', 'void'),
  \ dotnet#method('set_All(', 'string value)', 'void'),
  \ dotnet#method('get_All(', ')', 'string'),
  \ dotnet#method('get_ViewAndModify(', ')', 'string'),
  \ dotnet#method('set_ViewAndModify(', 'string value)', 'void'),
  \ dotnet#method('get_AllFiles(', ')', 'FileIOPermissionAccess'),
  \ dotnet#method('set_AllFiles(', 'FileIOPermissionAccess value)', 'void'),
  \ dotnet#method('get_AllLocalFiles(', ')', 'FileIOPermissionAccess'),
  \ dotnet#method('set_AllLocalFiles(', 'FileIOPermissionAccess value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Read', 'string'),
  \ dotnet#prop('Write', 'string'),
  \ dotnet#prop('Append', 'string'),
  \ dotnet#prop('PathDiscovery', 'string'),
  \ dotnet#prop('ViewAccessControl', 'string'),
  \ dotnet#prop('ChangeAccessControl', 'string'),
  \ dotnet#prop('All', 'string'),
  \ dotnet#prop('ViewAndModify', 'string'),
  \ dotnet#prop('AllFiles', 'FileIOPermissionAccess'),
  \ dotnet#prop('AllLocalFiles', 'FileIOPermissionAccess'),
  \ ])

call dotnet#class('KeyContainerPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('KeyContainerPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_KeyStore(', ')', 'string'),
  \ dotnet#method('set_KeyStore(', 'string value)', 'void'),
  \ dotnet#method('get_ProviderName(', ')', 'string'),
  \ dotnet#method('set_ProviderName(', 'string value)', 'void'),
  \ dotnet#method('get_ProviderType(', ')', 'int32'),
  \ dotnet#method('set_ProviderType(', 'int32 value)', 'void'),
  \ dotnet#method('get_KeyContainerName(', ')', 'string'),
  \ dotnet#method('set_KeyContainerName(', 'string value)', 'void'),
  \ dotnet#method('get_KeySpec(', ')', 'int32'),
  \ dotnet#method('set_KeySpec(', 'int32 value)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'KeyContainerPermissionFlags'),
  \ dotnet#method('set_Flags(', 'KeyContainerPermissionFlags value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('KeyStore', 'string'),
  \ dotnet#prop('ProviderName', 'string'),
  \ dotnet#prop('ProviderType', 'int32'),
  \ dotnet#prop('KeyContainerName', 'string'),
  \ dotnet#prop('KeySpec', 'int32'),
  \ dotnet#prop('Flags', 'KeyContainerPermissionFlags'),
  \ ])

call dotnet#class('PrincipalPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('PrincipalPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Role(', ')', 'string'),
  \ dotnet#method('set_Role(', 'string value)', 'void'),
  \ dotnet#method('get_Authenticated(', ')', 'bool'),
  \ dotnet#method('set_Authenticated(', 'bool value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Role', 'string'),
  \ dotnet#prop('Authenticated', 'bool'),
  \ ])

call dotnet#class('ReflectionPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('ReflectionPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'ReflectionPermissionFlag'),
  \ dotnet#method('set_Flags(', 'ReflectionPermissionFlag value)', 'void'),
  \ dotnet#method('get_TypeInformation(', ')', 'bool'),
  \ dotnet#method('set_TypeInformation(', 'bool value)', 'void'),
  \ dotnet#method('get_MemberAccess(', ')', 'bool'),
  \ dotnet#method('set_MemberAccess(', 'bool value)', 'void'),
  \ dotnet#method('get_ReflectionEmit(', ')', 'bool'),
  \ dotnet#method('set_ReflectionEmit(', 'bool value)', 'void'),
  \ dotnet#method('get_RestrictedMemberAccess(', ')', 'bool'),
  \ dotnet#method('set_RestrictedMemberAccess(', 'bool value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Flags', 'ReflectionPermissionFlag'),
  \ dotnet#prop('TypeInformation', 'bool'),
  \ dotnet#prop('MemberAccess', 'bool'),
  \ dotnet#prop('ReflectionEmit', 'bool'),
  \ dotnet#prop('RestrictedMemberAccess', 'bool'),
  \ ])

call dotnet#class('RegistryPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('RegistryPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Read(', ')', 'string'),
  \ dotnet#method('set_Read(', 'string value)', 'void'),
  \ dotnet#method('get_Write(', ')', 'string'),
  \ dotnet#method('set_Write(', 'string value)', 'void'),
  \ dotnet#method('get_Create(', ')', 'string'),
  \ dotnet#method('set_Create(', 'string value)', 'void'),
  \ dotnet#method('get_ViewAccessControl(', ')', 'string'),
  \ dotnet#method('set_ViewAccessControl(', 'string value)', 'void'),
  \ dotnet#method('get_ChangeAccessControl(', ')', 'string'),
  \ dotnet#method('set_ChangeAccessControl(', 'string value)', 'void'),
  \ dotnet#method('get_ViewAndModify(', ')', 'string'),
  \ dotnet#method('set_ViewAndModify(', 'string value)', 'void'),
  \ dotnet#method('get_All(', ')', 'string'),
  \ dotnet#method('set_All(', 'string value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Read', 'string'),
  \ dotnet#prop('Write', 'string'),
  \ dotnet#prop('Create', 'string'),
  \ dotnet#prop('ViewAccessControl', 'string'),
  \ dotnet#prop('ChangeAccessControl', 'string'),
  \ dotnet#prop('ViewAndModify', 'string'),
  \ dotnet#prop('All', 'string'),
  \ ])

call dotnet#class('SecurityPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('SecurityPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'SecurityPermissionFlag'),
  \ dotnet#method('set_Flags(', 'SecurityPermissionFlag value)', 'void'),
  \ dotnet#method('get_Assertion(', ')', 'bool'),
  \ dotnet#method('set_Assertion(', 'bool value)', 'void'),
  \ dotnet#method('get_UnmanagedCode(', ')', 'bool'),
  \ dotnet#method('set_UnmanagedCode(', 'bool value)', 'void'),
  \ dotnet#method('get_SkipVerification(', ')', 'bool'),
  \ dotnet#method('set_SkipVerification(', 'bool value)', 'void'),
  \ dotnet#method('get_Execution(', ')', 'bool'),
  \ dotnet#method('set_Execution(', 'bool value)', 'void'),
  \ dotnet#method('get_ControlThread(', ')', 'bool'),
  \ dotnet#method('set_ControlThread(', 'bool value)', 'void'),
  \ dotnet#method('get_ControlEvidence(', ')', 'bool'),
  \ dotnet#method('set_ControlEvidence(', 'bool value)', 'void'),
  \ dotnet#method('get_ControlPolicy(', ')', 'bool'),
  \ dotnet#method('set_ControlPolicy(', 'bool value)', 'void'),
  \ dotnet#method('get_SerializationFormatter(', ')', 'bool'),
  \ dotnet#method('set_SerializationFormatter(', 'bool value)', 'void'),
  \ dotnet#method('get_ControlDomainPolicy(', ')', 'bool'),
  \ dotnet#method('set_ControlDomainPolicy(', 'bool value)', 'void'),
  \ dotnet#method('get_ControlPrincipal(', ')', 'bool'),
  \ dotnet#method('set_ControlPrincipal(', 'bool value)', 'void'),
  \ dotnet#method('get_ControlAppDomain(', ')', 'bool'),
  \ dotnet#method('set_ControlAppDomain(', 'bool value)', 'void'),
  \ dotnet#method('get_RemotingConfiguration(', ')', 'bool'),
  \ dotnet#method('set_RemotingConfiguration(', 'bool value)', 'void'),
  \ dotnet#method('get_Infrastructure(', ')', 'bool'),
  \ dotnet#method('set_Infrastructure(', 'bool value)', 'void'),
  \ dotnet#method('get_BindingRedirects(', ')', 'bool'),
  \ dotnet#method('set_BindingRedirects(', 'bool value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Flags', 'SecurityPermissionFlag'),
  \ dotnet#prop('Assertion', 'bool'),
  \ dotnet#prop('UnmanagedCode', 'bool'),
  \ dotnet#prop('SkipVerification', 'bool'),
  \ dotnet#prop('Execution', 'bool'),
  \ dotnet#prop('ControlThread', 'bool'),
  \ dotnet#prop('ControlEvidence', 'bool'),
  \ dotnet#prop('ControlPolicy', 'bool'),
  \ dotnet#prop('SerializationFormatter', 'bool'),
  \ dotnet#prop('ControlDomainPolicy', 'bool'),
  \ dotnet#prop('ControlPrincipal', 'bool'),
  \ dotnet#prop('ControlAppDomain', 'bool'),
  \ dotnet#prop('RemotingConfiguration', 'bool'),
  \ dotnet#prop('Infrastructure', 'bool'),
  \ dotnet#prop('BindingRedirects', 'bool'),
  \ ])

call dotnet#class('UIPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('UIPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Window(', ')', 'UIPermissionWindow'),
  \ dotnet#method('set_Window(', 'UIPermissionWindow value)', 'void'),
  \ dotnet#method('get_Clipboard(', ')', 'UIPermissionClipboard'),
  \ dotnet#method('set_Clipboard(', 'UIPermissionClipboard value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Window', 'UIPermissionWindow'),
  \ dotnet#prop('Clipboard', 'UIPermissionClipboard'),
  \ ])

call dotnet#class('ZoneIdentityPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('ZoneIdentityPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Zone(', ')', 'SecurityZone'),
  \ dotnet#method('set_Zone(', 'SecurityZone value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Zone', 'SecurityZone'),
  \ ])

call dotnet#class('StrongNameIdentityPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('StrongNameIdentityPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Version(', ')', 'string'),
  \ dotnet#method('set_Version(', 'string value)', 'void'),
  \ dotnet#method('get_PublicKey(', ')', 'string'),
  \ dotnet#method('set_PublicKey(', 'string value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Version', 'string'),
  \ dotnet#prop('PublicKey', 'string'),
  \ ])

call dotnet#class('SiteIdentityPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('SiteIdentityPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Site(', ')', 'string'),
  \ dotnet#method('set_Site(', 'string value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Site', 'string'),
  \ ])

call dotnet#class('UrlIdentityPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('UrlIdentityPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Url(', ')', 'string'),
  \ dotnet#method('set_Url(', 'string value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Url', 'string'),
  \ ])

call dotnet#class('PublisherIdentityPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('PublisherIdentityPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_X509Certificate(', ')', 'string'),
  \ dotnet#method('set_X509Certificate(', 'string value)', 'void'),
  \ dotnet#method('get_CertFile(', ')', 'string'),
  \ dotnet#method('set_CertFile(', 'string value)', 'void'),
  \ dotnet#method('get_SignedFile(', ')', 'string'),
  \ dotnet#method('set_SignedFile(', 'string value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('X509Certificate', 'string'),
  \ dotnet#prop('CertFile', 'string'),
  \ dotnet#prop('SignedFile', 'string'),
  \ ])

call dotnet#class('IsolatedStoragePermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#field('m_userQuota', 'int64'),
  \ dotnet#field('m_allowed', 'IsolatedStorageContainment'),
  \ dotnet#method('IsolatedStoragePermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('set_UserQuota(', 'int64 value)', 'void'),
  \ dotnet#method('get_UserQuota(', ')', 'int64'),
  \ dotnet#method('set_UsageAllowed(', 'IsolatedStorageContainment value)', 'void'),
  \ dotnet#method('get_UsageAllowed(', ')', 'IsolatedStorageContainment'),
  \ dotnet#prop('UserQuota', 'int64'),
  \ dotnet#prop('UsageAllowed', 'IsolatedStorageContainment'),
  \ ])

call dotnet#class('IsolatedStorageFilePermissionAttribute', 'IsolatedStoragePermissionAttribute', [ 
  \ dotnet#method('IsolatedStorageFilePermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ ])

call dotnet#class('PermissionSetAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('PermissionSetAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_File(', ')', 'string'),
  \ dotnet#method('set_File(', 'string value)', 'void'),
  \ dotnet#method('get_UnicodeEncoded(', ')', 'bool'),
  \ dotnet#method('set_UnicodeEncoded(', 'bool value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_XML(', ')', 'string'),
  \ dotnet#method('set_XML(', 'string value)', 'void'),
  \ dotnet#method('get_Hex(', ')', 'string'),
  \ dotnet#method('set_Hex(', 'string value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#method('CreatePermissionSet(', ')', 'PermissionSet'),
  \ dotnet#prop('', 'string()'),
  \ dotnet#prop('UnicodeEncoded', 'bool'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('XML', 'string'),
  \ dotnet#prop('Hex', 'string'),
  \ ])

call dotnet#class('ReflectionPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('ReflectionPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('ReflectionPermission(', 'ReflectionPermissionFlag flag)', 'void'),
  \ dotnet#method('set_Flags(', 'ReflectionPermissionFlag value)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'ReflectionPermissionFlag'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('Union(', 'class IPermission other)', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#prop('Flags', 'ReflectionPermissionFlag'),
  \ ])

call dotnet#class('PrincipalPermission', 'Object', [ 
  \ dotnet#method('PrincipalPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('PrincipalPermission(', 'string name, string role)', 'void'),
  \ dotnet#method('PrincipalPermission(', 'string name, string role, bool isAuthenticated)', 'void'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', ''),
  \ dotnet#method('Union(', 'class IPermission other)', ''),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('FromXml(', 'class SecurityElement elem)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ ])

call dotnet#class('SecurityPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('SecurityPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('SecurityPermission(', 'SecurityPermissionFlag flag)', 'void'),
  \ dotnet#method('set_Flags(', 'SecurityPermissionFlag value)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'SecurityPermissionFlag'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#method('MethodWithSkipVerificationLinkDemand(', ')', 'static void'),
  \ dotnet#prop('Flags', 'SecurityPermissionFlag'),
  \ ])

call dotnet#class('SiteIdentityPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('SiteIdentityPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('SiteIdentityPermission(', 'string site)', 'void'),
  \ dotnet#method('set_Site(', 'string value)', 'void'),
  \ dotnet#method('get_Site(', ')', 'string'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#prop('Site', 'string'),
  \ ])

call dotnet#class('StrongNameIdentityPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('StrongNameIdentityPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('StrongNameIdentityPermission(', 'class StrongNamePublicKeyBlob blob, string name, Version version)', 'void'),
  \ dotnet#method('set_PublicKey(', 'class StrongNamePublicKeyBlob value)', 'void'),
  \ dotnet#method('get_PublicKey(', ')', 'StrongNamePublicKeyBlob'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Version(', 'class Version value)', 'void'),
  \ dotnet#method('get_Version(', ')', 'Version'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#prop('PublicKey', 'StrongNamePublicKeyBlob'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Version', 'Version'),
  \ ])

call dotnet#class('StrongNamePublicKeyBlob', 'Object', [ 
  \ dotnet#field('PublicKey', 'uint8[]'),
  \ dotnet#method('StrongNamePublicKeyBlob(', ')', 'void'),
  \ dotnet#method('StrongNamePublicKeyBlob(', 'uint8[] publicKey)', 'void'),
  \ dotnet#method('StrongNamePublicKeyBlob(', 'string publicKey)', 'void'),
  \ dotnet#method('Equals(', 'class StrongNamePublicKeyBlob blob)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ ])

call dotnet#class('UIPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('UIPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('UIPermission(', 'UIPermissionWindow windowFlag, UIPermissionClipboard clipboardFlag)', 'void'),
  \ dotnet#method('UIPermission(', 'UIPermissionWindow windowFlag)', 'void'),
  \ dotnet#method('UIPermission(', 'UIPermissionClipboard clipboardFlag)', 'void'),
  \ dotnet#method('set_Window(', 'UIPermissionWindow value)', 'void'),
  \ dotnet#method('get_Window(', ')', 'UIPermissionWindow'),
  \ dotnet#method('set_Clipboard(', 'UIPermissionClipboard value)', 'void'),
  \ dotnet#method('get_Clipboard(', ')', 'UIPermissionClipboard'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#prop('Window', 'UIPermissionWindow'),
  \ dotnet#prop('Clipboard', 'UIPermissionClipboard'),
  \ ])

call dotnet#class('UrlIdentityPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('UrlIdentityPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('UrlIdentityPermission(', 'string site)', 'void'),
  \ dotnet#method('UrlIdentityPermission(', 'class URLString site)', 'void'),
  \ dotnet#method('AppendOrigin(', 'class ArrayList originList)', 'void'),
  \ dotnet#method('set_Url(', 'string value)', 'void'),
  \ dotnet#method('get_Url(', ')', 'string'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#prop('Url', 'string'),
  \ ])

call dotnet#class('ZoneIdentityPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('ZoneIdentityPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('ZoneIdentityPermission(', 'SecurityZone zone)', 'void'),
  \ dotnet#method('ZoneIdentityPermission(', 'uint32 zones)', 'void'),
  \ dotnet#method('AppendZones(', 'class ArrayList zoneList)', 'void'),
  \ dotnet#method('set_SecurityZone(', 'SecurityZone value)', 'void'),
  \ dotnet#method('get_SecurityZone(', ')', 'SecurityZone'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#prop('SecurityZone', 'SecurityZone'),
  \ ])

call dotnet#class('GacIdentityPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('GacIdentityPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ ])

call dotnet#class('GacIdentityPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('GacIdentityPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('GacIdentityPermission(', ')', 'void'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ ])

call dotnet#class('KeyContainerPermissionAccessEntry', 'Object', [ 
  \ dotnet#method('KeyContainerPermissionAccessEntry(', 'class KeyContainerPermissionAccessEntry accessEntry)', 'void'),
  \ dotnet#method('KeyContainerPermissionAccessEntry(', 'string keyContainerName, KeyContainerPermissionFlags flags)', 'void'),
  \ dotnet#method('KeyContainerPermissionAccessEntry(', 'class CspParameters parameters, KeyContainerPermissionFlags flags)', 'void'),
  \ dotnet#method('KeyContainerPermissionAccessEntry(', 'string keyStore, string providerName, int32 providerType, string keyContainerName, int32 keySpec, KeyContainerPermissionFlags flags)', 'void'),
  \ dotnet#method('get_KeyStore(', ')', 'string'),
  \ dotnet#method('set_KeyStore(', 'string value)', 'void'),
  \ dotnet#method('get_ProviderName(', ')', 'string'),
  \ dotnet#method('set_ProviderName(', 'string value)', 'void'),
  \ dotnet#method('get_ProviderType(', ')', 'int32'),
  \ dotnet#method('set_ProviderType(', 'int32 value)', 'void'),
  \ dotnet#method('get_KeyContainerName(', ')', 'string'),
  \ dotnet#method('set_KeyContainerName(', 'string value)', 'void'),
  \ dotnet#method('get_KeySpec(', ')', 'int32'),
  \ dotnet#method('set_KeySpec(', 'int32 value)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'KeyContainerPermissionFlags'),
  \ dotnet#method('set_Flags(', 'KeyContainerPermissionFlags value)', 'void'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('IsSubsetOf(', 'class KeyContainerPermissionAccessEntry target)', 'bool'),
  \ dotnet#method('IsUnrestrictedEntry(', 'string keyStore, string providerName, int32 providerType, string keyContainerName, int32 keySpec)', 'static bool'),
  \ dotnet#prop('KeyStore', 'string'),
  \ dotnet#prop('ProviderName', 'string'),
  \ dotnet#prop('ProviderType', 'int32'),
  \ dotnet#prop('KeyContainerName', 'string'),
  \ dotnet#prop('KeySpec', 'int32'),
  \ dotnet#prop('Flags', 'KeyContainerPermissionFlags'),
  \ ])

call dotnet#class('KeyContainerPermissionAccessEntryCollection', 'Object', [ 
  \ dotnet#method('KeyContainerPermissionAccessEntryCollection(', ')', 'void'),
  \ dotnet#method('KeyContainerPermissionAccessEntryCollection(', 'KeyContainerPermissionFlags globalFlags)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'KeyContainerPermissionAccessEntry'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('Add(', 'class KeyContainerPermissionAccessEntry accessEntry)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('IndexOf(', 'class KeyContainerPermissionAccessEntry accessEntry)', 'int32'),
  \ dotnet#method('Remove(', 'class KeyContainerPermissionAccessEntry accessEntry)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'KeyContainerPermissionAccessEntryEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class KeyContainerPermissionAccessEntry[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#prop('Item(int32)', 'KeyContainerPermissionAccessEntry'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('KeyContainerPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('KeyContainerPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('KeyContainerPermission(', 'KeyContainerPermissionFlags flags)', 'void'),
  \ dotnet#method('KeyContainerPermission(', 'KeyContainerPermissionFlags flags, KeyContainerPermissionAccessEntry[] accessList)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'KeyContainerPermissionFlags'),
  \ dotnet#method('get_AccessEntries(', ')', 'KeyContainerPermissionAccessEntryCollection'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('VerifyFlags(', 'KeyContainerPermissionFlags flags)', 'static void'),
  \ dotnet#prop('Flags', 'KeyContainerPermissionFlags'),
  \ dotnet#prop('AccessEntries', 'KeyContainerPermissionAccessEntryCollection'),
  \ ])

call dotnet#class('PublisherIdentityPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('PublisherIdentityPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('PublisherIdentityPermission(', 'class X509Certificate certificate)', 'void'),
  \ dotnet#method('set_Certificate(', 'class X509Certificate value)', 'void'),
  \ dotnet#method('get_Certificate(', ')', 'X509Certificate'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ dotnet#prop('Certificate', 'X509Certificate'),
  \ ])

call dotnet#class('RegistryPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('RegistryPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('RegistryPermission(', 'RegistryPermissionAccess access, string pathList)', 'void'),
  \ dotnet#method('RegistryPermission(', 'RegistryPermissionAccess access, AccessControlActions control, string pathList)', 'void'),
  \ dotnet#method('SetPathList(', 'RegistryPermissionAccess access, string pathList)', 'void'),
  \ dotnet#method('SetPathList(', 'AccessControlActions control, string pathList)', 'void'),
  \ dotnet#method('AddPathList(', 'RegistryPermissionAccess access, string pathList)', 'void'),
  \ dotnet#method('AddPathList(', 'RegistryPermissionAccess access, AccessControlActions control, string pathList)', 'void'),
  \ dotnet#method('GetPathList(', 'RegistryPermissionAccess access)', 'string'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission other)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement esd)', 'void'),
  \ dotnet#method('GetTokenIndex(', ')', 'int32 '),
  \ dotnet#method('GetTokenIndex(', ')', 'static int32'),
  \ ])

call dotnet#class('WebBrowserPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('WebBrowserPermission(', ')', 'void'),
  \ dotnet#method('WebBrowserPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('WebBrowserPermission(', 'WebBrowserPermissionLevel webBrowserPermissionLevel)', 'void'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#method('get_Level(', ')', 'WebBrowserPermissionLevel'),
  \ dotnet#method('set_Level(', 'WebBrowserPermissionLevel value)', 'void'),
  \ dotnet#method('VerifyWebBrowserPermissionLevel(', 'WebBrowserPermissionLevel level)', 'static void'),
  \ dotnet#prop('Level', 'WebBrowserPermissionLevel'),
  \ ])

call dotnet#class('WebBrowserPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('WebBrowserPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#method('get_Level(', ')', 'WebBrowserPermissionLevel'),
  \ dotnet#method('set_Level(', 'WebBrowserPermissionLevel value)', 'void'),
  \ dotnet#prop('Level', 'WebBrowserPermissionLevel'),
  \ ])

call dotnet#class('MediaPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('MediaPermission(', ')', 'void'),
  \ dotnet#method('MediaPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('MediaPermission(', 'MediaPermissionAudio permissionAudio)', 'void'),
  \ dotnet#method('MediaPermission(', 'MediaPermissionVideo permissionVideo)', 'void'),
  \ dotnet#method('MediaPermission(', 'MediaPermissionImage permissionImage)', 'void'),
  \ dotnet#method('MediaPermission(', 'MediaPermissionAudio permissionAudio, MediaPermissionVideo permissionVideo, MediaPermissionImage permissionImage)', 'void'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#method('get_Audio(', ')', 'MediaPermissionAudio'),
  \ dotnet#method('get_Video(', ')', 'MediaPermissionVideo'),
  \ dotnet#method('get_Image(', ')', 'MediaPermissionImage'),
  \ dotnet#method('VerifyMediaPermissionAudio(', 'MediaPermissionAudio level)', 'static void'),
  \ dotnet#method('VerifyMediaPermissionVideo(', 'MediaPermissionVideo level)', 'static void'),
  \ dotnet#method('VerifyMediaPermissionImage(', 'MediaPermissionImage level)', 'static void'),
  \ dotnet#prop('Audio', 'MediaPermissionAudio'),
  \ dotnet#prop('Video', 'MediaPermissionVideo'),
  \ dotnet#prop('Image', 'MediaPermissionImage'),
  \ ])

call dotnet#class('MediaPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('MediaPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#method('get_Audio(', ')', 'MediaPermissionAudio'),
  \ dotnet#method('set_Audio(', 'MediaPermissionAudio value)', 'void'),
  \ dotnet#method('get_Video(', ')', 'MediaPermissionVideo'),
  \ dotnet#method('set_Video(', 'MediaPermissionVideo value)', 'void'),
  \ dotnet#method('get_Image(', ')', 'MediaPermissionImage'),
  \ dotnet#method('set_Image(', 'MediaPermissionImage value)', 'void'),
  \ dotnet#prop('Audio', 'MediaPermissionAudio'),
  \ dotnet#prop('Video', 'MediaPermissionVideo'),
  \ dotnet#prop('Image', 'MediaPermissionImage'),
  \ ])

call dotnet#class('StorePermission', 'CodeAccessPermission', [ 
  \ dotnet#method('StorePermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('StorePermission(', 'StorePermissionFlags flag)', 'void'),
  \ dotnet#method('set_Flags(', 'StorePermissionFlags value)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'StorePermissionFlags'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#prop('Flags', 'StorePermissionFlags'),
  \ ])

call dotnet#class('StorePermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('StorePermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'StorePermissionFlags'),
  \ dotnet#method('set_Flags(', 'StorePermissionFlags value)', 'void'),
  \ dotnet#method('get_CreateStore(', ')', 'bool'),
  \ dotnet#method('set_CreateStore(', 'bool value)', 'void'),
  \ dotnet#method('get_DeleteStore(', ')', 'bool'),
  \ dotnet#method('set_DeleteStore(', 'bool value)', 'void'),
  \ dotnet#method('get_EnumerateStores(', ')', 'bool'),
  \ dotnet#method('set_EnumerateStores(', 'bool value)', 'void'),
  \ dotnet#method('get_OpenStore(', ')', 'bool'),
  \ dotnet#method('set_OpenStore(', 'bool value)', 'void'),
  \ dotnet#method('get_AddToStore(', ')', 'bool'),
  \ dotnet#method('set_AddToStore(', 'bool value)', 'void'),
  \ dotnet#method('get_RemoveFromStore(', ')', 'bool'),
  \ dotnet#method('set_RemoveFromStore(', 'bool value)', 'void'),
  \ dotnet#method('get_EnumerateCertificates(', ')', 'bool'),
  \ dotnet#method('set_EnumerateCertificates(', 'bool value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Flags', 'StorePermissionFlags'),
  \ dotnet#prop('CreateStore', 'bool'),
  \ dotnet#prop('DeleteStore', 'bool'),
  \ dotnet#prop('EnumerateStores', 'bool'),
  \ dotnet#prop('OpenStore', 'bool'),
  \ dotnet#prop('AddToStore', 'bool'),
  \ dotnet#prop('RemoveFromStore', 'bool'),
  \ dotnet#prop('EnumerateCertificates', 'bool'),
  \ ])

call dotnet#class('TypeDescriptorPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('TypeDescriptorPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('TypeDescriptorPermission(', 'TypeDescriptorPermissionFlags flag)', 'void'),
  \ dotnet#method('set_Flags(', 'TypeDescriptorPermissionFlags value)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'TypeDescriptorPermissionFlags'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#prop('Flags', 'TypeDescriptorPermissionFlags'),
  \ ])

call dotnet#class('TypeDescriptorPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('TypeDescriptorPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Flags(', ')', 'TypeDescriptorPermissionFlags'),
  \ dotnet#method('set_Flags(', 'TypeDescriptorPermissionFlags value)', 'void'),
  \ dotnet#method('get_RestrictedRegistrationAccess(', ')', 'bool'),
  \ dotnet#method('set_RestrictedRegistrationAccess(', 'bool value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Flags', 'TypeDescriptorPermissionFlags'),
  \ dotnet#prop('RestrictedRegistrationAccess', 'bool'),
  \ ])

call dotnet#class('ResourcePermissionBase', 'CodeAccessPermission', [ 
  \ dotnet#method('ResourcePermissionBase(', ')', 'void'),
  \ dotnet#method('ResourcePermissionBase(', 'PermissionState state)', 'void'),
  \ dotnet#method('get_PermissionAccessType(', ')', 'Type'),
  \ dotnet#method('set_PermissionAccessType(', 'class Type value)', 'void'),
  \ dotnet#method('get_TagNames(', ')', 'string[]'),
  \ dotnet#method('set_TagNames(', 'string[] value)', 'void'),
  \ dotnet#method('AddPermissionAccess(', 'class ResourcePermissionBaseEntry entry)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('GetPermissionEntries(', ')', 'ResourcePermissionBaseEntry[]'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('RemovePermissionAccess(', 'class ResourcePermissionBaseEntry entry)', 'void'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#prop('PermissionAccessType', 'Type'),
  \ dotnet#prop('TagNames', 'string[]'),
  \ ])

call dotnet#class('ResourcePermissionBaseEntry', 'Object', [ 
  \ dotnet#method('ResourcePermissionBaseEntry(', ')', 'void'),
  \ dotnet#method('ResourcePermissionBaseEntry(', 'int32 permissionAccess, string[] permissionAccessPath)', 'void'),
  \ dotnet#method('get_PermissionAccess(', ')', 'int32'),
  \ dotnet#method('get_PermissionAccessPath(', ')', 'string[]'),
  \ dotnet#prop('PermissionAccess', 'int32'),
  \ dotnet#prop('PermissionAccessPath', 'string[]'),
  \ ])

