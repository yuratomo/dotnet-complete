call dotnet#namespace('System.Security.Cryptography.X509Certificates')

call dotnet#class('X509Certificate', 'Object', [ 
  \ dotnet#method('X509Certificate(', ')', 'void'),
  \ dotnet#method('X509Certificate(', 'uint8[] data)', 'void'),
  \ dotnet#method('X509Certificate(', 'uint8[] rawData, string password)', 'void'),
  \ dotnet#method('X509Certificate(', 'uint8[] rawData, SecureString password)', 'void'),
  \ dotnet#method('X509Certificate(', 'uint8[] rawData, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('X509Certificate(', 'uint8[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('X509Certificate(', 'string fileName)', 'void'),
  \ dotnet#method('X509Certificate(', 'string fileName, string password)', 'void'),
  \ dotnet#method('X509Certificate(', 'string fileName, SecureString password)', 'void'),
  \ dotnet#method('X509Certificate(', 'string fileName, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('X509Certificate(', 'string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('X509Certificate(', 'native int handle)', 'void'),
  \ dotnet#method('X509Certificate(', 'class X509Certificate cert)', 'void'),
  \ dotnet#method('X509Certificate(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('CreateFromCertFile(', 'string filename)', 'static X509Certificate'),
  \ dotnet#method('CreateFromSignedFile(', 'string filename)', 'static X509Certificate'),
  \ dotnet#method('get_Handle(', ')', 'int'),
  \ dotnet#method('GetName(', ')', 'string'),
  \ dotnet#method('GetIssuerName(', ')', 'string'),
  \ dotnet#method('GetSerialNumber(', ')', 'uint8[]'),
  \ dotnet#method('GetSerialNumberString(', ')', 'string'),
  \ dotnet#method('GetKeyAlgorithmParameters(', ')', 'uint8[]'),
  \ dotnet#method('GetKeyAlgorithmParametersString(', ')', 'string'),
  \ dotnet#method('GetKeyAlgorithm(', ')', 'string'),
  \ dotnet#method('GetPublicKey(', ')', 'uint8[]'),
  \ dotnet#method('GetPublicKeyString(', ')', 'string'),
  \ dotnet#method('GetRawCertData(', ')', 'uint8[]'),
  \ dotnet#method('GetRawCertDataString(', ')', 'string'),
  \ dotnet#method('GetCertHash(', ')', 'uint8[]'),
  \ dotnet#method('GetCertHashString(', ')', 'string'),
  \ dotnet#method('GetEffectiveDateString(', ')', 'string'),
  \ dotnet#method('GetExpirationDateString(', ')', 'string'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'class X509Certificate other)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'bool fVerbose)', 'string'),
  \ dotnet#method('FormatDate(', 'DateTime date)', 'static string'),
  \ dotnet#method('GetFormat(', ')', 'string'),
  \ dotnet#method('get_Issuer(', ')', 'string'),
  \ dotnet#method('get_Subject(', ')', 'string'),
  \ dotnet#method('Import(', 'uint8[] rawData)', 'void'),
  \ dotnet#method('Import(', 'uint8[] rawData, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Import(', 'uint8[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Import(', 'string fileName)', 'void'),
  \ dotnet#method('Import(', 'string fileName, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Import(', 'string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Export(', 'X509ContentType contentType)', 'uint8[]'),
  \ dotnet#method('Export(', 'X509ContentType contentType, string password)', 'uint8[]'),
  \ dotnet#method('Export(', 'X509ContentType contentType, SecureString password)', 'uint8[]'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('get_CertContext(', ')', '.method'),
  \ dotnet#prop('Handle', 'int'),
  \ dotnet#prop('Issuer', 'string'),
  \ dotnet#prop('Subject', 'string'),
  \ dotnet#prop('CertContext', 'SafeCertContextHandle'),
  \ ])

call dotnet#class('AuthenticodeSignatureInformation', 'Object', [ 
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#method('get_DescriptionUrl(', ')', 'Uri'),
  \ dotnet#method('get_HashAlgorithm(', ')', 'string'),
  \ dotnet#method('get_HResult(', ')', 'int32'),
  \ dotnet#method('get_SignatureChain(', ')', 'X509Chain'),
  \ dotnet#method('get_SigningCertificate(', ')', 'X509Certificate2'),
  \ dotnet#method('get_Timestamp(', ')', 'TimestampInformation'),
  \ dotnet#method('get_TrustStatus(', ')', 'TrustStatus'),
  \ dotnet#method('get_VerificationResult(', ')', 'SignatureVerificationResult'),
  \ dotnet#prop('Description', 'string'),
  \ dotnet#prop('DescriptionUrl', 'Uri'),
  \ dotnet#prop('HashAlgorithm', 'string'),
  \ dotnet#prop('HResult', 'int32'),
  \ dotnet#prop('SignatureChain', 'X509Chain'),
  \ dotnet#prop('SigningCertificate', 'X509Certificate2'),
  \ dotnet#prop('Timestamp', 'TimestampInformation'),
  \ dotnet#prop('TrustStatus', 'TrustStatus'),
  \ dotnet#prop('VerificationResult', 'SignatureVerificationResult'),
  \ ])

call dotnet#class('TimestampInformation', 'Object', [ 
  \ dotnet#method('get_HashAlgorithm(', ')', 'string'),
  \ dotnet#method('get_HResult(', ')', 'int32'),
  \ dotnet#method('get_IsValid(', ')', 'bool'),
  \ dotnet#method('get_SignatureChain(', ')', 'X509Chain'),
  \ dotnet#method('get_SigningCertificate(', ')', 'X509Certificate2'),
  \ dotnet#method('get_Timestamp(', ')', 'DateTime'),
  \ dotnet#method('get_VerificationResult(', ')', 'SignatureVerificationResult'),
  \ dotnet#prop('HashAlgorithm', 'string'),
  \ dotnet#prop('HResult', 'int32'),
  \ dotnet#prop('IsValid', 'bool'),
  \ dotnet#prop('SignatureChain', 'X509Chain'),
  \ dotnet#prop('SigningCertificate', 'X509Certificate2'),
  \ dotnet#prop('Timestamp', 'DateTime'),
  \ dotnet#prop('VerificationResult', 'SignatureVerificationResult'),
  \ ])

call dotnet#class('X500DistinguishedName', 'AsnEncodedData', [ 
  \ dotnet#method('X500DistinguishedName(', 'uint8[] encodedDistinguishedName)', 'void'),
  \ dotnet#method('X500DistinguishedName(', 'class AsnEncodedData encodedDistinguishedName)', 'void'),
  \ dotnet#method('X500DistinguishedName(', 'class X500DistinguishedName distinguishedName)', 'void'),
  \ dotnet#method('X500DistinguishedName(', 'string distinguishedName)', 'void'),
  \ dotnet#method('X500DistinguishedName(', 'string distinguishedName, X500DistinguishedNameFlags flag)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('Decode(', 'X500DistinguishedNameFlags flag)', 'string'),
  \ dotnet#method('Format(', 'bool multiLine)', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('PublicKey', 'Object', [ 
  \ dotnet#method('PublicKey(', 'class Oid oid, AsnEncodedData parameters, AsnEncodedData keyValue)', 'void'),
  \ dotnet#method('get_Key(', ')', 'AsymmetricAlgorithm'),
  \ dotnet#method('get_Oid(', ')', 'Oid'),
  \ dotnet#method('get_EncodedKeyValue(', ')', 'AsnEncodedData'),
  \ dotnet#method('get_EncodedParameters(', ')', 'AsnEncodedData'),
  \ dotnet#method('PublicKey(', ')', 'void'),
  \ dotnet#prop('Key', 'AsymmetricAlgorithm'),
  \ dotnet#prop('Oid', 'Oid'),
  \ dotnet#prop('EncodedKeyValue', 'AsnEncodedData'),
  \ dotnet#prop('EncodedParameters', 'AsnEncodedData'),
  \ ])

call dotnet#class('X509Certificate2', 'X509Certificate', [ 
  \ dotnet#method('X509Certificate2(', ')', 'void'),
  \ dotnet#method('X509Certificate2(', 'uint8[] rawData)', 'void'),
  \ dotnet#method('X509Certificate2(', 'uint8[] rawData, string password)', 'void'),
  \ dotnet#method('X509Certificate2(', 'uint8[] rawData, SecureString password)', 'void'),
  \ dotnet#method('X509Certificate2(', 'uint8[] rawData, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('X509Certificate2(', 'uint8[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('X509Certificate2(', 'string fileName)', 'void'),
  \ dotnet#method('X509Certificate2(', 'string fileName, string password)', 'void'),
  \ dotnet#method('X509Certificate2(', 'string fileName, SecureString password)', 'void'),
  \ dotnet#method('X509Certificate2(', 'string fileName, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('X509Certificate2(', 'string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('X509Certificate2(', 'native int handle)', 'void'),
  \ dotnet#method('X509Certificate2(', 'class X509Certificate certificate)', 'void'),
  \ dotnet#method('X509Certificate2(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'bool verbose)', 'string'),
  \ dotnet#method('get_Archived(', ')', 'bool'),
  \ dotnet#method('set_Archived(', 'bool value)', 'void'),
  \ dotnet#method('get_Extensions(', ')', 'X509ExtensionCollection'),
  \ dotnet#method('get_FriendlyName(', ')', 'string'),
  \ dotnet#method('set_FriendlyName(', 'string value)', 'void'),
  \ dotnet#method('get_IssuerName(', ')', 'X500DistinguishedName'),
  \ dotnet#method('get_NotAfter(', ')', 'DateTime'),
  \ dotnet#method('get_NotBefore(', ')', 'DateTime'),
  \ dotnet#method('get_HasPrivateKey(', ')', 'bool'),
  \ dotnet#method('get_PrivateKey(', ')', 'AsymmetricAlgorithm'),
  \ dotnet#method('set_PrivateKey(', 'class AsymmetricAlgorithm value)', 'void'),
  \ dotnet#method('get_PublicKey(', ')', 'PublicKey'),
  \ dotnet#method('get_RawData(', ')', 'uint8[]'),
  \ dotnet#method('get_SerialNumber(', ')', 'string'),
  \ dotnet#method('get_SubjectName(', ')', 'X500DistinguishedName'),
  \ dotnet#method('get_SignatureAlgorithm(', ')', 'Oid'),
  \ dotnet#method('get_Thumbprint(', ')', 'string'),
  \ dotnet#method('get_Version(', ')', 'int32'),
  \ dotnet#method('GetNameInfo(', 'X509NameType nameType, bool forIssuer)', 'string'),
  \ dotnet#method('Import(', 'uint8[] rawData)', 'void'),
  \ dotnet#method('Import(', 'uint8[] rawData, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Import(', 'uint8[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Import(', 'string fileName)', 'void'),
  \ dotnet#method('Import(', 'string fileName, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Import(', 'string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('Verify(', ')', 'bool'),
  \ dotnet#method('GetCertContentType(', 'uint8[] rawData)', 'static X509ContentType'),
  \ dotnet#method('GetCertContentType(', 'string fileName)', 'static X509ContentType'),
  \ dotnet#prop('Archived', 'bool'),
  \ dotnet#prop('Extensions', 'X509ExtensionCollection'),
  \ dotnet#prop('FriendlyName', 'string'),
  \ dotnet#prop('IssuerName', 'X500DistinguishedName'),
  \ dotnet#prop('NotAfter', 'DateTime'),
  \ dotnet#prop('NotBefore', 'DateTime'),
  \ dotnet#prop('HasPrivateKey', 'bool'),
  \ dotnet#prop('PrivateKey', 'AsymmetricAlgorithm'),
  \ dotnet#prop('PublicKey', 'PublicKey'),
  \ dotnet#prop('RawData', 'uint8[]'),
  \ dotnet#prop('SerialNumber', 'string'),
  \ dotnet#prop('SubjectName', 'X500DistinguishedName'),
  \ dotnet#prop('SignatureAlgorithm', 'Oid'),
  \ dotnet#prop('Thumbprint', 'string'),
  \ dotnet#prop('Version', 'int32'),
  \ ])

call dotnet#class('X509CertificateCollection', 'CollectionBase', [ 
  \ dotnet#method('X509CertificateCollection(', 'class X509CertificateCollection mappings)', 'void'),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('MoveNext(', ')', 'bool '),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#prop('Current', 'X509Certificate'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('X509CertificateCollection(', ')', 'void'),
  \ dotnet#method('X509CertificateCollection(', 'class X509CertificateCollection value)', 'void'),
  \ dotnet#method('X509CertificateCollection(', 'class X509Certificate[] value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'X509Certificate'),
  \ dotnet#method('set_Item(', 'int32 index, X509Certificate value)', 'void'),
  \ dotnet#method('Add(', 'class X509Certificate value)', 'int32'),
  \ dotnet#method('AddRange(', 'class X509Certificate[] value)', 'void'),
  \ dotnet#method('AddRange(', 'class X509CertificateCollection value)', 'void'),
  \ dotnet#method('Contains(', 'class X509Certificate value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class X509Certificate[] array, int32 index)', 'void'),
  \ dotnet#method('IndexOf(', 'class X509Certificate value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, X509Certificate value)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'X509CertificateCollection/X509CertificateEnumerator'),
  \ dotnet#method('Remove(', 'class X509Certificate value)', 'void'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Item(int32)', 'X509Certificate'),
  \ ])

call dotnet#class('X509Certificate2Collection', 'X509CertificateCollection', [ 
  \ dotnet#method('X509Certificate2Collection(', ')', 'void'),
  \ dotnet#method('X509Certificate2Collection(', 'class X509Certificate2 certificate)', 'void'),
  \ dotnet#method('X509Certificate2Collection(', 'class X509Certificate2Collection certificates)', 'void'),
  \ dotnet#method('X509Certificate2Collection(', 'class X509Certificate2[] certificates)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'X509Certificate2'),
  \ dotnet#method('set_Item(', 'int32 index, X509Certificate2 value)', 'void'),
  \ dotnet#method('Add(', 'class X509Certificate2 certificate)', 'int32'),
  \ dotnet#method('AddRange(', 'class X509Certificate2[] certificates)', 'void'),
  \ dotnet#method('AddRange(', 'class X509Certificate2Collection certificates)', 'void'),
  \ dotnet#method('Contains(', 'class X509Certificate2 certificate)', 'bool'),
  \ dotnet#method('Insert(', 'int32 index, X509Certificate2 certificate)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'X509Certificate2Enumerator'),
  \ dotnet#method('Remove(', 'class X509Certificate2 certificate)', 'void'),
  \ dotnet#method('RemoveRange(', 'class X509Certificate2[] certificates)', 'void'),
  \ dotnet#method('RemoveRange(', 'class X509Certificate2Collection certificates)', 'void'),
  \ dotnet#method('Find(', 'X509FindType findType, object findValue, bool validOnly)', 'X509Certificate2Collection'),
  \ dotnet#method('Import(', 'uint8[] rawData)', 'void'),
  \ dotnet#method('Import(', 'uint8[] rawData, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Import(', 'string fileName)', 'void'),
  \ dotnet#method('Import(', 'string fileName, string password, X509KeyStorageFlags keyStorageFlags)', 'void'),
  \ dotnet#method('Export(', 'X509ContentType contentType)', 'uint8[]'),
  \ dotnet#method('Export(', 'X509ContentType contentType, string password)', 'uint8[]'),
  \ dotnet#prop('Item(int32)', 'X509Certificate2'),
  \ ])

call dotnet#class('X509ChainStatus', 'ValueType', [ 
  \ dotnet#field('m_status', 'X509ChainStatusFlags'),
  \ dotnet#field('m_statusInformation', 'string'),
  \ dotnet#method('get_Status(', ')', 'X509ChainStatusFlags'),
  \ dotnet#method('set_Status(', 'X509ChainStatusFlags value)', 'void'),
  \ dotnet#method('get_StatusInformation(', ')', 'string'),
  \ dotnet#method('set_StatusInformation(', 'string value)', 'void'),
  \ dotnet#prop('Status', 'X509ChainStatusFlags'),
  \ dotnet#prop('StatusInformation', 'string'),
  \ ])

call dotnet#class('X509Chain', 'Object', [ 
  \ dotnet#method('Create(', ')', 'static X509Chain'),
  \ dotnet#method('X509Chain(', ')', 'void'),
  \ dotnet#method('X509Chain(', 'bool useMachineContext)', 'void'),
  \ dotnet#method('X509Chain(', 'native int chainContext)', 'void'),
  \ dotnet#method('get_ChainContext(', ')', 'int'),
  \ dotnet#method('get_ChainPolicy(', ')', 'X509ChainPolicy'),
  \ dotnet#method('set_ChainPolicy(', 'class X509ChainPolicy value)', 'void'),
  \ dotnet#method('get_ChainStatus(', ')', 'X509ChainStatus[]'),
  \ dotnet#method('get_ChainElements(', ')', 'X509ChainElementCollection'),
  \ dotnet#method('Build(', 'class X509Certificate2 certificate)', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#prop('ChainContext', 'int'),
  \ dotnet#prop('ChainPolicy', 'X509ChainPolicy'),
  \ dotnet#prop('ChainStatus', 'X509ChainStatus[]'),
  \ dotnet#prop('ChainElements', 'X509ChainElementCollection'),
  \ ])

call dotnet#class('X509ChainElement', 'Object', [ 
  \ dotnet#method('get_Certificate(', ')', 'X509Certificate2'),
  \ dotnet#method('get_ChainElementStatus(', ')', 'X509ChainStatus[]'),
  \ dotnet#method('get_Information(', ')', 'string'),
  \ dotnet#method('X509ChainElement(', ')', 'void'),
  \ dotnet#prop('Certificate', 'X509Certificate2'),
  \ dotnet#prop('ChainElementStatus', 'X509ChainStatus[]'),
  \ dotnet#prop('Information', 'string'),
  \ ])

call dotnet#class('X509ChainElementCollection', 'Object', [ 
  \ dotnet#method('get_Item(', 'int32 index)', 'X509ChainElement'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('GetEnumerator(', ')', 'X509ChainElementEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class X509ChainElement[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('X509ChainElementCollection(', ')', 'void'),
  \ dotnet#prop('Item(int32)', 'X509ChainElement'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('X509ChainPolicy', 'Object', [ 
  \ dotnet#method('X509ChainPolicy(', ')', 'void'),
  \ dotnet#method('get_ApplicationPolicy(', ')', 'OidCollection'),
  \ dotnet#method('get_CertificatePolicy(', ')', 'OidCollection'),
  \ dotnet#method('get_RevocationMode(', ')', 'X509RevocationMode'),
  \ dotnet#method('set_RevocationMode(', 'X509RevocationMode value)', 'void'),
  \ dotnet#method('get_RevocationFlag(', ')', 'X509RevocationFlag'),
  \ dotnet#method('set_RevocationFlag(', 'X509RevocationFlag value)', 'void'),
  \ dotnet#method('get_VerificationFlags(', ')', 'X509VerificationFlags'),
  \ dotnet#method('set_VerificationFlags(', 'X509VerificationFlags value)', 'void'),
  \ dotnet#method('get_VerificationTime(', ')', 'DateTime'),
  \ dotnet#method('set_VerificationTime(', 'DateTime value)', 'void'),
  \ dotnet#method('get_UrlRetrievalTimeout(', ')', 'TimeSpan'),
  \ dotnet#method('set_UrlRetrievalTimeout(', 'TimeSpan value)', 'void'),
  \ dotnet#method('get_ExtraStore(', ')', 'X509Certificate2Collection'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#prop('ApplicationPolicy', 'OidCollection'),
  \ dotnet#prop('CertificatePolicy', 'OidCollection'),
  \ dotnet#prop('RevocationMode', 'X509RevocationMode'),
  \ dotnet#prop('RevocationFlag', 'X509RevocationFlag'),
  \ dotnet#prop('VerificationFlags', 'X509VerificationFlags'),
  \ dotnet#prop('VerificationTime', 'DateTime'),
  \ dotnet#prop('UrlRetrievalTimeout', 'TimeSpan'),
  \ dotnet#prop('ExtraStore', 'X509Certificate2Collection'),
  \ ])

call dotnet#class('X509Extension', 'AsnEncodedData', [ 
  \ dotnet#method('X509Extension(', ')', 'void'),
  \ dotnet#method('X509Extension(', 'string oid, uint8[] rawData, bool critical)', 'void'),
  \ dotnet#method('X509Extension(', 'class AsnEncodedData encodedExtension, bool critical)', 'void'),
  \ dotnet#method('X509Extension(', 'class Oid oid, uint8[] rawData, bool critical)', 'void'),
  \ dotnet#method('get_Critical(', ')', 'bool'),
  \ dotnet#method('set_Critical(', 'bool value)', 'void'),
  \ dotnet#method('CopyFrom(', 'class AsnEncodedData asnEncodedData)', 'void'),
  \ dotnet#prop('Critical', 'bool'),
  \ ])

call dotnet#class('X509KeyUsageExtension', 'X509Extension', [ 
  \ dotnet#method('X509KeyUsageExtension(', ')', 'void'),
  \ dotnet#method('X509KeyUsageExtension(', 'X509KeyUsageFlags keyUsages, bool critical)', 'void'),
  \ dotnet#method('X509KeyUsageExtension(', 'class AsnEncodedData encodedKeyUsage, bool critical)', 'void'),
  \ dotnet#method('get_KeyUsages(', ')', 'X509KeyUsageFlags'),
  \ dotnet#method('CopyFrom(', 'class AsnEncodedData asnEncodedData)', 'void'),
  \ dotnet#prop('KeyUsages', 'X509KeyUsageFlags'),
  \ ])

call dotnet#class('X509BasicConstraintsExtension', 'X509Extension', [ 
  \ dotnet#method('X509BasicConstraintsExtension(', ')', 'void'),
  \ dotnet#method('X509BasicConstraintsExtension(', 'bool certificateAuthority, bool hasPathLengthConstraint, int32 pathLengthConstraint, bool critical)', 'void'),
  \ dotnet#method('X509BasicConstraintsExtension(', 'class AsnEncodedData encodedBasicConstraints, bool critical)', 'void'),
  \ dotnet#method('get_CertificateAuthority(', ')', 'bool'),
  \ dotnet#method('get_HasPathLengthConstraint(', ')', 'bool'),
  \ dotnet#method('get_PathLengthConstraint(', ')', 'int32'),
  \ dotnet#method('CopyFrom(', 'class AsnEncodedData asnEncodedData)', 'void'),
  \ dotnet#prop('CertificateAuthority', 'bool'),
  \ dotnet#prop('HasPathLengthConstraint', 'bool'),
  \ dotnet#prop('PathLengthConstraint', 'int32'),
  \ ])

call dotnet#class('X509EnhancedKeyUsageExtension', 'X509Extension', [ 
  \ dotnet#method('X509EnhancedKeyUsageExtension(', ')', 'void'),
  \ dotnet#method('X509EnhancedKeyUsageExtension(', 'class OidCollection enhancedKeyUsages, bool critical)', 'void'),
  \ dotnet#method('X509EnhancedKeyUsageExtension(', 'class AsnEncodedData encodedEnhancedKeyUsages, bool critical)', 'void'),
  \ dotnet#method('get_EnhancedKeyUsages(', ')', 'OidCollection'),
  \ dotnet#method('CopyFrom(', 'class AsnEncodedData asnEncodedData)', 'void'),
  \ dotnet#prop('EnhancedKeyUsages', 'OidCollection'),
  \ ])

call dotnet#class('X509SubjectKeyIdentifierExtension', 'X509Extension', [ 
  \ dotnet#method('X509SubjectKeyIdentifierExtension(', ')', 'void'),
  \ dotnet#method('X509SubjectKeyIdentifierExtension(', 'string subjectKeyIdentifier, bool critical)', 'void'),
  \ dotnet#method('X509SubjectKeyIdentifierExtension(', 'uint8[] subjectKeyIdentifier, bool critical)', 'void'),
  \ dotnet#method('X509SubjectKeyIdentifierExtension(', 'class AsnEncodedData encodedSubjectKeyIdentifier, bool critical)', 'void'),
  \ dotnet#method('X509SubjectKeyIdentifierExtension(', 'class PublicKey key, bool critical)', 'void'),
  \ dotnet#method('X509SubjectKeyIdentifierExtension(', 'class PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical)', 'void'),
  \ dotnet#method('get_SubjectKeyIdentifier(', ')', 'string'),
  \ dotnet#method('CopyFrom(', 'class AsnEncodedData asnEncodedData)', 'void'),
  \ dotnet#prop('SubjectKeyIdentifier', 'string'),
  \ ])

call dotnet#class('X509ExtensionCollection', 'Object', [ 
  \ dotnet#method('X509ExtensionCollection(', ')', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'X509Extension'),
  \ dotnet#method('get_Item(', 'string oid)', 'X509Extension'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('Add(', 'class X509Extension extension)', 'int32'),
  \ dotnet#method('GetEnumerator(', ')', 'X509ExtensionEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class X509Extension[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#prop('Item(int32)', 'X509Extension'),
  \ dotnet#prop('Item(string)', 'X509Extension'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('X509Store', 'Object', [ 
  \ dotnet#method('X509Store(', ')', 'void'),
  \ dotnet#method('X509Store(', 'string storeName)', 'void'),
  \ dotnet#method('X509Store(', 'StoreName storeName)', 'void'),
  \ dotnet#method('X509Store(', 'StoreLocation storeLocation)', 'void'),
  \ dotnet#method('X509Store(', 'StoreName storeName, StoreLocation storeLocation)', 'void'),
  \ dotnet#method('X509Store(', 'string storeName, StoreLocation storeLocation)', 'void'),
  \ dotnet#method('X509Store(', 'native int storeHandle)', 'void'),
  \ dotnet#method('get_StoreHandle(', ')', 'int'),
  \ dotnet#method('get_Location(', ')', 'StoreLocation'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('Open(', 'OpenFlags flags)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Add(', 'class X509Certificate2 certificate)', 'void'),
  \ dotnet#method('AddRange(', 'class X509Certificate2Collection certificates)', 'void'),
  \ dotnet#method('Remove(', 'class X509Certificate2 certificate)', 'void'),
  \ dotnet#method('RemoveRange(', 'class X509Certificate2Collection certificates)', 'void'),
  \ dotnet#method('get_Certificates(', ')', 'X509Certificate2Collection'),
  \ dotnet#prop('StoreHandle', 'int'),
  \ dotnet#prop('Location', 'StoreLocation'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Certificates', 'X509Certificate2Collection'),
  \ ])

