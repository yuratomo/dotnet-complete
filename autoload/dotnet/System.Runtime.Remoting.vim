call dotnet#namespace('System.Runtime.Remoting')

call dotnet#class('ObjRef', 'Object', [ 
  \ dotnet#field('uri', 'string'),
  \ dotnet#field('typeInfo', 'IRemotingTypeInfo'),
  \ dotnet#field('envoyInfo', 'IEnvoyInfo'),
  \ dotnet#field('channelInfo', 'IChannelInfo'),
  \ dotnet#field('objrefFlags', 'int32'),
  \ dotnet#field('srvIdentity', 'GCHandle'),
  \ dotnet#field('domainID', 'int32'),
  \ dotnet#method('SetServerIdentity(', 'GCHandle hndSrvIdentity)', 'void'),
  \ dotnet#method('GetServerIdentity(', ')', 'GCHandle'),
  \ dotnet#method('SetDomainID(', 'int32 id)', 'void'),
  \ dotnet#method('GetDomainID(', ')', 'int32'),
  \ dotnet#method('ObjRef(', 'class MarshalByRefObject o, Type requestedType)', 'void'),
  \ dotnet#method('ObjRef(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('CanSmuggle(', ')', 'bool'),
  \ dotnet#method('CreateSmuggleableCopy(', ')', 'ObjRef'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_URI(', ')', 'string'),
  \ dotnet#method('set_URI(', 'string value)', 'void'),
  \ dotnet#method('get_TypeInfo(', ')', ''),
  \ dotnet#method('set_TypeInfo(', 'class IRemotingTypeInfo value)', 'void'),
  \ dotnet#method('get_EnvoyInfo(', ')', ''),
  \ dotnet#method('set_EnvoyInfo(', 'class IEnvoyInfo value)', 'void'),
  \ dotnet#method('get_ChannelInfo(', ')', ''),
  \ dotnet#method('set_ChannelInfo(', 'class IChannelInfo value)', 'void'),
  \ dotnet#method('GetRealObject(', 'StreamingContext context)', 'object'),
  \ dotnet#method('GetRealObjectHelper(', ')', 'object'),
  \ dotnet#method('ObjRef(', ')', 'void'),
  \ dotnet#method('IsMarshaledObject(', ')', 'bool'),
  \ dotnet#method('SetMarshaledObject(', ')', 'void'),
  \ dotnet#method('IsWellKnown(', ')', 'bool'),
  \ dotnet#method('SetWellKnown(', ')', 'void'),
  \ dotnet#method('HasProxyAttribute(', ')', 'bool'),
  \ dotnet#method('SetHasProxyAttribute(', ')', 'void'),
  \ dotnet#method('IsObjRefLite(', ')', 'bool'),
  \ dotnet#method('SetObjRefLite(', ')', 'void'),
  \ dotnet#method('IsFromThisProcess(', ')', 'bool'),
  \ dotnet#method('IsFromThisAppDomain(', ')', 'bool'),
  \ dotnet#method('GetServerDomainId(', ')', 'int32'),
  \ dotnet#method('GetServerContext(', '[out] int32& domainId)', 'int'),
  \ dotnet#method('Init(', 'object o, Identity idObj, RuntimeType requestedType)', 'void'),
  \ dotnet#method('ShouldUseUrlObjRef(', ')', 'static bool'),
  \ dotnet#method('IsWellFormed(', 'class ObjRef objectRef)', 'static bool'),
  \ dotnet#method('ObjRef(', ')', 'static void .'),
  \ dotnet#prop('URI', 'string'),
  \ dotnet#prop('TypeInfo', 'IRemotingTypeInfo'),
  \ dotnet#prop('EnvoyInfo', 'IEnvoyInfo'),
  \ dotnet#prop('ChannelInfo', 'IChannelInfo'),
  \ ])

call dotnet#class('RemotingConfiguration', 'Object', [ 
  \ dotnet#method('Configure(', 'string filename)', 'static void'),
  \ dotnet#method('Configure(', 'string filename, bool ensureSecurity)', 'static void'),
  \ dotnet#method('get_ApplicationName(', ')', 'static string'),
  \ dotnet#method('set_ApplicationName(', 'string value)', 'static void'),
  \ dotnet#method('get_ApplicationId(', ')', 'static string'),
  \ dotnet#method('get_ProcessId(', ')', 'static string'),
  \ dotnet#method('get_CustomErrorsMode(', ')', 'static'),
  \ dotnet#method('set_CustomErrorsMode(', 'CustomErrorsModes value)', 'static void'),
  \ dotnet#method('CustomErrorsEnabled(', 'bool isLocalRequest)', 'static bool'),
  \ dotnet#method('RegisterActivatedServiceType(', 'class Type type)', 'static void'),
  \ dotnet#method('RegisterActivatedServiceType(', 'class ActivatedServiceTypeEntry entry)', 'static void'),
  \ dotnet#method('RegisterWellKnownServiceType(', 'class Type type, string objectUri, WellKnownObjectMode mode)', 'static void'),
  \ dotnet#method('RegisterWellKnownServiceType(', 'class WellKnownServiceTypeEntry entry)', 'static void'),
  \ dotnet#method('RegisterActivatedClientType(', 'class Type type, string appUrl)', 'static void'),
  \ dotnet#method('RegisterActivatedClientType(', 'class ActivatedClientTypeEntry entry)', 'static void'),
  \ dotnet#method('RegisterWellKnownClientType(', 'class Type type, string objectUrl)', 'static void'),
  \ dotnet#method('RegisterWellKnownClientType(', 'class WellKnownClientTypeEntry entry)', 'static void'),
  \ dotnet#method('GetRegisteredActivatedServiceTypes(', ')', 'static ActivatedServiceTypeEntry[]'),
  \ dotnet#method('GetRegisteredWellKnownServiceTypes(', ')', 'static WellKnownServiceTypeEntry[]'),
  \ dotnet#method('GetRegisteredActivatedClientTypes(', ')', 'static ActivatedClientTypeEntry[]'),
  \ dotnet#method('GetRegisteredWellKnownClientTypes(', ')', 'static WellKnownClientTypeEntry[]'),
  \ dotnet#method('IsRemotelyActivatedClientType(', 'class Type svrType)', 'static ActivatedClientTypeEntry'),
  \ dotnet#method('IsRemotelyActivatedClientType(', 'string typeName, string assemblyName)', 'static ActivatedClientTypeEntry'),
  \ dotnet#method('IsWellKnownClientType(', 'class Type svrType)', 'static WellKnownClientTypeEntry'),
  \ dotnet#method('IsWellKnownClientType(', 'string typeName, string assemblyName)', 'static WellKnownClientTypeEntry'),
  \ dotnet#method('IsActivationAllowed(', 'class Type svrType)', 'static bool'),
  \ dotnet#method('RemotingConfiguration(', ')', 'static void .'),
  \ dotnet#prop('ApplicationName', 'string'),
  \ dotnet#prop('ApplicationId', 'string'),
  \ dotnet#prop('ProcessId', 'string'),
  \ dotnet#prop('CustomErrorsMode', 'CustomErrorsModes'),
  \ ])

call dotnet#class('TypeEntry', 'Object', [ 
  \ dotnet#method('TypeEntry(', ')', 'void'),
  \ dotnet#method('get_TypeName(', ')', 'string'),
  \ dotnet#method('set_TypeName(', 'string value)', 'void'),
  \ dotnet#method('get_AssemblyName(', ')', 'string'),
  \ dotnet#method('set_AssemblyName(', 'string value)', 'void'),
  \ dotnet#method('CacheRemoteAppEntry(', 'class RemoteAppEntry entry)', 'void'),
  \ dotnet#method('GetRemoteAppEntry(', ')', 'RemoteAppEntry'),
  \ dotnet#prop('TypeName', 'string'),
  \ dotnet#prop('AssemblyName', 'string'),
  \ ])

call dotnet#class('ActivatedClientTypeEntry', 'TypeEntry', [ 
  \ dotnet#method('ActivatedClientTypeEntry(', 'string typeName, string assemblyName, string appUrl)', 'void'),
  \ dotnet#method('ActivatedClientTypeEntry(', 'class Type type, string appUrl)', 'void'),
  \ dotnet#method('get_ApplicationUrl(', ')', 'string'),
  \ dotnet#method('get_ObjectType(', ') noinlining', 'Type'),
  \ dotnet#method('get_ContextAttributes(', ')', 'IContextAttribute[]'),
  \ dotnet#method('set_ContextAttributes(', 'class IContextAttribute[] value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('ApplicationUrl', 'string'),
  \ dotnet#prop('ObjectType', 'Type'),
  \ dotnet#prop('ContextAttributes', 'IContextAttribute[]'),
  \ ])

call dotnet#class('ActivatedServiceTypeEntry', 'TypeEntry', [ 
  \ dotnet#method('ActivatedServiceTypeEntry(', 'string typeName, string assemblyName)', 'void'),
  \ dotnet#method('ActivatedServiceTypeEntry(', 'class Type type)', 'void'),
  \ dotnet#method('get_ObjectType(', ') noinlining', 'Type'),
  \ dotnet#method('get_ContextAttributes(', ')', 'IContextAttribute[]'),
  \ dotnet#method('set_ContextAttributes(', 'class IContextAttribute[] value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('ObjectType', 'Type'),
  \ dotnet#prop('ContextAttributes', 'IContextAttribute[]'),
  \ ])

call dotnet#class('WellKnownClientTypeEntry', 'TypeEntry', [ 
  \ dotnet#method('WellKnownClientTypeEntry(', 'string typeName, string assemblyName, string objectUrl)', 'void'),
  \ dotnet#method('WellKnownClientTypeEntry(', 'class Type type, string objectUrl)', 'void'),
  \ dotnet#method('get_ObjectUrl(', ')', 'string'),
  \ dotnet#method('get_ObjectType(', ') noinlining', 'Type'),
  \ dotnet#method('get_ApplicationUrl(', ')', 'string'),
  \ dotnet#method('set_ApplicationUrl(', 'string value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('ObjectUrl', 'string'),
  \ dotnet#prop('ObjectType', 'Type'),
  \ dotnet#prop('ApplicationUrl', 'string'),
  \ ])

call dotnet#class('WellKnownServiceTypeEntry', 'TypeEntry', [ 
  \ dotnet#method('WellKnownServiceTypeEntry(', 'string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode)', 'void'),
  \ dotnet#method('WellKnownServiceTypeEntry(', 'class Type type, string objectUri, WellKnownObjectMode mode)', 'void'),
  \ dotnet#method('get_ObjectUri(', ')', 'string'),
  \ dotnet#method('get_Mode(', ')', 'WellKnownObjectMode'),
  \ dotnet#method('get_ObjectType(', ') noinlining', 'Type'),
  \ dotnet#method('get_ContextAttributes(', ')', 'IContextAttribute[]'),
  \ dotnet#method('set_ContextAttributes(', 'class IContextAttribute[] value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('ObjectUri', 'string'),
  \ dotnet#prop('Mode', 'WellKnownObjectMode'),
  \ dotnet#prop('ObjectType', 'Type'),
  \ dotnet#prop('ContextAttributes', 'IContextAttribute[]'),
  \ ])

call dotnet#class('RemotingException', 'SystemException', [ 
  \ dotnet#method('RemotingException(', ')', 'void'),
  \ dotnet#method('RemotingException(', 'string message)', 'void'),
  \ dotnet#method('RemotingException(', 'string message, Exception InnerException)', 'void'),
  \ dotnet#method('RemotingException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('RemotingException(', ')', 'static void .'),
  \ ])

call dotnet#class('ServerException', 'SystemException', [ 
  \ dotnet#method('ServerException(', ')', 'void'),
  \ dotnet#method('ServerException(', 'string message)', 'void'),
  \ dotnet#method('ServerException(', 'string message, Exception InnerException)', 'void'),
  \ dotnet#method('ServerException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('ServerException(', ')', 'static void .'),
  \ ])

call dotnet#class('RemotingTimeoutException', 'RemotingException', [ 
  \ dotnet#method('RemotingTimeoutException(', ')', 'void'),
  \ dotnet#method('RemotingTimeoutException(', 'string message)', 'void'),
  \ dotnet#method('RemotingTimeoutException(', 'string message, Exception InnerException)', 'void'),
  \ dotnet#method('RemotingTimeoutException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('RemotingTimeoutException(', ')', 'static void .'),
  \ ])

call dotnet#class('RemotingServices', 'Object', [ 
  \ dotnet#method('RemotingServices(', ')', 'static void .'),
  \ dotnet#method('IsTransparentProxy(', 'object proxy) internalcall', 'static bool'),
  \ dotnet#method('IsObjectOutOfContext(', 'object tp)', 'static bool'),
  \ dotnet#method('IsObjectOutOfAppDomain(', 'object tp)', 'static bool'),
  \ dotnet#method('IsClientProxy(', 'object obj)', 'static bool'),
  \ dotnet#method('IsObjectOutOfProcess(', 'object tp)', 'static bool'),
  \ dotnet#method('GetRealProxy(', 'object proxy) internalcall', 'static RealProxy'),
  \ dotnet#method('CreateTransparentProxy(', 'class RealProxy rp, RuntimeType typeToProxy, int stub, object stubData) internalcall', 'static object'),
  \ dotnet#method('CreateTransparentProxy(', 'class RealProxy rp, Type typeToProxy, int stub, object stubData)', 'static object'),
  \ dotnet#method('AllocateUninitializedObject(', 'class RuntimeType objectType) internalcall', 'static MarshalByRefObject'),
  \ dotnet#method('CallDefaulRemotingServices(', 'object o) internalcall', 'static void'),
  \ dotnet#method('AllocateUninitializedObject(', 'class Type objectType)', 'static MarshalByRefObject'),
  \ dotnet#method('AllocateInitializedObject(', 'class RuntimeType objectType) internalcall', 'static MarshalByRefObject'),
  \ dotnet#method('AllocateInitializedObject(', 'class Type objectType)', 'static MarshalByRefObject'),
  \ dotnet#method('RegisterWellKnownChannels(', ')', 'static bool'),
  \ dotnet#method('InternalSetRemoteActivationConfigured(', ')', 'static void'),
  \ dotnet#method('GetSessionIdForMethodMessage(', 'class IMethodMessage msg)', 'static string'),
  \ dotnet#method('GetLifetimeService(', 'class MarshalByRefObject obj)', 'static object'),
  \ dotnet#method('GetObjectUri(', 'class MarshalByRefObject obj)', 'static string'),
  \ dotnet#method('SetObjectUriForMarshal(', 'class MarshalByRefObject obj, string uri)', 'static void'),
  \ dotnet#method('Marshal(', 'class MarshalByRefObject Obj)', 'static ObjRef'),
  \ dotnet#method('Marshal(', 'class MarshalByRefObject Obj, string URI)', 'static ObjRef'),
  \ dotnet#method('Marshal(', 'class MarshalByRefObject Obj, string ObjURI, Type RequestedType)', 'static ObjRef'),
  \ dotnet#method('MarshalInternal(', 'class MarshalByRefObject Obj, string ObjURI, Type RequestedType)', 'static ObjRef'),
  \ dotnet#method('MarshalInternal(', 'class MarshalByRefObject Obj, string ObjURI, Type RequestedType, bool updateChannelData)', 'static ObjRef'),
  \ dotnet#method('GetObjectData(', 'object obj, SerializationInfo info, StreamingContext context)', 'static void'),
  \ dotnet#method('Unmarshal(', 'class ObjRef objectRef)', 'static object'),
  \ dotnet#method('Unmarshal(', 'class ObjRef objectRef, bool fRefine)', 'static object'),
  \ dotnet#method('Connect(', 'class Type classToProxy, string url)', 'static object'),
  \ dotnet#method('Connect(', 'class Type classToProxy, string url, object data)', 'static object'),
  \ dotnet#method('Disconnect(', 'class MarshalByRefObject obj)', 'static bool'),
  \ dotnet#method('Disconnect(', 'class MarshalByRefObject obj, bool bResetURI)', 'static bool'),
  \ dotnet#method('GetEnvoyChainForProxy(', 'class MarshalByRefObject obj)', 'static IMessageSink'),
  \ dotnet#method('GetObjRefForProxy(', 'class MarshalByRefObject obj)', 'static ObjRef'),
  \ dotnet#method('Unmarshal(', 'class Type classToProxy, string url)', 'static object'),
  \ dotnet#method('Unmarshal(', 'class Type classToProxy, string url, object data)', 'static object'),
  \ dotnet#method('Wrap(', 'class ContextBoundObject obj)', 'static object'),
  \ dotnet#method('Wrap(', 'class ContextBoundObject obj, object proxy, bool fCreateSinks)', 'static object'),
  \ dotnet#method('GetObjectUriFromFullUri(', 'string fullUri)', 'static string'),
  \ dotnet#method('Unwrap(', 'class ContextBoundObject obj) internalcall', 'static object'),
  \ dotnet#method('AlwaysUnwrap(', 'class ContextBoundObject obj) internalcall', 'static object'),
  \ dotnet#method('InternalUnmarshal(', 'class ObjRef objectRef, object proxy, bool fRefine)', 'static object'),
  \ dotnet#method('CreateEnvoyAndChannelSinks(', 'class MarshalByRefObject tpOrObject, ObjRef objectRef, [out] IMessageSink& chnlSink, [out] IMessageSink& envoySink)', 'static void'),
  \ dotnet#method('CreateEnvoyAndChannelSinks(', 'string url, object data, [out] IMessageSink& chnlSink, [out] IMessageSink& envoySink)', 'static string'),
  \ dotnet#method('SetEnvoyAndChannelSinks(', 'class Identity idObj, IMessageSink chnlSink, IMessageSink envoySink)', 'static void'),
  \ dotnet#method('ProxyCheckCast(', 'class RealProxy rp, RuntimeType castType)', 'static bool'),
  \ dotnet#method('CheckCast(', 'object objToExpand, RuntimeType type) internalcall', 'static object'),
  \ dotnet#method('CreateDelegateInvocation(', 'class WaitCallback waitDelegate, object state)', 'static GCHandle'),
  \ dotnet#method('DisposeDelegateInvocation(', 'GCHandle delegateCallToken)', 'static void'),
  \ dotnet#method('CreateProxyForDomain(', 'int32 appDomainId, int defCtxID)', 'static object'),
  \ dotnet#method('CreateDataForDomainCallback(', 'object[] args)', 'static object'),
  \ dotnet#method('CreateDataForDomain(', 'int32 appDomainId, int defCtxID)', 'static ObjRef'),
  \ dotnet#method('GetMethodBaseFromMethodMessage(', 'class IMethodMessage msg)', 'static MethodBase'),
  \ dotnet#method('InternalGetMethodBaseFromMethodMessage(', 'class IMethodMessage msg)', 'static MethodBase'),
  \ dotnet#method('IsMethodOverloaded(', 'class IMethodMessage msg)', 'static bool'),
  \ dotnet#method('IsMethodAllowedRemotely(', 'class MethodBase method)', 'static bool'),
  \ dotnet#method('IsOneWay(', 'class MethodBase method)', 'static bool'),
  \ dotnet#method('FindAsyncMethodVersion(', 'class MethodInfo method, [out] MethodInfo& beginMethod, [out] MethodInfo& endMethod)', 'static bool'),
  \ dotnet#method('GetServerTypeForUri(', 'string URI)', 'static Type'),
  \ dotnet#method('DomainUnloaded(', 'int32 domainID)', 'static void'),
  \ dotnet#method('GetServerContextForProxy(', 'object tp)', 'static int'),
  \ dotnet#method('GetServerDomainIdForProxy(', 'object tp)', 'static int32'),
  \ dotnet#method('GetServerContextAndDomainIdForProxy(', 'object tp, [out] int& contextId, [out] int32& domainId)', 'static void'),
  \ dotnet#method('GetServerContext(', 'class MarshalByRefObject obj)', 'static Context'),
  \ dotnet#method('MarshalToBuffer(', 'object o, bool crossRuntime)', 'static uint8[]'),
  \ dotnet#method('UnmarshalFromBuffer(', 'uint8[] b, bool crossRuntime)', 'static object'),
  \ dotnet#method('UnmarshalReturnMessageFromBuffer(', 'uint8[] b, IMethodCallMessage msg)', 'static object'),
  \ dotnet#method('ExecuteMessage(', 'class MarshalByRefObject target, IMethodCallMessage reqMsg)', 'static IMethodReturnMessage'),
  \ dotnet#method('DetermineDefaultQualifiedTypeName(', 'class Type type)', 'static string'),
  \ dotnet#method('GetDefaultQualifiedTypeName(', 'class RuntimeType type)', 'static string'),
  \ dotnet#method('InternalGetClrTypeNameFromQualifiedTypeName(', 'string qualifiedTypeName)', 'static string'),
  \ dotnet#method('InternalGetSoapTypeNameFromQualifiedTypeName(', 'string xmlTypeName, string xmlTypeNamespace)', 'static string'),
  \ dotnet#method('InternalGetTypeNameFromQualifiedTypeName(', 'string qualifiedTypeName)', 'static string'),
  \ dotnet#method('InternalGetTypeFromQualifiedTypeName(', 'string qualifiedTypeName, bool partialFallback)', 'static RuntimeType'),
  \ dotnet#method('InternalGetTypeFromQualifiedTypeName(', 'string qualifiedTypeName)', 'static Type'),
  \ dotnet#method('CORProfilerTrackRemoting(', ') internalcall', 'static bool'),
  \ dotnet#method('CORProfilerTrackRemotingCookie(', ') internalcall', 'static bool'),
  \ dotnet#method('CORProfilerTrackRemotingAsync(', ') internalcall', 'static bool'),
  \ dotnet#method('CORProfilerRemotingClientSendingMessage(', '[out] Guid& id, bool fIsAsync) internalcall', 'static void'),
  \ dotnet#method('CORProfilerRemotingClientReceivingReply(', 'Guid id, bool fIsAsync) internalcall', 'static void'),
  \ dotnet#method('CORProfilerRemotingServerReceivingMessage(', 'Guid id, bool fIsAsync) internalcall', 'static void'),
  \ dotnet#method('CORProfilerRemotingServerSendingReply(', '[out] Guid& id, bool fIsAsync) internalcall', 'static void'),
  \ dotnet#method('LogRemotingStage(', 'int32 stage)', 'static void'),
  \ dotnet#method('ResetInterfaceCache(', 'object proxy) internalcall', 'static void'),
  \ ])

call dotnet#class('InternalRemotingServices', 'Object', [ 
  \ dotnet#method('DebugOutChnl(', 'string s)', 'static void'),
  \ dotnet#method('RemotingTrace(', 'object[] messages)', 'static void'),
  \ dotnet#method('RemotingAssert(', 'bool condition, string message)', 'static void'),
  \ dotnet#method('SetServerIdentity(', 'class MethodCall m, object srvID)', 'static void'),
  \ dotnet#method('GetReflectionCachedData(', 'class MethodBase mi)', 'static RemotingMethodCachedData'),
  \ dotnet#method('GetReflectionCachedData(', 'class RuntimeType mi)', 'static RemotingTypeCachedData'),
  \ dotnet#method('GetReflectionCachedData(', 'class MemberInfo mi)', 'static RemotingCachedData'),
  \ dotnet#method('GetReflectionCachedData(', 'class RuntimeParameterInfo reflectionObject)', 'static RemotingCachedData'),
  \ dotnet#method('GetCachedSoapAttribute(', 'object reflectionObject)', 'static SoapAttribute'),
  \ dotnet#method('InternalRemotingServices(', ')', 'void'),
  \ ])

call dotnet#class('SoapServices', 'Object', [ 
  \ dotnet#method('SoapServices(', ')', 'void'),
  \ dotnet#method('RegisterInteropXmlElement(', 'string xmlElement, string xmlNamespace, Type type)', 'static void'),
  \ dotnet#method('RegisterInteropXmlType(', 'string xmlType, string xmlTypeNamespace, Type type)', 'static void'),
  \ dotnet#method('PreLoad(', 'class Type type)', 'static void'),
  \ dotnet#method('PreLoad(', 'class Assembly assembly)', 'static void'),
  \ dotnet#method('GetInteropTypeFromXmlElement(', 'string xmlElement, string xmlNamespace)', 'static Type'),
  \ dotnet#method('GetInteropTypeFromXmlType(', 'string xmlType, string xmlTypeNamespace)', 'static Type'),
  \ dotnet#method('GetInteropFieldTypeAndNameFromXmlElement(', 'class Type containingType, string xmlElement, string xmlNamespace, [out] Type& type, [out] string& name)', 'static void'),
  \ dotnet#method('GetInteropFieldTypeAndNameFromXmlAttribute(', 'class Type containingType, string xmlAttribute, string xmlNamespace, [out] Type& type, [out] string& name)', 'static void'),
  \ dotnet#method('GetXmlElementForInteropType(', 'class Type type, [out] string& xmlElement, [out] string& xmlNamespace)', 'static bool'),
  \ dotnet#method('GetXmlTypeForInteropType(', 'class Type type, [out] string& xmlType, [out] string& xmlTypeNamespace)', 'static bool'),
  \ dotnet#method('GetXmlNamespaceForMethodCall(', 'class MethodBase mb)', 'static string'),
  \ dotnet#method('GetXmlNamespaceForMethodResponse(', 'class MethodBase mb)', 'static string'),
  \ dotnet#method('RegisterSoapActionForMethodBase(', 'class MethodBase mb)', 'static void'),
  \ dotnet#method('RegisterSoapActionForMethodBase(', 'class MethodBase mb, string soapAction)', 'static void'),
  \ dotnet#method('GetSoapActionFromMethodBase(', 'class MethodBase mb)', 'static string'),
  \ dotnet#method('IsSoapActionValidForMethodBase(', 'string soapAction, MethodBase mb)', 'static bool'),
  \ dotnet#method('GetTypeAndMethodNameFromSoapAction(', 'string soapAction, [out] string& typeName, [out] string& methodName)', 'static bool'),
  \ dotnet#method('get_XmlNsForClrType(', ')', 'static string'),
  \ dotnet#method('get_XmlNsForClrTypeWithAssembly(', ')', 'static string'),
  \ dotnet#method('get_XmlNsForClrTypeWithNs(', ')', 'static string'),
  \ dotnet#method('get_XmlNsForClrTypeWithNsAndAssembly(', ')', 'static string'),
  \ dotnet#method('IsClrTypeNamespace(', 'string namespaceString)', 'static bool'),
  \ dotnet#method('CodeXmlNamespaceForClrTypeNamespace(', 'string typeNamespace, string assemblyName)', 'static string'),
  \ dotnet#method('DecodeXmlNamespaceForClrTypeNamespace(', 'string inNamespace, [out] string& typeNamespace, [out] string& assemblyName)', 'static bool'),
  \ dotnet#method('UriEncode(', 'string value, StringBuilder sb)', 'static void'),
  \ dotnet#method('UriDecode(', 'string value)', 'static string'),
  \ dotnet#method('SoapServices(', ')', 'static void .'),
  \ dotnet#prop('XmlNsForClrType', 'string'),
  \ dotnet#prop('XmlNsForClrTypeWithAssembly', 'string'),
  \ dotnet#prop('XmlNsForClrTypeWithNs', 'string'),
  \ dotnet#prop('XmlNsForClrTypeWithNsAndAssembly', 'string'),
  \ ])

call dotnet#class('ObjectHandle', 'MarshalByRefObject', [ 
  \ dotnet#method('ObjectHandle(', ')', 'void'),
  \ dotnet#method('ObjectHandle(', 'object o)', 'void'),
  \ dotnet#method('Unwrap(', ')', 'object'),
  \ dotnet#method('InitializeLifetimeService(', ')', 'object'),
  \ ])

