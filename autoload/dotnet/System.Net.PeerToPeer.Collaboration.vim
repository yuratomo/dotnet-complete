call dotnet#namespace('System.Net.PeerToPeer.Collaboration')

call dotnet#class('CreateContactCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_PeerContact(', ')', 'PeerContact'),
  \ dotnet#prop('PeerContact', 'PeerContact'),
  \ ])

call dotnet#class('SubscriptionListChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_PeerEndPoint(', ')', 'PeerEndPoint'),
  \ dotnet#method('get_PeerContact(', ')', 'PeerContact'),
  \ dotnet#method('get_PeerChangeType(', ')', 'PeerChangeType'),
  \ dotnet#prop('PeerEndPoint', 'PeerEndPoint'),
  \ dotnet#prop('PeerContact', 'PeerContact'),
  \ dotnet#prop('PeerChangeType', 'PeerChangeType'),
  \ ])

call dotnet#class('ContactManager', 'Object', [ 
  \ dotnet#method('get_LocalContact(', ')', 'static'),
  \ dotnet#method('get_SynchronizingObject(', ')', 'ISynchronizeInvoke'),
  \ dotnet#method('set_SynchronizingObject(', 'class ISynchronizeInvoke value)', 'void'),
  \ dotnet#method('add_SubscriptionListChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SubscriptionListChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_NameChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_NameChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_PresenceChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PresenceChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_ApplicationChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ApplicationChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_ObjectChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ObjectChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('GetContacts(', ')', 'PeerContactCollection'),
  \ dotnet#method('GetContact(', 'class PeerName peerName)', 'PeerContact'),
  \ dotnet#method('CreateContact(', 'class PeerNearMe peerNearMe)', 'PeerContact'),
  \ dotnet#method('add_CreateContactCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CreateContactCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('CreateContactAsync(', 'class PeerNearMe peerNearMe, object userToken)', 'void'),
  \ dotnet#method('AddContact(', 'class PeerContact peerContact)', 'void'),
  \ dotnet#method('DeleteContact(', 'class PeerContact peerContact)', 'void'),
  \ dotnet#method('DeleteContact(', 'class PeerName peerName)', 'void'),
  \ dotnet#method('UpdateContact(', 'class PeerContact peerContact)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('ContactManager(', ')', 'void'),
  \ dotnet#event('SubscriptionListChanged', 'EventHandler'),
  \ dotnet#event('NameChanged', 'EventHandler'),
  \ dotnet#event('PresenceChanged', 'EventHandler'),
  \ dotnet#event('ApplicationChanged', 'EventHandler'),
  \ dotnet#event('ObjectChanged', 'EventHandler'),
  \ dotnet#event('CreateContactCompleted', 'EventHandler'),
  \ dotnet#prop('LocalContact', 'PeerContact'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ ])

call dotnet#class('Peer', 'Object', [ 
  \ dotnet#method('get_PeerEndPoints(', ')', ''),
  \ dotnet#method('get_IsOnline(', ')', 'bool'),
  \ dotnet#method('get_SynchronizingObject(', ')', 'ISynchronizeInvoke'),
  \ dotnet#method('set_SynchronizingObject(', 'class ISynchronizeInvoke value)', 'void'),
  \ dotnet#method('Peer(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetPresenceInfo(', 'class PeerEndPoint peerEndPoint)', 'PeerPresenceInfo'),
  \ dotnet#method('GetObjects(', ')', 'PeerObjectCollection'),
  \ dotnet#method('GetObjects(', 'Guid objectId)', 'PeerObjectCollection'),
  \ dotnet#method('Invite(', ')', 'abstract'),
  \ dotnet#method('Invite(', 'class PeerApplication applicationToInvite, string message, uint8[] invitationData)', 'abstract'),
  \ dotnet#method('add_InviteCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_InviteCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('InviteAsync(', 'object userToken)', 'abstract void'),
  \ dotnet#method('InviteAsync(', 'class PeerApplication applicationToInvite, string message, uint8[] invitationData, object userToken)', 'abstract void'),
  \ dotnet#method('OnInviteCompleted(', 'class InviteCompletedEventArgs e)', 'void'),
  \ dotnet#method('InviteAsyncCancel(', 'object userToken)', 'void'),
  \ dotnet#method('Equals(', 'class Peer other)', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Peer(', ')', 'void'),
  \ dotnet#method('Peer(', ')', 'static void .'),
  \ dotnet#event('InviteCompleted', 'EventHandler'),
  \ dotnet#prop('PeerEndPoints', 'PeerEndPointCollection'),
  \ dotnet#prop('IsOnline', 'bool'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ ])

call dotnet#class('PeerContact', 'Peer', [ 
  \ dotnet#method('get_PeerName(', ')', 'PeerName'),
  \ dotnet#method('get_Nickname(', ')', 'string'),
  \ dotnet#method('set_Nickname(', 'string value)', 'void'),
  \ dotnet#method('get_DisplayName(', ')', 'string'),
  \ dotnet#method('set_DisplayName(', 'string value)', 'void'),
  \ dotnet#method('get_EmailAddress(', ')', 'MailAddress'),
  \ dotnet#method('set_EmailAddress(', 'class MailAddress value)', 'void'),
  \ dotnet#method('get_SubscribeAllowed(', ')', 'SubscriptionType'),
  \ dotnet#method('set_SubscribeAllowed(', 'SubscriptionType value)', 'void'),
  \ dotnet#method('get_IsSubscribed(', ')', 'bool'),
  \ dotnet#method('get_Credentials(', ')', 'X509Certificate2'),
  \ dotnet#method('get_PeerEndPoints(', ')', ''),
  \ dotnet#method('PeerContact(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('ToXml(', ')', 'string'),
  \ dotnet#method('FromXml(', 'string peerContactXml)', 'static PeerContact'),
  \ dotnet#method('Subscribe(', ')', 'void'),
  \ dotnet#method('add_SubscribeCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SubscribeCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('SubscribeAsync(', 'object userToken)', 'void'),
  \ dotnet#method('OnSubscribeCompleted(', 'class SubscribeCompletedEventArgs e)', 'void'),
  \ dotnet#method('Unsubscribe(', ')', 'void'),
  \ dotnet#method('Invite(', ')', 'PeerInvitationResponse'),
  \ dotnet#method('Invite(', 'class PeerApplication applicationToInvite, string message, uint8[] invitationData)', 'PeerInvitationResponse'),
  \ dotnet#method('Invite(', 'class PeerEndPoint peerEndPoint)', 'PeerInvitationResponse'),
  \ dotnet#method('Invite(', 'class PeerEndPoint peerEndPoint, PeerApplication applicationToInvite, string message, uint8[] invitationData)', 'PeerInvitationResponse'),
  \ dotnet#method('InviteAsync(', 'object userToken)', 'void'),
  \ dotnet#method('InviteAsync(', 'class PeerApplication applicationToInvite, string message, uint8[] invitationData, object userToken)', 'void'),
  \ dotnet#method('InviteAsync(', 'class PeerEndPoint peerEndPoint, object userToken)', 'void'),
  \ dotnet#method('InviteAsync(', 'class PeerEndPoint peerEndPoint, string message, uint8[] invitationData, PeerApplication applicationToInvite, object userToken)', 'void'),
  \ dotnet#method('GetApplications(', ')', 'PeerApplicationCollection'),
  \ dotnet#method('GetApplications(', 'Guid applicationId)', 'PeerApplicationCollection'),
  \ dotnet#method('GetApplications(', 'class PeerEndPoint peerEndPoint)', 'PeerApplicationCollection'),
  \ dotnet#method('GetApplications(', 'class PeerEndPoint peerEndPoint, Guid applicationId)', 'PeerApplicationCollection'),
  \ dotnet#method('GetObjects(', 'class PeerEndPoint peerEndPoint)', 'PeerObjectCollection'),
  \ dotnet#method('GetObjects(', 'class PeerEndPoint peerEndPoint, Guid objectId)', 'PeerObjectCollection'),
  \ dotnet#method('add_ApplicationChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ApplicationChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnApplicationChanged(', 'class ApplicationChangedEventArgs appChangedArgs)', 'void'),
  \ dotnet#method('add_ObjectChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ObjectChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnObjectChanged(', 'class ObjectChangedEventArgs objChangedArgs)', 'void'),
  \ dotnet#method('add_PresenceChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PresenceChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPresenceChanged(', 'class PresenceChangedEventArgs presenceChangedArgs)', 'void'),
  \ dotnet#method('Equals(', 'class PeerContact other)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'object objA, object objB)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('set_PeerName(', 'class PeerName value)', 'void'),
  \ dotnet#method('set_IsSubscribed(', 'bool value)', 'void'),
  \ dotnet#method('set_Credentials(', 'class X509Certificate2 value)', 'void'),
  \ dotnet#method('PeerContact(', ')', 'static void .'),
  \ dotnet#method('PeerContact(', ')', 'void'),
  \ dotnet#event('SubscribeCompleted', 'EventHandler'),
  \ dotnet#event('ApplicationChanged', 'EventHandler'),
  \ dotnet#event('ObjectChanged', 'EventHandler'),
  \ dotnet#event('PresenceChanged', 'EventHandler'),
  \ dotnet#prop('PeerName', 'PeerName'),
  \ dotnet#prop('Nickname', 'string'),
  \ dotnet#prop('DisplayName', 'string'),
  \ dotnet#prop('EmailAddress', 'MailAddress'),
  \ dotnet#prop('SubscribeAllowed', 'SubscriptionType'),
  \ dotnet#prop('IsSubscribed', 'bool'),
  \ dotnet#prop('Credentials', 'X509Certificate2'),
  \ dotnet#prop('PeerEndPoints', 'PeerEndPointCollection'),
  \ ])

call dotnet#class('ObjectChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_PeerEndPoint(', ')', 'PeerEndPoint'),
  \ dotnet#method('get_PeerContact(', ')', 'PeerContact'),
  \ dotnet#method('get_PeerChangeType(', ')', 'PeerChangeType'),
  \ dotnet#method('get_PeerObject(', ')', 'PeerObject'),
  \ dotnet#prop('PeerEndPoint', 'PeerEndPoint'),
  \ dotnet#prop('PeerContact', 'PeerContact'),
  \ dotnet#prop('PeerChangeType', 'PeerChangeType'),
  \ dotnet#prop('PeerObject', 'PeerObject'),
  \ ])

call dotnet#class('PresenceChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_PeerEndPoint(', ')', 'PeerEndPoint'),
  \ dotnet#method('get_PeerContact(', ')', 'PeerContact'),
  \ dotnet#method('get_PeerChangeType(', ')', 'PeerChangeType'),
  \ dotnet#method('get_PeerPresenceInfo(', ')', 'PeerPresenceInfo'),
  \ dotnet#prop('PeerEndPoint', 'PeerEndPoint'),
  \ dotnet#prop('PeerContact', 'PeerContact'),
  \ dotnet#prop('PeerChangeType', 'PeerChangeType'),
  \ dotnet#prop('PeerPresenceInfo', 'PeerPresenceInfo'),
  \ ])

call dotnet#class('SubscribeCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_PeerNearMe(', ')', 'PeerNearMe'),
  \ dotnet#method('get_PeerContact(', ')', 'PeerContact'),
  \ dotnet#prop('PeerNearMe', 'PeerNearMe'),
  \ dotnet#prop('PeerContact', 'PeerContact'),
  \ ])

call dotnet#class('RefreshDataCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_PeerEndPoint(', ')', 'PeerEndPoint'),
  \ dotnet#prop('PeerEndPoint', 'PeerEndPoint'),
  \ ])

call dotnet#class('InviteCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_InviteResponse(', ')', 'PeerInvitationResponse'),
  \ dotnet#prop('InviteResponse', 'PeerInvitationResponse'),
  \ ])

call dotnet#class('PeerApplication', 'Object', [ 
  \ dotnet#method('PeerApplication(', ')', 'void'),
  \ dotnet#method('PeerApplication(', 'Guid id, string description, uint8[] data, string path, string commandLineArgs, PeerScope peerScope)', 'void'),
  \ dotnet#method('PeerApplication(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_Id(', ')', 'Guid'),
  \ dotnet#method('set_Id(', 'Guid value)', 'void'),
  \ dotnet#method('get_Data(', ')', 'uint8[]'),
  \ dotnet#method('set_Data(', 'uint8[] value)', 'void'),
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#method('set_Description(', 'string value)', 'void'),
  \ dotnet#method('get_Path(', ')', 'string'),
  \ dotnet#method('set_Path(', 'string value)', 'void'),
  \ dotnet#method('get_CommandLineArgs(', ')', 'string'),
  \ dotnet#method('set_CommandLineArgs(', 'string value)', 'void'),
  \ dotnet#method('get_PeerScope(', ')', 'PeerScope'),
  \ dotnet#method('set_PeerScope(', 'PeerScope value)', 'void'),
  \ dotnet#method('get_SynchronizingObject(', ')', 'ISynchronizeInvoke'),
  \ dotnet#method('set_SynchronizingObject(', 'class ISynchronizeInvoke value)', 'void'),
  \ dotnet#method('add_ApplicationChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ApplicationChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnApplicationChanged(', 'class ApplicationChangedEventArgs appChangedArgs)', 'void'),
  \ dotnet#method('Equals(', 'class PeerApplication other)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'object objA, object objB)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('PeerApplication(', ')', 'static void .'),
  \ dotnet#event('ApplicationChanged', 'EventHandler'),
  \ dotnet#prop('Id', 'Guid'),
  \ dotnet#prop('Data', 'uint8[]'),
  \ dotnet#prop('Description', 'string'),
  \ dotnet#prop('Path', 'string'),
  \ dotnet#prop('CommandLineArgs', 'string'),
  \ dotnet#prop('PeerScope', 'PeerScope'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ ])

call dotnet#class('PeerApplicationCollection', 'Collection', [ 
  \ dotnet#method('SetItem(', 'int32 index, PeerApplication item)', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, PeerApplication item)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('PeerApplicationCollection(', ')', 'void'),
  \ ])

call dotnet#class('PeerApplicationLaunchInfo', 'Object', [ 
  \ dotnet#method('get_PeerContact(', ')', 'PeerContact'),
  \ dotnet#method('get_PeerEndPoint(', ')', 'PeerEndPoint'),
  \ dotnet#method('get_PeerApplication(', ')', 'PeerApplication'),
  \ dotnet#method('get_Data(', ')', 'uint8[]'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('PeerApplicationLaunchInfo(', ')', 'void'),
  \ dotnet#method('set_PeerContact(', 'class PeerContact value)', 'void'),
  \ dotnet#method('set_PeerEndPoint(', 'class PeerEndPoint value)', 'void'),
  \ dotnet#method('set_PeerApplication(', 'class PeerApplication value)', 'void'),
  \ dotnet#method('set_Data(', 'uint8[] value)', 'void'),
  \ dotnet#method('set_Message(', 'string value)', 'void'),
  \ dotnet#prop('PeerContact', 'PeerContact'),
  \ dotnet#prop('PeerEndPoint', 'PeerEndPoint'),
  \ dotnet#prop('PeerApplication', 'PeerApplication'),
  \ dotnet#prop('Data', 'uint8[]'),
  \ dotnet#prop('Message', 'string'),
  \ ])

call dotnet#class('PeerCollaboration', 'Object', [ 
  \ dotnet#method('get_LocalPresenceInfo(', ')', 'static'),
  \ dotnet#method('set_LocalPresenceInfo(', 'class PeerPresenceInfo value)', 'static void'),
  \ dotnet#method('get_LocalEndPointName(', ')', 'static string'),
  \ dotnet#method('set_LocalEndPointName(', 'string value)', 'static void'),
  \ dotnet#method('get_SignInScope(', ')', 'static'),
  \ dotnet#method('get_ContactManager(', ')', 'static'),
  \ dotnet#method('get_ApplicationLaunchInfo(', ')', 'static'),
  \ dotnet#method('get_SynchronizingObject(', ')', 'static'),
  \ dotnet#method('set_SynchronizingObject(', 'class ISynchronizeInvoke value)', 'static void'),
  \ dotnet#method('SignIn(', 'PeerScope peerScope)', 'static void'),
  \ dotnet#method('SignOut(', 'PeerScope peerScope)', 'static void'),
  \ dotnet#method('GetPeersNearMe(', ')', 'static PeerNearMeCollection'),
  \ dotnet#method('RegisterApplication(', 'class PeerApplication application, PeerApplicationRegistrationType type)', 'static void'),
  \ dotnet#method('UnregisterApplication(', 'class PeerApplication application, PeerApplicationRegistrationType type)', 'static void'),
  \ dotnet#method('GetLocalRegisteredApplications(', ')', 'static PeerApplicationCollection'),
  \ dotnet#method('GetLocalRegisteredApplications(', 'PeerApplicationRegistrationType type)', 'static PeerApplicationCollection'),
  \ dotnet#method('SetObject(', 'class PeerObject peerObject)', 'static void'),
  \ dotnet#method('DeleteObject(', 'class PeerObject peerObject)', 'static void'),
  \ dotnet#method('GetLocalSetObjects(', ')', 'static PeerObjectCollection'),
  \ dotnet#method('add_LocalNameChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_LocalNameChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_LocalPresenceChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_LocalPresenceChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_LocalObjectChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_LocalObjectChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_LocalApplicationChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_LocalApplicationChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#event('LocalNameChanged', 'EventHandler'),
  \ dotnet#event('LocalPresenceChanged', 'EventHandler'),
  \ dotnet#event('LocalObjectChanged', 'EventHandler'),
  \ dotnet#event('LocalApplicationChanged', 'EventHandler'),
  \ dotnet#prop('LocalPresenceInfo', 'PeerPresenceInfo'),
  \ dotnet#prop('LocalEndPointName', 'string'),
  \ dotnet#prop('SignInScope', 'PeerScope'),
  \ dotnet#prop('ContactManager', 'ContactManager'),
  \ dotnet#prop('ApplicationLaunchInfo', 'PeerApplicationLaunchInfo'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ ])

call dotnet#class('PeerCollaborationPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('PeerCollaborationPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ ])

call dotnet#class('PeerCollaborationPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('PeerCollaborationPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('FromXml(', 'class SecurityElement e)', 'void'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('PeerCollaborationPermission(', ')', 'static void .'),
  \ ])

call dotnet#class('ApplicationChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_PeerEndPoint(', ')', 'PeerEndPoint'),
  \ dotnet#method('get_PeerContact(', ')', 'PeerContact'),
  \ dotnet#method('get_PeerChangeType(', ')', 'PeerChangeType'),
  \ dotnet#method('get_PeerApplication(', ')', 'PeerApplication'),
  \ dotnet#prop('PeerEndPoint', 'PeerEndPoint'),
  \ dotnet#prop('PeerContact', 'PeerContact'),
  \ dotnet#prop('PeerChangeType', 'PeerChangeType'),
  \ dotnet#prop('PeerApplication', 'PeerApplication'),
  \ ])

call dotnet#class('PeerContactCollection', 'Collection', [ 
  \ dotnet#method('SetItem(', 'int32 index, PeerContact item)', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, PeerContact item)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('PeerContactCollection(', ')', 'void'),
  \ ])

call dotnet#class('NameChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_PeerEndPoint(', ')', 'PeerEndPoint'),
  \ dotnet#method('get_PeerContact(', ')', 'PeerContact'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#prop('PeerEndPoint', 'PeerEndPoint'),
  \ dotnet#prop('PeerContact', 'PeerContact'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('PeerEndPoint', 'Object', [ 
  \ dotnet#method('PeerEndPoint(', ')', 'void'),
  \ dotnet#method('PeerEndPoint(', 'class IPEndPoint endPoint)', 'void'),
  \ dotnet#method('PeerEndPoint(', 'class IPEndPoint endPoint, string endPointName)', 'void'),
  \ dotnet#method('PeerEndPoint(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_EndPoint(', ')', 'IPEndPoint'),
  \ dotnet#method('set_EndPoint(', 'class IPEndPoint value)', 'void'),
  \ dotnet#method('get_SynchronizingObject(', ')', 'ISynchronizeInvoke'),
  \ dotnet#method('set_SynchronizingObject(', 'class ISynchronizeInvoke value)', 'void'),
  \ dotnet#method('add_NameChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_NameChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnNameChanged(', 'class NameChangedEventArgs nameChangedArgs)', 'void'),
  \ dotnet#method('Equals(', 'class PeerEndPoint other)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'object objA, object objB)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#event('NameChanged', 'EventHandler'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('EndPoint', 'IPEndPoint'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ ])

call dotnet#class('PeerEndPointCollection', 'Collection', [ 
  \ dotnet#method('SetItem(', 'int32 index, PeerEndPoint item)', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, PeerEndPoint item)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Equals(', 'class PeerEndPointCollection other)', 'bool'),
  \ dotnet#method('PeerEndPointCollection(', ')', 'void'),
  \ ])

call dotnet#class('PeerInvitationResponse', 'Object', [ 
  \ dotnet#method('get_PeerInvitationResponseType(', ')', 'PeerInvitationResponseType'),
  \ dotnet#method('PeerInvitationResponse(', ')', 'void'),
  \ dotnet#method('set_PeerInvitationResponseType(', 'PeerInvitationResponseType value)', 'void'),
  \ dotnet#prop('PeerInvitationResponseType', 'PeerInvitationResponseType'),
  \ ])

call dotnet#class('PeerNearMeChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_PeerNearMe(', ')', 'PeerNearMe'),
  \ dotnet#method('get_PeerChangeType(', ')', 'PeerChangeType'),
  \ dotnet#prop('PeerNearMe', 'PeerNearMe'),
  \ dotnet#prop('PeerChangeType', 'PeerChangeType'),
  \ ])

call dotnet#class('PeerNearMe', 'Peer', [ 
  \ dotnet#method('PeerNearMe(', ')', 'void'),
  \ dotnet#method('PeerNearMe(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_Nickname(', ')', 'string'),
  \ dotnet#method('AddToContactManager(', ')', 'PeerContact'),
  \ dotnet#method('AddToContactManager(', 'string displayName, string nickname, MailAddress emailAddress)', 'PeerContact'),
  \ dotnet#method('CreateFromPeerEndPoint(', 'class PeerEndPoint peerEndPoint)', 'static PeerNearMe'),
  \ dotnet#method('RefreshData(', ')', 'void'),
  \ dotnet#method('InternalRefreshData(', 'object state)', 'famorassem void'),
  \ dotnet#method('add_RefreshDataCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_RefreshDataCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('RefreshDataAsync(', 'object userToken)', 'void'),
  \ dotnet#method('OnRefreshDataCompleted(', 'class RefreshDataCompletedEventArgs e)', 'void'),
  \ dotnet#method('add_PeerNearMeChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_PeerNearMeChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('Invite(', 'class PeerApplication applicationToInvite, string message, uint8[] invitationData)', 'PeerInvitationResponse'),
  \ dotnet#method('Invite(', ')', 'PeerInvitationResponse'),
  \ dotnet#method('InviteAsync(', 'object userToken)', 'void'),
  \ dotnet#method('InviteAsync(', 'class PeerApplication applicationToInvite, string message, uint8[] invitationData, object userToken)', 'void'),
  \ dotnet#method('Equals(', 'class PeerNearMe other)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'object objA, object objB)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('PeerNearMe(', ')', 'static void .'),
  \ dotnet#method('set_Nickname(', 'string value)', 'void'),
  \ dotnet#event('RefreshDataCompleted', 'EventHandler'),
  \ dotnet#event('PeerNearMeChanged', 'EventHandler'),
  \ dotnet#prop('Nickname', 'string'),
  \ ])

call dotnet#class('PeerNearMeCollection', 'Collection', [ 
  \ dotnet#method('SetItem(', 'int32 index, PeerNearMe item)', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, PeerNearMe item)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('PeerNearMeCollection(', ')', 'void'),
  \ ])

call dotnet#class('PeerObject', 'Object', [ 
  \ dotnet#method('PeerObject(', ')', 'void'),
  \ dotnet#method('PeerObject(', 'Guid Id, uint8[] data, PeerScope peerScope)', 'void'),
  \ dotnet#method('PeerObject(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_Id(', ')', 'Guid'),
  \ dotnet#method('set_Id(', 'Guid value)', 'void'),
  \ dotnet#method('get_Data(', ')', 'uint8[]'),
  \ dotnet#method('set_Data(', 'uint8[] value)', 'void'),
  \ dotnet#method('get_PeerScope(', ')', 'PeerScope'),
  \ dotnet#method('set_PeerScope(', 'PeerScope value)', 'void'),
  \ dotnet#method('get_SynchronizingObject(', ')', 'ISynchronizeInvoke'),
  \ dotnet#method('set_SynchronizingObject(', 'class ISynchronizeInvoke value)', 'void'),
  \ dotnet#method('add_ObjectChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ObjectChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnObjectChanged(', 'class ObjectChangedEventArgs objChangedArgs)', 'void'),
  \ dotnet#method('Equals(', 'class PeerObject other)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'object objA, object objB)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('PeerObject(', ')', 'static void .'),
  \ dotnet#event('ObjectChanged', 'EventHandler'),
  \ dotnet#prop('Id', 'Guid'),
  \ dotnet#prop('Data', 'uint8[]'),
  \ dotnet#prop('PeerScope', 'PeerScope'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ ])

call dotnet#class('PeerObjectCollection', 'Collection', [ 
  \ dotnet#method('SetItem(', 'int32 index, PeerObject item)', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, PeerObject item)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('PeerObjectCollection(', ')', 'void'),
  \ ])

call dotnet#class('PeerPresenceInfo', 'Object', [ 
  \ dotnet#method('PeerPresenceInfo(', ')', 'void'),
  \ dotnet#method('PeerPresenceInfo(', 'PeerPresenceStatus presenceStatus, string description)', 'void'),
  \ dotnet#method('get_PresenceStatus(', ')', 'PeerPresenceStatus'),
  \ dotnet#method('set_PresenceStatus(', 'PeerPresenceStatus value)', 'void'),
  \ dotnet#method('get_DescriptiveText(', ')', 'string'),
  \ dotnet#method('set_DescriptiveText(', 'string value)', 'void'),
  \ dotnet#prop('PresenceStatus', 'PeerPresenceStatus'),
  \ dotnet#prop('DescriptiveText', 'string'),
  \ ])

