call dotnet#namespace('System.Resources')

call dotnet#class('MissingManifestResourceException', 'SystemException', [ 
  \ dotnet#method('MissingManifestResourceException(', ')', 'void'),
  \ dotnet#method('MissingManifestResourceException(', 'string message)', 'void'),
  \ dotnet#method('MissingManifestResourceException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('MissingManifestResourceException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('MissingSatelliteAssemblyException', 'SystemException', [ 
  \ dotnet#method('MissingSatelliteAssemblyException(', ')', 'void'),
  \ dotnet#method('MissingSatelliteAssemblyException(', 'string message)', 'void'),
  \ dotnet#method('MissingSatelliteAssemblyException(', 'string message, string cultureName)', 'void'),
  \ dotnet#method('MissingSatelliteAssemblyException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('MissingSatelliteAssemblyException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_CultureName(', ')', 'string'),
  \ dotnet#prop('CultureName', 'string'),
  \ ])

call dotnet#class('NeutralResourcesLanguageAttribute', 'Attribute', [ 
  \ dotnet#method('NeutralResourcesLanguageAttribute(', 'string cultureName)', 'void'),
  \ dotnet#method('NeutralResourcesLanguageAttribute(', 'string cultureName, UltimateResourceFallbackLocation location)', 'void'),
  \ dotnet#method('get_CultureName(', ')', 'string'),
  \ dotnet#method('get_Location(', ')', 'UltimateResourceFallbackLocation'),
  \ dotnet#prop('CultureName', 'string'),
  \ dotnet#prop('Location', 'UltimateResourceFallbackLocation'),
  \ ])

call dotnet#class('ResourceManager', 'Object', [ 
  \ dotnet#method('ResourceManager(', 'class ResourceManager rm)', 'void'),
  \ dotnet#method('get_ModuleDir(', ')', 'string'),
  \ dotnet#method('get_LocationInfo(', ')', 'Type'),
  \ dotnet#method('get_UserResourceSet(', ')', 'Type'),
  \ dotnet#method('get_BaseNameField(', ')', 'string'),
  \ dotnet#method('get_NeutralResourcesCulture(', ')', '.method'),
  \ dotnet#method('set_NeutralResourcesCulture(', 'class CultureInfo value)', 'void'),
  \ dotnet#method('GetResourceFileName(', 'class CultureInfo culture)', 'string'),
  \ dotnet#method('get_LookedForSatelliteContractVersion(', ')', 'bool'),
  \ dotnet#method('set_LookedForSatelliteContractVersion(', 'bool value)', 'void'),
  \ dotnet#method('get_SatelliteContractVersion(', ')', '.method'),
  \ dotnet#method('set_SatelliteContractVersion(', 'class Version value)', 'void'),
  \ dotnet#method('ObtainSatelliteContractVersion(', 'class Assembly a)', 'Version'),
  \ dotnet#method('get_FallbackLoc(', ')', '.method'),
  \ dotnet#method('set_FallbackLoc(', 'UltimateResourceFallbackLocation value)', 'void'),
  \ dotnet#method('get_CallingAssembly(', ')', '.method'),
  \ dotnet#method('get_MainAssembly(', ')', '.method'),
  \ dotnet#method('get_BaseName(', ')', 'string'),
  \ dotnet#method('TryLookingForSatellite(', 'class CultureInfo lookForCulture)', 'bool'),
  \ dotnet#prop('ModuleDir', 'string'),
  \ dotnet#prop('LocationInfo', 'Type'),
  \ dotnet#prop('UserResourceSet', 'Type'),
  \ dotnet#prop('BaseNameField', 'string'),
  \ dotnet#prop('NeutralResourcesCulture', 'CultureInfo'),
  \ dotnet#prop('LookedForSatelliteContractVersion', 'bool'),
  \ dotnet#prop('SatelliteContractVersion', 'Version'),
  \ dotnet#prop('FallbackLoc', 'UltimateResourceFallbackLocation'),
  \ dotnet#prop('CallingAssembly', 'RuntimeAssembly'),
  \ dotnet#prop('MainAssembly', 'RuntimeAssembly'),
  \ dotnet#prop('BaseName', 'string'),
  \ dotnet#field('BaseNameField', 'string'),
  \ dotnet#field('ResourceSets', 'Hashtable'),
  \ dotnet#field('MainAssembly', 'Assembly'),
  \ dotnet#method('ResourceManager(', ')', 'void'),
  \ dotnet#method('ResourceManager(', 'string baseName, Assembly assembly) noinlining', 'void'),
  \ dotnet#method('ResourceManager(', 'string baseName, Assembly assembly, Type usingResourceSet) noinlining', 'void'),
  \ dotnet#method('ResourceManager(', 'class Type resourceSource) noinlining', 'void'),
  \ dotnet#method('get_BaseName(', ')', 'string'),
  \ dotnet#method('get_IgnoreCase(', ')', 'bool'),
  \ dotnet#method('set_IgnoreCase(', 'bool value)', 'void'),
  \ dotnet#method('get_ResourceSetType(', ')', 'Type'),
  \ dotnet#method('get_FallbackLocation(', ')', 'UltimateResourceFallbackLocation'),
  \ dotnet#method('set_FallbackLocation(', 'UltimateResourceFallbackLocation value)', 'void'),
  \ dotnet#method('ReleaseAllResources(', ')', 'void'),
  \ dotnet#method('CreateFileBasedResourceManager(', 'string baseName, string resourceDir, Type usingResourceSet)', 'static ResourceManager'),
  \ dotnet#method('GetResourceFileName(', 'class CultureInfo culture)', 'string'),
  \ dotnet#method('GetResourceSet(', 'class CultureInfo culture, bool createIfNotExists, bool tryParents) noinlining', ''),
  \ dotnet#method('InternalGetResourceSet(', 'class CultureInfo culture, bool createIfNotExists, bool tryParents) noinlining', 'family'),
  \ dotnet#method('GetSatelliteContractVersion(', 'class Assembly a)', 'static Version'),
  \ dotnet#method('GetNeutralResourcesLanguage(', 'class Assembly a)', 'static CultureInfo'),
  \ dotnet#method('CompareNames(', 'string asmTypeName1, string typeName2, AssemblyName asmName2)', 'static bool'),
  \ dotnet#method('GetString(', 'string name)', 'string'),
  \ dotnet#method('GetString(', 'string name, CultureInfo culture)', 'string'),
  \ dotnet#method('GetObject(', 'string name)', 'object'),
  \ dotnet#method('GetObject(', 'string name, CultureInfo culture)', 'object'),
  \ dotnet#method('GetStream(', 'string name)', 'UnmanagedMemoryStream'),
  \ dotnet#method('GetStream(', 'string name, CultureInfo culture)', 'UnmanagedMemoryStream'),
  \ dotnet#method('ResourceManager(', ')', 'static void .'),
  \ dotnet#prop('BaseName', 'string'),
  \ dotnet#prop('IgnoreCase', 'bool'),
  \ dotnet#prop('ResourceSetType', 'Type'),
  \ dotnet#prop('FallbackLocation', 'UltimateResourceFallbackLocation'),
  \ ])

call dotnet#class('ResourceReader', 'Object', [ 
  \ dotnet#method('get_ObjectReader(', ')', '.method'),
  \ dotnet#method('set_ObjectReader(', 'class ObjectReader value)', 'void'),
  \ dotnet#method('ExpectingToDeserialize(', 'class RuntimeType type)', 'void'),
  \ dotnet#method('BindToType(', 'string assemblyName, string typeName)', 'Type'),
  \ dotnet#method('ResourceReader(', ')', 'void'),
  \ dotnet#prop('ObjectReader', 'ObjectReader'),
  \ dotnet#method('ResourceReader(', 'class ResourceReader reader)', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Key(', ')', 'object'),
  \ dotnet#method('get_Current(', ')', 'object'),
  \ dotnet#method('get_DataPosition(', ')', 'int32'),
  \ dotnet#method('get_Entry(', ')', ''),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#prop('Key', 'object'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('DataPosition', 'int32'),
  \ dotnet#prop('Entry', 'DictionaryEntry'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#field('_resCache', 'Dictionary'),
  \ dotnet#method('ResourceReader(', 'string fileName)', 'void'),
  \ dotnet#method('ResourceReader(', 'class Stream stream)', 'void'),
  \ dotnet#method('ResourceReader(', 'class Stream stream, Dictionary resCache)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('ReadUnalignedI4(', 'int32* p)', 'static int32'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumeratorInternal(', ')', 'ResourceReader/ResourceEnumerator'),
  \ dotnet#method('FindPosForResource(', 'string name)', 'int32'),
  \ dotnet#method('LoadString(', 'int32 pos)', 'string'),
  \ dotnet#method('LoadObject(', 'int32 pos)', 'object'),
  \ dotnet#method('LoadObject(', 'int32 pos, [out] ResourceTypeCode& typeCode)', 'object'),
  \ dotnet#method('LoadObjectV1(', 'int32 pos)', 'object'),
  \ dotnet#method('LoadObjectV2(', 'int32 pos, [out] ResourceTypeCode& typeCode)', 'object'),
  \ dotnet#method('GetResourceData(', 'string resourceName, [out] string& resourceType, [out] uint8[]& resourceData)', 'void'),
  \ dotnet#method('ResourceReader(', ')', 'static void .'),
  \ ])

call dotnet#class('ResourceSet', 'Object', [ 
  \ dotnet#field('Reader', 'IResourceReader'),
  \ dotnet#field('Table', 'Hashtable'),
  \ dotnet#method('ResourceSet(', ')', 'void'),
  \ dotnet#method('ResourceSet(', 'bool junk)', 'void'),
  \ dotnet#method('ResourceSet(', 'string fileName)', 'void'),
  \ dotnet#method('ResourceSet(', 'class Stream stream)', 'void'),
  \ dotnet#method('ResourceSet(', 'class IResourceReader reader)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('GetDefaultReader(', ')', 'Type'),
  \ dotnet#method('GetDefaultWriter(', ')', 'Type'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetString(', 'string name)', 'string'),
  \ dotnet#method('GetString(', 'string name, bool ignoreCase)', 'string'),
  \ dotnet#method('GetObject(', 'string name)', 'object'),
  \ dotnet#method('GetObject(', 'string name, bool ignoreCase)', 'object'),
  \ dotnet#method('ReadResources(', ')', 'void'),
  \ ])

call dotnet#class('ResourceWriter', 'Object', [ 
  \ dotnet#method('get_TypeNameConverter(', ')', 'Func'),
  \ dotnet#method('set_TypeNameConverter(', 'class Func value)', 'void'),
  \ dotnet#method('ResourceWriter(', 'string fileName)', 'void'),
  \ dotnet#method('ResourceWriter(', 'class Stream stream)', 'void'),
  \ dotnet#method('AddResource(', 'string name, string value)', 'void'),
  \ dotnet#method('AddResource(', 'string name, object value)', 'void'),
  \ dotnet#method('AddResource(', 'string name, Stream value)', 'void'),
  \ dotnet#method('AddResource(', 'string name, Stream value, bool closeAfterWrite)', 'void'),
  \ dotnet#method('AddResource(', 'string name, uint8[] value)', 'void'),
  \ dotnet#method('AddResourceData(', 'string name, string typeName, uint8[] serializedData)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Generate(', ')', 'void'),
  \ dotnet#prop('TypeNameConverter', 'Func'),
  \ ])

call dotnet#class('SatelliteContractVersionAttribute', 'Attribute', [ 
  \ dotnet#method('SatelliteContractVersionAttribute(', 'string version)', 'void'),
  \ dotnet#method('get_Version(', ')', 'string'),
  \ dotnet#prop('Version', 'string'),
  \ ])

