call dotnet#namespace('System.CodeDom.Compiler')

call dotnet#class('CodeGenerator', 'Object', [ 
  \ dotnet#method('get_CurrentClass(', ')', 'CodeTypeDeclaration'),
  \ dotnet#method('get_CurrentTypeName(', ')', 'string'),
  \ dotnet#method('get_CurrentMember(', ')', 'CodeTypeMember'),
  \ dotnet#method('get_CurrentMemberName(', ')', 'string'),
  \ dotnet#method('get_IsCurrentInterface(', ')', 'bool'),
  \ dotnet#method('get_IsCurrentClass(', ')', 'bool'),
  \ dotnet#method('get_IsCurrentStruct(', ')', 'bool'),
  \ dotnet#method('get_IsCurrentEnum(', ')', 'bool'),
  \ dotnet#method('get_IsCurrentDelegate(', ')', 'bool'),
  \ dotnet#method('get_Indent(', ')', 'int32'),
  \ dotnet#method('set_Indent(', 'int32 value)', 'void'),
  \ dotnet#method('get_NullToken(', ')', 'abstract string'),
  \ dotnet#method('get_Output(', ')', 'TextWriter'),
  \ dotnet#method('get_Options(', ')', 'CodeGeneratorOptions'),
  \ dotnet#method('GenerateDirectives(', 'class CodeDirectiveCollection directives)', 'void'),
  \ dotnet#method('GenerateNamespaces(', 'class CodeCompileUnit e)', 'void'),
  \ dotnet#method('GenerateTypes(', 'class CodeNamespace e)', 'void'),
  \ dotnet#method('Supports(', 'GeneratorSupport support)', 'bool '),
  \ dotnet#method('GenerateCodeFromType(', 'class CodeTypeDeclaration e, TextWriter w, CodeGeneratorOptions o)', 'void '),
  \ dotnet#method('GenerateCodeFromExpression(', 'class CodeExpression e, TextWriter w, CodeGeneratorOptions o)', 'void '),
  \ dotnet#method('GenerateCodeFromCompileUnit(', 'class CodeCompileUnit e, TextWriter w, CodeGeneratorOptions o)', 'void '),
  \ dotnet#method('GenerateCodeFromNamespace(', 'class CodeNamespace e, TextWriter w, CodeGeneratorOptions o)', 'void '),
  \ dotnet#method('GenerateCodeFromStatement(', 'class CodeStatement e, TextWriter w, CodeGeneratorOptions o)', 'void '),
  \ dotnet#method('GenerateCodeFromMember(', 'class CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options)', 'void'),
  \ dotnet#method('IsValidIdentifier(', 'string value)', 'bool '),
  \ dotnet#method('ValidateIdentifier(', 'string value)', 'void '),
  \ dotnet#method('CreateEscapedIdentifier(', 'string value)', 'string '),
  \ dotnet#method('CreateValidIdentifier(', 'string value)', 'string '),
  \ dotnet#method('GetTypeOutput(', 'class CodeTypeReference type)', 'string '),
  \ dotnet#method('GenerateExpression(', 'class CodeExpression e)', 'void'),
  \ dotnet#method('GenerateSnippetCompileUnit(', 'class CodeSnippetCompileUnit e)', 'void'),
  \ dotnet#method('GenerateCompileUnit(', 'class CodeCompileUnit e)', 'void'),
  \ dotnet#method('GenerateNamespace(', 'class CodeNamespace e)', 'void'),
  \ dotnet#method('GenerateNamespaceImports(', 'class CodeNamespace e)', 'void'),
  \ dotnet#method('GenerateStatement(', 'class CodeStatement e)', 'void'),
  \ dotnet#method('GenerateStatements(', 'class CodeStatementCollection stms)', 'void'),
  \ dotnet#method('OutputAttributeDeclarations(', 'class CodeAttributeDeclarationCollection attributes)', 'void'),
  \ dotnet#method('OutputAttributeArgument(', 'class CodeAttributeArgument arg)', 'void'),
  \ dotnet#method('OutputDirection(', 'FieldDirection dir)', 'void'),
  \ dotnet#method('OutputFieldScopeModifier(', 'MemberAttributes attributes)', 'void'),
  \ dotnet#method('OutputMemberAccessModifier(', 'MemberAttributes attributes)', 'void'),
  \ dotnet#method('OutputMemberScopeModifier(', 'MemberAttributes attributes)', 'void'),
  \ dotnet#method('OutputType(', 'class CodeTypeReference typeRef)', 'abstract void'),
  \ dotnet#method('OutputTypeAttributes(', 'TypeAttributes attributes, bool isStruct, bool isEnum)', 'void'),
  \ dotnet#method('OutputTypeNamePair(', 'class CodeTypeReference typeRef, string name)', 'void'),
  \ dotnet#method('OutputIdentifier(', 'string ident)', 'void'),
  \ dotnet#method('OutputExpressionList(', 'class CodeExpressionCollection expressions)', 'void'),
  \ dotnet#method('OutputExpressionList(', 'class CodeExpressionCollection expressions, bool newlineBetweenItems)', 'void'),
  \ dotnet#method('OutputOperator(', 'CodeBinaryOperatorType op)', 'void'),
  \ dotnet#method('OutputParameters(', 'class CodeParameterDeclarationExpressionCollection parameters)', 'void'),
  \ dotnet#method('GenerateArrayCreateExpression(', 'class CodeArrayCreateExpression e)', 'abstract void'),
  \ dotnet#method('GenerateBaseReferenceExpression(', 'class CodeBaseReferenceExpression e)', 'abstract void'),
  \ dotnet#method('GenerateBinaryOperatorExpression(', 'class CodeBinaryOperatorExpression e)', 'void'),
  \ dotnet#method('ContinueOnNewLine(', 'string st)', 'void'),
  \ dotnet#method('GenerateCastExpression(', 'class CodeCastExpression e)', 'abstract void'),
  \ dotnet#method('GenerateDelegateCreateExpression(', 'class CodeDelegateCreateExpression e)', 'abstract void'),
  \ dotnet#method('GenerateFieldReferenceExpression(', 'class CodeFieldReferenceExpression e)', 'abstract void'),
  \ dotnet#method('GenerateArgumentReferenceExpression(', 'class CodeArgumentReferenceExpression e)', 'abstract void'),
  \ dotnet#method('GenerateVariableReferenceExpression(', 'class CodeVariableReferenceExpression e)', 'abstract void'),
  \ dotnet#method('GenerateIndexerExpression(', 'class CodeIndexerExpression e)', 'abstract void'),
  \ dotnet#method('GenerateArrayIndexerExpression(', 'class CodeArrayIndexerExpression e)', 'abstract void'),
  \ dotnet#method('GenerateSnippetExpression(', 'class CodeSnippetExpression e)', 'abstract void'),
  \ dotnet#method('GenerateMethodInvokeExpression(', 'class CodeMethodInvokeExpression e)', 'abstract void'),
  \ dotnet#method('GenerateMethodReferenceExpression(', 'class CodeMethodReferenceExpression e)', 'abstract void'),
  \ dotnet#method('GenerateEventReferenceExpression(', 'class CodeEventReferenceExpression e)', 'abstract void'),
  \ dotnet#method('GenerateDelegateInvokeExpression(', 'class CodeDelegateInvokeExpression e)', 'abstract void'),
  \ dotnet#method('GenerateObjectCreateExpression(', 'class CodeObjectCreateExpression e)', 'abstract void'),
  \ dotnet#method('GenerateParameterDeclarationExpression(', 'class CodeParameterDeclarationExpression e)', 'void'),
  \ dotnet#method('GenerateDirectionExpression(', 'class CodeDirectionExpression e)', 'void'),
  \ dotnet#method('GeneratePrimitiveExpression(', 'class CodePrimitiveExpression e)', 'void'),
  \ dotnet#method('GenerateSingleFloatValue(', 'float32 s)', 'void'),
  \ dotnet#method('GenerateDoubleValue(', 'float64 d)', 'void'),
  \ dotnet#method('GenerateDecimalValue(', 'Decimal d)', 'void'),
  \ dotnet#method('GenerateDefaultValueExpression(', 'class CodeDefaultValueExpression e)', 'void'),
  \ dotnet#method('GeneratePropertyReferenceExpression(', 'class CodePropertyReferenceExpression e)', 'abstract void'),
  \ dotnet#method('GeneratePropertySetValueReferenceExpression(', 'class CodePropertySetValueReferenceExpression e)', 'abstract void'),
  \ dotnet#method('GenerateThisReferenceExpression(', 'class CodeThisReferenceExpression e)', 'abstract void'),
  \ dotnet#method('GenerateTypeReferenceExpression(', 'class CodeTypeReferenceExpression e)', 'void'),
  \ dotnet#method('GenerateTypeOfExpression(', 'class CodeTypeOfExpression e)', 'void'),
  \ dotnet#method('GenerateExpressionStatement(', 'class CodeExpressionStatement e)', 'abstract void'),
  \ dotnet#method('GenerateIterationStatement(', 'class CodeIterationStatement e)', 'abstract void'),
  \ dotnet#method('GenerateThrowExceptionStatement(', 'class CodeThrowExceptionStatement e)', 'abstract void'),
  \ dotnet#method('GenerateCommentStatement(', 'class CodeCommentStatement e)', 'void'),
  \ dotnet#method('GenerateCommentStatements(', 'class CodeCommentStatementCollection e)', 'void'),
  \ dotnet#method('GenerateComment(', 'class CodeComment e)', 'abstract void'),
  \ dotnet#method('GenerateMethodReturnStatement(', 'class CodeMethodReturnStatement e)', 'abstract void'),
  \ dotnet#method('GenerateConditionStatement(', 'class CodeConditionStatement e)', 'abstract void'),
  \ dotnet#method('GenerateTryCatchFinallyStatement(', 'class CodeTryCatchFinallyStatement e)', 'abstract void'),
  \ dotnet#method('GenerateAssignStatement(', 'class CodeAssignStatement e)', 'abstract void'),
  \ dotnet#method('GenerateAttachEventStatement(', 'class CodeAttachEventStatement e)', 'abstract void'),
  \ dotnet#method('GenerateRemoveEventStatement(', 'class CodeRemoveEventStatement e)', 'abstract void'),
  \ dotnet#method('GenerateGotoStatement(', 'class CodeGotoStatement e)', 'abstract void'),
  \ dotnet#method('GenerateLabeledStatement(', 'class CodeLabeledStatement e)', 'abstract void'),
  \ dotnet#method('GenerateSnippetStatement(', 'class CodeSnippetStatement e)', 'void'),
  \ dotnet#method('GenerateVariableDeclarationStatement(', 'class CodeVariableDeclarationStatement e)', 'abstract void'),
  \ dotnet#method('GenerateLinePragmaStart(', 'class CodeLinePragma e)', 'abstract void'),
  \ dotnet#method('GenerateLinePragmaEnd(', 'class CodeLinePragma e)', 'abstract void'),
  \ dotnet#method('GenerateEvent(', 'class CodeMemberEvent e, CodeTypeDeclaration c)', 'abstract void'),
  \ dotnet#method('GenerateField(', 'class CodeMemberField e)', 'abstract void'),
  \ dotnet#method('GenerateSnippetMember(', 'class CodeSnippetTypeMember e)', 'abstract void'),
  \ dotnet#method('GenerateEntryPointMethod(', 'class CodeEntryPointMethod e, CodeTypeDeclaration c)', 'abstract void'),
  \ dotnet#method('GenerateMethod(', 'class CodeMemberMethod e, CodeTypeDeclaration c)', 'abstract void'),
  \ dotnet#method('GenerateProperty(', 'class CodeMemberProperty e, CodeTypeDeclaration c)', 'abstract void'),
  \ dotnet#method('GenerateConstrCodeGenerator(', 'class CodeConstrCodeGenerator e, CodeTypeDeclaration c)', 'abstract void'),
  \ dotnet#method('GenerateTypeConstrCodeGenerator(', 'class CodeTypeConstrCodeGenerator e)', 'abstract void'),
  \ dotnet#method('GenerateTypeStart(', 'class CodeTypeDeclaration e)', 'abstract void'),
  \ dotnet#method('GenerateTypeEnd(', 'class CodeTypeDeclaration e)', 'abstract void'),
  \ dotnet#method('GenerateCompileUnitStart(', 'class CodeCompileUnit e)', 'void'),
  \ dotnet#method('GenerateCompileUnitEnd(', 'class CodeCompileUnit e)', 'void'),
  \ dotnet#method('GenerateNamespaceStart(', 'class CodeNamespace e)', 'abstract void'),
  \ dotnet#method('GenerateNamespaceEnd(', 'class CodeNamespace e)', 'abstract void'),
  \ dotnet#method('GenerateNamespaceImport(', 'class CodeNamespaceImport e)', 'abstract void'),
  \ dotnet#method('GenerateAttributeDeclarationsStart(', 'class CodeAttributeDeclarationCollection attributes)', 'abstract void'),
  \ dotnet#method('GenerateAttributeDeclarationsEnd(', 'class CodeAttributeDeclarationCollection attributes)', 'abstract void'),
  \ dotnet#method('Supports(', 'GeneratorSupport support)', 'abstract bool'),
  \ dotnet#method('IsValidIdentifier(', 'string value)', 'abstract bool'),
  \ dotnet#method('ValidateIdentifier(', 'string value)', 'void'),
  \ dotnet#method('CreateEscapedIdentifier(', 'string value)', 'abstract string'),
  \ dotnet#method('CreateValidIdentifier(', 'string value)', 'abstract string'),
  \ dotnet#method('GetTypeOutput(', 'class CodeTypeReference value)', 'abstract string'),
  \ dotnet#method('QuoteSnippetString(', 'string value)', 'abstract string'),
  \ dotnet#method('IsValidLanguageIndependentIdentifier(', 'string value)', 'static bool'),
  \ dotnet#method('ValidateIdentifiers(', 'class CodeObject e)', 'static void'),
  \ dotnet#method('CodeGenerator(', ')', 'void'),
  \ dotnet#prop('CurrentClass', 'CodeTypeDeclaration'),
  \ dotnet#prop('CurrentTypeName', 'string'),
  \ dotnet#prop('CurrentMember', 'CodeTypeMember'),
  \ dotnet#prop('CurrentMemberName', 'string'),
  \ dotnet#prop('IsCurrentInterface', 'bool'),
  \ dotnet#prop('IsCurrentClass', 'bool'),
  \ dotnet#prop('IsCurrentStruct', 'bool'),
  \ dotnet#prop('IsCurrentEnum', 'bool'),
  \ dotnet#prop('IsCurrentDelegate', 'bool'),
  \ dotnet#prop('Indent', 'int32'),
  \ dotnet#prop('NullToken', 'string'),
  \ dotnet#prop('Output', 'TextWriter'),
  \ dotnet#prop('Options', 'CodeGeneratorOptions'),
  \ ])

call dotnet#class('CodeCompiler', 'CodeGenerator', [ 
  \ dotnet#method('CompileAssemblyFromDom(', 'class CompilerParameters options, CodeCompileUnit e)', ''),
  \ dotnet#method('CompileAssemblyFromFile(', 'class CompilerParameters options, string fileName)', ''),
  \ dotnet#method('CompileAssemblyFromSource(', 'class CompilerParameters options, string source)', ''),
  \ dotnet#method('CompileAssemblyFromSourceBatch(', 'class CompilerParameters options, string[] sources)', ''),
  \ dotnet#method('CompileAssemblyFromFileBatch(', 'class CompilerParameters options, string[] fileNames)', ''),
  \ dotnet#method('CompileAssemblyFromDomBatch(', 'class CompilerParameters options, CodeCompileUnit[] ea)', ''),
  \ dotnet#method('get_FileExtension(', ')', 'abstract string'),
  \ dotnet#method('get_CompilerName(', ')', 'abstract string'),
  \ dotnet#method('FromDom(', 'class CompilerParameters options, CodeCompileUnit e)', 'family'),
  \ dotnet#method('FromFile(', 'class CompilerParameters options, string fileName)', 'family'),
  \ dotnet#method('FromSource(', 'class CompilerParameters options, string source)', 'family'),
  \ dotnet#method('FromDomBatch(', 'class CompilerParameters options, CodeCompileUnit[] ea)', 'family'),
  \ dotnet#method('FromFileBatch(', 'class CompilerParameters options, string[] fileNames)', 'family'),
  \ dotnet#method('ProcessCompilerOutputLine(', 'class CompilerResults results, string line)', 'abstract void'),
  \ dotnet#method('CmdArgsFromParameters(', 'class CompilerParameters options)', 'abstract string'),
  \ dotnet#method('GetResponseFileCmdArgs(', 'class CompilerParameters options, string cmdArgs)', 'string'),
  \ dotnet#method('FromSourceBatch(', 'class CompilerParameters options, string[] sources)', 'family'),
  \ dotnet#method('JoinStringArray(', 'string[] sa, string separator)', 'static string'),
  \ dotnet#method('CodeCompiler(', ')', 'void'),
  \ dotnet#prop('FileExtension', 'string'),
  \ dotnet#prop('CompilerName', 'string'),
  \ ])

call dotnet#class('CodeDomProvider', 'Component', [ 
  \ dotnet#method('CreateProvider(', 'string language, IDictionary providerOptions)', 'static CodeDomProvider'),
  \ dotnet#method('CreateProvider(', 'string language)', 'static CodeDomProvider'),
  \ dotnet#method('GetLanguageFromExtension(', 'string extension)', 'static string'),
  \ dotnet#method('IsDefinedLanguage(', 'string language)', 'static bool'),
  \ dotnet#method('IsDefinedExtension(', 'string extension)', 'static bool'),
  \ dotnet#method('GetCompilerInfo(', 'string language)', 'static CompilerInfo'),
  \ dotnet#method('GetAllCompilerInfo(', ')', 'static CompilerInfo[]'),
  \ dotnet#method('get_FileExtension(', ')', 'string'),
  \ dotnet#method('get_LanguageOptions(', ')', ''),
  \ dotnet#method('CreateGenerator(', ')', 'abstract'),
  \ dotnet#method('CreateGenerator(', 'class TextWriter output)', ''),
  \ dotnet#method('CreateGenerator(', 'string fileName)', ''),
  \ dotnet#method('CreateCompiler(', ')', 'abstract'),
  \ dotnet#method('CreateParser(', ')', ''),
  \ dotnet#method('GetConverter(', 'class Type type)', ''),
  \ dotnet#method('CompileAssemblyFromDom(', 'class CompilerParameters options, CodeCompileUnit[] compilationUnits)', ''),
  \ dotnet#method('CompileAssemblyFromFile(', 'class CompilerParameters options, string[] fileNames)', ''),
  \ dotnet#method('CompileAssemblyFromSource(', 'class CompilerParameters options, string[] sources)', ''),
  \ dotnet#method('IsValidIdentifier(', 'string value)', 'bool'),
  \ dotnet#method('CreateEscapedIdentifier(', 'string value)', 'string'),
  \ dotnet#method('CreateValidIdentifier(', 'string value)', 'string'),
  \ dotnet#method('GetTypeOutput(', 'class CodeTypeReference type)', 'string'),
  \ dotnet#method('Supports(', 'GeneratorSupport generatorSupport)', 'bool'),
  \ dotnet#method('GenerateCodeFromExpression(', 'class CodeExpression expression, TextWriter writer, CodeGeneratorOptions options)', 'void'),
  \ dotnet#method('GenerateCodeFromStatement(', 'class CodeStatement statement, TextWriter writer, CodeGeneratorOptions options)', 'void'),
  \ dotnet#method('GenerateCodeFromNamespace(', 'class CodeNamespace codeNamespace, TextWriter writer, CodeGeneratorOptions options)', 'void'),
  \ dotnet#method('GenerateCodeFromCompileUnit(', 'class CodeCompileUnit compileUnit, TextWriter writer, CodeGeneratorOptions options)', 'void'),
  \ dotnet#method('GenerateCodeFromType(', 'class CodeTypeDeclaration codeType, TextWriter writer, CodeGeneratorOptions options)', 'void'),
  \ dotnet#method('GenerateCodeFromMember(', 'class CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options)', 'void'),
  \ dotnet#method('Parse(', 'class TextReader codeStream)', ''),
  \ dotnet#method('CodeDomProvider(', ')', 'void'),
  \ dotnet#prop('FileExtension', 'string'),
  \ dotnet#prop('LanguageOptions', 'LanguageOptions'),
  \ ])

call dotnet#class('CodeGeneratorOptions', 'Object', [ 
  \ dotnet#method('CodeGeneratorOptions(', ')', 'void'),
  \ dotnet#method('get_Item(', 'string index)', 'object'),
  \ dotnet#method('set_Item(', 'string index, object value)', 'void'),
  \ dotnet#method('get_IndentString(', ')', 'string'),
  \ dotnet#method('set_IndentString(', 'string value)', 'void'),
  \ dotnet#method('get_BracingStyle(', ')', 'string'),
  \ dotnet#method('set_BracingStyle(', 'string value)', 'void'),
  \ dotnet#method('get_ElseOnClosing(', ')', 'bool'),
  \ dotnet#method('set_ElseOnClosing(', 'bool value)', 'void'),
  \ dotnet#method('get_BlankLinesBetweenMembers(', ')', 'bool'),
  \ dotnet#method('set_BlankLinesBetweenMembers(', 'bool value)', 'void'),
  \ dotnet#method('get_VerbatimOrder(', ')', 'bool'),
  \ dotnet#method('set_VerbatimOrder(', 'bool value)', 'void'),
  \ dotnet#prop('Item(string)', 'object'),
  \ dotnet#prop('IndentString', 'string'),
  \ dotnet#prop('BracingStyle', 'string'),
  \ dotnet#prop('ElseOnClosing', 'bool'),
  \ dotnet#prop('BlankLinesBetweenMembers', 'bool'),
  \ dotnet#prop('VerbatimOrder', 'bool'),
  \ ])

call dotnet#class('CodeParser', 'Object', [ 
  \ dotnet#method('Parse(', 'class TextReader codeStream)', 'abstract'),
  \ dotnet#method('CodeParser(', ')', 'void'),
  \ ])

call dotnet#class('CompilerError', 'Object', [ 
  \ dotnet#method('CompilerError(', ')', 'void'),
  \ dotnet#method('CompilerError(', 'string fileName, int32 line, int32 column, string errorNumber, string errorText)', 'void'),
  \ dotnet#method('get_Line(', ')', 'int32'),
  \ dotnet#method('set_Line(', 'int32 value)', 'void'),
  \ dotnet#method('get_Column(', ')', 'int32'),
  \ dotnet#method('set_Column(', 'int32 value)', 'void'),
  \ dotnet#method('get_ErrorNumber(', ')', 'string'),
  \ dotnet#method('set_ErrorNumber(', 'string value)', 'void'),
  \ dotnet#method('get_ErrorText(', ')', 'string'),
  \ dotnet#method('set_ErrorText(', 'string value)', 'void'),
  \ dotnet#method('get_IsWarning(', ')', 'bool'),
  \ dotnet#method('set_IsWarning(', 'bool value)', 'void'),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('set_FileName(', 'string value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Line', 'int32'),
  \ dotnet#prop('Column', 'int32'),
  \ dotnet#prop('ErrorNumber', 'string'),
  \ dotnet#prop('ErrorText', 'string'),
  \ dotnet#prop('IsWarning', 'bool'),
  \ dotnet#prop('FileName', 'string'),
  \ ])

call dotnet#class('CompilerErrorCollection', 'CollectionBase', [ 
  \ dotnet#method('CompilerErrorCollection(', ')', 'void'),
  \ dotnet#method('CompilerErrorCollection(', 'class CompilerErrorCollection value)', 'void'),
  \ dotnet#method('CompilerErrorCollection(', 'class CompilerError[] value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'CompilerError'),
  \ dotnet#method('set_Item(', 'int32 index, CompilerError value)', 'void'),
  \ dotnet#method('Add(', 'class CompilerError value)', 'int32'),
  \ dotnet#method('AddRange(', 'class CompilerError[] value)', 'void'),
  \ dotnet#method('AddRange(', 'class CompilerErrorCollection value)', 'void'),
  \ dotnet#method('Contains(', 'class CompilerError value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class CompilerError[] array, int32 index)', 'void'),
  \ dotnet#method('get_HasErrors(', ')', 'bool'),
  \ dotnet#method('get_HasWarnings(', ')', 'bool'),
  \ dotnet#method('IndexOf(', 'class CompilerError value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, CompilerError value)', 'void'),
  \ dotnet#method('Remove(', 'class CompilerError value)', 'void'),
  \ dotnet#prop('Item(int32)', 'CompilerError'),
  \ dotnet#prop('HasErrors', 'bool'),
  \ dotnet#prop('HasWarnings', 'bool'),
  \ ])

call dotnet#class('CompilerInfo', 'Object', [ 
  \ dotnet#method('GetLanguages(', ')', 'string[]'),
  \ dotnet#method('GetExtensions(', ')', 'string[]'),
  \ dotnet#method('get_CodeDomProviderType(', ')', 'Type'),
  \ dotnet#method('get_IsCodeDomProviderTypeValid(', ')', 'bool'),
  \ dotnet#method('CreateProvider(', ')', 'CodeDomProvider'),
  \ dotnet#method('CreateProvider(', 'class IDictionary providerOptions)', 'CodeDomProvider'),
  \ dotnet#method('CreateDefaultCompilerParameters(', ')', 'CompilerParameters'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('CompilerInfo(', ')', 'void'),
  \ dotnet#prop('CodeDomProviderType', 'Type'),
  \ dotnet#prop('IsCodeDomProviderTypeValid', 'bool'),
  \ ])

call dotnet#class('CompilerParameters', 'Object', [ 
  \ dotnet#method('CompilerParameters(', ')', 'void'),
  \ dotnet#method('CompilerParameters(', 'string[] assemblyNames)', 'void'),
  \ dotnet#method('CompilerParameters(', 'string[] assemblyNames, string outputName)', 'void'),
  \ dotnet#method('CompilerParameters(', 'string[] assemblyNames, string outputName, bool includeDebugInformation)', 'void'),
  \ dotnet#method('get_GenerateExecutable(', ')', 'bool'),
  \ dotnet#method('set_GenerateExecutable(', 'bool value)', 'void'),
  \ dotnet#method('get_GenerateInMemory(', ')', 'bool'),
  \ dotnet#method('set_GenerateInMemory(', 'bool value)', 'void'),
  \ dotnet#method('get_ReferencedAssemblies(', ')', 'StringCollection'),
  \ dotnet#method('get_MainClass(', ')', 'string'),
  \ dotnet#method('set_MainClass(', 'string value)', 'void'),
  \ dotnet#method('get_OutputAssembly(', ')', 'string'),
  \ dotnet#method('set_OutputAssembly(', 'string value)', 'void'),
  \ dotnet#method('get_TempFiles(', ')', 'TempFileCollection'),
  \ dotnet#method('set_TempFiles(', 'class TempFileCollection value)', 'void'),
  \ dotnet#method('get_IncludeDebugInformation(', ')', 'bool'),
  \ dotnet#method('set_IncludeDebugInformation(', 'bool value)', 'void'),
  \ dotnet#method('get_TreatWarningsAsErrors(', ')', 'bool'),
  \ dotnet#method('set_TreatWarningsAsErrors(', 'bool value)', 'void'),
  \ dotnet#method('get_WarningLevel(', ')', 'int32'),
  \ dotnet#method('set_WarningLevel(', 'int32 value)', 'void'),
  \ dotnet#method('get_CompilerOptions(', ')', 'string'),
  \ dotnet#method('set_CompilerOptions(', 'string value)', 'void'),
  \ dotnet#method('get_Win32Resource(', ')', 'string'),
  \ dotnet#method('set_Win32Resource(', 'string value)', 'void'),
  \ dotnet#method('get_EmbeddedResources(', ')', 'StringCollection'),
  \ dotnet#method('get_LinkedResources(', ')', 'StringCollection'),
  \ dotnet#method('get_UserToken(', ')', 'int'),
  \ dotnet#method('set_UserToken(', 'native int value)', 'void'),
  \ dotnet#method('get_Evidence(', ')', 'Evidence'),
  \ dotnet#method('set_Evidence(', 'class Evidence value)', 'void'),
  \ dotnet#prop('GenerateExecutable', 'bool'),
  \ dotnet#prop('GenerateInMemory', 'bool'),
  \ dotnet#prop('ReferencedAssemblies', 'StringCollection'),
  \ dotnet#prop('MainClass', 'string'),
  \ dotnet#prop('OutputAssembly', 'string'),
  \ dotnet#prop('TempFiles', 'TempFileCollection'),
  \ dotnet#prop('IncludeDebugInformation', 'bool'),
  \ dotnet#prop('TreatWarningsAsErrors', 'bool'),
  \ dotnet#prop('WarningLevel', 'int32'),
  \ dotnet#prop('CompilerOptions', 'string'),
  \ dotnet#prop('Win32Resource', 'string'),
  \ dotnet#prop('EmbeddedResources', 'StringCollection'),
  \ dotnet#prop('LinkedResources', 'StringCollection'),
  \ dotnet#prop('UserToken', 'int'),
  \ dotnet#prop('Evidence', 'Evidence'),
  \ ])

call dotnet#class('CompilerResults', 'Object', [ 
  \ dotnet#method('CompilerResults(', 'class TempFileCollection tempFiles)', 'void'),
  \ dotnet#method('get_TempFiles(', ')', 'TempFileCollection'),
  \ dotnet#method('set_TempFiles(', 'class TempFileCollection value)', 'void'),
  \ dotnet#method('get_Evidence(', ')', 'Evidence'),
  \ dotnet#method('set_Evidence(', 'class Evidence value)', 'void'),
  \ dotnet#method('get_CompiledAssembly(', ')', 'Assembly'),
  \ dotnet#method('set_CompiledAssembly(', 'class Assembly value)', 'void'),
  \ dotnet#method('get_Errors(', ')', 'CompilerErrorCollection'),
  \ dotnet#method('get_Output(', ')', 'StringCollection'),
  \ dotnet#method('get_PathToAssembly(', ')', 'string'),
  \ dotnet#method('set_PathToAssembly(', 'string value)', 'void'),
  \ dotnet#method('get_NativeCompilerReturnValue(', ')', 'int32'),
  \ dotnet#method('set_NativeCompilerReturnValue(', 'int32 value)', 'void'),
  \ dotnet#prop('TempFiles', 'TempFileCollection'),
  \ dotnet#prop('Evidence', 'Evidence'),
  \ dotnet#prop('CompiledAssembly', 'Assembly'),
  \ dotnet#prop('Errors', 'CompilerErrorCollection'),
  \ dotnet#prop('Output', 'StringCollection'),
  \ dotnet#prop('PathToAssembly', 'string'),
  \ dotnet#prop('NativeCompilerReturnValue', 'int32'),
  \ ])

call dotnet#class('Executor', 'Object', [ 
  \ dotnet#method('ExecWait(', 'string cmd, TempFileCollection tempFiles)', 'static void'),
  \ dotnet#method('ExecWaitWithCapture(', 'string cmd, TempFileCollection tempFiles, string& outputName, string& errorName)', 'static int32'),
  \ dotnet#method('ExecWaitWithCapture(', 'string cmd, string currentDir, TempFileCollection tempFiles, string& outputName, string& errorName)', 'static int32'),
  \ dotnet#method('ExecWaitWithCapture(', 'native int userToken, string cmd, TempFileCollection tempFiles, string& outputName, string& errorName)', 'static int32'),
  \ dotnet#method('ExecWaitWithCapture(', 'native int userToken, string cmd, string currentDir, TempFileCollection tempFiles, string& outputName, string& errorName)', 'static int32'),
  \ ])

call dotnet#class('GeneratedCodeAttribute', 'Attribute', [ 
  \ dotnet#method('GeneratedCodeAttribute(', 'string tool, string version)', 'void'),
  \ dotnet#method('get_Tool(', ')', 'string'),
  \ dotnet#method('get_Version(', ')', 'string'),
  \ dotnet#prop('Tool', 'string'),
  \ dotnet#prop('Version', 'string'),
  \ ])

call dotnet#class('IndentedTextWriter', 'TextWriter', [ 
  \ dotnet#method('IndentedTextWriter(', 'class TextWriter writer)', 'void'),
  \ dotnet#method('IndentedTextWriter(', 'class TextWriter writer, string tabString)', 'void'),
  \ dotnet#method('get_Encoding(', ')', ''),
  \ dotnet#method('get_NewLine(', ')', 'string'),
  \ dotnet#method('set_NewLine(', 'string value)', 'void'),
  \ dotnet#method('get_Indent(', ')', 'int32'),
  \ dotnet#method('set_Indent(', 'int32 value)', 'void'),
  \ dotnet#method('get_InnerWriter(', ')', 'TextWriter'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('OutputTabs(', ')', 'void'),
  \ dotnet#method('Write(', 'string s)', 'void'),
  \ dotnet#method('Write(', 'bool value)', 'void'),
  \ dotnet#method('Write(', 'char value)', 'void'),
  \ dotnet#method('Write(', 'char[] buffer)', 'void'),
  \ dotnet#method('Write(', 'char[] buffer, int32 index, int32 count)', 'void'),
  \ dotnet#method('Write(', 'float64 value)', 'void'),
  \ dotnet#method('Write(', 'float32 value)', 'void'),
  \ dotnet#method('Write(', 'int32 value)', 'void'),
  \ dotnet#method('Write(', 'int64 value)', 'void'),
  \ dotnet#method('Write(', 'object value)', 'void'),
  \ dotnet#method('Write(', 'string format, object arg0)', 'void'),
  \ dotnet#method('Write(', 'string format, object arg0, object arg1)', 'void'),
  \ dotnet#method('Write(', 'string format, object[] arg)', 'void'),
  \ dotnet#method('WriteLineNoTabs(', 'string s)', 'void'),
  \ dotnet#method('WriteLine(', 'string s)', 'void'),
  \ dotnet#method('WriteLine(', ')', 'void'),
  \ dotnet#method('WriteLine(', 'bool value)', 'void'),
  \ dotnet#method('WriteLine(', 'char value)', 'void'),
  \ dotnet#method('WriteLine(', 'char[] buffer)', 'void'),
  \ dotnet#method('WriteLine(', 'char[] buffer, int32 index, int32 count)', 'void'),
  \ dotnet#method('WriteLine(', 'float64 value)', 'void'),
  \ dotnet#method('WriteLine(', 'float32 value)', 'void'),
  \ dotnet#method('WriteLine(', 'int32 value)', 'void'),
  \ dotnet#method('WriteLine(', 'int64 value)', 'void'),
  \ dotnet#method('WriteLine(', 'object value)', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0)', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0, object arg1)', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object[] arg)', 'void'),
  \ dotnet#method('WriteLine(', 'uint32 value)', 'void'),
  \ dotnet#prop('Encoding', 'Encoding'),
  \ dotnet#prop('NewLine', 'string'),
  \ dotnet#prop('Indent', 'int32'),
  \ dotnet#prop('InnerWriter', 'TextWriter'),
  \ ])

call dotnet#class('TempFileCollection', 'Object', [ 
  \ dotnet#method('TempFileCollection(', ')', 'void'),
  \ dotnet#method('TempFileCollection(', 'string tempDir)', 'void'),
  \ dotnet#method('TempFileCollection(', 'string tempDir, bool keepFiles)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('AddExtension(', 'string fileExtension)', 'string'),
  \ dotnet#method('AddExtension(', 'string fileExtension, bool keepFile)', 'string'),
  \ dotnet#method('AddFile(', 'string fileName, bool keepFile)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 start)', 'void '),
  \ dotnet#method('CopyTo(', 'string[] fileNames, int32 start)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Count(', ')', 'int32 '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_TempDir(', ')', 'string'),
  \ dotnet#method('get_BasePath(', ')', 'string'),
  \ dotnet#method('get_KeepFiles(', ')', 'bool'),
  \ dotnet#method('set_KeepFiles(', 'bool value)', 'void'),
  \ dotnet#method('Delete(', ')', 'void'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('TempDir', 'string'),
  \ dotnet#prop('BasePath', 'string'),
  \ dotnet#prop('KeepFiles', 'bool'),
  \ ])

