call dotnet#namespace('System.Linq.Expressions')

call dotnet#class('ExpressionVisitor', 'Object', [ 
  \ dotnet#method('ExpressionVisitor(', ')', 'void'),
  \ dotnet#method('Visit(', 'class Expression node)', ''),
  \ dotnet#method('Visit(', 'class ReadOnlyCollection nodes)', 'ReadOnlyCollection'),
  \ dotnet#method('Visit(', 'class ReadOnlyCollection nodes, Func elementVisitor)', 'static ReadOnlyCollection'),
  \ dotnet#method('VisitAndConvert(', '!!T node, string callerName)', '!!T'),
  \ dotnet#method('VisitAndConvert(', 'class ReadOnlyCollection nodes, string callerName)', 'ReadOnlyCollection'),
  \ dotnet#method('VisitBinary(', 'class BinaryExpression node)', 'famorassem'),
  \ dotnet#method('VisitBlock(', 'class BlockExpression node)', 'famorassem'),
  \ dotnet#method('VisitConditional(', 'class ConditionalExpression node)', 'famorassem'),
  \ dotnet#method('VisitConstant(', 'class ConstantExpression node)', 'famorassem'),
  \ dotnet#method('VisitDebugInfo(', 'class DebugInfoExpression node)', 'famorassem'),
  \ dotnet#method('VisitDynamic(', 'class DynamicExpression node)', 'famorassem'),
  \ dotnet#method('VisitDefault(', 'class DefaultExpression node)', 'famorassem'),
  \ dotnet#method('VisitExtension(', 'class Expression node)', 'famorassem'),
  \ dotnet#method('VisitGoto(', 'class GotoExpression node)', 'famorassem'),
  \ dotnet#method('VisitInvocation(', 'class InvocationExpression node)', 'famorassem'),
  \ dotnet#method('VisitLabelTarget(', 'class LabelTarget node)', 'family'),
  \ dotnet#method('VisitLabel(', 'class LabelExpression node)', 'famorassem'),
  \ dotnet#method('VisitLambda(', 'class Expression node)', 'famorassem'),
  \ dotnet#method('VisitLoop(', 'class LoopExpression node)', 'famorassem'),
  \ dotnet#method('VisitMember(', 'class MemberExpression node)', 'famorassem'),
  \ dotnet#method('VisitIndex(', 'class IndexExpression node)', 'famorassem'),
  \ dotnet#method('VisitMethodCall(', 'class MethodCallExpression node)', 'famorassem'),
  \ dotnet#method('VisitNewArray(', 'class NewArrayExpression node)', 'famorassem'),
  \ dotnet#method('VisitNew(', 'class NewExpression node)', 'famorassem'),
  \ dotnet#method('VisitParameter(', 'class ParameterExpression node)', 'famorassem'),
  \ dotnet#method('VisitRuntimeVariables(', 'class RuntimeVariablesExpression node)', 'famorassem'),
  \ dotnet#method('VisitSwitchCase(', 'class SwitchCase node)', 'family'),
  \ dotnet#method('VisitSwitch(', 'class SwitchExpression node)', 'famorassem'),
  \ dotnet#method('VisitCatchBlock(', 'class CatchBlock node)', 'family'),
  \ dotnet#method('VisitTry(', 'class TryExpression node)', 'famorassem'),
  \ dotnet#method('VisitTypeBinary(', 'class TypeBinaryExpression node)', 'famorassem'),
  \ dotnet#method('VisitUnary(', 'class UnaryExpression node)', 'famorassem'),
  \ dotnet#method('VisitMemberInit(', 'class MemberInitExpression node)', 'famorassem'),
  \ dotnet#method('VisitListInit(', 'class ListInitExpression node)', 'famorassem'),
  \ dotnet#method('VisitElementInit(', 'class ElementInit node)', 'family'),
  \ dotnet#method('VisitMemberBinding(', 'class MemberBinding node)', 'family'),
  \ dotnet#method('VisitMemberAssignment(', 'class MemberAssignment node)', 'family'),
  \ dotnet#method('VisitMemberMemberBinding(', 'class MemberMemberBinding node)', 'family'),
  \ dotnet#method('VisitMemberListBinding(', 'class MemberListBinding node)', 'family'),
  \ ])

call dotnet#class('Expression', 'Object', [ 
  \ dotnet#method('Assign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('MakeBinary(', 'ExpressionType binaryType, Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('MakeBinary(', 'ExpressionType binaryType, Expression left, Expression right, bool liftToNull, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('MakeBinary(', 'ExpressionType binaryType, Expression left, Expression right, bool liftToNull, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('Equal(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('Equal(', 'class Expression left, Expression right, bool liftToNull, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('ReferenceEqual(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('NotEqual(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('NotEqual(', 'class Expression left, Expression right, bool liftToNull, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('ReferenceNotEqual(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('GreaterThan(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('GreaterThan(', 'class Expression left, Expression right, bool liftToNull, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('LessThan(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('LessThan(', 'class Expression left, Expression right, bool liftToNull, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('GreaterThanOrEqual(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('GreaterThanOrEqual(', 'class Expression left, Expression right, bool liftToNull, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('LessThanOrEqual(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('LessThanOrEqual(', 'class Expression left, Expression right, bool liftToNull, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('AndAlso(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('AndAlso(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('OrElse(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('OrElse(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('Coalesce(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('Coalesce(', 'class Expression left, Expression right, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('Add(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('Add(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('AddAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('AddAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('AddAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('AddAssignChecked(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('AddAssignChecked(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('AddAssignChecked(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('AddChecked(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('AddChecked(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('Subtract(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('Subtract(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('SubtractAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('SubtractAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('SubtractAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('SubtractAssignChecked(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('SubtractAssignChecked(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('SubtractAssignChecked(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('SubtractChecked(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('SubtractChecked(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('Divide(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('Divide(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('DivideAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('DivideAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('DivideAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('Modulo(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('Modulo(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('ModuloAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('ModuloAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('ModuloAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('Multiply(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('Multiply(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('MultiplyAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('MultiplyAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('MultiplyAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('MultiplyAssignChecked(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('MultiplyAssignChecked(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('MultiplyAssignChecked(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('MultiplyChecked(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('MultiplyChecked(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('LeftShift(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('LeftShift(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('LeftShiftAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('LeftShiftAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('LeftShiftAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('RightShift(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('RightShift(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('RightShiftAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('RightShiftAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('RightShiftAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('And(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('And(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('AndAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('AndAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('AndAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('Or(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('Or(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('OrAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('OrAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('OrAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('ExclusiveOr(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('ExclusiveOr(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('ExclusiveOrAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('ExclusiveOrAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('ExclusiveOrAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('Power(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('Power(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('PowerAssign(', 'class Expression left, Expression right)', 'static BinaryExpression'),
  \ dotnet#method('PowerAssign(', 'class Expression left, Expression right, MethodInfo method)', 'static BinaryExpression'),
  \ dotnet#method('PowerAssign(', 'class Expression left, Expression right, MethodInfo method, LambdaExpression conversion)', 'static BinaryExpression'),
  \ dotnet#method('ArrayIndex(', 'class Expression array, Expression index)', 'static BinaryExpression'),
  \ dotnet#method('Block(', 'class Expression arg0, Expression arg1)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class Expression arg0, Expression arg1, Expression arg2)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class Expression arg0, Expression arg1, Expression arg2, Expression arg3)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class Expression[] expressions)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class IEnumerable expressions)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class Type type, Expression[] expressions)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class Type type, IEnumerable expressions)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class IEnumerable variables, Expression[] expressions)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class Type type, IEnumerable variables, Expression[] expressions)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class IEnumerable variables, IEnumerable expressions)', 'static BlockExpression'),
  \ dotnet#method('Block(', 'class Type type, IEnumerable variables, IEnumerable expressions)', 'static BlockExpression'),
  \ dotnet#method('Catch(', 'class Type type, Expression body)', 'static CatchBlock'),
  \ dotnet#method('Catch(', 'class ParameterExpression variable, Expression body)', 'static CatchBlock'),
  \ dotnet#method('Catch(', 'class Type type, Expression body, Expression filter)', 'static CatchBlock'),
  \ dotnet#method('Catch(', 'class ParameterExpression variable, Expression body, Expression filter)', 'static CatchBlock'),
  \ dotnet#method('MakeCatchBlock(', 'class Type type, ParameterExpression variable, Expression body, Expression filter)', 'static CatchBlock'),
  \ dotnet#method('Condition(', 'class Expression test, Expression ifTrue, Expression ifFalse)', 'static ConditionalExpression'),
  \ dotnet#method('Condition(', 'class Expression test, Expression ifTrue, Expression ifFalse, Type type)', 'static ConditionalExpression'),
  \ dotnet#method('IfThen(', 'class Expression test, Expression ifTrue)', 'static ConditionalExpression'),
  \ dotnet#method('IfThenElse(', 'class Expression test, Expression ifTrue, Expression ifFalse)', 'static ConditionalExpression'),
  \ dotnet#method('Constant(', 'object value)', 'static ConstantExpression'),
  \ dotnet#method('Constant(', 'object value, Type type)', 'static ConstantExpression'),
  \ dotnet#method('DebugInfo(', 'class SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn)', 'static DebugInfoExpression'),
  \ dotnet#method('ClearDebugInfo(', 'class SymbolDocumentInfo document)', 'static DebugInfoExpression'),
  \ dotnet#method('Empty(', ')', 'static DefaultExpression'),
  \ dotnet#method('Default(', 'class Type type)', 'static DefaultExpression'),
  \ dotnet#method('MakeDynamic(', 'class Type delegateType, CallSiteBinder binder, Expression[] arguments)', 'static DynamicExpression'),
  \ dotnet#method('MakeDynamic(', 'class Type delegateType, CallSiteBinder binder, IEnumerable arguments)', 'static DynamicExpression'),
  \ dotnet#method('MakeDynamic(', 'class Type delegateType, CallSiteBinder binder, Expression arg0)', 'static DynamicExpression'),
  \ dotnet#method('MakeDynamic(', 'class Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1)', 'static DynamicExpression'),
  \ dotnet#method('MakeDynamic(', 'class Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2)', 'static DynamicExpression'),
  \ dotnet#method('MakeDynamic(', 'class Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3)', 'static DynamicExpression'),
  \ dotnet#method('Dynamic(', 'class CallSiteBinder binder, Type returnType, Expression[] arguments)', 'static DynamicExpression'),
  \ dotnet#method('Dynamic(', 'class CallSiteBinder binder, Type returnType, Expression arg0)', 'static DynamicExpression'),
  \ dotnet#method('Dynamic(', 'class CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1)', 'static DynamicExpression'),
  \ dotnet#method('Dynamic(', 'class CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2)', 'static DynamicExpression'),
  \ dotnet#method('Dynamic(', 'class CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3)', 'static DynamicExpression'),
  \ dotnet#method('Dynamic(', 'class CallSiteBinder binder, Type returnType, IEnumerable arguments)', 'static DynamicExpression'),
  \ dotnet#method('ElementInit(', 'class MethodInfo addMethod, Expression[] arguments)', 'static ElementInit'),
  \ dotnet#method('ElementInit(', 'class MethodInfo addMethod, IEnumerable arguments)', 'static ElementInit'),
  \ dotnet#method('Expression(', 'ExpressionType nodeType, Type type)', 'void'),
  \ dotnet#method('Expression(', ')', 'void'),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_CanReduce(', ')', 'bool'),
  \ dotnet#method('Reduce(', ')', ''),
  \ dotnet#method('VisitChildren(', 'class ExpressionVisitor visitor)', 'famorassem'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem'),
  \ dotnet#method('ReduceAndCheck(', ')', 'Expression'),
  \ dotnet#method('ReduceExtensions(', ')', 'Expression'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Break(', 'class LabelTarget target)', 'static GotoExpression'),
  \ dotnet#method('Break(', 'class LabelTarget target, Expression value)', 'static GotoExpression'),
  \ dotnet#method('Break(', 'class LabelTarget target, Type type)', 'static GotoExpression'),
  \ dotnet#method('Break(', 'class LabelTarget target, Expression value, Type type)', 'static GotoExpression'),
  \ dotnet#method('Continue(', 'class LabelTarget target)', 'static GotoExpression'),
  \ dotnet#method('Continue(', 'class LabelTarget target, Type type)', 'static GotoExpression'),
  \ dotnet#method('Return(', 'class LabelTarget target)', 'static GotoExpression'),
  \ dotnet#method('Return(', 'class LabelTarget target, Type type)', 'static GotoExpression'),
  \ dotnet#method('Return(', 'class LabelTarget target, Expression value)', 'static GotoExpression'),
  \ dotnet#method('Return(', 'class LabelTarget target, Expression value, Type type)', 'static GotoExpression'),
  \ dotnet#method('Goto(', 'class LabelTarget target)', 'static GotoExpression'),
  \ dotnet#method('Goto(', 'class LabelTarget target, Type type)', 'static GotoExpression'),
  \ dotnet#method('Goto(', 'class LabelTarget target, Expression value)', 'static GotoExpression'),
  \ dotnet#method('Goto(', 'class LabelTarget target, Expression value, Type type)', 'static GotoExpression'),
  \ dotnet#method('MakeGoto(', 'GotoExpressionKind kind, LabelTarget target, Expression value, Type type)', 'static GotoExpression'),
  \ dotnet#method('MakeIndex(', 'class Expression instance, PropertyInfo indexer, IEnumerable arguments)', 'static IndexExpression'),
  \ dotnet#method('ArrayAccess(', 'class Expression array, Expression[] indexes)', 'static IndexExpression'),
  \ dotnet#method('ArrayAccess(', 'class Expression array, IEnumerable indexes)', 'static IndexExpression'),
  \ dotnet#method('Property(', 'class Expression instance, string propertyName, Expression[] arguments)', 'static IndexExpression'),
  \ dotnet#method('Property(', 'class Expression instance, PropertyInfo indexer, Expression[] arguments)', 'static IndexExpression'),
  \ dotnet#method('Property(', 'class Expression instance, PropertyInfo indexer, IEnumerable arguments)', 'static IndexExpression'),
  \ dotnet#method('Invoke(', 'class Expression expression, Expression[] arguments)', 'static InvocationExpression'),
  \ dotnet#method('Invoke(', 'class Expression expression, IEnumerable arguments)', 'static InvocationExpression'),
  \ dotnet#method('Label(', 'class LabelTarget target)', 'static LabelExpression'),
  \ dotnet#method('Label(', 'class LabelTarget target, Expression defaultValue)', 'static LabelExpression'),
  \ dotnet#method('Label(', ')', 'static LabelTarget'),
  \ dotnet#method('Label(', 'string name)', 'static LabelTarget'),
  \ dotnet#method('Label(', 'class Type type)', 'static LabelTarget'),
  \ dotnet#method('Label(', 'class Type type, string name)', 'static LabelTarget'),
  \ dotnet#method('Lambda(', 'class Expression body, ParameterExpression[] parameters)', 'static Expression'),
  \ dotnet#method('Lambda(', 'class Expression body, bool tailCall, ParameterExpression[] parameters)', 'static Expression'),
  \ dotnet#method('Lambda(', 'class Expression body, IEnumerable parameters)', 'static Expression'),
  \ dotnet#method('Lambda(', 'class Expression body, bool tailCall, IEnumerable parameters)', 'static Expression'),
  \ dotnet#method('Lambda(', 'class Expression body, string name, IEnumerable parameters)', 'static Expression'),
  \ dotnet#method('Lambda(', 'class Expression body, string name, bool tailCall, IEnumerable parameters)', 'static Expression'),
  \ dotnet#method('Lambda(', 'class Expression body, ParameterExpression[] parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Expression body, bool tailCall, ParameterExpression[] parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Expression body, IEnumerable parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Expression body, bool tailCall, IEnumerable parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Type delegateType, Expression body, ParameterExpression[] parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Type delegateType, Expression body, bool tailCall, ParameterExpression[] parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Type delegateType, Expression body, IEnumerable parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Type delegateType, Expression body, bool tailCall, IEnumerable parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Expression body, string name, IEnumerable parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Expression body, string name, bool tailCall, IEnumerable parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Type delegateType, Expression body, string name, IEnumerable parameters)', 'static LambdaExpression'),
  \ dotnet#method('Lambda(', 'class Type delegateType, Expression body, string name, bool tailCall, IEnumerable parameters)', 'static LambdaExpression'),
  \ dotnet#method('GetFuncType(', 'class Type[] typeArgs)', 'static Type'),
  \ dotnet#method('TryGetFuncType(', 'class Type[] typeArgs, [out] Type& funcType)', 'static bool'),
  \ dotnet#method('GetActionType(', 'class Type[] typeArgs)', 'static Type'),
  \ dotnet#method('TryGetActionType(', 'class Type[] typeArgs, [out] Type& actionType)', 'static bool'),
  \ dotnet#method('GetDelegateType(', 'class Type[] typeArgs)', 'static Type'),
  \ dotnet#method('ListInit(', 'class NewExpression newExpression, Expression[] initializers)', 'static ListInitExpression'),
  \ dotnet#method('ListInit(', 'class NewExpression newExpression, IEnumerable initializers)', 'static ListInitExpression'),
  \ dotnet#method('ListInit(', 'class NewExpression newExpression, MethodInfo addMethod, Expression[] initializers)', 'static ListInitExpression'),
  \ dotnet#method('ListInit(', 'class NewExpression newExpression, MethodInfo addMethod, IEnumerable initializers)', 'static ListInitExpression'),
  \ dotnet#method('ListInit(', 'class NewExpression newExpression, ElementInit[] initializers)', 'static ListInitExpression'),
  \ dotnet#method('ListInit(', 'class NewExpression newExpression, IEnumerable initializers)', 'static ListInitExpression'),
  \ dotnet#method('Loop(', 'class Expression body)', 'static LoopExpression'),
  \ dotnet#method('Loop(', 'class Expression body, LabelTarget break)', 'static LoopExpression'),
  \ dotnet#method('Loop(', 'class Expression body, LabelTarget break, LabelTarget continue)', 'static LoopExpression'),
  \ dotnet#method('Bind(', 'class MemberInfo member, Expression expression)', 'static MemberAssignment'),
  \ dotnet#method('Bind(', 'class MethodInfo propertyAccessor, Expression expression)', 'static MemberAssignment'),
  \ dotnet#method('Field(', 'class Expression expression, FieldInfo field)', 'static MemberExpression'),
  \ dotnet#method('Field(', 'class Expression expression, string fieldName)', 'static MemberExpression'),
  \ dotnet#method('Field(', 'class Expression expression, Type type, string fieldName)', 'static MemberExpression'),
  \ dotnet#method('Property(', 'class Expression expression, string propertyName)', 'static MemberExpression'),
  \ dotnet#method('Property(', 'class Expression expression, Type type, string propertyName)', 'static MemberExpression'),
  \ dotnet#method('Property(', 'class Expression expression, PropertyInfo property)', 'static MemberExpression'),
  \ dotnet#method('Property(', 'class Expression expression, MethodInfo propertyAccessor)', 'static MemberExpression'),
  \ dotnet#method('PropertyOrField(', 'class Expression expression, string propertyOrFieldName)', 'static MemberExpression'),
  \ dotnet#method('MakeMemberAccess(', 'class Expression expression, MemberInfo member)', 'static MemberExpression'),
  \ dotnet#method('MemberInit(', 'class NewExpression newExpression, MemberBinding[] bindings)', 'static MemberInitExpression'),
  \ dotnet#method('MemberInit(', 'class NewExpression newExpression, IEnumerable bindings)', 'static MemberInitExpression'),
  \ dotnet#method('ListBind(', 'class MemberInfo member, ElementInit[] initializers)', 'static MemberListBinding'),
  \ dotnet#method('ListBind(', 'class MemberInfo member, IEnumerable initializers)', 'static MemberListBinding'),
  \ dotnet#method('ListBind(', 'class MethodInfo propertyAccessor, ElementInit[] initializers)', 'static MemberListBinding'),
  \ dotnet#method('ListBind(', 'class MethodInfo propertyAccessor, IEnumerable initializers)', 'static MemberListBinding'),
  \ dotnet#method('MemberBind(', 'class MemberInfo member, MemberBinding[] bindings)', 'static MemberMemberBinding'),
  \ dotnet#method('MemberBind(', 'class MemberInfo member, IEnumerable bindings)', 'static MemberMemberBinding'),
  \ dotnet#method('MemberBind(', 'class MethodInfo propertyAccessor, MemberBinding[] bindings)', 'static MemberMemberBinding'),
  \ dotnet#method('MemberBind(', 'class MethodInfo propertyAccessor, IEnumerable bindings)', 'static MemberMemberBinding'),
  \ dotnet#method('Call(', 'class MethodInfo method, Expression arg0)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class MethodInfo method, Expression arg0, Expression arg1)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class MethodInfo method, Expression arg0, Expression arg1, Expression arg2)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class MethodInfo method, Expression[] arguments)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class MethodInfo method, IEnumerable arguments)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class Expression instance, MethodInfo method)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class Expression instance, MethodInfo method, Expression[] arguments)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class Expression instance, MethodInfo method, Expression arg0, Expression arg1)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class Expression instance, MethodInfo method, Expression arg0, Expression arg1, Expression arg2)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class Expression instance, string methodName, Type[] typeArguments, Expression[] arguments)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class Type type, string methodName, Type[] typeArguments, Expression[] arguments)', 'static MethodCallExpression'),
  \ dotnet#method('Call(', 'class Expression instance, MethodInfo method, IEnumerable arguments)', 'static MethodCallExpression'),
  \ dotnet#method('ArrayIndex(', 'class Expression array, Expression[] indexes)', 'static MethodCallExpression'),
  \ dotnet#method('ArrayIndex(', 'class Expression array, IEnumerable indexes)', 'static MethodCallExpression'),
  \ dotnet#method('NewArrayInit(', 'class Type type, Expression[] initializers)', 'static NewArrayExpression'),
  \ dotnet#method('NewArrayInit(', 'class Type type, IEnumerable initializers)', 'static NewArrayExpression'),
  \ dotnet#method('NewArrayBounds(', 'class Type type, Expression[] bounds)', 'static NewArrayExpression'),
  \ dotnet#method('NewArrayBounds(', 'class Type type, IEnumerable bounds)', 'static NewArrayExpression'),
  \ dotnet#method('New(', 'class ConstrExpressionInfo constrExpression)', 'static NewExpression'),
  \ dotnet#method('New(', 'class ConstrExpressionInfo constrExpression, Expression[] arguments)', 'static NewExpression'),
  \ dotnet#method('New(', 'class ConstrExpressionInfo constrExpression, IEnumerable arguments)', 'static NewExpression'),
  \ dotnet#method('New(', 'class ConstrExpressionInfo constrExpression, IEnumerable arguments, IEnumerable members)', 'static NewExpression'),
  \ dotnet#method('New(', 'class ConstrExpressionInfo constrExpression, IEnumerable arguments, MemberInfo[] members)', 'static NewExpression'),
  \ dotnet#method('New(', 'class Type type)', 'static NewExpression'),
  \ dotnet#method('Parameter(', 'class Type type)', 'static ParameterExpression'),
  \ dotnet#method('Variable(', 'class Type type)', 'static ParameterExpression'),
  \ dotnet#method('Parameter(', 'class Type type, string name)', 'static ParameterExpression'),
  \ dotnet#method('Variable(', 'class Type type, string name)', 'static ParameterExpression'),
  \ dotnet#method('RuntimeVariables(', 'class ParameterExpression[] variables)', 'static RuntimeVariablesExpression'),
  \ dotnet#method('RuntimeVariables(', 'class IEnumerable variables)', 'static RuntimeVariablesExpression'),
  \ dotnet#method('SwitchCase(', 'class Expression body, Expression[] testValues)', 'static SwitchCase'),
  \ dotnet#method('SwitchCase(', 'class Expression body, IEnumerable testValues)', 'static SwitchCase'),
  \ dotnet#method('Switch(', 'class Expression switchValue, SwitchCase[] cases)', 'static SwitchExpression'),
  \ dotnet#method('Switch(', 'class Expression switchValue, Expression defaultBody, SwitchCase[] cases)', 'static SwitchExpression'),
  \ dotnet#method('Switch(', 'class Expression switchValue, Expression defaultBody, MethodInfo comparison, SwitchCase[] cases)', 'static SwitchExpression'),
  \ dotnet#method('Switch(', 'class Type type, Expression switchValue, Expression defaultBody, MethodInfo comparison, SwitchCase[] cases)', 'static SwitchExpression'),
  \ dotnet#method('Switch(', 'class Expression switchValue, Expression defaultBody, MethodInfo comparison, IEnumerable cases)', 'static SwitchExpression'),
  \ dotnet#method('Switch(', 'class Type type, Expression switchValue, Expression defaultBody, MethodInfo comparison, IEnumerable cases)', 'static SwitchExpression'),
  \ dotnet#method('SymbolDocument(', 'string fileName)', 'static SymbolDocumentInfo'),
  \ dotnet#method('SymbolDocument(', 'string fileName, Guid language)', 'static SymbolDocumentInfo'),
  \ dotnet#method('SymbolDocument(', 'string fileName, Guid language, Guid languageVendor)', 'static SymbolDocumentInfo'),
  \ dotnet#method('SymbolDocument(', 'string fileName, Guid language, Guid languageVendor, Guid documentType)', 'static SymbolDocumentInfo'),
  \ dotnet#method('TryFault(', 'class Expression body, Expression fault)', 'static TryExpression'),
  \ dotnet#method('TryFinally(', 'class Expression body, Expression finally)', 'static TryExpression'),
  \ dotnet#method('TryCatch(', 'class Expression body, CatchBlock[] handlers)', 'static TryExpression'),
  \ dotnet#method('TryCatchFinally(', 'class Expression body, Expression finally, CatchBlock[] handlers)', 'static TryExpression'),
  \ dotnet#method('MakeTry(', 'class Type type, Expression body, Expression finally, Expression fault, IEnumerable handlers)', 'static TryExpression'),
  \ dotnet#method('TypeIs(', 'class Expression expression, Type type)', 'static TypeBinaryExpression'),
  \ dotnet#method('TypeEqual(', 'class Expression expression, Type type)', 'static TypeBinaryExpression'),
  \ dotnet#method('MakeUnary(', 'ExpressionType unaryType, Expression operand, Type type)', 'static UnaryExpression'),
  \ dotnet#method('MakeUnary(', 'ExpressionType unaryType, Expression operand, Type type, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('Negate(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('Negate(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('UnaryPlus(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('UnaryPlus(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('NegateChecked(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('NegateChecked(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('Not(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('Not(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('IsFalse(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('IsFalse(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('IsTrue(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('IsTrue(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('OnesComplement(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('OnesComplement(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('TypeAs(', 'class Expression expression, Type type)', 'static UnaryExpression'),
  \ dotnet#method('Unbox(', 'class Expression expression, Type type)', 'static UnaryExpression'),
  \ dotnet#method('Convert(', 'class Expression expression, Type type)', 'static UnaryExpression'),
  \ dotnet#method('Convert(', 'class Expression expression, Type type, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('ConvertChecked(', 'class Expression expression, Type type)', 'static UnaryExpression'),
  \ dotnet#method('ConvertChecked(', 'class Expression expression, Type type, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('ArrayLength(', 'class Expression array)', 'static UnaryExpression'),
  \ dotnet#method('Quote(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('Rethrow(', ')', 'static UnaryExpression'),
  \ dotnet#method('Rethrow(', 'class Type type)', 'static UnaryExpression'),
  \ dotnet#method('Throw(', 'class Expression value)', 'static UnaryExpression'),
  \ dotnet#method('Throw(', 'class Expression value, Type type)', 'static UnaryExpression'),
  \ dotnet#method('Increment(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('Increment(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('Decrement(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('Decrement(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('PreIncrementAssign(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('PreIncrementAssign(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('PreDecrementAssign(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('PreDecrementAssign(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('PostIncrementAssign(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('PostIncrementAssign(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('PostDecrementAssign(', 'class Expression expression)', 'static UnaryExpression'),
  \ dotnet#method('PostDecrementAssign(', 'class Expression expression, MethodInfo method)', 'static UnaryExpression'),
  \ dotnet#method('Expression(', ')', 'static void .'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('CanReduce', 'bool'),
  \ ])

call dotnet#class('BinaryExpression', 'Expression', [ 
  \ dotnet#method('get_CanReduce(', ')', 'bool'),
  \ dotnet#method('get_Right(', ')', 'Expression'),
  \ dotnet#method('get_Left(', ')', 'Expression'),
  \ dotnet#method('get_Method(', ')', 'MethodInfo'),
  \ dotnet#method('Update(', 'class Expression left, LambdaExpression conversion, Expression right)', 'BinaryExpression'),
  \ dotnet#method('Reduce(', ')', 'Expression'),
  \ dotnet#method('get_Conversion(', ')', 'LambdaExpression'),
  \ dotnet#method('get_IsLifted(', ')', 'bool'),
  \ dotnet#method('get_IsLiftedToNull(', ')', 'bool'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#prop('CanReduce', 'bool'),
  \ dotnet#prop('Right', 'Expression'),
  \ dotnet#prop('Left', 'Expression'),
  \ dotnet#prop('Method', 'MethodInfo'),
  \ dotnet#prop('Conversion', 'LambdaExpression'),
  \ dotnet#prop('IsLifted', 'bool'),
  \ dotnet#prop('IsLiftedToNull', 'bool'),
  \ ])

call dotnet#class('BlockExpression', 'Expression', [ 
  \ dotnet#method('get_Expressions(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_Variables(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_Result(', ')', 'Expression'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('Update(', 'class IEnumerable variables, IEnumerable expressions)', 'BlockExpression'),
  \ dotnet#method('BlockExpression(', ')', 'void'),
  \ dotnet#prop('Expressions', 'ReadOnlyCollection'),
  \ dotnet#prop('Variables', 'ReadOnlyCollection'),
  \ dotnet#prop('Result', 'Expression'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Type', 'Type'),
  \ ])

call dotnet#class('CatchBlock', 'Object', [ 
  \ dotnet#method('get_Variable(', ')', 'ParameterExpression'),
  \ dotnet#method('get_Test(', ')', 'Type'),
  \ dotnet#method('get_Body(', ')', 'Expression'),
  \ dotnet#method('get_Filter(', ')', 'Expression'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Update(', 'class ParameterExpression variable, Expression filter, Expression body)', 'CatchBlock'),
  \ dotnet#prop('Variable', 'ParameterExpression'),
  \ dotnet#prop('Test', 'Type'),
  \ dotnet#prop('Body', 'Expression'),
  \ dotnet#prop('Filter', 'Expression'),
  \ ])

call dotnet#class('ConditionalExpression', 'Expression', [ 
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_Test(', ')', 'Expression'),
  \ dotnet#method('get_IfTrue(', ')', 'Expression'),
  \ dotnet#method('get_IfFalse(', ')', 'Expression'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class Expression test, Expression ifTrue, Expression ifFalse)', 'ConditionalExpression'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('Test', 'Expression'),
  \ dotnet#prop('IfTrue', 'Expression'),
  \ dotnet#prop('IfFalse', 'Expression'),
  \ ])

call dotnet#class('ConstantExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Value', 'object'),
  \ ])

call dotnet#class('DebugInfoExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_StartLine(', ')', 'int32'),
  \ dotnet#method('get_StartColumn(', ')', 'int32'),
  \ dotnet#method('get_EndLine(', ')', 'int32'),
  \ dotnet#method('get_EndColumn(', ')', 'int32'),
  \ dotnet#method('get_Document(', ')', 'SymbolDocumentInfo'),
  \ dotnet#method('get_IsClear(', ')', 'bool'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('StartLine', 'int32'),
  \ dotnet#prop('StartColumn', 'int32'),
  \ dotnet#prop('EndLine', 'int32'),
  \ dotnet#prop('EndColumn', 'int32'),
  \ dotnet#prop('Document', 'SymbolDocumentInfo'),
  \ dotnet#prop('IsClear', 'bool'),
  \ ])

call dotnet#class('DefaultExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ ])

call dotnet#class('DynamicExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Binder(', ')', 'CallSiteBinder'),
  \ dotnet#method('get_DelegateType(', ')', 'Type'),
  \ dotnet#method('get_Arguments(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class IEnumerable arguments)', 'DynamicExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Binder', 'CallSiteBinder'),
  \ dotnet#prop('DelegateType', 'Type'),
  \ dotnet#prop('Arguments', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('ElementInit', 'Object', [ 
  \ dotnet#method('get_AddMethod(', ')', 'MethodInfo'),
  \ dotnet#method('get_Arguments(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Update(', 'class IEnumerable arguments)', 'ElementInit'),
  \ dotnet#prop('AddMethod', 'MethodInfo'),
  \ dotnet#prop('Arguments', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('GotoExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Value(', ')', 'Expression'),
  \ dotnet#method('get_Target(', ')', 'LabelTarget'),
  \ dotnet#method('get_Kind(', ')', 'GotoExpressionKind'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class LabelTarget target, Expression value)', 'GotoExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Value', 'Expression'),
  \ dotnet#prop('Target', 'LabelTarget'),
  \ dotnet#prop('Kind', 'GotoExpressionKind'),
  \ ])

call dotnet#class('IndexExpression', 'Expression', [ 
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_Object(', ')', 'Expression'),
  \ dotnet#method('get_Indexer(', ')', 'PropertyInfo'),
  \ dotnet#method('get_Arguments(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Update(', 'class Expression object, IEnumerable arguments)', 'IndexExpression'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('Object', 'Expression'),
  \ dotnet#prop('Indexer', 'PropertyInfo'),
  \ dotnet#prop('Arguments', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('InvocationExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Expression(', ')', 'Expression'),
  \ dotnet#method('get_Arguments(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Update(', 'class Expression expression, IEnumerable arguments)', 'InvocationExpression'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Expression', 'Expression'),
  \ dotnet#prop('Arguments', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('LabelExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Target(', ')', 'LabelTarget'),
  \ dotnet#method('get_DefaultValue(', ')', 'Expression'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class LabelTarget target, Expression defaultValue)', 'LabelExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Target', 'LabelTarget'),
  \ dotnet#prop('DefaultValue', 'Expression'),
  \ ])

call dotnet#class('LabelTarget', 'Object', [ 
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Type(', ')', 'Type'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Type', 'Type'),
  \ ])

call dotnet#class('LambdaExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Parameters(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Body(', ')', 'Expression'),
  \ dotnet#method('get_ReturnType(', ')', 'Type'),
  \ dotnet#method('get_TailCall(', ')', 'bool'),
  \ dotnet#method('Compile(', ')', 'Delegate'),
  \ dotnet#method('Compile(', 'class DebugInfoGenerator debugInfoGenerator)', 'Delegate'),
  \ dotnet#method('CompileToMethod(', 'class MethodBuilder method)', 'void'),
  \ dotnet#method('CompileToMethod(', 'class MethodBuilder method, DebugInfoGenerator debugInfoGenerator)', 'void'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Parameters', 'ReadOnlyCollection'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Body', 'Expression'),
  \ dotnet#prop('ReturnType', 'Type'),
  \ dotnet#prop('TailCall', 'bool'),
  \ ])

call dotnet#class('Expression', 'LambdaExpression', [ 
  \ dotnet#method('Compile(', ')', '!TDelegate'),
  \ dotnet#method('Compile(', 'class DebugInfoGenerator debugInfoGenerator)', '!TDelegate'),
  \ dotnet#method('Update(', 'class Expression body, IEnumerable parameters)', 'Expression'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ ])

call dotnet#class('ListInitExpression', 'Expression', [ 
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_CanReduce(', ')', 'bool'),
  \ dotnet#method('get_NewExpression(', ')', 'NewExpression'),
  \ dotnet#method('get_Initializers(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Reduce(', ')', 'Expression'),
  \ dotnet#method('Update(', 'class NewExpression newExpression, IEnumerable initializers)', 'ListInitExpression'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('CanReduce', 'bool'),
  \ dotnet#prop('NewExpression', 'NewExpression'),
  \ dotnet#prop('Initializers', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('LoopExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Body(', ')', 'Expression'),
  \ dotnet#method('get_BreakLabel(', ')', 'LabelTarget'),
  \ dotnet#method('get_ContinueLabel(', ')', 'LabelTarget'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class LabelTarget breakLabel, LabelTarget continueLabel, Expression body)', 'LoopExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Body', 'Expression'),
  \ dotnet#prop('BreakLabel', 'LabelTarget'),
  \ dotnet#prop('ContinueLabel', 'LabelTarget'),
  \ ])

call dotnet#class('MemberBinding', 'Object', [ 
  \ dotnet#method('MemberBinding(', 'MemberBindingType type, MemberInfo member)', 'void'),
  \ dotnet#method('get_BindingType(', ')', 'MemberBindingType'),
  \ dotnet#method('get_Member(', ')', 'MemberInfo'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('BindingType', 'MemberBindingType'),
  \ dotnet#prop('Member', 'MemberInfo'),
  \ ])

call dotnet#class('MemberAssignment', 'MemberBinding', [ 
  \ dotnet#method('get_Expression(', ')', 'Expression'),
  \ dotnet#method('Update(', 'class Expression expression)', 'MemberAssignment'),
  \ dotnet#prop('Expression', 'Expression'),
  \ ])

call dotnet#class('MemberExpression', 'Expression', [ 
  \ dotnet#method('get_Member(', ')', 'MemberInfo'),
  \ dotnet#method('get_Expression(', ')', 'Expression'),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class Expression expression)', 'MemberExpression'),
  \ dotnet#prop('Member', 'MemberInfo'),
  \ dotnet#prop('Expression', 'Expression'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ ])

call dotnet#class('MemberInitExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_CanReduce(', ')', 'bool'),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_NewExpression(', ')', 'NewExpression'),
  \ dotnet#method('get_Bindings(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Reduce(', ')', 'Expression'),
  \ dotnet#method('Update(', 'class NewExpression newExpression, IEnumerable bindings)', 'MemberInitExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('CanReduce', 'bool'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('NewExpression', 'NewExpression'),
  \ dotnet#prop('Bindings', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('MemberListBinding', 'MemberBinding', [ 
  \ dotnet#method('get_Initializers(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Update(', 'class IEnumerable initializers)', 'MemberListBinding'),
  \ dotnet#prop('Initializers', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('MemberMemberBinding', 'MemberBinding', [ 
  \ dotnet#method('get_Bindings(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Update(', 'class IEnumerable bindings)', 'MemberMemberBinding'),
  \ dotnet#prop('Bindings', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('MethodCallExpression', 'Expression', [ 
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_Method(', ')', 'MethodInfo'),
  \ dotnet#method('get_Object(', ')', 'Expression'),
  \ dotnet#method('get_Arguments(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Update(', 'class Expression object, IEnumerable arguments)', 'MethodCallExpression'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('Method', 'MethodInfo'),
  \ dotnet#prop('Object', 'Expression'),
  \ dotnet#prop('Arguments', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('NewArrayExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_Expressions(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class IEnumerable expressions)', 'NewArrayExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('Expressions', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('NewExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_ConstrNewExpression(', ')', 'ConstrNewExpressionInfo'),
  \ dotnet#method('get_Arguments(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_Members(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class IEnumerable arguments)', 'NewExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('ConstrNewExpression', 'ConstrNewExpressionInfo'),
  \ dotnet#prop('Arguments', 'ReadOnlyCollection'),
  \ dotnet#prop('Members', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('ParameterExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_IsByRef(', ')', 'bool'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('IsByRef', 'bool'),
  \ ])

call dotnet#class('RuntimeVariablesExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Variables(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class IEnumerable variables)', 'RuntimeVariablesExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Variables', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('SwitchCase', 'Object', [ 
  \ dotnet#method('get_TestValues(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_Body(', ')', 'Expression'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Update(', 'class IEnumerable testValues, Expression body)', 'SwitchCase'),
  \ dotnet#prop('TestValues', 'ReadOnlyCollection'),
  \ dotnet#prop('Body', 'Expression'),
  \ ])

call dotnet#class('SwitchExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_SwitchValue(', ')', 'Expression'),
  \ dotnet#method('get_Cases(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_DefaultBody(', ')', 'Expression'),
  \ dotnet#method('get_Comparison(', ')', 'MethodInfo'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class Expression switchValue, IEnumerable cases, Expression defaultBody)', 'SwitchExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('SwitchValue', 'Expression'),
  \ dotnet#prop('Cases', 'ReadOnlyCollection'),
  \ dotnet#prop('DefaultBody', 'Expression'),
  \ dotnet#prop('Comparison', 'MethodInfo'),
  \ ])

call dotnet#class('SymbolDocumentInfo', 'Object', [ 
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('get_Language(', ')', ''),
  \ dotnet#method('get_LanguageVendor(', ')', ''),
  \ dotnet#method('get_DocumentType(', ')', ''),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('Language', 'Guid'),
  \ dotnet#prop('LanguageVendor', 'Guid'),
  \ dotnet#prop('DocumentType', 'Guid'),
  \ ])

call dotnet#class('TryExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Body(', ')', 'Expression'),
  \ dotnet#method('get_Handlers(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_Finally(', ')', 'Expression'),
  \ dotnet#method('get_Fault(', ')', 'Expression'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class Expression body, IEnumerable handlers, Expression finally, Expression fault)', 'TryExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Body', 'Expression'),
  \ dotnet#prop('Handlers', 'ReadOnlyCollection'),
  \ dotnet#prop('Finally', 'Expression'),
  \ dotnet#prop('Fault', 'Expression'),
  \ ])

call dotnet#class('TypeBinaryExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Expression(', ')', 'Expression'),
  \ dotnet#method('get_TypeOperand(', ')', 'Type'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('Update(', 'class Expression expression)', 'TypeBinaryExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Expression', 'Expression'),
  \ dotnet#prop('TypeOperand', 'Type'),
  \ ])

call dotnet#class('UnaryExpression', 'Expression', [ 
  \ dotnet#method('get_Type(', ')', ''),
  \ dotnet#method('get_NodeType(', ')', ''),
  \ dotnet#method('get_Operand(', ')', 'Expression'),
  \ dotnet#method('get_Method(', ')', 'MethodInfo'),
  \ dotnet#method('get_IsLifted(', ')', 'bool'),
  \ dotnet#method('get_IsLiftedToNull(', ')', 'bool'),
  \ dotnet#method('Accept(', 'class ExpressionVisitor visitor)', 'famorassem Expression'),
  \ dotnet#method('get_CanReduce(', ')', 'bool'),
  \ dotnet#method('Reduce(', ')', 'Expression'),
  \ dotnet#method('Update(', 'class Expression operand)', 'UnaryExpression'),
  \ dotnet#prop('Type', 'Type'),
  \ dotnet#prop('NodeType', 'ExpressionType'),
  \ dotnet#prop('Operand', 'Expression'),
  \ dotnet#prop('Method', 'MethodInfo'),
  \ dotnet#prop('IsLifted', 'bool'),
  \ dotnet#prop('IsLiftedToNull', 'bool'),
  \ dotnet#prop('CanReduce', 'bool'),
  \ ])

