call dotnet#namespace('System.IO')

call dotnet#class('Stream', 'MarshalByRefObject', [ 
  \ dotnet#method('Stream(', 'class Stream stream)', 'void'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_CanTimeout(', ')', 'bool'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('get_ReadTimeout(', ')', 'int32'),
  \ dotnet#method('set_ReadTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_WriteTimeout(', ')', 'int32'),
  \ dotnet#method('set_WriteTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Read(', '[in][out] uint8[] bytes, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('ReadByte(', ')', 'int32'),
  \ dotnet#method('BeginRead(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndRead(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin origin)', 'int64'),
  \ dotnet#method('SetLength(', 'int64 length)', 'void'),
  \ dotnet#method('Write(', 'uint8[] bytes, int32 offset, int32 count)', 'void'),
  \ dotnet#method('WriteByte(', 'uint8 b)', 'void'),
  \ dotnet#method('BeginWrite(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndWrite(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('CanTimeout', 'bool'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ dotnet#prop('ReadTimeout', 'int32'),
  \ dotnet#prop('WriteTimeout', 'int32'),
  \ dotnet#method('get_CanRead(', ')', 'abstract bool'),
  \ dotnet#method('get_CanSeek(', ')', 'abstract bool'),
  \ dotnet#method('get_CanTimeout(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'abstract bool'),
  \ dotnet#method('get_Length(', ')', 'abstract int64'),
  \ dotnet#method('get_Position(', ')', 'abstract int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'abstract void'),
  \ dotnet#method('get_ReadTimeout(', ')', 'int32'),
  \ dotnet#method('set_ReadTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_WriteTimeout(', ')', 'int32'),
  \ dotnet#method('set_WriteTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('CopyTo(', 'class Stream destination)', 'void'),
  \ dotnet#method('CopyTo(', 'class Stream destination, int32 bufferSize)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Flush(', ')', 'abstract void'),
  \ dotnet#method('CreateWaitHandle(', ')', 'family'),
  \ dotnet#method('BeginRead(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback callback, object state)', ''),
  \ dotnet#method('EndRead(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('BeginWrite(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback callback, object state)', ''),
  \ dotnet#method('EndWrite(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin origin)', 'abstract int64'),
  \ dotnet#method('SetLength(', 'int64 value)', 'abstract void'),
  \ dotnet#method('Read(', '[in][out] uint8[] buffer, int32 offset, int32 count)', 'abstract int32'),
  \ dotnet#method('ReadByte(', ')', 'int32'),
  \ dotnet#method('Write(', 'uint8[] buffer, int32 offset, int32 count)', 'abstract void'),
  \ dotnet#method('WriteByte(', 'uint8 value)', 'void'),
  \ dotnet#method('Synchronized(', 'class Stream stream)', 'static Stream'),
  \ dotnet#method('ObjectInvariant(', ')', 'void'),
  \ dotnet#method('BlockingBeginRead(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BlockingEndRead(', 'class IAsyncResult asyncResult)', 'static int32'),
  \ dotnet#method('BlockingBeginWrite(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BlockingEndWrite(', 'class IAsyncResult asyncResult)', 'static void'),
  \ dotnet#method('Stream(', ')', 'void'),
  \ dotnet#method('Stream(', ')', 'static void .'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('CanTimeout', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ dotnet#prop('ReadTimeout', 'int32'),
  \ dotnet#prop('WriteTimeout', 'int32'),
  \ ])

call dotnet#class('BinaryReader', 'Object', [ 
  \ dotnet#method('BinaryReader(', 'class Stream input)', 'void'),
  \ dotnet#method('BinaryReader(', 'class Stream input, Encoding encoding)', 'void'),
  \ dotnet#method('get_BaseStream(', ')', ''),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('PeekChar(', ')', 'int32'),
  \ dotnet#method('Read(', ')', 'int32'),
  \ dotnet#method('ReadBoolean(', ')', 'bool'),
  \ dotnet#method('ReadByte(', ')', 'uint8'),
  \ dotnet#method('ReadSByte(', ')', 'int8'),
  \ dotnet#method('ReadChar(', ')', 'char'),
  \ dotnet#method('ReadInt16(', ')', 'int16'),
  \ dotnet#method('ReadUInt16(', ')', 'uint16'),
  \ dotnet#method('ReadInt32(', ')', 'int32'),
  \ dotnet#method('ReadUInt32(', ')', 'uint32'),
  \ dotnet#method('ReadInt64(', ')', 'int64'),
  \ dotnet#method('ReadUInt64(', ')', 'uint64'),
  \ dotnet#method('ReadSingle(', ')', 'float32'),
  \ dotnet#method('ReadDouble(', ')', 'float64'),
  \ dotnet#method('ReadDecimal(', ')', ''),
  \ dotnet#method('ReadString(', ')', 'string'),
  \ dotnet#method('Read(', 'char[] buffer, int32 index, int32 count)', 'int32'),
  \ dotnet#method('ReadChars(', 'int32 count)', 'char[]'),
  \ dotnet#method('Read(', 'uint8[] buffer, int32 index, int32 count)', 'int32'),
  \ dotnet#method('ReadBytes(', 'int32 count)', 'uint8[]'),
  \ dotnet#method('FillBuffer(', 'int32 numBytes)', 'void'),
  \ dotnet#method('Read7BitEncodedInt(', ')', 'famorassem int32'),
  \ dotnet#prop('BaseStream', 'Stream'),
  \ ])

call dotnet#class('BinaryWriter', 'Object', [ 
  \ dotnet#field('OutStream', 'Stream'),
  \ dotnet#method('BinaryWriter(', ')', 'void'),
  \ dotnet#method('BinaryWriter(', 'class Stream output)', 'void'),
  \ dotnet#method('BinaryWriter(', 'class Stream output, Encoding encoding)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_BaseStream(', ')', ''),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Seek(', 'int32 offset, SeekOrigin origin)', 'int64'),
  \ dotnet#method('Write(', 'bool value)', 'void'),
  \ dotnet#method('Write(', 'uint8 value)', 'void'),
  \ dotnet#method('Write(', 'int8 value)', 'void'),
  \ dotnet#method('Write(', 'uint8[] buffer)', 'void'),
  \ dotnet#method('Write(', 'uint8[] buffer, int32 index, int32 count)', 'void'),
  \ dotnet#method('Write(', 'char ch)', 'void'),
  \ dotnet#method('Write(', 'char[] chars)', 'void'),
  \ dotnet#method('Write(', 'char[] chars, int32 index, int32 count)', 'void'),
  \ dotnet#method('Write(', 'float64 value)', 'void'),
  \ dotnet#method('Write(', 'Decimal value)', 'void'),
  \ dotnet#method('Write(', 'int16 value)', 'void'),
  \ dotnet#method('Write(', 'uint16 value)', 'void'),
  \ dotnet#method('Write(', 'int32 value)', 'void'),
  \ dotnet#method('Write(', 'uint32 value)', 'void'),
  \ dotnet#method('Write(', 'int64 value)', 'void'),
  \ dotnet#method('Write(', 'uint64 value)', 'void'),
  \ dotnet#method('Write(', 'float32 value)', 'void'),
  \ dotnet#method('Write(', 'string value)', 'void'),
  \ dotnet#method('Write7BitEncodedInt(', 'int32 value)', 'void'),
  \ dotnet#method('BinaryWriter(', ')', 'static void .'),
  \ dotnet#prop('BaseStream', 'Stream'),
  \ ])

call dotnet#class('BufferedStream', 'Stream', [ 
  \ dotnet#method('BufferedStream(', ')', 'void'),
  \ dotnet#method('BufferedStream(', 'class Stream stream)', 'void'),
  \ dotnet#method('BufferedStream(', 'class Stream stream, int32 bufferSize)', 'void'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Read(', '[in][out] uint8[] array, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('ReadByte(', ')', 'int32'),
  \ dotnet#method('Write(', 'uint8[] array, int32 offset, int32 count)', 'void'),
  \ dotnet#method('WriteByte(', 'uint8 value)', 'void'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin origin)', 'int64'),
  \ dotnet#method('SetLength(', 'int64 value)', 'void'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ ])

call dotnet#class('DirDirectoryy', 'Object', [ 
  \ dotnet#field('fullPath', 'string'),
  \ dotnet#field('userPath', 'string'),
  \ dotnet#field('searchOption', 'SearchOption'),
  \ dotnet#method('Directory(', ')', 'void'),
  \ dotnet#method('Directory(', 'string fullPath, string userPath, SearchOption searchOption)', 'void'),
  \ dotnet#method('GetParent(', 'string path)', 'static DirDirectoryyInfo'),
  \ dotnet#method('CreateDirDirectoryy(', 'string path)', 'static DirDirectoryyInfo'),
  \ dotnet#method('CreateDirDirectoryy(', 'string path, DirDirectoryySecurity dirDirectoryySecurity)', 'static DirDirectoryyInfo'),
  \ dotnet#method('GetDemandDir(', 'string fullPath, bool thisDirOnly)', 'static string'),
  \ dotnet#method('InternalCreateDirDirectoryy(', 'string fullPath, string path, object dirSecurityObj)', 'static void'),
  \ dotnet#method('Exists(', 'string path)', 'static bool'),
  \ dotnet#method('InternalExists(', 'string path)', 'static bool'),
  \ dotnet#method('InternalExists(', 'string path, [out] int32& lastError)', 'static bool'),
  \ dotnet#method('SetCreationTime(', 'string path, DateTime creationTime)', 'static void'),
  \ dotnet#method('SetCreationTimeUtc(', 'string path, DateTime creationTimeUtc)', 'static void'),
  \ dotnet#method('GetCreationTime(', 'string path)', 'static DateTime'),
  \ dotnet#method('GetCreationTimeUtc(', 'string path)', 'static DateTime'),
  \ dotnet#method('SetLastWriteTime(', 'string path, DateTime lastWriteTime)', 'static void'),
  \ dotnet#method('SetLastWriteTimeUtc(', 'string path, DateTime lastWriteTimeUtc)', 'static void'),
  \ dotnet#method('GetLastWriteTime(', 'string path)', 'static DateTime'),
  \ dotnet#method('GetLastWriteTimeUtc(', 'string path)', 'static DateTime'),
  \ dotnet#method('SetLastAccessTime(', 'string path, DateTime lastAccessTime)', 'static void'),
  \ dotnet#method('SetLastAccessTimeUtc(', 'string path, DateTime lastAccessTimeUtc)', 'static void'),
  \ dotnet#method('GetLastAccessTime(', 'string path)', 'static DateTime'),
  \ dotnet#method('GetLastAccessTimeUtc(', 'string path)', 'static DateTime'),
  \ dotnet#method('GetAccessControl(', 'string path)', 'static DirDirectoryySecurity'),
  \ dotnet#method('GetAccessControl(', 'string path, AccessControlSections includeSections)', 'static DirDirectoryySecurity'),
  \ dotnet#method('SetAccessControl(', 'string path, DirDirectoryySecurity dirDirectoryySecurity)', 'static void'),
  \ dotnet#method('GetFiles(', 'string path)', 'static string[]'),
  \ dotnet#method('GetFiles(', 'string path, string searchPattern)', 'static string[]'),
  \ dotnet#method('GetFiles(', 'string path, string searchPattern, SearchOption searchOption)', 'static string[]'),
  \ dotnet#method('GetDirDirectoryies(', 'string path)', 'static string[]'),
  \ dotnet#method('GetDirDirectoryies(', 'string path, string searchPattern)', 'static string[]'),
  \ dotnet#method('GetDirDirectoryies(', 'string path, string searchPattern, SearchOption searchOption)', 'static string[]'),
  \ dotnet#method('GetFileSystemEntries(', 'string path)', 'static string[]'),
  \ dotnet#method('GetFileSystemEntries(', 'string path, string searchPattern)', 'static string[]'),
  \ dotnet#method('GetFileSystemEntries(', 'string path, string searchPattern, SearchOption searchOption)', 'static string[]'),
  \ dotnet#method('InternalGetFileDirDirectoryyNames(', 'string path, string userPathOriginal, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption)', 'static string[]'),
  \ dotnet#method('EnumerateDirDirectoryies(', 'string path)', 'static IEnumerable'),
  \ dotnet#method('EnumerateDirDirectoryies(', 'string path, string searchPattern)', 'static IEnumerable'),
  \ dotnet#method('EnumerateDirDirectoryies(', 'string path, string searchPattern, SearchOption searchOption)', 'static IEnumerable'),
  \ dotnet#method('EnumerateFiles(', 'string path)', 'static IEnumerable'),
  \ dotnet#method('EnumerateFiles(', 'string path, string searchPattern)', 'static IEnumerable'),
  \ dotnet#method('EnumerateFiles(', 'string path, string searchPattern, SearchOption searchOption)', 'static IEnumerable'),
  \ dotnet#method('EnumerateFileSystemEntries(', 'string path)', 'static IEnumerable'),
  \ dotnet#method('EnumerateFileSystemEntries(', 'string path, string searchPattern)', 'static IEnumerable'),
  \ dotnet#method('EnumerateFileSystemEntries(', 'string path, string searchPattern, SearchOption searchOption)', 'static IEnumerable'),
  \ dotnet#method('GetLogicalDrives(', ')', 'static string[]'),
  \ dotnet#method('GetDirDirectoryyRoot(', 'string path)', 'static string'),
  \ dotnet#method('InternalGetDirDirectoryyRoot(', 'string path)', 'static string'),
  \ dotnet#method('GetCurrentDirDirectoryy(', ')', 'static string'),
  \ dotnet#method('SetCurrentDirDirectoryy(', 'string path)', 'static void'),
  \ dotnet#method('Move(', 'string sourceDirName, string destDirName)', 'static void'),
  \ dotnet#method('Delete(', 'string path)', 'static void'),
  \ dotnet#method('Delete(', 'string path, bool recursive)', 'static void'),
  \ dotnet#method('Delete(', 'string fullPath, string userPath, bool recursive)', 'static void'),
  \ ])

call dotnet#class('FileSystemInfo', 'MarshalByRefObject', [ 
  \ dotnet#field('_data', 'Win32Native/WIN32_FILE_ATTRIBUTE_DATA'),
  \ dotnet#field('_dataInitialised', 'int32'),
  \ dotnet#field('FullPath', 'string'),
  \ dotnet#field('OriginalPath', 'string'),
  \ dotnet#method('FileSystemInfo(', ')', 'void'),
  \ dotnet#method('FileSystemInfo(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('InitializeFrom(', 'class Win32Native/WIN32_FIND_DATA findData)', 'void'),
  \ dotnet#method('get_FullName(', ')', 'string'),
  \ dotnet#method('get_Extension(', ')', 'string'),
  \ dotnet#method('get_Name(', ')', 'abstract string'),
  \ dotnet#method('get_Exists(', ')', 'abstract bool'),
  \ dotnet#method('Delete(', ')', 'abstract void'),
  \ dotnet#method('get_CreationTime(', ')', 'DateTime'),
  \ dotnet#method('set_CreationTime(', 'DateTime value)', 'void'),
  \ dotnet#method('get_CreationTimeUtc(', ')', 'DateTime'),
  \ dotnet#method('set_CreationTimeUtc(', 'DateTime value)', 'void'),
  \ dotnet#method('get_LastAccessTime(', ')', 'DateTime'),
  \ dotnet#method('set_LastAccessTime(', 'DateTime value)', 'void'),
  \ dotnet#method('get_LastAccessTimeUtc(', ')', 'DateTime'),
  \ dotnet#method('set_LastAccessTimeUtc(', 'DateTime value)', 'void'),
  \ dotnet#method('get_LastWriteTime(', ')', 'DateTime'),
  \ dotnet#method('set_LastWriteTime(', 'DateTime value)', 'void'),
  \ dotnet#method('get_LastWriteTimeUtc(', ')', 'DateTime'),
  \ dotnet#method('set_LastWriteTimeUtc(', 'DateTime value)', 'void'),
  \ dotnet#method('Refresh(', ')', 'void'),
  \ dotnet#method('get_Attributes(', ')', 'FileAttributes'),
  \ dotnet#method('set_Attributes(', 'FileAttributes value)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_DisplayPath(', ')', 'string'),
  \ dotnet#method('set_DisplayPath(', 'string value)', 'void'),
  \ dotnet#prop('FullName', 'string'),
  \ dotnet#prop('Extension', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Exists', 'bool'),
  \ dotnet#prop('CreationTime', 'DateTime'),
  \ dotnet#prop('CreationTimeUtc', 'DateTime'),
  \ dotnet#prop('LastAccessTime', 'DateTime'),
  \ dotnet#prop('LastAccessTimeUtc', 'DateTime'),
  \ dotnet#prop('LastWriteTime', 'DateTime'),
  \ dotnet#prop('LastWriteTimeUtc', 'DateTime'),
  \ dotnet#prop('Attributes', 'FileAttributes'),
  \ dotnet#prop('DisplayPath', 'string'),
  \ ])

call dotnet#class('DirDirectoryInfoyInfo', 'FileSystemInfo', [ 
  \ dotnet#method('DirectoryInfo(', 'string path)', 'void'),
  \ dotnet#method('DirectoryInfo(', 'string fullPath, bool junk)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Parent(', ')', 'DirDirectoryInfoyInfo'),
  \ dotnet#method('CreateSubdirDirectoryInfoy(', 'string path)', 'DirDirectoryInfoyInfo'),
  \ dotnet#method('CreateSubdirDirectoryInfoy(', 'string path, DirDirectoryInfoySecurity dirDirectoryInfoySecurity)', 'DirDirectoryInfoyInfo'),
  \ dotnet#method('Create(', ')', 'void'),
  \ dotnet#method('Create(', 'class DirDirectoryInfoySecurity dirDirectoryInfoySecurity)', 'void'),
  \ dotnet#method('get_Exists(', ')', 'bool'),
  \ dotnet#method('GetAccessControl(', ')', 'DirDirectoryInfoySecurity'),
  \ dotnet#method('GetAccessControl(', 'AccessControlSections includeSections)', 'DirDirectoryInfoySecurity'),
  \ dotnet#method('SetAccessControl(', 'class DirDirectoryInfoySecurity dirDirectoryInfoySecurity)', 'void'),
  \ dotnet#method('GetFiles(', 'string searchPattern)', 'FileInfo[]'),
  \ dotnet#method('GetFiles(', 'string searchPattern, SearchOption searchOption)', 'FileInfo[]'),
  \ dotnet#method('GetFiles(', ')', 'FileInfo[]'),
  \ dotnet#method('GetDirDirectoryInfoies(', ')', 'DirDirectoryInfoyInfo[]'),
  \ dotnet#method('GetFileSystemInfos(', 'string searchPattern)', 'FileSystemInfo[]'),
  \ dotnet#method('GetFileSystemInfos(', 'string searchPattern, SearchOption searchOption)', 'FileSystemInfo[]'),
  \ dotnet#method('GetFileSystemInfos(', ')', 'FileSystemInfo[]'),
  \ dotnet#method('GetDirDirectoryInfoies(', 'string searchPattern)', 'DirDirectoryInfoyInfo[]'),
  \ dotnet#method('GetDirDirectoryInfoies(', 'string searchPattern, SearchOption searchOption)', 'DirDirectoryInfoyInfo[]'),
  \ dotnet#method('EnumerateDirDirectoryInfoies(', ')', 'IEnumerable'),
  \ dotnet#method('EnumerateDirDirectoryInfoies(', 'string searchPattern)', 'IEnumerable'),
  \ dotnet#method('EnumerateDirDirectoryInfoies(', 'string searchPattern, SearchOption searchOption)', 'IEnumerable'),
  \ dotnet#method('EnumerateFiles(', ')', 'IEnumerable'),
  \ dotnet#method('EnumerateFiles(', 'string searchPattern)', 'IEnumerable'),
  \ dotnet#method('EnumerateFiles(', 'string searchPattern, SearchOption searchOption)', 'IEnumerable'),
  \ dotnet#method('EnumerateFileSystemInfos(', ')', 'IEnumerable'),
  \ dotnet#method('EnumerateFileSystemInfos(', 'string searchPattern)', 'IEnumerable'),
  \ dotnet#method('EnumerateFileSystemInfos(', 'string searchPattern, SearchOption searchOption)', 'IEnumerable'),
  \ dotnet#method('get_Root(', ')', 'DirDirectoryInfoyInfo'),
  \ dotnet#method('MoveTo(', 'string destDirName)', 'void'),
  \ dotnet#method('Delete(', ')', 'void'),
  \ dotnet#method('Delete(', 'bool recursive)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Parent', 'DirDirectoryInfoyInfo'),
  \ dotnet#prop('Exists', 'bool'),
  \ dotnet#prop('Root', 'DirDirectoryInfoyInfo'),
  \ ])

call dotnet#class('IOException', 'SystemException', [ 
  \ dotnet#method('IOException(', ')', 'void'),
  \ dotnet#method('IOException(', 'string message)', 'void'),
  \ dotnet#method('IOException(', 'string message, int32 hresult)', 'void'),
  \ dotnet#method('IOException(', 'string message, int32 hresult, string maybeFullPath)', 'void'),
  \ dotnet#method('IOException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('IOException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('DirDirectoryNotFoundExceptionyNotFoundException', 'IOException', [ 
  \ dotnet#method('DirectoryNotFoundException(', ')', 'void'),
  \ dotnet#method('DirectoryNotFoundException(', 'string message)', 'void'),
  \ dotnet#method('DirectoryNotFoundException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('DirectoryNotFoundException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('DriveInfo', 'Object', [ 
  \ dotnet#method('DriveInfo(', 'string driveName)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_DriveType(', ')', 'DriveType'),
  \ dotnet#method('get_DriveFormat(', ')', 'string'),
  \ dotnet#method('get_IsReady(', ')', 'bool'),
  \ dotnet#method('get_AvailableFreeSpace(', ')', 'int64'),
  \ dotnet#method('get_TotalFreeSpace(', ')', 'int64'),
  \ dotnet#method('get_TotalSize(', ')', 'int64'),
  \ dotnet#method('GetDrives(', ')', 'static DriveInfo[]'),
  \ dotnet#method('get_RootDirDriveInfoy(', ')', 'DirDriveInfoyInfo'),
  \ dotnet#method('get_VolumeLabel(', ')', 'string'),
  \ dotnet#method('set_VolumeLabel(', 'string value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('DriveType', 'DriveType'),
  \ dotnet#prop('DriveFormat', 'string'),
  \ dotnet#prop('IsReady', 'bool'),
  \ dotnet#prop('AvailableFreeSpace', 'int64'),
  \ dotnet#prop('TotalFreeSpace', 'int64'),
  \ dotnet#prop('TotalSize', 'int64'),
  \ dotnet#prop('RootDirDriveInfoy', 'DirDriveInfoyInfo'),
  \ dotnet#prop('VolumeLabel', 'string'),
  \ ])

call dotnet#class('DriveNotFoundException', 'IOException', [ 
  \ dotnet#method('DriveNotFoundException(', ')', 'void'),
  \ dotnet#method('DriveNotFoundException(', 'string message)', 'void'),
  \ dotnet#method('DriveNotFoundException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('DriveNotFoundException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('EndOfStreamException', 'IOException', [ 
  \ dotnet#method('EndOfStreamException(', ')', 'void'),
  \ dotnet#method('EndOfStreamException(', 'string message)', 'void'),
  \ dotnet#method('EndOfStreamException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('EndOfStreamException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('File', 'Object', [ 
  \ dotnet#method('OpenText(', 'string path)', 'static StreamReader'),
  \ dotnet#method('CreateText(', 'string path)', 'static StreamWriter'),
  \ dotnet#method('AppendText(', 'string path)', 'static StreamWriter'),
  \ dotnet#method('Copy(', 'string sourceFileName, string destFileName)', 'static void'),
  \ dotnet#method('Copy(', 'string sourceFileName, string destFileName, bool overwrite)', 'static void'),
  \ dotnet#method('InternalCopy(', 'string sourceFileName, string destFileName, bool overwrite)', 'static string'),
  \ dotnet#method('Create(', 'string path)', 'static FileStream'),
  \ dotnet#method('Create(', 'string path, int32 bufferSize)', 'static FileStream'),
  \ dotnet#method('Create(', 'string path, int32 bufferSize, FileOptions options)', 'static FileStream'),
  \ dotnet#method('Create(', 'string path, int32 bufferSize, FileOptions options, FileSecurity fileSecurity)', 'static FileStream'),
  \ dotnet#method('Delete(', 'string path)', 'static void'),
  \ dotnet#method('Decrypt(', 'string path)', 'static void'),
  \ dotnet#method('Encrypt(', 'string path)', 'static void'),
  \ dotnet#method('Exists(', 'string path)', 'static bool'),
  \ dotnet#method('InternalExists(', 'string path)', 'static bool'),
  \ dotnet#method('Open(', 'string path, FileMode mode)', 'static FileStream'),
  \ dotnet#method('Open(', 'string path, FileMode mode, FileAccess access)', 'static FileStream'),
  \ dotnet#method('Open(', 'string path, FileMode mode, FileAccess access, FileShare share)', 'static FileStream'),
  \ dotnet#method('SetCreationTime(', 'string path, DateTime creationTime)', 'static void'),
  \ dotnet#method('SetCreationTimeUtc(', 'string path, DateTime creationTimeUtc)', 'static void'),
  \ dotnet#method('GetCreationTime(', 'string path)', 'static DateTime'),
  \ dotnet#method('GetCreationTimeUtc(', 'string path)', 'static DateTime'),
  \ dotnet#method('SetLastAccessTime(', 'string path, DateTime lastAccessTime)', 'static void'),
  \ dotnet#method('SetLastAccessTimeUtc(', 'string path, DateTime lastAccessTimeUtc)', 'static void'),
  \ dotnet#method('GetLastAccessTime(', 'string path)', 'static DateTime'),
  \ dotnet#method('GetLastAccessTimeUtc(', 'string path)', 'static DateTime'),
  \ dotnet#method('SetLastWriteTime(', 'string path, DateTime lastWriteTime)', 'static void'),
  \ dotnet#method('SetLastWriteTimeUtc(', 'string path, DateTime lastWriteTimeUtc)', 'static void'),
  \ dotnet#method('GetLastWriteTime(', 'string path)', 'static DateTime'),
  \ dotnet#method('GetLastWriteTimeUtc(', 'string path)', 'static DateTime'),
  \ dotnet#method('GetAttributes(', 'string path)', 'static FileAttributes'),
  \ dotnet#method('SetAttributes(', 'string path, FileAttributes fileAttributes)', 'static void'),
  \ dotnet#method('GetAccessControl(', 'string path)', 'static FileSecurity'),
  \ dotnet#method('GetAccessControl(', 'string path, AccessControlSections includeSections)', 'static FileSecurity'),
  \ dotnet#method('SetAccessControl(', 'string path, FileSecurity fileSecurity)', 'static void'),
  \ dotnet#method('OpenRead(', 'string path)', 'static FileStream'),
  \ dotnet#method('OpenWrite(', 'string path)', 'static FileStream'),
  \ dotnet#method('ReadAllText(', 'string path)', 'static string'),
  \ dotnet#method('ReadAllText(', 'string path, Encoding encoding)', 'static string'),
  \ dotnet#method('WriteAllText(', 'string path, string contents)', 'static void'),
  \ dotnet#method('WriteAllText(', 'string path, string contents, Encoding encoding)', 'static void'),
  \ dotnet#method('ReadAllBytes(', 'string path)', 'static uint8[]'),
  \ dotnet#method('WriteAllBytes(', 'string path, uint8[] bytes)', 'static void'),
  \ dotnet#method('ReadAllLines(', 'string path)', 'static string[]'),
  \ dotnet#method('ReadAllLines(', 'string path, Encoding encoding)', 'static string[]'),
  \ dotnet#method('ReadLines(', 'string path)', 'static IEnumerable'),
  \ dotnet#method('ReadLines(', 'string path, Encoding encoding)', 'static IEnumerable'),
  \ dotnet#method('WriteAllLines(', 'string path, string[] contents)', 'static void'),
  \ dotnet#method('WriteAllLines(', 'string path, string[] contents, Encoding encoding)', 'static void'),
  \ dotnet#method('WriteAllLines(', 'string path, IEnumerable contents)', 'static void'),
  \ dotnet#method('WriteAllLines(', 'string path, IEnumerable contents, Encoding encoding)', 'static void'),
  \ dotnet#method('AppendAllText(', 'string path, string contents)', 'static void'),
  \ dotnet#method('AppendAllText(', 'string path, string contents, Encoding encoding)', 'static void'),
  \ dotnet#method('AppendAllLines(', 'string path, IEnumerable contents)', 'static void'),
  \ dotnet#method('AppendAllLines(', 'string path, IEnumerable contents, Encoding encoding)', 'static void'),
  \ dotnet#method('Move(', 'string sourceFileName, string destFileName)', 'static void'),
  \ dotnet#method('Replace(', 'string sourceFileName, string destinationFileName, string destinationBackupFileName)', 'static void'),
  \ dotnet#method('Replace(', 'string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors)', 'static void'),
  \ dotnet#method('FillAttributeInfo(', 'string path, Win32Native/WIN32_FILE_ATTRIBUTE_DATA& data, bool tryagain, bool returnErrorOnNotFound)', 'static int32'),
  \ ])

call dotnet#class('FileInfo', 'FileSystemInfo', [ 
  \ dotnet#method('FileInfo(', 'string fileName)', 'void'),
  \ dotnet#method('FileInfo(', 'string fullPath, bool ignoreThis)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_DirFileInfoyName(', ')', 'string'),
  \ dotnet#method('get_DirFileInfoy(', ')', 'DirFileInfoyInfo'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('set_IsReadOnly(', 'bool value)', 'void'),
  \ dotnet#method('GetAccessControl(', ')', 'FileSecurity'),
  \ dotnet#method('GetAccessControl(', 'AccessControlSections includeSections)', 'FileSecurity'),
  \ dotnet#method('SetAccessControl(', 'class FileSecurity fileSecurity)', 'void'),
  \ dotnet#method('OpenText(', ')', 'StreamReader'),
  \ dotnet#method('CreateText(', ')', 'StreamWriter'),
  \ dotnet#method('AppendText(', ')', 'StreamWriter'),
  \ dotnet#method('CopyTo(', 'string destFileName)', 'FileInfo'),
  \ dotnet#method('CopyTo(', 'string destFileName, bool overwrite)', 'FileInfo'),
  \ dotnet#method('Create(', ')', 'FileStream'),
  \ dotnet#method('Delete(', ')', 'void'),
  \ dotnet#method('Decrypt(', ')', 'void'),
  \ dotnet#method('Encrypt(', ')', 'void'),
  \ dotnet#method('get_Exists(', ')', 'bool'),
  \ dotnet#method('Open(', 'FileMode mode)', 'FileStream'),
  \ dotnet#method('Open(', 'FileMode mode, FileAccess access)', 'FileStream'),
  \ dotnet#method('Open(', 'FileMode mode, FileAccess access, FileShare share)', 'FileStream'),
  \ dotnet#method('OpenRead(', ')', 'FileStream'),
  \ dotnet#method('OpenWrite(', ')', 'FileStream'),
  \ dotnet#method('MoveTo(', 'string destFileName)', 'void'),
  \ dotnet#method('Replace(', 'string destinationFileName, string destinationBackupFileName)', 'FileInfo'),
  \ dotnet#method('Replace(', 'string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors)', 'FileInfo'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('DirFileInfoyName', 'string'),
  \ dotnet#prop('DirFileInfoy', 'DirFileInfoyInfo'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Exists', 'bool'),
  \ ])

call dotnet#class('FileLoadException', 'IOException', [ 
  \ dotnet#method('FileLoadException(', ')', 'void'),
  \ dotnet#method('FileLoadException(', 'string message)', 'void'),
  \ dotnet#method('FileLoadException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('FileLoadException(', 'string message, string fileName)', 'void'),
  \ dotnet#method('FileLoadException(', 'string message, string fileName, Exception inner)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('FileLoadException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_FusionLog(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('FormatFileLoadExceptionMessage(', 'string fileName, int32 hResult)', 'static string'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('FusionLog', 'string'),
  \ ])

call dotnet#class('FileNotFoundException', 'IOException', [ 
  \ dotnet#method('FileNotFoundException(', ')', 'void'),
  \ dotnet#method('FileNotFoundException(', 'string message)', 'void'),
  \ dotnet#method('FileNotFoundException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('FileNotFoundException(', 'string message, string fileName)', 'void'),
  \ dotnet#method('FileNotFoundException(', 'string message, string fileName, Exception innerException)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('FileNotFoundException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_FusionLog(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('FusionLog', 'string'),
  \ ])

call dotnet#class('FileStream', 'Stream', [ 
  \ dotnet#method('FileStream(', ')', 'static void .'),
  \ dotnet#method('FileStream(', ')', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode)', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode, FileAccess access)', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode, FileAccess access, FileShare share)', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode, FileAccess access, FileShare share, int32 bufferSize)', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode, FileAccess access, FileShare share, int32 bufferSize, FileOptions options)', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode, FileAccess access, FileShare share, int32 bufferSize, bool useAsync)', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode, FileSystemRights rights, FileShare share, int32 bufferSize, FileOptions options, FileSecurity fileSecurity)', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode, FileSystemRights rights, FileShare share, int32 bufferSize, FileOptions options)', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode, FileAccess access, FileShare share, int32 bufferSize, FileOptions options, string msgPath, bool bFromProxy)', 'void'),
  \ dotnet#method('FileStream(', 'string path, FileMode mode, FileAccess access, FileShare share, int32 bufferSize, FileOptions options, string msgPath, bool bFromProxy, bool useLongPath)', 'void'),
  \ dotnet#method('Init(', 'string path, FileMode mode, FileAccess access, int32 rights, bool useRights, FileShare share, int32 bufferSize, FileOptions options, Win32Native/SECURITY_ATTRIBUTES secAttrs, string msgPath, bool bFromProxy, bool useLongPath)', 'void'),
  \ dotnet#method('FileStream(', 'native int handle, FileAccess access)', 'void'),
  \ dotnet#method('FileStream(', 'native int handle, FileAccess access, bool ownsHandle)', 'void'),
  \ dotnet#method('FileStream(', 'native int handle, FileAccess access, bool ownsHandle, int32 bufferSize)', 'void'),
  \ dotnet#method('FileStream(', 'native int handle, FileAccess access, bool ownsHandle, int32 bufferSize, bool isAsync)', 'void'),
  \ dotnet#method('FileStream(', 'class SafeFileHandle handle, FileAccess access)', 'void'),
  \ dotnet#method('FileStream(', 'class SafeFileHandle handle, FileAccess access, int32 bufferSize)', 'void'),
  \ dotnet#method('FileStream(', 'class SafeFileHandle handle, FileAccess access, int32 bufferSize, bool isAsync)', 'void'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_IsAsync(', ')', 'bool'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_NameInternal(', ')', 'string'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('GetAccessControl(', ')', 'FileSecurity'),
  \ dotnet#method('SetAccessControl(', 'class FileSecurity fileSecurity)', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Flush(', 'bool flushToDisk)', 'void'),
  \ dotnet#method('get_Handle(', ')', 'int'),
  \ dotnet#method('get_SafeFileHandle(', ')', ''),
  \ dotnet#method('SetLength(', 'int64 value)', 'void'),
  \ dotnet#method('Read(', '[in][out] uint8[] array, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin origin)', 'int64'),
  \ dotnet#method('Write(', 'uint8[] array, int32 offset, int32 count)', 'void'),
  \ dotnet#method('BeginRead(', 'uint8[] array, int32 offset, int32 numBytes, AsyncCallback userCallback, object stateObject)', 'IAsyncResult'),
  \ dotnet#method('EndRead(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('ReadByte(', ')', 'int32'),
  \ dotnet#method('BeginWrite(', 'uint8[] array, int32 offset, int32 numBytes, AsyncCallback userCallback, object stateObject)', 'IAsyncResult'),
  \ dotnet#method('EndWrite(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('WriteByte(', 'uint8 value)', 'void'),
  \ dotnet#method('Lock(', 'int64 position, int64 length)', 'void'),
  \ dotnet#method('Unlock(', 'int64 position, int64 length)', 'void'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('IsAsync', 'bool'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('NameInternal', 'string'),
  \ dotnet#prop('Position', 'int64'),
  \ dotnet#prop('Handle', 'int'),
  \ dotnet#prop('SafeFileHandle', 'SafeFileHandle'),
  \ ])

call dotnet#class('MemoryStream', 'Stream', [ 
  \ dotnet#method('MemoryStream(', ')', 'void'),
  \ dotnet#method('MemoryStream(', 'int32 capacity)', 'void'),
  \ dotnet#method('MemoryStream(', 'uint8[] buffer)', 'void'),
  \ dotnet#method('MemoryStream(', 'uint8[] buffer, bool writable)', 'void'),
  \ dotnet#method('MemoryStream(', 'uint8[] buffer, int32 index, int32 count)', 'void'),
  \ dotnet#method('MemoryStream(', 'uint8[] buffer, int32 index, int32 count, bool writable)', 'void'),
  \ dotnet#method('MemoryStream(', 'uint8[] buffer, int32 index, int32 count, bool writable, bool publiclyVisible)', 'void'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('GetBuffer(', ')', 'uint8[]'),
  \ dotnet#method('InternalGetBuffer(', ')', 'uint8[]'),
  \ dotnet#method('InternalGetOriginAndLength(', '[out] int32& origin, [out] int32& length)', 'void'),
  \ dotnet#method('InternalGetPosition(', ')', 'int32'),
  \ dotnet#method('InternalReadInt32(', ')', 'int32'),
  \ dotnet#method('InternalEmulateRead(', 'int32 count)', 'int32'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('Read(', '[in][out] uint8[] buffer, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('ReadByte(', ')', 'int32'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin loc)', 'int64'),
  \ dotnet#method('SetLength(', 'int64 value)', 'void'),
  \ dotnet#method('ToArray(', ')', 'uint8[]'),
  \ dotnet#method('Write(', 'uint8[] buffer, int32 offset, int32 count)', 'void'),
  \ dotnet#method('WriteByte(', 'uint8 value)', 'void'),
  \ dotnet#method('WriteTo(', 'class Stream stream)', 'void'),
  \ dotnet#method('ObjectInvariant(', ')', 'void'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ ])

call dotnet#class('Path', 'Object', [ 
  \ dotnet#method('ChangeExtension(', 'string path, string extension)', 'static string'),
  \ dotnet#method('GetDirPathyName(', 'string path)', 'static string'),
  \ dotnet#method('GetRootLength(', 'string path)', 'static int32'),
  \ dotnet#method('IsDirPathySeparator(', 'char c)', 'static bool'),
  \ dotnet#method('GetInvalidPathChars(', ')', 'static char[]'),
  \ dotnet#method('GetInvalidFileNameChars(', ')', 'static char[]'),
  \ dotnet#method('GetExtension(', 'string path)', 'static string'),
  \ dotnet#method('GetFullPath(', 'string path)', 'static string'),
  \ dotnet#method('GetFullPathInternal(', 'string path)', 'static string'),
  \ dotnet#method('NormalizePath(', 'string path, bool fullCheck)', 'static string'),
  \ dotnet#method('NormalizePath(', 'string path, bool fullCheck, int32 maxPathLength)', 'static string'),
  \ dotnet#method('HasLongPathPrefix(', 'string path)', 'static bool'),
  \ dotnet#method('AddLongPathPrefix(', 'string path)', 'static string'),
  \ dotnet#method('RemoveLongPathPrefix(', 'string path)', 'static string'),
  \ dotnet#method('RemoveLongPathPrefix(', 'class StringBuilder path)', 'static StringBuilder'),
  \ dotnet#method('GetFileName(', 'string path)', 'static string'),
  \ dotnet#method('GetFileNameWithoutExtension(', 'string path)', 'static string'),
  \ dotnet#method('GetPathRoot(', 'string path)', 'static string'),
  \ dotnet#method('GetTempPath(', ')', 'static string'),
  \ dotnet#method('IsRelative(', 'string path)', 'static bool'),
  \ dotnet#method('GetRandomFileName(', ')', 'static string'),
  \ dotnet#method('GetTempFileName(', ')', 'static string'),
  \ dotnet#method('HasExtension(', 'string path)', 'static bool'),
  \ dotnet#method('IsPathRooted(', 'string path)', 'static bool'),
  \ dotnet#method('Combine(', 'string path1, string path2)', 'static string'),
  \ dotnet#method('Combine(', 'string path1, string path2, string path3)', 'static string'),
  \ dotnet#method('Combine(', 'string path1, string path2, string path3, string path4)', 'static string'),
  \ dotnet#method('Combine(', 'string[] paths)', 'static string'),
  \ dotnet#method('ToBase32StringSuitableForDirName(', 'uint8[] buff)', 'static string'),
  \ dotnet#method('CheckSearchPattern(', 'string searchPattern)', 'static void'),
  \ dotnet#method('CheckInvalidPathChars(', 'string path)', 'static void'),
  \ dotnet#method('InternalCombine(', 'string path1, string path2)', 'static string'),
  \ dotnet#method('Path(', ')', 'static void .'),
  \ ])

call dotnet#class('PathTooLongException', 'IOException', [ 
  \ dotnet#method('PathTooLongException(', ')', 'void'),
  \ dotnet#method('PathTooLongException(', 'string message)', 'void'),
  \ dotnet#method('PathTooLongException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('PathTooLongException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('UnmanagedMemoryStream', 'Stream', [ 
  \ dotnet#field('_isOpen', 'bool'),
  \ dotnet#method('UnmanagedMemoryStream(', ')', 'void'),
  \ dotnet#method('UnmanagedMemoryStream(', 'class SafeBuffer buffer, int64 offset, int64 length)', 'void'),
  \ dotnet#method('UnmanagedMemoryStream(', 'class SafeBuffer buffer, int64 offset, int64 length, FileAccess access)', 'void'),
  \ dotnet#method('UnmanagedMemoryStream(', 'class SafeBuffer buffer, int64 offset, int64 length, FileAccess access, bool skipSecurityCheck)', 'void'),
  \ dotnet#method('Initialize(', 'class SafeBuffer buffer, int64 offset, int64 length, FileAccess access)', 'void'),
  \ dotnet#method('Initialize(', 'class SafeBuffer buffer, int64 offset, int64 length, FileAccess access, bool skipSecurityCheck)', 'void'),
  \ dotnet#method('UnmanagedMemoryStream(', 'uint8* pointer, int64 length)', 'void'),
  \ dotnet#method('UnmanagedMemoryStream(', 'uint8* pointer, int64 length, int64 capacity, FileAccess access)', 'void'),
  \ dotnet#method('UnmanagedMemoryStream(', 'uint8* pointer, int64 length, int64 capacity, FileAccess access, bool skipSecurityCheck)', 'void'),
  \ dotnet#method('Initialize(', 'uint8* pointer, int64 length, int64 capacity, FileAccess access)', 'void'),
  \ dotnet#method('Initialize(', 'uint8* pointer, int64 length, int64 capacity, FileAccess access, bool skipSecurityCheck)', 'void'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Capacity(', ')', 'int64'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('get_PositionPointer(', ')', 'uint8*'),
  \ dotnet#method('set_PositionPointer(', 'uint8* value)', 'void'),
  \ dotnet#method('get_Pointer(', ')', 'uint8*'),
  \ dotnet#method('Read(', '[in][out] uint8[] buffer, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('ReadByte(', ')', 'int32'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin loc)', 'int64'),
  \ dotnet#method('SetLength(', 'int64 value)', 'void'),
  \ dotnet#method('Write(', 'uint8[] buffer, int32 offset, int32 count)', 'void'),
  \ dotnet#method('WriteByte(', 'uint8 value)', 'void'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Capacity', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ dotnet#prop('PositionPointer', 'uint8*'),
  \ dotnet#prop('Pointer', 'uint8*'),
  \ ])

call dotnet#class('TextReader', 'MarshalByRefObject', [ 
  \ dotnet#field('_in', 'TextReader'),
  \ dotnet#method('TextReader(', 'class TextReader t)', 'void'),
  \ dotnet#method('Close(', ') synchronized', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing) synchronized', 'void'),
  \ dotnet#method('Peek(', ') synchronized', 'int32'),
  \ dotnet#method('Read(', ') synchronized', 'int32'),
  \ dotnet#method('Read(', '[in][out] char[] buffer, int32 index, int32 count) synchronized', 'int32'),
  \ dotnet#method('ReadBlock(', '[in][out] char[] buffer, int32 index, int32 count) synchronized', 'int32'),
  \ dotnet#method('ReadLine(', ') synchronized', 'string'),
  \ dotnet#method('ReadToEnd(', ') synchronized', 'string'),
  \ dotnet#method('TextReader(', ')', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Peek(', ')', 'int32'),
  \ dotnet#method('Read(', ')', 'int32'),
  \ dotnet#method('Read(', '[in][out] char[] buffer, int32 index, int32 count)', 'int32'),
  \ dotnet#method('ReadToEnd(', ')', 'string'),
  \ dotnet#method('ReadBlock(', '[in][out] char[] buffer, int32 index, int32 count)', 'int32'),
  \ dotnet#method('ReadLine(', ')', 'string'),
  \ dotnet#method('Synchronized(', 'class TextReader reader)', 'static TextReader'),
  \ dotnet#method('TextReader(', ')', 'static void .'),
  \ ])

call dotnet#class('StreamReader', 'TextReader', [ 
  \ dotnet#method('StreamReader(', ')', 'void'),
  \ dotnet#method('StreamReader(', 'class Stream stream)', 'void'),
  \ dotnet#method('StreamReader(', 'class Stream stream, bool detectEncodingFromByteOrderMarks)', 'void'),
  \ dotnet#method('StreamReader(', 'class Stream stream, Encoding encoding)', 'void'),
  \ dotnet#method('StreamReader(', 'class Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks)', 'void'),
  \ dotnet#method('StreamReader(', 'class Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int32 bufferSize)', 'void'),
  \ dotnet#method('StreamReader(', 'class Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int32 bufferSize, bool closable)', 'void'),
  \ dotnet#method('StreamReader(', 'string path)', 'void'),
  \ dotnet#method('StreamReader(', 'string path, bool detectEncodingFromByteOrderMarks)', 'void'),
  \ dotnet#method('StreamReader(', 'string path, Encoding encoding)', 'void'),
  \ dotnet#method('StreamReader(', 'string path, Encoding encoding, bool detectEncodingFromByteOrderMarks)', 'void'),
  \ dotnet#method('StreamReader(', 'string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int32 bufferSize)', 'void'),
  \ dotnet#method('Init(', 'class Stream stream)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('get_CurrentEncoding(', ')', ''),
  \ dotnet#method('get_BaseStream(', ')', ''),
  \ dotnet#method('get_Closable(', ')', 'bool'),
  \ dotnet#method('DiscardBufferedData(', ')', 'void'),
  \ dotnet#method('get_EndOfStream(', ')', 'bool'),
  \ dotnet#method('Peek(', ')', 'int32'),
  \ dotnet#method('Read(', ')', 'int32'),
  \ dotnet#method('Read(', '[in][out] char[] buffer, int32 index, int32 count)', 'int32'),
  \ dotnet#method('ReadToEnd(', ')', 'string'),
  \ dotnet#method('ReadBuffer(', ')', 'strict int32'),
  \ dotnet#method('ReadLine(', ')', 'string'),
  \ dotnet#method('StreamReader(', ')', 'static void .'),
  \ dotnet#prop('CurrentEncoding', 'Encoding'),
  \ dotnet#prop('BaseStream', 'Stream'),
  \ dotnet#prop('Closable', 'bool'),
  \ dotnet#prop('EndOfStream', 'bool'),
  \ ])

call dotnet#class('TextWriter', 'MarshalByRefObject', [ 
  \ dotnet#method('TextWriter(', 'class TextWriter t)', 'void'),
  \ dotnet#method('get_Encoding(', ')', ''),
  \ dotnet#method('get_FormatProvider(', ')', ''),
  \ dotnet#method('get_NewLine(', ') synchronized', 'string'),
  \ dotnet#method('set_NewLine(', 'string value) synchronized', 'void'),
  \ dotnet#method('Close(', ') synchronized', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing) synchronized', 'void'),
  \ dotnet#method('Flush(', ') synchronized', 'void'),
  \ dotnet#method('Write(', 'char value) synchronized', 'void'),
  \ dotnet#method('Write(', 'char[] buffer) synchronized', 'void'),
  \ dotnet#method('Write(', 'char[] buffer, int32 index, int32 count) synchronized', 'void'),
  \ dotnet#method('Write(', 'bool value) synchronized', 'void'),
  \ dotnet#method('Write(', 'int32 value) synchronized', 'void'),
  \ dotnet#method('Write(', 'uint32 value) synchronized', 'void'),
  \ dotnet#method('Write(', 'int64 value) synchronized', 'void'),
  \ dotnet#method('Write(', 'uint64 value) synchronized', 'void'),
  \ dotnet#method('Write(', 'float32 value) synchronized', 'void'),
  \ dotnet#method('Write(', 'float64 value) synchronized', 'void'),
  \ dotnet#method('Write(', 'Decimal value) synchronized', 'void'),
  \ dotnet#method('Write(', 'string value) synchronized', 'void'),
  \ dotnet#method('Write(', 'object value) synchronized', 'void'),
  \ dotnet#method('Write(', 'string format, object arg0) synchronized', 'void'),
  \ dotnet#method('Write(', 'string format, object arg0, object arg1) synchronized', 'void'),
  \ dotnet#method('Write(', 'string format, object arg0, object arg1, object arg2) synchronized', 'void'),
  \ dotnet#method('Write(', 'string format, object[] arg) synchronized', 'void'),
  \ dotnet#method('WriteLine(', ') synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'char value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'Decimal value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'char[] buffer) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'char[] buffer, int32 index, int32 count) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'bool value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'int32 value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'uint32 value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'int64 value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'uint64 value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'float32 value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'float64 value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'string value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'object value) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0, object arg1) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0, object arg1, object arg2) synchronized', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object[] arg) synchronized', 'void'),
  \ dotnet#prop('Encoding', 'Encoding'),
  \ dotnet#prop('FormatProvider', 'IFormatProvider'),
  \ dotnet#prop('NewLine', 'string'),
  \ dotnet#field('CoreNewLine', 'char[]'),
  \ dotnet#method('TextWriter(', ')', 'void'),
  \ dotnet#method('TextWriter(', 'class IFormatProvider formatProvider)', 'void'),
  \ dotnet#method('get_FormatProvider(', ')', ''),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('get_Encoding(', ')', 'abstract'),
  \ dotnet#method('get_NewLine(', ')', 'string'),
  \ dotnet#method('set_NewLine(', 'string value)', 'void'),
  \ dotnet#method('Synchronized(', 'class TextWriter writer)', 'static TextWriter'),
  \ dotnet#method('Write(', 'char value)', 'void'),
  \ dotnet#method('Write(', 'char[] buffer)', 'void'),
  \ dotnet#method('Write(', 'char[] buffer, int32 index, int32 count)', 'void'),
  \ dotnet#method('Write(', 'bool value)', 'void'),
  \ dotnet#method('Write(', 'int32 value)', 'void'),
  \ dotnet#method('Write(', 'uint32 value)', 'void'),
  \ dotnet#method('Write(', 'int64 value)', 'void'),
  \ dotnet#method('Write(', 'uint64 value)', 'void'),
  \ dotnet#method('Write(', 'float32 value)', 'void'),
  \ dotnet#method('Write(', 'float64 value)', 'void'),
  \ dotnet#method('Write(', 'Decimal value)', 'void'),
  \ dotnet#method('Write(', 'string value)', 'void'),
  \ dotnet#method('Write(', 'object value)', 'void'),
  \ dotnet#method('Write(', 'string format, object arg0)', 'void'),
  \ dotnet#method('Write(', 'string format, object arg0, object arg1)', 'void'),
  \ dotnet#method('Write(', 'string format, object arg0, object arg1, object arg2)', 'void'),
  \ dotnet#method('Write(', 'string format, object[] arg)', 'void'),
  \ dotnet#method('WriteLine(', ')', 'void'),
  \ dotnet#method('WriteLine(', 'char value)', 'void'),
  \ dotnet#method('WriteLine(', 'char[] buffer)', 'void'),
  \ dotnet#method('WriteLine(', 'char[] buffer, int32 index, int32 count)', 'void'),
  \ dotnet#method('WriteLine(', 'bool value)', 'void'),
  \ dotnet#method('WriteLine(', 'int32 value)', 'void'),
  \ dotnet#method('WriteLine(', 'uint32 value)', 'void'),
  \ dotnet#method('WriteLine(', 'int64 value)', 'void'),
  \ dotnet#method('WriteLine(', 'uint64 value)', 'void'),
  \ dotnet#method('WriteLine(', 'float32 value)', 'void'),
  \ dotnet#method('WriteLine(', 'float64 value)', 'void'),
  \ dotnet#method('WriteLine(', 'Decimal value)', 'void'),
  \ dotnet#method('WriteLine(', 'string value)', 'void'),
  \ dotnet#method('WriteLine(', 'object value)', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0)', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0, object arg1)', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0, object arg1, object arg2)', 'void'),
  \ dotnet#method('WriteLine(', 'string format, object[] arg)', 'void'),
  \ dotnet#method('TextWriter(', ')', 'static void .'),
  \ dotnet#prop('FormatProvider', 'IFormatProvider'),
  \ dotnet#prop('Encoding', 'Encoding'),
  \ dotnet#prop('NewLine', 'string'),
  \ ])

call dotnet#class('StreamWriter', 'TextWriter', [ 
  \ dotnet#field('stream', 'Stream'),
  \ dotnet#field('byteBuffer', 'uint8[]'),
  \ dotnet#field('charBuffer', 'char[]'),
  \ dotnet#field('charPos', 'int32'),
  \ dotnet#field('charLen', 'int32'),
  \ dotnet#field('autoFlush', 'bool'),
  \ dotnet#method('get_UTF8NoBOM(', ')', 'static Encoding'),
  \ dotnet#method('StreamWriter(', ')', 'void'),
  \ dotnet#method('StreamWriter(', 'class Stream stream)', 'void'),
  \ dotnet#method('StreamWriter(', 'class Stream stream, Encoding encoding)', 'void'),
  \ dotnet#method('StreamWriter(', 'class Stream stream, Encoding encoding, int32 bufferSize)', 'void'),
  \ dotnet#method('StreamWriter(', 'class Stream stream, Encoding encoding, int32 bufferSize, bool closeable)', 'void'),
  \ dotnet#method('StreamWriter(', 'string path)', 'void'),
  \ dotnet#method('StreamWriter(', 'string path, bool append)', 'void'),
  \ dotnet#method('StreamWriter(', 'string path, bool append, Encoding encoding)', 'void'),
  \ dotnet#method('StreamWriter(', 'string path, bool append, Encoding encoding, int32 bufferSize)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('get_AutoFlush(', ')', 'bool'),
  \ dotnet#method('set_AutoFlush(', 'bool value)', 'void'),
  \ dotnet#method('get_BaseStream(', ')', ''),
  \ dotnet#method('get_Closable(', ')', 'bool'),
  \ dotnet#method('set_HaveWrittenPreamble(', 'bool value)', 'void'),
  \ dotnet#method('get_Encoding(', ')', ''),
  \ dotnet#method('Write(', 'char value)', 'void'),
  \ dotnet#method('Write(', 'char[] buffer)', 'void'),
  \ dotnet#method('Write(', 'char[] buffer, int32 index, int32 count)', 'void'),
  \ dotnet#method('Write(', 'string value)', 'void'),
  \ dotnet#method('StreamWriter(', ')', 'static void .'),
  \ dotnet#prop('UTF8NoBOM', 'Encoding'),
  \ dotnet#prop('AutoFlush', 'bool'),
  \ dotnet#prop('BaseStream', 'Stream'),
  \ dotnet#prop('Closable', 'bool'),
  \ dotnet#prop('HaveWrittenPreamble', 'bool'),
  \ dotnet#prop('Encoding', 'Encoding'),
  \ ])

call dotnet#class('StringReader', 'TextReader', [ 
  \ dotnet#method('StringReader(', 'string s)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Peek(', ')', 'int32'),
  \ dotnet#method('Read(', ')', 'int32'),
  \ dotnet#method('Read(', '[in][out] char[] buffer, int32 index, int32 count)', 'int32'),
  \ dotnet#method('ReadToEnd(', ')', 'string'),
  \ dotnet#method('ReadLine(', ')', 'string'),
  \ ])

call dotnet#class('StringWriter', 'TextWriter', [ 
  \ dotnet#method('StringWriter(', ')', 'void'),
  \ dotnet#method('StringWriter(', 'class IFormatProvider formatProvider)', 'void'),
  \ dotnet#method('StringWriter(', 'class StringBuilder sb)', 'void'),
  \ dotnet#method('StringWriter(', 'class StringBuilder sb, IFormatProvider formatProvider)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('get_Encoding(', ')', ''),
  \ dotnet#method('GetStringBuilder(', ')', ''),
  \ dotnet#method('Write(', 'char value)', 'void'),
  \ dotnet#method('Write(', 'char[] buffer, int32 index, int32 count)', 'void'),
  \ dotnet#method('Write(', 'string value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('StringWriter(', ')', 'static void .'),
  \ dotnet#prop('Encoding', 'Encoding'),
  \ ])

call dotnet#class('UnmanagedMemoryAccessor', 'Object', [ 
  \ dotnet#method('UnmanagedMemoryAccessor(', ')', 'void'),
  \ dotnet#method('UnmanagedMemoryAccessor(', 'class SafeBuffer buffer, int64 offset, int64 capacity)', 'void'),
  \ dotnet#method('UnmanagedMemoryAccessor(', 'class SafeBuffer buffer, int64 offset, int64 capacity, FileAccess access)', 'void'),
  \ dotnet#method('Initialize(', 'class SafeBuffer buffer, int64 offset, int64 capacity, FileAccess access)', 'void'),
  \ dotnet#method('get_Capacity(', ')', 'int64'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_IsOpen(', ')', 'bool'),
  \ dotnet#method('ReadBoolean(', 'int64 position)', 'bool'),
  \ dotnet#method('ReadByte(', 'int64 position)', 'uint8'),
  \ dotnet#method('ReadChar(', 'int64 position)', 'char'),
  \ dotnet#method('ReadInt16(', 'int64 position)', 'int16'),
  \ dotnet#method('ReadInt32(', 'int64 position)', 'int32'),
  \ dotnet#method('ReadInt64(', 'int64 position)', 'int64'),
  \ dotnet#method('ReadDecimal(', 'int64 position)', 'Decimal'),
  \ dotnet#method('ReadSingle(', 'int64 position)', 'float32'),
  \ dotnet#method('ReadDouble(', 'int64 position)', 'float64'),
  \ dotnet#method('ReadSByte(', 'int64 position)', 'int8'),
  \ dotnet#method('ReadUInt16(', 'int64 position)', 'uint16'),
  \ dotnet#method('ReadUInt32(', 'int64 position)', 'uint32'),
  \ dotnet#method('ReadUInt64(', 'int64 position)', 'uint64'),
  \ dotnet#method('Read(', 'int64 position, [out] !!T& structure)', 'void'),
  \ dotnet#method('ReadArray(', 'int64 position, !!T[] array, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('Write(', 'int64 position, bool value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, uint8 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, char value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, int16 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, int32 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, int64 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, Decimal value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, float32 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, float64 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, int8 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, uint16 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, uint32 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, uint64 value)', 'void'),
  \ dotnet#method('Write(', 'int64 position, !!T& structure)', 'void'),
  \ dotnet#method('WriteArray(', 'int64 position, !!T[] array, int32 offset, int32 count)', 'void'),
  \ dotnet#prop('Capacity', 'int64'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('IsOpen', 'bool'),
  \ ])

call dotnet#class('FileFormatException', 'FormatException', [ 
  \ dotnet#method('FileFormatException(', ')', 'void'),
  \ dotnet#method('FileFormatException(', 'string message)', 'void'),
  \ dotnet#method('FileFormatException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('FileFormatException(', 'class Uri sourceUri)', 'void'),
  \ dotnet#method('FileFormatException(', 'class Uri sourceUri, string message)', 'void'),
  \ dotnet#method('FileFormatException(', 'class Uri sourceUri, Exception innerException)', 'void'),
  \ dotnet#method('FileFormatException(', 'class Uri sourceUri, string message, Exception innerException)', 'void'),
  \ dotnet#method('FileFormatException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_SourceUri(', ')', 'Uri'),
  \ dotnet#prop('SourceUri', 'Uri'),
  \ ])

call dotnet#class('InvalidDataException', 'SystemException', [ 
  \ dotnet#method('InvalidDataException(', ')', 'void'),
  \ dotnet#method('InvalidDataException(', 'string message)', 'void'),
  \ dotnet#method('InvalidDataException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('InvalidDataException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ErrorEventArgs', 'EventArgs', [ 
  \ dotnet#method('ErrorEventArgs(', 'class Exception exception)', 'void'),
  \ dotnet#method('GetException(', ')', ''),
  \ ])

call dotnet#class('ErrorEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ErrorEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ErrorEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ErrorEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('FileSystemEventArgs', 'EventArgs', [ 
  \ dotnet#method('FileSystemEventArgs(', 'WatcherChangeTypes changeType, string dirFileSystemEventArgsy, string name)', 'void'),
  \ dotnet#method('get_ChangeType(', ')', 'WatcherChangeTypes'),
  \ dotnet#method('get_FullPath(', ')', 'string'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#prop('ChangeType', 'WatcherChangeTypes'),
  \ dotnet#prop('FullPath', 'string'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('FileSystemEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('FileSystemEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, FileSystemEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, FileSystemEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('FileSystemWatcher', 'Component', [ 
  \ dotnet#method('FileSystemWatcher(', ')', 'void'),
  \ dotnet#method('FileSystemWatcher(', 'string path)', 'void'),
  \ dotnet#method('FileSystemWatcher(', 'string path, string filter)', 'void'),
  \ dotnet#method('get_NotifyFilter(', ')', 'NotifyFilters'),
  \ dotnet#method('set_NotifyFilter(', 'NotifyFilters value)', 'void'),
  \ dotnet#method('get_EnableRaisingEvents(', ')', 'bool'),
  \ dotnet#method('set_EnableRaisingEvents(', 'bool value)', 'void'),
  \ dotnet#method('get_Filter(', ')', 'string'),
  \ dotnet#method('set_Filter(', 'string value)', 'void'),
  \ dotnet#method('get_IncludeSubdirFileSystemWatcheries(', ')', 'bool'),
  \ dotnet#method('set_IncludeSubdirFileSystemWatcheries(', 'bool value)', 'void'),
  \ dotnet#method('get_InternalBufferSize(', ')', 'int32'),
  \ dotnet#method('set_InternalBufferSize(', 'int32 value)', 'void'),
  \ dotnet#method('get_Path(', ')', 'string'),
  \ dotnet#method('set_Path(', 'string value)', 'void'),
  \ dotnet#method('get_Site(', ')', ''),
  \ dotnet#method('set_Site(', 'class ISite value)', 'void'),
  \ dotnet#method('get_SynchronizingObject(', ')', 'ISynchronizeInvoke'),
  \ dotnet#method('set_SynchronizingObject(', 'class ISynchronizeInvoke value)', 'void'),
  \ dotnet#method('add_Changed(', 'class FileSystemEventHandler value)', 'void'),
  \ dotnet#method('remove_Changed(', 'class FileSystemEventHandler value)', 'void'),
  \ dotnet#method('add_Created(', 'class FileSystemEventHandler value)', 'void'),
  \ dotnet#method('remove_Created(', 'class FileSystemEventHandler value)', 'void'),
  \ dotnet#method('add_Deleted(', 'class FileSystemEventHandler value)', 'void'),
  \ dotnet#method('remove_Deleted(', 'class FileSystemEventHandler value)', 'void'),
  \ dotnet#method('add_Error(', 'class ErrorEventHandler value)', 'void'),
  \ dotnet#method('remove_Error(', 'class ErrorEventHandler value)', 'void'),
  \ dotnet#method('add_Renamed(', 'class RenamedEventHandler value)', 'void'),
  \ dotnet#method('remove_Renamed(', 'class RenamedEventHandler value)', 'void'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('OnChanged(', 'class FileSystemEventArgs e)', 'void'),
  \ dotnet#method('OnCreated(', 'class FileSystemEventArgs e)', 'void'),
  \ dotnet#method('OnDeleted(', 'class FileSystemEventArgs e)', 'void'),
  \ dotnet#method('OnError(', 'class ErrorEventArgs e)', 'void'),
  \ dotnet#method('OnRenamed(', 'class RenamedEventArgs e)', 'void'),
  \ dotnet#method('WaitForChanged(', 'WatcherChangeTypes changeType)', 'WaitForChangedResult'),
  \ dotnet#method('WaitForChanged(', 'WatcherChangeTypes changeType, int32 timeout)', 'WaitForChangedResult'),
  \ dotnet#method('FileSystemWatcher(', ')', 'static void .'),
  \ dotnet#event('Changed', 'FileSystemEventHandler'),
  \ dotnet#event('Created', 'FileSystemEventHandler'),
  \ dotnet#event('Deleted', 'FileSystemEventHandler'),
  \ dotnet#event('Error', 'ErrorEventHandler'),
  \ dotnet#event('Renamed', 'RenamedEventHandler'),
  \ dotnet#prop('NotifyFilter', 'NotifyFilters'),
  \ dotnet#prop('EnableRaisingEvents', 'bool'),
  \ dotnet#prop('Filter', 'string'),
  \ dotnet#prop('IncludeSubdirFileSystemWatcheries', 'bool'),
  \ dotnet#prop('InternalBufferSize', 'int32'),
  \ dotnet#prop('Path', 'string'),
  \ dotnet#prop('Site', 'ISite'),
  \ dotnet#prop('SynchronizingObject', 'ISynchronizeInvoke'),
  \ ])

call dotnet#class('InternalBufferOverflowException', 'SystemException', [ 
  \ dotnet#method('InternalBufferOverflowException(', ')', 'void'),
  \ dotnet#method('InternalBufferOverflowException(', 'string message)', 'void'),
  \ dotnet#method('InternalBufferOverflowException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('InternalBufferOverflowException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('IODescriptionAttribute', 'DescriptionAttribute', [ 
  \ dotnet#method('IODescriptionAttribute(', 'string description)', 'void'),
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ ])

call dotnet#class('RenamedEventArgs', 'FileSystemEventArgs', [ 
  \ dotnet#method('RenamedEventArgs(', 'WatcherChangeTypes changeType, string dirRenamedEventArgsy, string name, string oldName)', 'void'),
  \ dotnet#method('get_OldFullPath(', ')', 'string'),
  \ dotnet#method('get_OldName(', ')', 'string'),
  \ dotnet#prop('OldFullPath', 'string'),
  \ dotnet#prop('OldName', 'string'),
  \ ])

call dotnet#class('RenamedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('RenamedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, RenamedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, RenamedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('WaitForChangedResult', 'ValueType', [ 
  \ dotnet#field('changeType', 'WatcherChangeTypes'),
  \ dotnet#field('name', 'string'),
  \ dotnet#field('oldName', 'string'),
  \ dotnet#field('timedOut', 'bool'),
  \ dotnet#method('get_ChangeType(', ')', 'WatcherChangeTypes'),
  \ dotnet#method('set_ChangeType(', 'WatcherChangeTypes value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_OldName(', ')', 'string'),
  \ dotnet#method('set_OldName(', 'string value)', 'void'),
  \ dotnet#method('get_TimedOut(', ')', 'bool'),
  \ dotnet#method('set_TimedOut(', 'bool value)', 'void'),
  \ dotnet#method('WaitForChangedResult(', ')', 'static void .'),
  \ dotnet#prop('ChangeType', 'WatcherChangeTypes'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('OldName', 'string'),
  \ dotnet#prop('TimedOut', 'bool'),
  \ ])

