call dotnet#namespace('System.Windows.Media.Media3D')

call dotnet#class('GeneralTransform3D', 'Animatable', [ 
  \ dotnet#method('GeneralTransform3D(', ')', 'void'),
  \ dotnet#method('TryTransform(', 'Point3D inPoint, [out] Point3D& result)', 'abstract bool'),
  \ dotnet#method('Transform(', 'Point3D point)', 'Point3D'),
  \ dotnet#method('TransformBounds(', 'Rect3D rect)', 'abstract'),
  \ dotnet#method('get_Inverse(', ')', 'abstract'),
  \ dotnet#method('get_AffineTransform(', ')', 'abstract strict'),
  \ dotnet#method('Clone(', ')', 'GeneralTransform3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeneralTransform3D'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#prop('Inverse', 'GeneralTransform3D'),
  \ dotnet#prop('AffineTransform', 'Transform3D'),
  \ ])

call dotnet#class('Visual3D', 'DependencyObject', [ 
  \ dotnet#field('_proxy', 'VisualProxy'),
  \ dotnet#method('Visual3D(', ')', 'void'),
  \ dotnet#method('IsOnChannel(', 'class DUCE/Channel channel)', 'bool'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('Get3DHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('RemoveChildFromParent(', 'class DUCE/IResource parent, DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('get_Transform(', ')', 'Transform3D'),
  \ dotnet#method('set_Transform(', 'class Transform3D value)', 'void'),
  \ dotnet#method('AddVisual3DChild(', 'class Visual3D child)', 'void'),
  \ dotnet#method('RemoveVisual3DChild(', 'class Visual3D child)', 'void'),
  \ dotnet#method('get_InternalIsVisible(', ')', 'bool'),
  \ dotnet#method('set_InternalIsVisible(', 'bool value)', 'void'),
  \ dotnet#method('get_Visual3DModel(', ')', 'Model3D'),
  \ dotnet#method('set_Visual3DModel(', 'class Model3D value)', 'void'),
  \ dotnet#method('FireOnVisualParentChanged(', 'class DependencyObject oldParent)', 'strict void'),
  \ dotnet#method('add_VisualAncestorChanged(', 'class Visual/AncestorChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_VisualAncestorChanged(', 'class Visual/AncestorChangedEventHandler value)', 'void'),
  \ dotnet#method('ProcessAncestorChangedNotificationRecursive(', 'class DependencyObject e, AncestorChangedEventArgs args)', 'static void'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('OnVisualChildrenChanged(', 'class DependencyObject visualAdded, DependencyObject visualRemoved)', 'famorassem void'),
  \ dotnet#method('DoesRayHitSubgraphBounds(', 'class RayHitTestParameters rayParams)', 'bool'),
  \ dotnet#method('HitTest(', 'class HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, HitTestParameters3D hitTestParameters)', 'void'),
  \ dotnet#method('RayHitTest(', 'class HitTestFilterCallback filterCallback, RayHitTestParameters rayParams)', 'HitTestResultBehavior'),
  \ dotnet#method('HitTestChildren(', 'class HitTestFilterCallback filterCallback, RayHitTestParameters rayParams)', 'HitTestResultBehavior'),
  \ dotnet#method('HitTestChildren(', 'class HitTestFilterCallback filterCallback, RayHitTestParameters rayParams, IVisual3DContainer container)', 'static HitTestResultBehavior'),
  \ dotnet#method('RayHitTestInternal(', 'class HitTestFilterCallback filterCallback, RayHitTestParameters rayParams)', 'void'),
  \ dotnet#method('RenderChanged(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('get_VisualContentBounds(', ')', '.method'),
  \ dotnet#method('get_Visual2DContentBounds(', ')', '.method'),
  \ dotnet#method('get_BBoxSubgraph(', ')', '.method'),
  \ dotnet#method('GetContentBounds(', ')', 'Rect3D'),
  \ dotnet#method('CalculateSubgraphBoundsOuterSpace(', ')', 'Rect3D'),
  \ dotnet#method('CalculateSubgraphBoundsInnerSpace(', ')', 'Rect3D'),
  \ dotnet#method('get_VisualDescendantBounds(', ')', '.method'),
  \ dotnet#method('VerifyAPIReadOnly(', ')', 'void '),
  \ dotnet#method('VerifyAPIReadOnly(', 'class DependencyObject other)', 'void '),
  \ dotnet#method('VerifyAPIReadWrite(', ')', 'void '),
  \ dotnet#method('VerifyAPIReadWrite(', 'class DependencyObject other)', 'void '),
  \ dotnet#method('VerifyAPIReadOnly(', ')', 'void'),
  \ dotnet#method('VerifyAPIReadOnly(', 'class DependencyObject other)', 'void'),
  \ dotnet#method('VerifyAPIReadWrite(', ')', 'void'),
  \ dotnet#method('VerifyAPIReadWrite(', 'class DependencyObject other)', 'void'),
  \ dotnet#method('SetParent(', 'class Visual newParent)', 'void'),
  \ dotnet#method('SetParent(', 'class Visual3D newParent)', 'void'),
  \ dotnet#method('get_Visual3DChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisual3DChild(', 'int32 index)', 'family'),
  \ dotnet#method('AddChild(', 'class Visual3D child)', 'void '),
  \ dotnet#method('RemoveChild(', 'class Visual3D child)', 'void '),
  \ dotnet#method('GetChildrenCount(', ')', 'int32 '),
  \ dotnet#method('GetChild(', 'int32 index)', ''),
  \ dotnet#method('Debug_VerifyBoundsEqual(', 'Rect3D bounds1, Rect3D bounds2, string errorString)', 'void'),
  \ dotnet#method('Debug_VerifyCachedSubgraphBounds(', ')', 'void'),
  \ dotnet#method('Debug_VerifyCachedContentBounds(', ')', 'void'),
  \ dotnet#method('PrecomputeRecursive(', '[out] Rect3D& bboxSubgraph)', 'void'),
  \ dotnet#method('RenderRecursive(', 'class RenderContext ctx)', 'void'),
  \ dotnet#method('RenderContent(', 'class RenderContext ctx, bool isOnChannel)', 'void'),
  \ dotnet#method('IsAncestorOf(', 'class DependencyObject descendant)', 'bool'),
  \ dotnet#method('IsDescendantOf(', 'class DependencyObject ancestor)', 'bool'),
  \ dotnet#method('SetFlagsToRoot(', 'bool value, VisualFlags flag)', 'void'),
  \ dotnet#method('FindFirstAncestorWithFlagsAnd(', 'VisualFlags flag)', 'DependencyObject'),
  \ dotnet#method('FindCommonVisualAncestor(', 'class DependencyObject otherVisual)', 'DependencyObject'),
  \ dotnet#method('FreeDUCEResources(', 'class DUCE/Channel channel)', 'void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'void'),
  \ dotnet#method('DisconnectAttachedResource(', 'VisualProxyFlags correspondingFlag, DUCE/IResource attachedResource)', 'void'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('get_HasMultipleInheritanceContexts(', ')', 'strict bool'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('TransformToAncestor(', 'class Visual3D ancestor)', 'GeneralTransform3D'),
  \ dotnet#method('TransformToDescendant(', 'class Visual3D descendant)', 'GeneralTransform3D'),
  \ dotnet#method('TransformToAncestor(', 'class Visual ancestor)', 'GeneralTransform3DTo2D'),
  \ dotnet#method('InternalTransformToAncestor(', 'class Visual ancestor)', 'GeneralTransform3DTo2D'),
  \ dotnet#method('get_InternalVisualParent(', ')', '.method'),
  \ dotnet#method('get_ParentIndex(', ')', 'int32'),
  \ dotnet#method('set_ParentIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsVisualChildrenIterationInProgress(', ')', 'bool'),
  \ dotnet#method('set_IsVisualChildrenIterationInProgress(', 'bool value)', 'void'),
  \ dotnet#method('SetFlagsOnAllChannels(', 'bool value, VisualProxyFlags flagsToChange)', 'void'),
  \ dotnet#method('SetFlags(', 'class DUCE/Channel channel, bool value, VisualProxyFlags flagsToChange)', 'void'),
  \ dotnet#method('SetFlags(', 'bool value, VisualFlags Flags)', 'void'),
  \ dotnet#method('CheckFlagsOnAllChannels(', 'VisualProxyFlags flagsToCheck)', 'bool'),
  \ dotnet#method('CheckFlagsAnd(', 'class DUCE/Channel channel, VisualProxyFlags flagsToCheck)', 'bool'),
  \ dotnet#method('CheckFlagsAnd(', 'VisualFlags flags)', 'bool'),
  \ dotnet#method('InternalGet2DOr3DVisualChild(', 'int32 index)', 'strict'),
  \ dotnet#method('get_InternalVisual2DOr3DChildrenCount(', ')', 'strict int32'),
  \ dotnet#method('CheckFlagsOr(', 'class DUCE/Channel channel, VisualProxyFlags flagsToCheck)', 'bool'),
  \ dotnet#method('CheckFlagsOr(', 'VisualFlags flags)', 'bool'),
  \ dotnet#method('DoAnyChildrenHaveABitSet(', 'class Visual3D pe, VisualFlags flag)', 'static bool'),
  \ dotnet#method('PropagateFlags(', 'class Visual3D e, VisualFlags flags, VisualProxyFlags proxyFlags)', 'static void'),
  \ dotnet#method('ApplyAnimationClock(', 'class DependencyProperty dp, AnimationClock clock)', 'void'),
  \ dotnet#method('ApplyAnimationClock(', 'class DependencyProperty dp, AnimationClock clock, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('BeginAnimation(', 'class DependencyProperty dp, AnimationTimeline animation)', 'void'),
  \ dotnet#method('BeginAnimation(', 'class DependencyProperty dp, AnimationTimeline animation, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('get_HasAnimatedProperties(', ')', 'bool'),
  \ dotnet#method('GetAnimationBaseValue(', 'class DependencyProperty dp)', 'object'),
  \ dotnet#method('EvaluateAnimatedValueCore(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& entry)', 'void'),
  \ dotnet#method('Visual3D(', ')', 'static void .'),
  \ dotnet#event('VisualAncestorChanged', 'Visual/AncestorChangedEventHandler'),
  \ dotnet#prop('Transform', 'Transform3D'),
  \ dotnet#prop('InternalIsVisible', 'bool'),
  \ dotnet#prop('Visual3DModel', 'Model3D'),
  \ dotnet#prop('VisualContentBounds', 'Rect3D'),
  \ dotnet#prop('Visual2DContentBounds', 'Rect'),
  \ dotnet#prop('BBoxSubgraph', 'Rect3D'),
  \ dotnet#prop('VisualDescendantBounds', 'Rect3D'),
  \ dotnet#prop('Visual3DChildrenCount', 'int32'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('HasMultipleInheritanceContexts', 'bool'),
  \ dotnet#prop('InternalVisualParent', 'DependencyObject'),
  \ dotnet#prop('ParentIndex', 'int32'),
  \ dotnet#prop('IsVisualChildrenIterationInProgress', 'bool'),
  \ dotnet#prop('InternalVisual2DOr3DChildrenCount', 'int32'),
  \ dotnet#prop('HasAnimatedProperties', 'bool'),
  \ ])

call dotnet#class('Transform3D', 'GeneralTransform3D', [ 
  \ dotnet#method('Transform3D(', ')', 'void'),
  \ dotnet#method('Transform(', 'Point3D point)', 'Point3D'),
  \ dotnet#method('Transform(', 'VTransform3D3D vTransform3D)', 'VTransform3D3D'),
  \ dotnet#method('Transform(', 'Point4D point)', 'Point4D'),
  \ dotnet#method('Transform(', 'Point3D[] points)', 'void'),
  \ dotnet#method('Transform(', 'VTransform3D3D[] vTransform3Ds)', 'void'),
  \ dotnet#method('Transform(', 'Point4D[] points)', 'void'),
  \ dotnet#method('TryTransform(', 'Point3D inPoint, [out] Point3D& result)', 'bool'),
  \ dotnet#method('TransformBounds(', 'Rect3D rect)', 'Rect3D'),
  \ dotnet#method('get_Inverse(', ')', ''),
  \ dotnet#method('get_AffineTransform(', ')', 'strict'),
  \ dotnet#method('get_Identity(', ')', 'static'),
  \ dotnet#method('get_IsAffine(', ')', 'abstract bool'),
  \ dotnet#method('get_Value(', ')', 'abstract'),
  \ dotnet#method('Append(', 'Matrix3D& matrix)', 'abstract strict void'),
  \ dotnet#method('Clone(', ')', 'Transform3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Transform3D'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#prop('Inverse', 'GeneralTransform3D'),
  \ dotnet#prop('AffineTransform', 'Transform3D'),
  \ dotnet#prop('Identity', 'Transform3D'),
  \ dotnet#prop('IsAffine', 'bool'),
  \ dotnet#prop('Value', 'Matrix3D'),
  \ ])

call dotnet#class('AffineTransform3D', 'Transform3D', [ 
  \ dotnet#method('AffineTransform3D(', ')', 'void'),
  \ dotnet#method('get_IsAffine(', ')', 'bool'),
  \ dotnet#method('Clone(', ')', 'AffineTransform3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'AffineTransform3D'),
  \ dotnet#prop('IsAffine', 'bool'),
  \ ])

call dotnet#class('Model3D', 'Animatable', [ 
  \ dotnet#method('Model3D(', ')', 'void'),
  \ dotnet#method('get_Bounds(', ')', 'Rect3D'),
  \ dotnet#method('RayHitTest(', 'class RayHitTestParameters rayParams)', 'void'),
  \ dotnet#method('RayHitTestCore(', 'class RayHitTestParameters rayParams)', 'abstract strict void'),
  \ dotnet#method('CalculateSubgraphBoundsOuterSpace(', ')', 'Rect3D'),
  \ dotnet#method('CalculateSubgraphBoundsInnerSpace(', ')', 'abstract strict'),
  \ dotnet#method('Clone(', ')', 'Model3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Model3D'),
  \ dotnet#method('get_Transform(', ')', 'Transform3D'),
  \ dotnet#method('set_Transform(', 'class Transform3D value)', 'void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('Model3D(', ')', 'static void .'),
  \ dotnet#prop('Bounds', 'Rect3D'),
  \ dotnet#prop('Transform', 'Transform3D'),
  \ ])

call dotnet#class('Light', 'Model3D', [ 
  \ dotnet#method('Light(', ')', 'void'),
  \ dotnet#method('RayHitTestCore(', 'class RayHitTestParameters rayParams)', 'strict void'),
  \ dotnet#method('CalculateSubgraphBoundsInnerSpace(', ')', 'strict'),
  \ dotnet#method('Clone(', ')', 'Light'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Light'),
  \ dotnet#method('get_Color(', ')', 'Color'),
  \ dotnet#method('set_Color(', 'Color value)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('Light(', ')', 'static void .'),
  \ dotnet#prop('Color', 'Color'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('AmbientLight', 'Light', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('AmbientLight(', ')', 'void'),
  \ dotnet#method('AmbientLight(', 'Color ambientColor)', 'void'),
  \ dotnet#method('Clone(', ')', 'AmbientLight'),
  \ dotnet#method('CloneCurrentValue(', ')', 'AmbientLight'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('Rotation3D', 'Animatable', [ 
  \ dotnet#method('Rotation3D(', ')', 'void'),
  \ dotnet#method('get_Identity(', ')', 'static'),
  \ dotnet#method('get_InternalQuaternion(', ')', 'abstract strict'),
  \ dotnet#method('Clone(', ')', 'Rotation3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Rotation3D'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('Rotation3D(', ')', 'static void .'),
  \ dotnet#prop('Identity', 'Rotation3D'),
  \ dotnet#prop('InternalQuaternion', 'Quaternion'),
  \ ])

call dotnet#class('AxisAngleRotation3D', 'Rotation3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('AxisAngleRotation3D(', ')', 'void'),
  \ dotnet#method('AxisAngleRotation3D(', 'VAxisAngleRotation3D3D axis, float64 angle)', 'void'),
  \ dotnet#method('get_InternalQuaternion(', ')', 'strict'),
  \ dotnet#method('AxisPropertyChangedHook(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('AnglePropertyChangedHook(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('Clone(', ')', 'AxisAngleRotation3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'AxisAngleRotation3D'),
  \ dotnet#method('get_Axis(', ')', 'VAxisAngleRotation3D3D'),
  \ dotnet#method('set_Axis(', 'VAxisAngleRotation3D3D value)', 'void'),
  \ dotnet#method('get_Angle(', ')', 'float64'),
  \ dotnet#method('set_Angle(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('AxisAngleRotation3D(', ')', 'static void .'),
  \ dotnet#prop('InternalQuaternion', 'Quaternion'),
  \ dotnet#prop('Axis', 'VAxisAngleRotation3D3D'),
  \ dotnet#prop('Angle', 'float64'),
  \ ])

call dotnet#class('Camera', 'Animatable', [ 
  \ dotnet#method('Camera(', ')', 'void'),
  \ dotnet#method('RayFromViewportPoint(', 'Point point, Size viewSize, Rect3D boundingRect, [out] float64& distanceAdjustment)', 'abstract strict'),
  \ dotnet#method('GetViewMatrix(', ')', 'abstract strict'),
  \ dotnet#method('GetProjectionMatrix(', 'float64 aspectRatio)', 'abstract strict'),
  \ dotnet#method('PrependInverseTransform(', 'class Transform3D transform, Matrix3D& viewMatrix)', 'static void'),
  \ dotnet#method('PrependInverseTransform(', 'Matrix3D matrix, Matrix3D& viewMatrix)', 'static void'),
  \ dotnet#method('Clone(', ')', 'Camera'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Camera'),
  \ dotnet#method('get_Transform(', ')', 'Transform3D'),
  \ dotnet#method('set_Transform(', 'class Transform3D value)', 'void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('Camera(', ')', 'static void .'),
  \ dotnet#prop('Transform', 'Transform3D'),
  \ ])

call dotnet#class('ContainerUIElement3D', 'UIElement3D', [ 
  \ dotnet#method('ContainerUIElement3D(', ')', 'void'),
  \ dotnet#method('GetVisual3DChild(', 'int32 index)', 'Visual3D'),
  \ dotnet#method('get_Visual3DChildrenCount(', ')', 'int32'),
  \ dotnet#method('get_Children(', ')', 'Visual3DCollection'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#prop('Visual3DChildrenCount', 'int32'),
  \ dotnet#prop('Children', 'Visual3DCollection'),
  \ ])

call dotnet#class('Material', 'Animatable', [ 
  \ dotnet#method('Material(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Material'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Material'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ ])

call dotnet#class('DiffuseMaterial', 'Material', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DiffuseMaterial(', ')', 'void'),
  \ dotnet#method('DiffuseMaterial(', 'class Brush brush)', 'void'),
  \ dotnet#method('Clone(', ')', 'DiffuseMaterial'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DiffuseMaterial'),
  \ dotnet#method('get_Color(', ')', 'Color'),
  \ dotnet#method('set_Color(', 'Color value)', 'void'),
  \ dotnet#method('get_AmbientColor(', ')', 'Color'),
  \ dotnet#method('set_AmbientColor(', 'Color value)', 'void'),
  \ dotnet#method('get_Brush(', ')', 'Brush'),
  \ dotnet#method('set_Brush(', 'class Brush value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('DiffuseMaterial(', ')', 'static void .'),
  \ dotnet#prop('Color', 'Color'),
  \ dotnet#prop('AmbientColor', 'Color'),
  \ dotnet#prop('Brush', 'Brush'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('DirectionalLight', 'Light', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DirectionalLight(', ')', 'void'),
  \ dotnet#method('DirectionalLight(', 'Color diffuseColor, VDirectionalLight3D direction)', 'void'),
  \ dotnet#method('Clone(', ')', 'DirectionalLight'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DirectionalLight'),
  \ dotnet#method('get_Direction(', ')', 'VDirectionalLight3D'),
  \ dotnet#method('set_Direction(', 'VDirectionalLight3D value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('DirectionalLight(', ')', 'static void .'),
  \ dotnet#prop('Direction', 'VDirectionalLight3D'),
  \ ])

call dotnet#class('EmissiveMaterial', 'Material', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('EmissiveMaterial(', ')', 'void'),
  \ dotnet#method('EmissiveMaterial(', 'class Brush brush)', 'void'),
  \ dotnet#method('Clone(', ')', 'EmissiveMaterial'),
  \ dotnet#method('CloneCurrentValue(', ')', 'EmissiveMaterial'),
  \ dotnet#method('get_Color(', ')', 'Color'),
  \ dotnet#method('set_Color(', 'Color value)', 'void'),
  \ dotnet#method('get_Brush(', ')', 'Brush'),
  \ dotnet#method('set_Brush(', 'class Brush value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('EmissiveMaterial(', ')', 'static void .'),
  \ dotnet#prop('Color', 'Color'),
  \ dotnet#prop('Brush', 'Brush'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('GeneralTransform3DGroup', 'GeneralTransform3D', [ 
  \ dotnet#method('GeneralTransform3DGroup(', ')', 'void'),
  \ dotnet#method('TryTransform(', 'Point3D inPoint, [out] Point3D& result)', 'bool'),
  \ dotnet#method('TransformBounds(', 'Rect3D rect)', 'Rect3D'),
  \ dotnet#method('get_Inverse(', ')', ''),
  \ dotnet#method('get_AffineTransform(', ')', 'strict'),
  \ dotnet#method('Clone(', ')', 'GeneralTransform3DGroup'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeneralTransform3DGroup'),
  \ dotnet#method('get_Children(', ')', 'GeneralTransform3DCollection'),
  \ dotnet#method('set_Children(', 'class GeneralTransform3DCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GeneralTransform3DGroup(', ')', 'static void .'),
  \ dotnet#prop('Inverse', 'GeneralTransform3D'),
  \ dotnet#prop('AffineTransform', 'Transform3D'),
  \ dotnet#prop('Children', 'GeneralTransform3DCollection'),
  \ ])

call dotnet#class('GeneralTransform3DTo2D', 'Freezable', [ 
  \ dotnet#method('GeneralTransform3DTo2D(', ')', 'void'),
  \ dotnet#method('GeneralTransform3DTo2D(', 'Matrix3D projectionTransform, GeneralTransform transformBetween2D)', 'void'),
  \ dotnet#method('TryTransform(', 'Point3D inPoint, [out] Point& result)', 'bool'),
  \ dotnet#method('Transform(', 'Point3D point)', 'Point'),
  \ dotnet#method('TransformBounds(', 'Rect3D rect3D)', 'Rect'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ ])

call dotnet#class('GeneralTransform2DTo3D', 'Freezable', [ 
  \ dotnet#method('GeneralTransform2DTo3D(', ')', 'void'),
  \ dotnet#method('GeneralTransform2DTo3D(', 'class GeneralTransform transform2D, Viewport2DVisual3D containingVisual3D, GeneralTransform3D transform3D)', 'void'),
  \ dotnet#method('TryTransform(', 'Point inPoint, [out] Point3D& result)', 'bool'),
  \ dotnet#method('Transform(', 'Point point)', 'Point3D'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ ])

call dotnet#class('Geometry3D', 'Animatable', [ 
  \ dotnet#method('Geometry3D(', ')', 'void'),
  \ dotnet#method('get_Bounds(', ')', 'abstract'),
  \ dotnet#method('RayHitTest(', 'class RayHitTestParameters rayParams, FaceType facesToHit)', 'void'),
  \ dotnet#method('RayHitTestCore(', 'class RayHitTestParameters rayParams, FaceType hitTestableFaces)', 'abstract strict void'),
  \ dotnet#method('Clone(', ')', 'Geometry3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Geometry3D'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#prop('Bounds', 'Rect3D'),
  \ ])

call dotnet#class('GeometryModel3D', 'Model3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('GeometryModel3D(', ')', 'void'),
  \ dotnet#method('GeometryModel3D(', 'class Geometry3D geometry, Material material)', 'void'),
  \ dotnet#method('CalculateSubgraphBoundsInnerSpace(', ')', 'strict'),
  \ dotnet#method('RayHitTestCore(', 'class RayHitTestParameters rayParams)', 'strict void'),
  \ dotnet#method('MaterialPropertyChangedHook(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('BackMaterialPropertyChangedHook(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('Clone(', ')', 'GeometryModel3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeometryModel3D'),
  \ dotnet#method('get_Geometry(', ')', 'Geometry3D'),
  \ dotnet#method('set_Geometry(', 'class Geometry3D value)', 'void'),
  \ dotnet#method('get_Material(', ')', 'Material'),
  \ dotnet#method('set_Material(', 'class Material value)', 'void'),
  \ dotnet#method('get_BackMaterial(', ')', 'Material'),
  \ dotnet#method('set_BackMaterial(', 'class Material value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('GeometryModel3D(', ')', 'static void .'),
  \ dotnet#prop('Geometry', 'Geometry3D'),
  \ dotnet#prop('Material', 'Material'),
  \ dotnet#prop('BackMaterial', 'Material'),
  \ ])

call dotnet#class('HitTestParameters3D', 'Object', [ 
  \ dotnet#field('CurrentVisual', 'Visual3D'),
  \ dotnet#field('CurrentModel', 'Model3D'),
  \ dotnet#field('CurrentGeometry', 'GeometryModel3D'),
  \ dotnet#method('HitTestParameters3D(', ')', 'void'),
  \ dotnet#method('PushVisualTransform(', 'class Transform3D transform)', 'void'),
  \ dotnet#method('PushModelTransform(', 'class Transform3D transform)', 'void'),
  \ dotnet#method('PopTransform(', 'class Transform3D transform)', 'void'),
  \ dotnet#method('get_HasWorldTransformMatrix(', ')', 'bool'),
  \ dotnet#method('get_WorldTransformMatrix(', ')', '.method'),
  \ dotnet#method('get_HasModelTransformMatrix(', ')', 'bool'),
  \ dotnet#method('get_ModelTransformMatrix(', ')', '.method'),
  \ dotnet#method('get_HasHitTestProjectionMatrix(', ')', 'bool'),
  \ dotnet#method('get_HitTestProjectionMatrix(', ')', '.method'),
  \ dotnet#method('set_HitTestProjectionMatrix(', 'Matrix3D value)', 'void'),
  \ dotnet#prop('HasWorldTransformMatrix', 'bool'),
  \ dotnet#prop('WorldTransformMatrix', 'Matrix3D'),
  \ dotnet#prop('HasModelTransformMatrix', 'bool'),
  \ dotnet#prop('ModelTransformMatrix', 'Matrix3D'),
  \ dotnet#prop('HasHitTestProjectionMatrix', 'bool'),
  \ dotnet#prop('HitTestProjectionMatrix', 'Matrix3D'),
  \ ])

call dotnet#class('MaterialGroup', 'Material', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('MaterialGroup(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'MaterialGroup'),
  \ dotnet#method('CloneCurrentValue(', ')', 'MaterialGroup'),
  \ dotnet#method('get_Children(', ')', 'MaterialCollection'),
  \ dotnet#method('set_Children(', 'class MaterialCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('MaterialGroup(', ')', 'static void .'),
  \ dotnet#prop('Children', 'MaterialCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('Matrix3D', 'ValueType', [ 
  \ dotnet#field('_m11', 'float64'),
  \ dotnet#field('_m12', 'float64'),
  \ dotnet#field('_m13', 'float64'),
  \ dotnet#field('_m14', 'float64'),
  \ dotnet#field('_m21', 'float64'),
  \ dotnet#field('_m22', 'float64'),
  \ dotnet#field('_m23', 'float64'),
  \ dotnet#field('_m24', 'float64'),
  \ dotnet#field('_m31', 'float64'),
  \ dotnet#field('_m32', 'float64'),
  \ dotnet#field('_m33', 'float64'),
  \ dotnet#field('_m34', 'float64'),
  \ dotnet#field('_offsetX', 'float64'),
  \ dotnet#field('_offsetY', 'float64'),
  \ dotnet#field('_offsetZ', 'float64'),
  \ dotnet#field('_m44', 'float64'),
  \ dotnet#field('_isNotKnownToBeIdentity', 'bool'),
  \ dotnet#method('Matrix3D(', 'float64 m11, float64 m12, float64 m13, float64 m14, float64 m21, float64 m22, float64 m23, float64 m24, float64 m31, float64 m32, float64 m33, float64 m34, float64 offsetX, float64 offsetY, float64 offsetZ, float64 m44)', 'void'),
  \ dotnet#method('get_Identity(', ')', 'static'),
  \ dotnet#method('SetIdentity(', ')', 'void'),
  \ dotnet#method('get_IsIdentity(', ')', 'bool'),
  \ dotnet#method('Prepend(', 'Matrix3D matrix)', 'void'),
  \ dotnet#method('Append(', 'Matrix3D matrix)', 'void'),
  \ dotnet#method('Rotate(', 'Quaternion quaternion)', 'void'),
  \ dotnet#method('RotatePrepend(', 'Quaternion quaternion)', 'void'),
  \ dotnet#method('RotateAt(', 'Quaternion quaternion, Point3D center)', 'void'),
  \ dotnet#method('RotateAtPrepend(', 'Quaternion quaternion, Point3D center)', 'void'),
  \ dotnet#method('Scale(', 'VMatrix3D3D scale)', 'void'),
  \ dotnet#method('ScalePrepend(', 'VMatrix3D3D scale)', 'void'),
  \ dotnet#method('ScaleAt(', 'VMatrix3D3D scale, Point3D center)', 'void'),
  \ dotnet#method('ScaleAtPrepend(', 'VMatrix3D3D scale, Point3D center)', 'void'),
  \ dotnet#method('Translate(', 'VMatrix3D3D offset)', 'void'),
  \ dotnet#method('TranslatePrepend(', 'VMatrix3D3D offset)', 'void'),
  \ dotnet#method('op_Multiply(', 'Matrix3D matrix1, Matrix3D matrix2)', 'static'),
  \ dotnet#method('Multiply(', 'Matrix3D matrix1, Matrix3D matrix2)', 'static Matrix3D'),
  \ dotnet#method('Transform(', 'Point3D point)', 'Point3D'),
  \ dotnet#method('Transform(', 'Point3D[] points)', 'void'),
  \ dotnet#method('Transform(', 'Point4D point)', 'Point4D'),
  \ dotnet#method('Transform(', 'Point4D[] points)', 'void'),
  \ dotnet#method('Transform(', 'VMatrix3D3D vMatrix3D)', 'VMatrix3D3D'),
  \ dotnet#method('Transform(', 'VMatrix3D3D[] vMatrix3Ds)', 'void'),
  \ dotnet#method('get_IsAffine(', ')', 'bool'),
  \ dotnet#method('get_Determinant(', ')', 'float64'),
  \ dotnet#method('get_HasInverse(', ')', 'bool'),
  \ dotnet#method('Invert(', ')', 'void'),
  \ dotnet#method('get_M11(', ')', 'float64'),
  \ dotnet#method('set_M11(', 'float64 value)', 'void'),
  \ dotnet#method('get_M12(', ')', 'float64'),
  \ dotnet#method('set_M12(', 'float64 value)', 'void'),
  \ dotnet#method('get_M13(', ')', 'float64'),
  \ dotnet#method('set_M13(', 'float64 value)', 'void'),
  \ dotnet#method('get_M14(', ')', 'float64'),
  \ dotnet#method('set_M14(', 'float64 value)', 'void'),
  \ dotnet#method('get_M21(', ')', 'float64'),
  \ dotnet#method('set_M21(', 'float64 value)', 'void'),
  \ dotnet#method('get_M22(', ')', 'float64'),
  \ dotnet#method('set_M22(', 'float64 value)', 'void'),
  \ dotnet#method('get_M23(', ')', 'float64'),
  \ dotnet#method('set_M23(', 'float64 value)', 'void'),
  \ dotnet#method('get_M24(', ')', 'float64'),
  \ dotnet#method('set_M24(', 'float64 value)', 'void'),
  \ dotnet#method('get_M31(', ')', 'float64'),
  \ dotnet#method('set_M31(', 'float64 value)', 'void'),
  \ dotnet#method('get_M32(', ')', 'float64'),
  \ dotnet#method('set_M32(', 'float64 value)', 'void'),
  \ dotnet#method('get_M33(', ')', 'float64'),
  \ dotnet#method('set_M33(', 'float64 value)', 'void'),
  \ dotnet#method('get_M34(', ')', 'float64'),
  \ dotnet#method('set_M34(', 'float64 value)', 'void'),
  \ dotnet#method('get_OffsetX(', ')', 'float64'),
  \ dotnet#method('set_OffsetX(', 'float64 value)', 'void'),
  \ dotnet#method('get_OffsetY(', ')', 'float64'),
  \ dotnet#method('set_OffsetY(', 'float64 value)', 'void'),
  \ dotnet#method('get_OffsetZ(', ')', 'float64'),
  \ dotnet#method('set_OffsetZ(', 'float64 value)', 'void'),
  \ dotnet#method('get_M44(', ')', 'float64'),
  \ dotnet#method('set_M44(', 'float64 value)', 'void'),
  \ dotnet#method('SetScaleMatrix(', 'VMatrix3D3D& scale)', 'void'),
  \ dotnet#method('SetScaleMatrix(', 'VMatrix3D3D& scale, Point3D& center)', 'void'),
  \ dotnet#method('SetTranslationMatrix(', 'VMatrix3D3D& offset)', 'void'),
  \ dotnet#method('CreateRotationMatrix(', 'Quaternion& quaternion, Point3D& center)', 'static Matrix3D'),
  \ dotnet#method('MultiplyPoint(', 'Point3D& point)', 'void'),
  \ dotnet#method('MultiplyPoint(', 'Point4D& point)', 'void'),
  \ dotnet#method('MultiplyVMatrix3D(', 'VMatrix3D3D& vMatrix3D)', 'void'),
  \ dotnet#method('GetNormalizedAffineDeterminant(', ')', 'float64'),
  \ dotnet#method('NormalizedAffineInvert(', ')', 'bool'),
  \ dotnet#method('InvertCore(', ')', 'bool'),
  \ dotnet#method('op_Equality(', 'Matrix3D matrix1, Matrix3D matrix2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Matrix3D matrix1, Matrix3D matrix2)', 'static bool'),
  \ dotnet#method('Equals(', 'Matrix3D matrix1, Matrix3D matrix2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Matrix3D value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Matrix3D'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Matrix3D(', ')', 'static void .'),
  \ dotnet#prop('Identity', 'Matrix3D'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ dotnet#prop('IsAffine', 'bool'),
  \ dotnet#prop('Determinant', 'float64'),
  \ dotnet#prop('HasInverse', 'bool'),
  \ dotnet#prop('M11', 'float64'),
  \ dotnet#prop('M12', 'float64'),
  \ dotnet#prop('M13', 'float64'),
  \ dotnet#prop('M14', 'float64'),
  \ dotnet#prop('M21', 'float64'),
  \ dotnet#prop('M22', 'float64'),
  \ dotnet#prop('M23', 'float64'),
  \ dotnet#prop('M24', 'float64'),
  \ dotnet#prop('M31', 'float64'),
  \ dotnet#prop('M32', 'float64'),
  \ dotnet#prop('M33', 'float64'),
  \ dotnet#prop('M34', 'float64'),
  \ dotnet#prop('OffsetX', 'float64'),
  \ dotnet#prop('OffsetY', 'float64'),
  \ dotnet#prop('OffsetZ', 'float64'),
  \ dotnet#prop('M44', 'float64'),
  \ ])

call dotnet#class('MatrixCamera', 'Camera', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('MatrixCamera(', ')', 'void'),
  \ dotnet#method('MatrixCamera(', 'Matrix3D viewMatrix, Matrix3D projectionMatrix)', 'void'),
  \ dotnet#method('GetViewMatrix(', ')', 'strict'),
  \ dotnet#method('GetProjectionMatrix(', 'float64 aspectRatio)', 'strict'),
  \ dotnet#method('RayFromViewportPoint(', 'Point p, Size viewSize, Rect3D boundingRect, [out] float64& distanceAdjustment)', 'strict'),
  \ dotnet#method('Clone(', ')', 'MatrixCamera'),
  \ dotnet#method('CloneCurrentValue(', ')', 'MatrixCamera'),
  \ dotnet#method('get_ViewMatrix(', ')', 'Matrix3D'),
  \ dotnet#method('set_ViewMatrix(', 'Matrix3D value)', 'void'),
  \ dotnet#method('get_ProjectionMatrix(', ')', 'Matrix3D'),
  \ dotnet#method('set_ProjectionMatrix(', 'Matrix3D value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('MatrixCamera(', ')', 'static void .'),
  \ dotnet#prop('ViewMatrix', 'Matrix3D'),
  \ dotnet#prop('ProjectionMatrix', 'Matrix3D'),
  \ ])

call dotnet#class('MatrixTransform3D', 'Transform3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('MatrixTransform3D(', ')', 'void'),
  \ dotnet#method('MatrixTransform3D(', 'Matrix3D matrix)', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('get_IsAffine(', ')', 'bool'),
  \ dotnet#method('Append(', 'Matrix3D& matrix)', 'strict void'),
  \ dotnet#method('Clone(', ')', 'MatrixTransform3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'MatrixTransform3D'),
  \ dotnet#method('get_Matrix(', ')', 'Matrix3D'),
  \ dotnet#method('set_Matrix(', 'Matrix3D value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('MatrixTransform3D(', ')', 'static void .'),
  \ dotnet#prop('Value', 'Matrix3D'),
  \ dotnet#prop('IsAffine', 'bool'),
  \ dotnet#prop('Matrix', 'Matrix3D'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('MeshGeometry3D', 'Geometry3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('MeshGeometry3D(', ')', 'void'),
  \ dotnet#method('get_Bounds(', ')', ''),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('GetTextureCoordinateBounds(', ')', 'Rect'),
  \ dotnet#method('RayHitTestCore(', 'class RayHitTestParameters rayParams, FaceType hitTestableFaces)', 'strict void'),
  \ dotnet#method('Clone(', ')', 'MeshGeometry3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'MeshGeometry3D'),
  \ dotnet#method('get_Positions(', ')', 'Point3DCollection'),
  \ dotnet#method('set_Positions(', 'class Point3DCollection value)', 'void'),
  \ dotnet#method('get_Normals(', ')', 'VMeshGeometry3D3DCollection'),
  \ dotnet#method('set_Normals(', 'class VMeshGeometry3D3DCollection value)', 'void'),
  \ dotnet#method('get_TextureCoordinates(', ')', 'PointCollection'),
  \ dotnet#method('set_TextureCoordinates(', 'class PointCollection value)', 'void'),
  \ dotnet#method('get_TriangleIndices(', ')', 'Int32Collection'),
  \ dotnet#method('set_TriangleIndices(', 'class Int32Collection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('MeshGeometry3D(', ')', 'static void .'),
  \ dotnet#prop('Bounds', 'Rect3D'),
  \ dotnet#prop('Positions', 'Point3DCollection'),
  \ dotnet#prop('Normals', 'VMeshGeometry3D3DCollection'),
  \ dotnet#prop('TextureCoordinates', 'PointCollection'),
  \ dotnet#prop('TriangleIndices', 'Int32Collection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('Model3DGroup', 'Model3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Model3DGroup(', ')', 'void'),
  \ dotnet#method('RayHitTestCore(', 'class RayHitTestParameters rayParams)', 'strict void'),
  \ dotnet#method('CalculateSubgraphBoundsInnerSpace(', ')', 'strict'),
  \ dotnet#method('get_EmptyGroup(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'Model3DGroup'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Model3DGroup'),
  \ dotnet#method('get_Children(', ')', 'Model3DCollection'),
  \ dotnet#method('set_Children(', 'class Model3DCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('Model3DGroup(', ')', 'static void .'),
  \ dotnet#prop('EmptyGroup', 'Model3DGroup'),
  \ dotnet#prop('Children', 'Model3DCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('ModelUIElement3D', 'UIElement3D', [ 
  \ dotnet#method('ModelUIElement3D(', ')', 'void'),
  \ dotnet#method('get_Model(', ')', 'Model3D'),
  \ dotnet#method('set_Model(', 'class Model3D value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('ModelUIElement3D(', ')', 'static void .'),
  \ dotnet#prop('Model', 'Model3D'),
  \ ])

call dotnet#class('ModelVisual3D', 'Visual3D', [ 
  \ dotnet#method('ModelVisual3D(', ')', 'void'),
  \ dotnet#method('GetVisual3DChild(', 'int32 index)', 'family'),
  \ dotnet#method('get_Visual3DChildrenCount(', ')', 'int32'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_Children(', ')', 'Visual3DCollection'),
  \ dotnet#method('get_Content(', ')', 'Model3D'),
  \ dotnet#method('set_Content(', 'class Model3D value)', 'void'),
  \ dotnet#method('get_Transform(', ')', 'Transform3D'),
  \ dotnet#method('set_Transform(', 'class Transform3D value)', 'void'),
  \ dotnet#method('ModelVisual3D(', ')', 'static void .'),
  \ dotnet#prop('Visual3DChildrenCount', 'int32'),
  \ dotnet#prop('Children', 'Visual3DCollection'),
  \ dotnet#prop('Content', 'Model3D'),
  \ dotnet#prop('Transform', 'Transform3D'),
  \ ])

call dotnet#class('Point3D', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#field('_z', 'float64'),
  \ dotnet#method('Point3D(', 'float64 x, float64 y, float64 z)', 'void'),
  \ dotnet#method('Offset(', 'float64 offsetX, float64 offsetY, float64 offsetZ)', 'void'),
  \ dotnet#method('op_Addition(', 'Point3D point, VPoint3D3D vPoint3D)', 'static'),
  \ dotnet#method('Add(', 'Point3D point, VPoint3D3D vPoint3D)', 'static Point3D'),
  \ dotnet#method('op_Subtraction(', 'Point3D point, VPoint3D3D vPoint3D)', 'static'),
  \ dotnet#method('Subtract(', 'Point3D point, VPoint3D3D vPoint3D)', 'static Point3D'),
  \ dotnet#method('op_Subtraction(', 'Point3D point1, Point3D point2)', 'static'),
  \ dotnet#method('Subtract(', 'Point3D point1, Point3D point2)', 'static VPoint3D3D'),
  \ dotnet#method('Subtract(', 'Point3D& p1, Point3D& p2, [out] VPoint3D3D& result)', 'static void'),
  \ dotnet#method('op_Multiply(', 'Point3D point, Matrix3D matrix)', 'static'),
  \ dotnet#method('Multiply(', 'Point3D point, Matrix3D matrix)', 'static Point3D'),
  \ dotnet#method('op_Explicit(', 'Point3D point)', 'static'),
  \ dotnet#method('op_Explicit(', 'Point3D point)', 'static'),
  \ dotnet#method('op_Equality(', 'Point3D point1, Point3D point2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Point3D point1, Point3D point2)', 'static bool'),
  \ dotnet#method('Equals(', 'Point3D point1, Point3D point2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Point3D value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Point3D'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('get_Z(', ')', 'float64'),
  \ dotnet#method('set_Z(', 'float64 value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Z', 'float64'),
  \ ])

call dotnet#class('Point3DCollection', 'Freezable', [ 
  \ dotnet#field('_current', 'Point3D'),
  \ dotnet#field('_list', 'Point3DCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('Point3DCollection(', 'class Point3DCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Point3D'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('DeserializeFrom(', 'class BinaryReader reader)', 'static object'),
  \ dotnet#method('Clone(', ')', 'Point3DCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Point3DCollection'),
  \ dotnet#method('Add(', 'Point3D value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'Point3D value)', 'bool'),
  \ dotnet#method('IndexOf(', 'Point3D value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, Point3D value)', 'void'),
  \ dotnet#method('Remove(', 'Point3D value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Point3D value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'Point3D[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'Point3DCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'Point3D'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'Point3D value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string source)', 'static Point3DCollection'),
  \ dotnet#method('Point3DCollection(', ')', 'void'),
  \ dotnet#method('Point3DCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('Point3DCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'Point3D'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'Point3DCollection'),
  \ ])

call dotnet#class('VVector3DCollection3DCollection', 'Freezable', [ 
  \ dotnet#field('_current', 'VVector3DCollection3D'),
  \ dotnet#field('_list', 'VVector3DCollection3DCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('Vector3DCollection(', 'class VVector3DCollection3DCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'VVector3DCollection3D'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('DeserializeFrom(', 'class BinaryReader reader)', 'static object'),
  \ dotnet#method('Clone(', ')', 'VVector3DCollection3DCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'VVector3DCollection3DCollection'),
  \ dotnet#method('Add(', 'VVector3DCollection3D value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'VVector3DCollection3D value)', 'bool'),
  \ dotnet#method('IndexOf(', 'VVector3DCollection3D value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, VVector3DCollection3D value)', 'void'),
  \ dotnet#method('Remove(', 'VVector3DCollection3D value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, VVector3DCollection3D value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'VVector3DCollection3D[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'VVector3DCollection3DCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'VVector3DCollection3D'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'VVector3DCollection3D value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string source)', 'static VVector3DCollection3DCollection'),
  \ dotnet#method('Vector3DCollection(', ')', 'void'),
  \ dotnet#method('Vector3DCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('Vector3DCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'VVector3DCollection3D'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'VVector3DCollection3DCollection'),
  \ ])

call dotnet#class('Point4D', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#field('_z', 'float64'),
  \ dotnet#field('_w', 'float64'),
  \ dotnet#method('Point4D(', 'float64 x, float64 y, float64 z, float64 w)', 'void'),
  \ dotnet#method('Offset(', 'float64 deltaX, float64 deltaY, float64 deltaZ, float64 deltaW)', 'void'),
  \ dotnet#method('op_Addition(', 'Point4D point1, Point4D point2)', 'static'),
  \ dotnet#method('Add(', 'Point4D point1, Point4D point2)', 'static Point4D'),
  \ dotnet#method('op_Subtraction(', 'Point4D point1, Point4D point2)', 'static'),
  \ dotnet#method('Subtract(', 'Point4D point1, Point4D point2)', 'static Point4D'),
  \ dotnet#method('op_Multiply(', 'Point4D point, Matrix3D matrix)', 'static'),
  \ dotnet#method('Multiply(', 'Point4D point, Matrix3D matrix)', 'static Point4D'),
  \ dotnet#method('op_Equality(', 'Point4D point1, Point4D point2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Point4D point1, Point4D point2)', 'static bool'),
  \ dotnet#method('Equals(', 'Point4D point1, Point4D point2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Point4D value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Point4D'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('get_Z(', ')', 'float64'),
  \ dotnet#method('set_Z(', 'float64 value)', 'void'),
  \ dotnet#method('get_W(', ')', 'float64'),
  \ dotnet#method('set_W(', 'float64 value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Z', 'float64'),
  \ dotnet#prop('W', 'float64'),
  \ ])

call dotnet#class('PointLightBase', 'Light', [ 
  \ dotnet#method('PointLightBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'PointLightBase'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PointLightBase'),
  \ dotnet#method('get_Position(', ')', 'Point3D'),
  \ dotnet#method('set_Position(', 'Point3D value)', 'void'),
  \ dotnet#method('get_Range(', ')', 'float64'),
  \ dotnet#method('set_Range(', 'float64 value)', 'void'),
  \ dotnet#method('get_ConstantAttenuation(', ')', 'float64'),
  \ dotnet#method('set_ConstantAttenuation(', 'float64 value)', 'void'),
  \ dotnet#method('get_LinearAttenuation(', ')', 'float64'),
  \ dotnet#method('set_LinearAttenuation(', 'float64 value)', 'void'),
  \ dotnet#method('get_QuadraticAttenuation(', ')', 'float64'),
  \ dotnet#method('set_QuadraticAttenuation(', 'float64 value)', 'void'),
  \ dotnet#method('PointLightBase(', ')', 'static void .'),
  \ dotnet#prop('Position', 'Point3D'),
  \ dotnet#prop('Range', 'float64'),
  \ dotnet#prop('ConstantAttenuation', 'float64'),
  \ dotnet#prop('LinearAttenuation', 'float64'),
  \ dotnet#prop('QuadraticAttenuation', 'float64'),
  \ ])

call dotnet#class('PointLight', 'PointLightBase', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('PointLight(', ')', 'void'),
  \ dotnet#method('PointLight(', 'Color diffuseColor, Point3D position)', 'void'),
  \ dotnet#method('Clone(', ')', 'PointLight'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PointLight'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ ])

call dotnet#class('ProjectionCamera', 'Camera', [ 
  \ dotnet#method('ProjectionCamera(', ')', 'void'),
  \ dotnet#method('GetViewMatrix(', ')', 'strict'),
  \ dotnet#method('CreateViewMatrix(', 'class Transform3D transform, Point3D& position, VProjectionCamera3D& lookDirection, VProjectionCamera3D& upDirection)', 'static Matrix3D'),
  \ dotnet#method('Clone(', ')', 'ProjectionCamera'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ProjectionCamera'),
  \ dotnet#method('get_NearPlaneDistance(', ')', 'float64'),
  \ dotnet#method('set_NearPlaneDistance(', 'float64 value)', 'void'),
  \ dotnet#method('get_FarPlaneDistance(', ')', 'float64'),
  \ dotnet#method('set_FarPlaneDistance(', 'float64 value)', 'void'),
  \ dotnet#method('get_Position(', ')', 'Point3D'),
  \ dotnet#method('set_Position(', 'Point3D value)', 'void'),
  \ dotnet#method('get_LookDirection(', ')', 'VProjectionCamera3D'),
  \ dotnet#method('set_LookDirection(', 'VProjectionCamera3D value)', 'void'),
  \ dotnet#method('get_UpDirection(', ')', 'VProjectionCamera3D'),
  \ dotnet#method('set_UpDirection(', 'VProjectionCamera3D value)', 'void'),
  \ dotnet#method('ProjectionCamera(', ')', 'static void .'),
  \ dotnet#prop('NearPlaneDistance', 'float64'),
  \ dotnet#prop('FarPlaneDistance', 'float64'),
  \ dotnet#prop('Position', 'Point3D'),
  \ dotnet#prop('LookDirection', 'VProjectionCamera3D'),
  \ dotnet#prop('UpDirection', 'VProjectionCamera3D'),
  \ ])

call dotnet#class('OrthographicCamera', 'ProjectionCamera', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('OrthographicCamera(', ')', 'void'),
  \ dotnet#method('OrthographicCamera(', 'Point3D position, VOrthographicCamera3D lookDirection, VOrthographicCamera3D upDirection, float64 width)', 'void'),
  \ dotnet#method('GetProjectionMatrix(', 'float64 aspectRatio, float64 zn, float64 zf)', 'Matrix3D'),
  \ dotnet#method('GetProjectionMatrix(', 'float64 aspectRatio)', 'strict'),
  \ dotnet#method('RayFromViewportPoint(', 'Point p, Size viewSize, Rect3D boundingRect, [out] float64& distanceAdjustment)', 'strict'),
  \ dotnet#method('Clone(', ')', 'OrthographicCamera'),
  \ dotnet#method('CloneCurrentValue(', ')', 'OrthographicCamera'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('set_Width(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('OrthographicCamera(', ')', 'static void .'),
  \ dotnet#prop('Width', 'float64'),
  \ ])

call dotnet#class('PerspectiveCamera', 'ProjectionCamera', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('PerspectiveCamera(', ')', 'void'),
  \ dotnet#method('PerspectiveCamera(', 'Point3D position, VPerspectiveCamera3D lookDirection, VPerspectiveCamera3D upDirection, float64 fieldOfView)', 'void'),
  \ dotnet#method('GetProjectionMatrix(', 'float64 aspectRatio, float64 zn, float64 zf)', 'Matrix3D'),
  \ dotnet#method('GetProjectionMatrix(', 'float64 aspectRatio)', 'strict'),
  \ dotnet#method('RayFromViewportPoint(', 'Point p, Size viewSize, Rect3D boundingRect, [out] float64& distanceAdjustment)', 'strict'),
  \ dotnet#method('Clone(', ')', 'PerspectiveCamera'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PerspectiveCamera'),
  \ dotnet#method('get_FieldOfView(', ')', 'float64'),
  \ dotnet#method('set_FieldOfView(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('PerspectiveCamera(', ')', 'static void .'),
  \ dotnet#prop('FieldOfView', 'float64'),
  \ ])

call dotnet#class('Quaternion', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#field('_z', 'float64'),
  \ dotnet#field('_w', 'float64'),
  \ dotnet#field('_isNotDistinguishedIdentity', 'bool'),
  \ dotnet#method('Quaternion(', 'float64 x, float64 y, float64 z, float64 w)', 'void'),
  \ dotnet#method('Quaternion(', 'VQuaternion3D axisOfRotation, float64 angleInDegrees)', 'void'),
  \ dotnet#method('get_Identity(', ')', 'static'),
  \ dotnet#method('get_Axis(', ')', 'VQuaternion3D'),
  \ dotnet#method('get_Angle(', ')', 'float64'),
  \ dotnet#method('get_IsNormalized(', ')', 'bool'),
  \ dotnet#method('get_IsIdentity(', ')', 'bool'),
  \ dotnet#method('Conjugate(', ')', 'void'),
  \ dotnet#method('Invert(', ')', 'void'),
  \ dotnet#method('Normalize(', ')', 'void'),
  \ dotnet#method('op_Addition(', 'Quaternion left, Quaternion right)', 'static'),
  \ dotnet#method('Add(', 'Quaternion left, Quaternion right)', 'static Quaternion'),
  \ dotnet#method('op_Subtraction(', 'Quaternion left, Quaternion right)', 'static'),
  \ dotnet#method('Subtract(', 'Quaternion left, Quaternion right)', 'static Quaternion'),
  \ dotnet#method('op_Multiply(', 'Quaternion left, Quaternion right)', 'static'),
  \ dotnet#method('Multiply(', 'Quaternion left, Quaternion right)', 'static Quaternion'),
  \ dotnet#method('Slerp(', 'Quaternion from, Quaternion to, float64 t)', 'static Quaternion'),
  \ dotnet#method('Slerp(', 'Quaternion from, Quaternion to, float64 t, bool useShortestPath)', 'static Quaternion'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('get_Z(', ')', 'float64'),
  \ dotnet#method('set_Z(', 'float64 value)', 'void'),
  \ dotnet#method('get_W(', ')', 'float64'),
  \ dotnet#method('set_W(', 'float64 value)', 'void'),
  \ dotnet#method('op_Equality(', 'Quaternion quaternion1, Quaternion quaternion2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Quaternion quaternion1, Quaternion quaternion2)', 'static bool'),
  \ dotnet#method('Equals(', 'Quaternion quaternion1, Quaternion quaternion2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Quaternion value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Quaternion'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Quaternion(', ')', 'static void .'),
  \ dotnet#prop('Identity', 'Quaternion'),
  \ dotnet#prop('Axis', 'VQuaternion3D'),
  \ dotnet#prop('Angle', 'float64'),
  \ dotnet#prop('IsNormalized', 'bool'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Z', 'float64'),
  \ dotnet#prop('W', 'float64'),
  \ ])

call dotnet#class('QuaternionRotation3D', 'Rotation3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('QuaternionRotation3D(', ')', 'void'),
  \ dotnet#method('QuaternionRotation3D(', 'Quaternion quaternion)', 'void'),
  \ dotnet#method('get_InternalQuaternion(', ')', 'strict'),
  \ dotnet#method('Clone(', ')', 'QuaternionRotation3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'QuaternionRotation3D'),
  \ dotnet#method('get_Quaternion(', ')', 'Quaternion'),
  \ dotnet#method('set_Quaternion(', 'Quaternion value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('QuaternionRotation3D(', ')', 'static void .'),
  \ dotnet#prop('InternalQuaternion', 'Quaternion'),
  \ dotnet#prop('Quaternion', 'Quaternion'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('RayHitTestResult', 'HitTestResult', [ 
  \ dotnet#method('RayHitTestResult(', 'class Visual3D visualHit, Model3D modelHit)', 'void'),
  \ dotnet#method('get_VisualHit(', ')', 'Visual3D'),
  \ dotnet#method('get_ModelHit(', ')', 'Model3D'),
  \ dotnet#method('get_PointHit(', ')', 'abstract'),
  \ dotnet#method('get_DistanceToRayOrigin(', ')', 'abstract float64'),
  \ dotnet#method('SetDistanceToRayOrigin(', 'float64 distance)', 'abstract strict void'),
  \ dotnet#method('CompareByDistanceToRayOrigin(', 'class RayHitTestResult x, RayHitTestResult y)', 'static int32'),
  \ dotnet#prop('VisualHit', 'Visual3D'),
  \ dotnet#prop('ModelHit', 'Model3D'),
  \ dotnet#prop('PointHit', 'Point3D'),
  \ dotnet#prop('DistanceToRayOrigin', 'float64'),
  \ ])

call dotnet#class('RayHitTestParameters', 'HitTestParameters3D', [ 
  \ dotnet#method('RayHitTestParameters(', 'Point3D origin, VRayHitTestParameters3D direction)', 'void'),
  \ dotnet#method('get_Origin(', ')', 'Point3D'),
  \ dotnet#method('get_Direction(', ')', 'VRayHitTestParameters3D'),
  \ dotnet#method('ReportResult(', 'class MeshGeometry3D meshHit, Point3D pointHit, float64 distanceToRayOrigin, int32 vertexIndex1, int32 vertexIndex2, int32 vertexIndex3, Point barycentric)', 'void'),
  \ dotnet#method('RaiseCallback(', 'class HitTestResultCallback resultCallback, HitTestFilterCallback filterCallback, HitTestResultBehavior lastResult)', 'HitTestResultBehavior'),
  \ dotnet#method('RaiseCallback(', 'class HitTestResultCallback resultCallback, HitTestFilterCallback filterCallback, HitTestResultBehavior lastResult, float64 distanceAdjustment)', 'HitTestResultBehavior'),
  \ dotnet#method('GetLocalLine(', '[out] Point3D& origin, [out] VRayHitTestParameters3D& direction)', 'void'),
  \ dotnet#method('ClearResults(', ')', 'void'),
  \ dotnet#method('get_IsRay(', ')', 'bool'),
  \ dotnet#prop('Origin', 'Point3D'),
  \ dotnet#prop('Direction', 'VRayHitTestParameters3D'),
  \ dotnet#prop('IsRay', 'bool'),
  \ ])

call dotnet#class('RayMeshGeometry3DHitTestResult', 'RayHitTestResult', [ 
  \ dotnet#method('RayMeshGeometry3DHitTestResult(', 'class Visual3D visualHit, Model3D modelHit, MeshGeometry3D meshHit, Point3D pointHit, float64 distanceToRayOrigin, int32 vertexIndex1, int32 vertexIndex2, int32 vertexIndex3, Point barycentricCoordinate)', 'void'),
  \ dotnet#method('get_PointHit(', ')', ''),
  \ dotnet#method('get_DistanceToRayOrigin(', ')', 'float64'),
  \ dotnet#method('get_VertexIndex1(', ')', 'int32'),
  \ dotnet#method('get_VertexIndex2(', ')', 'int32'),
  \ dotnet#method('get_VertexIndex3(', ')', 'int32'),
  \ dotnet#method('get_VertexWeight1(', ')', 'float64'),
  \ dotnet#method('get_VertexWeight2(', ')', 'float64'),
  \ dotnet#method('get_VertexWeight3(', ')', 'float64'),
  \ dotnet#method('get_MeshHit(', ')', 'MeshGeometry3D'),
  \ dotnet#method('SetDistanceToRayOrigin(', 'float64 distance)', 'strict void'),
  \ dotnet#prop('PointHit', 'Point3D'),
  \ dotnet#prop('DistanceToRayOrigin', 'float64'),
  \ dotnet#prop('VertexIndex1', 'int32'),
  \ dotnet#prop('VertexIndex2', 'int32'),
  \ dotnet#prop('VertexIndex3', 'int32'),
  \ dotnet#prop('VertexWeight1', 'float64'),
  \ dotnet#prop('VertexWeight2', 'float64'),
  \ dotnet#prop('VertexWeight3', 'float64'),
  \ dotnet#prop('MeshHit', 'MeshGeometry3D'),
  \ ])

call dotnet#class('Rect3D', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#field('_z', 'float64'),
  \ dotnet#field('_sizeX', 'float64'),
  \ dotnet#field('_sizeY', 'float64'),
  \ dotnet#field('_sizeZ', 'float64'),
  \ dotnet#method('Rect3D(', 'Point3D location, Size3D size)', 'void'),
  \ dotnet#method('Rect3D(', 'float64 x, float64 y, float64 z, float64 sizeX, float64 sizeY, float64 sizeZ)', 'void'),
  \ dotnet#method('Rect3D(', 'Point3D point1, Point3D point2)', 'void'),
  \ dotnet#method('Rect3D(', 'Point3D point, VRect3D3D vRect3D)', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Location(', ')', 'Point3D'),
  \ dotnet#method('set_Location(', 'Point3D value)', 'void'),
  \ dotnet#method('get_Size(', ')', 'Size3D'),
  \ dotnet#method('set_Size(', 'Size3D value)', 'void'),
  \ dotnet#method('get_SizeX(', ')', 'float64'),
  \ dotnet#method('set_SizeX(', 'float64 value)', 'void'),
  \ dotnet#method('get_SizeY(', ')', 'float64'),
  \ dotnet#method('set_SizeY(', 'float64 value)', 'void'),
  \ dotnet#method('get_SizeZ(', ')', 'float64'),
  \ dotnet#method('set_SizeZ(', 'float64 value)', 'void'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('get_Z(', ')', 'float64'),
  \ dotnet#method('set_Z(', 'float64 value)', 'void'),
  \ dotnet#method('Contains(', 'Point3D point)', 'bool'),
  \ dotnet#method('Contains(', 'float64 x, float64 y, float64 z)', 'bool'),
  \ dotnet#method('Contains(', 'Rect3D rect)', 'bool'),
  \ dotnet#method('IntersectsWith(', 'Rect3D rect)', 'bool'),
  \ dotnet#method('Intersect(', 'Rect3D rect)', 'void'),
  \ dotnet#method('Intersect(', 'Rect3D rect1, Rect3D rect2)', 'static Rect3D'),
  \ dotnet#method('Union(', 'Rect3D rect)', 'void'),
  \ dotnet#method('Union(', 'Rect3D rect1, Rect3D rect2)', 'static Rect3D'),
  \ dotnet#method('Union(', 'Point3D point)', 'void'),
  \ dotnet#method('Union(', 'Rect3D rect, Point3D point)', 'static Rect3D'),
  \ dotnet#method('Offset(', 'VRect3D3D offsetVRect3D)', 'void'),
  \ dotnet#method('Offset(', 'float64 offsetX, float64 offsetY, float64 offsetZ)', 'void'),
  \ dotnet#method('Offset(', 'Rect3D rect, VRect3D3D offsetVRect3D)', 'static Rect3D'),
  \ dotnet#method('Offset(', 'Rect3D rect, float64 offsetX, float64 offsetY, float64 offsetZ)', 'static Rect3D'),
  \ dotnet#method('op_Equality(', 'Rect3D rect1, Rect3D rect2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Rect3D rect1, Rect3D rect2)', 'static bool'),
  \ dotnet#method('Equals(', 'Rect3D rect1, Rect3D rect2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Rect3D value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Rect3D'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Rect3D(', ')', 'static void .'),
  \ dotnet#prop('Empty', 'Rect3D'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('Location', 'Point3D'),
  \ dotnet#prop('Size', 'Size3D'),
  \ dotnet#prop('SizeX', 'float64'),
  \ dotnet#prop('SizeY', 'float64'),
  \ dotnet#prop('SizeZ', 'float64'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Z', 'float64'),
  \ ])

call dotnet#class('RotateTransform3D', 'AffineTransform3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('RotateTransform3D(', ')', 'void'),
  \ dotnet#method('RotateTransform3D(', 'class Rotation3D rotation)', 'void'),
  \ dotnet#method('RotateTransform3D(', 'class Rotation3D rotation, Point3D center)', 'void'),
  \ dotnet#method('RotateTransform3D(', 'class Rotation3D rotation, float64 centerX, float64 centerY, float64 centerZ)', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('Append(', 'Matrix3D& matrix)', 'strict void'),
  \ dotnet#method('Clone(', ')', 'RotateTransform3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'RotateTransform3D'),
  \ dotnet#method('get_CenterX(', ')', 'float64'),
  \ dotnet#method('set_CenterX(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterY(', ')', 'float64'),
  \ dotnet#method('set_CenterY(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterZ(', ')', 'float64'),
  \ dotnet#method('set_CenterZ(', 'float64 value)', 'void'),
  \ dotnet#method('get_Rotation(', ')', 'Rotation3D'),
  \ dotnet#method('set_Rotation(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('RotateTransform3D(', ')', 'static void .'),
  \ dotnet#prop('Value', 'Matrix3D'),
  \ dotnet#prop('CenterX', 'float64'),
  \ dotnet#prop('CenterY', 'float64'),
  \ dotnet#prop('CenterZ', 'float64'),
  \ dotnet#prop('Rotation', 'Rotation3D'),
  \ ])

call dotnet#class('ScaleTransform3D', 'AffineTransform3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('ScaleTransform3D(', ')', 'void'),
  \ dotnet#method('ScaleTransform3D(', 'VScaleTransform3D3D scale)', 'void'),
  \ dotnet#method('ScaleTransform3D(', 'float64 scaleX, float64 scaleY, float64 scaleZ)', 'void'),
  \ dotnet#method('ScaleTransform3D(', 'VScaleTransform3D3D scale, Point3D center)', 'void'),
  \ dotnet#method('ScaleTransform3D(', 'float64 scaleX, float64 scaleY, float64 scaleZ, float64 centerX, float64 centerY, float64 centerZ)', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('Append(', 'Matrix3D& matrix)', 'strict void'),
  \ dotnet#method('Clone(', ')', 'ScaleTransform3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ScaleTransform3D'),
  \ dotnet#method('get_ScaleX(', ')', 'float64'),
  \ dotnet#method('set_ScaleX(', 'float64 value)', 'void'),
  \ dotnet#method('get_ScaleY(', ')', 'float64'),
  \ dotnet#method('set_ScaleY(', 'float64 value)', 'void'),
  \ dotnet#method('get_ScaleZ(', ')', 'float64'),
  \ dotnet#method('set_ScaleZ(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterX(', ')', 'float64'),
  \ dotnet#method('set_CenterX(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterY(', ')', 'float64'),
  \ dotnet#method('set_CenterY(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterZ(', ')', 'float64'),
  \ dotnet#method('set_CenterZ(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('ScaleTransform3D(', ')', 'static void .'),
  \ dotnet#prop('Value', 'Matrix3D'),
  \ dotnet#prop('ScaleX', 'float64'),
  \ dotnet#prop('ScaleY', 'float64'),
  \ dotnet#prop('ScaleZ', 'float64'),
  \ dotnet#prop('CenterX', 'float64'),
  \ dotnet#prop('CenterY', 'float64'),
  \ dotnet#prop('CenterZ', 'float64'),
  \ ])

call dotnet#class('Size3D', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#field('_z', 'float64'),
  \ dotnet#method('Size3D(', 'float64 x, float64 y, float64 z)', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('get_Z(', ')', 'float64'),
  \ dotnet#method('set_Z(', 'float64 value)', 'void'),
  \ dotnet#method('op_Explicit(', 'Size3D size)', 'static'),
  \ dotnet#method('op_Explicit(', 'Size3D size)', 'static'),
  \ dotnet#method('op_Equality(', 'Size3D size1, Size3D size2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Size3D size1, Size3D size2)', 'static bool'),
  \ dotnet#method('Equals(', 'Size3D size1, Size3D size2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Size3D value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Size3D'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Size3D(', ')', 'static void .'),
  \ dotnet#prop('Empty', 'Size3D'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Z', 'float64'),
  \ ])

call dotnet#class('SpecularMaterial', 'Material', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('SpecularMaterial(', ')', 'void'),
  \ dotnet#method('SpecularMaterial(', 'class Brush brush, float64 specularPower)', 'void'),
  \ dotnet#method('Clone(', ')', 'SpecularMaterial'),
  \ dotnet#method('CloneCurrentValue(', ')', 'SpecularMaterial'),
  \ dotnet#method('get_Color(', ')', 'Color'),
  \ dotnet#method('set_Color(', 'Color value)', 'void'),
  \ dotnet#method('get_Brush(', ')', 'Brush'),
  \ dotnet#method('set_Brush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_SpecularPower(', ')', 'float64'),
  \ dotnet#method('set_SpecularPower(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('SpecularMaterial(', ')', 'static void .'),
  \ dotnet#prop('Color', 'Color'),
  \ dotnet#prop('Brush', 'Brush'),
  \ dotnet#prop('SpecularPower', 'float64'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('SpotLight', 'PointLightBase', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('SpotLight(', 'Color diffuseColor, Point3D position, VSpotLight3D direction, float64 outerConeAngle, float64 innerConeAngle)', 'void'),
  \ dotnet#method('SpotLight(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'SpotLight'),
  \ dotnet#method('CloneCurrentValue(', ')', 'SpotLight'),
  \ dotnet#method('get_Direction(', ')', 'VSpotLight3D'),
  \ dotnet#method('set_Direction(', 'VSpotLight3D value)', 'void'),
  \ dotnet#method('get_OuterConeAngle(', ')', 'float64'),
  \ dotnet#method('set_OuterConeAngle(', 'float64 value)', 'void'),
  \ dotnet#method('get_InnerConeAngle(', ')', 'float64'),
  \ dotnet#method('set_InnerConeAngle(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('SpotLight(', ')', 'static void .'),
  \ dotnet#prop('Direction', 'VSpotLight3D'),
  \ dotnet#prop('OuterConeAngle', 'float64'),
  \ dotnet#prop('InnerConeAngle', 'float64'),
  \ ])

call dotnet#class('Transform3DGroup', 'Transform3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Transform3DGroup(', ')', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('get_IsAffine(', ')', 'bool'),
  \ dotnet#method('Append(', 'Matrix3D& matrix)', 'strict void'),
  \ dotnet#method('Clone(', ')', 'Transform3DGroup'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Transform3DGroup'),
  \ dotnet#method('get_Children(', ')', 'Transform3DCollection'),
  \ dotnet#method('set_Children(', 'class Transform3DCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('Transform3DGroup(', ')', 'static void .'),
  \ dotnet#prop('Value', 'Matrix3D'),
  \ dotnet#prop('IsAffine', 'bool'),
  \ dotnet#prop('Children', 'Transform3DCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('TranslateTransform3D', 'AffineTransform3D', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('TranslateTransform3D(', ')', 'void'),
  \ dotnet#method('TranslateTransform3D(', 'VTranslateTransform3D3D offset)', 'void'),
  \ dotnet#method('TranslateTransform3D(', 'float64 offsetX, float64 offsetY, float64 offsetZ)', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('Append(', 'Matrix3D& matrix)', 'strict void'),
  \ dotnet#method('Clone(', ')', 'TranslateTransform3D'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TranslateTransform3D'),
  \ dotnet#method('get_OffsetX(', ')', 'float64'),
  \ dotnet#method('set_OffsetX(', 'float64 value)', 'void'),
  \ dotnet#method('get_OffsetY(', ')', 'float64'),
  \ dotnet#method('set_OffsetY(', 'float64 value)', 'void'),
  \ dotnet#method('get_OffsetZ(', ')', 'float64'),
  \ dotnet#method('set_OffsetZ(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('TranslateTransform3D(', ')', 'static void .'),
  \ dotnet#prop('Value', 'Matrix3D'),
  \ dotnet#prop('OffsetX', 'float64'),
  \ dotnet#prop('OffsetY', 'float64'),
  \ dotnet#prop('OffsetZ', 'float64'),
  \ ])

call dotnet#class('VVector3D3D', 'ValueType', [ 
  \ dotnet#field('_x', 'float64'),
  \ dotnet#field('_y', 'float64'),
  \ dotnet#field('_z', 'float64'),
  \ dotnet#method('Vector3D(', 'float64 x, float64 y, float64 z)', 'void'),
  \ dotnet#method('get_Length(', ')', 'float64'),
  \ dotnet#method('get_LengthSquared(', ')', 'float64'),
  \ dotnet#method('Normalize(', ')', 'void'),
  \ dotnet#method('AngleBetween(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static float64'),
  \ dotnet#method('op_UnaryNegation(', 'VVector3D3D vVector3D)', 'static'),
  \ dotnet#method('Negate(', ')', 'void'),
  \ dotnet#method('op_Addition(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static'),
  \ dotnet#method('Add(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static VVector3D3D'),
  \ dotnet#method('op_Subtraction(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static'),
  \ dotnet#method('Subtract(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static VVector3D3D'),
  \ dotnet#method('op_Addition(', 'VVector3D3D vVector3D, Point3D point)', 'static'),
  \ dotnet#method('Add(', 'VVector3D3D vVector3D, Point3D point)', 'static Point3D'),
  \ dotnet#method('op_Subtraction(', 'VVector3D3D vVector3D, Point3D point)', 'static'),
  \ dotnet#method('Subtract(', 'VVector3D3D vVector3D, Point3D point)', 'static Point3D'),
  \ dotnet#method('op_Multiply(', 'VVector3D3D vVector3D, float64 scalar)', 'static'),
  \ dotnet#method('Multiply(', 'VVector3D3D vVector3D, float64 scalar)', 'static VVector3D3D'),
  \ dotnet#method('op_Multiply(', 'float64 scalar, VVector3D3D vVector3D)', 'static'),
  \ dotnet#method('Multiply(', 'float64 scalar, VVector3D3D vVector3D)', 'static VVector3D3D'),
  \ dotnet#method('op_Division(', 'VVector3D3D vVector3D, float64 scalar)', 'static'),
  \ dotnet#method('Divide(', 'VVector3D3D vVector3D, float64 scalar)', 'static VVector3D3D'),
  \ dotnet#method('op_Multiply(', 'VVector3D3D vVector3D, Matrix3D matrix)', 'static'),
  \ dotnet#method('Multiply(', 'VVector3D3D vVector3D, Matrix3D matrix)', 'static VVector3D3D'),
  \ dotnet#method('DotProduct(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static float64'),
  \ dotnet#method('DotProduct(', 'VVector3D3D& vVector3D1, VVector3D3D& vVector3D2)', 'static float64'),
  \ dotnet#method('CrossProduct(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static VVector3D3D'),
  \ dotnet#method('CrossProduct(', 'VVector3D3D& vVector3D1, VVector3D3D& vVector3D2, [out] VVector3D3D& result)', 'static void'),
  \ dotnet#method('op_Explicit(', 'VVector3D3D vVector3D)', 'static'),
  \ dotnet#method('op_Explicit(', 'VVector3D3D vVector3D)', 'static'),
  \ dotnet#method('op_Equality(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static bool'),
  \ dotnet#method('Equals(', 'VVector3D3D vVector3D1, VVector3D3D vVector3D2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'VVector3D3D value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static VVector3D3D'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('get_Z(', ')', 'float64'),
  \ dotnet#method('set_Z(', 'float64 value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#prop('Length', 'float64'),
  \ dotnet#prop('LengthSquared', 'float64'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Z', 'float64'),
  \ ])

call dotnet#class('Viewport2DVisual3D', 'Visual3D', [ 
  \ dotnet#method('Viewport2DVisual3D(', ')', 'void'),
  \ dotnet#method('Get3DPointFor2DCoordinate(', 'Point point, [out] Point3D& point3D, Point3DCollection positions, PointCollection textureCoords, Int32Collection triIndices)', 'static bool'),
  \ dotnet#method('TextureCoordsToVisualCoords(', 'Point uv, Visual visual)', 'static Point'),
  \ dotnet#method('TextureCoordsToVisualCoords(', 'Point uv, Rect descBounds)', 'static Point'),
  \ dotnet#method('GetIntersectionInfo(', 'class RayHitTestResult rayHitResult, [out] Point& outputPoint)', 'static bool'),
  \ dotnet#method('VisualCoordsToTextureCoords(', 'Point pt, Visual visual)', 'static Point'),
  \ dotnet#method('VisualCoordsToTextureCoords(', 'Point pt, Rect descBounds)', 'static Point'),
  \ dotnet#method('get_Visual(', ')', 'Visual'),
  \ dotnet#method('set_Visual(', 'class Visual value)', 'void'),
  \ dotnet#method('OnVisualChanged(', 'object sender, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('get_Geometry(', ')', 'Geometry3D'),
  \ dotnet#method('set_Geometry(', 'class Geometry3D value)', 'void'),
  \ dotnet#method('OnGeometryChanged(', 'object sender, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('get_InternalPositionsCache(', ')', '.method'),
  \ dotnet#method('set_InternalPositionsCache(', 'class Point3DCollection value)', 'void'),
  \ dotnet#method('get_InternalTextureCoordinatesCache(', ')', '.method'),
  \ dotnet#method('set_InternalTextureCoordinatesCache(', 'class PointCollection value)', 'void'),
  \ dotnet#method('get_InternalTriangleIndicesCache(', ')', '.method'),
  \ dotnet#method('set_InternalTriangleIndicesCache(', 'class Int32Collection value)', 'void'),
  \ dotnet#method('get_Material(', ')', 'Material'),
  \ dotnet#method('set_Material(', 'class Material value)', 'void'),
  \ dotnet#method('OnMaterialPropertyChanged(', 'object sender, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('SetIsVisualHostMaterial(', 'class Material element, bool value)', 'static void'),
  \ dotnet#method('GetIsVisualHostMaterial(', 'class Material element)', 'static bool'),
  \ dotnet#method('get_CacheMode(', ')', 'CacheMode'),
  \ dotnet#method('set_CacheMode(', 'class CacheMode value)', 'void'),
  \ dotnet#method('OnCacheModeChanged(', 'object sender, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('get_Visual3DChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisual3DChild(', 'int32 index)', 'Visual3D'),
  \ dotnet#method('get_InternalVisual2DOr3DChildrenCount(', ')', 'strict int32'),
  \ dotnet#method('InternalGet2DOr3DVisualChild(', 'int32 index)', 'strict'),
  \ dotnet#method('Viewport2DVisual3D(', ')', 'static void .'),
  \ dotnet#prop('Visual', 'Visual'),
  \ dotnet#prop('Geometry', 'Geometry3D'),
  \ dotnet#prop('InternalPositionsCache', 'Point3DCollection'),
  \ dotnet#prop('InternalTextureCoordinatesCache', 'PointCollection'),
  \ dotnet#prop('InternalTriangleIndicesCache', 'Int32Collection'),
  \ dotnet#prop('Material', 'Material'),
  \ dotnet#prop('CacheMode', 'CacheMode'),
  \ dotnet#prop('Visual3DChildrenCount', 'int32'),
  \ dotnet#prop('InternalVisual2DOr3DChildrenCount', 'int32'),
  \ ])

call dotnet#class('Viewport3DVisual', 'Visual', [ 
  \ dotnet#method('Viewport3DVisual(', ')', 'void'),
  \ dotnet#method('get_Parent(', ')', 'DependencyObject'),
  \ dotnet#method('get_Clip(', ')', 'Geometry'),
  \ dotnet#method('set_Clip(', 'class Geometry value)', 'void'),
  \ dotnet#method('get_Opacity(', ')', 'float64'),
  \ dotnet#method('set_Opacity(', 'float64 value)', 'void'),
  \ dotnet#method('get_OpacityMask(', ')', 'Brush'),
  \ dotnet#method('set_OpacityMask(', 'class Brush value)', 'void'),
  \ dotnet#method('get_BitmapEffect(', ')', 'BitmapEffect'),
  \ dotnet#method('set_BitmapEffect(', 'class BitmapEffect value)', 'void'),
  \ dotnet#method('get_BitmapEffectInput(', ')', 'BitmapEffectInput'),
  \ dotnet#method('set_BitmapEffectInput(', 'class BitmapEffectInput value)', 'void'),
  \ dotnet#method('HitTest(', 'Point point)', 'HitTestResult'),
  \ dotnet#method('HitTest(', 'class HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, HitTestParameters hitTestParameters)', 'void'),
  \ dotnet#method('get_ContentBounds(', ')', 'Rect'),
  \ dotnet#method('get_Transform(', ')', 'Transform'),
  \ dotnet#method('set_Transform(', 'class Transform value)', 'void'),
  \ dotnet#method('get_Offset(', ')', 'VViewport3DVisual'),
  \ dotnet#method('set_Offset(', 'VViewport3DVisual value)', 'void'),
  \ dotnet#method('get_DescendantBounds(', ')', 'Rect'),
  \ dotnet#method('get_Camera(', ')', 'Camera'),
  \ dotnet#method('set_Camera(', 'class Camera value)', 'void'),
  \ dotnet#method('get_Viewport(', ')', 'Rect'),
  \ dotnet#method('set_Viewport(', 'Rect value)', 'void'),
  \ dotnet#method('get_Children(', ')', 'Visual3DCollection'),
  \ dotnet#method('VerifyAPIReadOnly(', ')', 'void '),
  \ dotnet#method('VerifyAPIReadOnly(', 'class DependencyObject other)', 'void '),
  \ dotnet#method('VerifyAPIReadWrite(', ')', 'void '),
  \ dotnet#method('VerifyAPIReadWrite(', 'class DependencyObject other)', 'void '),
  \ dotnet#method('AddChild(', 'class Visual3D child)', 'void '),
  \ dotnet#method('RemoveChild(', 'class Visual3D child)', 'void '),
  \ dotnet#method('GetChildrenCount(', ')', 'int32 '),
  \ dotnet#method('GetChild(', 'int32 index)', ''),
  \ dotnet#method('get_InternalVisual2DOr3DChildrenCount(', ')', 'strict int32'),
  \ dotnet#method('InternalGet2DOr3DVisualChild(', 'int32 index)', 'strict'),
  \ dotnet#method('HitTestPointInternal(', 'class HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, PointHitTestParameters hitTestParameters)', 'strict'),
  \ dotnet#method('HitTestCore(', 'class GeometryHitTestParameters hitTestParameters)', 'GeometryHitTestResult'),
  \ dotnet#method('WorldToViewport(', 'Point4D point)', 'Point'),
  \ dotnet#method('GetHitTestBounds(', ')', 'strict'),
  \ dotnet#method('CalculateSubgraphBoundsInnerSpace(', 'bool renderBounds)', 'strict'),
  \ dotnet#method('ComputeSubgraphBounds3D(', ')', 'Rect3D'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('PrecomputeContent(', ')', 'strict void'),
  \ dotnet#method('RenderContent(', 'class RenderContext ctx, bool isOnChannel)', 'strict void'),
  \ dotnet#method('FreeContent(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('Visual3DTreeChanged(', ')', 'void'),
  \ dotnet#method('Get3DHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('SetInheritanceContextForChildren(', 'class DependencyObject inheritanceContextForChildren)', 'void'),
  \ dotnet#method('Viewport3DVisual(', ')', 'static void .'),
  \ dotnet#prop('Parent', 'DependencyObject'),
  \ dotnet#prop('Clip', 'Geometry'),
  \ dotnet#prop('Opacity', 'float64'),
  \ dotnet#prop('OpacityMask', 'Brush'),
  \ dotnet#prop('BitmapEffect', 'BitmapEffect'),
  \ dotnet#prop('BitmapEffectInput', 'BitmapEffectInput'),
  \ dotnet#prop('ContentBounds', 'Rect'),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('Offset', 'VViewport3DVisual'),
  \ dotnet#prop('DescendantBounds', 'Rect'),
  \ dotnet#prop('Camera', 'Camera'),
  \ dotnet#prop('Viewport', 'Rect'),
  \ dotnet#prop('Children', 'Visual3DCollection'),
  \ dotnet#prop('InternalVisual2DOr3DChildrenCount', 'int32'),
  \ ])

call dotnet#class('Visual3DCollection', 'Object', [ 
  \ dotnet#field('_list', 'Visual3DCollection'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#field('_version', 'int32'),
  \ dotnet#method('Visual3DCollection(', 'class Visual3DCollection list)', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Visual3D'),
  \ dotnet#method('Visual3DCollection(', 'class IVisual3DContainer owner)', 'void'),
  \ dotnet#method('Add(', 'class Visual3D value)', 'void'),
  \ dotnet#method('Insert(', 'int32 index, Visual3D value)', 'void'),
  \ dotnet#method('Remove(', 'class Visual3D value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('CopyTo(', 'class Visual3D[] array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('Contains(', 'class Visual3D value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class Visual3D value)', 'int32'),
  \ dotnet#method('GetEnumerator(', ')', 'Visual3DCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Visual3D value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('InternalGetItem(', 'int32 index)', 'Visual3D'),
  \ dotnet#method('get_InternalCount(', ')', 'int32'),
  \ dotnet#prop('Item(int32)', 'Visual3D'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('InternalCount', 'int32'),
  \ ])

call dotnet#class('GeneralTransform3DCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'GeneralTransform3D'),
  \ dotnet#field('_list', 'GeneralTransform3DCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('GeneralTransform3DCollection(', 'class GeneralTransform3DCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'GeneralTransform3D'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'GeneralTransform3DCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeneralTransform3DCollection'),
  \ dotnet#method('Add(', 'class GeneralTransform3D value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class GeneralTransform3D value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class GeneralTransform3D value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, GeneralTransform3D value)', 'void'),
  \ dotnet#method('Remove(', 'class GeneralTransform3D value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, GeneralTransform3D value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class GeneralTransform3D[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'GeneralTransform3DCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'GeneralTransform3D'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class GeneralTransform3D value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GeneralTransform3DCollection(', ')', 'void'),
  \ dotnet#method('GeneralTransform3DCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('GeneralTransform3DCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'GeneralTransform3D'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'GeneralTransform3DCollection'),
  \ ])

call dotnet#class('MaterialCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Material'),
  \ dotnet#field('_list', 'MaterialCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('MaterialCollection(', 'class MaterialCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Material'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'MaterialCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'MaterialCollection'),
  \ dotnet#method('Add(', 'class Material value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class Material value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class Material value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, Material value)', 'void'),
  \ dotnet#method('Remove(', 'class Material value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Material value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Material[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'MaterialCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'Material'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class Material value)', 'int32'),
  \ dotnet#method('add_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('remove_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('add_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('remove_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('MaterialCollection(', ')', 'void'),
  \ dotnet#method('MaterialCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('MaterialCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#event('ItemInserted', 'ItemInsertedHandler'),
  \ dotnet#event('ItemRemoved', 'ItemRemovedHandler'),
  \ dotnet#prop('Item(int32)', 'Material'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'MaterialCollection'),
  \ ])

call dotnet#class('Matrix3DConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Matrix3DConverter(', ')', 'void'),
  \ ])

call dotnet#class('Model3DCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Model3D'),
  \ dotnet#field('_list', 'Model3DCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('Model3DCollection(', 'class Model3DCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Model3D'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'Model3DCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Model3DCollection'),
  \ dotnet#method('Add(', 'class Model3D value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class Model3D value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class Model3D value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, Model3D value)', 'void'),
  \ dotnet#method('Remove(', 'class Model3D value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Model3D value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Model3D[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'Model3DCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'Model3D'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class Model3D value)', 'int32'),
  \ dotnet#method('add_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('remove_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('add_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('remove_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('Model3DCollection(', ')', 'void'),
  \ dotnet#method('Model3DCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('Model3DCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#event('ItemInserted', 'ItemInsertedHandler'),
  \ dotnet#event('ItemRemoved', 'ItemRemovedHandler'),
  \ dotnet#prop('Item(int32)', 'Model3D'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'Model3DCollection'),
  \ ])

call dotnet#class('Point3DConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Point3DConverter(', ')', 'void'),
  \ ])

call dotnet#class('Point3DCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Point3DCollectionConverter(', ')', 'void'),
  \ ])

call dotnet#class('Point4DConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Point4DConverter(', ')', 'void'),
  \ ])

call dotnet#class('QuaternionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('QuaternionConverter(', ')', 'void'),
  \ ])

call dotnet#class('Rect3DConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Rect3DConverter(', ')', 'void'),
  \ ])

call dotnet#class('Size3DConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Size3DConverter(', ')', 'void'),
  \ ])

call dotnet#class('Transform3DCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Transform3D'),
  \ dotnet#field('_list', 'Transform3DCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('Transform3DCollection(', 'class Transform3DCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Transform3D'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'Transform3DCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Transform3DCollection'),
  \ dotnet#method('Add(', 'class Transform3D value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class Transform3D value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class Transform3D value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, Transform3D value)', 'void'),
  \ dotnet#method('Remove(', 'class Transform3D value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Transform3D value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Transform3D[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'Transform3DCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'Transform3D'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class Transform3D value)', 'int32'),
  \ dotnet#method('add_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('remove_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('add_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('remove_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('Transform3DCollection(', ')', 'void'),
  \ dotnet#method('Transform3DCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('Transform3DCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#event('ItemInserted', 'ItemInsertedHandler'),
  \ dotnet#event('ItemRemoved', 'ItemRemovedHandler'),
  \ dotnet#prop('Item(int32)', 'Transform3D'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'Transform3DCollection'),
  \ ])

call dotnet#class('VVector3DConverter3DConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Vector3DConverter(', ')', 'void'),
  \ ])

call dotnet#class('VVector3DCollectionConverter3DCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Vector3DCollectionConverter(', ')', 'void'),
  \ ])

