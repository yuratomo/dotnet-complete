call dotnet#namespace('System.Security')

call dotnet#class('SecurityElement', 'Object', [ 
  \ dotnet#field('m_strTag', 'string'),
  \ dotnet#field('m_strText', 'string'),
  \ dotnet#field('m_lAttributes', 'ArrayList'),
  \ dotnet#field('m_type', 'SecurityElementType'),
  \ dotnet#method('SecurityElement(', ')', 'void'),
  \ dotnet#method('CreateSecurityElement(', ')', ''),
  \ dotnet#method('GetTag(', ')', 'string '),
  \ dotnet#method('Copy(', ')', 'object '),
  \ dotnet#method('Attribute(', 'string attributeName)', 'string '),
  \ dotnet#method('FromString(', 'string xml)', 'static SecurityElement'),
  \ dotnet#method('SecurityElement(', 'string tag)', 'void'),
  \ dotnet#method('SecurityElement(', 'string tag, string text)', 'void'),
  \ dotnet#method('get_Tag(', ')', 'string'),
  \ dotnet#method('set_Tag(', 'string value)', 'void'),
  \ dotnet#method('get_Attributes(', ')', 'Hashtable'),
  \ dotnet#method('set_Attributes(', 'class Hashtable value)', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('get_Children(', ')', 'ArrayList'),
  \ dotnet#method('set_Children(', 'class ArrayList value)', 'void'),
  \ dotnet#method('ConvertSecurityElementFSecurityElementies(', ')', 'void'),
  \ dotnet#method('get_InternalChildren(', ')', '.method'),
  \ dotnet#method('AddAttributeSafe(', 'string name, string value)', 'void'),
  \ dotnet#method('AddAttribute(', 'string name, string value)', 'void'),
  \ dotnet#method('AddChild(', 'class SecurityElement child)', 'void'),
  \ dotnet#method('AddChild(', 'class ISecurityElementFSecurityElementy child)', 'void'),
  \ dotnet#method('AddChildNoDuplicates(', 'class ISecurityElementFSecurityElementy child)', 'void'),
  \ dotnet#method('Equal(', 'class SecurityElement other)', 'bool'),
  \ dotnet#method('Copy(', ')', 'SecurityElement'),
  \ dotnet#method('IsValidTag(', 'string tag)', 'static bool'),
  \ dotnet#method('IsValidText(', 'string text)', 'static bool'),
  \ dotnet#method('IsValidAttributeName(', 'string name)', 'static bool'),
  \ dotnet#method('IsValidAttributeValue(', 'string value)', 'static bool'),
  \ dotnet#method('Escape(', 'string str)', 'static string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToWriter(', 'class StreamWriter writer)', 'void'),
  \ dotnet#method('Attribute(', 'string name)', 'string'),
  \ dotnet#method('SearchForChildByTag(', 'string tag)', 'SecurityElement'),
  \ dotnet#method('ToPermission(', 'bool ignoreTypeLoadFailures)', 'IPermission'),
  \ dotnet#method('ToSecurityObject(', ')', 'object'),
  \ dotnet#method('SearchForTextOfLocalName(', 'string strLocalName)', 'string'),
  \ dotnet#method('SearchForTextOfTag(', 'string tag)', 'string'),
  \ dotnet#method('SecurityElement(', ')', 'static void .'),
  \ dotnet#prop('Tag', 'string'),
  \ dotnet#prop('Attributes', 'Hashtable'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('Children', 'ArrayList'),
  \ dotnet#prop('InternalChildren', 'ArrayList'),
  \ ])

call dotnet#class('XmlSyntaxException', 'SystemException', [ 
  \ dotnet#method('XmlSyntaxException(', ')', 'void'),
  \ dotnet#method('XmlSyntaxException(', 'string message)', 'void'),
  \ dotnet#method('XmlSyntaxException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('XmlSyntaxException(', 'int32 lineNumber)', 'void'),
  \ dotnet#method('XmlSyntaxException(', 'int32 lineNumber, string message)', 'void'),
  \ dotnet#method('XmlSyntaxException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('CodeAccessPermission', 'Object', [ 
  \ dotnet#method('RevertAssert(', ') noinlining', 'static void'),
  \ dotnet#method('RevertDeny(', ') noinlining', 'static void'),
  \ dotnet#method('RevertPermitOnly(', ') noinlining', 'static void'),
  \ dotnet#method('RevertAll(', ') noinlining', 'static void'),
  \ dotnet#method('Assert(', ') noinlining', 'reqsecobj void'),
  \ dotnet#method('Assert(', 'bool allPossible) noinlining', 'static reqsecobj void'),
  \ dotnet#method('Deny(', ') noinlining', 'reqsecobj void'),
  \ dotnet#method('PermitOnly(', ') noinlining', 'reqsecobj void'),
  \ dotnet#method('Union(', 'class IPermission other)', ''),
  \ dotnet#method('CreatePermissionElement(', 'class IPermission perm, string permname)', 'static SecurityElement'),
  \ dotnet#method('ValidateElement(', 'class SecurityElement elem, IPermission perm)', 'static void'),
  \ dotnet#method('ToXml(', ')', 'abstract'),
  \ dotnet#method('FromXml(', 'class SecurityElement elem)', 'abstract void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('VerifyType(', 'class IPermission perm)', 'bool'),
  \ dotnet#method('Copy(', ')', 'abstract'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'abstract'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'abstract bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('CheckDemand(', 'class CodeAccessPermission grant)', 'bool'),
  \ dotnet#method('CheckPermitOnly(', 'class CodeAccessPermission permitted)', 'bool'),
  \ dotnet#method('CheckDeny(', 'class CodeAccessPermission denied)', 'bool'),
  \ dotnet#method('CheckAssert(', 'class CodeAccessPermission asserted)', 'bool'),
  \ dotnet#method('CodeAccessPermission(', ')', 'void'),
  \ ])

call dotnet#class('SuppressUnmanagedCodeSecurityAttribute', 'Attribute', [ 
  \ dotnet#method('SuppressUnmanagedCodeSecurityAttribute(', ')', 'void'),
  \ ])

call dotnet#class('UnverifiableCodeAttribute', 'Attribute', [ 
  \ dotnet#method('UnverifiableCodeAttribute(', ')', 'void'),
  \ ])

call dotnet#class('AllowPartiallyTrustedCallersAttribute', 'Attribute', [ 
  \ dotnet#method('AllowPartiallyTrustedCallersAttribute(', ')', 'void'),
  \ dotnet#method('get_PartialTrustVisibilityLevel(', ')', 'PartialTrustVisibilityLevel'),
  \ dotnet#method('set_PartialTrustVisibilityLevel(', 'PartialTrustVisibilityLevel value)', 'void'),
  \ dotnet#prop('PartialTrustVisibilityLevel', 'PartialTrustVisibilityLevel'),
  \ ])

call dotnet#class('SecurityCriticalAttribute', 'Attribute', [ 
  \ dotnet#method('SecurityCriticalAttribute(', ')', 'void'),
  \ dotnet#method('SecurityCriticalAttribute(', 'SecurityCriticalScope scope)', 'void'),
  \ dotnet#method('get_Scope(', ')', 'SecurityCriticalScope'),
  \ dotnet#prop('Scope', 'SecurityCriticalScope'),
  \ ])

call dotnet#class('SecurityTreatAsSafeAttribute', 'Attribute', [ 
  \ dotnet#method('SecurityTreatAsSafeAttribute(', ')', 'void'),
  \ ])

call dotnet#class('SecuritySafeCriticalAttribute', 'Attribute', [ 
  \ dotnet#method('SecuritySafeCriticalAttribute(', ')', 'void'),
  \ ])

call dotnet#class('SecurityTransparentAttribute', 'Attribute', [ 
  \ dotnet#method('SecurityTransparentAttribute(', ')', 'void'),
  \ ])

call dotnet#class('SecurityRulesAttribute', 'Attribute', [ 
  \ dotnet#method('SecurityRulesAttribute(', 'SecurityRuleSet ruleSet)', 'void'),
  \ dotnet#method('get_SkipVerificationInFullTrust(', ')', 'bool'),
  \ dotnet#method('set_SkipVerificationInFullTrust(', 'bool value)', 'void'),
  \ dotnet#method('get_RuleSet(', ')', 'SecurityRuleSet'),
  \ dotnet#prop('SkipVerificationInFullTrust', 'bool'),
  \ dotnet#prop('RuleSet', 'SecurityRuleSet'),
  \ ])

call dotnet#class('HostSecurityManager', 'Object', [ 
  \ dotnet#method('HostSecurityManager(', ')', 'void'),
  \ dotnet#method('get_Flags(', ')', ''),
  \ dotnet#method('get_DomainPolicy(', ')', ''),
  \ dotnet#method('ProvideAppDomainEvidence(', 'class Evidence inputEvidence)', ''),
  \ dotnet#method('ProvideAssemblyEvidence(', 'class Assembly loadedAssembly, Evidence inputEvidence)', ''),
  \ dotnet#method('DetermineApplicationTrust(', 'class Evidence applicationEvidence, Evidence activatorEvidence, TrustManagerContext context)', ''),
  \ dotnet#method('ResolvePolicy(', 'class Evidence evidence)', ''),
  \ dotnet#method('GetHostSuppliedAppDomainEvidenceTypes(', ')', 'Type[]'),
  \ dotnet#method('GetHostSuppliedAssemblyEvidenceTypes(', 'class Assembly assembly)', 'Type[]'),
  \ dotnet#method('GenerateAppDomainEvidence(', 'class Type evidenceType)', ''),
  \ dotnet#method('GenerateAssemblyEvidence(', 'class Type evidenceType, Assembly assembly)', ''),
  \ dotnet#prop('Flags', 'HostSecurityManagerOptions'),
  \ dotnet#prop('DomainPolicy', 'PolicyLevel'),
  \ ])

call dotnet#class('PermissionSet', 'Object', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#field('m_permSet', 'TokenBasedSet'),
  \ dotnet#method('void(', ')', '.method'),
  \ dotnet#method('void(', 'bool fUnrestricted)', '.method'),
  \ dotnet#method('void(', 'PermissionState state)', ''),
  \ dotnet#method('void(', 'class PermissionSet permSet)', ''),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('CheckSet(', ')', 'void'),
  \ dotnet#method('IsEmpty(', ')', 'bool'),
  \ dotnet#method('FastIsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('GetPermission(', 'int32 index)', 'IPermission'),
  \ dotnet#method('GetPermission(', 'class PermissionToken permToken)', 'IPermission'),
  \ dotnet#method('GetPermission(', 'class IPermission perm)', 'IPermission'),
  \ dotnet#method('GetPermission(', 'class Type permClass)', 'IPermission'),
  \ dotnet#method('GetPermissionImpl(', 'class Type permClass)', 'family'),
  \ dotnet#method('SetPermission(', 'class IPermission perm)', 'IPermission'),
  \ dotnet#method('SetPermissionImpl(', 'class IPermission perm)', 'family'),
  \ dotnet#method('AddPermission(', 'class IPermission perm)', 'IPermission'),
  \ dotnet#method('AddPermissionImpl(', 'class IPermission perm)', 'family'),
  \ dotnet#method('RemovePermission(', 'class Type permClass)', 'IPermission'),
  \ dotnet#method('RemovePermissionImpl(', 'class Type permClass)', 'family'),
  \ dotnet#method('SetUnrestricted(', 'bool unrestricted)', 'void'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('IsSubsetOfHelper(', 'class PermissionSet target, PermissionSet/IsSubsetOfType type, [out] IPermission& firstPermThatFailed, bool ignoreNonCas)', 'bool'),
  \ dotnet#method('IsSubsetOf(', 'class PermissionSet target)', 'bool'),
  \ dotnet#method('CheckDemand(', 'class PermissionSet target, [out] IPermission& firstPermThatFailed)', 'bool'),
  \ dotnet#method('CheckPermitOnly(', 'class PermissionSet target, [out] IPermission& firstPermThatFailed)', 'bool'),
  \ dotnet#method('CheckAssertion(', 'class PermissionSet target)', 'bool'),
  \ dotnet#method('CheckDeny(', 'class PermissionSet deniedSet, [out] IPermission& firstPermThatFailed)', 'bool'),
  \ dotnet#method('CheckDecoded(', 'class CodeAccessPermission demandedPerm, PermissionToken tokenDemandedPerm)', 'void'),
  \ dotnet#method('CheckDecoded(', 'int32 index)', 'void'),
  \ dotnet#method('CheckDecoded(', 'class PermissionSet demandedSet)', 'void'),
  \ dotnet#method('SafeChildAdd(', 'class SecurityElement parent, ISecurityElementFPermissionSety child, bool copy)', 'static void'),
  \ dotnet#method('InplaceIntersect(', 'class PermissionSet other)', 'void'),
  \ dotnet#method('Intersect(', 'class PermissionSet other)', 'PermissionSet'),
  \ dotnet#method('InplaceUnion(', 'class PermissionSet other)', 'void'),
  \ dotnet#method('Union(', 'class PermissionSet other)', 'PermissionSet'),
  \ dotnet#method('MergeDeniedSet(', 'class PermissionSet denied)', 'void'),
  \ dotnet#method('Contains(', 'class IPermission perm)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('DemandNonCAS(', ')', 'void'),
  \ dotnet#method('Assert(', ') noinlining', 'reqsecobj void'),
  \ dotnet#method('Deny(', ') noinlining', 'reqsecobj void'),
  \ dotnet#method('PermitOnly(', ') noinlining', 'reqsecobj void'),
  \ dotnet#method('GetFirstPerm(', ')', 'IPermission'),
  \ dotnet#method('Copy(', ')', ''),
  \ dotnet#method('CopyWithNoIdentityPermissions(', ')', 'PermissionSet'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumeratorImpl(', ')', 'family'),
  \ dotnet#method('GetEnumeratorInternal(', ')', 'PermissionSetEnumeratorInternal'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('FilterHostProtectionPermissions(', 'HostProtectionResource fullTrustOnly, HostProtectionResource inaccessible)', 'void'),
  \ dotnet#method('FromXml(', 'class SecurityElement et)', 'void'),
  \ dotnet#method('IsPermissionTag(', 'string tag, bool allowInternalOnly)', 'static bool'),
  \ dotnet#method('FromXml(', 'class SecurityElement et, bool allowInternalOnly, bool ignoreTypeLoadFailures)', 'strict void'),
  \ dotnet#method('FromXml(', 'class SecurityDocument doc, int32 position, bool allowInternalOnly)', 'strict void'),
  \ dotnet#method('CreatePerm(', 'object obj, bool ignoreTypeLoadFailures)', 'static IPermission'),
  \ dotnet#method('CreatePermission(', 'object obj, int32 index)', 'IPermission'),
  \ dotnet#method('CreateEmptyPermissionSetXml(', ')', 'static SecurityElement'),
  \ dotnet#method('ToXml(', 'string permName)', 'SecurityElement'),
  \ dotnet#method('InternalToXml(', ')', 'SecurityElement'),
  \ dotnet#method('ToXml(', ')', ''),
  \ dotnet#method('EncodeXml(', ')', 'uint8[]'),
  \ dotnet#method('ConvertPermissionSet(', 'string inFormat, uint8[] inData, string outFormat)', 'static uint8[]'),
  \ dotnet#method('ContainsNonCodeAccessPermissions(', ')', 'bool'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('RevertAssert(', ') noinlining', 'static void'),
  \ dotnet#method('RemoveRefusedPermissionSet(', 'class PermissionSet assertSet, PermissionSet refusedSet, [out] bool& bFailedToCompress)', 'static PermissionSet'),
  \ dotnet#method('RemoveAssertedPermissionSet(', 'class PermissionSet demandSet, PermissionSet assertSet, [out] PermissionSet& alteredDemandSet)', 'static void'),
  \ dotnet#method('IsIntersectingAssertedPermissions(', 'class PermissionSet assertSet1, PermissionSet assertSet2)', 'static bool'),
  \ dotnet#method('set_IgnoreTypeLoadFailures(', 'bool value)', 'void'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IgnoreTypeLoadFailures', 'bool'),
  \ ])

call dotnet#class('NamedPermissionSet', 'PermissionSet', [ 
  \ dotnet#field('m_descrResource', 'string'),
  \ dotnet#method('NamedPermissionSet(', ')', 'void'),
  \ dotnet#method('NamedPermissionSet(', 'string name)', 'void'),
  \ dotnet#method('NamedPermissionSet(', 'string name, PermissionState state)', 'void'),
  \ dotnet#method('NamedPermissionSet(', 'string name, PermissionSet permSet)', 'void'),
  \ dotnet#method('NamedPermissionSet(', 'class NamedPermissionSet permSet)', 'void'),
  \ dotnet#method('NamedPermissionSet(', 'class SecurityElement permissionSetXml)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#method('set_Description(', 'string value)', 'void'),
  \ dotnet#method('Copy(', ')', 'PermissionSet'),
  \ dotnet#method('Copy(', 'string name)', 'NamedPermissionSet'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('FromXml(', 'class SecurityElement et)', 'void'),
  \ dotnet#method('FromXml(', 'class SecurityElement et, bool allowInternalOnly, bool ignoreTypeLoadFailures)', 'strict void'),
  \ dotnet#method('FromXmlNameOnly(', 'class SecurityElement et)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ ])

call dotnet#class('ReadOnlyPermissionSet', 'PermissionSet', [ 
  \ dotnet#method('ReadOnlyPermissionSet(', 'class SecurityElement permissionSetXml)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Copy(', ')', 'PermissionSet'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#method('GetEnumeratorImpl(', ')', 'IEnumerator'),
  \ dotnet#method('GetPermissionImpl(', 'class Type permClass)', 'IPermission'),
  \ dotnet#method('AddPermissionImpl(', 'class IPermission perm)', 'IPermission'),
  \ dotnet#method('FromXml(', 'class SecurityElement et)', 'void'),
  \ dotnet#method('RemovePermissionImpl(', 'class Type permClass)', 'IPermission'),
  \ dotnet#method('SetPermissionImpl(', 'class IPermission perm)', 'IPermission'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ ])

call dotnet#class('SecureString', 'Object', [ 
  \ dotnet#method('SecureString(', ')', 'static void .'),
  \ dotnet#method('SecureString(', 'class SecureString str)', 'void'),
  \ dotnet#method('SecureString(', ')', 'void'),
  \ dotnet#method('SecureString(', 'char* value, int32 length)', 'void'),
  \ dotnet#method('get_Length(', ') synchronized', 'int32'),
  \ dotnet#method('AppendChar(', 'char c) synchronized', 'void'),
  \ dotnet#method('Clear(', ') synchronized', 'void'),
  \ dotnet#method('Copy(', ') synchronized', 'SecureString'),
  \ dotnet#method('Dispose(', ') synchronized', 'void'),
  \ dotnet#method('InsertAt(', 'int32 index, char c) synchronized', 'void'),
  \ dotnet#method('IsReadOnly(', ') synchronized', 'bool'),
  \ dotnet#method('MakeReadOnly(', ') synchronized', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index) synchronized', 'void'),
  \ dotnet#method('SetAt(', 'int32 index, char c) synchronized', 'void'),
  \ dotnet#method('ToBSTR(', ') synchronized', 'int'),
  \ dotnet#method('ToUniStr(', 'bool allocateFromHeap) synchronized', 'int'),
  \ dotnet#method('ToAnsiStr(', 'bool allocateFromHeap) synchronized', 'int'),
  \ dotnet#prop('Length', 'int32'),
  \ ])

call dotnet#class('SecurityContext', 'Object', [ 
  \ dotnet#field('sc', 'SecurityContext'),
  \ dotnet#field('callBack', 'ContextCallback'),
  \ dotnet#field('state', 'object'),
  \ dotnet#field('scsw', 'SecurityContextSwitcher'),
  \ dotnet#method('SecurityContext(', 'class SecurityContext securityContext, ContextCallback cb, object state)', 'void'),
  \ dotnet#field('isNewCapture', 'bool'),
  \ dotnet#field('_disableFlow', 'SecurityContextDisableFlow'),
  \ dotnet#method('SecurityContext(', ')', 'static void .'),
  \ dotnet#method('SecurityContext(', ')', 'void'),
  \ dotnet#method('get_FullTrustSecurityContext(', ')', 'static'),
  \ dotnet#method('set_ExecutionContext(', 'class ExecutionContext value)', 'void'),
  \ dotnet#method('get_WindowsIdentity(', ')', '.method'),
  \ dotnet#method('set_WindowsIdentity(', 'class WindowsIdentity value)', 'void'),
  \ dotnet#method('get_CompressedStack(', ')', '.method'),
  \ dotnet#method('set_CompressedStack(', 'class CompressedStack value)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('SuppressFlow(', ')', 'static AsyncFlowControl'),
  \ dotnet#method('SuppressFlowWindowsIdentity(', ')', 'static AsyncFlowControl'),
  \ dotnet#method('SuppressFlow(', 'SecurityContextDisableFlow flags)', 'static AsyncFlowControl'),
  \ dotnet#method('RestoreFlow(', ')', 'static void'),
  \ dotnet#method('IsFlowSuppressed(', ')', 'static bool'),
  \ dotnet#method('IsWindowsIdentityFlowSuppressed(', ')', 'static bool'),
  \ dotnet#method('IsFlowSuppressed(', 'SecurityContextDisableFlow flags)', 'static bool'),
  \ dotnet#method('Run(', 'class SecurityContext securityContext, ContextCallback callback, object state) noinlining', 'static reqsecobj void'),
  \ dotnet#method('RunInternal(', 'class SecurityContext securityContext, ContextCallback callBack, object state)', 'static void'),
  \ dotnet#method('runTryCode(', 'object userData)', 'static void'),
  \ dotnet#method('runFinallyCode(', 'object userData, bool exceptionThrown)', 'static void'),
  \ dotnet#method('SetSecurityContext(', 'class SecurityContext sc, SecurityContext prevSecurityContext) noinlining', 'static reqsecobj'),
  \ dotnet#method('SetSecurityContext(', 'class SecurityContext sc, SecurityContext prevSecurityContext, StackCrawlMark& stackMark)', 'static SecurityContextSwitcher'),
  \ dotnet#method('CreateCopy(', ')', 'SecurityContext'),
  \ dotnet#method('Capture(', ') noinlining', 'static SecurityContext'),
  \ dotnet#method('Capture(', 'class ExecutionContext currThreadEC, StackCrawlMark& stackMark)', 'static SecurityContext'),
  \ dotnet#method('CreateFullTrustSecurityContext(', ')', 'static SecurityContext'),
  \ dotnet#method('GetCurrentSecurityContextNoCreate(', ')', 'static SecurityContext'),
  \ dotnet#method('GetCurrentWI(', 'class ExecutionContext threadEC)', 'static WindowsIdentity'),
  \ dotnet#method('IsDefaultFTSecurityContext(', ')', 'bool'),
  \ dotnet#method('CurrentlyInDefaultFTSecurityContext(', 'class ExecutionContext threadEC)', 'static bool'),
  \ dotnet#method('GetImpersonationFlowMode(', ') internalcall', 'static WindowsImpersonationFlowMode'),
  \ dotnet#method('IsDefaultThreadSecurityInfo(', ') internalcall', 'static bool'),
  \ dotnet#prop('FullTrustSecurityContext', 'SecurityContext'),
  \ dotnet#prop('ExecutionContext', 'ExecutionContext'),
  \ dotnet#prop('WindowsIdentity', 'WindowsIdentity'),
  \ dotnet#prop('CompressedStack', 'CompressedStack'),
  \ ])

call dotnet#class('SecurityException', 'SystemException', [ 
  \ dotnet#method('GetResString(', 'string sResourceName)', 'static string'),
  \ dotnet#method('MakeSecurityException(', 'class AssemblyName asmName, Evidence asmEvidence, PermissionSet granted, PermissionSet refused, RuntimeMethodHandleInternal rmh, SecurityAction action, object demand, IPermission permThatFailed)', 'static Exception'),
  \ dotnet#method('SecurityException(', ')', 'void'),
  \ dotnet#method('SecurityException(', 'string message)', 'void'),
  \ dotnet#method('SecurityException(', 'string message, Type type)', 'void'),
  \ dotnet#method('SecurityException(', 'string message, Type type, string state)', 'void'),
  \ dotnet#method('SecurityException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('SecurityException(', 'class PermissionSet grantedSetObj, PermissionSet refusedSetObj)', 'void'),
  \ dotnet#method('SecurityException(', 'string message, PermissionSet grantedSetObj, PermissionSet refusedSetObj)', 'void'),
  \ dotnet#method('SecurityException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('SecurityException(', 'string message, AssemblyName assemblyName, PermissionSet grant, PermissionSet refused, MethodInfo method, SecurityAction action, object demanded, IPermission permThatFailed, Evidence evidence)', 'void'),
  \ dotnet#method('SecurityException(', 'string message, object deny, object permitOnly, MethodInfo method, object demanded, IPermission permThatFailed)', 'void'),
  \ dotnet#method('get_Action(', ')', 'SecurityAction'),
  \ dotnet#method('set_Action(', 'SecurityAction value)', 'void'),
  \ dotnet#method('get_PermissionType(', ')', 'Type'),
  \ dotnet#method('set_PermissionType(', 'class Type value)', 'void'),
  \ dotnet#method('get_FirstPermissionThatFailed(', ')', 'IPermission'),
  \ dotnet#method('set_FirstPermissionThatFailed(', 'class IPermission value)', 'void'),
  \ dotnet#method('get_PermissionState(', ')', 'string'),
  \ dotnet#method('set_PermissionState(', 'string value)', 'void'),
  \ dotnet#method('get_Demanded(', ')', 'object'),
  \ dotnet#method('set_Demanded(', 'object value)', 'void'),
  \ dotnet#method('get_GrantedSet(', ')', 'string'),
  \ dotnet#method('set_GrantedSet(', 'string value)', 'void'),
  \ dotnet#method('get_RefusedSet(', ')', 'string'),
  \ dotnet#method('set_RefusedSet(', 'string value)', 'void'),
  \ dotnet#method('get_DenySetInstance(', ')', 'object'),
  \ dotnet#method('set_DenySetInstance(', 'object value)', 'void'),
  \ dotnet#method('get_PermitOnlySetInstance(', ')', 'object'),
  \ dotnet#method('set_PermitOnlySetInstance(', 'object value)', 'void'),
  \ dotnet#method('get_FailedAssemblyInfo(', ')', 'AssemblyName'),
  \ dotnet#method('set_FailedAssemblyInfo(', 'class AssemblyName value)', 'void'),
  \ dotnet#method('get_Method(', ')', 'MethodInfo'),
  \ dotnet#method('set_Method(', 'class MethodInfo value)', 'void'),
  \ dotnet#method('get_Zone(', ')', 'SecurityZone'),
  \ dotnet#method('set_Zone(', 'SecurityZone value)', 'void'),
  \ dotnet#method('get_Url(', ')', 'string'),
  \ dotnet#method('set_Url(', 'string value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Action', 'SecurityAction'),
  \ dotnet#prop('PermissionType', 'Type'),
  \ dotnet#prop('FirstPermissionThatFailed', 'IPermission'),
  \ dotnet#prop('PermissionState', 'string'),
  \ dotnet#prop('Demanded', 'object'),
  \ dotnet#prop('GrantedSet', 'string'),
  \ dotnet#prop('RefusedSet', 'string'),
  \ dotnet#prop('DenySetInstance', 'object'),
  \ dotnet#prop('PermitOnlySetInstance', 'object'),
  \ dotnet#prop('FailedAssemblyInfo', 'AssemblyName'),
  \ dotnet#prop('Method', 'MethodInfo'),
  \ dotnet#prop('Zone', 'SecurityZone'),
  \ dotnet#prop('Url', 'string'),
  \ ])

call dotnet#class('SecurityState', 'Object', [ 
  \ dotnet#method('SecurityState(', ')', 'void'),
  \ dotnet#method('IsStateAvailable(', ')', 'bool'),
  \ dotnet#method('EnsureState(', ')', 'abstract void'),
  \ ])

call dotnet#class('HostProtectionException', 'SystemException', [ 
  \ dotnet#method('HostProtectionException(', ')', 'void'),
  \ dotnet#method('HostProtectionException(', 'string message)', 'void'),
  \ dotnet#method('HostProtectionException(', 'string message, Exception e)', 'void'),
  \ dotnet#method('HostProtectionException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('HostProtectionException(', 'string message, HostProtectionResource protectedResources, HostProtectionResource demandedResources)', 'void'),
  \ dotnet#method('get_ProtectedResources(', ')', 'HostProtectionResource'),
  \ dotnet#method('get_DemandedResources(', ')', 'HostProtectionResource'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('ProtectedResources', 'HostProtectionResource'),
  \ dotnet#prop('DemandedResources', 'HostProtectionResource'),
  \ ])

call dotnet#class('SecurityManager', 'Object', [ 
  \ dotnet#method('get_PolicyManager(', ')', 'static'),
  \ dotnet#method('IsGranted(', 'class IPermission perm) noinlining', 'static bool'),
  \ dotnet#method('GetStandardSandbox(', 'class Evidence evidence)', 'static PermissionSet'),
  \ dotnet#method('GetZoneAndOrigin(', '[out] ArrayList& zone, [out] ArrayList& origin) noinlining', 'static void'),
  \ dotnet#method('LoadPolicyLevelFromFile(', 'string path, PolicyLevelType type)', 'static PolicyLevel'),
  \ dotnet#method('LoadPolicyLevelFromString(', 'string str, PolicyLevelType type)', 'static PolicyLevel'),
  \ dotnet#method('SavePolicyLevel(', 'class PolicyLevel level)', 'static void'),
  \ dotnet#method('ResolvePolicy(', 'class Evidence evidence, PermissionSet reqdPset, PermissionSet optPset, PermissionSet denyPset, [out] PermissionSet& denied)', 'static PermissionSet'),
  \ dotnet#method('ResolvePolicy(', 'class Evidence evidence)', 'static PermissionSet'),
  \ dotnet#method('ResolvePolicy(', 'class Evidence[] evidences)', 'static PermissionSet'),
  \ dotnet#method('CurrentThreadRequiresSecurityContextCapture(', ')', 'static bool'),
  \ dotnet#method('ResolveSystemPolicy(', 'class Evidence evidence)', 'static PermissionSet'),
  \ dotnet#method('ResolvePolicyGroups(', 'class Evidence evidence)', 'static IEnumerator'),
  \ dotnet#method('PolicyHierarchy(', ')', 'static IEnumerator'),
  \ dotnet#method('SavePolicy(', ')', 'static void'),
  \ dotnet#method('get_CheckExecutionRights(', ')', 'static bool'),
  \ dotnet#method('set_CheckExecutionRights(', 'bool value)', 'static void'),
  \ dotnet#method('get_SecurityEnabled(', ')', 'static bool'),
  \ dotnet#method('set_SecurityEnabled(', 'bool value)', 'static void'),
  \ dotnet#method('GetSpecialFlags(', 'class PermissionSet grantSet, PermissionSet deniedSet)', 'static int32'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) bool IsSameType(string strLeft, string strRight) preservesig', 'static'),
  \ dotnet#method('_SetThreadSecurity(', 'bool bThreadSecurity) internalcall', 'static bool'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void GetGrantedPermissions(ObjectHandleOnStack retGranted, ObjectHandleOnStack retDenied, StackCrawlMarkHandle stackMark) preservesig', 'static'),
  \ dotnet#method('SecurityManager(', ')', 'static void .'),
  \ dotnet#prop('PolicyManager', 'PolicyManager'),
  \ dotnet#prop('CheckExecutionRights', 'bool'),
  \ dotnet#prop('SecurityEnabled', 'bool'),
  \ ])

call dotnet#class('VerificationException', 'SystemException', [ 
  \ dotnet#method('VerificationException(', ')', 'void'),
  \ dotnet#method('VerificationException(', 'string message)', 'void'),
  \ dotnet#method('VerificationException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('VerificationException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

