
call dotnet#class('Calendar', 'Object', [ 
  \ dotnet#field('m_currentEraValue', 'int32'),
  \ dotnet#field('twoDigitYearMax', 'int32'),
  \ dotnet#method('Calendar(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('get_BaseCalendarID(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('ReadOnly(', ''),
  \ dotnet#method('VerifyWritable(', ''),
  \ dotnet#method('SetReadOnlyState(', ''),
  \ dotnet#method('get_CurrentEraValue(', ''),
  \ dotnet#method('CheckAddResult(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('GetHour(', ''),
  \ dotnet#method('GetMilliseconds(', ''),
  \ dotnet#method('GetMinute(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetSecond(', ''),
  \ dotnet#method('GetFirstDayWeekOfYear(', ''),
  \ dotnet#method('GetWeekOfYearFullDays(', ''),
  \ dotnet#method('GetWeekOfYear(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('TryToDateTime(', ''),
  \ dotnet#method('IsValidYear(', ''),
  \ dotnet#method('IsValidMonth(', ''),
  \ dotnet#method('IsValidDay(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#method('TimeToTicks(', ''),
  \ dotnet#method('GetSystemTwoDigitYearSetting(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('CurrentEraValue', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('CharUnicodeInfo', 'Object', [ 
  \ dotnet#field('TableName', 'char'),
  \ dotnet#field('version', 'uint16'),
  \ dotnet#field('OffsetToCategoriesIndex', 'uint32'),
  \ dotnet#field('OffsetToCategoriesValue', 'uint32'),
  \ dotnet#field('OffsetToNumbericIndex', 'uint32'),
  \ dotnet#field('OffsetToDigitValue', 'uint32'),
  \ dotnet#field('OffsetToNumbericValue', 'uint32'),
  \ dotnet#field('decimalDigit', 'int8'),
  \ dotnet#field('digit', 'int8'),
  \ dotnet#method('CharUnicodeInfo(', ''),
  \ dotnet#method('InternalConvertToUtf32(', ''),
  \ dotnet#method('IsWhiteSpace(', ''),
  \ dotnet#method('InternalGetNumericValue(', ''),
  \ dotnet#method('InternalGetDigitValues(', ''),
  \ dotnet#method('InternalGetDecimalDigitValue(', ''),
  \ dotnet#method('InternalGetDigitValue(', ''),
  \ dotnet#method('GetNumericValue(', ''),
  \ dotnet#method('GetDecimalDigitValue(', ''),
  \ dotnet#method('GetDigitValue(', ''),
  \ dotnet#method('GetUnicodeCategory(', ''),
  \ dotnet#method('InternalGetUnicodeCategory(', ''),
  \ dotnet#method('InternalGetCategoryValue(', ''),
  \ dotnet#method('GetBidiCategory(', ''),
  \ dotnet#method('IsCombiningCategory(', ''),
  \ ])

call dotnet#class('CompareInfo', 'Object', [ 
  \ dotnet#method('CompareInfo(', ''),
  \ dotnet#method('GetCompareInfo(', ''),
  \ dotnet#method('IsSortable(', ''),
  \ dotnet#method('OnDeserialization(', ''),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('GetNativeCompareFlags(', ''),
  \ dotnet#method('Compare(', ''),
  \ dotnet#method('IsPrefix(', ''),
  \ dotnet#method('IsSuffix(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('LastIndexOf(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('GetHashCodeOfString(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('get_LCID(', ''),
  \ dotnet#method('InternalInitSortHandle(', ''),
  \ dotnet#method('get_IsLegacy20SortingBehaviorRequested(', ''),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('LCID', 'int32'),
  \ dotnet#prop('IsLegacy20SortingBehaviorRequested', 'bool'),
  \ ])

call dotnet#class('CultureInfo', 'Object', [ 
  \ dotnet#field('m_isReadOnly', 'bool'),
  \ dotnet#field('compareInfo', 'CompareInfo'),
  \ dotnet#field('textInfo', 'TextInfo'),
  \ dotnet#field('regionInfo', 'RegionInfo'),
  \ dotnet#field('numInfo', 'NumberFormatInfo'),
  \ dotnet#field('dateTimeInfo', 'DateTimeFormatInfo'),
  \ dotnet#field('calendar', 'Calendar'),
  \ dotnet#field('m_dataItem', 'int32'),
  \ dotnet#field('cultureID', 'int32'),
  \ dotnet#field('m_cultureData', 'CultureData'),
  \ dotnet#field('m_isInherited', 'bool'),
  \ dotnet#field('m_name', 'string'),
  \ dotnet#method('CultureInfo(', ''),
  \ dotnet#method('CheckDomainSafetyObject(', ''),
  \ dotnet#method('get_IsSafeCrossDomain(', ''),
  \ dotnet#method('get_CreatedDomainID(', ''),
  \ dotnet#method('CanSendCrossDomain(', ''),
  \ dotnet#method('StartCrossDomainTracking(', ''),
  \ dotnet#method('CreateSpecificCulture(', ''),
  \ dotnet#method('VerifyCultureName(', ''),
  \ dotnet#method('get_LCID(', ''),
  \ dotnet#method('get_KeyboardLayoutId(', ''),
  \ dotnet#method('GetCultures(', ''),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('get_SortName(', ''),
  \ dotnet#method('get_IetfLanguageTag(', ''),
  \ dotnet#method('get_DisplayName(', ''),
  \ dotnet#method('get_NativeName(', ''),
  \ dotnet#method('get_EnglishName(', ''),
  \ dotnet#method('get_TwoLetterISOLanguageName(', ''),
  \ dotnet#method('get_ThreeLetterISOLanguageName(', ''),
  \ dotnet#method('get_ThreeLetterWindowsLanguageName(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('GetFormat(', ''),
  \ dotnet#method('get_IsNeutralCulture(', ''),
  \ dotnet#method('get_CultureTypes(', ''),
  \ dotnet#method('set_NumberFormat(', ''),
  \ dotnet#method('set_DateTimeFormat(', ''),
  \ dotnet#method('ClearCachedData(', ''),
  \ dotnet#method('GetCalendarInstance(', ''),
  \ dotnet#method('GetCalendarInstanceRare(', ''),
  \ dotnet#method('get_UseUserOverride(', ''),
  \ dotnet#method('GetConsoleFallbackUICulture(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('ReadOnly(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_HasInvariantCultureName(', ''),
  \ dotnet#method('GetCultureInfoHelper(', ''),
  \ dotnet#method('GetCultureInfo(', ''),
  \ dotnet#method('GetCultureInfoByIetfLanguageTag(', ''),
  \ dotnet#method('get_IsTaiwanSku(', ''),
  \ dotnet#method('nativeGetLocaleInfoEx(', ''),
  \ dotnet#method('nativeGetLocaleInfoExInt(', ''),
  \ dotnet#method('nativeSetThreadLocale(', ''),
  \ dotnet#prop('IsSafeCrossDomain', 'bool'),
  \ dotnet#prop('CreatedDomainID', 'int32'),
  \ dotnet#prop('CurrentCulture', 'CultureInfo'),
  \ dotnet#prop('UserDefaultCulture', 'CultureInfo'),
  \ dotnet#prop('UserDefaultUICulture', 'CultureInfo'),
  \ dotnet#prop('CurrentUICulture', 'CultureInfo'),
  \ dotnet#prop('InstalledUICulture', 'CultureInfo'),
  \ dotnet#prop('InvariantCulture', 'CultureInfo'),
  \ dotnet#prop('Parent', 'CultureInfo'),
  \ dotnet#prop('LCID', 'int32'),
  \ dotnet#prop('KeyboardLayoutId', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('SortName', 'string'),
  \ dotnet#prop('IetfLanguageTag', 'string'),
  \ dotnet#prop('DisplayName', 'string'),
  \ dotnet#prop('NativeName', 'string'),
  \ dotnet#prop('EnglishName', 'string'),
  \ dotnet#prop('TwoLetterISOLanguageName', 'string'),
  \ dotnet#prop('ThreeLetterISOLanguageName', 'string'),
  \ dotnet#prop('ThreeLetterWindowsLanguageName', 'string'),
  \ dotnet#prop('CompareInfo', 'CompareInfo'),
  \ dotnet#prop('TextInfo', 'TextInfo'),
  \ dotnet#prop('IsNeutralCulture', 'bool'),
  \ dotnet#prop('CultureTypes', 'CultureTypes'),
  \ dotnet#prop('NumberFormat', 'NumberFormatInfo'),
  \ dotnet#prop('DateTimeFormat', 'DateTimeFormatInfo'),
  \ dotnet#prop('Calendar', 'Calendar'),
  \ dotnet#prop('OptionalCalendars', 'Calendar[]'),
  \ dotnet#prop('UseUserOverride', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('HasInvariantCultureName', 'bool'),
  \ dotnet#prop('IsTaiwanSku', 'bool'),
  \ ])

call dotnet#class('CultureNotFoundException', 'ArgumentException', [ 
  \ dotnet#method('CultureNotFoundException(', ''),
  \ dotnet#method('GetObjectData(', ''),
  \ dotnet#method('get_InvalidCultureName(', ''),
  \ dotnet#method('get_Message(', ''),
  \ dotnet#prop('InvalidCultureId', 'Nullable'),
  \ dotnet#prop('InvalidCultureName', 'string'),
  \ dotnet#prop('Message', 'string'),
  \ ])

call dotnet#class('DateTimeFormatInfo', 'Object', [ 
  \ dotnet#field('m_name', 'string'),
  \ dotnet#field('amDesignator', 'string'),
  \ dotnet#field('pmDesignator', 'string'),
  \ dotnet#field('dateSeparator', 'string'),
  \ dotnet#field('generalShortTimePattern', 'string'),
  \ dotnet#field('generalLongTimePattern', 'string'),
  \ dotnet#field('timeSeparator', 'string'),
  \ dotnet#field('monthDayPattern', 'string'),
  \ dotnet#field('dateTimeOffsetPattern', 'string'),
  \ dotnet#field('calendar', 'Calendar'),
  \ dotnet#field('firstDayOfWeek', 'int32'),
  \ dotnet#field('calendarWeekRule', 'int32'),
  \ dotnet#field('fullDateTimePattern', 'string'),
  \ dotnet#field('abbreviatedDayNames', 'string[]'),
  \ dotnet#field('m_superShortDayNames', 'string[]'),
  \ dotnet#field('dayNames', 'string[]'),
  \ dotnet#field('abbreviatedMonthNames', 'string[]'),
  \ dotnet#field('monthNames', 'string[]'),
  \ dotnet#field('genitiveMonthNames', 'string[]'),
  \ dotnet#field('m_genitiveAbbreviatedMonthNames', 'string[]'),
  \ dotnet#field('leapYearMonthNames', 'string[]'),
  \ dotnet#field('longDatePattern', 'string'),
  \ dotnet#field('shortDatePattern', 'string'),
  \ dotnet#field('yearMonthPattern', 'string'),
  \ dotnet#field('longTimePattern', 'string'),
  \ dotnet#field('shortTimePattern', 'string'),
  \ dotnet#field('allShortDatePatterns', 'string[]'),
  \ dotnet#field('allLongDatePatterns', 'string[]'),
  \ dotnet#field('allShortTimePatterns', 'string[]'),
  \ dotnet#field('allLongTimePatterns', 'string[]'),
  \ dotnet#field('m_eraNames', 'string[]'),
  \ dotnet#field('m_abbrevEraNames', 'string[]'),
  \ dotnet#field('m_abbrevEnglishEraNames', 'string[]'),
  \ dotnet#field('optionalCalendars', 'int32[]'),
  \ dotnet#field('m_isReadOnly', 'bool'),
  \ dotnet#field('formatFlags', 'DateTimeFormatFlags'),
  \ dotnet#field('m_isDefaultCalendar', 'bool'),
  \ dotnet#field('m_dateWords', 'string[]'),
  \ dotnet#method('DateTimeFormatInfo(', ''),
  \ dotnet#method('GetInstance(', ''),
  \ dotnet#method('GetFormat(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('get_AMDesignator(', ''),
  \ dotnet#method('set_AMDesignator(', ''),
  \ dotnet#method('get_Calendar(', ''),
  \ dotnet#method('set_Calendar(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_EraNames(', ''),
  \ dotnet#method('GetEraName(', ''),
  \ dotnet#method('get_AbbreviatedEraNames(', ''),
  \ dotnet#method('GetAbbreviatedEraName(', ''),
  \ dotnet#method('get_AbbreviatedEnglishEraNames(', ''),
  \ dotnet#method('get_DateSeparator(', ''),
  \ dotnet#method('set_DateSeparator(', ''),
  \ dotnet#method('get_FirstDayOfWeek(', ''),
  \ dotnet#method('set_FirstDayOfWeek(', ''),
  \ dotnet#method('get_CalendarWeekRule(', ''),
  \ dotnet#method('set_CalendarWeekRule(', ''),
  \ dotnet#method('get_FullDateTimePattern(', ''),
  \ dotnet#method('set_FullDateTimePattern(', ''),
  \ dotnet#method('get_LongDatePattern(', ''),
  \ dotnet#method('set_LongDatePattern(', ''),
  \ dotnet#method('get_LongTimePattern(', ''),
  \ dotnet#method('set_LongTimePattern(', ''),
  \ dotnet#method('get_MonthDayPattern(', ''),
  \ dotnet#method('set_MonthDayPattern(', ''),
  \ dotnet#method('get_PMDesignator(', ''),
  \ dotnet#method('set_PMDesignator(', ''),
  \ dotnet#method('get_RFC1123Pattern(', ''),
  \ dotnet#method('get_ShortDatePattern(', ''),
  \ dotnet#method('set_ShortDatePattern(', ''),
  \ dotnet#method('get_ShortTimePattern(', ''),
  \ dotnet#method('set_ShortTimePattern(', ''),
  \ dotnet#method('get_SortableDateTimePattern(', ''),
  \ dotnet#method('get_GeneralShortTimePattern(', ''),
  \ dotnet#method('get_GeneralLongTimePattern(', ''),
  \ dotnet#method('get_DateTimeOffsetPattern(', ''),
  \ dotnet#method('get_TimeSeparator(', ''),
  \ dotnet#method('set_TimeSeparator(', ''),
  \ dotnet#method('get_UniversalSortableDateTimePattern(', ''),
  \ dotnet#method('get_YearMonthPattern(', ''),
  \ dotnet#method('set_YearMonthPattern(', ''),
  \ dotnet#method('get_AbbreviatedDayNames(', ''),
  \ dotnet#method('set_AbbreviatedDayNames(', ''),
  \ dotnet#method('get_ShortestDayNames(', ''),
  \ dotnet#method('set_ShortestDayNames(', ''),
  \ dotnet#method('get_DayNames(', ''),
  \ dotnet#method('set_DayNames(', ''),
  \ dotnet#method('get_AbbreviatedMonthNames(', ''),
  \ dotnet#method('set_AbbreviatedMonthNames(', ''),
  \ dotnet#method('get_MonthNames(', ''),
  \ dotnet#method('set_MonthNames(', ''),
  \ dotnet#method('get_HasSpacesInMonthNames(', ''),
  \ dotnet#method('get_HasSpacesInDayNames(', ''),
  \ dotnet#method('internalGetMonthName(', ''),
  \ dotnet#method('internalGetLeapYearMonthNames(', ''),
  \ dotnet#method('GetAbbreviatedDayName(', ''),
  \ dotnet#method('GetShortestDayName(', ''),
  \ dotnet#method('GetAllDateTimePatterns(', ''),
  \ dotnet#method('GetDayName(', ''),
  \ dotnet#method('GetAbbreviatedMonthName(', ''),
  \ dotnet#method('GetMonthName(', ''),
  \ dotnet#method('ReadOnly(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_NativeCalendarName(', ''),
  \ dotnet#method('SetAllDateTimePatterns(', ''),
  \ dotnet#method('get_AbbreviatedMonthGenitiveNames(', ''),
  \ dotnet#method('set_AbbreviatedMonthGenitiveNames(', ''),
  \ dotnet#method('get_MonthGenitiveNames(', ''),
  \ dotnet#method('set_MonthGenitiveNames(', ''),
  \ dotnet#method('get_FullTimeSpanPositivePattern(', ''),
  \ dotnet#method('get_FullTimeSpanNegativePattern(', ''),
  \ dotnet#method('ValidateStyles(', ''),
  \ dotnet#method('get_HasForceTwoDigitYears(', ''),
  \ dotnet#method('get_HasYearMonthAdjustment(', ''),
  \ dotnet#method('YearMonthAdjustment(', ''),
  \ dotnet#method('GetJapaneseCalendarDTFI(', ''),
  \ dotnet#method('GetTaiwanCalendarDTFI(', ''),
  \ dotnet#method('CreateTokenHashTable(', ''),
  \ dotnet#method('Tokenize(', ''),
  \ dotnet#prop('InvariantInfo', 'DateTimeFormatInfo'),
  \ dotnet#prop('CurrentInfo', 'DateTimeFormatInfo'),
  \ dotnet#prop('AMDesignator', 'string'),
  \ dotnet#prop('Calendar', 'Calendar'),
  \ dotnet#prop('EraNames', 'string[]'),
  \ dotnet#prop('AbbreviatedEraNames', 'string[]'),
  \ dotnet#prop('AbbreviatedEnglishEraNames', 'string[]'),
  \ dotnet#prop('DateSeparator', 'string'),
  \ dotnet#prop('FirstDayOfWeek', 'DayOfWeek'),
  \ dotnet#prop('CalendarWeekRule', 'CalendarWeekRule'),
  \ dotnet#prop('FullDateTimePattern', 'string'),
  \ dotnet#prop('LongDatePattern', 'string'),
  \ dotnet#prop('LongTimePattern', 'string'),
  \ dotnet#prop('MonthDayPattern', 'string'),
  \ dotnet#prop('PMDesignator', 'string'),
  \ dotnet#prop('RFC1123Pattern', 'string'),
  \ dotnet#prop('ShortDatePattern', 'string'),
  \ dotnet#prop('ShortTimePattern', 'string'),
  \ dotnet#prop('SortableDateTimePattern', 'string'),
  \ dotnet#prop('GeneralShortTimePattern', 'string'),
  \ dotnet#prop('GeneralLongTimePattern', 'string'),
  \ dotnet#prop('DateTimeOffsetPattern', 'string'),
  \ dotnet#prop('TimeSeparator', 'string'),
  \ dotnet#prop('UniversalSortableDateTimePattern', 'string'),
  \ dotnet#prop('YearMonthPattern', 'string'),
  \ dotnet#prop('AbbreviatedDayNames', 'string[]'),
  \ dotnet#prop('ShortestDayNames', 'string[]'),
  \ dotnet#prop('DayNames', 'string[]'),
  \ dotnet#prop('AbbreviatedMonthNames', 'string[]'),
  \ dotnet#prop('MonthNames', 'string[]'),
  \ dotnet#prop('HasSpacesInMonthNames', 'bool'),
  \ dotnet#prop('HasSpacesInDayNames', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('NativeCalendarName', 'string'),
  \ dotnet#prop('AbbreviatedMonthGenitiveNames', 'string[]'),
  \ dotnet#prop('MonthGenitiveNames', 'string[]'),
  \ dotnet#prop('FullTimeSpanPositivePattern', 'string'),
  \ dotnet#prop('FullTimeSpanNegativePattern', 'string'),
  \ dotnet#prop('CompareInfo', 'CompareInfo'),
  \ dotnet#prop('FormatFlags', 'DateTimeFormatFlags'),
  \ dotnet#prop('HasForceTwoDigitYears', 'bool'),
  \ dotnet#prop('HasYearMonthAdjustment', 'bool'),
  \ ])

call dotnet#class('DaylightTime', 'Object', [ 
  \ dotnet#field('m_start', 'DateTime'),
  \ dotnet#field('m_end', 'DateTime'),
  \ dotnet#field('m_delta', 'TimeSpan'),
  \ dotnet#method('DaylightTime(', ''),
  \ dotnet#method('get_Start(', ''),
  \ dotnet#method('get_End(', ''),
  \ dotnet#method('get_Delta(', ''),
  \ dotnet#prop('Start', 'DateTime'),
  \ dotnet#prop('End', 'DateTime'),
  \ dotnet#prop('Delta', 'TimeSpan'),
  \ ])

call dotnet#class('GregorianCalendar', 'Calendar', [ 
  \ dotnet#field('m_type', 'GregorianCalendarTypes'),
  \ dotnet#method('GetDefaultInstance(', ''),
  \ dotnet#method('GregorianCalendar(', ''),
  \ dotnet#method('set_CalendarType(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('GetDatePart(', ''),
  \ dotnet#method('GetAbsoluteDate(', ''),
  \ dotnet#method('DateToTicks(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetWeekOfYear(', ''),
  \ dotnet#method('InternalGetWeekOfYearFullDays(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('TryToDateTime(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('CalendarType', 'GregorianCalendarTypes'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('HebrewCalendar', 'Calendar', [ 
  \ dotnet#field('year', 'int32'),
  \ dotnet#field('month', 'int32'),
  \ dotnet#field('day', 'int32'),
  \ dotnet#method('HebrewCalendar(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('CheckEraRange(', ''),
  \ dotnet#method('GetResult(', ''),
  \ dotnet#method('GetLunarMonthDay(', ''),
  \ dotnet#method('GetDatePart(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetHebrewYearType(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('HijriCalendar', 'Calendar', [ 
  \ dotnet#method('HijriCalendar(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('get_HijriAdjustment(', ''),
  \ dotnet#method('set_HijriAdjustment(', ''),
  \ dotnet#method('CheckTicksRange(', ''),
  \ dotnet#method('CheckEraRange(', ''),
  \ dotnet#method('CheckYearRange(', ''),
  \ dotnet#method('CheckYearMonthRange(', ''),
  \ dotnet#method('GetDatePart(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('HijriAdjustment', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('UmAlQuraCalendar', 'Calendar', [ 
  \ dotnet#field('HijriMonthsLengthFlags', 'int32'),
  \ dotnet#field('GregorianDate', 'DateTime'),
  \ dotnet#method('UmAlQuraCalendar(', ''),
  \ dotnet#method('get_BaseCalendarID(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('CheckTicksRange(', ''),
  \ dotnet#method('CheckEraRange(', ''),
  \ dotnet#method('CheckYearRange(', ''),
  \ dotnet#method('CheckYearMonthRange(', ''),
  \ dotnet#method('GetDatePart(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('RealGetDaysInYear(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('EastAsianLunisolarCalendar', 'Calendar', [ 
  \ dotnet#method('GetSexagenaryYear(', ''),
  \ dotnet#method('GetCelestialStem(', ''),
  \ dotnet#method('GetTerrestrialBranch(', ''),
  \ dotnet#method('GetYearInfo(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('GetGregorianYear(', ''),
  \ dotnet#method('get_MinCalendarYear(', ''),
  \ dotnet#method('get_MaxCalendarYear(', ''),
  \ dotnet#method('MinEraCalendarYear(', ''),
  \ dotnet#method('MaxEraCalendarYear(', ''),
  \ dotnet#method('EastAsianLunisolarCalendar(', ''),
  \ dotnet#method('CheckTicksRange(', ''),
  \ dotnet#method('CheckEraRange(', ''),
  \ dotnet#method('CheckYearRange(', ''),
  \ dotnet#method('CheckYearMonthRange(', ''),
  \ dotnet#method('InternalGetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('GregorianToLunar(', ''),
  \ dotnet#method('LunarToGregorian(', ''),
  \ dotnet#method('LunarToTime(', ''),
  \ dotnet#method('TimeToLunar(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('InternalIsLeapYear(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('ChineseLunisolarCalendar', 'EastAsianLunisolarCalendar', [ 
  \ dotnet#method('get_MinCalendarYear(', ''),
  \ dotnet#method('get_MaxCalendarYear(', ''),
  \ dotnet#method('GetYearInfo(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('GetGregorianYear(', ''),
  \ dotnet#method('ChineseLunisolarCalendar(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('get_BaseCalendarID(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ ])

call dotnet#class('JapaneseLunisolarCalendar', 'EastAsianLunisolarCalendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('get_MinCalendarYear(', ''),
  \ dotnet#method('get_MaxCalendarYear(', ''),
  \ dotnet#method('GetYearInfo(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('GetGregorianYear(', ''),
  \ dotnet#method('JapaneseLunisolarCalendar(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_BaseCalendarID(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ ])

call dotnet#class('JulianCalendar', 'Calendar', [ 
  \ dotnet#field('MaxYear', 'int32'),
  \ dotnet#method('JulianCalendar(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('CheckEraRange(', ''),
  \ dotnet#method('CheckYearEraRange(', ''),
  \ dotnet#method('CheckMonthRange(', ''),
  \ dotnet#method('CheckDayRange(', ''),
  \ dotnet#method('GetDatePart(', ''),
  \ dotnet#method('DateToTicks(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('KoreanLunisolarCalendar', 'EastAsianLunisolarCalendar', [ 
  \ dotnet#method('get_MinCalendarYear(', ''),
  \ dotnet#method('get_MaxCalendarYear(', ''),
  \ dotnet#method('GetYearInfo(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('GetGregorianYear(', ''),
  \ dotnet#method('KoreanLunisolarCalendar(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_BaseCalendarID(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ ])

call dotnet#class('PersianCalendar', 'Calendar', [ 
  \ dotnet#method('PersianCalendar(', ''),
  \ dotnet#method('get_BaseCalendarID(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('CheckTicksRange(', ''),
  \ dotnet#method('CheckEraRange(', ''),
  \ dotnet#method('CheckYearRange(', ''),
  \ dotnet#method('CheckYearMonthRange(', ''),
  \ dotnet#method('GetDatePart(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('TaiwanLunisolarCalendar', 'EastAsianLunisolarCalendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('get_MinCalendarYear(', ''),
  \ dotnet#method('get_MaxCalendarYear(', ''),
  \ dotnet#method('GetYearInfo(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('GetGregorianYear(', ''),
  \ dotnet#method('TaiwanLunisolarCalendar(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('get_BaseCalendarID(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ ])

call dotnet#class('IdnMapping', 'Object', [ 
  \ dotnet#method('IdnMapping(', ''),
  \ dotnet#method('get_AllowUnassigned(', ''),
  \ dotnet#method('set_AllowUnassigned(', ''),
  \ dotnet#method('get_UseStd3AsciiRules(', ''),
  \ dotnet#method('set_UseStd3AsciiRules(', ''),
  \ dotnet#method('GetAscii(', ''),
  \ dotnet#method('GetUnicode(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#prop('AllowUnassigned', 'bool'),
  \ dotnet#prop('UseStd3AsciiRules', 'bool'),
  \ ])

call dotnet#class('JapaneseCalendar', 'Calendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('GetEraInfo(', ''),
  \ dotnet#method('GetDefaultInstance(', ''),
  \ dotnet#method('JapaneseCalendar(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetWeekOfYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('EraNames(', ''),
  \ dotnet#method('AbbrevEraNames(', ''),
  \ dotnet#method('EnglishEraNames(', ''),
  \ dotnet#method('IsValidYear(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('KoreanCalendar', 'Calendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('KoreanCalendar(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetWeekOfYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('RegionInfo', 'Object', [ 
  \ dotnet#field('m_name', 'string'),
  \ dotnet#field('m_cultureData', 'CultureData'),
  \ dotnet#field('m_dataItem', 'int32'),
  \ dotnet#method('RegionInfo(', ''),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('get_EnglishName(', ''),
  \ dotnet#method('get_DisplayName(', ''),
  \ dotnet#method('get_NativeName(', ''),
  \ dotnet#method('get_TwoLetterISORegionName(', ''),
  \ dotnet#method('get_ThreeLetterISORegionName(', ''),
  \ dotnet#method('get_ThreeLetterWindowsRegionName(', ''),
  \ dotnet#method('get_IsMetric(', ''),
  \ dotnet#method('get_GeoId(', ''),
  \ dotnet#method('get_CurrencyEnglishName(', ''),
  \ dotnet#method('get_CurrencyNativeName(', ''),
  \ dotnet#method('get_CurrencySymbol(', ''),
  \ dotnet#method('get_ISOCurrencySymbol(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#prop('CurrentRegion', 'RegionInfo'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('EnglishName', 'string'),
  \ dotnet#prop('DisplayName', 'string'),
  \ dotnet#prop('NativeName', 'string'),
  \ dotnet#prop('TwoLetterISORegionName', 'string'),
  \ dotnet#prop('ThreeLetterISORegionName', 'string'),
  \ dotnet#prop('ThreeLetterWindowsRegionName', 'string'),
  \ dotnet#prop('IsMetric', 'bool'),
  \ dotnet#prop('GeoId', 'int32'),
  \ dotnet#prop('CurrencyEnglishName', 'string'),
  \ dotnet#prop('CurrencyNativeName', 'string'),
  \ dotnet#prop('CurrencySymbol', 'string'),
  \ dotnet#prop('ISOCurrencySymbol', 'string'),
  \ ])

call dotnet#class('SortKey', 'Object', [ 
  \ dotnet#field('localeName', 'string'),
  \ dotnet#field('win32LCID', 'int32'),
  \ dotnet#field('options', 'CompareOptions'),
  \ dotnet#field('m_String', 'string'),
  \ dotnet#field('m_KeyData', 'uint8[]'),
  \ dotnet#method('SortKey(', ''),
  \ dotnet#method('get_OriginalString(', ''),
  \ dotnet#method('get_KeyData(', ''),
  \ dotnet#method('Compare(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#prop('OriginalString', 'string'),
  \ dotnet#prop('KeyData', 'uint8[]'),
  \ ])

call dotnet#class('StringInfo', 'Object', [ 
  \ dotnet#method('StringInfo(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('get_String(', ''),
  \ dotnet#method('set_String(', ''),
  \ dotnet#method('get_LengthInTextElements(', ''),
  \ dotnet#method('SubstringByTextElements(', ''),
  \ dotnet#method('GetNextTextElement(', ''),
  \ dotnet#method('GetCurrentTextElementLen(', ''),
  \ dotnet#method('GetTextElementEnumerator(', ''),
  \ dotnet#method('ParseCombiningCharacters(', ''),
  \ dotnet#prop('String', 'string'),
  \ dotnet#prop('LengthInTextElements', 'int32'),
  \ ])

call dotnet#class('TaiwanCalendar', 'Calendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('GetDefaultInstance(', ''),
  \ dotnet#method('TaiwanCalendar(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetWeekOfYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('TextInfo', 'Object', [ 
  \ dotnet#field('m_nDataItem', 'int32'),
  \ dotnet#field('m_useUserOverride', 'bool'),
  \ dotnet#field('m_win32LangID', 'int32'),
  \ dotnet#method('TextInfo(', ''),
  \ dotnet#method('GetHashCodeOrdinalIgnoreCase(', ''),
  \ dotnet#method('CompareOrdinalIgnoreCase(', ''),
  \ dotnet#method('CompareOrdinalIgnoreCaseEx(', ''),
  \ dotnet#method('IndexOfStringOrdinalIgnoreCase(', ''),
  \ dotnet#method('LastIndexOfStringOrdinalIgnoreCase(', ''),
  \ dotnet#method('get_ANSICodePage(', ''),
  \ dotnet#method('get_OEMCodePage(', ''),
  \ dotnet#method('get_MacCodePage(', ''),
  \ dotnet#method('get_EBCDICCodePage(', ''),
  \ dotnet#method('get_LCID(', ''),
  \ dotnet#method('get_CultureName(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('ReadOnly(', ''),
  \ dotnet#method('SetReadOnlyState(', ''),
  \ dotnet#method('get_ListSeparator(', ''),
  \ dotnet#method('set_ListSeparator(', ''),
  \ dotnet#method('ToLower(', ''),
  \ dotnet#method('ToUpper(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ToTitleCase(', ''),
  \ dotnet#method('get_IsRightToLeft(', ''),
  \ dotnet#method('OnDeserialization(', ''),
  \ dotnet#method('GetCaseInsensitiveHashCode(', ''),
  \ dotnet#prop('ANSICodePage', 'int32'),
  \ dotnet#prop('OEMCodePage', 'int32'),
  \ dotnet#prop('MacCodePage', 'int32'),
  \ dotnet#prop('EBCDICCodePage', 'int32'),
  \ dotnet#prop('LCID', 'int32'),
  \ dotnet#prop('CultureName', 'string'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('ListSeparator', 'string'),
  \ dotnet#prop('IsRightToLeft', 'bool'),
  \ ])

call dotnet#class('ThaiBuddhistCalendar', 'Calendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('ThaiBuddhistCalendar(', ''),
  \ dotnet#method('get_ID(', ''),
  \ dotnet#method('AddMonths(', ''),
  \ dotnet#method('AddYears(', ''),
  \ dotnet#method('GetDaysInMonth(', ''),
  \ dotnet#method('GetDaysInYear(', ''),
  \ dotnet#method('GetDayOfMonth(', ''),
  \ dotnet#method('GetDayOfWeek(', ''),
  \ dotnet#method('GetDayOfYear(', ''),
  \ dotnet#method('GetMonthsInYear(', ''),
  \ dotnet#method('GetWeekOfYear(', ''),
  \ dotnet#method('GetEra(', ''),
  \ dotnet#method('GetMonth(', ''),
  \ dotnet#method('GetYear(', ''),
  \ dotnet#method('IsLeapDay(', ''),
  \ dotnet#method('IsLeapYear(', ''),
  \ dotnet#method('GetLeapMonth(', ''),
  \ dotnet#method('IsLeapMonth(', ''),
  \ dotnet#method('ToDateTime(', ''),
  \ dotnet#method('get_Eras(', ''),
  \ dotnet#method('get_TwoDigitYearMax(', ''),
  \ dotnet#method('set_TwoDigitYearMax(', ''),
  \ dotnet#method('ToFourDigitYear(', ''),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('NumberFormatInfo', 'Object', [ 
  \ dotnet#field('numberGroupSizes', 'int32[]'),
  \ dotnet#field('currencyGroupSizes', 'int32[]'),
  \ dotnet#field('percentGroupSizes', 'int32[]'),
  \ dotnet#field('positiveSign', 'string'),
  \ dotnet#field('negativeSign', 'string'),
  \ dotnet#field('numberDecimalSeparator', 'string'),
  \ dotnet#field('numberGroupSeparator', 'string'),
  \ dotnet#field('currencyGroupSeparator', 'string'),
  \ dotnet#field('currencyDecimalSeparator', 'string'),
  \ dotnet#field('currencySymbol', 'string'),
  \ dotnet#field('ansiCurrencySymbol', 'string'),
  \ dotnet#field('nanSymbol', 'string'),
  \ dotnet#field('positiveInfinitySymbol', 'string'),
  \ dotnet#field('negativeInfinitySymbol', 'string'),
  \ dotnet#field('percentDecimalSeparator', 'string'),
  \ dotnet#field('percentGroupSeparator', 'string'),
  \ dotnet#field('percentSymbol', 'string'),
  \ dotnet#field('perMilleSymbol', 'string'),
  \ dotnet#field('nativeDigits', 'string[]'),
  \ dotnet#field('m_dataItem', 'int32'),
  \ dotnet#field('numberDecimalDigits', 'int32'),
  \ dotnet#field('currencyDecimalDigits', 'int32'),
  \ dotnet#field('currencyPositivePattern', 'int32'),
  \ dotnet#field('currencyNegativePattern', 'int32'),
  \ dotnet#field('numberNegativePattern', 'int32'),
  \ dotnet#field('percentPositivePattern', 'int32'),
  \ dotnet#field('percentNegativePattern', 'int32'),
  \ dotnet#field('percentDecimalDigits', 'int32'),
  \ dotnet#field('digitSubstitution', 'int32'),
  \ dotnet#field('isReadOnly', 'bool'),
  \ dotnet#field('m_useUserOverride', 'bool'),
  \ dotnet#field('m_isInvariant', 'bool'),
  \ dotnet#field('validForParseAsNumber', 'bool'),
  \ dotnet#field('validForParseAsCurrency', 'bool'),
  \ dotnet#method('NumberFormatInfo(', ''),
  \ dotnet#method('GetInstance(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('get_CurrencyDecimalDigits(', ''),
  \ dotnet#method('set_CurrencyDecimalDigits(', ''),
  \ dotnet#method('get_CurrencyDecimalSeparator(', ''),
  \ dotnet#method('set_CurrencyDecimalSeparator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('CheckGroupSize(', ''),
  \ dotnet#method('get_CurrencyGroupSizes(', ''),
  \ dotnet#method('set_CurrencyGroupSizes(', ''),
  \ dotnet#method('get_NumberGroupSizes(', ''),
  \ dotnet#method('set_NumberGroupSizes(', ''),
  \ dotnet#method('get_PercentGroupSizes(', ''),
  \ dotnet#method('set_PercentGroupSizes(', ''),
  \ dotnet#method('get_CurrencyGroupSeparator(', ''),
  \ dotnet#method('set_CurrencyGroupSeparator(', ''),
  \ dotnet#method('get_CurrencySymbol(', ''),
  \ dotnet#method('set_CurrencySymbol(', ''),
  \ dotnet#method('get_NaNSymbol(', ''),
  \ dotnet#method('set_NaNSymbol(', ''),
  \ dotnet#method('get_CurrencyNegativePattern(', ''),
  \ dotnet#method('set_CurrencyNegativePattern(', ''),
  \ dotnet#method('get_NumberNegativePattern(', ''),
  \ dotnet#method('set_NumberNegativePattern(', ''),
  \ dotnet#method('get_PercentPositivePattern(', ''),
  \ dotnet#method('set_PercentPositivePattern(', ''),
  \ dotnet#method('get_PercentNegativePattern(', ''),
  \ dotnet#method('set_PercentNegativePattern(', ''),
  \ dotnet#method('get_NegativeInfinitySymbol(', ''),
  \ dotnet#method('set_NegativeInfinitySymbol(', ''),
  \ dotnet#method('get_NegativeSign(', ''),
  \ dotnet#method('set_NegativeSign(', ''),
  \ dotnet#method('get_NumberDecimalDigits(', ''),
  \ dotnet#method('set_NumberDecimalDigits(', ''),
  \ dotnet#method('get_NumberDecimalSeparator(', ''),
  \ dotnet#method('set_NumberDecimalSeparator(', ''),
  \ dotnet#method('get_NumberGroupSeparator(', ''),
  \ dotnet#method('set_NumberGroupSeparator(', ''),
  \ dotnet#method('get_CurrencyPositivePattern(', ''),
  \ dotnet#method('set_CurrencyPositivePattern(', ''),
  \ dotnet#method('get_PositiveInfinitySymbol(', ''),
  \ dotnet#method('set_PositiveInfinitySymbol(', ''),
  \ dotnet#method('get_PositiveSign(', ''),
  \ dotnet#method('set_PositiveSign(', ''),
  \ dotnet#method('get_PercentDecimalDigits(', ''),
  \ dotnet#method('set_PercentDecimalDigits(', ''),
  \ dotnet#method('get_PercentDecimalSeparator(', ''),
  \ dotnet#method('set_PercentDecimalSeparator(', ''),
  \ dotnet#method('get_PercentGroupSeparator(', ''),
  \ dotnet#method('set_PercentGroupSeparator(', ''),
  \ dotnet#method('get_PercentSymbol(', ''),
  \ dotnet#method('set_PercentSymbol(', ''),
  \ dotnet#method('get_PerMilleSymbol(', ''),
  \ dotnet#method('set_PerMilleSymbol(', ''),
  \ dotnet#method('get_NativeDigits(', ''),
  \ dotnet#method('set_NativeDigits(', ''),
  \ dotnet#method('get_DigitSubstitution(', ''),
  \ dotnet#method('set_DigitSubstitution(', ''),
  \ dotnet#method('GetFormat(', ''),
  \ dotnet#method('ReadOnly(', ''),
  \ dotnet#method('ValidateParseStyleInteger(', ''),
  \ dotnet#method('ValidateParseStyleFloatingPoint(', ''),
  \ dotnet#prop('InvariantInfo', 'NumberFormatInfo'),
  \ dotnet#prop('CurrencyDecimalDigits', 'int32'),
  \ dotnet#prop('CurrencyDecimalSeparator', 'string'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('CurrencyGroupSizes', 'int32[]'),
  \ dotnet#prop('NumberGroupSizes', 'int32[]'),
  \ dotnet#prop('PercentGroupSizes', 'int32[]'),
  \ dotnet#prop('CurrencyGroupSeparator', 'string'),
  \ dotnet#prop('CurrencySymbol', 'string'),
  \ dotnet#prop('CurrentInfo', 'NumberFormatInfo'),
  \ dotnet#prop('NaNSymbol', 'string'),
  \ dotnet#prop('CurrencyNegativePattern', 'int32'),
  \ dotnet#prop('NumberNegativePattern', 'int32'),
  \ dotnet#prop('PercentPositivePattern', 'int32'),
  \ dotnet#prop('PercentNegativePattern', 'int32'),
  \ dotnet#prop('NegativeInfinitySymbol', 'string'),
  \ dotnet#prop('NegativeSign', 'string'),
  \ dotnet#prop('NumberDecimalDigits', 'int32'),
  \ dotnet#prop('NumberDecimalSeparator', 'string'),
  \ dotnet#prop('NumberGroupSeparator', 'string'),
  \ dotnet#prop('CurrencyPositivePattern', 'int32'),
  \ dotnet#prop('PositiveInfinitySymbol', 'string'),
  \ dotnet#prop('PositiveSign', 'string'),
  \ dotnet#prop('PercentDecimalDigits', 'int32'),
  \ dotnet#prop('PercentDecimalSeparator', 'string'),
  \ dotnet#prop('PercentGroupSeparator', 'string'),
  \ dotnet#prop('PercentSymbol', 'string'),
  \ dotnet#prop('PerMilleSymbol', 'string'),
  \ dotnet#prop('NativeDigits', 'string[]'),
  \ dotnet#prop('DigitSubstitution', 'DigitShapes'),
  \ ])

