call dotnet#namespace('System.Collections.Specialized')

call dotnet#class('CollectionChangedEventManager', 'WeakEventManager', [ 
  \ dotnet#method('AddListener(', 'class INotifyCollectionChanged source, IWeakEventListener listener)', 'static void'),
  \ dotnet#method('RemoveListener(', 'class INotifyCollectionChanged source, IWeakEventListener listener)', 'static void'),
  \ dotnet#method('StartListening(', 'object source)', 'void'),
  \ dotnet#method('StopListening(', 'object source)', 'void'),
  \ dotnet#method('CollectionChangedEventManager(', ')', 'void'),
  \ ])

call dotnet#class('BitVBitVector3232', 'ValueType', [ 
  \ dotnet#field('mask', 'int16'),
  \ dotnet#field('offset', 'int16'),
  \ dotnet#method('get_Mask(', ')', 'int16'),
  \ dotnet#method('get_Offset(', ')', 'int16'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'BitVBitVector3232/Section obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'BitVBitVector3232/Section a, BitVBitVector3232/Section b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'BitVBitVector3232/Section a, BitVBitVector3232/Section b)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', 'BitVBitVector3232/Section value)', 'static string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Mask', 'int16'),
  \ dotnet#prop('Offset', 'int16'),
  \ dotnet#field('data', 'uint32'),
  \ dotnet#method('BitVector32(', 'int32 data)', 'void'),
  \ dotnet#method('BitVector32(', 'BitVBitVector3232 value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 bit)', 'bool'),
  \ dotnet#method('set_Item(', 'int32 bit, bool value)', 'void'),
  \ dotnet#method('get_Item(', 'BitVBitVector3232/Section section)', 'int32'),
  \ dotnet#method('set_Item(', 'BitVBitVector3232/Section section, int32 value)', 'void'),
  \ dotnet#method('get_Data(', ')', 'int32'),
  \ dotnet#method('CreateMask(', ')', 'static int32'),
  \ dotnet#method('CreateMask(', 'int32 previous)', 'static int32'),
  \ dotnet#method('CreateSection(', 'int16 maxValue)', 'static BitVBitVector3232/Section'),
  \ dotnet#method('CreateSection(', 'int16 maxValue, BitVBitVector3232/Section previous)', 'static BitVBitVector3232/Section'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', 'BitVBitVector3232 value)', 'static string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Item(int32)', 'bool'),
  \ dotnet#prop('Item(valuetype', 'int32'),
  \ dotnet#prop('Data', 'int32'),
  \ ])

call dotnet#class('CollectionsUtil', 'Object', [ 
  \ dotnet#method('CreateCaseInsensitiveHashtable(', ')', 'static Hashtable'),
  \ dotnet#method('CreateCaseInsensitiveHashtable(', 'int32 capacity)', 'static Hashtable'),
  \ dotnet#method('CreateCaseInsensitiveHashtable(', 'class IDictionary d)', 'static Hashtable'),
  \ dotnet#method('CreateCaseInsensitiveSortedList(', ')', 'static SortedList'),
  \ dotnet#method('CollectionsUtil(', ')', 'void'),
  \ ])

call dotnet#class('HybridDictionary', 'Object', [ 
  \ dotnet#method('HybridDictionary(', ')', 'void'),
  \ dotnet#method('HybridDictionary(', 'int32 initialSize)', 'void'),
  \ dotnet#method('HybridDictionary(', 'bool caseInsensitive)', 'void'),
  \ dotnet#method('HybridDictionary(', 'int32 initialSize, bool caseInsensitive)', 'void'),
  \ dotnet#method('get_Item(', 'object key)', 'object'),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('Add(', 'object key, object value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object key)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Remove(', 'object key)', 'void'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('ListDictionary', 'Object', [ 
  \ dotnet#method('ListDictionary(', ')', 'void'),
  \ dotnet#method('ListDictionary(', 'class IComparer comparer)', 'void'),
  \ dotnet#method('get_Item(', 'object key)', 'object'),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('Add(', 'object key, object value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object key)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Remove(', 'object key)', 'void'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('NameObjectCollectionBase', 'Object', [ 
  \ dotnet#method('Get(', 'int32 index)', 'string'),
  \ dotnet#method('get_Item(', 'int32 index)', 'string'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#prop('Item(int32)', 'string'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#method('NameObjectCollectionBase(', ')', 'void'),
  \ dotnet#method('NameObjectCollectionBase(', 'class IEqualityComparer equalityComparer)', 'void'),
  \ dotnet#method('NameObjectCollectionBase(', 'int32 capacity, IEqualityComparer equalityComparer)', 'void'),
  \ dotnet#method('NameObjectCollectionBase(', 'class IHashCodeProvider hashProvider, IComparer comparer)', 'void'),
  \ dotnet#method('NameObjectCollectionBase(', 'int32 capacity, IHashCodeProvider hashProvider, IComparer comparer)', 'void'),
  \ dotnet#method('NameObjectCollectionBase(', 'int32 capacity)', 'void'),
  \ dotnet#method('NameObjectCollectionBase(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('set_IsReadOnly(', 'bool value)', 'void'),
  \ dotnet#method('BaseHasKeys(', ')', 'bool'),
  \ dotnet#method('BaseAdd(', 'string name, object value)', 'void'),
  \ dotnet#method('BaseRemove(', 'string name)', 'void'),
  \ dotnet#method('BaseRemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('BaseClear(', ')', 'void'),
  \ dotnet#method('BaseGet(', 'string name)', 'object'),
  \ dotnet#method('BaseSet(', 'string name, object value)', 'void'),
  \ dotnet#method('BaseGet(', 'int32 index)', 'object'),
  \ dotnet#method('BaseGetKey(', 'int32 index)', 'string'),
  \ dotnet#method('BaseSet(', 'int32 index, object value)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('BaseGetAllKeys(', ')', 'string[]'),
  \ dotnet#method('BaseGetAllValues(', ')', 'object[]'),
  \ dotnet#method('BaseGetAllValues(', 'class Type type)', 'object[]'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('NameObjectCollectionBase(', ')', 'static void .'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('Keys', 'NameObjectCollectionBase/KeysCollection'),
  \ ])

call dotnet#class('NameValueCollection', 'NameObjectCollectionBase', [ 
  \ dotnet#method('NameValueCollection(', ')', 'void'),
  \ dotnet#method('NameValueCollection(', 'class NameValueCollection col)', 'void'),
  \ dotnet#method('NameValueCollection(', 'class IHashCodeProvider hashProvider, IComparer comparer)', 'void'),
  \ dotnet#method('NameValueCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('NameValueCollection(', 'class IEqualityComparer equalityComparer)', 'void'),
  \ dotnet#method('NameValueCollection(', 'int32 capacity, IEqualityComparer equalityComparer)', 'void'),
  \ dotnet#method('NameValueCollection(', 'int32 capacity, NameValueCollection col)', 'void'),
  \ dotnet#method('NameValueCollection(', 'int32 capacity, IHashCodeProvider hashProvider, IComparer comparer)', 'void'),
  \ dotnet#method('NameValueCollection(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('InvalidateCachedArrays(', ')', 'void'),
  \ dotnet#method('Add(', 'class NameValueCollection c)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('CopyTo(', 'class Array dest, int32 index)', 'void'),
  \ dotnet#method('HasKeys(', ')', 'bool'),
  \ dotnet#method('Add(', 'string name, string value)', 'void'),
  \ dotnet#method('Get(', 'string name)', 'string'),
  \ dotnet#method('GetValues(', 'string name)', 'string[]'),
  \ dotnet#method('Set(', 'string name, string value)', 'void'),
  \ dotnet#method('Remove(', 'string name)', 'void'),
  \ dotnet#method('get_Item(', 'string name)', 'string'),
  \ dotnet#method('set_Item(', 'string name, string value)', 'void'),
  \ dotnet#method('Get(', 'int32 index)', 'string'),
  \ dotnet#method('GetValues(', 'int32 index)', 'string[]'),
  \ dotnet#method('GetKey(', 'int32 index)', 'string'),
  \ dotnet#method('get_Item(', 'int32 index)', 'string'),
  \ dotnet#method('get_AllKeys(', ')', 'string[]'),
  \ dotnet#prop('Item(string)', 'string'),
  \ dotnet#prop('Item(int32)', 'string'),
  \ dotnet#prop('AllKeys', 'string[]'),
  \ ])

call dotnet#class('NotifyCollectionChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, object changedItem)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, object changedItem, int32 index)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, IList changedItems)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, IList changedItems, int32 startingIndex)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, object newItem, object oldItem)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, object newItem, object oldItem, int32 index)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, IList newItems, IList oldItems)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, IList newItems, IList oldItems, int32 startingIndex)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, object changedItem, int32 index, int32 oldIndex)', 'void'),
  \ dotnet#method('NotifyCollectionChangedEventArgs(', 'NotifyCollectionChangedAction action, IList changedItems, int32 index, int32 oldIndex)', 'void'),
  \ dotnet#method('get_Action(', ')', 'NotifyCollectionChangedAction'),
  \ dotnet#method('get_NewItems(', ')', 'IList'),
  \ dotnet#method('get_OldItems(', ')', 'IList'),
  \ dotnet#method('get_NewStartingIndex(', ')', 'int32'),
  \ dotnet#method('get_OldStartingIndex(', ')', 'int32'),
  \ dotnet#prop('Action', 'NotifyCollectionChangedAction'),
  \ dotnet#prop('NewItems', 'IList'),
  \ dotnet#prop('OldItems', 'IList'),
  \ dotnet#prop('NewStartingIndex', 'int32'),
  \ dotnet#prop('OldStartingIndex', 'int32'),
  \ ])

call dotnet#class('NotifyCollectionChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('NotifyCollectionChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, NotifyCollectionChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('OrderedDictionary', 'Object', [ 
  \ dotnet#method('OrderedDictionary(', ')', 'void'),
  \ dotnet#method('OrderedDictionary(', 'int32 capacity)', 'void'),
  \ dotnet#method('OrderedDictionary(', 'class IEqualityComparer comparer)', 'void'),
  \ dotnet#method('OrderedDictionary(', 'int32 capacity, IEqualityComparer comparer)', 'void'),
  \ dotnet#method('OrderedDictionary(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object'),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void'),
  \ dotnet#method('get_Item(', 'object key)', 'object'),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void'),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('Add(', 'object key, object value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('AsReadOnly(', ')', 'OrderedDictionary'),
  \ dotnet#method('Contains(', 'object key)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('Insert(', 'int32 index, object key, object value)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('Remove(', 'object key)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('StringCollection', 'Object', [ 
  \ dotnet#method('get_Item(', 'int32 index)', 'string'),
  \ dotnet#method('set_Item(', 'int32 index, string value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('Add(', 'string value)', 'int32'),
  \ dotnet#method('AddRange(', 'string[] value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'string value)', 'bool'),
  \ dotnet#method('CopyTo(', 'string[] array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'StringEnumerator'),
  \ dotnet#method('IndexOf(', 'string value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, string value)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('Remove(', 'string value)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('StringCollection(', ')', 'void'),
  \ dotnet#prop('Item(int32)', 'string'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ ])

call dotnet#class('StringDictionary', 'Object', [ 
  \ dotnet#method('StringDictionary(', ')', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_Item(', 'string key)', 'string'),
  \ dotnet#method('set_Item(', 'string key, string value)', 'void'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('Add(', 'string key, string value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('ContainsKey(', 'string key)', 'bool'),
  \ dotnet#method('ContainsValue(', 'string value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Remove(', 'string key)', 'void'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('Item(string)', 'string'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

