call dotnet#namespace('System.Net')

call dotnet#class('AuthenticationManager', 'Object', [ 
  \ dotnet#method('get_CredentialPolicy(', ')', 'static'),
  \ dotnet#method('set_CredentialPolicy(', 'class ICredentialPolicy value)', 'static void'),
  \ dotnet#method('get_CustomTargetNameDictionary(', ')', 'static'),
  \ dotnet#method('Authenticate(', 'string challenge, WebRequest request, ICredentials credentials)', 'static Authorization'),
  \ dotnet#method('PreAuthenticate(', 'class WebRequest request, ICredentials credentials)', 'static Authorization'),
  \ dotnet#method('Register(', 'class IAuthenticationModule authenticationModule)', 'static void'),
  \ dotnet#method('Unregister(', 'class IAuthenticationModule authenticationModule)', 'static void'),
  \ dotnet#method('Unregister(', 'string authenticationScheme)', 'static void'),
  \ dotnet#method('get_RegisteredModules(', ')', 'static'),
  \ dotnet#method('AuthenticationManager(', ')', 'void'),
  \ dotnet#method('AuthenticationManager(', ')', 'static void .'),
  \ dotnet#prop('CredentialPolicy', 'ICredentialPolicy'),
  \ dotnet#prop('CustomTargetNameDictionary', 'StringDictionary'),
  \ dotnet#prop('RegisteredModules', 'IEnumerator'),
  \ ])

call dotnet#class('AuthenticationSchemeSelAuthenticationSchemeSelector', 'MulticastDelegate', [ 
  \ dotnet#method('AuthenticationSchemeSelector(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class HttpListenerRequest httpRequest)', ''),
  \ dotnet#method('BeginInvoke(', 'class HttpListenerRequest httpRequest, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('Authorization', 'Object', [ 
  \ dotnet#method('Authorization(', 'string token)', 'void'),
  \ dotnet#method('Authorization(', 'string token, bool finished)', 'void'),
  \ dotnet#method('Authorization(', 'string token, bool finished, string connectionGroupId)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_ConnectionGroupId(', ')', 'string'),
  \ dotnet#method('get_Complete(', ')', 'bool'),
  \ dotnet#method('get_ProtectionRealm(', ')', 'string[]'),
  \ dotnet#method('set_ProtectionRealm(', 'string[] value)', 'void'),
  \ dotnet#method('get_MutuallyAuthenticated(', ')', 'bool'),
  \ dotnet#method('set_MutuallyAuthenticated(', 'bool value)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('ConnectionGroupId', 'string'),
  \ dotnet#prop('Complete', 'bool'),
  \ dotnet#prop('ProtectionRealm', 'string[]'),
  \ dotnet#prop('MutuallyAuthenticated', 'bool'),
  \ ])

call dotnet#class('Cookie', 'Object', [ 
  \ dotnet#method('Cookie(', ')', 'void'),
  \ dotnet#method('Cookie(', 'string name, string value)', 'void'),
  \ dotnet#method('Cookie(', 'string name, string value, string path)', 'void'),
  \ dotnet#method('Cookie(', 'string name, string value, string path, string domain)', 'void'),
  \ dotnet#method('get_Comment(', ')', 'string'),
  \ dotnet#method('set_Comment(', 'string value)', 'void'),
  \ dotnet#method('get_CommentUri(', ')', 'Uri'),
  \ dotnet#method('set_CommentUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_HttpOnly(', ')', 'bool'),
  \ dotnet#method('set_HttpOnly(', 'bool value)', 'void'),
  \ dotnet#method('get_Discard(', ')', 'bool'),
  \ dotnet#method('set_Discard(', 'bool value)', 'void'),
  \ dotnet#method('get_Domain(', ')', 'string'),
  \ dotnet#method('set_Domain(', 'string value)', 'void'),
  \ dotnet#method('get_Expired(', ')', 'bool'),
  \ dotnet#method('set_Expired(', 'bool value)', 'void'),
  \ dotnet#method('get_Expires(', ')', 'DateTime'),
  \ dotnet#method('set_Expires(', 'DateTime value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_Path(', ')', 'string'),
  \ dotnet#method('set_Path(', 'string value)', 'void'),
  \ dotnet#method('get_Port(', ')', 'string'),
  \ dotnet#method('set_Port(', 'string value)', 'void'),
  \ dotnet#method('get_Secure(', ')', 'bool'),
  \ dotnet#method('set_Secure(', 'bool value)', 'void'),
  \ dotnet#method('get_TimeStamp(', ')', 'DateTime'),
  \ dotnet#method('get_Value(', ')', 'string'),
  \ dotnet#method('set_Value(', 'string value)', 'void'),
  \ dotnet#method('get_Version(', ')', 'int32'),
  \ dotnet#method('set_Version(', 'int32 value)', 'void'),
  \ dotnet#method('Equals(', 'object comparand)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Cookie(', ')', 'static void .'),
  \ dotnet#prop('Comment', 'string'),
  \ dotnet#prop('CommentUri', 'Uri'),
  \ dotnet#prop('HttpOnly', 'bool'),
  \ dotnet#prop('Discard', 'bool'),
  \ dotnet#prop('Domain', 'string'),
  \ dotnet#prop('Expired', 'bool'),
  \ dotnet#prop('Expires', 'DateTime'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Path', 'string'),
  \ dotnet#prop('Port', 'string'),
  \ dotnet#prop('Secure', 'bool'),
  \ dotnet#prop('TimeStamp', 'DateTime'),
  \ dotnet#prop('Value', 'string'),
  \ dotnet#prop('Version', 'int32'),
  \ ])

call dotnet#class('CookieCollection', 'Object', [ 
  \ dotnet#method('CookieCollection(', ')', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_Item(', 'int32 index)', 'Cookie'),
  \ dotnet#method('get_Item(', 'string name)', 'Cookie'),
  \ dotnet#method('Add(', 'class Cookie cookie)', 'void'),
  \ dotnet#method('Add(', 'class CookieCollection cookies)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class Cookie[] array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'Cookie'),
  \ dotnet#prop('Item(string)', 'Cookie'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ ])

call dotnet#class('CookieContainer', 'Object', [ 
  \ dotnet#method('CookieContainer(', ')', 'void'),
  \ dotnet#method('CookieContainer(', 'int32 capacity)', 'void'),
  \ dotnet#method('CookieContainer(', 'int32 capacity, int32 perDomainCapacity, int32 maxCookieSize)', 'void'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_MaxCookieSize(', ')', 'int32'),
  \ dotnet#method('set_MaxCookieSize(', 'int32 value)', 'void'),
  \ dotnet#method('get_PerDomainCapacity(', ')', 'int32'),
  \ dotnet#method('set_PerDomainCapacity(', 'int32 value)', 'void'),
  \ dotnet#method('Add(', 'class Cookie cookie)', 'void'),
  \ dotnet#method('Add(', 'class CookieCollection cookies)', 'void'),
  \ dotnet#method('Add(', 'class Uri uri, Cookie cookie)', 'void'),
  \ dotnet#method('Add(', 'class Uri uri, CookieCollection cookies)', 'void'),
  \ dotnet#method('GetCookies(', 'class Uri uri)', 'CookieCollection'),
  \ dotnet#method('GetCookieHeader(', 'class Uri uri)', 'string'),
  \ dotnet#method('SetCookies(', 'class Uri uri, string cookieHeader)', 'void'),
  \ dotnet#method('CookieContainer(', ')', 'static void .'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('MaxCookieSize', 'int32'),
  \ dotnet#prop('PerDomainCapacity', 'int32'),
  \ ])

call dotnet#class('CookieException', 'FormatException', [ 
  \ dotnet#method('CookieException(', ')', 'void'),
  \ dotnet#method('CookieException(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('CookieException(', 'string message)', 'void'),
  \ dotnet#method('CookieException(', 'string message, Exception inner)', 'void'),
  \ ])

call dotnet#class('CredentialCache', 'Object', [ 
  \ dotnet#method('CredentialCache(', ')', 'void'),
  \ dotnet#method('Add(', 'class Uri uriPrefix, string authType, NetworkCredential cred)', 'void'),
  \ dotnet#method('Add(', 'string host, int32 port, string authenticationType, NetworkCredential credential)', 'void'),
  \ dotnet#method('Remove(', 'class Uri uriPrefix, string authType)', 'void'),
  \ dotnet#method('Remove(', 'string host, int32 port, string authenticationType)', 'void'),
  \ dotnet#method('GetCredential(', 'class Uri uriPrefix, string authType)', ''),
  \ dotnet#method('GetCredential(', 'string host, int32 port, string authenticationType)', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_DefaultCredentials(', ')', 'static ICredentials'),
  \ dotnet#method('get_DefaultNetworkCredentials(', ')', 'static'),
  \ dotnet#prop('DefaultCredentials', 'ICredentials'),
  \ dotnet#prop('DefaultNetworkCredentials', 'NetworkCredential'),
  \ ])

call dotnet#class('NetworkCredential', 'Object', [ 
  \ dotnet#method('NetworkCredential(', ')', 'void'),
  \ dotnet#method('NetworkCredential(', 'string userName, string password)', 'void'),
  \ dotnet#method('NetworkCredential(', 'string userName, SecureString password)', 'void'),
  \ dotnet#method('NetworkCredential(', 'string userName, string password, string domain)', 'void'),
  \ dotnet#method('NetworkCredential(', 'string userName, SecureString password, string domain)', 'void'),
  \ dotnet#method('get_UserName(', ')', 'string'),
  \ dotnet#method('set_UserName(', 'string value)', 'void'),
  \ dotnet#method('get_Password(', ')', 'string'),
  \ dotnet#method('set_Password(', 'string value)', 'void'),
  \ dotnet#method('get_SecurePassword(', ')', 'SecureString'),
  \ dotnet#method('set_SecurePassword(', 'class SecureString value)', 'void'),
  \ dotnet#method('get_Domain(', ')', 'string'),
  \ dotnet#method('set_Domain(', 'string value)', 'void'),
  \ dotnet#method('GetCredential(', 'class Uri uri, string authType)', ''),
  \ dotnet#method('GetCredential(', 'string host, int32 port, string authenticationType)', ''),
  \ dotnet#method('NetworkCredential(', ')', 'static void .'),
  \ dotnet#prop('UserName', 'string'),
  \ dotnet#prop('Password', 'string'),
  \ dotnet#prop('SecurePassword', 'SecureString'),
  \ dotnet#prop('Domain', 'string'),
  \ ])

call dotnet#class('Dns', 'Object', [ 
  \ dotnet#method('GetHostByName(', 'string hostName)', 'static IPHostEntry'),
  \ dotnet#method('GetHostByAddress(', 'string address)', 'static IPHostEntry'),
  \ dotnet#method('GetHostByAddress(', 'class IPAddress address)', 'static IPHostEntry'),
  \ dotnet#method('GetHostName(', ')', 'static string'),
  \ dotnet#method('Resolve(', 'string hostName)', 'static IPHostEntry'),
  \ dotnet#method('BeginGetHostByName(', 'string hostName, AsyncCallback requestCallback, object stateObject)', 'static IAsyncResult'),
  \ dotnet#method('EndGetHostByName(', 'class IAsyncResult asyncResult)', 'static IPHostEntry'),
  \ dotnet#method('GetHostEntry(', 'string hostNameOrAddress)', 'static IPHostEntry'),
  \ dotnet#method('GetHostEntry(', 'class IPAddress address)', 'static IPHostEntry'),
  \ dotnet#method('GetHostAddresses(', 'string hostNameOrAddress)', 'static IPAddress[]'),
  \ dotnet#method('BeginGetHostEntry(', 'string hostNameOrAddress, AsyncCallback requestCallback, object stateObject)', 'static IAsyncResult'),
  \ dotnet#method('BeginGetHostEntry(', 'class IPAddress address, AsyncCallback requestCallback, object stateObject)', 'static IAsyncResult'),
  \ dotnet#method('EndGetHostEntry(', 'class IAsyncResult asyncResult)', 'static IPHostEntry'),
  \ dotnet#method('BeginGetHostAddresses(', 'string hostNameOrAddress, AsyncCallback requestCallback, object state)', 'static IAsyncResult'),
  \ dotnet#method('EndGetHostAddresses(', 'class IAsyncResult asyncResult)', 'static IPAddress[]'),
  \ dotnet#method('BeginResolve(', 'string hostName, AsyncCallback requestCallback, object stateObject)', 'static IAsyncResult'),
  \ dotnet#method('EndResolve(', 'class IAsyncResult asyncResult)', 'static IPHostEntry'),
  \ dotnet#method('Dns(', ')', 'static void .'),
  \ ])

call dotnet#class('EndPoint', 'Object', [ 
  \ dotnet#method('get_AddressFamily(', ')', ''),
  \ dotnet#method('Serialize(', ')', ''),
  \ dotnet#method('Create(', 'class SocketAddress socketAddress)', ''),
  \ dotnet#method('EndPoint(', ')', 'void'),
  \ dotnet#prop('AddressFamily', 'AddressFamily'),
  \ ])

call dotnet#class('DnsEndPoint', 'EndPoint', [ 
  \ dotnet#method('DnsEndPoint(', 'string host, int32 port)', 'void'),
  \ dotnet#method('DnsEndPoint(', 'string host, int32 port, AddressaddressFamily)', 'void'),
  \ dotnet#method('Equals(', 'object comparand)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Host(', ')', 'string'),
  \ dotnet#method('get_AddressFamily(', ')', ''),
  \ dotnet#method('get_Port(', ')', 'int32'),
  \ dotnet#prop('Host', 'string'),
  \ dotnet#prop('AddressFamily', 'AddressFamily'),
  \ dotnet#prop('Port', 'int32'),
  \ ])

call dotnet#class('DnsPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('DnsPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ ])

call dotnet#class('DnsPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('DnsPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ ])

call dotnet#class('WebRequest', 'MarshalByRefObject', [ 
  \ dotnet#method('Create(', 'string requestUriString)', 'static WebRequest'),
  \ dotnet#method('Create(', 'class Uri requestUri)', 'static WebRequest'),
  \ dotnet#method('CreateDefault(', 'class Uri requestUri)', 'static WebRequest'),
  \ dotnet#method('RegisterPrefix(', 'string prefix, IWebRequestCreate creator)', 'static bool'),
  \ dotnet#method('WebRequest(', ')', 'void'),
  \ dotnet#method('WebRequest(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_DefaultCachePolicy(', ')', 'static'),
  \ dotnet#method('set_DefaultCachePolicy(', 'class RequestCachePolicy value)', 'static void'),
  \ dotnet#method('get_CachePolicy(', ')', ''),
  \ dotnet#method('set_CachePolicy(', 'class RequestCachePolicy value)', 'void'),
  \ dotnet#method('get_Method(', ')', 'string'),
  \ dotnet#method('set_Method(', 'string value)', 'void'),
  \ dotnet#method('get_RequestUri(', ')', 'Uri'),
  \ dotnet#method('get_ConnectionGroupName(', ')', 'string'),
  \ dotnet#method('set_ConnectionGroupName(', 'string value)', 'void'),
  \ dotnet#method('get_Headers(', ')', ''),
  \ dotnet#method('set_Headers(', 'class WebHeaderCollection value)', 'void'),
  \ dotnet#method('get_ContentLength(', ')', 'int64'),
  \ dotnet#method('set_ContentLength(', 'int64 value)', 'void'),
  \ dotnet#method('get_ContentType(', ')', 'string'),
  \ dotnet#method('set_ContentType(', 'string value)', 'void'),
  \ dotnet#method('get_Credentials(', ')', ''),
  \ dotnet#method('set_Credentials(', 'class ICredentials value)', 'void'),
  \ dotnet#method('get_UseDefaultCredentials(', ')', 'bool'),
  \ dotnet#method('set_UseDefaultCredentials(', 'bool value)', 'void'),
  \ dotnet#method('get_Proxy(', ')', ''),
  \ dotnet#method('set_Proxy(', 'class IWebProxy value)', 'void'),
  \ dotnet#method('get_PreAuthenticate(', ')', 'bool'),
  \ dotnet#method('set_PreAuthenticate(', 'bool value)', 'void'),
  \ dotnet#method('get_Timeout(', ')', 'int32'),
  \ dotnet#method('set_Timeout(', 'int32 value)', 'void'),
  \ dotnet#method('GetRequestStream(', ')', ''),
  \ dotnet#method('GetResponse(', ')', ''),
  \ dotnet#method('BeginGetResponse(', 'class AsyncCallback callback, object state)', ''),
  \ dotnet#method('EndGetResponse(', 'class IAsyncResult asyncResult)', ''),
  \ dotnet#method('BeginGetRequestStream(', 'class AsyncCallback callback, object state)', ''),
  \ dotnet#method('EndGetRequestStream(', 'class IAsyncResult asyncResult)', ''),
  \ dotnet#method('Abort(', ')', 'void'),
  \ dotnet#method('get_AuthenticationLevel(', ')', 'AuthenticationLevel'),
  \ dotnet#method('set_AuthenticationLevel(', 'AuthenticationLevel value)', 'void'),
  \ dotnet#method('get_ImpersonationLevel(', ')', 'TokenImpersonationLevel'),
  \ dotnet#method('set_ImpersonationLevel(', 'TokenImpersonationLevel value)', 'void'),
  \ dotnet#method('get_DefaultWebProxy(', ')', 'static IWebProxy'),
  \ dotnet#method('set_DefaultWebProxy(', 'class IWebProxy value)', 'static void'),
  \ dotnet#method('GetSystemWebProxy(', ')', 'static IWebProxy'),
  \ dotnet#method('WebRequest(', ')', 'static void .'),
  \ dotnet#prop('DefaultCachePolicy', 'RequestCachePolicy'),
  \ dotnet#prop('CachePolicy', 'RequestCachePolicy'),
  \ dotnet#prop('Method', 'string'),
  \ dotnet#prop('RequestUri', 'Uri'),
  \ dotnet#prop('ConnectionGroupName', 'string'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ dotnet#prop('ContentLength', 'int64'),
  \ dotnet#prop('ContentType', 'string'),
  \ dotnet#prop('Credentials', 'ICredentials'),
  \ dotnet#prop('UseDefaultCredentials', 'bool'),
  \ dotnet#prop('Proxy', 'IWebProxy'),
  \ dotnet#prop('PreAuthenticate', 'bool'),
  \ dotnet#prop('Timeout', 'int32'),
  \ dotnet#prop('AuthenticationLevel', 'AuthenticationLevel'),
  \ dotnet#prop('ImpersonationLevel', 'TokenImpersonationLevel'),
  \ dotnet#prop('DefaultWebProxy', 'IWebProxy'),
  \ ])

call dotnet#class('FileWebRequest', 'WebRequest', [ 
  \ dotnet#method('FileWebRequest(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_ConnectionGroupName(', ')', 'string'),
  \ dotnet#method('set_ConnectionGroupName(', 'string value)', 'void'),
  \ dotnet#method('get_ContentLength(', ')', 'int64'),
  \ dotnet#method('set_ContentLength(', 'int64 value)', 'void'),
  \ dotnet#method('get_ContentType(', ')', 'string'),
  \ dotnet#method('set_ContentType(', 'string value)', 'void'),
  \ dotnet#method('get_Credentials(', ')', ''),
  \ dotnet#method('set_Credentials(', 'class ICredentials value)', 'void'),
  \ dotnet#method('get_Headers(', ')', ''),
  \ dotnet#method('get_Method(', ')', 'string'),
  \ dotnet#method('set_Method(', 'string value)', 'void'),
  \ dotnet#method('get_PreAuthenticate(', ')', 'bool'),
  \ dotnet#method('set_PreAuthenticate(', 'bool value)', 'void'),
  \ dotnet#method('get_Proxy(', ')', ''),
  \ dotnet#method('set_Proxy(', 'class IWebProxy value)', 'void'),
  \ dotnet#method('get_Timeout(', ')', 'int32'),
  \ dotnet#method('set_Timeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_RequestUri(', ')', 'Uri'),
  \ dotnet#method('BeginGetRequestStream(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('BeginGetResponse(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndGetRequestStream(', 'class IAsyncResult asyncResult)', 'Stream'),
  \ dotnet#method('EndGetResponse(', 'class IAsyncResult asyncResult)', 'WebResponse'),
  \ dotnet#method('GetRequestStream(', ')', 'Stream'),
  \ dotnet#method('GetResponse(', ')', 'WebResponse'),
  \ dotnet#method('get_UseDefaultCredentials(', ')', 'bool'),
  \ dotnet#method('set_UseDefaultCredentials(', 'bool value)', 'void'),
  \ dotnet#method('Abort(', ')', 'void'),
  \ dotnet#method('FileWebRequest(', ')', 'static void .'),
  \ dotnet#prop('ConnectionGroupName', 'string'),
  \ dotnet#prop('ContentLength', 'int64'),
  \ dotnet#prop('ContentType', 'string'),
  \ dotnet#prop('Credentials', 'ICredentials'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ dotnet#prop('Method', 'string'),
  \ dotnet#prop('PreAuthenticate', 'bool'),
  \ dotnet#prop('Proxy', 'IWebProxy'),
  \ dotnet#prop('Timeout', 'int32'),
  \ dotnet#prop('RequestUri', 'Uri'),
  \ dotnet#prop('UseDefaultCredentials', 'bool'),
  \ ])

call dotnet#class('WebResponse', 'MarshalByRefObject', [ 
  \ dotnet#method('WebResponse(', ')', 'void'),
  \ dotnet#method('WebResponse(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('get_IsFromCache(', ')', 'bool'),
  \ dotnet#method('get_IsMutuallyAuthenticated(', ')', 'bool'),
  \ dotnet#method('get_ContentLength(', ')', 'int64'),
  \ dotnet#method('set_ContentLength(', 'int64 value)', 'void'),
  \ dotnet#method('get_ContentType(', ')', 'string'),
  \ dotnet#method('set_ContentType(', 'string value)', 'void'),
  \ dotnet#method('GetResponseStream(', ')', ''),
  \ dotnet#method('get_ResponseUri(', ')', 'Uri'),
  \ dotnet#method('get_Headers(', ')', ''),
  \ dotnet#prop('IsFromCache', 'bool'),
  \ dotnet#prop('IsMutuallyAuthenticated', 'bool'),
  \ dotnet#prop('ContentLength', 'int64'),
  \ dotnet#prop('ContentType', 'string'),
  \ dotnet#prop('ResponseUri', 'Uri'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ ])

call dotnet#class('FileWebResponse', 'WebResponse', [ 
  \ dotnet#method('FileWebResponse(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_ContentLength(', ')', 'int64'),
  \ dotnet#method('get_ContentType(', ')', 'string'),
  \ dotnet#method('get_Headers(', ')', ''),
  \ dotnet#method('get_ResponseUri(', ')', 'Uri'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('GetResponseStream(', ')', 'Stream'),
  \ dotnet#prop('ContentLength', 'int64'),
  \ dotnet#prop('ContentType', 'string'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ dotnet#prop('ResponseUri', 'Uri'),
  \ ])

call dotnet#class('WebRequestMethods', 'Object', [ 
  \ ])

call dotnet#class('FtpWebRequest', 'WebRequest', [ 
  \ dotnet#method('get_DefaultCachePolicy(', ')', 'static'),
  \ dotnet#method('set_DefaultCachePolicy(', 'class RequestCachePolicy value)', 'static void'),
  \ dotnet#method('get_Method(', ')', 'string'),
  \ dotnet#method('set_Method(', 'string value)', 'void'),
  \ dotnet#method('get_RenameTo(', ')', 'string'),
  \ dotnet#method('set_RenameTo(', 'string value)', 'void'),
  \ dotnet#method('get_Credentials(', ')', ''),
  \ dotnet#method('set_Credentials(', 'class ICredentials value)', 'void'),
  \ dotnet#method('get_RequestUri(', ')', 'Uri'),
  \ dotnet#method('get_Timeout(', ')', 'int32'),
  \ dotnet#method('set_Timeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_ReadWriteTimeout(', ')', 'int32'),
  \ dotnet#method('set_ReadWriteTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_ContentOffset(', ')', 'int64'),
  \ dotnet#method('set_ContentOffset(', 'int64 value)', 'void'),
  \ dotnet#method('get_ContentLength(', ')', 'int64'),
  \ dotnet#method('set_ContentLength(', 'int64 value)', 'void'),
  \ dotnet#method('get_Proxy(', ')', ''),
  \ dotnet#method('set_Proxy(', 'class IWebProxy value)', 'void'),
  \ dotnet#method('get_ConnectionGroupName(', ')', 'string'),
  \ dotnet#method('set_ConnectionGroupName(', 'string value)', 'void'),
  \ dotnet#method('get_ServicePoint(', ')', 'ServicePoint'),
  \ dotnet#method('GetResponse(', ')', 'WebResponse'),
  \ dotnet#method('BeginGetResponse(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndGetResponse(', 'class IAsyncResult asyncResult)', 'WebResponse'),
  \ dotnet#method('GetRequestStream(', ')', 'Stream'),
  \ dotnet#method('BeginGetRequestStream(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndGetRequestStream(', 'class IAsyncResult asyncResult)', 'Stream'),
  \ dotnet#method('Abort(', ')', 'void'),
  \ dotnet#method('get_KeepAlive(', ')', 'bool'),
  \ dotnet#method('set_KeepAlive(', 'bool value)', 'void'),
  \ dotnet#method('get_UseBinary(', ')', 'bool'),
  \ dotnet#method('set_UseBinary(', 'bool value)', 'void'),
  \ dotnet#method('get_UsePassive(', ')', 'bool'),
  \ dotnet#method('set_UsePassive(', 'bool value)', 'void'),
  \ dotnet#method('get_ClientCertificates(', ')', 'X509CertificateCollection'),
  \ dotnet#method('set_ClientCertificates(', 'class X509CertificateCollection value)', 'void'),
  \ dotnet#method('get_EnableSsl(', ')', 'bool'),
  \ dotnet#method('set_EnableSsl(', 'bool value)', 'void'),
  \ dotnet#method('get_Headers(', ')', ''),
  \ dotnet#method('set_Headers(', 'class WebHeaderCollection value)', 'void'),
  \ dotnet#method('get_ContentType(', ')', 'string'),
  \ dotnet#method('set_ContentType(', 'string value)', 'void'),
  \ dotnet#method('get_UseDefaultCredentials(', ')', 'bool'),
  \ dotnet#method('set_UseDefaultCredentials(', 'bool value)', 'void'),
  \ dotnet#method('get_PreAuthenticate(', ')', 'bool'),
  \ dotnet#method('set_PreAuthenticate(', 'bool value)', 'void'),
  \ dotnet#method('FtpWebRequest(', ')', 'static void .'),
  \ dotnet#prop('DefaultCachePolicy', 'RequestCachePolicy'),
  \ dotnet#prop('Method', 'string'),
  \ dotnet#prop('RenameTo', 'string'),
  \ dotnet#prop('Credentials', 'ICredentials'),
  \ dotnet#prop('RequestUri', 'Uri'),
  \ dotnet#prop('Timeout', 'int32'),
  \ dotnet#prop('ReadWriteTimeout', 'int32'),
  \ dotnet#prop('ContentOffset', 'int64'),
  \ dotnet#prop('ContentLength', 'int64'),
  \ dotnet#prop('Proxy', 'IWebProxy'),
  \ dotnet#prop('ConnectionGroupName', 'string'),
  \ dotnet#prop('ServicePoint', 'ServicePoint'),
  \ dotnet#prop('KeepAlive', 'bool'),
  \ dotnet#prop('UseBinary', 'bool'),
  \ dotnet#prop('UsePassive', 'bool'),
  \ dotnet#prop('ClientCertificates', 'X509CertificateCollection'),
  \ dotnet#prop('EnableSsl', 'bool'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ dotnet#prop('ContentType', 'string'),
  \ dotnet#prop('UseDefaultCredentials', 'bool'),
  \ dotnet#prop('PreAuthenticate', 'bool'),
  \ ])

call dotnet#class('FtpWebResponse', 'WebResponse', [ 
  \ dotnet#method('GetResponseStream(', ')', 'Stream'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('get_ContentLength(', ')', 'int64'),
  \ dotnet#method('get_Headers(', ')', ''),
  \ dotnet#method('get_ResponseUri(', ')', 'Uri'),
  \ dotnet#method('get_StatusCode(', ')', 'FtpStatusCode'),
  \ dotnet#method('get_StatusDescription(', ')', 'string'),
  \ dotnet#method('get_LastModified(', ')', 'DateTime'),
  \ dotnet#method('get_BannerMessage(', ')', 'string'),
  \ dotnet#method('get_WelcomeMessage(', ')', 'string'),
  \ dotnet#method('get_ExitMessage(', ')', 'string'),
  \ dotnet#prop('ContentLength', 'int64'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ dotnet#prop('ResponseUri', 'Uri'),
  \ dotnet#prop('StatusCode', 'FtpStatusCode'),
  \ dotnet#prop('StatusDescription', 'string'),
  \ dotnet#prop('LastModified', 'DateTime'),
  \ dotnet#prop('BannerMessage', 'string'),
  \ dotnet#prop('WelcomeMessage', 'string'),
  \ dotnet#prop('ExitMessage', 'string'),
  \ ])

call dotnet#class('GlobalProxySelection', 'Object', [ 
  \ dotnet#method('get_Select(', ')', 'static IWebProxy'),
  \ dotnet#method('set_Select(', 'class IWebProxy value)', 'static void'),
  \ dotnet#method('GetEmptyWebProxy(', ')', 'static IWebProxy'),
  \ dotnet#method('GlobalProxySelection(', ')', 'void'),
  \ dotnet#prop('Select', 'IWebProxy'),
  \ ])

call dotnet#class('HttpListenerBasicIdentity', 'GenericIdentity', [ 
  \ dotnet#method('HttpListenerBasicIdentity(', 'string username, string password)', 'void'),
  \ dotnet#method('get_Password(', ')', 'string'),
  \ dotnet#prop('Password', 'string'),
  \ ])

call dotnet#class('HttpListener', 'Object', [ 
  \ dotnet#method('HttpListener(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class HttpListenerRequest request)', ''),
  \ dotnet#method('BeginInvoke(', 'class HttpListenerRequest request, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ dotnet#method('HttpListener(', ')', 'void'),
  \ dotnet#method('get_AuthenticationSchemeSelHttpListenerDelegate(', ')', 'AuthenticationSchemeSelHttpListener'),
  \ dotnet#method('set_AuthenticationSchemeSelHttpListenerDelegate(', 'class AuthenticationSchemeSelHttpListener value)', 'void'),
  \ dotnet#method('get_ExtendedProtectionSelHttpListenerDelegate(', ')', 'HttpListener/ExtendedProtectionSelHttpListener'),
  \ dotnet#method('set_ExtendedProtectionSelHttpListenerDelegate(', 'class HttpListener/ExtendedProtectionSelHttpListener value)', 'void'),
  \ dotnet#method('get_AuthenticationSchemes(', ')', 'AuthenticationSchemes'),
  \ dotnet#method('set_AuthenticationSchemes(', 'AuthenticationSchemes value)', 'void'),
  \ dotnet#method('get_ExtendedProtectionPolicy(', ')', 'ExtendedProtectionPolicy'),
  \ dotnet#method('set_ExtendedProtectionPolicy(', 'class ExtendedProtectionPolicy value)', 'void'),
  \ dotnet#method('get_DefaultServiceNames(', ')', 'ServiceNameCollection'),
  \ dotnet#method('get_Realm(', ')', 'string'),
  \ dotnet#method('set_Realm(', 'string value)', 'void'),
  \ dotnet#method('get_IsSupported(', ')', 'static bool'),
  \ dotnet#method('get_IsListening(', ')', 'bool'),
  \ dotnet#method('get_IgnoreWriteExceptions(', ')', 'bool'),
  \ dotnet#method('set_IgnoreWriteExceptions(', 'bool value)', 'void'),
  \ dotnet#method('get_UnsafeConnectionNtlmAuthentication(', ')', 'bool'),
  \ dotnet#method('set_UnsafeConnectionNtlmAuthentication(', 'bool value)', 'void'),
  \ dotnet#method('get_Prefixes(', ')', 'HttpListenerPrefixCollection'),
  \ dotnet#method('Start(', ')', 'void'),
  \ dotnet#method('Stop(', ')', 'void'),
  \ dotnet#method('Abort(', ')', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('GetContext(', ')', 'HttpListenerContext'),
  \ dotnet#method('BeginGetContext(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndGetContext(', 'class IAsyncResult asyncResult)', 'HttpListenerContext'),
  \ dotnet#method('HttpListener(', ')', 'static void .'),
  \ dotnet#prop('AuthenticationSchemeSelHttpListenerDelegate', 'AuthenticationSchemeSelHttpListener'),
  \ dotnet#prop('ExtendedProtectionSelHttpListenerDelegate', 'HttpListener/ExtendedProtectionSelHttpListener'),
  \ dotnet#prop('AuthenticationSchemes', 'AuthenticationSchemes'),
  \ dotnet#prop('ExtendedProtectionPolicy', 'ExtendedProtectionPolicy'),
  \ dotnet#prop('DefaultServiceNames', 'ServiceNameCollection'),
  \ dotnet#prop('Realm', 'string'),
  \ dotnet#prop('IsSupported', 'bool'),
  \ dotnet#prop('IsListening', 'bool'),
  \ dotnet#prop('IgnoreWriteExceptions', 'bool'),
  \ dotnet#prop('UnsafeConnectionNtlmAuthentication', 'bool'),
  \ dotnet#prop('Prefixes', 'HttpListenerPrefixCollection'),
  \ ])

call dotnet#class('HttpListenerContext', 'Object', [ 
  \ dotnet#method('get_Request(', ')', 'HttpListenerRequest'),
  \ dotnet#method('get_Response(', ')', 'HttpListenerResponse'),
  \ dotnet#method('get_User(', ')', 'IPrincipal'),
  \ dotnet#prop('Request', 'HttpListenerRequest'),
  \ dotnet#prop('Response', 'HttpListenerResponse'),
  \ dotnet#prop('User', 'IPrincipal'),
  \ ])

call dotnet#class('HttpListenerException', 'Win32Exception', [ 
  \ dotnet#method('HttpListenerException(', ')', 'void'),
  \ dotnet#method('HttpListenerException(', 'int32 errorCode)', 'void'),
  \ dotnet#method('HttpListenerException(', 'int32 errorCode, string message)', 'void'),
  \ dotnet#method('HttpListenerException(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_ErrorCode(', ')', 'int32'),
  \ dotnet#prop('ErrorCode', 'int32'),
  \ ])

call dotnet#class('HttpListenerPrefixCollection', 'Object', [ 
  \ dotnet#method('CopyTo(', 'class Array array, int32 offset)', 'void'),
  \ dotnet#method('CopyTo(', 'string[] array, int32 offset)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Add(', 'string uriPrefix)', 'void'),
  \ dotnet#method('Contains(', 'string uriPrefix)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Remove(', 'string uriPrefix)', 'bool'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ ])

call dotnet#class('HttpListenerRequest', 'Object', [ 
  \ dotnet#method('get_RequestTraceIdentifier(', ')', 'Guid'),
  \ dotnet#method('get_AcceptTypes(', ')', 'string[]'),
  \ dotnet#method('get_ContentEncoding(', ')', 'Encoding'),
  \ dotnet#method('get_ContentLength64(', ')', 'int64'),
  \ dotnet#method('get_ContentType(', ')', 'string'),
  \ dotnet#method('get_Headers(', ')', 'NameValueCollection'),
  \ dotnet#method('get_HttpMethod(', ')', 'string'),
  \ dotnet#method('get_InputStream(', ')', 'Stream'),
  \ dotnet#method('get_IsAuthenticated(', ')', 'bool'),
  \ dotnet#method('get_IsLocal(', ')', 'bool'),
  \ dotnet#method('get_IsSecureConnection(', ')', 'bool'),
  \ dotnet#method('get_QueryString(', ')', 'NameValueCollection'),
  \ dotnet#method('get_RawUrl(', ')', 'string'),
  \ dotnet#method('get_ServiceName(', ')', 'string'),
  \ dotnet#method('get_Url(', ')', 'Uri'),
  \ dotnet#method('get_UrlReferrer(', ')', 'Uri'),
  \ dotnet#method('get_UserAgent(', ')', 'string'),
  \ dotnet#method('get_UserHostAddress(', ')', 'string'),
  \ dotnet#method('get_UserHostName(', ')', 'string'),
  \ dotnet#method('get_UserLanguages(', ')', 'string[]'),
  \ dotnet#method('get_ClientCertificateError(', ')', 'int32'),
  \ dotnet#method('GetClientCertificate(', ')', 'X509Certificate2'),
  \ dotnet#method('BeginGetClientCertificate(', 'class AsyncCallback requestCallback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndGetClientCertificate(', 'class IAsyncResult asyncResult)', 'X509Certificate2'),
  \ dotnet#method('get_TransportContext(', ')', 'TransportContext'),
  \ dotnet#method('get_Cookies(', ')', 'CookieCollection'),
  \ dotnet#method('get_ProtocolVersion(', ')', 'Version'),
  \ dotnet#method('get_HasEntityBody(', ')', 'bool'),
  \ dotnet#method('get_KeepAlive(', ')', 'bool'),
  \ dotnet#method('get_RemoteEndPoint(', ')', 'IPEndPoint'),
  \ dotnet#method('get_LocalEndPoint(', ')', 'IPEndPoint'),
  \ dotnet#method('set_ServiceName(', 'string value)', 'void'),
  \ dotnet#prop('RequestTraceIdentifier', 'Guid'),
  \ dotnet#prop('AcceptTypes', 'string[]'),
  \ dotnet#prop('ContentEncoding', 'Encoding'),
  \ dotnet#prop('ContentLength64', 'int64'),
  \ dotnet#prop('ContentType', 'string'),
  \ dotnet#prop('Headers', 'NameValueCollection'),
  \ dotnet#prop('HttpMethod', 'string'),
  \ dotnet#prop('InputStream', 'Stream'),
  \ dotnet#prop('IsAuthenticated', 'bool'),
  \ dotnet#prop('IsLocal', 'bool'),
  \ dotnet#prop('IsSecureConnection', 'bool'),
  \ dotnet#prop('QueryString', 'NameValueCollection'),
  \ dotnet#prop('RawUrl', 'string'),
  \ dotnet#prop('ServiceName', 'string'),
  \ dotnet#prop('Url', 'Uri'),
  \ dotnet#prop('UrlReferrer', 'Uri'),
  \ dotnet#prop('UserAgent', 'string'),
  \ dotnet#prop('UserHostAddress', 'string'),
  \ dotnet#prop('UserHostName', 'string'),
  \ dotnet#prop('UserLanguages', 'string[]'),
  \ dotnet#prop('ClientCertificateError', 'int32'),
  \ dotnet#prop('TransportContext', 'TransportContext'),
  \ dotnet#prop('Cookies', 'CookieCollection'),
  \ dotnet#prop('ProtocolVersion', 'Version'),
  \ dotnet#prop('HasEntityBody', 'bool'),
  \ dotnet#prop('KeepAlive', 'bool'),
  \ dotnet#prop('RemoteEndPoint', 'IPEndPoint'),
  \ dotnet#prop('LocalEndPoint', 'IPEndPoint'),
  \ ])

call dotnet#class('HttpListenerResponse', 'Object', [ 
  \ dotnet#method('get_ContentEncoding(', ')', 'Encoding'),
  \ dotnet#method('set_ContentEncoding(', 'class Encoding value)', 'void'),
  \ dotnet#method('get_ContentType(', ')', 'string'),
  \ dotnet#method('set_ContentType(', 'string value)', 'void'),
  \ dotnet#method('get_OutputStream(', ')', 'Stream'),
  \ dotnet#method('get_RedirectLocation(', ')', 'string'),
  \ dotnet#method('set_RedirectLocation(', 'string value)', 'void'),
  \ dotnet#method('get_StatusCode(', ')', 'int32'),
  \ dotnet#method('set_StatusCode(', 'int32 value)', 'void'),
  \ dotnet#method('get_StatusDescription(', ')', 'string'),
  \ dotnet#method('set_StatusDescription(', 'string value)', 'void'),
  \ dotnet#method('get_Cookies(', ')', 'CookieCollection'),
  \ dotnet#method('set_Cookies(', 'class CookieCollection value)', 'void'),
  \ dotnet#method('CopyFrom(', 'class HttpListenerResponse templateResponse)', 'void'),
  \ dotnet#method('get_SendChunked(', ')', 'bool'),
  \ dotnet#method('set_SendChunked(', 'bool value)', 'void'),
  \ dotnet#method('get_KeepAlive(', ')', 'bool'),
  \ dotnet#method('set_KeepAlive(', 'bool value)', 'void'),
  \ dotnet#method('get_Headers(', ')', 'WebHeaderCollection'),
  \ dotnet#method('set_Headers(', 'class WebHeaderCollection value)', 'void'),
  \ dotnet#method('AddHeader(', 'string name, string value)', 'void'),
  \ dotnet#method('AppendHeader(', 'string name, string value)', 'void'),
  \ dotnet#method('Redirect(', 'string url)', 'void'),
  \ dotnet#method('AppendCookie(', 'class Cookie cookie)', 'void'),
  \ dotnet#method('SetCookie(', 'class Cookie cookie)', 'void'),
  \ dotnet#method('get_ContentLength64(', ')', 'int64'),
  \ dotnet#method('set_ContentLength64(', 'int64 value)', 'void'),
  \ dotnet#method('get_ProtocolVersion(', ')', 'Version'),
  \ dotnet#method('set_ProtocolVersion(', 'class Version value)', 'void'),
  \ dotnet#method('Abort(', ')', 'void'),
  \ dotnet#method('Close(', 'uint8[] responseEntity, bool willBlock)', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('HttpListenerResponse(', ')', 'void'),
  \ dotnet#method('HttpListenerResponse(', ')', 'static void .'),
  \ dotnet#prop('ContentEncoding', 'Encoding'),
  \ dotnet#prop('ContentType', 'string'),
  \ dotnet#prop('OutputStream', 'Stream'),
  \ dotnet#prop('RedirectLocation', 'string'),
  \ dotnet#prop('StatusCode', 'int32'),
  \ dotnet#prop('StatusDescription', 'string'),
  \ dotnet#prop('Cookies', 'CookieCollection'),
  \ dotnet#prop('SendChunked', 'bool'),
  \ dotnet#prop('KeepAlive', 'bool'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ dotnet#prop('ContentLength64', 'int64'),
  \ dotnet#prop('ProtocolVersion', 'Version'),
  \ ])

call dotnet#class('HttpVersion', 'Object', [ 
  \ dotnet#method('HttpVersion(', ')', 'void'),
  \ dotnet#method('HttpVersion(', ')', 'static void .'),
  \ ])

call dotnet#class('HttpWebRequest', 'WebRequest', [ 
  \ dotnet#method('get_AllowAutoRedirect(', ')', 'bool'),
  \ dotnet#method('set_AllowAutoRedirect(', 'bool value)', 'void'),
  \ dotnet#method('get_AllowWriteStreamBuffering(', ')', 'bool'),
  \ dotnet#method('set_AllowWriteStreamBuffering(', 'bool value)', 'void'),
  \ dotnet#method('get_HaveResponse(', ')', 'bool'),
  \ dotnet#method('get_KeepAlive(', ')', 'bool'),
  \ dotnet#method('set_KeepAlive(', 'bool value)', 'void'),
  \ dotnet#method('get_Pipelined(', ')', 'bool'),
  \ dotnet#method('set_Pipelined(', 'bool value)', 'void'),
  \ dotnet#method('get_PreAuthenticate(', ')', 'bool'),
  \ dotnet#method('set_PreAuthenticate(', 'bool value)', 'void'),
  \ dotnet#method('get_UnsafeAuthenticatedConnectionSharing(', ')', 'bool'),
  \ dotnet#method('set_UnsafeAuthenticatedConnectionSharing(', 'bool value)', 'void'),
  \ dotnet#method('get_SendChunked(', ')', 'bool'),
  \ dotnet#method('set_SendChunked(', 'bool value)', 'void'),
  \ dotnet#method('get_AutomaticDecompression(', ')', 'DecompressionMethods'),
  \ dotnet#method('set_AutomaticDecompression(', 'DecompressionMethods value)', 'void'),
  \ dotnet#method('get_DefaultCachePolicy(', ')', 'static'),
  \ dotnet#method('set_DefaultCachePolicy(', 'class RequestCachePolicy value)', 'static void'),
  \ dotnet#method('get_DefaultMaximumResponseHeadersLength(', ')', 'static int32'),
  \ dotnet#method('set_DefaultMaximumResponseHeadersLength(', 'int32 value)', 'static void'),
  \ dotnet#method('get_DefaultMaximumErrorResponseLength(', ')', 'static int32'),
  \ dotnet#method('set_DefaultMaximumErrorResponseLength(', 'int32 value)', 'static void'),
  \ dotnet#method('get_MaximumResponseHeadersLength(', ')', 'int32'),
  \ dotnet#method('set_MaximumResponseHeadersLength(', 'int32 value)', 'void'),
  \ dotnet#method('get_ClientCertificates(', ')', 'X509CertificateCollection'),
  \ dotnet#method('set_ClientCertificates(', 'class X509CertificateCollection value)', 'void'),
  \ dotnet#method('get_CookieContainer(', ')', 'CookieContainer'),
  \ dotnet#method('set_CookieContainer(', 'class CookieContainer value)', 'void'),
  \ dotnet#method('get_RequestUri(', ')', 'Uri'),
  \ dotnet#method('get_ContentLength(', ')', 'int64'),
  \ dotnet#method('set_ContentLength(', 'int64 value)', 'void'),
  \ dotnet#method('get_Timeout(', ')', 'int32'),
  \ dotnet#method('set_Timeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_ReadWriteTimeout(', ')', 'int32'),
  \ dotnet#method('set_ReadWriteTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('BeginGetRequestStream(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndGetRequestStream(', 'class IAsyncResult asyncResult)', 'Stream'),
  \ dotnet#method('EndGetRequestStream(', 'class IAsyncResult asyncResult, [out] TransportContext& context)', 'Stream'),
  \ dotnet#method('GetRequestStream(', ')', 'Stream'),
  \ dotnet#method('GetRequestStream(', '[out] TransportContext& context)', 'Stream'),
  \ dotnet#method('BeginGetResponse(', 'class AsyncCallback callback, object state)', 'IAsyncResult'),
  \ dotnet#method('EndGetResponse(', 'class IAsyncResult asyncResult)', 'WebResponse'),
  \ dotnet#method('GetResponse(', ')', 'WebResponse'),
  \ dotnet#method('get_Address(', ')', 'Uri'),
  \ dotnet#method('get_ContinueDelegate(', ')', 'HttpContinueDelegate'),
  \ dotnet#method('set_ContinueDelegate(', 'class HttpContinueDelegate value)', 'void'),
  \ dotnet#method('get_ServicePoint(', ')', 'ServicePoint'),
  \ dotnet#method('get_Host(', ')', 'string'),
  \ dotnet#method('set_Host(', 'string value)', 'void'),
  \ dotnet#method('get_MaximumAutomaticRedirections(', ')', 'int32'),
  \ dotnet#method('set_MaximumAutomaticRedirections(', 'int32 value)', 'void'),
  \ dotnet#method('get_Method(', ')', 'string'),
  \ dotnet#method('set_Method(', 'string value)', 'void'),
  \ dotnet#method('get_Credentials(', ')', ''),
  \ dotnet#method('set_Credentials(', 'class ICredentials value)', 'void'),
  \ dotnet#method('get_UseDefaultCredentials(', ')', 'bool'),
  \ dotnet#method('set_UseDefaultCredentials(', 'bool value)', 'void'),
  \ dotnet#method('get_ConnectionGroupName(', ')', 'string'),
  \ dotnet#method('set_ConnectionGroupName(', 'string value)', 'void'),
  \ dotnet#method('get_Headers(', ')', ''),
  \ dotnet#method('set_Headers(', 'class WebHeaderCollection value)', 'void'),
  \ dotnet#method('get_Proxy(', ')', ''),
  \ dotnet#method('set_Proxy(', 'class IWebProxy value)', 'void'),
  \ dotnet#method('get_ProtocolVersion(', ')', 'Version'),
  \ dotnet#method('set_ProtocolVersion(', 'class Version value)', 'void'),
  \ dotnet#method('get_ContentType(', ')', 'string'),
  \ dotnet#method('set_ContentType(', 'string value)', 'void'),
  \ dotnet#method('get_MediaType(', ')', 'string'),
  \ dotnet#method('set_MediaType(', 'string value)', 'void'),
  \ dotnet#method('get_TransferEncoding(', ')', 'string'),
  \ dotnet#method('set_TransferEncoding(', 'string value)', 'void'),
  \ dotnet#method('get_Connection(', ')', 'string'),
  \ dotnet#method('set_Connection(', 'string value)', 'void'),
  \ dotnet#method('get_Accept(', ')', 'string'),
  \ dotnet#method('set_Accept(', 'string value)', 'void'),
  \ dotnet#method('get_Referer(', ')', 'string'),
  \ dotnet#method('set_Referer(', 'string value)', 'void'),
  \ dotnet#method('get_UserAgent(', ')', 'string'),
  \ dotnet#method('set_UserAgent(', 'string value)', 'void'),
  \ dotnet#method('get_Expect(', ')', 'string'),
  \ dotnet#method('set_Expect(', 'string value)', 'void'),
  \ dotnet#method('get_IfModifiedSince(', ')', 'DateTime'),
  \ dotnet#method('set_IfModifiedSince(', 'DateTime value)', 'void'),
  \ dotnet#method('get_Date(', ')', 'DateTime'),
  \ dotnet#method('set_Date(', 'DateTime value)', 'void'),
  \ dotnet#method('Abort(', ')', 'void'),
  \ dotnet#method('HttpWebRequest(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('AddRange(', 'int32 from, int32 to)', 'void'),
  \ dotnet#method('AddRange(', 'int64 from, int64 to)', 'void'),
  \ dotnet#method('AddRange(', 'int32 range)', 'void'),
  \ dotnet#method('AddRange(', 'int64 range)', 'void'),
  \ dotnet#method('AddRange(', 'string rangeSpecifier, int32 from, int32 to)', 'void'),
  \ dotnet#method('AddRange(', 'string rangeSpecifier, int64 from, int64 to)', 'void'),
  \ dotnet#method('AddRange(', 'string rangeSpecifier, int32 range)', 'void'),
  \ dotnet#method('AddRange(', 'string rangeSpecifier, int64 range)', 'void'),
  \ dotnet#method('HttpWebRequest(', ')', 'static void .'),
  \ dotnet#prop('AllowAutoRedirect', 'bool'),
  \ dotnet#prop('AllowWriteStreamBuffering', 'bool'),
  \ dotnet#prop('HaveResponse', 'bool'),
  \ dotnet#prop('KeepAlive', 'bool'),
  \ dotnet#prop('Pipelined', 'bool'),
  \ dotnet#prop('PreAuthenticate', 'bool'),
  \ dotnet#prop('UnsafeAuthenticatedConnectionSharing', 'bool'),
  \ dotnet#prop('SendChunked', 'bool'),
  \ dotnet#prop('AutomaticDecompression', 'DecompressionMethods'),
  \ dotnet#prop('DefaultCachePolicy', 'RequestCachePolicy'),
  \ dotnet#prop('DefaultMaximumResponseHeadersLength', 'int32'),
  \ dotnet#prop('DefaultMaximumErrorResponseLength', 'int32'),
  \ dotnet#prop('MaximumResponseHeadersLength', 'int32'),
  \ dotnet#prop('ClientCertificates', 'X509CertificateCollection'),
  \ dotnet#prop('CookieContainer', 'CookieContainer'),
  \ dotnet#prop('RequestUri', 'Uri'),
  \ dotnet#prop('ContentLength', 'int64'),
  \ dotnet#prop('Timeout', 'int32'),
  \ dotnet#prop('ReadWriteTimeout', 'int32'),
  \ dotnet#prop('Address', 'Uri'),
  \ dotnet#prop('ContinueDelegate', 'HttpContinueDelegate'),
  \ dotnet#prop('ServicePoint', 'ServicePoint'),
  \ dotnet#prop('Host', 'string'),
  \ dotnet#prop('MaximumAutomaticRedirections', 'int32'),
  \ dotnet#prop('Method', 'string'),
  \ dotnet#prop('Credentials', 'ICredentials'),
  \ dotnet#prop('UseDefaultCredentials', 'bool'),
  \ dotnet#prop('ConnectionGroupName', 'string'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ dotnet#prop('Proxy', 'IWebProxy'),
  \ dotnet#prop('ProtocolVersion', 'Version'),
  \ dotnet#prop('ContentType', 'string'),
  \ dotnet#prop('MediaType', 'string'),
  \ dotnet#prop('TransferEncoding', 'string'),
  \ dotnet#prop('Connection', 'string'),
  \ dotnet#prop('Accept', 'string'),
  \ dotnet#prop('Referer', 'string'),
  \ dotnet#prop('UserAgent', 'string'),
  \ dotnet#prop('Expect', 'string'),
  \ dotnet#prop('IfModifiedSince', 'DateTime'),
  \ dotnet#prop('Date', 'DateTime'),
  \ ])

call dotnet#class('HttpWebResponse', 'WebResponse', [ 
  \ dotnet#method('get_IsMutuallyAuthenticated(', ')', 'bool'),
  \ dotnet#method('get_Cookies(', ')', 'CookieCollection'),
  \ dotnet#method('set_Cookies(', 'class CookieCollection value)', 'void'),
  \ dotnet#method('get_Headers(', ')', ''),
  \ dotnet#method('get_ContentLength(', ')', 'int64'),
  \ dotnet#method('get_ContentEncoding(', ')', 'string'),
  \ dotnet#method('get_ContentType(', ')', 'string'),
  \ dotnet#method('get_CharacterSet(', ')', 'string'),
  \ dotnet#method('get_Server(', ')', 'string'),
  \ dotnet#method('get_LastModified(', ')', 'DateTime'),
  \ dotnet#method('get_StatusCode(', ')', 'HttpStatusCode'),
  \ dotnet#method('get_StatusDescription(', ')', 'string'),
  \ dotnet#method('get_ProtocolVersion(', ')', 'Version'),
  \ dotnet#method('GetResponseStream(', ')', 'Stream'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('HttpWebResponse(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetResponseHeader(', 'string headerName)', 'string'),
  \ dotnet#method('get_ResponseUri(', ')', 'Uri'),
  \ dotnet#method('get_Method(', ')', 'string'),
  \ dotnet#prop('IsMutuallyAuthenticated', 'bool'),
  \ dotnet#prop('Cookies', 'CookieCollection'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ dotnet#prop('ContentLength', 'int64'),
  \ dotnet#prop('ContentEncoding', 'string'),
  \ dotnet#prop('ContentType', 'string'),
  \ dotnet#prop('CharacterSet', 'string'),
  \ dotnet#prop('Server', 'string'),
  \ dotnet#prop('LastModified', 'DateTime'),
  \ dotnet#prop('StatusCode', 'HttpStatusCode'),
  \ dotnet#prop('StatusDescription', 'string'),
  \ dotnet#prop('ProtocolVersion', 'Version'),
  \ dotnet#prop('ResponseUri', 'Uri'),
  \ dotnet#prop('Method', 'string'),
  \ ])

call dotnet#class('HttpContinueDelegate', 'MulticastDelegate', [ 
  \ dotnet#method('HttpContinueDelegate(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'int32 StatusCode, WebHeaderCollection httpHeaders)', 'void'),
  \ dotnet#method('BeginInvoke(', 'int32 StatusCode, WebHeaderCollection httpHeaders, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('IPAddress', 'Object', [ 
  \ dotnet#method('IPAddress(', 'int64 newAddress)', 'void'),
  \ dotnet#method('IPAddress(', 'uint8[] address, int64 scopeid)', 'void'),
  \ dotnet#method('IPAddress(', 'uint8[] address)', 'void'),
  \ dotnet#method('TryParse(', 'string ipString, [out] IPAddress& address)', 'static bool'),
  \ dotnet#method('Parse(', 'string ipString)', 'static IPAddress'),
  \ dotnet#method('get_Address(', ')', 'int64'),
  \ dotnet#method('set_Address(', 'int64 value)', 'void'),
  \ dotnet#method('GetAddressBytes(', ')', 'uint8[]'),
  \ dotnet#method('get_AddressFamily(', ')', 'AddressFamily'),
  \ dotnet#method('get_ScopeId(', ')', 'int64'),
  \ dotnet#method('set_ScopeId(', 'int64 value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('HostToNetworkOrder(', 'int64 host)', 'static int64'),
  \ dotnet#method('HostToNetworkOrder(', 'int32 host)', 'static int32'),
  \ dotnet#method('HostToNetworkOrder(', 'int16 host)', 'static int16'),
  \ dotnet#method('NetworkToHostOrder(', 'int64 network)', 'static int64'),
  \ dotnet#method('NetworkToHostOrder(', 'int32 network)', 'static int32'),
  \ dotnet#method('NetworkToHostOrder(', 'int16 network)', 'static int16'),
  \ dotnet#method('IsLoopback(', 'class IPAddress address)', 'static bool'),
  \ dotnet#method('get_IsIPv6Multicast(', ')', 'bool'),
  \ dotnet#method('get_IsIPv6LinkLocal(', ')', 'bool'),
  \ dotnet#method('get_IsIPv6SiteLocal(', ')', 'bool'),
  \ dotnet#method('get_IsIPv6Teredo(', ')', 'bool'),
  \ dotnet#method('Equals(', 'object comparand)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('IPAddress(', ')', 'static void .'),
  \ dotnet#prop('Address', 'int64'),
  \ dotnet#prop('AddressFamily', 'AddressFamily'),
  \ dotnet#prop('ScopeId', 'int64'),
  \ dotnet#prop('IsIPv6Multicast', 'bool'),
  \ dotnet#prop('IsIPv6LinkLocal', 'bool'),
  \ dotnet#prop('IsIPv6SiteLocal', 'bool'),
  \ dotnet#prop('IsIPv6Teredo', 'bool'),
  \ ])

call dotnet#class('IPEndPoint', 'EndPoint', [ 
  \ dotnet#method('get_AddressFamily(', ')', ''),
  \ dotnet#method('IPEndPoint(', 'int64 address, int32 port)', 'void'),
  \ dotnet#method('IPEndPoint(', 'class IPAddress address, int32 port)', 'void'),
  \ dotnet#method('get_Address(', ')', 'IPAddress'),
  \ dotnet#method('set_Address(', 'class IPAddress value)', 'void'),
  \ dotnet#method('get_Port(', ')', 'int32'),
  \ dotnet#method('set_Port(', 'int32 value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Serialize(', ')', 'SocketAddress'),
  \ dotnet#method('Create(', 'class SocketAddress socketAddress)', 'EndPoint'),
  \ dotnet#method('Equals(', 'object comparand)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('IPEndPoint(', ')', 'static void .'),
  \ dotnet#prop('AddressFamily', 'AddressFamily'),
  \ dotnet#prop('Address', 'IPAddress'),
  \ dotnet#prop('Port', 'int32'),
  \ ])

call dotnet#class('IPHostEntry', 'Object', [ 
  \ dotnet#method('get_HostName(', ')', 'string'),
  \ dotnet#method('set_HostName(', 'string value)', 'void'),
  \ dotnet#method('get_Aliases(', ')', 'string[]'),
  \ dotnet#method('set_Aliases(', 'string[] value)', 'void'),
  \ dotnet#method('get_AddressList(', ')', 'IPAddress[]'),
  \ dotnet#method('set_AddressList(', 'class IPAddress[] value)', 'void'),
  \ dotnet#method('IPHostEntry(', ')', 'void'),
  \ dotnet#prop('HostName', 'string'),
  \ dotnet#prop('Aliases', 'string[]'),
  \ dotnet#prop('AddressList', 'IPAddress[]'),
  \ ])

call dotnet#class('ProtocolViolationException', 'InvalidOperationException', [ 
  \ dotnet#method('ProtocolViolationException(', ')', 'void'),
  \ dotnet#method('ProtocolViolationException(', 'string message)', 'void'),
  \ dotnet#method('ProtocolViolationException(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ ])

call dotnet#class('TransportContext', 'Object', [ 
  \ dotnet#method('GetChannelBinding(', 'ChannelBindingKind kind)', 'abstract'),
  \ dotnet#method('TransportContext(', ')', 'void'),
  \ ])

call dotnet#class('BindIPEndPoint', 'MulticastDelegate', [ 
  \ dotnet#method('BindIPEndPoint(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class ServicePoint servicePoint, IPEndPoint remoteEndPoint, int32 retryCount)', ''),
  \ dotnet#method('BeginInvoke(', 'class ServicePoint servicePoint, IPEndPoint remoteEndPoint, int32 retryCount, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('ServicePoint', 'Object', [ 
  \ dotnet#method('get_BindIPEndPointDelegate(', ')', 'BindIPEndPoint'),
  \ dotnet#method('set_BindIPEndPointDelegate(', 'class BindIPEndPoint value)', 'void'),
  \ dotnet#method('get_ConnectionLeaseTimeout(', ')', 'int32'),
  \ dotnet#method('set_ConnectionLeaseTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_Address(', ')', 'Uri'),
  \ dotnet#method('get_MaxIdleTime(', ')', 'int32'),
  \ dotnet#method('set_MaxIdleTime(', 'int32 value)', 'void'),
  \ dotnet#method('get_UseNagleAlgorithm(', ')', 'bool'),
  \ dotnet#method('set_UseNagleAlgorithm(', 'bool value)', 'void'),
  \ dotnet#method('get_ReceiveBufferSize(', ')', 'int32'),
  \ dotnet#method('set_ReceiveBufferSize(', 'int32 value)', 'void'),
  \ dotnet#method('set_Expect100Continue(', 'bool value)', 'void'),
  \ dotnet#method('get_Expect100Continue(', ')', 'bool'),
  \ dotnet#method('get_IdleSince(', ')', 'DateTime'),
  \ dotnet#method('get_ProtocolVersion(', ')', ''),
  \ dotnet#method('get_ConnectionName(', ')', 'string'),
  \ dotnet#method('CloseConnectionGroup(', 'string connectionGroupName)', 'bool'),
  \ dotnet#method('get_ConnectionLimit(', ')', 'int32'),
  \ dotnet#method('set_ConnectionLimit(', 'int32 value)', 'void'),
  \ dotnet#method('get_CurrentConnections(', ')', 'int32'),
  \ dotnet#method('get_Certificate(', ')', 'X509Certificate'),
  \ dotnet#method('get_ClientCertificate(', ')', 'X509Certificate'),
  \ dotnet#method('get_SupportsPipelining(', ')', 'bool'),
  \ dotnet#method('SetTcpKeepAlive(', 'bool enabled, int32 keepAliveTime, int32 keepAliveInterval)', 'void'),
  \ dotnet#method('ServicePoint(', ')', 'static void .'),
  \ dotnet#prop('BindIPEndPointDelegate', 'BindIPEndPoint'),
  \ dotnet#prop('ConnectionLeaseTimeout', 'int32'),
  \ dotnet#prop('Address', 'Uri'),
  \ dotnet#prop('MaxIdleTime', 'int32'),
  \ dotnet#prop('UseNagleAlgorithm', 'bool'),
  \ dotnet#prop('ReceiveBufferSize', 'int32'),
  \ dotnet#prop('Expect100Continue', 'bool'),
  \ dotnet#prop('IdleSince', 'DateTime'),
  \ dotnet#prop('ProtocolVersion', 'Version'),
  \ dotnet#prop('ConnectionName', 'string'),
  \ dotnet#prop('ConnectionLimit', 'int32'),
  \ dotnet#prop('CurrentConnections', 'int32'),
  \ dotnet#prop('Certificate', 'X509Certificate'),
  \ dotnet#prop('ClientCertificate', 'X509Certificate'),
  \ dotnet#prop('SupportsPipelining', 'bool'),
  \ ])

call dotnet#class('ServicePointManager', 'Object', [ 
  \ dotnet#method('get_SecurityProtocol(', ')', 'static'),
  \ dotnet#method('set_SecurityProtocol(', 'SecurityProtocolType value)', 'static void'),
  \ dotnet#method('get_MaxServicePoints(', ')', 'static int32'),
  \ dotnet#method('set_MaxServicePoints(', 'int32 value)', 'static void'),
  \ dotnet#method('get_DefaultConnectionLimit(', ')', 'static int32'),
  \ dotnet#method('set_DefaultConnectionLimit(', 'int32 value)', 'static void'),
  \ dotnet#method('get_MaxServicePointIdleTime(', ')', 'static int32'),
  \ dotnet#method('set_MaxServicePointIdleTime(', 'int32 value)', 'static void'),
  \ dotnet#method('get_UseNagleAlgorithm(', ')', 'static bool'),
  \ dotnet#method('set_UseNagleAlgorithm(', 'bool value)', 'static void'),
  \ dotnet#method('get_Expect100Continue(', ')', 'static bool'),
  \ dotnet#method('set_Expect100Continue(', 'bool value)', 'static void'),
  \ dotnet#method('get_EnableDnsRoundRobin(', ')', 'static bool'),
  \ dotnet#method('set_EnableDnsRoundRobin(', 'bool value)', 'static void'),
  \ dotnet#method('get_DnsRefreshTimeout(', ')', 'static int32'),
  \ dotnet#method('set_DnsRefreshTimeout(', 'int32 value)', 'static void'),
  \ dotnet#method('get_CertificatePolicy(', ')', 'static'),
  \ dotnet#method('set_CertificatePolicy(', 'class ICertificatePolicy value)', 'static void'),
  \ dotnet#method('get_ServerCertificateValidationCallback(', ')', 'static'),
  \ dotnet#method('set_ServerCertificateValidationCallback(', 'class RemoteCertificateValidationCallback value)', 'static void'),
  \ dotnet#method('get_CheckCertificateRevocationList(', ')', 'static bool'),
  \ dotnet#method('set_CheckCertificateRevocationList(', 'bool value)', 'static void'),
  \ dotnet#method('get_EncryptionPolicy(', ')', 'static'),
  \ dotnet#method('FindServicePoint(', 'class Uri address)', 'static ServicePoint'),
  \ dotnet#method('FindServicePoint(', 'string uriString, IWebProxy proxy)', 'static ServicePoint'),
  \ dotnet#method('FindServicePoint(', 'class Uri address, IWebProxy proxy)', 'static ServicePoint'),
  \ dotnet#method('SetTcpKeepAlive(', 'bool enabled, int32 keepAliveTime, int32 keepAliveInterval)', 'static void'),
  \ dotnet#method('ServicePointManager(', ')', 'void'),
  \ dotnet#method('ServicePointManager(', ')', 'static void .'),
  \ dotnet#prop('SecurityProtocol', 'SecurityProtocolType'),
  \ dotnet#prop('MaxServicePoints', 'int32'),
  \ dotnet#prop('DefaultConnectionLimit', 'int32'),
  \ dotnet#prop('MaxServicePointIdleTime', 'int32'),
  \ dotnet#prop('UseNagleAlgorithm', 'bool'),
  \ dotnet#prop('Expect100Continue', 'bool'),
  \ dotnet#prop('EnableDnsRoundRobin', 'bool'),
  \ dotnet#prop('DnsRefreshTimeout', 'int32'),
  \ dotnet#prop('CertificatePolicy', 'ICertificatePolicy'),
  \ dotnet#prop('ServerCertificateValidationCallback', 'RemoteCertificateValidationCallback'),
  \ dotnet#prop('CheckCertificateRevocationList', 'bool'),
  \ dotnet#prop('EncryptionPolicy', 'EncryptionPolicy'),
  \ ])

call dotnet#class('SocketAddress', 'Object', [ 
  \ dotnet#method('get_Family(', ')', 'AddressFamily'),
  \ dotnet#method('get_Size(', ')', 'int32'),
  \ dotnet#method('get_Item(', 'int32 offset)', 'uint8'),
  \ dotnet#method('set_Item(', 'int32 offset, uint8 value)', 'void'),
  \ dotnet#method('SocketAddress(', 'Addressfamily)', 'void'),
  \ dotnet#method('SocketAddress(', 'Addressfamily, int32 size)', 'void'),
  \ dotnet#method('Equals(', 'object comparand)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Family', 'AddressFamily'),
  \ dotnet#prop('Size', 'int32'),
  \ dotnet#prop('Item(int32)', 'uint8'),
  \ ])

call dotnet#class('SocketPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('SocketPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Access(', ')', 'string'),
  \ dotnet#method('set_Access(', 'string value)', 'void'),
  \ dotnet#method('get_Host(', ')', 'string'),
  \ dotnet#method('set_Host(', 'string value)', 'void'),
  \ dotnet#method('get_Transport(', ')', 'string'),
  \ dotnet#method('set_Transport(', 'string value)', 'void'),
  \ dotnet#method('get_Port(', ')', 'string'),
  \ dotnet#method('set_Port(', 'string value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Access', 'string'),
  \ dotnet#prop('Host', 'string'),
  \ dotnet#prop('Transport', 'string'),
  \ dotnet#prop('Port', 'string'),
  \ ])

call dotnet#class('SocketPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('get_ConnectList(', ')', 'IEnumerator'),
  \ dotnet#method('get_AcceptList(', ')', 'IEnumerator'),
  \ dotnet#method('SocketPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('SocketPermission(', 'NetworkAccess access, TransportType transport, string hostName, int32 portNumber)', 'void'),
  \ dotnet#method('AddPermission(', 'NetworkAccess access, TransportType transport, string hostName, int32 portNumber)', 'void'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#prop('ConnectList', 'IEnumerator'),
  \ dotnet#prop('AcceptList', 'IEnumerator'),
  \ ])

call dotnet#class('EndpointPermission', 'Object', [ 
  \ dotnet#method('get_Hostname(', ')', 'string'),
  \ dotnet#method('get_Transport(', ')', 'TransportType'),
  \ dotnet#method('get_Port(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('EndpointPermission(', ')', 'static void .'),
  \ dotnet#prop('Hostname', 'string'),
  \ dotnet#prop('Transport', 'TransportType'),
  \ dotnet#prop('Port', 'int32'),
  \ ])

call dotnet#class('WebClient', 'Component', [ 
  \ dotnet#method('WebClient(', ')', 'void'),
  \ dotnet#method('get_Encoding(', ')', 'Encoding'),
  \ dotnet#method('set_Encoding(', 'class Encoding value)', 'void'),
  \ dotnet#method('get_BaseAddress(', ')', 'string'),
  \ dotnet#method('set_BaseAddress(', 'string value)', 'void'),
  \ dotnet#method('get_Credentials(', ')', 'ICredentials'),
  \ dotnet#method('set_Credentials(', 'class ICredentials value)', 'void'),
  \ dotnet#method('get_UseDefaultCredentials(', ')', 'bool'),
  \ dotnet#method('set_UseDefaultCredentials(', 'bool value)', 'void'),
  \ dotnet#method('get_Headers(', ')', 'WebHeaderCollection'),
  \ dotnet#method('set_Headers(', 'class WebHeaderCollection value)', 'void'),
  \ dotnet#method('get_QueryString(', ')', 'NameValueCollection'),
  \ dotnet#method('set_QueryString(', 'class NameValueCollection value)', 'void'),
  \ dotnet#method('get_ResponseHeaders(', ')', 'WebHeaderCollection'),
  \ dotnet#method('get_Proxy(', ')', 'IWebProxy'),
  \ dotnet#method('set_Proxy(', 'class IWebProxy value)', 'void'),
  \ dotnet#method('get_CachePolicy(', ')', 'RequestCachePolicy'),
  \ dotnet#method('set_CachePolicy(', 'class RequestCachePolicy value)', 'void'),
  \ dotnet#method('get_IsBusy(', ')', 'bool'),
  \ dotnet#method('GetWebRequest(', 'class Uri address)', 'family'),
  \ dotnet#method('GetWebResponse(', 'class WebRequest request)', 'family'),
  \ dotnet#method('GetWebResponse(', 'class WebRequest request, IAsyncResult result)', 'family'),
  \ dotnet#method('DownloadData(', 'string address)', 'uint8[]'),
  \ dotnet#method('DownloadData(', 'class Uri address)', 'uint8[]'),
  \ dotnet#method('DownloadFile(', 'string address, string fileName)', 'void'),
  \ dotnet#method('DownloadFile(', 'class Uri address, string fileName)', 'void'),
  \ dotnet#method('OpenRead(', 'string address)', 'Stream'),
  \ dotnet#method('OpenRead(', 'class Uri address)', 'Stream'),
  \ dotnet#method('OpenWrite(', 'string address)', 'Stream'),
  \ dotnet#method('OpenWrite(', 'class Uri address)', 'Stream'),
  \ dotnet#method('OpenWrite(', 'string address, string method)', 'Stream'),
  \ dotnet#method('OpenWrite(', 'class Uri address, string method)', 'Stream'),
  \ dotnet#method('UploadData(', 'string address, uint8[] data)', 'uint8[]'),
  \ dotnet#method('UploadData(', 'class Uri address, uint8[] data)', 'uint8[]'),
  \ dotnet#method('UploadData(', 'string address, string method, uint8[] data)', 'uint8[]'),
  \ dotnet#method('UploadData(', 'class Uri address, string method, uint8[] data)', 'uint8[]'),
  \ dotnet#method('UploadFile(', 'string address, string fileName)', 'uint8[]'),
  \ dotnet#method('UploadFile(', 'class Uri address, string fileName)', 'uint8[]'),
  \ dotnet#method('UploadFile(', 'string address, string method, string fileName)', 'uint8[]'),
  \ dotnet#method('UploadFile(', 'class Uri address, string method, string fileName)', 'uint8[]'),
  \ dotnet#method('UploadValues(', 'string address, NameValueCollection data)', 'uint8[]'),
  \ dotnet#method('UploadValues(', 'class Uri address, NameValueCollection data)', 'uint8[]'),
  \ dotnet#method('UploadValues(', 'string address, string method, NameValueCollection data)', 'uint8[]'),
  \ dotnet#method('UploadValues(', 'class Uri address, string method, NameValueCollection data)', 'uint8[]'),
  \ dotnet#method('UploadString(', 'string address, string data)', 'string'),
  \ dotnet#method('UploadString(', 'class Uri address, string data)', 'string'),
  \ dotnet#method('UploadString(', 'string address, string method, string data)', 'string'),
  \ dotnet#method('UploadString(', 'class Uri address, string method, string data)', 'string'),
  \ dotnet#method('DownloadString(', 'string address)', 'string'),
  \ dotnet#method('DownloadString(', 'class Uri address)', 'string'),
  \ dotnet#method('add_OpenReadCompleted(', 'class OpenReadCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_OpenReadCompleted(', 'class OpenReadCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnOpenReadCompleted(', 'class OpenReadCompletedEventArgs e)', 'void'),
  \ dotnet#method('OpenReadAsync(', 'class Uri address)', 'void'),
  \ dotnet#method('OpenReadAsync(', 'class Uri address, object userToken)', 'void'),
  \ dotnet#method('add_OpenWriteCompleted(', 'class OpenWriteCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_OpenWriteCompleted(', 'class OpenWriteCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnOpenWriteCompleted(', 'class OpenWriteCompletedEventArgs e)', 'void'),
  \ dotnet#method('OpenWriteAsync(', 'class Uri address)', 'void'),
  \ dotnet#method('OpenWriteAsync(', 'class Uri address, string method)', 'void'),
  \ dotnet#method('OpenWriteAsync(', 'class Uri address, string method, object userToken)', 'void'),
  \ dotnet#method('add_DownloadStringCompleted(', 'class DownloadStringCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadStringCompleted(', 'class DownloadStringCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnDownloadStringCompleted(', 'class DownloadStringCompletedEventArgs e)', 'void'),
  \ dotnet#method('DownloadStringAsync(', 'class Uri address)', 'void'),
  \ dotnet#method('DownloadStringAsync(', 'class Uri address, object userToken)', 'void'),
  \ dotnet#method('add_DownloadDataCompleted(', 'class DownloadDataCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadDataCompleted(', 'class DownloadDataCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnDownloadDataCompleted(', 'class DownloadDataCompletedEventArgs e)', 'void'),
  \ dotnet#method('DownloadDataAsync(', 'class Uri address)', 'void'),
  \ dotnet#method('DownloadDataAsync(', 'class Uri address, object userToken)', 'void'),
  \ dotnet#method('add_DownloadFileCompleted(', 'class AsyncCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadFileCompleted(', 'class AsyncCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnDownloadFileCompleted(', 'class AsyncCompletedEventArgs e)', 'void'),
  \ dotnet#method('DownloadFileAsync(', 'class Uri address, string fileName)', 'void'),
  \ dotnet#method('DownloadFileAsync(', 'class Uri address, string fileName, object userToken)', 'void'),
  \ dotnet#method('add_UploadStringCompleted(', 'class UploadStringCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_UploadStringCompleted(', 'class UploadStringCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnUploadStringCompleted(', 'class UploadStringCompletedEventArgs e)', 'void'),
  \ dotnet#method('UploadStringAsync(', 'class Uri address, string data)', 'void'),
  \ dotnet#method('UploadStringAsync(', 'class Uri address, string method, string data)', 'void'),
  \ dotnet#method('UploadStringAsync(', 'class Uri address, string method, string data, object userToken)', 'void'),
  \ dotnet#method('add_UploadDataCompleted(', 'class UploadDataCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_UploadDataCompleted(', 'class UploadDataCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnUploadDataCompleted(', 'class UploadDataCompletedEventArgs e)', 'void'),
  \ dotnet#method('UploadDataAsync(', 'class Uri address, uint8[] data)', 'void'),
  \ dotnet#method('UploadDataAsync(', 'class Uri address, string method, uint8[] data)', 'void'),
  \ dotnet#method('UploadDataAsync(', 'class Uri address, string method, uint8[] data, object userToken)', 'void'),
  \ dotnet#method('add_UploadFileCompleted(', 'class UploadFileCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_UploadFileCompleted(', 'class UploadFileCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnUploadFileCompleted(', 'class UploadFileCompletedEventArgs e)', 'void'),
  \ dotnet#method('UploadFileAsync(', 'class Uri address, string fileName)', 'void'),
  \ dotnet#method('UploadFileAsync(', 'class Uri address, string method, string fileName)', 'void'),
  \ dotnet#method('UploadFileAsync(', 'class Uri address, string method, string fileName, object userToken)', 'void'),
  \ dotnet#method('add_UploadValuesCompleted(', 'class UploadValuesCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_UploadValuesCompleted(', 'class UploadValuesCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnUploadValuesCompleted(', 'class UploadValuesCompletedEventArgs e)', 'void'),
  \ dotnet#method('UploadValuesAsync(', 'class Uri address, NameValueCollection data)', 'void'),
  \ dotnet#method('UploadValuesAsync(', 'class Uri address, string method, NameValueCollection data)', 'void'),
  \ dotnet#method('UploadValuesAsync(', 'class Uri address, string method, NameValueCollection data, object userToken)', 'void'),
  \ dotnet#method('CancelAsync(', ')', 'void'),
  \ dotnet#method('add_DownloadProgressChanged(', 'class DownloadProgressChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_DownloadProgressChanged(', 'class DownloadProgressChangedEventHandler value)', 'void'),
  \ dotnet#method('add_UploadProgressChanged(', 'class UploadProgressChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_UploadProgressChanged(', 'class UploadProgressChangedEventHandler value)', 'void'),
  \ dotnet#method('OnDownloadProgressChanged(', 'class DownloadProgressChangedEventArgs e)', 'void'),
  \ dotnet#method('OnUploadProgressChanged(', 'class UploadProgressChangedEventArgs e)', 'void'),
  \ dotnet#event('OpenReadCompleted', 'OpenReadCompletedEventHandler'),
  \ dotnet#event('OpenWriteCompleted', 'OpenWriteCompletedEventHandler'),
  \ dotnet#event('DownloadStringCompleted', 'DownloadStringCompletedEventHandler'),
  \ dotnet#event('DownloadDataCompleted', 'DownloadDataCompletedEventHandler'),
  \ dotnet#event('DownloadFileCompleted', 'AsyncCompletedEventHandler'),
  \ dotnet#event('UploadStringCompleted', 'UploadStringCompletedEventHandler'),
  \ dotnet#event('UploadDataCompleted', 'UploadDataCompletedEventHandler'),
  \ dotnet#event('UploadFileCompleted', 'UploadFileCompletedEventHandler'),
  \ dotnet#event('UploadValuesCompleted', 'UploadValuesCompletedEventHandler'),
  \ dotnet#event('DownloadProgressChanged', 'DownloadProgressChangedEventHandler'),
  \ dotnet#event('UploadProgressChanged', 'UploadProgressChangedEventHandler'),
  \ dotnet#prop('Encoding', 'Encoding'),
  \ dotnet#prop('BaseAddress', 'string'),
  \ dotnet#prop('Credentials', 'ICredentials'),
  \ dotnet#prop('UseDefaultCredentials', 'bool'),
  \ dotnet#prop('Headers', 'WebHeaderCollection'),
  \ dotnet#prop('QueryString', 'NameValueCollection'),
  \ dotnet#prop('ResponseHeaders', 'WebHeaderCollection'),
  \ dotnet#prop('Proxy', 'IWebProxy'),
  \ dotnet#prop('CachePolicy', 'RequestCachePolicy'),
  \ dotnet#prop('IsBusy', 'bool'),
  \ ])

call dotnet#class('OpenReadCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('OpenReadCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, OpenReadCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, OpenReadCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('OpenReadCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_Result(', ')', 'Stream'),
  \ dotnet#prop('Result', 'Stream'),
  \ ])

call dotnet#class('OpenWriteCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('OpenWriteCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, OpenWriteCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, OpenWriteCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('OpenWriteCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_Result(', ')', 'Stream'),
  \ dotnet#prop('Result', 'Stream'),
  \ ])

call dotnet#class('DownloadStringCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DownloadStringCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DownloadStringCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DownloadStringCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DownloadStringCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_Result(', ')', 'string'),
  \ dotnet#prop('Result', 'string'),
  \ ])

call dotnet#class('DownloadDataCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DownloadDataCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DownloadDataCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DownloadDataCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DownloadDataCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_Result(', ')', 'uint8[]'),
  \ dotnet#prop('Result', 'uint8[]'),
  \ ])

call dotnet#class('UploadStringCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('UploadStringCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, UploadStringCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, UploadStringCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('UploadStringCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_Result(', ')', 'string'),
  \ dotnet#prop('Result', 'string'),
  \ ])

call dotnet#class('UploadDataCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('UploadDataCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, UploadDataCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, UploadDataCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('UploadDataCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_Result(', ')', 'uint8[]'),
  \ dotnet#prop('Result', 'uint8[]'),
  \ ])

call dotnet#class('UploadFileCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('UploadFileCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, UploadFileCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, UploadFileCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('UploadFileCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_Result(', ')', 'uint8[]'),
  \ dotnet#prop('Result', 'uint8[]'),
  \ ])

call dotnet#class('UploadValuesCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('UploadValuesCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, UploadValuesCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, UploadValuesCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('UploadValuesCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('get_Result(', ')', 'uint8[]'),
  \ dotnet#prop('Result', 'uint8[]'),
  \ ])

call dotnet#class('DownloadProgressChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DownloadProgressChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DownloadProgressChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DownloadProgressChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DownloadProgressChangedEventArgs', 'ProgressChangedEventArgs', [ 
  \ dotnet#method('get_BytesReceived(', ')', 'int64'),
  \ dotnet#method('get_TotalBytesToReceive(', ')', 'int64'),
  \ dotnet#prop('BytesReceived', 'int64'),
  \ dotnet#prop('TotalBytesToReceive', 'int64'),
  \ ])

call dotnet#class('UploadProgressChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('UploadProgressChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, UploadProgressChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, UploadProgressChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('UploadProgressChangedEventArgs', 'ProgressChangedEventArgs', [ 
  \ dotnet#method('get_BytesReceived(', ')', 'int64'),
  \ dotnet#method('get_TotalBytesToReceive(', ')', 'int64'),
  \ dotnet#method('get_BytesSent(', ')', 'int64'),
  \ dotnet#method('get_TotalBytesToSend(', ')', 'int64'),
  \ dotnet#prop('BytesReceived', 'int64'),
  \ dotnet#prop('TotalBytesToReceive', 'int64'),
  \ dotnet#prop('BytesSent', 'int64'),
  \ dotnet#prop('TotalBytesToSend', 'int64'),
  \ ])

call dotnet#class('WebException', 'InvalidOperationException', [ 
  \ dotnet#method('WebException(', ')', 'void'),
  \ dotnet#method('WebException(', 'string message)', 'void'),
  \ dotnet#method('WebException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('WebException(', 'string message, WebExceptionStatus status)', 'void'),
  \ dotnet#method('WebException(', 'string message, Exception innerException, WebExceptionStatus status, WebResponse response)', 'void'),
  \ dotnet#method('WebException(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_Status(', ')', 'WebExceptionStatus'),
  \ dotnet#method('get_Response(', ')', 'WebResponse'),
  \ dotnet#prop('Status', 'WebExceptionStatus'),
  \ dotnet#prop('Response', 'WebResponse'),
  \ ])

call dotnet#class('WebHeaderCollection', 'NameValueCollection', [ 
  \ dotnet#method('get_Item(', 'HttpRequestHeader header)', 'string'),
  \ dotnet#method('set_Item(', 'HttpRequestHeader header, string value)', 'void'),
  \ dotnet#method('get_Item(', 'HttpResponseHeader header)', 'string'),
  \ dotnet#method('set_Item(', 'HttpResponseHeader header, string value)', 'void'),
  \ dotnet#method('Add(', 'HttpRequestHeader header, string value)', 'void'),
  \ dotnet#method('Add(', 'HttpResponseHeader header, string value)', 'void'),
  \ dotnet#method('Set(', 'HttpRequestHeader header, string value)', 'void'),
  \ dotnet#method('Set(', 'HttpResponseHeader header, string value)', 'void'),
  \ dotnet#method('Remove(', 'HttpRequestHeader header)', 'void'),
  \ dotnet#method('Remove(', 'HttpResponseHeader header)', 'void'),
  \ dotnet#method('AddWithoutValidate(', 'string headerName, string headerValue)', 'void'),
  \ dotnet#method('Add(', 'string name, string value)', 'void'),
  \ dotnet#method('Add(', 'string header)', 'void'),
  \ dotnet#method('Set(', 'string name, string value)', 'void'),
  \ dotnet#method('Remove(', 'string name)', 'void'),
  \ dotnet#method('GetValues(', 'string header)', 'string[]'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToByteArray(', ')', 'uint8[]'),
  \ dotnet#method('IsRestricted(', 'string headerName)', 'static bool'),
  \ dotnet#method('IsRestricted(', 'string headerName, bool response)', 'static bool'),
  \ dotnet#method('WebHeaderCollection(', ')', 'void'),
  \ dotnet#method('WebHeaderCollection(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('Get(', 'string name)', 'string'),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('Get(', 'int32 index)', 'string'),
  \ dotnet#method('GetValues(', 'int32 index)', 'string[]'),
  \ dotnet#method('GetKey(', 'int32 index)', 'string'),
  \ dotnet#method('get_AllKeys(', ')', 'string[]'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('WebHeaderCollection(', ')', 'static void .'),
  \ dotnet#prop('Item(valuetype', 'string'),
  \ dotnet#prop('Item(valuetype', 'string'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Keys', 'NameObjectCollectionBase/KeysCollection'),
  \ dotnet#prop('AllKeys', 'string[]'),
  \ ])

call dotnet#class('WebPermissionAttribute', 'CodeAccessSecurityAttribute', [ 
  \ dotnet#method('WebPermissionAttribute(', 'SecurityAction action)', 'void'),
  \ dotnet#method('get_Connect(', ')', 'string'),
  \ dotnet#method('set_Connect(', 'string value)', 'void'),
  \ dotnet#method('get_Accept(', ')', 'string'),
  \ dotnet#method('set_Accept(', 'string value)', 'void'),
  \ dotnet#method('get_ConnectPattern(', ')', 'string'),
  \ dotnet#method('set_ConnectPattern(', 'string value)', 'void'),
  \ dotnet#method('get_AcceptPattern(', ')', 'string'),
  \ dotnet#method('set_AcceptPattern(', 'string value)', 'void'),
  \ dotnet#method('CreatePermission(', ')', 'IPermission'),
  \ dotnet#prop('Connect', 'string'),
  \ dotnet#prop('Accept', 'string'),
  \ dotnet#prop('ConnectPattern', 'string'),
  \ dotnet#prop('AcceptPattern', 'string'),
  \ ])

call dotnet#class('WebPermission', 'CodeAccessPermission', [ 
  \ dotnet#method('get_ConnectList(', ')', 'IEnumerator'),
  \ dotnet#method('get_AcceptList(', ')', 'IEnumerator'),
  \ dotnet#method('WebPermission(', 'PermissionState state)', 'void'),
  \ dotnet#method('WebPermission(', ')', 'void'),
  \ dotnet#method('WebPermission(', 'NetworkAccess access, Regex uriRegex)', 'void'),
  \ dotnet#method('WebPermission(', 'NetworkAccess access, string uriString)', 'void'),
  \ dotnet#method('AddPermission(', 'NetworkAccess access, string uriString)', 'void'),
  \ dotnet#method('AddPermission(', 'NetworkAccess access, Regex uriRegex)', 'void'),
  \ dotnet#method('IsUnrestricted(', ')', 'bool'),
  \ dotnet#method('Copy(', ')', 'IPermission'),
  \ dotnet#method('IsSubsetOf(', 'class IPermission target)', 'bool'),
  \ dotnet#method('Union(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('Intersect(', 'class IPermission target)', 'IPermission'),
  \ dotnet#method('FromXml(', 'class SecurityElement securityElement)', 'void'),
  \ dotnet#method('ToXml(', ')', 'SecurityElement'),
  \ dotnet#prop('ConnectList', 'IEnumerator'),
  \ dotnet#prop('AcceptList', 'IEnumerator'),
  \ ])

call dotnet#class('WebProxy', 'Object', [ 
  \ dotnet#method('WebProxy(', ')', 'void'),
  \ dotnet#method('WebProxy(', 'class Uri Address)', 'void'),
  \ dotnet#method('WebProxy(', 'class Uri Address, bool BypassOnLocal)', 'void'),
  \ dotnet#method('WebProxy(', 'class Uri Address, bool BypassOnLocal, string[] BypassList)', 'void'),
  \ dotnet#method('WebProxy(', 'class Uri Address, bool BypassOnLocal, string[] BypassList, ICredentials Credentials)', 'void'),
  \ dotnet#method('WebProxy(', 'string Host, int32 Port)', 'void'),
  \ dotnet#method('WebProxy(', 'string Address)', 'void'),
  \ dotnet#method('WebProxy(', 'string Address, bool BypassOnLocal)', 'void'),
  \ dotnet#method('WebProxy(', 'string Address, bool BypassOnLocal, string[] BypassList)', 'void'),
  \ dotnet#method('WebProxy(', 'string Address, bool BypassOnLocal, string[] BypassList, ICredentials Credentials)', 'void'),
  \ dotnet#method('get_Address(', ')', 'Uri'),
  \ dotnet#method('set_Address(', 'class Uri value)', 'void'),
  \ dotnet#method('get_BypassProxyOnLocal(', ')', 'bool'),
  \ dotnet#method('set_BypassProxyOnLocal(', 'bool value)', 'void'),
  \ dotnet#method('get_BypassList(', ')', 'string[]'),
  \ dotnet#method('set_BypassList(', 'string[] value)', 'void'),
  \ dotnet#method('get_Credentials(', ')', ''),
  \ dotnet#method('set_Credentials(', 'class ICredentials value)', 'void'),
  \ dotnet#method('get_UseDefaultCredentials(', ')', 'bool'),
  \ dotnet#method('set_UseDefaultCredentials(', 'bool value)', 'void'),
  \ dotnet#method('get_BypassArrayList(', ')', 'ArrayList'),
  \ dotnet#method('GetProxy(', 'class Uri destination)', 'Uri'),
  \ dotnet#method('IsBypassed(', 'class Uri host)', 'bool'),
  \ dotnet#method('GetDefaultProxy(', ')', 'static WebProxy'),
  \ dotnet#method('WebProxy(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#prop('Address', 'Uri'),
  \ dotnet#prop('BypassProxyOnLocal', 'bool'),
  \ dotnet#prop('BypassList', 'string[]'),
  \ dotnet#prop('Credentials', 'ICredentials'),
  \ dotnet#prop('UseDefaultCredentials', 'bool'),
  \ dotnet#prop('BypassArrayList', 'ArrayList'),
  \ ])

call dotnet#class('WebUtility', 'Object', [ 
  \ dotnet#method('HtmlEncode(', 'string value)', 'static string'),
  \ dotnet#method('HtmlEncode(', 'string value, TextWriter output)', 'static void'),
  \ dotnet#method('HtmlDecode(', 'string value)', 'static string'),
  \ dotnet#method('HtmlDecode(', 'string value, TextWriter output)', 'static void'),
  \ dotnet#method('WebUtility(', ')', 'static void .'),
  \ ])

call dotnet#class('IPEndPointCollection', 'Collection', [ 
  \ dotnet#method('IPEndPointCollection(', ')', 'void'),
  \ dotnet#method('SetItem(', 'int32 index, IPEndPoint item)', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, IPEndPoint item)', 'void'),
  \ ])

