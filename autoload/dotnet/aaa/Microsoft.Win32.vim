call dotnet#namespace('Microsoft.Win32')

call dotnet#class('Registry', 'Object', [ 
  \ dotnet#method('Registry(', ')', 'static void .'),
  \ dotnet#method('GetValue(', 'string keyName, string valueName, object defaultValue)', 'static object'),
  \ dotnet#method('SetValue(', 'string keyName, string valueName, object value)', 'static void'),
  \ dotnet#method('SetValue(', 'string keyName, string valueName, object value, RegistryValueKind valueKind)', 'static void'),
  \ ])

call dotnet#class('RegistryKey', 'MarshalByRefObject', [ 
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('CreateSubKey(', 'string subkey)', 'RegistryKey'),
  \ dotnet#method('CreateSubKey(', 'string subkey, RegistryKeyPermissionCheck permissionCheck)', 'RegistryKey'),
  \ dotnet#method('CreateSubKey(', 'string subkey, RegistryKeyPermissionCheck permissionCheck, RegistryOptions options)', 'RegistryKey'),
  \ dotnet#method('CreateSubKey(', 'string subkey, RegistryKeyPermissionCheck permissionCheck, RegistrySecurity registrySecurity)', 'RegistryKey'),
  \ dotnet#method('CreateSubKey(', 'string subkey, RegistryKeyPermissionCheck permissionCheck, RegistryOptions registryOptions, RegistrySecurity registrySecurity)', 'RegistryKey'),
  \ dotnet#method('DeleteSubKey(', 'string subkey)', 'void'),
  \ dotnet#method('DeleteSubKey(', 'string subkey, bool throwOnMissingSubKey)', 'void'),
  \ dotnet#method('DeleteSubKeyTree(', 'string subkey)', 'void'),
  \ dotnet#method('DeleteSubKeyTree(', 'string subkey, bool throwOnMissingSubKey)', 'void'),
  \ dotnet#method('DeleteValue(', 'string name)', 'void'),
  \ dotnet#method('DeleteValue(', 'string name, bool throwOnMissingValue)', 'void'),
  \ dotnet#method('GetBaseKey(', 'native int hKey)', 'static RegistryKey'),
  \ dotnet#method('GetBaseKey(', 'native int hKey, RegistryView view)', 'static RegistryKey'),
  \ dotnet#method('OpenBaseKey(', 'RegistryHive hKey, RegistryView view)', 'static RegistryKey'),
  \ dotnet#method('OpenRemoteBaseKey(', 'RegistryHive hKey, string machineName)', 'static RegistryKey'),
  \ dotnet#method('OpenRemoteBaseKey(', 'RegistryHive hKey, string machineName, RegistryView view)', 'static RegistryKey'),
  \ dotnet#method('OpenSubKey(', 'string name, bool writable)', 'RegistryKey'),
  \ dotnet#method('OpenSubKey(', 'string name, RegistryKeyPermissionCheck permissionCheck)', 'RegistryKey'),
  \ dotnet#method('OpenSubKey(', 'string name, RegistryKeyPermissionCheck permissionCheck, RegistryRights rights)', 'RegistryKey'),
  \ dotnet#method('InternalOpenSubKey(', 'string name, bool writable)', 'RegistryKey'),
  \ dotnet#method('OpenSubKey(', 'string name)', 'RegistryKey'),
  \ dotnet#method('get_SubKeyCount(', ')', 'int32'),
  \ dotnet#method('get_View(', ')', 'RegistryView'),
  \ dotnet#method('get_Handle(', ')', 'SafeRegistryHandle'),
  \ dotnet#method('FromHandle(', 'class SafeRegistryHandle handle)', 'static RegistryKey'),
  \ dotnet#method('FromHandle(', 'class SafeRegistryHandle handle, RegistryView view)', 'static RegistryKey'),
  \ dotnet#method('InternalSubKeyCount(', ')', 'int32'),
  \ dotnet#method('GetSubKeyNames(', ')', 'string[]'),
  \ dotnet#method('InternalGetSubKeyNames(', ')', 'string[]'),
  \ dotnet#method('get_ValueCount(', ')', 'int32'),
  \ dotnet#method('InternalValueCount(', ')', 'int32'),
  \ dotnet#method('GetValueNames(', ')', 'string[]'),
  \ dotnet#method('GetValue(', 'string name)', 'object'),
  \ dotnet#method('GetValue(', 'string name, object defaultValue)', 'object'),
  \ dotnet#method('GetValue(', 'string name, object defaultValue, RegistryValueOptions options)', 'object'),
  \ dotnet#method('InternalGetValue(', 'string name, object defaultValue, bool doNotExpand, bool checkSecurity)', 'object'),
  \ dotnet#method('GetValueKind(', 'string name)', 'RegistryValueKind'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('SetValue(', 'string name, object value)', 'void'),
  \ dotnet#method('SetValue(', 'string name, object value, RegistryValueKind valueKind)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetAccessControl(', ')', 'RegistrySecurity'),
  \ dotnet#method('GetAccessControl(', 'AccessControlSections includeSections)', 'RegistrySecurity'),
  \ dotnet#method('SetAccessControl(', 'class RegistrySecurity registrySecurity)', 'void'),
  \ dotnet#method('Win32Error(', 'int32 errorCode, string str)', 'void'),
  \ dotnet#method('Win32ErrorStatic(', 'int32 errorCode, string str)', 'static void'),
  \ dotnet#method('FixupName(', 'string name)', 'static string'),
  \ dotnet#method('RegistryKey(', ')', 'static void .'),
  \ dotnet#prop('SubKeyCount', 'int32'),
  \ dotnet#prop('View', 'RegistryView'),
  \ dotnet#prop('Handle', 'SafeRegistryHandle'),
  \ dotnet#prop('ValueCount', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('CommonDialog', 'Object', [ 
  \ dotnet#method('Reset(', ')', 'abstract void'),
  \ dotnet#method('ShowDialog(', ')', ''),
  \ dotnet#method('ShowDialog(', 'class Window owner)', 'Nullable'),
  \ dotnet#method('get_Tag(', ')', 'object'),
  \ dotnet#method('set_Tag(', 'object value)', 'void'),
  \ dotnet#method('HookProc(', 'native int hwnd, int32 msg, int wParam, int lParam)', 'int'),
  \ dotnet#method('RunDialog(', 'native int hwndOwner)', 'abstract bool'),
  \ dotnet#method('CheckPermissionsToShowDialog(', ')', 'void'),
  \ dotnet#method('MoveToScreenCenter(', 'HandleRef hWnd)', 'void'),
  \ dotnet#method('CommonDialog(', ')', 'void'),
  \ dotnet#prop('Tag', 'object'),
  \ ])

call dotnet#class('FileDialog', 'CommonDialog', [ 
  \ dotnet#method('FileDialog(', ')', 'void'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_AddExtension(', ')', 'bool'),
  \ dotnet#method('set_AddExtension(', 'bool value)', 'void'),
  \ dotnet#method('get_CheckFileExists(', ')', 'bool'),
  \ dotnet#method('set_CheckFileExists(', 'bool value)', 'void'),
  \ dotnet#method('get_CheckPathExists(', ')', 'bool'),
  \ dotnet#method('set_CheckPathExists(', 'bool value)', 'void'),
  \ dotnet#method('get_DefaultExt(', ')', 'string'),
  \ dotnet#method('set_DefaultExt(', 'string value)', 'void'),
  \ dotnet#method('get_DereferenceLinks(', ')', 'bool'),
  \ dotnet#method('set_DereferenceLinks(', 'bool value)', 'void'),
  \ dotnet#method('get_SafeFileName(', ')', 'string'),
  \ dotnet#method('get_SafeFileNames(', ')', 'string[]'),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('set_FileName(', 'string value)', 'void'),
  \ dotnet#method('get_FileNames(', ')', 'string[]'),
  \ dotnet#method('get_Filter(', ')', 'string'),
  \ dotnet#method('set_Filter(', 'string value)', 'void'),
  \ dotnet#method('get_FilterIndex(', ')', 'int32'),
  \ dotnet#method('set_FilterIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_InitialDirFileDialogy(', ')', 'string'),
  \ dotnet#method('set_InitialDirFileDialogy(', 'string value)', 'void'),
  \ dotnet#method('get_RestoreDirFileDialogy(', ')', 'bool'),
  \ dotnet#method('set_RestoreDirFileDialogy(', 'bool value)', 'void'),
  \ dotnet#method('get_Title(', ')', 'string'),
  \ dotnet#method('set_Title(', 'string value)', 'void'),
  \ dotnet#method('get_ValidateNames(', ')', 'bool'),
  \ dotnet#method('set_ValidateNames(', 'bool value)', 'void'),
  \ dotnet#method('add_FileOk(', 'class CancelEventHandler value)', 'void'),
  \ dotnet#method('remove_FileOk(', 'class CancelEventHandler value)', 'void'),
  \ dotnet#method('HookProc(', 'native int hwnd, int32 msg, int wParam, int lParam)', 'int'),
  \ dotnet#method('OnFileOk(', 'class CancelEventArgs e)', 'void'),
  \ dotnet#method('RunDialog(', 'native int hwndOwner)', 'bool'),
  \ dotnet#method('GetOption(', 'int32 option)', 'bool'),
  \ dotnet#method('SetOption(', 'int32 option, bool value)', 'void'),
  \ dotnet#method('MessageBoxWithFocusRestore(', 'string message, MessageBoxButton buttons, MessageBoxImage image)', 'bool'),
  \ dotnet#method('PromptUserIfAppropriate(', 'string fileName)', 'strict bool'),
  \ dotnet#method('RunFileDialog(', 'class NativeMethods/OPENFILENAME_I ofn)', 'abstract strict bool'),
  \ dotnet#method('get_FileNamesInternal(', ')', 'string[]'),
  \ dotnet#method('get_Options(', ')', 'int32'),
  \ dotnet#method('get_CustomPlaces(', ')', 'IList'),
  \ dotnet#method('set_CustomPlaces(', 'class IList value)', 'void'),
  \ dotnet#method('CreateVistaDialog(', ')', 'abstract strict'),
  \ dotnet#method('ProcessVistaFiles(', 'class IFileDialog dialog)', 'abstract strict string[]'),
  \ dotnet#method('PrepareVistaDialog(', 'class IFileDialog dialog)', 'strict void'),
  \ dotnet#event('FileOk', 'CancelEventHandler'),
  \ dotnet#prop('AddExtension', 'bool'),
  \ dotnet#prop('CheckFileExists', 'bool'),
  \ dotnet#prop('CheckPathExists', 'bool'),
  \ dotnet#prop('DefaultExt', 'string'),
  \ dotnet#prop('DereferenceLinks', 'bool'),
  \ dotnet#prop('SafeFileName', 'string'),
  \ dotnet#prop('SafeFileNames', 'string[]'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('FileNames', 'string[]'),
  \ dotnet#prop('Filter', 'string'),
  \ dotnet#prop('FilterIndex', 'int32'),
  \ dotnet#prop('InitialDirFileDialogy', 'string'),
  \ dotnet#prop('RestoreDirFileDialogy', 'bool'),
  \ dotnet#prop('Title', 'string'),
  \ dotnet#prop('ValidateNames', 'bool'),
  \ dotnet#prop('FileNamesInternal', 'string[]'),
  \ dotnet#prop('Options', 'int32'),
  \ dotnet#prop('CustomPlaces', 'IList'),
  \ ])

call dotnet#class('FileDialogCustomPlace', 'Object', [ 
  \ dotnet#method('FileDialogCustomPlace(', 'Guid knownFolder)', 'void'),
  \ dotnet#method('FileDialogCustomPlace(', 'string path)', 'void'),
  \ dotnet#method('get_KnownFolder(', ')', 'Guid'),
  \ dotnet#method('get_Path(', ')', 'string'),
  \ dotnet#method('set_KnownFolder(', 'Guid value)', 'void'),
  \ dotnet#method('set_Path(', 'string value)', 'void'),
  \ dotnet#prop('KnownFolder', 'Guid'),
  \ dotnet#prop('Path', 'string'),
  \ ])

call dotnet#class('FileDialogCustomPlaces', 'Object', [ 
  \ dotnet#method('get_RoamingApplicationData(', ')', 'static'),
  \ dotnet#method('get_LocalApplicationData(', ')', 'static'),
  \ dotnet#method('get_Cookies(', ')', 'static'),
  \ dotnet#method('get_Contacts(', ')', 'static'),
  \ dotnet#method('get_Favorites(', ')', 'static'),
  \ dotnet#method('get_Programs(', ')', 'static'),
  \ dotnet#method('get_Music(', ')', 'static'),
  \ dotnet#method('get_Pictures(', ')', 'static'),
  \ dotnet#method('get_SendTo(', ')', 'static'),
  \ dotnet#method('get_StartMenu(', ')', 'static'),
  \ dotnet#method('get_Startup(', ')', 'static'),
  \ dotnet#method('get_System(', ')', 'static'),
  \ dotnet#method('get_Templates(', ')', 'static'),
  \ dotnet#method('get_Desktop(', ')', 'static'),
  \ dotnet#method('get_Documents(', ')', 'static'),
  \ dotnet#method('get_ProgramFiles(', ')', 'static'),
  \ dotnet#method('get_ProgramFilesCommon(', ')', 'static'),
  \ dotnet#prop('RoamingApplicationData', 'FileDialogCustomPlace'),
  \ dotnet#prop('LocalApplicationData', 'FileDialogCustomPlace'),
  \ dotnet#prop('Cookies', 'FileDialogCustomPlace'),
  \ dotnet#prop('Contacts', 'FileDialogCustomPlace'),
  \ dotnet#prop('Favorites', 'FileDialogCustomPlace'),
  \ dotnet#prop('Programs', 'FileDialogCustomPlace'),
  \ dotnet#prop('Music', 'FileDialogCustomPlace'),
  \ dotnet#prop('Pictures', 'FileDialogCustomPlace'),
  \ dotnet#prop('SendTo', 'FileDialogCustomPlace'),
  \ dotnet#prop('StartMenu', 'FileDialogCustomPlace'),
  \ dotnet#prop('Startup', 'FileDialogCustomPlace'),
  \ dotnet#prop('System', 'FileDialogCustomPlace'),
  \ dotnet#prop('Templates', 'FileDialogCustomPlace'),
  \ dotnet#prop('Desktop', 'FileDialogCustomPlace'),
  \ dotnet#prop('Documents', 'FileDialogCustomPlace'),
  \ dotnet#prop('ProgramFiles', 'FileDialogCustomPlace'),
  \ dotnet#prop('ProgramFilesCommon', 'FileDialogCustomPlace'),
  \ ])

call dotnet#class('OpenFileDialog', 'FileDialog', [ 
  \ dotnet#method('OpenFileDialog(', ')', 'void'),
  \ dotnet#method('OpenFile(', ')', 'Stream'),
  \ dotnet#method('OpenFiles(', ')', 'Stream[]'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Multiselect(', ')', 'bool'),
  \ dotnet#method('set_Multiselect(', 'bool value)', 'void'),
  \ dotnet#method('get_ReadOnlyChecked(', ')', 'bool'),
  \ dotnet#method('set_ReadOnlyChecked(', 'bool value)', 'void'),
  \ dotnet#method('get_ShowReadOnly(', ')', 'bool'),
  \ dotnet#method('set_ShowReadOnly(', 'bool value)', 'void'),
  \ dotnet#method('CheckPermissionsToShowDialog(', ')', 'void'),
  \ dotnet#method('RunFileDialog(', 'class NativeMethods/OPENFILENAME_I ofn)', 'strict bool'),
  \ dotnet#method('ProcessVistaFiles(', 'class IFileDialog dialog)', 'strict string[]'),
  \ dotnet#method('CreateVistaDialog(', ')', 'strict'),
  \ dotnet#prop('Multiselect', 'bool'),
  \ dotnet#prop('ReadOnlyChecked', 'bool'),
  \ dotnet#prop('ShowReadOnly', 'bool'),
  \ ])

call dotnet#class('SaveFileDialog', 'FileDialog', [ 
  \ dotnet#method('SaveFileDialog(', ')', 'void'),
  \ dotnet#method('OpenFile(', ')', 'Stream'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_CreatePrompt(', ')', 'bool'),
  \ dotnet#method('set_CreatePrompt(', 'bool value)', 'void'),
  \ dotnet#method('get_OverwritePrompt(', ')', 'bool'),
  \ dotnet#method('set_OverwritePrompt(', 'bool value)', 'void'),
  \ dotnet#method('PromptUserIfAppropriate(', 'string fileName)', 'strict bool'),
  \ dotnet#method('RunFileDialog(', 'class NativeMethods/OPENFILENAME_I ofn)', 'strict bool'),
  \ dotnet#method('ProcessVistaFiles(', 'class IFileDialog dialog)', 'strict string[]'),
  \ dotnet#method('CreateVistaDialog(', ')', 'strict'),
  \ dotnet#prop('CreatePrompt', 'bool'),
  \ dotnet#prop('OverwritePrompt', 'bool'),
  \ ])

call dotnet#class('PowerModeChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('PowerModeChangedEventArgs(', 'PowerModes mode)', 'void'),
  \ dotnet#method('get_Mode(', ')', 'PowerModes'),
  \ dotnet#prop('Mode', 'PowerModes'),
  \ ])

call dotnet#class('PowerModeChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('PowerModeChangedEventHandler(', 'object object, int ethod)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, PowerModeChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, PowerModeChangedEventArgs e, AsyncCallback callback, object bject)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('SessionEndedEventArgs', 'EventArgs', [ 
  \ dotnet#method('SessionEndedEventArgs(', 'SessionEndReasons reason)', 'void'),
  \ dotnet#method('get_Reason(', ')', 'SessionEndReasons'),
  \ dotnet#prop('Reason', 'SessionEndReasons'),
  \ ])

call dotnet#class('SessionEndedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('SessionEndedEventHandler(', 'object object, int ethod)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, SessionEndedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, SessionEndedEventArgs e, AsyncCallback callback, object bject)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('SessionEndingEventArgs', 'EventArgs', [ 
  \ dotnet#method('SessionEndingEventArgs(', 'SessionEndReasons reason)', 'void'),
  \ dotnet#method('get_Cancel(', ')', 'bool'),
  \ dotnet#method('set_Cancel(', 'bool value)', 'void'),
  \ dotnet#method('get_Reason(', ')', 'SessionEndReasons'),
  \ dotnet#prop('Cancel', 'bool'),
  \ dotnet#prop('Reason', 'SessionEndReasons'),
  \ ])

call dotnet#class('SessionEndingEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('SessionEndingEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, SessionEndingEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, SessionEndingEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('SessionSwitchEventArgs', 'EventArgs', [ 
  \ dotnet#method('SessionSwitchEventArgs(', 'SessionSwitchReason reason)', 'void'),
  \ dotnet#method('get_Reason(', ')', 'SessionSwitchReason'),
  \ dotnet#prop('Reason', 'SessionSwitchReason'),
  \ ])

call dotnet#class('SessionSwitchEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('SessionSwitchEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, SessionSwitchEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, SessionSwitchEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('SystemEvents', 'Object', [ 
  \ dotnet#method('add_DisplaySettingsChanging(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_DisplaySettingsChanging(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_DisplaySettingsChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_DisplaySettingsChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_EventsThreadShutdown(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_EventsThreadShutdown(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_InstalledFontsChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_InstalledFontsChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_LowMemory(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_LowMemory(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_PaletteChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_PaletteChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_PowerModeChanged(', 'class PowerModeChangedEventHandler value)', 'static void'),
  \ dotnet#method('remove_PowerModeChanged(', 'class PowerModeChangedEventHandler value)', 'static void'),
  \ dotnet#method('add_SessionEnded(', 'class SessionEndedEventHandler value)', 'static void'),
  \ dotnet#method('remove_SessionEnded(', 'class SessionEndedEventHandler value)', 'static void'),
  \ dotnet#method('add_SessionEnding(', 'class SessionEndingEventHandler value)', 'static void'),
  \ dotnet#method('remove_SessionEnding(', 'class SessionEndingEventHandler value)', 'static void'),
  \ dotnet#method('add_SessionSwitch(', 'class SessionSwitchEventHandler value)', 'static void'),
  \ dotnet#method('remove_SessionSwitch(', 'class SessionSwitchEventHandler value)', 'static void'),
  \ dotnet#method('add_TimeChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_TimeChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('add_TimerElapsed(', 'class TimerElapsedEventHandler value)', 'static void'),
  \ dotnet#method('remove_TimerElapsed(', 'class TimerElapsedEventHandler value)', 'static void'),
  \ dotnet#method('add_UserPreferenceChanged(', 'class UserPreferenceChangedEventHandler value)', 'static void'),
  \ dotnet#method('remove_UserPreferenceChanged(', 'class UserPreferenceChangedEventHandler value)', 'static void'),
  \ dotnet#method('add_UserPreferenceChanging(', 'class UserPreferenceChangingEventHandler value)', 'static void'),
  \ dotnet#method('remove_UserPreferenceChanging(', 'class UserPreferenceChangingEventHandler value)', 'static void'),
  \ dotnet#method('CreateTimer(', 'int32 interval)', 'static int'),
  \ dotnet#method('InvokeOnEventsThread(', 'class Delegate method)', 'static void'),
  \ dotnet#method('KillTimer(', 'native int timerId)', 'static void'),
  \ dotnet#method('SystemEvents(', ')', 'void'),
  \ dotnet#method('SystemEvents(', ')', 'static void .'),
  \ dotnet#event('DisplaySettingsChanging', 'EventHandler'),
  \ dotnet#event('DisplaySettingsChanged', 'EventHandler'),
  \ dotnet#event('EventsThreadShutdown', 'EventHandler'),
  \ dotnet#event('InstalledFontsChanged', 'EventHandler'),
  \ dotnet#event('LowMemory', 'EventHandler'),
  \ dotnet#event('PaletteChanged', 'EventHandler'),
  \ dotnet#event('PowerModeChanged', 'PowerModeChangedEventHandler'),
  \ dotnet#event('SessionEnded', 'SessionEndedEventHandler'),
  \ dotnet#event('SessionEnding', 'SessionEndingEventHandler'),
  \ dotnet#event('SessionSwitch', 'SessionSwitchEventHandler'),
  \ dotnet#event('TimeChanged', 'EventHandler'),
  \ dotnet#event('TimerElapsed', 'TimerElapsedEventHandler'),
  \ dotnet#event('UserPreferenceChanged', 'UserPreferenceChangedEventHandler'),
  \ dotnet#event('UserPreferenceChanging', 'UserPreferenceChangingEventHandler'),
  \ ])

call dotnet#class('TimerElapsedEventArgs', 'EventArgs', [ 
  \ dotnet#method('TimerElapsedEventArgs(', 'native int timerId)', 'void'),
  \ dotnet#method('get_TimerId(', ')', 'int'),
  \ dotnet#prop('TimerId', 'int'),
  \ ])

call dotnet#class('TimerElapsedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('TimerElapsedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, TimerElapsedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, TimerElapsedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('UserPreferenceChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('UserPreferenceChangedEventArgs(', 'UserPreferenceCategory category)', 'void'),
  \ dotnet#method('get_Category(', ')', 'UserPreferenceCategory'),
  \ dotnet#prop('Category', 'UserPreferenceCategory'),
  \ ])

call dotnet#class('UserPreferenceChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('UserPreferenceChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, UserPreferenceChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, UserPreferenceChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('UserPreferenceChangingEventArgs', 'EventArgs', [ 
  \ dotnet#method('UserPreferenceChangingEventArgs(', 'UserPreferenceCategory category)', 'void'),
  \ dotnet#method('get_Category(', ')', 'UserPreferenceCategory'),
  \ dotnet#prop('Category', 'UserPreferenceCategory'),
  \ ])

call dotnet#class('UserPreferenceChangingEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('UserPreferenceChangingEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, UserPreferenceChangingEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, UserPreferenceChangingEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('IntranetZoneCredentialPolicy', 'Object', [ 
  \ dotnet#method('IntranetZoneCredentialPolicy(', ')', 'void'),
  \ dotnet#method('ShouldSendCredential(', 'class Uri challengeUri, WebRequest request, NetworkCredential credential, IAuthenticationModule authModule)', 'bool'),
  \ ])

