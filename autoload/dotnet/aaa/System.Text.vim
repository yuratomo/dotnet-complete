call dotnet#namespace('System.Text')

call dotnet#class('StringBuilder', 'Object', [ 
  \ dotnet#field('m_ChunkChars', 'char[]'),
  \ dotnet#field('m_ChunkPrevious', 'StringBuilder'),
  \ dotnet#field('m_ChunkLength', 'int32'),
  \ dotnet#field('m_ChunkOffset', 'int32'),
  \ dotnet#field('m_MaxCapacity', 'int32'),
  \ dotnet#method('StringBuilder(', ')', 'void'),
  \ dotnet#method('StringBuilder(', 'int32 capacity)', 'void'),
  \ dotnet#method('StringBuilder(', 'string value)', 'void'),
  \ dotnet#method('StringBuilder(', 'string value, int32 capacity)', 'void'),
  \ dotnet#method('StringBuilder(', 'string value, int32 startIndex, int32 length, int32 capacity)', 'void'),
  \ dotnet#method('StringBuilder(', 'int32 capacity, int32 maxCapacity)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_MaxCapacity(', ')', 'int32'),
  \ dotnet#method('EnsureCapacity(', 'int32 capacity)', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'int32 startIndex, int32 length)', 'string'),
  \ dotnet#method('Clear(', ')', 'StringBuilder'),
  \ dotnet#method('get_Length(', ')', 'int32'),
  \ dotnet#method('set_Length(', 'int32 value)', 'void'),
  \ dotnet#method('get_Chars(', 'int32 index)', 'char'),
  \ dotnet#method('set_Chars(', 'int32 index, char value)', 'void'),
  \ dotnet#method('Append(', 'char value, int32 repeatCount)', 'StringBuilder'),
  \ dotnet#method('Append(', 'char[] value, int32 startIndex, int32 charCount)', 'StringBuilder'),
  \ dotnet#method('Append(', 'string value)', 'StringBuilder'),
  \ dotnet#method('ReplaceBufferInternal(', 'char* newBuffer, int32 newLength) internalcall', 'void'),
  \ dotnet#method('ReplaceBufferAnsiInternal(', 'int8* newBuffer, int32 newLength) internalcall', 'void'),
  \ dotnet#method('Append(', 'string value, int32 startIndex, int32 count)', 'StringBuilder'),
  \ dotnet#method('AppendLine(', ')', 'StringBuilder'),
  \ dotnet#method('AppendLine(', 'string value)', 'StringBuilder'),
  \ dotnet#method('CopyTo(', 'int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count)', 'void'),
  \ dotnet#method('Insert(', 'int32 index, string value, int32 count)', 'StringBuilder'),
  \ dotnet#method('Remove(', 'int32 startIndex, int32 length)', 'StringBuilder'),
  \ dotnet#method('Append(', 'bool value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'int8 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'uint8 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'char value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'int16 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'int32 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'int64 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'float32 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'float64 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'Decimal value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'uint16 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'uint32 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'uint64 value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'object value)', 'StringBuilder'),
  \ dotnet#method('Append(', 'char[] value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, string value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, bool value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, int8 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, uint8 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, int16 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, char value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, char[] value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, char[] value, int32 startIndex, int32 charCount)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, int32 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, int64 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, float32 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, float64 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, Decimal value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, uint16 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, uint32 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, uint64 value)', 'StringBuilder'),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'StringBuilder'),
  \ dotnet#method('AppendFormat(', 'string format, object arg0)', 'StringBuilder'),
  \ dotnet#method('AppendFormat(', 'string format, object arg0, object arg1)', 'StringBuilder'),
  \ dotnet#method('AppendFormat(', 'string format, object arg0, object arg1, object arg2)', 'StringBuilder'),
  \ dotnet#method('AppendFormat(', 'string format, object[] args)', 'StringBuilder'),
  \ dotnet#method('AppendFormat(', 'class IFormatProvider provider, string format, object[] args)', 'StringBuilder'),
  \ dotnet#method('Replace(', 'string oldValue, string newValue)', 'StringBuilder'),
  \ dotnet#method('Equals(', 'class StringBuilder sb)', 'bool'),
  \ dotnet#method('Replace(', 'string oldValue, string newValue, int32 startIndex, int32 count)', 'StringBuilder'),
  \ dotnet#method('Replace(', 'char oldChar, char newChar)', 'StringBuilder'),
  \ dotnet#method('Replace(', 'char oldChar, char newChar, int32 startIndex, int32 count)', 'StringBuilder'),
  \ dotnet#method('Append(', 'char* value, int32 valueCount)', 'StringBuilder'),
  \ dotnet#method('InternalCopy(', 'native int dest, int32 len)', 'void'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('MaxCapacity', 'int32'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('Chars(int32)', 'char'),
  \ ])

call dotnet#class('Encoding', 'Object', [ 
  \ dotnet#field('charLeftOver', 'char'),
  \ dotnet#method('Encoding(', 'class Encoding encoding)', 'void'),
  \ dotnet#method('Encoding(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetRealObject(', 'StreamingContext context)', 'object'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetByteCount(', 'char[] chars, int32 index, int32 count, bool flush)', 'int32'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count, bool flush)', 'int32'),
  \ dotnet#method('GetBytes(', 'char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex, bool flush)', 'int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount, bool flush)', 'int32'),
  \ dotnet#method('Encoding(', 'class Encoding encoding)', 'void'),
  \ dotnet#method('Encoding(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetRealObject(', 'StreamingContext context)', 'object'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count, bool flush)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count, bool flush)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex, bool flush)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount, bool flush)', 'int32'),
  \ dotnet#method('Encoding(', 'class Encoding enc, DecoderNLS decoder, char* charStart, int32 charCount, uint8* byteStart, int32 byteCount)', 'void'),
  \ dotnet#method('AddChar(', 'char ch, int32 numBytes)', 'bool'),
  \ dotnet#method('AddChar(', 'char ch)', 'bool'),
  \ dotnet#method('AddChar(', 'char ch1, char ch2, int32 numBytes)', 'bool'),
  \ dotnet#method('AdjustBytes(', 'int32 count)', 'void'),
  \ dotnet#method('get_MoreData(', ')', 'bool'),
  \ dotnet#method('EvenMoreData(', 'int32 count)', 'bool'),
  \ dotnet#method('GetNextByte(', ')', 'uint8'),
  \ dotnet#method('get_BytesUsed(', ')', 'int32'),
  \ dotnet#method('Fallback(', 'uint8 fallbackByte)', 'bool'),
  \ dotnet#method('Fallback(', 'uint8 byte1, uint8 byte2)', 'bool'),
  \ dotnet#method('Fallback(', 'uint8 byte1, uint8 byte2, uint8 byte3, uint8 byte4)', 'bool'),
  \ dotnet#method('Fallback(', 'uint8[] byteBuffer)', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#prop('MoreData', 'bool'),
  \ dotnet#prop('BytesUsed', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#field('fallbackBuffer', 'EncoderFallbackBuffer'),
  \ dotnet#method('Encoding(', 'class Encoding inEncoding, EncoderNLS inEncoder, uint8* inByteStart, int32 inByteCount, char* inCharStart, int32 inCharCount)', 'void'),
  \ dotnet#method('AddByte(', 'uint8 b, int32 moreBytesExpected)', 'bool'),
  \ dotnet#method('AddByte(', 'uint8 b1)', 'bool'),
  \ dotnet#method('AddByte(', 'uint8 b1, uint8 b2)', 'bool'),
  \ dotnet#method('AddByte(', 'uint8 b1, uint8 b2, int32 moreBytesExpected)', 'bool'),
  \ dotnet#method('AddByte(', 'uint8 b1, uint8 b2, uint8 b3)', 'bool'),
  \ dotnet#method('AddByte(', 'uint8 b1, uint8 b2, uint8 b3, int32 moreBytesExpected)', 'bool'),
  \ dotnet#method('AddByte(', 'uint8 b1, uint8 b2, uint8 b3, uint8 b4)', 'bool'),
  \ dotnet#method('MovePrevious(', 'bool bThrow)', 'void'),
  \ dotnet#method('Fallback(', 'char charFallback)', 'bool'),
  \ dotnet#method('get_MoreData(', ')', 'bool'),
  \ dotnet#method('GetNextChar(', ')', 'char'),
  \ dotnet#method('get_CharsUsed(', ')', 'int32'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#prop('MoreData', 'bool'),
  \ dotnet#prop('CharsUsed', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#field('m_codePage', 'int32'),
  \ dotnet#field('dataItem', 'CodePageDataItem'),
  \ dotnet#field('m_deserializedFromEverett', 'bool'),
  \ dotnet#field('encoderFallback', 'EncoderFallback'),
  \ dotnet#field('decoderFallback', 'DecoderFallback'),
  \ dotnet#method('Encoding(', ')', 'void'),
  \ dotnet#method('Encoding(', 'int32 codePage)', 'void'),
  \ dotnet#method('SetDefaultFallbacks(', ')', 'strict void'),
  \ dotnet#method('OnDeserializing(', ')', 'void'),
  \ dotnet#method('OnDeserialized(', ')', 'void'),
  \ dotnet#method('DeserializeEncoding(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('SerializeEncoding(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('Convert(', 'class Encoding srcEncoding, Encoding dstEncoding, uint8[] bytes)', 'static uint8[]'),
  \ dotnet#method('Convert(', 'class Encoding srcEncoding, Encoding dstEncoding, uint8[] bytes, int32 index, int32 count)', 'static uint8[]'),
  \ dotnet#method('GetEncoding(', 'int32 codepage)', 'static Encoding'),
  \ dotnet#method('GetEncoding(', 'int32 codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback)', 'static Encoding'),
  \ dotnet#method('GetEncoding(', 'string name)', 'static Encoding'),
  \ dotnet#method('GetEncoding(', 'string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback)', 'static Encoding'),
  \ dotnet#method('GetEncodings(', ')', 'static EncodingInfo[]'),
  \ dotnet#method('GetPreamble(', ')', 'uint8[]'),
  \ dotnet#method('get_BodyName(', ')', 'string'),
  \ dotnet#method('get_EncodingName(', ')', 'string'),
  \ dotnet#method('get_HeaderName(', ')', 'string'),
  \ dotnet#method('get_WebName(', ')', 'string'),
  \ dotnet#method('get_WindowsCodePage(', ')', 'int32'),
  \ dotnet#method('get_IsBrowserDisplay(', ')', 'bool'),
  \ dotnet#method('get_IsBrowserSave(', ')', 'bool'),
  \ dotnet#method('get_IsMailNewsDisplay(', ')', 'bool'),
  \ dotnet#method('get_IsMailNewsSave(', ')', 'bool'),
  \ dotnet#method('get_IsSingleByte(', ')', 'bool'),
  \ dotnet#method('get_EncoderFallback(', ')', 'EncoderFallback'),
  \ dotnet#method('set_EncoderFallback(', 'class EncoderFallback value)', 'void'),
  \ dotnet#method('get_DecoderFallback(', ')', 'DecoderFallback'),
  \ dotnet#method('set_DecoderFallback(', 'class DecoderFallback value)', 'void'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_ASCII(', ')', 'static Encoding'),
  \ dotnet#method('GetByteCount(', 'char[] chars)', 'int32'),
  \ dotnet#method('GetByteCount(', 'string s)', 'int32'),
  \ dotnet#method('GetByteCount(', 'char[] chars, int32 index, int32 count)', 'abstract int32'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count)', 'int32'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count, EncoderNLS encoder)', 'strict int32'),
  \ dotnet#method('GetBytes(', 'char[] chars)', 'uint8[]'),
  \ dotnet#method('GetBytes(', 'char[] chars, int32 index, int32 count)', 'uint8[]'),
  \ dotnet#method('GetBytes(', 'char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'abstract int32'),
  \ dotnet#method('GetBytes(', 'string s)', 'uint8[]'),
  \ dotnet#method('GetBytes(', 'string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount, EncoderNLS encoder)', 'strict int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count)', 'abstract int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count, DecoderNLS decoder)', 'strict int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes)', 'char[]'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 index, int32 count)', 'char[]'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)', 'abstract int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount, DecoderNLS decoder)', 'strict int32'),
  \ dotnet#method('get_CodePage(', ')', 'int32'),
  \ dotnet#method('IsAlwaysNormalized(', ')', 'bool'),
  \ dotnet#method('IsAlwaysNormalized(', 'NormalizationForm form)', 'bool'),
  \ dotnet#method('GetDecoder(', ')', ''),
  \ dotnet#method('get_Default(', ')', 'static Encoding'),
  \ dotnet#method('GetEncoder(', ')', ''),
  \ dotnet#method('GetMaxByteCount(', 'int32 charCount)', 'abstract int32'),
  \ dotnet#method('GetMaxCharCount(', 'int32 byteCount)', 'abstract int32'),
  \ dotnet#method('GetString(', 'uint8[] bytes)', 'string'),
  \ dotnet#method('GetString(', 'uint8[] bytes, int32 index, int32 count)', 'string'),
  \ dotnet#method('get_Unicode(', ')', 'static Encoding'),
  \ dotnet#method('get_BigEndianUnicode(', ')', 'static Encoding'),
  \ dotnet#method('get_UTF7(', ')', 'static Encoding'),
  \ dotnet#method('get_UTF8(', ')', 'static Encoding'),
  \ dotnet#method('get_UTF32(', ')', 'static Encoding'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetBestFitUnicodeToBytesData(', ')', 'strict char[]'),
  \ dotnet#method('GetBestFitBytesToUnicodeData(', ')', 'strict char[]'),
  \ dotnet#method('ThrowBytesOverflow(', ')', 'void'),
  \ dotnet#method('ThrowBytesOverflow(', 'class EncoderNLS encoder, bool nothingEncoded)', 'void'),
  \ dotnet#method('ThrowCharsOverflow(', ')', 'void'),
  \ dotnet#method('ThrowCharsOverflow(', 'class DecoderNLS decoder, bool nothingDecoded)', 'void'),
  \ dotnet#method('Encoding(', ')', 'static void .'),
  \ dotnet#prop('BodyName', 'string'),
  \ dotnet#prop('EncodingName', 'string'),
  \ dotnet#prop('HeaderName', 'string'),
  \ dotnet#prop('WebName', 'string'),
  \ dotnet#prop('WindowsCodePage', 'int32'),
  \ dotnet#prop('IsBrowserDisplay', 'bool'),
  \ dotnet#prop('IsBrowserSave', 'bool'),
  \ dotnet#prop('IsMailNewsDisplay', 'bool'),
  \ dotnet#prop('IsMailNewsSave', 'bool'),
  \ dotnet#prop('IsSingleByte', 'bool'),
  \ dotnet#prop('EncoderFallback', 'EncoderFallback'),
  \ dotnet#prop('DecoderFallback', 'DecoderFallback'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('ASCII', 'Encoding'),
  \ dotnet#prop('CodePage', 'int32'),
  \ dotnet#prop('Default', 'Encoding'),
  \ dotnet#prop('Unicode', 'Encoding'),
  \ dotnet#prop('BigEndianUnicode', 'Encoding'),
  \ dotnet#prop('UTF7', 'Encoding'),
  \ dotnet#prop('UTF8', 'Encoding'),
  \ dotnet#prop('UTF32', 'Encoding'),
  \ ])

call dotnet#class('Encoder', 'Object', [ 
  \ dotnet#field('m_fallback', 'EncoderFallback'),
  \ dotnet#field('m_fallbackBuffer', 'EncoderFallbackBuffer'),
  \ dotnet#method('SerializeEncoder(', 'class SerializationInfo info)', 'void'),
  \ dotnet#method('Encoder(', ')', 'void'),
  \ dotnet#method('get_Fallback(', ')', 'EncoderFallback'),
  \ dotnet#method('set_Fallback(', 'class EncoderFallback value)', 'void'),
  \ dotnet#method('get_FallbackBuffer(', ')', 'EncoderFallbackBuffer'),
  \ dotnet#method('get_InternalHasFallbackBuffer(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('GetByteCount(', 'char[] chars, int32 index, int32 count, bool flush)', 'abstract int32'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count, bool flush)', 'int32'),
  \ dotnet#method('GetBytes(', 'char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex, bool flush)', 'abstract int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount, bool flush)', 'int32'),
  \ dotnet#method('Convert(', 'char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex, int32 byteCount, bool flush, [out] int32& charsUsed, [out] int32& bytesUsed, [out] bool& completed)', 'void'),
  \ dotnet#method('Convert(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount, bool flush, [out] int32& charsUsed, [out] int32& bytesUsed, [out] bool& completed)', 'void'),
  \ dotnet#prop('Fallback', 'EncoderFallback'),
  \ dotnet#prop('FallbackBuffer', 'EncoderFallbackBuffer'),
  \ dotnet#prop('InternalHasFallbackBuffer', 'bool'),
  \ ])

call dotnet#class('Decoder', 'Object', [ 
  \ dotnet#field('m_fallback', 'DecoderFallback'),
  \ dotnet#field('m_fallbackBuffer', 'DecoderFallbackBuffer'),
  \ dotnet#method('SerializeDecoder(', 'class SerializationInfo info)', 'void'),
  \ dotnet#method('Decoder(', ')', 'void'),
  \ dotnet#method('get_Fallback(', ')', 'DecoderFallback'),
  \ dotnet#method('set_Fallback(', 'class DecoderFallback value)', 'void'),
  \ dotnet#method('get_FallbackBuffer(', ')', 'DecoderFallbackBuffer'),
  \ dotnet#method('get_InternalHasFallbackBuffer(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count)', 'abstract int32'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count, bool flush)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count, bool flush)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)', 'abstract int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex, bool flush)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount, bool flush)', 'int32'),
  \ dotnet#method('Convert(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex, int32 charCount, bool flush, [out] int32& bytesUsed, [out] int32& charsUsed, [out] bool& completed)', 'void'),
  \ dotnet#method('Convert(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount, bool flush, [out] int32& bytesUsed, [out] int32& charsUsed, [out] bool& completed)', 'void'),
  \ dotnet#prop('Fallback', 'DecoderFallback'),
  \ dotnet#prop('FallbackBuffer', 'DecoderFallbackBuffer'),
  \ dotnet#prop('InternalHasFallbackBuffer', 'bool'),
  \ ])

call dotnet#class('ASCIIEncoding', 'Encoding', [ 
  \ dotnet#method('ASCIIEncoding(', ')', 'void'),
  \ dotnet#method('SetDefaultFallbacks(', ')', 'strict void'),
  \ dotnet#method('GetByteCount(', 'char[] chars, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetByteCount(', 'string chars)', 'int32'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count)', 'int32'),
  \ dotnet#method('GetBytes(', 'string chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount)', 'int32'),
  \ dotnet#method('GetString(', 'uint8[] bytes, int32 byteIndex, int32 byteCount)', 'string'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 charCount, EncoderNLS encoder)', 'strict int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount, EncoderNLS encoder)', 'strict int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count, DecoderNLS decoder)', 'strict int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount, DecoderNLS decoder)', 'strict int32'),
  \ dotnet#method('GetMaxByteCount(', 'int32 charCount)', 'int32'),
  \ dotnet#method('GetMaxCharCount(', 'int32 byteCount)', 'int32'),
  \ dotnet#method('get_IsSingleByte(', ')', 'bool'),
  \ dotnet#method('GetDecoder(', ')', 'Decoder'),
  \ dotnet#method('GetEncoder(', ')', 'Encoder'),
  \ dotnet#prop('IsSingleByte', 'bool'),
  \ ])

call dotnet#class('DecoderFallback', 'Object', [ 
  \ dotnet#field('bIsMicrosoftBestFitFallback', 'bool'),
  \ dotnet#method('get_ReplacementFallback(', ')', 'static'),
  \ dotnet#method('get_ExceptionFallback(', ')', 'static'),
  \ dotnet#method('CreateFallbackBuffer(', ')', 'abstract'),
  \ dotnet#method('get_MaxCharCount(', ')', 'abstract int32'),
  \ dotnet#method('get_IsMicrosoftBestFitFallback(', ')', 'bool'),
  \ dotnet#method('DecoderFallback(', ')', 'void'),
  \ dotnet#prop('ReplacementFallback', 'DecoderFallback'),
  \ dotnet#prop('ExceptionFallback', 'DecoderFallback'),
  \ dotnet#prop('MaxCharCount', 'int32'),
  \ dotnet#prop('IsMicrosoftBestFitFallback', 'bool'),
  \ ])

call dotnet#class('DecoderFallbackBuffer', 'Object', [ 
  \ dotnet#field('byteStart', 'uint8*'),
  \ dotnet#field('charEnd', 'char*'),
  \ dotnet#method('Fallback(', 'uint8[] bytesUnknown, int32 index)', 'abstract bool'),
  \ dotnet#method('GetNextChar(', ')', 'abstract char'),
  \ dotnet#method('MovePrevious(', ')', 'abstract bool'),
  \ dotnet#method('get_Remaining(', ')', 'abstract int32'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('InternalReset(', ')', 'void'),
  \ dotnet#method('InternalInitialize(', 'uint8* byteStart, char* charEnd)', 'void'),
  \ dotnet#method('InternalFallback(', 'uint8[] bytes, uint8* pBytes, char*& chars)', 'strict bool'),
  \ dotnet#method('InternalFallback(', 'uint8[] bytes, uint8* pBytes)', 'strict int32'),
  \ dotnet#method('ThrowLastBytesRecursive(', 'uint8[] bytesUnknown)', 'void'),
  \ dotnet#method('DecoderFallbackBuffer(', ')', 'void'),
  \ dotnet#prop('Remaining', 'int32'),
  \ ])

call dotnet#class('DecoderExceptionFallback', 'DecoderFallback', [ 
  \ dotnet#method('DecoderExceptionFallback(', ')', 'void'),
  \ dotnet#method('CreateFallbackBuffer(', ')', 'DecoderFallbackBuffer'),
  \ dotnet#method('get_MaxCharCount(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('MaxCharCount', 'int32'),
  \ ])

call dotnet#class('DecoderExceptionFallbackBuffer', 'DecoderFallbackBuffer', [ 
  \ dotnet#method('Fallback(', 'uint8[] bytesUnknown, int32 index)', 'bool'),
  \ dotnet#method('GetNextChar(', ')', 'char'),
  \ dotnet#method('MovePrevious(', ')', 'bool'),
  \ dotnet#method('get_Remaining(', ')', 'int32'),
  \ dotnet#method('DecoderExceptionFallbackBuffer(', ')', 'void'),
  \ dotnet#prop('Remaining', 'int32'),
  \ ])

call dotnet#class('DecoderFallbackException', 'ArgumentException', [ 
  \ dotnet#method('DecoderFallbackException(', ')', 'void'),
  \ dotnet#method('DecoderFallbackException(', 'string message)', 'void'),
  \ dotnet#method('DecoderFallbackException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('DecoderFallbackException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('DecoderFallbackException(', 'string message, uint8[] bytesUnknown, int32 index)', 'void'),
  \ dotnet#method('get_BytesUnknown(', ')', 'uint8[]'),
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#prop('BytesUnknown', 'uint8[]'),
  \ dotnet#prop('Index', 'int32'),
  \ ])

call dotnet#class('DecoderReplacementFallback', 'DecoderFallback', [ 
  \ dotnet#method('DecoderReplacementFallback(', ')', 'void'),
  \ dotnet#method('DecoderReplacementFallback(', 'string replacement)', 'void'),
  \ dotnet#method('get_DefaultString(', ')', 'string'),
  \ dotnet#method('CreateFallbackBuffer(', ')', 'DecoderFallbackBuffer'),
  \ dotnet#method('get_MaxCharCount(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('DefaultString', 'string'),
  \ dotnet#prop('MaxCharCount', 'int32'),
  \ ])

call dotnet#class('DecoderReplacementFallbackBuffer', 'DecoderFallbackBuffer', [ 
  \ dotnet#method('DecoderReplacementFallbackBuffer(', 'class DecoderReplacementFallback fallback)', 'void'),
  \ dotnet#method('Fallback(', 'uint8[] bytesUnknown, int32 index)', 'bool'),
  \ dotnet#method('GetNextChar(', ')', 'char'),
  \ dotnet#method('MovePrevious(', ')', 'bool'),
  \ dotnet#method('get_Remaining(', ')', 'int32'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('InternalFallback(', 'uint8[] bytes, uint8* pBytes)', 'strict int32'),
  \ dotnet#prop('Remaining', 'int32'),
  \ ])

call dotnet#class('EncoderFallback', 'Object', [ 
  \ dotnet#field('bIsMicrosoftBestFitFallback', 'bool'),
  \ dotnet#method('get_ReplacementFallback(', ')', 'static'),
  \ dotnet#method('get_ExceptionFallback(', ')', 'static'),
  \ dotnet#method('CreateFallbackBuffer(', ')', 'abstract'),
  \ dotnet#method('get_MaxCharCount(', ')', 'abstract int32'),
  \ dotnet#method('EncoderFallback(', ')', 'void'),
  \ dotnet#prop('ReplacementFallback', 'EncoderFallback'),
  \ dotnet#prop('ExceptionFallback', 'EncoderFallback'),
  \ dotnet#prop('MaxCharCount', 'int32'),
  \ ])

call dotnet#class('EncoderFallbackBuffer', 'Object', [ 
  \ dotnet#field('charStart', 'char*'),
  \ dotnet#field('charEnd', 'char*'),
  \ dotnet#field('encoder', 'EncoderNLS'),
  \ dotnet#field('setEncoder', 'bool'),
  \ dotnet#field('bUsedEncoder', 'bool'),
  \ dotnet#field('bFallingBack', 'bool'),
  \ dotnet#field('iRecursionCount', 'int32'),
  \ dotnet#method('Fallback(', 'char charUnknown, int32 index)', 'abstract bool'),
  \ dotnet#method('Fallback(', 'char charUnknownHigh, char charUnknownLow, int32 index)', 'abstract bool'),
  \ dotnet#method('GetNextChar(', ')', 'abstract char'),
  \ dotnet#method('MovePrevious(', ')', 'abstract bool'),
  \ dotnet#method('get_Remaining(', ')', 'abstract int32'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('InternalReset(', ')', 'void'),
  \ dotnet#method('InternalInitialize(', 'char* charStart, char* charEnd, EncoderNLS encoder, bool setEncoder)', 'void'),
  \ dotnet#method('InternalGetNextChar(', ')', 'char'),
  \ dotnet#method('InternalFallback(', 'char ch, char*& chars)', 'strict bool'),
  \ dotnet#method('ThrowLastCharRecursive(', 'int32 charRecursive)', 'void'),
  \ dotnet#method('EncoderFallbackBuffer(', ')', 'void'),
  \ dotnet#prop('Remaining', 'int32'),
  \ ])

call dotnet#class('EncoderExceptionFallback', 'EncoderFallback', [ 
  \ dotnet#method('EncoderExceptionFallback(', ')', 'void'),
  \ dotnet#method('CreateFallbackBuffer(', ')', 'EncoderFallbackBuffer'),
  \ dotnet#method('get_MaxCharCount(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('MaxCharCount', 'int32'),
  \ ])

call dotnet#class('EncoderExceptionFallbackBuffer', 'EncoderFallbackBuffer', [ 
  \ dotnet#method('EncoderExceptionFallbackBuffer(', ')', 'void'),
  \ dotnet#method('Fallback(', 'char charUnknown, int32 index)', 'bool'),
  \ dotnet#method('Fallback(', 'char charUnknownHigh, char charUnknownLow, int32 index)', 'bool'),
  \ dotnet#method('GetNextChar(', ')', 'char'),
  \ dotnet#method('MovePrevious(', ')', 'bool'),
  \ dotnet#method('get_Remaining(', ')', 'int32'),
  \ dotnet#prop('Remaining', 'int32'),
  \ ])

call dotnet#class('EncoderFallbackException', 'ArgumentException', [ 
  \ dotnet#method('EncoderFallbackException(', ')', 'void'),
  \ dotnet#method('EncoderFallbackException(', 'string message)', 'void'),
  \ dotnet#method('EncoderFallbackException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('EncoderFallbackException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('EncoderFallbackException(', 'string message, char charUnknown, int32 index)', 'void'),
  \ dotnet#method('EncoderFallbackException(', 'string message, char charUnknownHigh, char charUnknownLow, int32 index)', 'void'),
  \ dotnet#method('get_CharUnknown(', ')', 'char'),
  \ dotnet#method('get_CharUnknownHigh(', ')', 'char'),
  \ dotnet#method('get_CharUnknownLow(', ')', 'char'),
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#method('IsUnknownSurrogate(', ')', 'bool'),
  \ dotnet#prop('CharUnknown', 'char'),
  \ dotnet#prop('CharUnknownHigh', 'char'),
  \ dotnet#prop('CharUnknownLow', 'char'),
  \ dotnet#prop('Index', 'int32'),
  \ ])

call dotnet#class('EncoderReplacementFallback', 'EncoderFallback', [ 
  \ dotnet#method('EncoderReplacementFallback(', ')', 'void'),
  \ dotnet#method('EncoderReplacementFallback(', 'string replacement)', 'void'),
  \ dotnet#method('get_DefaultString(', ')', 'string'),
  \ dotnet#method('CreateFallbackBuffer(', ')', 'EncoderFallbackBuffer'),
  \ dotnet#method('get_MaxCharCount(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('DefaultString', 'string'),
  \ dotnet#prop('MaxCharCount', 'int32'),
  \ ])

call dotnet#class('EncoderReplacementFallbackBuffer', 'EncoderFallbackBuffer', [ 
  \ dotnet#method('EncoderReplacementFallbackBuffer(', 'class EncoderReplacementFallback fallback)', 'void'),
  \ dotnet#method('Fallback(', 'char charUnknown, int32 index)', 'bool'),
  \ dotnet#method('Fallback(', 'char charUnknownHigh, char charUnknownLow, int32 index)', 'bool'),
  \ dotnet#method('GetNextChar(', ')', 'char'),
  \ dotnet#method('MovePrevious(', ')', 'bool'),
  \ dotnet#method('get_Remaining(', ')', 'int32'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#prop('Remaining', 'int32'),
  \ ])

call dotnet#class('EncodingInfo', 'Object', [ 
  \ dotnet#method('EncodingInfo(', 'int32 codePage, string name, string displayName)', 'void'),
  \ dotnet#method('get_CodePage(', ')', 'int32'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_DisplayName(', ')', 'string'),
  \ dotnet#method('GetEncoding(', ')', 'Encoding'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('CodePage', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('DisplayName', 'string'),
  \ ])

call dotnet#class('UnicodeEncoding', 'Encoding', [ 
  \ dotnet#field('isThrowException', 'bool'),
  \ dotnet#field('bigEndian', 'bool'),
  \ dotnet#field('byteOrderMark', 'bool'),
  \ dotnet#method('UnicodeEncoding(', ')', 'void'),
  \ dotnet#method('UnicodeEncoding(', 'bool bigEndian, bool byteOrderMark)', 'void'),
  \ dotnet#method('UnicodeEncoding(', 'bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes)', 'void'),
  \ dotnet#method('SetDefaultFallbacks(', ')', 'strict void'),
  \ dotnet#method('GetByteCount(', 'char[] chars, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetByteCount(', 'string s)', 'int32'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count)', 'int32'),
  \ dotnet#method('GetBytes(', 'string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount)', 'int32'),
  \ dotnet#method('GetString(', 'uint8[] bytes, int32 index, int32 count)', 'string'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count, EncoderNLS encoder)', 'strict int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount, EncoderNLS encoder)', 'strict int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count, DecoderNLS baseDecoder)', 'strict int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount, DecoderNLS baseDecoder)', 'strict int32'),
  \ dotnet#method('GetEncoder(', ')', 'Encoder'),
  \ dotnet#method('GetDecoder(', ')', 'Decoder'),
  \ dotnet#method('GetPreamble(', ')', 'uint8[]'),
  \ dotnet#method('GetMaxByteCount(', 'int32 charCount)', 'int32'),
  \ dotnet#method('GetMaxCharCount(', 'int32 byteCount)', 'int32'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ ])

call dotnet#class('UTF7Encoding', 'Encoding', [ 
  \ dotnet#method('UTF7Encoding(', ')', 'void'),
  \ dotnet#method('CreateFallbackBuffer(', ')', 'DecoderFallbackBuffer'),
  \ dotnet#method('get_MaxCharCount(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('MaxCharCount', 'int32'),
  \ dotnet#method('UTF7Encoding(', 'class UTF7Encoding/DecoderUTF7Fallback fallback)', 'void'),
  \ dotnet#method('Fallback(', 'uint8[] bytesUnknown, int32 index)', 'bool'),
  \ dotnet#method('GetNextChar(', ')', 'char'),
  \ dotnet#method('MovePrevious(', ')', 'bool'),
  \ dotnet#method('get_Remaining(', ')', 'int32'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('InternalFallback(', 'uint8[] bytes, uint8* pBytes)', 'strict int32'),
  \ dotnet#prop('Remaining', 'int32'),
  \ dotnet#method('UTF7Encoding(', ')', 'void'),
  \ dotnet#method('UTF7Encoding(', 'bool allowOptionals)', 'void'),
  \ dotnet#method('SetDefaultFallbacks(', ')', 'strict void'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetByteCount(', 'char[] chars, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetByteCount(', 'string s)', 'int32'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count)', 'int32'),
  \ dotnet#method('GetBytes(', 'string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount)', 'int32'),
  \ dotnet#method('GetString(', 'uint8[] bytes, int32 index, int32 count)', 'string'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count, EncoderNLS baseEncoder)', 'strict int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount, EncoderNLS baseEncoder)', 'strict int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count, DecoderNLS baseDecoder)', 'strict int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount, DecoderNLS baseDecoder)', 'strict int32'),
  \ dotnet#method('GetDecoder(', ')', 'Decoder'),
  \ dotnet#method('GetEncoder(', ')', 'Encoder'),
  \ dotnet#method('GetMaxByteCount(', 'int32 charCount)', 'int32'),
  \ dotnet#method('GetMaxCharCount(', 'int32 byteCount)', 'int32'),
  \ ])

call dotnet#class('UTF8Encoding', 'Encoding', [ 
  \ dotnet#field('surrogateChar', 'int32'),
  \ dotnet#method('UTF8Encoding(', 'class UTF8Encoding encoding)', 'void'),
  \ dotnet#method('UTF8Encoding(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_HasState(', ')', 'strict bool'),
  \ dotnet#prop('HasState', 'bool'),
  \ dotnet#field('bits', 'int32'),
  \ dotnet#method('UTF8Encoding(', 'class UTF8Encoding encoding)', 'void'),
  \ dotnet#method('UTF8Encoding(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_HasState(', ')', 'strict bool'),
  \ dotnet#prop('HasState', 'bool'),
  \ dotnet#method('UTF8Encoding(', ')', 'void'),
  \ dotnet#method('UTF8Encoding(', 'bool encoderShouldEmitUTF8Identifier)', 'void'),
  \ dotnet#method('UTF8Encoding(', 'bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes)', 'void'),
  \ dotnet#method('SetDefaultFallbacks(', ')', 'strict void'),
  \ dotnet#method('GetByteCount(', 'char[] chars, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetByteCount(', 'string chars)', 'int32'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count)', 'int32'),
  \ dotnet#method('GetBytes(', 'string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount)', 'int32'),
  \ dotnet#method('GetString(', 'uint8[] bytes, int32 index, int32 count)', 'string'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count, EncoderNLS baseEncoder)', 'strict int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount, EncoderNLS baseEncoder)', 'strict int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count, DecoderNLS baseDecoder)', 'strict int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount, DecoderNLS baseDecoder)', 'strict int32'),
  \ dotnet#method('GetDecoder(', ')', 'Decoder'),
  \ dotnet#method('GetEncoder(', ')', 'Encoder'),
  \ dotnet#method('GetMaxByteCount(', 'int32 charCount)', 'int32'),
  \ dotnet#method('GetMaxCharCount(', 'int32 byteCount)', 'int32'),
  \ dotnet#method('GetPreamble(', ')', 'uint8[]'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ ])

call dotnet#class('UTF32Encoding', 'Encoding', [ 
  \ dotnet#field('iChar', 'int32'),
  \ dotnet#field('readByteCount', 'int32'),
  \ dotnet#method('UTF32Encoding(', 'class UTF32Encoding encoding)', 'void'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_HasState(', ')', 'strict bool'),
  \ dotnet#prop('HasState', 'bool'),
  \ dotnet#method('UTF32Encoding(', ')', 'void'),
  \ dotnet#method('UTF32Encoding(', 'bool bigEndian, bool byteOrderMark)', 'void'),
  \ dotnet#method('UTF32Encoding(', 'bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters)', 'void'),
  \ dotnet#method('SetDefaultFallbacks(', ')', 'strict void'),
  \ dotnet#method('GetByteCount(', 'char[] chars, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetByteCount(', 'string s)', 'int32'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count)', 'int32'),
  \ dotnet#method('GetBytes(', 'string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)', 'int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8[] bytes, int32 index, int32 count)', 'int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)', 'int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount)', 'int32'),
  \ dotnet#method('GetString(', 'uint8[] bytes, int32 index, int32 count)', 'string'),
  \ dotnet#method('GetByteCount(', 'char* chars, int32 count, EncoderNLS encoder)', 'strict int32'),
  \ dotnet#method('GetBytes(', 'char* chars, int32 charCount, uint8* bytes, int32 byteCount, EncoderNLS encoder)', 'strict int32'),
  \ dotnet#method('GetCharCount(', 'uint8* bytes, int32 count, DecoderNLS baseDecoder)', 'strict int32'),
  \ dotnet#method('GetChars(', 'uint8* bytes, int32 byteCount, char* chars, int32 charCount, DecoderNLS baseDecoder)', 'strict int32'),
  \ dotnet#method('GetDecoder(', ')', 'Decoder'),
  \ dotnet#method('GetEncoder(', ')', 'Encoder'),
  \ dotnet#method('GetMaxByteCount(', 'int32 charCount)', 'int32'),
  \ dotnet#method('GetMaxCharCount(', 'int32 byteCount)', 'int32'),
  \ dotnet#method('GetPreamble(', ')', 'uint8[]'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ ])

