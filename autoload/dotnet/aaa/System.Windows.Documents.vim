call dotnet#namespace('System.Windows.Documents')

call dotnet#class('ContentPosition', 'Object', [ 
  \ dotnet#method('ContentPosition(', ')', 'void'),
  \ dotnet#method('ContentPosition(', ')', 'static void .'),
  \ ])

call dotnet#class('DocumentPage', 'Object', [ 
  \ dotnet#method('DocumentPage(', 'class Visual visual)', 'void'),
  \ dotnet#method('DocumentPage(', 'class Visual visual, Size pageSize, Rect bleedBox, Rect contentBox)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Visual(', ')', ''),
  \ dotnet#method('get_Size(', ')', ''),
  \ dotnet#method('get_BleedBox(', ')', ''),
  \ dotnet#method('get_ContentBox(', ')', ''),
  \ dotnet#method('add_PageDestroyed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PageDestroyed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPageDestroyed(', 'class EventArgs e)', 'void'),
  \ dotnet#method('SetVisual(', 'class Visual visual)', 'void'),
  \ dotnet#method('SetSize(', 'Size size)', 'void'),
  \ dotnet#method('SetBleedBox(', 'Rect bleedBox)', 'void'),
  \ dotnet#method('SetContentBox(', 'Rect contentBox)', 'void'),
  \ dotnet#method('DocumentPage(', ')', 'static void .'),
  \ dotnet#event('PageDestroyed', 'EventHandler'),
  \ dotnet#prop('Visual', 'Visual'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('BleedBox', 'Rect'),
  \ dotnet#prop('ContentBox', 'Rect'),
  \ ])

call dotnet#class('DocumentPaginator', 'Object', [ 
  \ dotnet#method('GetPage(', 'int32 pageNumber)', 'abstract'),
  \ dotnet#method('GetPageAsync(', 'int32 pageNumber)', 'void'),
  \ dotnet#method('GetPageAsync(', 'int32 pageNumber, object userState)', 'void'),
  \ dotnet#method('ComputePageCount(', ')', 'void'),
  \ dotnet#method('ComputePageCountAsync(', ')', 'void'),
  \ dotnet#method('ComputePageCountAsync(', 'object userState)', 'void'),
  \ dotnet#method('CancelAsync(', 'object userState)', 'void'),
  \ dotnet#method('get_IsPageCountValid(', ')', 'abstract bool'),
  \ dotnet#method('get_PageCount(', ')', 'abstract int32'),
  \ dotnet#method('get_PageSize(', ')', 'abstract'),
  \ dotnet#method('set_PageSize(', 'Size value)', 'abstract void'),
  \ dotnet#method('get_Source(', ')', 'abstract'),
  \ dotnet#method('add_GetPageCompleted(', 'class GetPageCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_GetPageCompleted(', 'class GetPageCompletedEventHandler value)', 'void'),
  \ dotnet#method('add_ComputePageCountCompleted(', 'class AsyncCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_ComputePageCountCompleted(', 'class AsyncCompletedEventHandler value)', 'void'),
  \ dotnet#method('add_PagesChanged(', 'class PagesChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PagesChanged(', 'class PagesChangedEventHandler value)', 'void'),
  \ dotnet#method('OnGetPageCompleted(', 'class GetPageCompletedEventArgs e)', 'void'),
  \ dotnet#method('OnComputePageCountCompleted(', 'class AsyncCompletedEventArgs e)', 'void'),
  \ dotnet#method('OnPagesChanged(', 'class PagesChangedEventArgs e)', 'void'),
  \ dotnet#method('DocumentPaginator(', ')', 'void'),
  \ dotnet#event('GetPageCompleted', 'GetPageCompletedEventHandler'),
  \ dotnet#event('ComputePageCountCompleted', 'AsyncCompletedEventHandler'),
  \ dotnet#event('PagesChanged', 'PagesChangedEventHandler'),
  \ dotnet#prop('IsPageCountValid', 'bool'),
  \ dotnet#prop('PageCount', 'int32'),
  \ dotnet#prop('PageSize', 'Size'),
  \ dotnet#prop('Source', 'IDocumentPaginatorSource'),
  \ ])

call dotnet#class('DynamicDocumentPaginator', 'DocumentPaginator', [ 
  \ dotnet#method('GetPageNumber(', 'class ContentPosition contentPosition)', 'abstract int32'),
  \ dotnet#method('GetPageNumberAsync(', 'class ContentPosition contentPosition)', 'void'),
  \ dotnet#method('GetPageNumberAsync(', 'class ContentPosition contentPosition, object userState)', 'void'),
  \ dotnet#method('GetPagePosition(', 'class DocumentPage page)', 'abstract'),
  \ dotnet#method('GetObjectPosition(', 'object value)', 'abstract'),
  \ dotnet#method('get_IsBackgroundPaginationEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsBackgroundPaginationEnabled(', 'bool value)', 'void'),
  \ dotnet#method('add_GetPageNumberCompleted(', 'class GetPageNumberCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_GetPageNumberCompleted(', 'class GetPageNumberCompletedEventHandler value)', 'void'),
  \ dotnet#method('add_PaginationCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PaginationCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_PaginationProgress(', 'class PaginationProgressEventHandler value)', 'void'),
  \ dotnet#method('remove_PaginationProgress(', 'class PaginationProgressEventHandler value)', 'void'),
  \ dotnet#method('OnGetPageNumberCompleted(', 'class GetPageNumberCompletedEventArgs e)', 'void'),
  \ dotnet#method('OnPaginationProgress(', 'class PaginationProgressEventArgs e)', 'void'),
  \ dotnet#method('OnPaginationCompleted(', 'class EventArgs e)', 'void'),
  \ dotnet#method('DynamicDocumentPaginator(', ')', 'void'),
  \ dotnet#event('GetPageNumberCompleted', 'GetPageNumberCompletedEventHandler'),
  \ dotnet#event('PaginationCompleted', 'EventHandler'),
  \ dotnet#event('PaginationProgress', 'PaginationProgressEventHandler'),
  \ dotnet#prop('IsBackgroundPaginationEnabled', 'bool'),
  \ ])

call dotnet#class('GetPageCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('GetPageCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, GetPageCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, GetPageCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('GetPageCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('GetPageCompletedEventArgs(', 'class DocumentPage page, int32 pageNumber, Exception error, bool cancelled, object userState)', 'void'),
  \ dotnet#method('get_DocumentPage(', ')', 'DocumentPage'),
  \ dotnet#method('get_PageNumber(', ')', 'int32'),
  \ dotnet#prop('DocumentPage', 'DocumentPage'),
  \ dotnet#prop('PageNumber', 'int32'),
  \ ])

call dotnet#class('GetPageNumberCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('GetPageNumberCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, GetPageNumberCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, GetPageNumberCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('GetPageNumberCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('GetPageNumberCompletedEventArgs(', 'class ContentPosition contentPosition, int32 pageNumber, Exception error, bool cancelled, object userState)', 'void'),
  \ dotnet#method('get_ContentPosition(', ')', 'ContentPosition'),
  \ dotnet#method('get_PageNumber(', ')', 'int32'),
  \ dotnet#prop('ContentPosition', 'ContentPosition'),
  \ dotnet#prop('PageNumber', 'int32'),
  \ ])

call dotnet#class('PagesChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('PagesChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, PagesChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, PagesChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('PagesChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('PagesChangedEventArgs(', 'int32 start, int32 count)', 'void'),
  \ dotnet#method('get_Start(', ')', 'int32'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#prop('Start', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ ])

call dotnet#class('PaginationProgressEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('PaginationProgressEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, PaginationProgressEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, PaginationProgressEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('PaginationProgressEventArgs', 'EventArgs', [ 
  \ dotnet#method('PaginationProgressEventArgs(', 'int32 start, int32 count)', 'void'),
  \ dotnet#method('get_Start(', ')', 'int32'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#prop('Start', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ ])

call dotnet#class('Adorner', 'FrameworkElement', [ 
  \ dotnet#method('Adorner(', 'class UIElement adornedElement)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('GetLayoutClip(', 'Size layoutSlotSize)', 'Geometry'),
  \ dotnet#method('GetDesiredTransform(', 'class GeneralTransform transform)', ''),
  \ dotnet#method('get_AdornerClip(', ')', '.method'),
  \ dotnet#method('set_AdornerClip(', 'class Geometry value)', 'void'),
  \ dotnet#method('get_AdornerTransform(', ')', '.method'),
  \ dotnet#method('set_AdornerTransform(', 'class Transform value)', 'void'),
  \ dotnet#method('get_AdornedElement(', ')', 'UIElement'),
  \ dotnet#method('get_IsClipEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsClipEnabled(', 'bool value)', 'void'),
  \ dotnet#method('NeedsUpdate(', 'Size oldSize)', 'strict bool'),
  \ dotnet#prop('AdornerClip', 'Geometry'),
  \ dotnet#prop('AdornerTransform', 'Transform'),
  \ dotnet#prop('AdornedElement', 'UIElement'),
  \ dotnet#prop('IsClipEnabled', 'bool'),
  \ ])

call dotnet#class('AdornerDecorator', 'Decorator', [ 
  \ dotnet#method('AdornerDecorator(', ')', 'void'),
  \ dotnet#method('get_AdornerLayer(', ')', 'AdornerLayer'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('get_Child(', ')', ''),
  \ dotnet#method('set_Child(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#prop('AdornerLayer', 'AdornerLayer'),
  \ dotnet#prop('Child', 'UIElement'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('AdornerLayer', 'FrameworkElement', [ 
  \ dotnet#method('AdornerLayer(', 'class Adorner adorner)', 'void'),
  \ dotnet#method('get_Adorner(', ')', '.method'),
  \ dotnet#method('get_RenderSize(', ')', '.method'),
  \ dotnet#method('set_RenderSize(', 'Size value)', 'void'),
  \ dotnet#method('get_Transform(', ')', '.method'),
  \ dotnet#method('set_Transform(', 'class GeneralTransform value)', 'void'),
  \ dotnet#method('get_ZOrder(', ')', 'int32'),
  \ dotnet#method('set_ZOrder(', 'int32 value)', 'void'),
  \ dotnet#method('get_Clip(', ')', '.method'),
  \ dotnet#method('set_Clip(', 'class Geometry value)', 'void'),
  \ dotnet#prop('Adorner', 'Adorner'),
  \ dotnet#prop('RenderSize', 'Size'),
  \ dotnet#prop('Transform', 'GeneralTransform'),
  \ dotnet#prop('ZOrder', 'int32'),
  \ dotnet#prop('Clip', 'Geometry'),
  \ dotnet#method('AdornerLayer(', ')', 'void'),
  \ dotnet#method('AdornerLayer(', 'class Dispatcher context)', 'void'),
  \ dotnet#method('Add(', 'class Adorner adorner)', 'void'),
  \ dotnet#method('Remove(', 'class Adorner adorner)', 'void'),
  \ dotnet#method('Update(', ')', 'void'),
  \ dotnet#method('Update(', 'class UIElement element)', 'void'),
  \ dotnet#method('GetAdorners(', 'class UIElement element)', 'Adorner[]'),
  \ dotnet#method('AdornerHitTest(', 'Point point)', 'AdornerHitTestResult'),
  \ dotnet#method('GetAdornerLayer(', 'class Visual visual)', 'static AdornerLayer'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('Add(', 'class Adorner adorner, int32 zOrder)', 'void'),
  \ dotnet#method('InvalidateAdorner(', 'class AdornerLayer/AdornerInfo adornerInfo)', 'void'),
  \ dotnet#method('OnLayoutUpdated(', 'object sender, EventArgs args)', 'void'),
  \ dotnet#method('SetAdornerZOrder(', 'class Adorner adorner, int32 zOrder)', 'void'),
  \ dotnet#method('GetAdornerZOrder(', 'class Adorner adorner)', 'int32'),
  \ dotnet#method('get_ElementMap(', ')', '.method'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('ElementMap', 'HybridDictionary'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('TextElement', 'FrameworkContentElement', [ 
  \ dotnet#method('TextElement(', ')', 'void'),
  \ dotnet#method('Reposition(', 'class TextPointer start, TextPointer end)', 'void'),
  \ dotnet#method('RepositionWithContent(', 'class TextPointer textPosition)', 'void'),
  \ dotnet#method('get_TextRange(', ')', '.method'),
  \ dotnet#method('get_ElementStart(', ')', 'TextPointer'),
  \ dotnet#method('get_StaticElementStart(', ')', '.method'),
  \ dotnet#method('get_ContentStart(', ')', 'TextPointer'),
  \ dotnet#method('get_StaticContentStart(', ')', '.method'),
  \ dotnet#method('get_ContentEnd(', ')', 'TextPointer'),
  \ dotnet#method('get_StaticContentEnd(', ')', '.method'),
  \ dotnet#method('Contains(', 'class TextPointer position)', 'bool'),
  \ dotnet#method('get_ElementEnd(', ')', 'TextPointer'),
  \ dotnet#method('get_StaticElementEnd(', ')', '.method'),
  \ dotnet#method('get_FontFamily(', ')', 'FontFamily'),
  \ dotnet#method('set_FontFamily(', 'class Fontvalue)', 'void'),
  \ dotnet#method('SetFontFamily(', 'class DependencyObject element, Fontvalue)', 'static void'),
  \ dotnet#method('GetFontFamily(', 'class DependencyObject element)', 'static FontFamily'),
  \ dotnet#method('get_FontStyle(', ')', 'FontStyle'),
  \ dotnet#method('set_FontStyle(', 'FontStyle value)', 'void'),
  \ dotnet#method('SetFontStyle(', 'class DependencyObject element, FontStyle value)', 'static void'),
  \ dotnet#method('GetFontStyle(', 'class DependencyObject element)', 'static FontStyle'),
  \ dotnet#method('get_FontWeight(', ')', 'FontWeight'),
  \ dotnet#method('set_FontWeight(', 'FontWeight value)', 'void'),
  \ dotnet#method('SetFontWeight(', 'class DependencyObject element, FontWeight value)', 'static void'),
  \ dotnet#method('GetFontWeight(', 'class DependencyObject element)', 'static FontWeight'),
  \ dotnet#method('get_FontStretch(', ')', 'FontStretch'),
  \ dotnet#method('set_FontStretch(', 'FontStretch value)', 'void'),
  \ dotnet#method('SetFontStretch(', 'class DependencyObject element, FontStretch value)', 'static void'),
  \ dotnet#method('GetFontStretch(', 'class DependencyObject element)', 'static FontStretch'),
  \ dotnet#method('get_FontSize(', ')', 'float64'),
  \ dotnet#method('set_FontSize(', 'float64 value)', 'void'),
  \ dotnet#method('SetFontSize(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetFontSize(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('get_Foreground(', ')', 'Brush'),
  \ dotnet#method('set_Foreground(', 'class Brush value)', 'void'),
  \ dotnet#method('SetForeground(', 'class DependencyObject element, Brush value)', 'static void'),
  \ dotnet#method('GetForeground(', 'class DependencyObject element)', 'static Brush'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_TextEffects(', ')', 'TextEffectCollection'),
  \ dotnet#method('set_TextEffects(', 'class TextEffectCollection value)', 'void'),
  \ dotnet#method('get_Typography(', ')', 'Typography'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('NotifyTypographicPropertyChanged(', 'bool affectsMeasureOrArrange, bool localValueChanged, DependencyProperty property)', 'void'),
  \ dotnet#method('GetTypographyProperties(', 'class DependencyObject element)', 'static TypographyProperties'),
  \ dotnet#method('DeepEndInit(', ')', 'void'),
  \ dotnet#method('GetCommonAncestor(', 'class TextElement element1, TextElement element2)', 'static TextElement'),
  \ dotnet#method('OnTextUpdated(', ')', 'strict void'),
  \ dotnet#method('BeforeLogicalTreeChange(', ')', 'strict void'),
  \ dotnet#method('AfterLogicalTreeChange(', ')', 'strict void'),
  \ dotnet#method('get_TextContainer(', ')', '.method'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_IsInTree(', ')', 'bool'),
  \ dotnet#method('get_ElementStartOffset(', ')', 'int32'),
  \ dotnet#method('get_ContentStartOffset(', ')', 'int32'),
  \ dotnet#method('get_ContentEndOffset(', ')', 'int32'),
  \ dotnet#method('get_ElementEndOffset(', ')', 'int32'),
  \ dotnet#method('get_SymbolCount(', ')', 'int32'),
  \ dotnet#method('get_TextElementNode(', ')', '.method'),
  \ dotnet#method('set_TextElementNode(', 'class TextTreeTextElementNode value)', 'void'),
  \ dotnet#method('get_TypographyPropertiesGroup(', ')', '.method'),
  \ dotnet#method('get_IsIMEStructuralElement(', ')', 'strict bool'),
  \ dotnet#method('get_IMELeftEdgeCharCount(', ')', 'int32'),
  \ dotnet#method('get_IsFirstIMEVisibleSibling(', ')', 'strict bool'),
  \ dotnet#method('get_NextElement(', ')', '.method'),
  \ dotnet#method('get_PreviousElement(', ')', '.method'),
  \ dotnet#method('get_FirstChildElement(', ')', '.method'),
  \ dotnet#method('get_LastChildElement(', ')', '.method'),
  \ dotnet#method('TextElement(', ')', 'static void .'),
  \ dotnet#prop('TextRange', 'TextRange'),
  \ dotnet#prop('ElementStart', 'TextPointer'),
  \ dotnet#prop('StaticElementStart', 'StaticTextPointer'),
  \ dotnet#prop('ContentStart', 'TextPointer'),
  \ dotnet#prop('StaticContentStart', 'StaticTextPointer'),
  \ dotnet#prop('ContentEnd', 'TextPointer'),
  \ dotnet#prop('StaticContentEnd', 'StaticTextPointer'),
  \ dotnet#prop('ElementEnd', 'TextPointer'),
  \ dotnet#prop('StaticElementEnd', 'StaticTextPointer'),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('FontStyle', 'FontStyle'),
  \ dotnet#prop('FontWeight', 'FontWeight'),
  \ dotnet#prop('FontStretch', 'FontStretch'),
  \ dotnet#prop('FontSize', 'float64'),
  \ dotnet#prop('Foreground', 'Brush'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('TextEffects', 'TextEffectCollection'),
  \ dotnet#prop('Typography', 'Typography'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('TextContainer', 'TextContainer'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('IsInTree', 'bool'),
  \ dotnet#prop('ElementStartOffset', 'int32'),
  \ dotnet#prop('ContentStartOffset', 'int32'),
  \ dotnet#prop('ContentEndOffset', 'int32'),
  \ dotnet#prop('ElementEndOffset', 'int32'),
  \ dotnet#prop('SymbolCount', 'int32'),
  \ dotnet#prop('TextElementNode', 'TextTreeTextElementNode'),
  \ dotnet#prop('TypographyPropertiesGroup', 'TypographyProperties'),
  \ dotnet#prop('IsIMEStructuralElement', 'bool'),
  \ dotnet#prop('IMELeftEdgeCharCount', 'int32'),
  \ dotnet#prop('IsFirstIMEVisibleSibling', 'bool'),
  \ dotnet#prop('NextElement', 'TextElement'),
  \ dotnet#prop('PreviousElement', 'TextElement'),
  \ dotnet#prop('FirstChildElement', 'TextElement'),
  \ dotnet#prop('LastChildElement', 'TextElement'),
  \ ])

call dotnet#class('Inline', 'TextElement', [ 
  \ dotnet#method('Inline(', ')', 'void'),
  \ dotnet#method('get_SiblingInlines(', ')', 'InlineCollection'),
  \ dotnet#method('get_NextInline(', ')', 'Inline'),
  \ dotnet#method('get_PreviousInline(', ')', 'Inline'),
  \ dotnet#method('get_BaselineAlignment(', ')', 'BaselineAlignment'),
  \ dotnet#method('set_BaselineAlignment(', 'BaselineAlignment value)', 'void'),
  \ dotnet#method('get_TextDecorations(', ')', 'TextDecorationCollection'),
  \ dotnet#method('set_TextDecorations(', 'class TextDecorationCollection value)', 'void'),
  \ dotnet#method('get_FlowDirection(', ')', 'FlowDirection'),
  \ dotnet#method('set_FlowDirection(', 'FlowDirection value)', 'void'),
  \ dotnet#method('CreateImplicitRun(', 'class DependencyObject parent)', 'static Run'),
  \ dotnet#method('CreateImplicitInlineUIContainer(', 'class DependencyObject parent)', 'static InlineUIContainer'),
  \ dotnet#method('Inline(', ')', 'static void .'),
  \ dotnet#prop('SiblingInlines', 'InlineCollection'),
  \ dotnet#prop('NextInline', 'Inline'),
  \ dotnet#prop('PreviousInline', 'Inline'),
  \ dotnet#prop('BaselineAlignment', 'BaselineAlignment'),
  \ dotnet#prop('TextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ ])

call dotnet#class('AnchoredBlock', 'Inline', [ 
  \ dotnet#method('AnchoredBlock(', 'class Block block, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('get_Blocks(', ')', 'BlockCollection'),
  \ dotnet#method('get_Margin(', ')', 'Thickness'),
  \ dotnet#method('set_Margin(', 'Thickness value)', 'void'),
  \ dotnet#method('get_Padding(', ')', 'Thickness'),
  \ dotnet#method('set_Padding(', 'Thickness value)', 'void'),
  \ dotnet#method('get_BorderThickness(', ')', 'Thickness'),
  \ dotnet#method('set_BorderThickness(', 'Thickness value)', 'void'),
  \ dotnet#method('get_BorderBrush(', ')', 'Brush'),
  \ dotnet#method('set_BorderBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_TextAlignment(', ')', 'TextAlignment'),
  \ dotnet#method('set_TextAlignment(', 'TextAlignment value)', 'void'),
  \ dotnet#method('get_LineHeight(', ')', 'float64'),
  \ dotnet#method('set_LineHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_LineStackingStrategy(', ')', 'LineStackingStrategy'),
  \ dotnet#method('set_LineStackingStrategy(', 'LineStackingStrategy value)', 'void'),
  \ dotnet#method('ShouldSerializeBlocks(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#method('get_IsIMEStructuralElement(', ')', 'strict bool'),
  \ dotnet#method('AnchoredBlock(', ')', 'static void .'),
  \ dotnet#prop('Blocks', 'BlockCollection'),
  \ dotnet#prop('Margin', 'Thickness'),
  \ dotnet#prop('Padding', 'Thickness'),
  \ dotnet#prop('BorderThickness', 'Thickness'),
  \ dotnet#prop('BorderBrush', 'Brush'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('LineStackingStrategy', 'LineStackingStrategy'),
  \ dotnet#prop('IsIMEStructuralElement', 'bool'),
  \ ])

call dotnet#class('Block', 'TextElement', [ 
  \ dotnet#method('get_SiblingBlocks(', ')', 'BlockCollection'),
  \ dotnet#method('get_NextBlock(', ')', 'Block'),
  \ dotnet#method('get_PreviousBlock(', ')', 'Block'),
  \ dotnet#method('get_IsHyphenationEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsHyphenationEnabled(', 'bool value)', 'void'),
  \ dotnet#method('SetIsHyphenationEnabled(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetIsHyphenationEnabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('get_Margin(', ')', 'Thickness'),
  \ dotnet#method('set_Margin(', 'Thickness value)', 'void'),
  \ dotnet#method('get_Padding(', ')', 'Thickness'),
  \ dotnet#method('set_Padding(', 'Thickness value)', 'void'),
  \ dotnet#method('get_BorderThickness(', ')', 'Thickness'),
  \ dotnet#method('set_BorderThickness(', 'Thickness value)', 'void'),
  \ dotnet#method('get_BorderBrush(', ')', 'Brush'),
  \ dotnet#method('set_BorderBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_TextAlignment(', ')', 'TextAlignment'),
  \ dotnet#method('set_TextAlignment(', 'TextAlignment value)', 'void'),
  \ dotnet#method('SetTextAlignment(', 'class DependencyObject element, TextAlignment value)', 'static void'),
  \ dotnet#method('GetTextAlignment(', 'class DependencyObject element)', 'static TextAlignment'),
  \ dotnet#method('get_FlowDirection(', ')', 'FlowDirection'),
  \ dotnet#method('set_FlowDirection(', 'FlowDirection value)', 'void'),
  \ dotnet#method('get_LineHeight(', ')', 'float64'),
  \ dotnet#method('set_LineHeight(', 'float64 value)', 'void'),
  \ dotnet#method('SetLineHeight(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetLineHeight(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('get_LineStackingStrategy(', ')', 'LineStackingStrategy'),
  \ dotnet#method('set_LineStackingStrategy(', 'LineStackingStrategy value)', 'void'),
  \ dotnet#method('SetLineStackingStrategy(', 'class DependencyObject element, LineStackingStrategy value)', 'static void'),
  \ dotnet#method('GetLineStackingStrategy(', 'class DependencyObject element)', 'static LineStackingStrategy'),
  \ dotnet#method('get_BreakPageBefore(', ')', 'bool'),
  \ dotnet#method('set_BreakPageBefore(', 'bool value)', 'void'),
  \ dotnet#method('get_BreakColumnBefore(', ')', 'bool'),
  \ dotnet#method('set_BreakColumnBefore(', 'bool value)', 'void'),
  \ dotnet#method('get_ClearFloaters(', ')', 'WrapDirection'),
  \ dotnet#method('set_ClearFloaters(', 'WrapDirection value)', 'void'),
  \ dotnet#method('IsValidMargin(', 'object o)', 'static bool'),
  \ dotnet#method('IsValidPadding(', 'object o)', 'static bool'),
  \ dotnet#method('IsValidBorderThickness(', 'object o)', 'static bool'),
  \ dotnet#method('get_IsIMEStructuralElement(', ')', 'strict bool'),
  \ dotnet#method('IsValidThickness(', 'Thickness t, bool allowNaN)', 'static bool'),
  \ dotnet#method('Block(', ')', 'void'),
  \ dotnet#method('Block(', ')', 'static void .'),
  \ dotnet#prop('SiblingBlocks', 'BlockCollection'),
  \ dotnet#prop('NextBlock', 'Block'),
  \ dotnet#prop('PreviousBlock', 'Block'),
  \ dotnet#prop('IsHyphenationEnabled', 'bool'),
  \ dotnet#prop('Margin', 'Thickness'),
  \ dotnet#prop('Padding', 'Thickness'),
  \ dotnet#prop('BorderThickness', 'Thickness'),
  \ dotnet#prop('BorderBrush', 'Brush'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('LineStackingStrategy', 'LineStackingStrategy'),
  \ dotnet#prop('BreakPageBefore', 'bool'),
  \ dotnet#prop('BreakColumnBefore', 'bool'),
  \ dotnet#prop('ClearFloaters', 'WrapDirection'),
  \ dotnet#prop('IsIMEStructuralElement', 'bool'),
  \ ])

call dotnet#class('TextElementCollection', 'Object', [ 
  \ dotnet#method('TextElementCollection`1(', 'class DependencyObject owner, bool isOwnerParent)', 'void TextElementCollection`'),
  \ dotnet#method('Add(', '!TextElementType item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', '!TextElementType item)', 'bool'),
  \ dotnet#method('CopyTo(', '!TextElementType[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', '!TextElementType item)', 'bool'),
  \ dotnet#method('InsertAfter(', '!TextElementType previousSibling, !TextElementType newItem)', 'void'),
  \ dotnet#method('InsertBefore(', '!TextElementType nextSibling, !TextElementType newItem)', 'void'),
  \ dotnet#method('AddRange(', 'class IEnumerable range)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('OnAdd(', 'object value)', 'strict int32'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Clear(', ')', 'void '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 arrayIndex)', 'void '),
  \ dotnet#method('get_Count(', ')', 'int32 '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_Owner(', ')', '.method'),
  \ dotnet#method('get_Parent(', ')', '.method'),
  \ dotnet#method('get_TextContainer(', ')', '.method'),
  \ dotnet#method('get_FirstChild(', ')', '!TextElementType'),
  \ dotnet#method('get_LastChild(', ')', '!TextElementType'),
  \ dotnet#method('ValidateChild(', '!TextElementType child)', 'strict void'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Owner', 'DependencyObject'),
  \ dotnet#prop('Parent', 'DependencyObject'),
  \ dotnet#prop('TextContainer', 'TextContainer'),
  \ dotnet#prop('FirstChild', '!TextElementType'),
  \ dotnet#prop('LastChild', '!TextElementType'),
  \ ])

call dotnet#class('BlockCollection', 'TextElementCollection', [ 
  \ dotnet#method('BlockCollection(', 'class DependencyObject owner, bool isOwnerParent)', 'void'),
  \ dotnet#method('get_FirstBlock(', ')', 'Block'),
  \ dotnet#method('get_LastBlock(', ')', 'Block'),
  \ dotnet#prop('FirstBlock', 'Block'),
  \ dotnet#prop('LastBlock', 'Block'),
  \ ])

call dotnet#class('BlockUIContainer', 'Block', [ 
  \ dotnet#method('BlockUIContainer(', ')', 'void'),
  \ dotnet#method('BlockUIContainer(', 'class UIElement uiElement)', 'void'),
  \ dotnet#method('get_Child(', ')', 'UIElement'),
  \ dotnet#method('set_Child(', 'class UIElement value)', 'void'),
  \ dotnet#prop('Child', 'UIElement'),
  \ ])

call dotnet#class('Span', 'Inline', [ 
  \ dotnet#method('Span(', ')', 'void'),
  \ dotnet#method('Span(', 'class Inline childInline)', 'void'),
  \ dotnet#method('Span(', 'class Inline childInline, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('Span(', 'class TextPointer start, TextPointer end)', 'void'),
  \ dotnet#method('get_Inlines(', ')', 'InlineCollection'),
  \ dotnet#method('ShouldSerializeInlines(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#prop('Inlines', 'InlineCollection'),
  \ ])

call dotnet#class('Bold', 'Span', [ 
  \ dotnet#method('Bold(', ')', 'void'),
  \ dotnet#method('Bold(', 'class Inline childInline)', 'void'),
  \ dotnet#method('Bold(', 'class Inline childInline, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('Bold(', 'class TextPointer start, TextPointer end)', 'void'),
  \ dotnet#method('Bold(', ')', 'static void .'),
  \ ])

call dotnet#class('DocumentReference', 'FrameworkElement', [ 
  \ dotnet#method('DocumentReference(', ')', 'void'),
  \ dotnet#method('GetDocument(', 'bool forceReload)', 'FixedDocument'),
  \ dotnet#method('SetDocument(', 'class FixedDocument doc)', 'void'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('get_CurrentlyLoadedDoc(', ')', '.method'),
  \ dotnet#method('DocumentReference(', ')', 'static void .'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('CurrentlyLoadedDoc', 'FixedDocument'),
  \ ])

call dotnet#class('DocumentReferenceCollection', 'Object', [ 
  \ dotnet#method('DocumentReferenceCollection(', ')', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Add(', 'class DocumentReference item)', 'void'),
  \ dotnet#method('CopyTo(', 'class DocumentReference[] array, int32 arrayIndex)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_Item(', 'int32 index)', 'DocumentReference'),
  \ dotnet#method('add_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_CollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#event('CollectionChanged', 'NotifyCollectionChangedEventHandler'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('Item(int32)', 'DocumentReference'),
  \ ])

call dotnet#class('FixedDocumentSequence', 'FrameworkContentElement', [ 
  \ dotnet#method('FixedDocumentSequence(', ')', 'void'),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object '),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('NavigateAsync(', 'string elementID)', 'void '),
  \ dotnet#method('FindElementByID(', 'string elementID, [out] FixedPage& rootFixedPage)', ''),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_DocumentPaginator(', ')', ''),
  \ dotnet#method('GetPage(', 'int32 pageNumber)', 'DocumentPage'),
  \ dotnet#method('GetPage(', 'class FixedDocument document, int32 fixedDocPageNumber)', 'DocumentPage'),
  \ dotnet#method('GetPageAsync(', 'int32 pageNumber, object userState)', 'void'),
  \ dotnet#method('GetPageNumber(', 'class ContentPosition contentPosition)', 'int32'),
  \ dotnet#method('CancelAsync(', 'object userState)', 'void'),
  \ dotnet#method('GetObjectPosition(', 'object o)', 'ContentPosition'),
  \ dotnet#method('GetPagePosition(', 'class DocumentPage page)', 'ContentPosition'),
  \ dotnet#method('get_IsPageCountValid(', ')', 'bool'),
  \ dotnet#method('get_PageCount(', ')', 'int32'),
  \ dotnet#method('get_PageSize(', ')', '.method'),
  \ dotnet#method('set_PageSize(', 'Size value)', 'void'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('get_References(', ')', 'DocumentReferenceCollection'),
  \ dotnet#method('get_PrintTicket(', ')', 'object'),
  \ dotnet#method('set_PrintTicket(', 'object value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('GetPaginator(', 'class DocumentReference docRef)', 'DynamicDocumentPaginator'),
  \ dotnet#method('TranslatePageNumber(', 'int32 pageNumber, [out] DynamicDocumentPaginator& childPaginator, [out] int32& childPageNumber)', 'bool'),
  \ dotnet#method('get_TextContainer(', ')', '.method'),
  \ dotnet#method('FixedDocumentSequence(', ')', 'static void .'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('DocumentPaginator', 'DocumentPaginator'),
  \ dotnet#prop('IsPageCountValid', 'bool'),
  \ dotnet#prop('PageCount', 'int32'),
  \ dotnet#prop('PageSize', 'Size'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('References', 'DocumentReferenceCollection'),
  \ dotnet#prop('PrintTicket', 'object'),
  \ dotnet#prop('TextContainer', 'DocumentSequenceTextContainer'),
  \ ])

call dotnet#class('EditingCommands', 'Object', [ 
  \ dotnet#method('get_ToggleInsert(', ')', 'static'),
  \ dotnet#method('get_Delete(', ')', 'static'),
  \ dotnet#method('get_Backspace(', ')', 'static'),
  \ dotnet#method('get_DeleteNextWord(', ')', 'static'),
  \ dotnet#method('get_DeletePreviousWord(', ')', 'static'),
  \ dotnet#method('get_EnterParagraphBreak(', ')', 'static'),
  \ dotnet#method('get_EnterLineBreak(', ')', 'static'),
  \ dotnet#method('get_TabForward(', ')', 'static'),
  \ dotnet#method('get_TabBackward(', ')', 'static'),
  \ dotnet#method('get_MoveRightByCharacter(', ')', 'static'),
  \ dotnet#method('get_MoveLeftByCharacter(', ')', 'static'),
  \ dotnet#method('get_MoveRightByWord(', ')', 'static'),
  \ dotnet#method('get_MoveLeftByWord(', ')', 'static'),
  \ dotnet#method('get_MoveDownByLine(', ')', 'static'),
  \ dotnet#method('get_MoveUpByLine(', ')', 'static'),
  \ dotnet#method('get_MoveDownByParagraph(', ')', 'static'),
  \ dotnet#method('get_MoveUpByParagraph(', ')', 'static'),
  \ dotnet#method('get_MoveDownByPage(', ')', 'static'),
  \ dotnet#method('get_MoveUpByPage(', ')', 'static'),
  \ dotnet#method('get_MoveToLineStart(', ')', 'static'),
  \ dotnet#method('get_MoveToLineEnd(', ')', 'static'),
  \ dotnet#method('get_MoveToDocumentStart(', ')', 'static'),
  \ dotnet#method('get_MoveToDocumentEnd(', ')', 'static'),
  \ dotnet#method('get_SelectRightByCharacter(', ')', 'static'),
  \ dotnet#method('get_SelectLeftByCharacter(', ')', 'static'),
  \ dotnet#method('get_SelectRightByWord(', ')', 'static'),
  \ dotnet#method('get_SelectLeftByWord(', ')', 'static'),
  \ dotnet#method('get_SelectDownByLine(', ')', 'static'),
  \ dotnet#method('get_SelectUpByLine(', ')', 'static'),
  \ dotnet#method('get_SelectDownByParagraph(', ')', 'static'),
  \ dotnet#method('get_SelectUpByParagraph(', ')', 'static'),
  \ dotnet#method('get_SelectDownByPage(', ')', 'static'),
  \ dotnet#method('get_SelectUpByPage(', ')', 'static'),
  \ dotnet#method('get_SelectToLineStart(', ')', 'static'),
  \ dotnet#method('get_SelectToLineEnd(', ')', 'static'),
  \ dotnet#method('get_SelectToDocumentStart(', ')', 'static'),
  \ dotnet#method('get_SelectToDocumentEnd(', ')', 'static'),
  \ dotnet#method('get_ToggleBold(', ')', 'static'),
  \ dotnet#method('get_ToggleItalic(', ')', 'static'),
  \ dotnet#method('get_ToggleUnderline(', ')', 'static'),
  \ dotnet#method('get_ToggleSubscript(', ')', 'static'),
  \ dotnet#method('get_ToggleSuperscript(', ')', 'static'),
  \ dotnet#method('get_IncreaseFontSize(', ')', 'static'),
  \ dotnet#method('get_DecreaseFontSize(', ')', 'static'),
  \ dotnet#method('get_AlignLeft(', ')', 'static'),
  \ dotnet#method('get_AlignCenter(', ')', 'static'),
  \ dotnet#method('get_AlignRight(', ')', 'static'),
  \ dotnet#method('get_AlignJustify(', ')', 'static'),
  \ dotnet#method('get_ToggleBullets(', ')', 'static'),
  \ dotnet#method('get_ToggleNumbering(', ')', 'static'),
  \ dotnet#method('get_IncreaseIndentation(', ')', 'static'),
  \ dotnet#method('get_DecreaseIndentation(', ')', 'static'),
  \ dotnet#method('get_CorrectSpellingError(', ')', 'static'),
  \ dotnet#method('get_IgnoreSpellingError(', ')', 'static'),
  \ dotnet#method('get_Space(', ')', 'static'),
  \ dotnet#method('get_ShiftSpace(', ')', 'static'),
  \ dotnet#method('get_MoveToColumnStart(', ')', 'static'),
  \ dotnet#method('get_MoveToColumnEnd(', ')', 'static'),
  \ dotnet#method('get_MoveToWindowTop(', ')', 'static'),
  \ dotnet#method('get_MoveToWindowBottom(', ')', 'static'),
  \ dotnet#method('get_SelectToColumnStart(', ')', 'static'),
  \ dotnet#method('get_SelectToColumnEnd(', ')', 'static'),
  \ dotnet#method('get_SelectToWindowTop(', ')', 'static'),
  \ dotnet#method('get_SelectToWindowBottom(', ')', 'static'),
  \ dotnet#method('get_ResetFormat(', ')', 'static'),
  \ dotnet#method('get_ToggleSpellCheck(', ')', 'static'),
  \ dotnet#method('get_ApplyFontSize(', ')', 'static'),
  \ dotnet#method('get_ApplyFontFamily(', ')', 'static'),
  \ dotnet#method('get_ApplyForeground(', ')', 'static'),
  \ dotnet#method('get_ApplyBackground(', ')', 'static'),
  \ dotnet#method('get_ApplyInlineFlowDirectionRTL(', ')', 'static'),
  \ dotnet#method('get_ApplyInlineFlowDirectionLTR(', ')', 'static'),
  \ dotnet#method('get_ApplySingleSpace(', ')', 'static'),
  \ dotnet#method('get_ApplyOneAndAHalfSpace(', ')', 'static'),
  \ dotnet#method('get_ApplyDoubleSpace(', ')', 'static'),
  \ dotnet#method('get_ApplyParagraphFlowDirectionRTL(', ')', 'static'),
  \ dotnet#method('get_ApplyParagraphFlowDirectionLTR(', ')', 'static'),
  \ dotnet#method('get_CopyFormat(', ')', 'static'),
  \ dotnet#method('get_PasteFormat(', ')', 'static'),
  \ dotnet#method('get_RemoveListMarkers(', ')', 'static'),
  \ dotnet#method('get_InsertTable(', ')', 'static'),
  \ dotnet#method('get_InsertRows(', ')', 'static'),
  \ dotnet#method('get_InsertColumns(', ')', 'static'),
  \ dotnet#method('get_DeleteRows(', ')', 'static'),
  \ dotnet#method('get_DeleteColumns(', ')', 'static'),
  \ dotnet#method('get_MergeCells(', ')', 'static'),
  \ dotnet#method('get_SplitCell(', ')', 'static'),
  \ dotnet#method('EditingCommands(', ')', 'static void .'),
  \ dotnet#prop('ToggleInsert', 'RoutedUICommand'),
  \ dotnet#prop('Delete', 'RoutedUICommand'),
  \ dotnet#prop('Backspace', 'RoutedUICommand'),
  \ dotnet#prop('DeleteNextWord', 'RoutedUICommand'),
  \ dotnet#prop('DeletePreviousWord', 'RoutedUICommand'),
  \ dotnet#prop('EnterParagraphBreak', 'RoutedUICommand'),
  \ dotnet#prop('EnterLineBreak', 'RoutedUICommand'),
  \ dotnet#prop('TabForward', 'RoutedUICommand'),
  \ dotnet#prop('TabBackward', 'RoutedUICommand'),
  \ dotnet#prop('MoveRightByCharacter', 'RoutedUICommand'),
  \ dotnet#prop('MoveLeftByCharacter', 'RoutedUICommand'),
  \ dotnet#prop('MoveRightByWord', 'RoutedUICommand'),
  \ dotnet#prop('MoveLeftByWord', 'RoutedUICommand'),
  \ dotnet#prop('MoveDownByLine', 'RoutedUICommand'),
  \ dotnet#prop('MoveUpByLine', 'RoutedUICommand'),
  \ dotnet#prop('MoveDownByParagraph', 'RoutedUICommand'),
  \ dotnet#prop('MoveUpByParagraph', 'RoutedUICommand'),
  \ dotnet#prop('MoveDownByPage', 'RoutedUICommand'),
  \ dotnet#prop('MoveUpByPage', 'RoutedUICommand'),
  \ dotnet#prop('MoveToLineStart', 'RoutedUICommand'),
  \ dotnet#prop('MoveToLineEnd', 'RoutedUICommand'),
  \ dotnet#prop('MoveToDocumentStart', 'RoutedUICommand'),
  \ dotnet#prop('MoveToDocumentEnd', 'RoutedUICommand'),
  \ dotnet#prop('SelectRightByCharacter', 'RoutedUICommand'),
  \ dotnet#prop('SelectLeftByCharacter', 'RoutedUICommand'),
  \ dotnet#prop('SelectRightByWord', 'RoutedUICommand'),
  \ dotnet#prop('SelectLeftByWord', 'RoutedUICommand'),
  \ dotnet#prop('SelectDownByLine', 'RoutedUICommand'),
  \ dotnet#prop('SelectUpByLine', 'RoutedUICommand'),
  \ dotnet#prop('SelectDownByParagraph', 'RoutedUICommand'),
  \ dotnet#prop('SelectUpByParagraph', 'RoutedUICommand'),
  \ dotnet#prop('SelectDownByPage', 'RoutedUICommand'),
  \ dotnet#prop('SelectUpByPage', 'RoutedUICommand'),
  \ dotnet#prop('SelectToLineStart', 'RoutedUICommand'),
  \ dotnet#prop('SelectToLineEnd', 'RoutedUICommand'),
  \ dotnet#prop('SelectToDocumentStart', 'RoutedUICommand'),
  \ dotnet#prop('SelectToDocumentEnd', 'RoutedUICommand'),
  \ dotnet#prop('ToggleBold', 'RoutedUICommand'),
  \ dotnet#prop('ToggleItalic', 'RoutedUICommand'),
  \ dotnet#prop('ToggleUnderline', 'RoutedUICommand'),
  \ dotnet#prop('ToggleSubscript', 'RoutedUICommand'),
  \ dotnet#prop('ToggleSuperscript', 'RoutedUICommand'),
  \ dotnet#prop('IncreaseFontSize', 'RoutedUICommand'),
  \ dotnet#prop('DecreaseFontSize', 'RoutedUICommand'),
  \ dotnet#prop('AlignLeft', 'RoutedUICommand'),
  \ dotnet#prop('AlignCenter', 'RoutedUICommand'),
  \ dotnet#prop('AlignRight', 'RoutedUICommand'),
  \ dotnet#prop('AlignJustify', 'RoutedUICommand'),
  \ dotnet#prop('ToggleBullets', 'RoutedUICommand'),
  \ dotnet#prop('ToggleNumbering', 'RoutedUICommand'),
  \ dotnet#prop('IncreaseIndentation', 'RoutedUICommand'),
  \ dotnet#prop('DecreaseIndentation', 'RoutedUICommand'),
  \ dotnet#prop('CorrectSpellingError', 'RoutedUICommand'),
  \ dotnet#prop('IgnoreSpellingError', 'RoutedUICommand'),
  \ dotnet#prop('Space', 'RoutedUICommand'),
  \ dotnet#prop('ShiftSpace', 'RoutedUICommand'),
  \ dotnet#prop('MoveToColumnStart', 'RoutedUICommand'),
  \ dotnet#prop('MoveToColumnEnd', 'RoutedUICommand'),
  \ dotnet#prop('MoveToWindowTop', 'RoutedUICommand'),
  \ dotnet#prop('MoveToWindowBottom', 'RoutedUICommand'),
  \ dotnet#prop('SelectToColumnStart', 'RoutedUICommand'),
  \ dotnet#prop('SelectToColumnEnd', 'RoutedUICommand'),
  \ dotnet#prop('SelectToWindowTop', 'RoutedUICommand'),
  \ dotnet#prop('SelectToWindowBottom', 'RoutedUICommand'),
  \ dotnet#prop('ResetFormat', 'RoutedUICommand'),
  \ dotnet#prop('ToggleSpellCheck', 'RoutedUICommand'),
  \ dotnet#prop('ApplyFontSize', 'RoutedUICommand'),
  \ dotnet#prop('ApplyFontFamily', 'RoutedUICommand'),
  \ dotnet#prop('ApplyForeground', 'RoutedUICommand'),
  \ dotnet#prop('ApplyBackground', 'RoutedUICommand'),
  \ dotnet#prop('ApplyInlineFlowDirectionRTL', 'RoutedUICommand'),
  \ dotnet#prop('ApplyInlineFlowDirectionLTR', 'RoutedUICommand'),
  \ dotnet#prop('ApplySingleSpace', 'RoutedUICommand'),
  \ dotnet#prop('ApplyOneAndAHalfSpace', 'RoutedUICommand'),
  \ dotnet#prop('ApplyDoubleSpace', 'RoutedUICommand'),
  \ dotnet#prop('ApplyParagraphFlowDirectionRTL', 'RoutedUICommand'),
  \ dotnet#prop('ApplyParagraphFlowDirectionLTR', 'RoutedUICommand'),
  \ dotnet#prop('CopyFormat', 'RoutedUICommand'),
  \ dotnet#prop('PasteFormat', 'RoutedUICommand'),
  \ dotnet#prop('RemoveListMarkers', 'RoutedUICommand'),
  \ dotnet#prop('InsertTable', 'RoutedUICommand'),
  \ dotnet#prop('InsertRows', 'RoutedUICommand'),
  \ dotnet#prop('InsertColumns', 'RoutedUICommand'),
  \ dotnet#prop('DeleteRows', 'RoutedUICommand'),
  \ dotnet#prop('DeleteColumns', 'RoutedUICommand'),
  \ dotnet#prop('MergeCells', 'RoutedUICommand'),
  \ dotnet#prop('SplitCell', 'RoutedUICommand'),
  \ ])

call dotnet#class('Figure', 'AnchoredBlock', [ 
  \ dotnet#method('Figure(', ')', 'void'),
  \ dotnet#method('Figure(', 'class Block childBlock)', 'void'),
  \ dotnet#method('Figure(', 'class Block childBlock, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('get_HorizontalAnchor(', ')', 'FigureHorizontalAnchor'),
  \ dotnet#method('set_HorizontalAnchor(', 'FigureHorizontalAnchor value)', 'void'),
  \ dotnet#method('get_VerticalAnchor(', ')', 'FigureVerticalAnchor'),
  \ dotnet#method('set_VerticalAnchor(', 'FigureVerticalAnchor value)', 'void'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('set_HorizontalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('set_VerticalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_CanDelayPlacement(', ')', 'bool'),
  \ dotnet#method('set_CanDelayPlacement(', 'bool value)', 'void'),
  \ dotnet#method('get_WrapDirection(', ')', 'WrapDirection'),
  \ dotnet#method('set_WrapDirection(', 'WrapDirection value)', 'void'),
  \ dotnet#method('get_Width(', ')', 'FigureLength'),
  \ dotnet#method('set_Width(', 'FigureLength value)', 'void'),
  \ dotnet#method('get_Height(', ')', 'FigureLength'),
  \ dotnet#method('set_Height(', 'FigureLength value)', 'void'),
  \ dotnet#method('Figure(', ')', 'static void .'),
  \ dotnet#prop('HorizontalAnchor', 'FigureHorizontalAnchor'),
  \ dotnet#prop('VerticalAnchor', 'FigureVerticalAnchor'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('CanDelayPlacement', 'bool'),
  \ dotnet#prop('WrapDirection', 'WrapDirection'),
  \ dotnet#prop('Width', 'FigureLength'),
  \ dotnet#prop('Height', 'FigureLength'),
  \ ])

call dotnet#class('FixedDocument', 'FrameworkContentElement', [ 
  \ dotnet#method('FixedDocument(', ')', 'void'),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object '),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('NavigateAsync(', 'string elementID)', 'void '),
  \ dotnet#method('FindElementByID(', 'string elementID, [out] FixedPage& rootFixedPage)', ''),
  \ dotnet#method('get_NavigationService(', ')', '.method'),
  \ dotnet#method('set_NavigationService(', 'class NavigationService value)', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_DocumentPaginator(', ')', ''),
  \ dotnet#method('GetPage(', 'int32 pageNumber)', 'DocumentPage'),
  \ dotnet#method('GetPageAsync(', 'int32 pageNumber, object userState)', 'void'),
  \ dotnet#method('GetPageNumber(', 'class ContentPosition contentPosition)', 'int32'),
  \ dotnet#method('CancelAsync(', 'object userState)', 'void'),
  \ dotnet#method('GetObjectPosition(', 'object o)', 'ContentPosition'),
  \ dotnet#method('GetPagePosition(', 'class DocumentPage page)', 'ContentPosition'),
  \ dotnet#method('get_IsPageCountValid(', ')', 'bool'),
  \ dotnet#method('get_PageCount(', ')', 'int32'),
  \ dotnet#method('get_PageSize(', ')', '.method'),
  \ dotnet#method('set_PageSize(', 'Size value)', 'void'),
  \ dotnet#method('get_HasExplicitStructure(', ')', 'bool'),
  \ dotnet#method('get_Pages(', ')', 'PageContentCollection'),
  \ dotnet#method('get_PrintTicket(', ')', 'object'),
  \ dotnet#method('set_PrintTicket(', 'object value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('GetIndexOfPage(', 'class FixedPage p)', 'int32'),
  \ dotnet#method('IsValidPageIndex(', 'int32 index)', 'bool'),
  \ dotnet#method('SyncGetPageWithCheck(', 'int32 index)', 'FixedPage'),
  \ dotnet#method('SyncGetPage(', 'int32 index, bool forceReload)', 'FixedPage'),
  \ dotnet#method('OnPageContentAppended(', 'int32 index)', 'void'),
  \ dotnet#method('EnsurePageSize(', 'class FixedPage fp)', 'void'),
  \ dotnet#method('GetPageSize(', 'Size& pageSize, int32 pageNumber)', 'bool'),
  \ dotnet#method('ComputePageSize(', 'class FixedPage fp)', 'Size'),
  \ dotnet#method('get_FixedContainer(', ')', '.method'),
  \ dotnet#method('get_Highlights(', ')', '.method'),
  \ dotnet#method('get_DocumentReference(', ')', '.method'),
  \ dotnet#method('set_DocumentReference(', 'class DocumentReference value)', 'void'),
  \ dotnet#method('ValidateDocStructure(', ')', 'void'),
  \ dotnet#method('GetStoryFragments(', 'class FixedPage fixedPage)', 'static StoryFragments'),
  \ dotnet#method('GetFixedPage(', 'int32 pageNumber)', 'FixedPage'),
  \ dotnet#method('FixedDocument(', ')', 'static void .'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('NavigationService', 'NavigationService'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('DocumentPaginator', 'DocumentPaginator'),
  \ dotnet#prop('IsPageCountValid', 'bool'),
  \ dotnet#prop('PageCount', 'int32'),
  \ dotnet#prop('PageSize', 'Size'),
  \ dotnet#prop('HasExplicitStructure', 'bool'),
  \ dotnet#prop('Pages', 'PageContentCollection'),
  \ dotnet#prop('PrintTicket', 'object'),
  \ dotnet#prop('FixedContainer', 'FixedTextContainer'),
  \ dotnet#prop('Highlights', 'Dictionary'),
  \ dotnet#prop('DocumentReference', 'DocumentReference'),
  \ ])

call dotnet#class('FixedPage', 'FrameworkElement', [ 
  \ dotnet#method('FixedPage(', ')', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnPreviewMouseWheel(', 'class MouseWheelEventArgs e)', 'void'),
  \ dotnet#method('OnRender(', 'class DrawingContext dc)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('GetLeft(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetLeft(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetTop(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetTop(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetRight(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetRight(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetBottom(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetBottom(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetNavigateUri(', 'class UIElement element)', 'static Uri'),
  \ dotnet#method('SetNavigateUri(', 'class UIElement element, Uri uri)', 'static void'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_Children(', ')', 'UIElementCollection'),
  \ dotnet#method('get_PrintTicket(', ')', 'object'),
  \ dotnet#method('set_PrintTicket(', 'object value)', 'void'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_ContentBox(', ')', 'Rect'),
  \ dotnet#method('set_ContentBox(', 'Rect value)', 'void'),
  \ dotnet#method('get_BleedBox(', ')', 'Rect'),
  \ dotnet#method('set_BleedBox(', 'Rect value)', 'void'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('CanNavigateToUri(', 'class Uri uri)', 'static bool'),
  \ dotnet#method('GetLinkUri(', 'class IInputElement element, Uri inputUri)', 'static Uri'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('NavigateAsync(', 'string elementID)', 'void '),
  \ dotnet#method('FindElementByID(', 'string elementID, [out] FixedPage& rootFixedPage)', ''),
  \ dotnet#method('CreateFixedNode(', 'int32 pageIndex, UIElement e)', 'FixedNode'),
  \ dotnet#method('GetGlyphsElement(', 'FixedNode node)', 'Glyphs'),
  \ dotnet#method('GetElement(', 'FixedNode node)', 'DependencyObject'),
  \ dotnet#method('get_StartPartUriString(', ')', 'string'),
  \ dotnet#method('set_StartPartUriString(', 'string value)', 'void'),
  \ dotnet#method('GetPageStructure(', ')', 'StoryFragments'),
  \ dotnet#method('_CreateChildIndex(', 'class DependencyObject e)', 'int32[]'),
  \ dotnet#method('FixedPage(', ')', 'static void .'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('Children', 'UIElementCollection'),
  \ dotnet#prop('PrintTicket', 'object'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('ContentBox', 'Rect'),
  \ dotnet#prop('BleedBox', 'Rect'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('StartPartUriString', 'string'),
  \ ])

call dotnet#class('Floater', 'AnchoredBlock', [ 
  \ dotnet#method('Floater(', ')', 'void'),
  \ dotnet#method('Floater(', 'class Block childBlock)', 'void'),
  \ dotnet#method('Floater(', 'class Block childBlock, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('get_HorizontalAlignment(', ')', 'HorizontalAlignment'),
  \ dotnet#method('set_HorizontalAlignment(', 'HorizontalAlignment value)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('set_Width(', 'float64 value)', 'void'),
  \ dotnet#method('Floater(', ')', 'static void .'),
  \ dotnet#prop('HorizontalAlignment', 'HorizontalAlignment'),
  \ dotnet#prop('Width', 'float64'),
  \ ])

call dotnet#class('FlowDocument', 'FrameworkContentElement', [ 
  \ dotnet#method('FlowDocument(', ')', 'void'),
  \ dotnet#method('FlowDocument(', 'class Block block)', 'void'),
  \ dotnet#method('FlowDocument(', 'class TextContainer textContainer)', 'void'),
  \ dotnet#method('get_Blocks(', ')', 'BlockCollection'),
  \ dotnet#method('get_TextRange(', ')', '.method'),
  \ dotnet#method('get_ContentStart(', ')', 'TextPointer'),
  \ dotnet#method('get_ContentEnd(', ')', 'TextPointer'),
  \ dotnet#method('get_FontFamily(', ')', 'FontFamily'),
  \ dotnet#method('set_FontFamily(', 'class Fontvalue)', 'void'),
  \ dotnet#method('get_FontStyle(', ')', 'FontStyle'),
  \ dotnet#method('set_FontStyle(', 'FontStyle value)', 'void'),
  \ dotnet#method('get_FontWeight(', ')', 'FontWeight'),
  \ dotnet#method('set_FontWeight(', 'FontWeight value)', 'void'),
  \ dotnet#method('get_FontStretch(', ')', 'FontStretch'),
  \ dotnet#method('set_FontStretch(', 'FontStretch value)', 'void'),
  \ dotnet#method('get_FontSize(', ')', 'float64'),
  \ dotnet#method('set_FontSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_Foreground(', ')', 'Brush'),
  \ dotnet#method('set_Foreground(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_TextEffects(', ')', 'TextEffectCollection'),
  \ dotnet#method('set_TextEffects(', 'class TextEffectCollection value)', 'void'),
  \ dotnet#method('get_TextAlignment(', ')', 'TextAlignment'),
  \ dotnet#method('set_TextAlignment(', 'TextAlignment value)', 'void'),
  \ dotnet#method('get_FlowDirection(', ')', 'FlowDirection'),
  \ dotnet#method('set_FlowDirection(', 'FlowDirection value)', 'void'),
  \ dotnet#method('get_LineHeight(', ')', 'float64'),
  \ dotnet#method('set_LineHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_LineStackingStrategy(', ')', 'LineStackingStrategy'),
  \ dotnet#method('set_LineStackingStrategy(', 'LineStackingStrategy value)', 'void'),
  \ dotnet#method('get_ColumnWidth(', ')', 'float64'),
  \ dotnet#method('set_ColumnWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_ColumnGap(', ')', 'float64'),
  \ dotnet#method('set_ColumnGap(', 'float64 value)', 'void'),
  \ dotnet#method('get_IsColumnWidthFlexible(', ')', 'bool'),
  \ dotnet#method('set_IsColumnWidthFlexible(', 'bool value)', 'void'),
  \ dotnet#method('get_ColumnRuleWidth(', ')', 'float64'),
  \ dotnet#method('set_ColumnRuleWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_ColumnRuleBrush(', ')', 'Brush'),
  \ dotnet#method('set_ColumnRuleBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_IsOptimalParagraphEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsOptimalParagraphEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_PageWidth(', ')', 'float64'),
  \ dotnet#method('set_PageWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinPageWidth(', ')', 'float64'),
  \ dotnet#method('set_MinPageWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxPageWidth(', ')', 'float64'),
  \ dotnet#method('set_MaxPageWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_PageHeight(', ')', 'float64'),
  \ dotnet#method('set_PageHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinPageHeight(', ')', 'float64'),
  \ dotnet#method('set_MinPageHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxPageHeight(', ')', 'float64'),
  \ dotnet#method('set_MaxPageHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_PagePadding(', ')', 'Thickness'),
  \ dotnet#method('set_PagePadding(', 'Thickness value)', 'void'),
  \ dotnet#method('get_Typography(', ')', 'Typography'),
  \ dotnet#method('get_IsHyphenationEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsHyphenationEnabled(', 'bool value)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_IsEnabledCore(', ')', 'bool'),
  \ dotnet#method('GetObjectPosition(', 'object element)', 'ContentPosition'),
  \ dotnet#method('OnChildDesiredSizeChanged(', 'class UIElement child)', 'void'),
  \ dotnet#method('InitializeForFirstFormatting(', ')', 'void'),
  \ dotnet#method('Uninitialize(', ')', 'void'),
  \ dotnet#method('ComputePageMargin(', ')', 'Thickness'),
  \ dotnet#method('OnNewParent(', 'class DependencyObject newParent)', 'strict void'),
  \ dotnet#method('get_BottomlessFormatter(', ')', '.method'),
  \ dotnet#method('get_StructuralCache(', ')', '.method'),
  \ dotnet#method('get_TypographyPropertiesGroup(', ')', '.method'),
  \ dotnet#method('get_TextWrapping(', ')', '.method'),
  \ dotnet#method('set_TextWrapping(', 'TextWrapping value)', 'void'),
  \ dotnet#method('get_Formatter(', ')', '.method'),
  \ dotnet#method('get_IsLayoutDataValid(', ')', 'bool'),
  \ dotnet#method('get_TextContainer(', ')', '.method'),
  \ dotnet#method('add_PageSizeChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PageSizeChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object '),
  \ dotnet#method('get_DocumentPaginator(', ')', ''),
  \ dotnet#method('FlowDocument(', ')', 'static void .'),
  \ dotnet#event('PageSizeChanged', 'EventHandler'),
  \ dotnet#prop('Blocks', 'BlockCollection'),
  \ dotnet#prop('TextRange', 'TextRange'),
  \ dotnet#prop('ContentStart', 'TextPointer'),
  \ dotnet#prop('ContentEnd', 'TextPointer'),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('FontStyle', 'FontStyle'),
  \ dotnet#prop('FontWeight', 'FontWeight'),
  \ dotnet#prop('FontStretch', 'FontStretch'),
  \ dotnet#prop('FontSize', 'float64'),
  \ dotnet#prop('Foreground', 'Brush'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('TextEffects', 'TextEffectCollection'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('LineStackingStrategy', 'LineStackingStrategy'),
  \ dotnet#prop('ColumnWidth', 'float64'),
  \ dotnet#prop('ColumnGap', 'float64'),
  \ dotnet#prop('IsColumnWidthFlexible', 'bool'),
  \ dotnet#prop('ColumnRuleWidth', 'float64'),
  \ dotnet#prop('ColumnRuleBrush', 'Brush'),
  \ dotnet#prop('IsOptimalParagraphEnabled', 'bool'),
  \ dotnet#prop('PageWidth', 'float64'),
  \ dotnet#prop('MinPageWidth', 'float64'),
  \ dotnet#prop('MaxPageWidth', 'float64'),
  \ dotnet#prop('PageHeight', 'float64'),
  \ dotnet#prop('MinPageHeight', 'float64'),
  \ dotnet#prop('MaxPageHeight', 'float64'),
  \ dotnet#prop('PagePadding', 'Thickness'),
  \ dotnet#prop('Typography', 'Typography'),
  \ dotnet#prop('IsHyphenationEnabled', 'bool'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('IsEnabledCore', 'bool'),
  \ dotnet#prop('BottomlessFormatter', 'FlowDocumentFormatter'),
  \ dotnet#prop('StructuralCache', 'StructuralCache'),
  \ dotnet#prop('TypographyPropertiesGroup', 'TypographyProperties'),
  \ dotnet#prop('TextWrapping', 'TextWrapping'),
  \ dotnet#prop('Formatter', 'IFlowDocumentFormatter'),
  \ dotnet#prop('IsLayoutDataValid', 'bool'),
  \ dotnet#prop('TextContainer', 'TextContainer'),
  \ dotnet#prop('DocumentPaginator', 'DocumentPaginator'),
  \ ])

call dotnet#class('FrameworkTextComposition', 'TextComposition', [ 
  \ dotnet#method('FrameworkTextComposition(', 'class InputManager inputManager, IInputElement source, object owner)', 'void'),
  \ dotnet#method('Complete(', ')', 'void'),
  \ dotnet#method('get_ResultOffset(', ')', 'int32'),
  \ dotnet#method('get_ResultLength(', ')', 'int32'),
  \ dotnet#method('get_CompositionOffset(', ')', 'int32'),
  \ dotnet#method('get_CompositionLength(', ')', 'int32'),
  \ dotnet#method('CompleteCurrentComposition(', 'class UnsafeNativeMethods/ITfDocumentMgr documentMgr)', 'static void'),
  \ dotnet#method('GetCurrentCompositionView(', 'class UnsafeNativeMethods/ITfDocumentMgr documentMgr)', 'static UnsafeNativeMethods/ITfCompositionView'),
  \ dotnet#method('SetResultPositions(', 'class ITextPointer start, ITextPointer end, string text)', 'void'),
  \ dotnet#method('SetCompositionPositions(', 'class ITextPointer start, ITextPointer end, string text)', 'void'),
  \ dotnet#method('get__ResultStart(', ')', '.method'),
  \ dotnet#method('get__ResultEnd(', ')', '.method'),
  \ dotnet#method('get__CompositionStart(', ')', '.method'),
  \ dotnet#method('get__CompositionEnd(', ')', '.method'),
  \ dotnet#method('get_PendingComplete(', ')', 'bool'),
  \ dotnet#method('get_Owner(', ')', 'object'),
  \ dotnet#prop('ResultOffset', 'int32'),
  \ dotnet#prop('ResultLength', 'int32'),
  \ dotnet#prop('CompositionOffset', 'int32'),
  \ dotnet#prop('CompositionLength', 'int32'),
  \ dotnet#prop('_ResultStart', 'ITextPointer'),
  \ dotnet#prop('_ResultEnd', 'ITextPointer'),
  \ dotnet#prop('_CompositionStart', 'ITextPointer'),
  \ dotnet#prop('_CompositionEnd', 'ITextPointer'),
  \ dotnet#prop('PendingComplete', 'bool'),
  \ dotnet#prop('Owner', 'object'),
  \ ])

call dotnet#class('FrameworkRichTextComposition', 'FrameworkTextComposition', [ 
  \ dotnet#method('FrameworkRichTextComposition(', 'class InputManager inputManager, IInputElement source, object owner)', 'void'),
  \ dotnet#method('get_ResultStart(', ')', 'TextPointer'),
  \ dotnet#method('get_ResultEnd(', ')', 'TextPointer'),
  \ dotnet#method('get_CompositionStart(', ')', 'TextPointer'),
  \ dotnet#method('get_CompositionEnd(', ')', 'TextPointer'),
  \ dotnet#prop('ResultStart', 'TextPointer'),
  \ dotnet#prop('ResultEnd', 'TextPointer'),
  \ dotnet#prop('CompositionStart', 'TextPointer'),
  \ dotnet#prop('CompositionEnd', 'TextPointer'),
  \ ])

call dotnet#class('Glyphs', 'FrameworkElement', [ 
  \ dotnet#method('Glyphs(', ')', 'void'),
  \ dotnet#method('ToGlyphRun(', ')', 'GlyphRun'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('OnRender(', 'class DrawingContext context)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('get_Fill(', ')', 'Brush'),
  \ dotnet#method('set_Fill(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Indices(', ')', 'string'),
  \ dotnet#method('set_Indices(', 'string value)', 'void'),
  \ dotnet#method('get_UnicodeString(', ')', 'string'),
  \ dotnet#method('set_UnicodeString(', 'string value)', 'void'),
  \ dotnet#method('get_CaretStops(', ')', 'string'),
  \ dotnet#method('set_CaretStops(', 'string value)', 'void'),
  \ dotnet#method('get_FontRenderingEmSize(', ')', 'float64'),
  \ dotnet#method('set_FontRenderingEmSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_OriginX(', ')', 'float64'),
  \ dotnet#method('set_OriginX(', 'float64 value)', 'void'),
  \ dotnet#method('get_OriginY(', ')', 'float64'),
  \ dotnet#method('set_OriginY(', 'float64 value)', 'void'),
  \ dotnet#method('get_FontUri(', ')', 'Uri'),
  \ dotnet#method('set_FontUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_StyleSimulations(', ')', 'StyleSimulations'),
  \ dotnet#method('set_StyleSimulations(', 'StyleSimulations value)', 'void'),
  \ dotnet#method('get_IsSideways(', ')', 'bool'),
  \ dotnet#method('set_IsSideways(', 'bool value)', 'void'),
  \ dotnet#method('get_BidiLevel(', ')', 'int32'),
  \ dotnet#method('set_BidiLevel(', 'int32 value)', 'void'),
  \ dotnet#method('get_DeviceFontName(', ')', 'string'),
  \ dotnet#method('set_DeviceFontName(', 'string value)', 'void'),
  \ dotnet#method('get_MeasurementGlyphRun(', ')', '.method'),
  \ dotnet#method('Glyphs(', ')', 'static void .'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('Fill', 'Brush'),
  \ dotnet#prop('Indices', 'string'),
  \ dotnet#prop('UnicodeString', 'string'),
  \ dotnet#prop('CaretStops', 'string'),
  \ dotnet#prop('FontRenderingEmSize', 'float64'),
  \ dotnet#prop('OriginX', 'float64'),
  \ dotnet#prop('OriginY', 'float64'),
  \ dotnet#prop('FontUri', 'Uri'),
  \ dotnet#prop('StyleSimulations', 'StyleSimulations'),
  \ dotnet#prop('IsSideways', 'bool'),
  \ dotnet#prop('BidiLevel', 'int32'),
  \ dotnet#prop('DeviceFontName', 'string'),
  \ dotnet#prop('MeasurementGlyphRun', 'GlyphRun'),
  \ ])

call dotnet#class('Hyperlink', 'Span', [ 
  \ dotnet#method('Hyperlink(', ')', 'void'),
  \ dotnet#method('Hyperlink(', 'class Inline childInline)', 'void'),
  \ dotnet#method('Hyperlink(', 'class Inline childInline, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('Hyperlink(', 'class TextPointer start, TextPointer end)', 'void'),
  \ dotnet#method('DoClick(', ')', 'void'),
  \ dotnet#method('get_Command(', ')', ''),
  \ dotnet#method('set_Command(', 'class ICommand value)', 'void'),
  \ dotnet#method('get_IsEnabledCore(', ')', 'bool'),
  \ dotnet#method('get_CommandParameter(', ')', 'object'),
  \ dotnet#method('set_CommandParameter(', 'object value)', 'void'),
  \ dotnet#method('get_CommandTarget(', ')', ''),
  \ dotnet#method('set_CommandTarget(', 'class IInputElement value)', 'void'),
  \ dotnet#method('CoerceNavigateUri(', 'class DependencyObject d, object value)', 'static object'),
  \ dotnet#method('get_NavigateUri(', ')', 'Uri'),
  \ dotnet#method('set_NavigateUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_TargetName(', ')', 'string'),
  \ dotnet#method('set_TargetName(', 'string value)', 'void'),
  \ dotnet#method('add_RequestNavigate(', 'class RequestNavigateEventHandler value)', 'void'),
  \ dotnet#method('remove_RequestNavigate(', 'class RequestNavigateEventHandler value)', 'void'),
  \ dotnet#method('add_Click(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Click(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'famorassem void'),
  \ dotnet#method('OnClick(', ')', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'famorassem void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('get_BaseUri(', ')', 'family'),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('OnNavigateUriChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('RaiseNavigate(', 'class IInputElement element, Uri targetUri, string targetWindow)', 'static void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Hyperlink(', ')', 'static void .'),
  \ dotnet#event('RequestNavigate', 'RequestNavigateEventHandler'),
  \ dotnet#event('Click', 'RoutedEventHandler'),
  \ dotnet#prop('Command', 'ICommand'),
  \ dotnet#prop('IsEnabledCore', 'bool'),
  \ dotnet#prop('CommandParameter', 'object'),
  \ dotnet#prop('CommandTarget', 'IInputElement'),
  \ dotnet#prop('NavigateUri', 'Uri'),
  \ dotnet#prop('TargetName', 'string'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('InlineCollection', 'TextElementCollection', [ 
  \ dotnet#method('InlineCollection(', 'class DependencyObject owner, bool isOwnerParent)', 'void'),
  \ dotnet#method('OnAdd(', 'object value)', 'strict int32'),
  \ dotnet#method('Add(', 'string text)', 'void'),
  \ dotnet#method('Add(', 'class UIElement uiElement)', 'void'),
  \ dotnet#method('get_FirstInline(', ')', 'Inline'),
  \ dotnet#method('get_LastInline(', ')', 'Inline'),
  \ dotnet#method('ValidateChild(', 'class Inline child)', 'strict void'),
  \ dotnet#prop('FirstInline', 'Inline'),
  \ dotnet#prop('LastInline', 'Inline'),
  \ ])

call dotnet#class('InlineUIContainer', 'Inline', [ 
  \ dotnet#method('InlineUIContainer(', ')', 'void'),
  \ dotnet#method('InlineUIContainer(', 'class UIElement childUIElement)', 'void'),
  \ dotnet#method('InlineUIContainer(', 'class UIElement childUIElement, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('get_Child(', ')', 'UIElement'),
  \ dotnet#method('set_Child(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_UIElementIsland(', ')', '.method'),
  \ dotnet#prop('Child', 'UIElement'),
  \ dotnet#prop('UIElementIsland', 'UIElementIsland'),
  \ ])

call dotnet#class('Italic', 'Span', [ 
  \ dotnet#method('Italic(', ')', 'void'),
  \ dotnet#method('Italic(', 'class Inline childInline)', 'void'),
  \ dotnet#method('Italic(', 'class Inline childInline, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('Italic(', 'class TextPointer start, TextPointer end)', 'void'),
  \ dotnet#method('Italic(', ')', 'static void .'),
  \ ])

call dotnet#class('LineBreak', 'Inline', [ 
  \ dotnet#method('LineBreak(', ')', 'void'),
  \ dotnet#method('LineBreak(', 'class TextPointer insertionPosition)', 'void'),
  \ ])

call dotnet#class('LinkTarget', 'Object', [ 
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('LinkTarget(', ')', 'void'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('LinkTargetCollection', 'CollectionBase', [ 
  \ dotnet#method('get_Item(', 'int32 index)', 'LinkTarget'),
  \ dotnet#method('set_Item(', 'int32 index, LinkTarget value)', 'void'),
  \ dotnet#method('Add(', 'class LinkTarget value)', 'int32'),
  \ dotnet#method('Remove(', 'class LinkTarget value)', 'void'),
  \ dotnet#method('Contains(', 'class LinkTarget value)', 'bool'),
  \ dotnet#method('CopyTo(', 'class LinkTarget[] array, int32 index)', 'void'),
  \ dotnet#method('IndexOf(', 'class LinkTarget value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, LinkTarget value)', 'void'),
  \ dotnet#method('LinkTargetCollection(', ')', 'void'),
  \ dotnet#prop('Item(int32)', 'LinkTarget'),
  \ ])

call dotnet#class('List', 'Block', [ 
  \ dotnet#method('List(', ')', 'void'),
  \ dotnet#method('List(', 'class ListItem listItem)', 'void'),
  \ dotnet#method('get_ListItems(', ')', 'ListItemCollection'),
  \ dotnet#method('get_MarkerStyle(', ')', 'TextMarkerStyle'),
  \ dotnet#method('set_MarkerStyle(', 'TextMarkerStyle value)', 'void'),
  \ dotnet#method('get_MarkerOffset(', ')', 'float64'),
  \ dotnet#method('set_MarkerOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_StartIndex(', ')', 'int32'),
  \ dotnet#method('set_StartIndex(', 'int32 value)', 'void'),
  \ dotnet#method('GetListItemIndex(', 'class ListItem item)', 'int32'),
  \ dotnet#method('Apply(', 'class Block firstBlock, Block lastBlock)', 'void'),
  \ dotnet#method('List(', ')', 'static void .'),
  \ dotnet#prop('ListItems', 'ListItemCollection'),
  \ dotnet#prop('MarkerStyle', 'TextMarkerStyle'),
  \ dotnet#prop('MarkerOffset', 'float64'),
  \ dotnet#prop('StartIndex', 'int32'),
  \ ])

call dotnet#class('ListItem', 'TextElement', [ 
  \ dotnet#method('ListItem(', ')', 'void'),
  \ dotnet#method('ListItem(', 'class Paragraph paragraph)', 'void'),
  \ dotnet#method('get_List(', ')', 'List'),
  \ dotnet#method('get_Blocks(', ')', 'BlockCollection'),
  \ dotnet#method('get_SiblingListItems(', ')', 'ListItemCollection'),
  \ dotnet#method('get_NextListItem(', ')', 'ListItem'),
  \ dotnet#method('get_PreviousListItem(', ')', 'ListItem'),
  \ dotnet#method('get_Margin(', ')', 'Thickness'),
  \ dotnet#method('set_Margin(', 'Thickness value)', 'void'),
  \ dotnet#method('get_Padding(', ')', 'Thickness'),
  \ dotnet#method('set_Padding(', 'Thickness value)', 'void'),
  \ dotnet#method('get_BorderThickness(', ')', 'Thickness'),
  \ dotnet#method('set_BorderThickness(', 'Thickness value)', 'void'),
  \ dotnet#method('get_BorderBrush(', ')', 'Brush'),
  \ dotnet#method('set_BorderBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_TextAlignment(', ')', 'TextAlignment'),
  \ dotnet#method('set_TextAlignment(', 'TextAlignment value)', 'void'),
  \ dotnet#method('get_FlowDirection(', ')', 'FlowDirection'),
  \ dotnet#method('set_FlowDirection(', 'FlowDirection value)', 'void'),
  \ dotnet#method('get_LineHeight(', ')', 'float64'),
  \ dotnet#method('set_LineHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_LineStackingStrategy(', ')', 'LineStackingStrategy'),
  \ dotnet#method('set_LineStackingStrategy(', 'LineStackingStrategy value)', 'void'),
  \ dotnet#method('ShouldSerializeBlocks(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#method('get_IsIMEStructuralElement(', ')', 'strict bool'),
  \ dotnet#method('ListItem(', ')', 'static void .'),
  \ dotnet#prop('List', 'List'),
  \ dotnet#prop('Blocks', 'BlockCollection'),
  \ dotnet#prop('SiblingListItems', 'ListItemCollection'),
  \ dotnet#prop('NextListItem', 'ListItem'),
  \ dotnet#prop('PreviousListItem', 'ListItem'),
  \ dotnet#prop('Margin', 'Thickness'),
  \ dotnet#prop('Padding', 'Thickness'),
  \ dotnet#prop('BorderThickness', 'Thickness'),
  \ dotnet#prop('BorderBrush', 'Brush'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('LineStackingStrategy', 'LineStackingStrategy'),
  \ dotnet#prop('IsIMEStructuralElement', 'bool'),
  \ ])

call dotnet#class('ListItemCollection', 'TextElementCollection', [ 
  \ dotnet#method('ListItemCollection(', 'class DependencyObject owner, bool isOwnerParent)', 'void'),
  \ dotnet#method('get_FirstListItem(', ')', 'ListItem'),
  \ dotnet#method('get_LastListItem(', ')', 'ListItem'),
  \ dotnet#prop('FirstListItem', 'ListItem'),
  \ dotnet#prop('LastListItem', 'ListItem'),
  \ ])

call dotnet#class('PageContent', 'FrameworkElement', [ 
  \ dotnet#method('PageContent(', ')', 'void'),
  \ dotnet#method('GetPageRoot(', 'bool forceReload)', 'FixedPage'),
  \ dotnet#method('GetPageRootAsync(', 'bool forceReload)', 'void'),
  \ dotnet#method('GetPageRootAsyncCancel(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('get_LinkTargets(', ')', 'LinkTargetCollection'),
  \ dotnet#method('get_Child(', ')', 'FixedPage'),
  \ dotnet#method('set_Child(', 'class FixedPage value)', 'void'),
  \ dotnet#method('ShouldSerializeChild(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('add_GetPageRootCompleted(', 'class GetPageRootCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_GetPageRootCompleted(', 'class GetPageRootCompletedEventHandler value)', 'void'),
  \ dotnet#method('IsOwnerOf(', 'class FixedPage pageVisual)', 'bool'),
  \ dotnet#method('GetPageStream(', ')', 'Stream'),
  \ dotnet#method('get_PageStream(', ')', '.method'),
  \ dotnet#method('ContainsID(', 'string elementID)', 'bool'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('_LoadPageImpl(', 'class Uri baseUri, Uri uriToLoad, [out] FixedPage& fixedPage, [out] Stream& pageStream)', 'static void'),
  \ dotnet#method('PageContent(', ')', 'static void .'),
  \ dotnet#event('GetPageRootCompleted', 'GetPageRootCompletedEventHandler'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('LinkTargets', 'LinkTargetCollection'),
  \ dotnet#prop('Child', 'FixedPage'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('PageStream', 'FixedPage'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ ])

call dotnet#class('GetPageRootCompletedEventArgs', 'AsyncCompletedEventArgs', [ 
  \ dotnet#method('GetPageRootCompletedEventArgs(', 'class FixedPage page, Exception error, bool cancelled, object userToken)', 'void'),
  \ dotnet#method('get_Result(', ')', 'FixedPage'),
  \ dotnet#prop('Result', 'FixedPage'),
  \ ])

call dotnet#class('GetPageRootCompletedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('GetPageRootCompletedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, GetPageRootCompletedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, GetPageRootCompletedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('PageContentCollection', 'Object', [ 
  \ dotnet#method('PageContentCollection(', 'class FixedDocument logicalParent)', 'void'),
  \ dotnet#method('Add(', 'class PageContent newPageContent)', 'int32'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Item(', 'int32 pageIndex)', 'PageContent'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('IndexOf(', 'class PageContent pc)', 'int32'),
  \ dotnet#prop('Item(int32)', 'PageContent'),
  \ dotnet#prop('Count', 'int32'),
  \ ])

call dotnet#class('Paragraph', 'Block', [ 
  \ dotnet#method('Paragraph(', ')', 'void'),
  \ dotnet#method('Paragraph(', 'class Inline inline)', 'void'),
  \ dotnet#method('get_Inlines(', ')', 'InlineCollection'),
  \ dotnet#method('get_TextDecorations(', ')', 'TextDecorationCollection'),
  \ dotnet#method('set_TextDecorations(', 'class TextDecorationCollection value)', 'void'),
  \ dotnet#method('get_TextIndent(', ')', 'float64'),
  \ dotnet#method('set_TextIndent(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinOrphanLines(', ')', 'int32'),
  \ dotnet#method('set_MinOrphanLines(', 'int32 value)', 'void'),
  \ dotnet#method('get_MinWidowLines(', ')', 'int32'),
  \ dotnet#method('set_MinWidowLines(', 'int32 value)', 'void'),
  \ dotnet#method('get_KeepWithNext(', ')', 'bool'),
  \ dotnet#method('set_KeepWithNext(', 'bool value)', 'void'),
  \ dotnet#method('get_KeepTogether(', ')', 'bool'),
  \ dotnet#method('set_KeepTogether(', 'bool value)', 'void'),
  \ dotnet#method('GetDefaultMarginValue(', 'Thickness& margin)', 'void'),
  \ dotnet#method('IsMarginAuto(', 'Thickness margin)', 'static bool'),
  \ dotnet#method('IsLineHeightAuto(', 'float64 lineHeight)', 'static bool'),
  \ dotnet#method('HasNoTextContent(', 'class Paragraph paragraph)', 'static bool'),
  \ dotnet#method('ShouldSerializeInlines(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#method('Paragraph(', ')', 'static void .'),
  \ dotnet#prop('Inlines', 'InlineCollection'),
  \ dotnet#prop('TextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('TextIndent', 'float64'),
  \ dotnet#prop('MinOrphanLines', 'int32'),
  \ dotnet#prop('MinWidowLines', 'int32'),
  \ dotnet#prop('KeepWithNext', 'bool'),
  \ dotnet#prop('KeepTogether', 'bool'),
  \ ])

call dotnet#class('Run', 'Inline', [ 
  \ dotnet#method('Run(', ')', 'void'),
  \ dotnet#method('Run(', 'string text)', 'void'),
  \ dotnet#method('Run(', 'string text, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('OnTextUpdated(', ')', 'strict void'),
  \ dotnet#method('BeforeLogicalTreeChange(', ')', 'strict void'),
  \ dotnet#method('AfterLogicalTreeChange(', ')', 'strict void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('ShouldSerializeText(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#method('Run(', ')', 'static void .'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('Section', 'Block', [ 
  \ dotnet#method('Section(', ')', 'void'),
  \ dotnet#method('Section(', 'class Block block)', 'void'),
  \ dotnet#method('get_HasTrailingParagraphBreakOnPaste(', ')', 'bool'),
  \ dotnet#method('set_HasTrailingParagraphBreakOnPaste(', 'bool value)', 'void'),
  \ dotnet#method('get_Blocks(', ')', 'BlockCollection'),
  \ dotnet#method('ShouldSerializeBlocks(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#prop('HasTrailingParagraphBreakOnPaste', 'bool'),
  \ dotnet#prop('Blocks', 'BlockCollection'),
  \ ])

call dotnet#class('Table', 'Block', [ 
  \ dotnet#method('Table(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_Columns(', ')', 'TableColumnCollection'),
  \ dotnet#method('ShouldSerializeColumns(', ')', 'bool'),
  \ dotnet#method('get_RowGroups(', ')', 'TableRowGroupCollection'),
  \ dotnet#method('get_CellSpacing(', ')', 'float64'),
  \ dotnet#method('set_CellSpacing(', 'float64 value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_InternalCellSpacing(', ')', 'float64'),
  \ dotnet#method('get_InsertionIndex(', ')', 'int32 '),
  \ dotnet#method('set_InsertionIndex(', 'int32 value)', 'void '),
  \ dotnet#method('get_InsertionIndex(', ')', 'int32'),
  \ dotnet#method('set_InsertionIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_ColumnCount(', ')', 'int32'),
  \ dotnet#method('EnsureColumnCount(', 'int32 columnCount)', 'void'),
  \ dotnet#method('OnStructureChanged(', ')', 'void'),
  \ dotnet#method('ValidateStructure(', ')', 'void'),
  \ dotnet#method('InvalidateColumns(', ')', 'void'),
  \ dotnet#method('IsFirstNonEmptyRowGroup(', 'int32 rowGroupIndex)', 'bool'),
  \ dotnet#method('IsLastNonEmptyRowGroup(', 'int32 rowGroupIndex)', 'bool'),
  \ dotnet#method('add_TableStructureChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_TableStructureChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('Table(', ')', 'static void .'),
  \ dotnet#event('TableStructureChanged', 'EventHandler'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('Columns', 'TableColumnCollection'),
  \ dotnet#prop('RowGroups', 'TableRowGroupCollection'),
  \ dotnet#prop('CellSpacing', 'float64'),
  \ dotnet#prop('InternalCellSpacing', 'float64'),
  \ dotnet#prop('InsertionIndex', 'int32'),
  \ dotnet#prop('InsertionIndex', 'int32'),
  \ dotnet#prop('ColumnCount', 'int32'),
  \ ])

call dotnet#class('TableCell', 'TextElement', [ 
  \ dotnet#method('TableCell(', ')', 'void'),
  \ dotnet#method('TableCell(', 'class Block blockItem)', 'void'),
  \ dotnet#method('OnNewParent(', 'class DependencyObject newParent)', 'strict void'),
  \ dotnet#method('get_Blocks(', ')', 'BlockCollection'),
  \ dotnet#method('get_ColumnSpan(', ')', 'int32'),
  \ dotnet#method('set_ColumnSpan(', 'int32 value)', 'void'),
  \ dotnet#method('get_RowSpan(', ')', 'int32'),
  \ dotnet#method('set_RowSpan(', 'int32 value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_Padding(', ')', 'Thickness'),
  \ dotnet#method('set_Padding(', 'Thickness value)', 'void'),
  \ dotnet#method('get_BorderThickness(', ')', 'Thickness'),
  \ dotnet#method('set_BorderThickness(', 'Thickness value)', 'void'),
  \ dotnet#method('get_BorderBrush(', ')', 'Brush'),
  \ dotnet#method('set_BorderBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_TextAlignment(', ')', 'TextAlignment'),
  \ dotnet#method('set_TextAlignment(', 'TextAlignment value)', 'void'),
  \ dotnet#method('get_FlowDirection(', ')', 'FlowDirection'),
  \ dotnet#method('set_FlowDirection(', 'FlowDirection value)', 'void'),
  \ dotnet#method('get_LineHeight(', ')', 'float64'),
  \ dotnet#method('set_LineHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_LineStackingStrategy(', ')', 'LineStackingStrategy'),
  \ dotnet#method('set_LineStackingStrategy(', 'LineStackingStrategy value)', 'void'),
  \ dotnet#method('OnEnterParentTree(', ')', 'void OnEnterParentTree()'),
  \ dotnet#method('OnExitParentTree(', ')', 'void OnExitParentTree()'),
  \ dotnet#method('OnAfterExitParentTree(', 'class TableRow parent)', 'void OnAfterExitParentTree(class TableRow parent)'),
  \ dotnet#method('get_Index(', ')', 'int32 get_Index()'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void set_Index(int32 value)'),
  \ dotnet#method('OnEnterParentTree(', ')', 'void'),
  \ dotnet#method('OnExitParentTree(', ')', 'void'),
  \ dotnet#method('OnAfterExitParentTree(', 'class TableRow row)', 'void'),
  \ dotnet#method('ValidateStructure(', 'int32 columnIndex)', 'void'),
  \ dotnet#method('get_Row(', ')', '.method'),
  \ dotnet#method('get_Table(', ')', '.method'),
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void'),
  \ dotnet#method('get_RowIndex(', ')', 'int32'),
  \ dotnet#method('get_RowGroupIndex(', ')', 'int32'),
  \ dotnet#method('get_ColumnIndex(', ')', 'int32'),
  \ dotnet#method('set_ColumnIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsIMEStructuralElement(', ')', 'strict bool'),
  \ dotnet#method('TableCell(', ')', 'static void .'),
  \ dotnet#prop('Blocks', 'BlockCollection'),
  \ dotnet#prop('ColumnSpan', 'int32'),
  \ dotnet#prop('RowSpan', 'int32'),
  \ dotnet#prop('Padding', 'Thickness'),
  \ dotnet#prop('BorderThickness', 'Thickness'),
  \ dotnet#prop('BorderBrush', 'Brush'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('LineStackingStrategy', 'LineStackingStrategy'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('Row', 'TableRow'),
  \ dotnet#prop('Table', 'Table'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('RowIndex', 'int32'),
  \ dotnet#prop('RowGroupIndex', 'int32'),
  \ dotnet#prop('ColumnIndex', 'int32'),
  \ dotnet#prop('IsIMEStructuralElement', 'bool'),
  \ ])

call dotnet#class('TableColumn', 'FrameworkContentElement', [ 
  \ dotnet#method('TableColumn(', ')', 'void'),
  \ dotnet#method('get_Width(', ')', 'GridLength'),
  \ dotnet#method('set_Width(', 'GridLength value)', 'void'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('OnEnterParentTree(', ')', 'void OnEnterParentTree()'),
  \ dotnet#method('OnExitParentTree(', ')', 'void OnExitParentTree()'),
  \ dotnet#method('OnAfterExitParentTree(', 'class Table parent)', 'void OnAfterExitParentTree(class Table parent)'),
  \ dotnet#method('get_Index(', ')', 'int32 get_Index()'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void set_Index(int32 value)'),
  \ dotnet#method('OnEnterParentTree(', ')', 'void'),
  \ dotnet#method('OnExitParentTree(', ')', 'void'),
  \ dotnet#method('get_Table(', ')', '.method'),
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void'),
  \ dotnet#method('get_DefaultWidth(', ')', 'static'),
  \ dotnet#method('TableColumn(', ')', 'static void .'),
  \ dotnet#prop('Width', 'GridLength'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('Table', 'Table'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('DefaultWidth', 'GridLength'),
  \ ])

call dotnet#class('TableRow', 'TextElement', [ 
  \ dotnet#method('TableRow(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('OnNewParent(', 'class DependencyObject newParent)', 'strict void'),
  \ dotnet#method('OnEnterParentTree(', ')', 'void OnEnterParentTree()'),
  \ dotnet#method('OnExitParentTree(', ')', 'void OnExitParentTree()'),
  \ dotnet#method('OnAfterExitParentTree(', 'class TableRowGroup parent)', 'void OnAfterExitParentTree(class TableRowGroup parent)'),
  \ dotnet#method('get_Index(', ')', 'int32 get_Index()'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void set_Index(int32 value)'),
  \ dotnet#method('OnEnterParentTree(', ')', 'void'),
  \ dotnet#method('OnExitParentTree(', ')', 'void'),
  \ dotnet#method('OnAfterExitParentTree(', 'class TableRowGroup rowGroup)', 'void'),
  \ dotnet#method('ValidateStructure(', 'class RowSpanVTableRow rowSpanVTableRow)', 'void'),
  \ dotnet#method('get_RowGroup(', ')', '.method'),
  \ dotnet#method('get_Table(', ')', '.method'),
  \ dotnet#method('get_Cells(', ')', 'TableCellCollection'),
  \ dotnet#method('ShouldSerializeCells(', ')', 'bool'),
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void'),
  \ dotnet#method('get_InsertionIndex(', ')', 'int32 '),
  \ dotnet#method('set_InsertionIndex(', 'int32 value)', 'void '),
  \ dotnet#method('get_InsertionIndex(', ')', 'int32'),
  \ dotnet#method('set_InsertionIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_SpannedCells(', ')', '.method'),
  \ dotnet#method('get_ColumnCount(', ')', 'int32'),
  \ dotnet#method('get_HasForeignCells(', ')', 'bool'),
  \ dotnet#method('get_HasRealCells(', ')', 'bool'),
  \ dotnet#method('get_FormatCellCount(', ')', 'int32'),
  \ dotnet#method('get_IsIMEStructuralElement(', ')', 'strict bool'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('RowGroup', 'TableRowGroup'),
  \ dotnet#prop('Table', 'Table'),
  \ dotnet#prop('Cells', 'TableCellCollection'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('InsertionIndex', 'int32'),
  \ dotnet#prop('InsertionIndex', 'int32'),
  \ dotnet#prop('SpannedCells', 'TableCell[]'),
  \ dotnet#prop('ColumnCount', 'int32'),
  \ dotnet#prop('HasForeignCells', 'bool'),
  \ dotnet#prop('HasRealCells', 'bool'),
  \ dotnet#prop('FormatCellCount', 'int32'),
  \ dotnet#prop('IsIMEStructuralElement', 'bool'),
  \ ])

call dotnet#class('TableRowGroup', 'TextElement', [ 
  \ dotnet#method('TableRowGroup(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_Rows(', ')', 'TableRowCollection'),
  \ dotnet#method('ShouldSerializeRows(', ')', 'bool'),
  \ dotnet#method('OnEnterParentTree(', ')', 'void OnEnterParentTree()'),
  \ dotnet#method('OnExitParentTree(', ')', 'void OnExitParentTree()'),
  \ dotnet#method('OnAfterExitParentTree(', 'class Table parent)', 'void OnAfterExitParentTree(class Table parent)'),
  \ dotnet#method('get_Index(', ')', 'int32 get_Index()'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void set_Index(int32 value)'),
  \ dotnet#method('OnEnterParentTree(', ')', 'void'),
  \ dotnet#method('OnExitParentTree(', ')', 'void'),
  \ dotnet#method('OnAfterExitParentTree(', 'class Table table)', 'void'),
  \ dotnet#method('ValidateStructure(', ')', 'void'),
  \ dotnet#method('get_Table(', ')', '.method'),
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void'),
  \ dotnet#method('get_InsertionIndex(', ')', 'int32 '),
  \ dotnet#method('set_InsertionIndex(', 'int32 value)', 'void '),
  \ dotnet#method('get_InsertionIndex(', ')', 'int32'),
  \ dotnet#method('set_InsertionIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsIMEStructuralElement(', ')', 'strict bool'),
  \ dotnet#method('OnNewParent(', 'class DependencyObject newParent)', 'strict void'),
  \ dotnet#prop('Rows', 'TableRowCollection'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('Table', 'Table'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('InsertionIndex', 'int32'),
  \ dotnet#prop('InsertionIndex', 'int32'),
  \ dotnet#prop('IsIMEStructuralElement', 'bool'),
  \ ])

call dotnet#class('TextEffectResolver', 'Object', [ 
  \ dotnet#method('Resolve(', 'class TextPointer startPosition, TextPointer endPosition, TextEffect effect)', 'static TextEffectTarget[]'),
  \ ])

call dotnet#class('TextEffectTarget', 'Object', [ 
  \ dotnet#method('TextEffectTarget(', 'class DependencyObject element, TextEffect effect)', 'void'),
  \ dotnet#method('get_Element(', ')', 'DependencyObject'),
  \ dotnet#method('get_TextEffect(', ')', 'TextEffect'),
  \ dotnet#method('Enable(', ')', 'void'),
  \ dotnet#method('Disable(', ')', 'void'),
  \ dotnet#method('get_IsEnabled(', ')', 'bool'),
  \ dotnet#prop('Element', 'DependencyObject'),
  \ dotnet#prop('TextEffect', 'TextEffect'),
  \ dotnet#prop('IsEnabled', 'bool'),
  \ ])

call dotnet#class('TextElementEditingBehaviorAttribute', 'Attribute', [ 
  \ dotnet#method('TextElementEditingBehaviorAttribute(', ')', 'void'),
  \ dotnet#method('get_IsMergeable(', ')', 'bool'),
  \ dotnet#method('set_IsMergeable(', 'bool value)', 'void'),
  \ dotnet#method('get_IsTypographicOnly(', ')', 'bool'),
  \ dotnet#method('set_IsTypographicOnly(', 'bool value)', 'void'),
  \ dotnet#prop('IsMergeable', 'bool'),
  \ dotnet#prop('IsTypographicOnly', 'bool'),
  \ ])

call dotnet#class('TextPointer', 'ContentPosition', [ 
  \ dotnet#method('TextPointer(', 'class TextPointer textPointer)', 'void'),
  \ dotnet#method('TextPointer(', 'class TextPointer position, int32 offset)', 'void'),
  \ dotnet#method('TextPointer(', 'class TextPointer position, LogicalDirection direction)', 'void'),
  \ dotnet#method('TextPointer(', 'class TextPointer position, int32 offset, LogicalDirection direction)', 'void'),
  \ dotnet#method('TextPointer(', 'class TextContainer textContainer, int32 offset, LogicalDirection direction)', 'void'),
  \ dotnet#method('TextPointer(', 'class TextContainer tree, TextTreeNode node, ElementEdge edge)', 'void'),
  \ dotnet#method('TextPointer(', 'class TextContainer tree, TextTreeNode node, ElementEdge edge, LogicalDirection direction)', 'void'),
  \ dotnet#method('CreatePointer(', ')', 'TextPointer'),
  \ dotnet#method('CreatePointer(', 'LogicalDirection gravity)', 'TextPointer'),
  \ dotnet#method('IsInSameDocument(', 'class TextPointer textPosition)', 'bool'),
  \ dotnet#method('CompareTo(', 'class TextPointer position)', 'int32'),
  \ dotnet#method('GetPointerContext(', 'LogicalDirection direction)', 'TextPointerContext'),
  \ dotnet#method('GetTextRunLength(', 'LogicalDirection direction)', 'int32'),
  \ dotnet#method('GetOffsetToPosition(', 'class TextPointer position)', 'int32'),
  \ dotnet#method('GetTextInRun(', 'LogicalDirection direction)', 'string'),
  \ dotnet#method('GetTextInRun(', 'LogicalDirection direction, char[] textBuffer, int32 startIndex, int32 count)', 'int32'),
  \ dotnet#method('GetAdjacentElement(', 'LogicalDirection direction)', 'DependencyObject'),
  \ dotnet#method('GetPositionAtOffset(', 'int32 offset)', 'TextPointer'),
  \ dotnet#method('GetPositionAtOffset(', 'int32 offset, LogicalDirection direction)', 'TextPointer'),
  \ dotnet#method('GetNextContextPosition(', 'LogicalDirection direction)', 'TextPointer'),
  \ dotnet#method('GetInsertionPosition(', 'LogicalDirection direction)', 'TextPointer'),
  \ dotnet#method('GetInsertionPosition(', ')', 'TextPointer'),
  \ dotnet#method('GetNextInsertionPosition(', 'LogicalDirection direction)', 'TextPointer'),
  \ dotnet#method('GetLineStartPosition(', 'int32 count)', 'TextPointer'),
  \ dotnet#method('GetLineStartPosition(', 'int32 count, [out] int32& actualCount)', 'TextPointer'),
  \ dotnet#method('GetCharacterRect(', 'LogicalDirection direction)', 'Rect'),
  \ dotnet#method('InsertTextInRun(', 'string textData)', 'void'),
  \ dotnet#method('DeleteTextInRun(', 'int32 count)', 'int32'),
  \ dotnet#method('InsertTextElement(', 'class TextElement textElement)', 'void'),
  \ dotnet#method('InsertParagraphBreak(', ')', 'TextPointer'),
  \ dotnet#method('InsertLineBreak(', ')', 'TextPointer'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_HasValidLayout(', ')', 'bool'),
  \ dotnet#method('get_LogicalDirection(', ')', 'LogicalDirection'),
  \ dotnet#method('get_Parent(', ')', 'DependencyObject'),
  \ dotnet#method('get_IsAtInsertionPosition(', ')', 'bool'),
  \ dotnet#method('get_IsAtLineStartPosition(', ')', 'bool'),
  \ dotnet#method('get_Paragraph(', ')', 'Paragraph'),
  \ dotnet#method('get_ParagraphOrBlockUIContainer(', ')', '.method'),
  \ dotnet#method('get_DocumentStart(', ')', 'TextPointer'),
  \ dotnet#method('get_DocumentEnd(', ')', 'TextPointer'),
  \ dotnet#method('GetNonMergeableInlineAncestor(', ')', 'Inline'),
  \ dotnet#method('GetListAncestor(', ')', 'ListItem'),
  \ dotnet#method('GetTextInRun(', 'class TextContainer textContainer, int32 symbolOffset, TextTreeTextNode textNode, int32 nodeOffset, LogicalDirection direction, char[] textBuffer, int32 startIndex, int32 count)', 'static int32'),
  \ dotnet#method('GetAdjacentElement(', 'class TextTreeNode node, ElementEdge edge, LogicalDirection direction)', 'static DependencyObject'),
  \ dotnet#method('MoveToPosition(', 'class TextPointer textPosition)', 'void'),
  \ dotnet#method('MoveByOffset(', 'int32 offset)', 'int32'),
  \ dotnet#method('MoveToNextContextPosition(', 'LogicalDirection direction)', 'bool'),
  \ dotnet#method('MoveToInsertionPosition(', 'LogicalDirection direction)', 'bool'),
  \ dotnet#method('MoveToNextInsertionPosition(', 'LogicalDirection direction)', 'bool'),
  \ dotnet#method('MoveToLineBoundary(', 'int32 count)', 'int32'),
  \ dotnet#method('InsertUIElement(', 'class UIElement uiElement)', 'void'),
  \ dotnet#method('GetAdjacentElementFromOuterPosition(', 'LogicalDirection direction)', 'TextElement'),
  \ dotnet#method('SetLogicalDirection(', 'LogicalDirection direction)', 'void'),
  \ dotnet#method('get_IsFrozen(', ')', 'bool'),
  \ dotnet#method('Freeze(', ')', 'void'),
  \ dotnet#method('GetFrozenPointer(', 'LogicalDirection logicalDirection)', 'TextPointer'),
  \ dotnet#method('SetLogicalDirection(', 'LogicalDirection direction)', 'void '),
  \ dotnet#method('CompareTo(', 'class ITextPointer position)', 'int32 '),
  \ dotnet#method('CompareTo(', 'StaticTextPointer position)', 'int32 '),
  \ dotnet#method('GetOffsetToPosition(', 'class ITextPointer position)', 'int32 '),
  \ dotnet#method('GetPointerContext(', 'LogicalDirection direction)', ''),
  \ dotnet#method('GetTextRunLength(', 'LogicalDirection direction)', 'int32 '),
  \ dotnet#method('GetTextInRun(', 'LogicalDirection direction)', 'string '),
  \ dotnet#method('GetTextInRun(', 'LogicalDirection direction, char[] textBuffer, int32 startIndex, int32 count)', 'int32 '),
  \ dotnet#method('GetAdjacentElement(', 'LogicalDirection direction)', 'object '),
  \ dotnet#method('GetElementType(', 'LogicalDirection direction)', ''),
  \ dotnet#method('HasEqualScope(', 'class ITextPointer position)', 'bool '),
  \ dotnet#method('GetNextContextPosition(', 'LogicalDirection direction)', ''),
  \ dotnet#method('GetInsertionPosition(', 'LogicalDirection direction)', ''),
  \ dotnet#method('GetFormatNormalizedPosition(', 'LogicalDirection direction)', ''),
  \ dotnet#method('GetNextInsertionPosition(', 'LogicalDirection direction)', ''),
  \ dotnet#method('GetValue(', 'class DependencyProperty formattingProperty)', 'object '),
  \ dotnet#method('ReadLocalValue(', 'class DependencyProperty formattingProperty)', 'object '),
  \ dotnet#method('GetLocalValueEnumerator(', ')', ''),
  \ dotnet#method('CreatePointer(', ')', ''),
  \ dotnet#method('CreateStaticPointer(', ')', ''),
  \ dotnet#method('CreatePointer(', 'int32 offset)', ''),
  \ dotnet#method('CreatePointer(', 'LogicalDirection gravity)', ''),
  \ dotnet#method('CreatePointer(', 'int32 offset, LogicalDirection gravity)', ''),
  \ dotnet#method('Freeze(', ')', 'void '),
  \ dotnet#method('GetFrozenPointer(', 'LogicalDirection logicalDirection)', ''),
  \ dotnet#method('MoveToNextContextPosition(', 'LogicalDirection direction)', 'bool '),
  \ dotnet#method('MoveByOffset(', 'int32 offset)', 'int32 '),
  \ dotnet#method('MoveToPosition(', 'class ITextPointer position)', 'void '),
  \ dotnet#method('MoveToElementEdge(', 'ElementEdge edge)', 'void '),
  \ dotnet#method('MoveToElementEdge(', 'ElementEdge edge)', 'void'),
  \ dotnet#method('MoveToLineBoundary(', 'int32 count)', 'int32 '),
  \ dotnet#method('GetCharacterRect(', 'LogicalDirection direction)', ''),
  \ dotnet#method('MoveToInsertionPosition(', 'LogicalDirection direction)', 'bool '),
  \ dotnet#method('MoveToNextInsertionPosition(', 'LogicalDirection direction)', 'bool '),
  \ dotnet#method('InsertTextInRun(', 'string textData)', 'void '),
  \ dotnet#method('DeleteContentToPosition(', 'class ITextPointer limit)', 'void '),
  \ dotnet#method('ValidateLayout(', ')', 'bool '),
  \ dotnet#method('ValidateLayout(', ')', 'bool'),
  \ dotnet#method('GetAdjacentTextNodeSibling(', 'LogicalDirection direction)', 'TextTreeTextNode'),
  \ dotnet#method('GetAdjacentTextNodeSibling(', 'class TextTreeNode node, ElementEdge edge, LogicalDirection direction)', 'static TextTreeTextNode'),
  \ dotnet#method('GetAdjacentTextElementNodeSibling(', 'LogicalDirection direction)', 'TextTreeTextElementNode'),
  \ dotnet#method('GetAdjacentTextElementNode(', 'LogicalDirection direction)', 'TextTreeTextElementNode'),
  \ dotnet#method('GetAdjacentSiblingNode(', 'LogicalDirection direction)', 'TextTreeNode'),
  \ dotnet#method('GetAdjacentSiblingNode(', 'class TextTreeNode node, ElementEdge edge, LogicalDirection direction)', 'static TextTreeNode'),
  \ dotnet#method('GetSymbolOffset(', ')', 'int32'),
  \ dotnet#method('GetSymbolOffset(', 'class TextContainer tree, TextTreeNode node, ElementEdge edge)', 'static int32'),
  \ dotnet#method('GetLogicalTreeNode(', ')', 'DependencyObject'),
  \ dotnet#method('SyncToTreeGeneration(', ')', 'void'),
  \ dotnet#method('GetScopingNode(', ')', 'TextTreeNode'),
  \ dotnet#method('GetScopingNode(', 'class TextTreeNode node, ElementEdge edge)', 'static TextTreeNode'),
  \ dotnet#method('DebugAssertGeneration(', ')', 'void'),
  \ dotnet#method('GetNextNodeAndEdge(', '[out] TextTreeNode& node, [out] ElementEdge& edge)', 'bool'),
  \ dotnet#method('GetNextNodeAndEdge(', 'class TextTreeNode sourceNode, ElementEdge sourceEdge, bool plainTextOnly, [out] TextTreeNode& node, [out] ElementEdge& edge)', 'static bool'),
  \ dotnet#method('GetPreviousNodeAndEdge(', '[out] TextTreeNode& node, [out] ElementEdge& edge)', 'bool'),
  \ dotnet#method('GetPreviousNodeAndEdge(', 'class TextTreeNode sourceNode, ElementEdge sourceEdge, bool plainTextOnly, [out] TextTreeNode& node, [out] ElementEdge& edge)', 'static bool'),
  \ dotnet#method('GetPointerContextForward(', 'class TextTreeNode node, ElementEdge edge)', 'static TextPointerContext'),
  \ dotnet#method('GetPointerContextBackward(', 'class TextTreeNode node, ElementEdge edge)', 'static TextPointerContext'),
  \ dotnet#method('InsertInline(', 'class Inline inline)', 'void'),
  \ dotnet#method('GetCommonAncestor(', 'class TextPointer position1, TextPointer position2)', 'static DependencyObject'),
  \ dotnet#method('get_ParentType(', ')', ''),
  \ dotnet#method('get_TextContainer(', ')', ''),
  \ dotnet#method('get_HasValidLayout(', ')', 'bool '),
  \ dotnet#method('get_IsAtCaretUnitBoundary(', ')', 'bool '),
  \ dotnet#method('get_LogicalDirection(', ')', ''),
  \ dotnet#method('get_IsAtInsertionPosition(', ')', 'bool '),
  \ dotnet#method('get_IsFrozen(', ')', 'bool '),
  \ dotnet#method('get_Offset(', ')', 'int32 '),
  \ dotnet#method('get_Offset(', ')', 'int32'),
  \ dotnet#method('get_CharOffset(', ')', 'int32 '),
  \ dotnet#method('get_CharOffset(', ')', 'int32'),
  \ dotnet#method('get_TextContainer(', ')', '.method'),
  \ dotnet#method('get_ContainingFrameworkElement(', ')', '.method'),
  \ dotnet#method('get_IsAtRowEnd(', ')', 'bool'),
  \ dotnet#method('get_HasNonMergeableInlineAncestor(', ')', 'bool'),
  \ dotnet#method('get_IsAtNonMergeableInlineStart(', ')', 'bool'),
  \ dotnet#method('get_Node(', ')', '.method'),
  \ dotnet#method('get_Edge(', ')', '.method'),
  \ dotnet#method('get_ParentBlock(', ')', '.method'),
  \ dotnet#method('GetAdjacentNode(', 'LogicalDirection direction)', 'TextTreeNode'),
  \ dotnet#method('GetAdjacentNode(', 'class TextTreeNode node, ElementEdge edge, LogicalDirection direction)', 'static TextTreeNode'),
  \ dotnet#prop('HasValidLayout', 'bool'),
  \ dotnet#prop('LogicalDirection', 'LogicalDirection'),
  \ dotnet#prop('Parent', 'DependencyObject'),
  \ dotnet#prop('IsAtInsertionPosition', 'bool'),
  \ dotnet#prop('IsAtLineStartPosition', 'bool'),
  \ dotnet#prop('Paragraph', 'Paragraph'),
  \ dotnet#prop('ParagraphOrBlockUIContainer', 'Block'),
  \ dotnet#prop('DocumentStart', 'TextPointer'),
  \ dotnet#prop('DocumentEnd', 'TextPointer'),
  \ dotnet#prop('IsFrozen', 'bool'),
  \ dotnet#prop('ParentType', 'Type'),
  \ dotnet#prop('TextContainer', 'ITextContainer'),
  \ dotnet#prop('HasValidLayout', 'bool'),
  \ dotnet#prop('IsAtCaretUnitBoundary', 'bool'),
  \ dotnet#prop('LogicalDirection', 'LogicalDirection'),
  \ dotnet#prop('IsAtInsertionPosition', 'bool'),
  \ dotnet#prop('IsFrozen', 'bool'),
  \ dotnet#prop('Offset', 'int32'),
  \ dotnet#prop('Offset', 'int32'),
  \ dotnet#prop('CharOffset', 'int32'),
  \ dotnet#prop('CharOffset', 'int32'),
  \ dotnet#prop('TextContainer', 'TextContainer'),
  \ dotnet#prop('ContainingFrameworkElement', 'FrameworkElement'),
  \ dotnet#prop('IsAtRowEnd', 'bool'),
  \ dotnet#prop('HasNonMergeableInlineAncestor', 'bool'),
  \ dotnet#prop('IsAtNonMergeableInlineStart', 'bool'),
  \ dotnet#prop('Node', 'TextTreeNode'),
  \ dotnet#prop('Edge', 'ElementEdge'),
  \ dotnet#prop('ParentBlock', 'Block'),
  \ ])

call dotnet#class('TextRange', 'Object', [ 
  \ dotnet#method('TextRange(', 'class TextPointer position1, TextPointer position2)', 'void'),
  \ dotnet#method('TextRange(', 'class ITextPointer position1, ITextPointer position2)', 'void'),
  \ dotnet#method('TextRange(', 'class ITextPointer position1, ITextPointer position2, bool ignoreTextUnitBoundaries)', 'void'),
  \ dotnet#method('Contains(', 'class ITextPointer position)', 'bool '),
  \ dotnet#method('Select(', 'class ITextPointer position1, ITextPointer position2)', 'void '),
  \ dotnet#method('SelectWord(', 'class ITextPointer position)', 'void '),
  \ dotnet#method('SelectParagraph(', 'class ITextPointer position)', 'void '),
  \ dotnet#method('ApplyTypingHeuristics(', 'bool overType)', 'void '),
  \ dotnet#method('GetPropertyValue(', 'class DependencyProperty formattingProperty)', 'object '),
  \ dotnet#method('GetUIElementSelected(', ')', ''),
  \ dotnet#method('CanSave(', 'string dataFormat)', 'bool '),
  \ dotnet#method('Save(', 'class Stream stream, string dataFormat)', 'void '),
  \ dotnet#method('Save(', 'class Stream stream, string dataFormat, bool preserveTextElements)', 'void '),
  \ dotnet#method('BeginChange(', ')', 'void '),
  \ dotnet#method('BeginChangeNoUndo(', ')', 'void '),
  \ dotnet#method('EndChange(', ')', 'void '),
  \ dotnet#method('EndChange(', 'bool disableScroll, bool skipEvents)', 'void '),
  \ dotnet#method('DeclareChangeBlock(', ')', ''),
  \ dotnet#method('DeclareChangeBlock(', 'bool disableScroll)', ''),
  \ dotnet#method('NotifyChanged(', 'bool disableScroll, bool skipEvents)', 'void '),
  \ dotnet#method('get_IgnoreTextUnitBoundaries(', ')', 'bool '),
  \ dotnet#method('get_Start(', ')', ''),
  \ dotnet#method('get_End(', ')', ''),
  \ dotnet#method('get_IsEmpty(', ')', 'bool '),
  \ dotnet#method('get_TextSegments(', ')', ''),
  \ dotnet#method('get_HasConcreteTextContainer(', ')', 'bool '),
  \ dotnet#method('get_Text(', ')', 'string '),
  \ dotnet#method('set_Text(', 'string value)', 'void '),
  \ dotnet#method('get_Xml(', ')', 'string '),
  \ dotnet#method('get_ChangeBlockLevel(', ')', 'int32 '),
  \ dotnet#method('get_IsTableCellRange(', ')', 'bool '),
  \ dotnet#method('add_Changed(', 'class EventHandler value)', 'void '),
  \ dotnet#method('remove_Changed(', 'class EventHandler value)', 'void '),
  \ dotnet#method('FireChanged(', ')', 'void '),
  \ dotnet#method('get__IsTableCellRange(', ')', 'bool '),
  \ dotnet#method('set__IsTableCellRange(', 'bool value)', 'void '),
  \ dotnet#method('get__TextSegments(', ')', ''),
  \ dotnet#method('set__TextSegments(', 'class List value)', 'void '),
  \ dotnet#method('get__ChangeBlockLevel(', ')', 'int32 '),
  \ dotnet#method('set__ChangeBlockLevel(', 'int32 value)', 'void '),
  \ dotnet#method('get__ChangeBlockUndoRecord(', ')', ''),
  \ dotnet#method('set__ChangeBlockUndoRecord(', 'class ChangeBlockUndoRecord value)', 'void '),
  \ dotnet#method('get__IsChanged(', ')', 'bool '),
  \ dotnet#method('set__IsChanged(', 'bool value)', 'void '),
  \ dotnet#method('get__ContentGeneration(', ')', 'uint32 '),
  \ dotnet#method('set__ContentGeneration(', 'uint32 value)', 'void '),
  \ dotnet#method('Contains(', 'class TextPointer textPointer)', 'bool'),
  \ dotnet#method('Select(', 'class TextPointer position1, TextPointer position2)', 'void'),
  \ dotnet#method('SelectWord(', 'class TextPointer textPointer)', 'void'),
  \ dotnet#method('SelectParagraph(', 'class ITextPointer position)', 'void'),
  \ dotnet#method('ApplyPropertyValue(', 'class DependencyProperty formattingProperty, object value)', 'void'),
  \ dotnet#method('ApplyPropertyValue(', 'class DependencyProperty formattingProperty, object value, bool applyToParagraphs)', 'void'),
  \ dotnet#method('ApplyPropertyValue(', 'class DependencyProperty formattingProperty, object value, bool applyToParagraphs, PropertyValueAction propertyValueAction)', 'void'),
  \ dotnet#method('ClearAllProperties(', ')', 'void'),
  \ dotnet#method('GetPropertyValue(', 'class DependencyProperty formattingProperty)', 'object'),
  \ dotnet#method('GetUIElementSelected(', ')', 'UIElement'),
  \ dotnet#method('CanSave(', 'string dataFormat)', 'bool'),
  \ dotnet#method('CanLoad(', 'string dataFormat)', 'bool'),
  \ dotnet#method('Save(', 'class Stream stream, string dataFormat)', 'void'),
  \ dotnet#method('Save(', 'class Stream stream, string dataFormat, bool preserveTextElements)', 'void'),
  \ dotnet#method('Load(', 'class Stream stream, string dataFormat)', 'void'),
  \ dotnet#method('InsertEmbeddedUIElement(', 'class FrameworkElement embeddedElement)', 'void'),
  \ dotnet#method('InsertImage(', 'class Image image)', 'void'),
  \ dotnet#method('SetXmlVirtual(', 'class TextElement fragment)', 'strict void'),
  \ dotnet#method('LoadVirtual(', 'class Stream stream, string dataFormat)', 'strict void'),
  \ dotnet#method('InsertTable(', 'int32 rowCount, int32 columnCount)', 'Table'),
  \ dotnet#method('InsertRows(', 'int32 rowCount)', 'TextRange'),
  \ dotnet#method('DeleteRows(', ')', 'bool'),
  \ dotnet#method('InsertColumns(', 'int32 columnCount)', 'TextRange'),
  \ dotnet#method('DeleteColumns(', ')', 'bool'),
  \ dotnet#method('MergeCells(', ')', 'TextRange'),
  \ dotnet#method('SplitCell(', 'int32 splitCountHorizontal, int32 splitCountVertical)', 'TextRange'),
  \ dotnet#method('get_Start(', ')', 'TextPointer'),
  \ dotnet#method('get_End(', ')', 'TextPointer'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_HasConcreteTextContainer(', ')', 'bool'),
  \ dotnet#method('get_ContainingFrameworkElement(', ')', '.method'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('get_Xml(', ')', 'string'),
  \ dotnet#method('set_Xml(', 'string value)', 'void'),
  \ dotnet#method('get_IsTableCellRange(', ')', 'bool'),
  \ dotnet#method('add_Changed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Changed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('BeginChange(', ')', 'void'),
  \ dotnet#method('EndChange(', ')', 'void'),
  \ dotnet#method('DeclareChangeBlock(', ')', 'IDisposable'),
  \ dotnet#method('DeclareChangeBlock(', 'bool disableScroll)', 'IDisposable'),
  \ dotnet#method('get__IsChanged(', ')', 'bool'),
  \ dotnet#method('set__IsChanged(', 'bool value)', 'void'),
  \ dotnet#method('InsertEmbeddedUIElementVirtual(', 'class FrameworkElement embeddedElement)', 'strict void'),
  \ dotnet#method('ApplyPropertyToTextVirtual(', 'class DependencyProperty formattingProperty, object value, bool applyToParagraphs, PropertyValueAction propertyValueAction)', 'strict void'),
  \ dotnet#method('ClearAllPropertiesVirtual(', ')', 'strict void'),
  \ dotnet#method('InsertTableVirtual(', 'int32 rowCount, int32 columnCount)', 'strict'),
  \ dotnet#method('InsertRowsVirtual(', 'int32 rowCount)', 'strict'),
  \ dotnet#method('DeleteRowsVirtual(', ')', 'strict bool'),
  \ dotnet#method('InsertColumnsVirtual(', 'int32 columnCount)', 'strict'),
  \ dotnet#method('DeleteColumnsVirtual(', ')', 'strict bool'),
  \ dotnet#method('MergeCellsVirtual(', ')', 'strict'),
  \ dotnet#method('SplitCellVirtual(', 'int32 splitCountHorizontal, int32 splitCountVertical)', 'strict'),
  \ dotnet#method('get_ChangeBlockLevel(', ')', 'int32'),
  \ dotnet#event('Changed', 'EventHandler'),
  \ dotnet#prop('IgnoreTextUnitBoundaries', 'bool'),
  \ dotnet#prop('Start', 'ITextPointer'),
  \ dotnet#prop('End', 'ITextPointer'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('TextSegments', 'List'),
  \ dotnet#prop('HasConcreteTextContainer', 'bool'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('Xml', 'string'),
  \ dotnet#prop('ChangeBlockLevel', 'int32'),
  \ dotnet#prop('IsTableCellRange', 'bool'),
  \ dotnet#prop('_IsTableCellRange', 'bool'),
  \ dotnet#prop('_TextSegments', 'List'),
  \ dotnet#prop('_ChangeBlockLevel', 'int32'),
  \ dotnet#prop('_ChangeBlockUndoRecord', 'ChangeBlockUndoRecord'),
  \ dotnet#prop('_IsChanged', 'bool'),
  \ dotnet#prop('_ContentGeneration', 'uint32'),
  \ dotnet#prop('Start', 'TextPointer'),
  \ dotnet#prop('End', 'TextPointer'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('HasConcreteTextContainer', 'bool'),
  \ dotnet#prop('ContainingFrameworkElement', 'FrameworkElement'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('Xml', 'string'),
  \ dotnet#prop('IsTableCellRange', 'bool'),
  \ dotnet#prop('_IsChanged', 'bool'),
  \ dotnet#prop('ChangeBlockLevel', 'int32'),
  \ ])

call dotnet#class('TextSelection', 'TextRange', [ 
  \ dotnet#method('TextSelection(', 'class TextEditor textEditor)', 'void'),
  \ dotnet#method('Select(', 'class ITextPointer anchorPosition, ITextPointer movingPosition)', 'void '),
  \ dotnet#method('SelectWord(', 'class ITextPointer position)', 'void '),
  \ dotnet#method('SelectParagraph(', 'class ITextPointer position)', 'void '),
  \ dotnet#method('ApplyTypingHeuristics(', 'bool overType)', 'void '),
  \ dotnet#method('GetPropertyValue(', 'class DependencyProperty formattingProperty)', 'object '),
  \ dotnet#method('get__IsChanged(', ')', 'bool '),
  \ dotnet#method('set__IsChanged(', 'bool value)', 'void '),
  \ dotnet#method('NotifyChanged(', 'bool disableScroll, bool skipEvents)', 'void '),
  \ dotnet#method('get_Text(', ')', 'string '),
  \ dotnet#method('set_Text(', 'string value)', 'void '),
  \ dotnet#method('UpdateCaretAndHighlight(', ')', 'void '),
  \ dotnet#method('get_AnchorPosition(', ')', ''),
  \ dotnet#method('get_MovingPosition(', ')', ''),
  \ dotnet#method('SetCaretToPosition(', 'class ITextPointer caretPosition, LogicalDirection direction, bool allowStopAtLineEnd, bool allowStopNearSpace)', 'void '),
  \ dotnet#method('ExtendToPosition(', 'class ITextPointer position)', 'void '),
  \ dotnet#method('ExtendToNextInsertionPosition(', 'LogicalDirection direction)', 'bool '),
  \ dotnet#method('Contains(', 'Point point)', 'bool '),
  \ dotnet#method('OnDetach(', ')', 'void '),
  \ dotnet#method('OnTextViewUpdated(', ')', 'void '),
  \ dotnet#method('DetachFromVisualTree(', ')', 'void '),
  \ dotnet#method('RefreshCaret(', ')', 'void '),
  \ dotnet#method('OnInterimSelectionChanged(', 'bool interimSelection)', 'void '),
  \ dotnet#method('SetSelectionByMouse(', 'class ITextPointer cursorPosition, Point cursorMousePoint)', 'void '),
  \ dotnet#method('ExtendSelectionByMouse(', 'class ITextPointer cursorPosition, bool forceWordSelection, bool forceParagraphSelection)', 'void '),
  \ dotnet#method('ExtendToNextTableRow(', 'LogicalDirection direction)', 'bool '),
  \ dotnet#method('get_IsInterimSelection(', ')', 'bool'),
  \ dotnet#method('get_IsInterimSelection(', ')', 'bool '),
  \ dotnet#method('get_AnchorPosition(', ')', '.method'),
  \ dotnet#method('get_MovingPosition(', ')', '.method'),
  \ dotnet#method('SetCaretToPosition(', 'class TextPointer caretPosition, LogicalDirection direction, bool allowStopAtLineEnd, bool allowStopNearSpace)', 'void'),
  \ dotnet#method('ExtendToNextInsertionPosition(', 'LogicalDirection direction)', 'bool'),
  \ dotnet#method('OnInputLanguageChanged(', 'class CultureInfo cultureInfo)', 'static void'),
  \ dotnet#method('Contains(', 'Point point)', 'bool'),
  \ dotnet#method('InsertEmbeddedUIElementVirtual(', 'class FrameworkElement embeddedElement)', 'strict void'),
  \ dotnet#method('ApplyPropertyToTextVirtual(', 'class DependencyProperty formattingProperty, object value, bool applyToParagraphs, PropertyValueAction propertyValueAction)', 'strict void'),
  \ dotnet#method('ClearAllPropertiesVirtual(', ')', 'strict void'),
  \ dotnet#method('SetXmlVirtual(', 'class TextElement fragment)', 'strict void'),
  \ dotnet#method('LoadVirtual(', 'class Stream stream, string dataFormat)', 'strict void'),
  \ dotnet#method('InsertTableVirtual(', 'int32 rowCount, int32 columnCount)', 'strict'),
  \ dotnet#method('GetCurrentValue(', 'class DependencyProperty formattingProperty)', 'object'),
  \ dotnet#method('SpringloadCurrentFormatting(', ')', 'void'),
  \ dotnet#method('ClearSpringloadFormatting(', ')', 'void'),
  \ dotnet#method('ApplySpringloadFormatting(', ')', 'void'),
  \ dotnet#method('UpdateCaretState(', 'CaretScrollMethod caretScrollMethod)', 'void'),
  \ dotnet#method('GetCaretBrush(', 'class TextEditor textEditor)', 'static Brush'),
  \ dotnet#method('IsBidiInputLanguageInstalled(', ')', 'static bool'),
  \ dotnet#method('ValidateLayout(', ')', 'void '),
  \ dotnet#method('get_CaretElement(', ')', '.method'),
  \ dotnet#method('get_CaretElement(', ')', ''),
  \ dotnet#method('get_CoversEntireContent(', ')', 'bool '),
  \ dotnet#method('OnCaretNavigation(', ')', 'void'),
  \ dotnet#method('OnCaretNavigation(', ')', 'void '),
  \ dotnet#method('get_TextEditor(', ')', ''),
  \ dotnet#method('get_TextView(', ')', ''),
  \ dotnet#prop('_IsChanged', 'bool'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('AnchorPosition', 'ITextPointer'),
  \ dotnet#prop('MovingPosition', 'ITextPointer'),
  \ dotnet#prop('IsInterimSelection', 'bool'),
  \ dotnet#prop('IsInterimSelection', 'bool'),
  \ dotnet#prop('AnchorPosition', 'TextPointer'),
  \ dotnet#prop('MovingPosition', 'TextPointer'),
  \ dotnet#prop('CaretElement', 'CaretElement'),
  \ dotnet#prop('CaretElement', 'CaretElement'),
  \ dotnet#prop('CoversEntireContent', 'bool'),
  \ dotnet#prop('TextEditor', 'TextEditor'),
  \ dotnet#prop('TextView', 'ITextView'),
  \ ])

call dotnet#class('Typography', 'Object', [ 
  \ dotnet#method('Typography(', 'class DependencyObject owner)', 'void'),
  \ dotnet#method('get_StandardLigatures(', ')', 'bool'),
  \ dotnet#method('set_StandardLigatures(', 'bool value)', 'void'),
  \ dotnet#method('get_ContextualLigatures(', ')', 'bool'),
  \ dotnet#method('set_ContextualLigatures(', 'bool value)', 'void'),
  \ dotnet#method('get_DiscretionaryLigatures(', ')', 'bool'),
  \ dotnet#method('set_DiscretionaryLigatures(', 'bool value)', 'void'),
  \ dotnet#method('get_HistoricalLigatures(', ')', 'bool'),
  \ dotnet#method('set_HistoricalLigatures(', 'bool value)', 'void'),
  \ dotnet#method('get_AnnotationAlternates(', ')', 'int32'),
  \ dotnet#method('set_AnnotationAlternates(', 'int32 value)', 'void'),
  \ dotnet#method('get_ContextualAlternates(', ')', 'bool'),
  \ dotnet#method('set_ContextualAlternates(', 'bool value)', 'void'),
  \ dotnet#method('get_HistoricalForms(', ')', 'bool'),
  \ dotnet#method('set_HistoricalForms(', 'bool value)', 'void'),
  \ dotnet#method('get_Kerning(', ')', 'bool'),
  \ dotnet#method('set_Kerning(', 'bool value)', 'void'),
  \ dotnet#method('get_CapitalSpacing(', ')', 'bool'),
  \ dotnet#method('set_CapitalSpacing(', 'bool value)', 'void'),
  \ dotnet#method('get_CaseSensitiveForms(', ')', 'bool'),
  \ dotnet#method('set_CaseSensitiveForms(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet1(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet1(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet2(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet2(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet3(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet3(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet4(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet4(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet5(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet5(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet6(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet6(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet7(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet7(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet8(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet8(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet9(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet9(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet10(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet10(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet11(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet11(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet12(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet12(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet13(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet13(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet14(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet14(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet15(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet15(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet16(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet16(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet17(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet17(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet18(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet18(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet19(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet19(', 'bool value)', 'void'),
  \ dotnet#method('get_StylisticSet20(', ')', 'bool'),
  \ dotnet#method('set_StylisticSet20(', 'bool value)', 'void'),
  \ dotnet#method('get_Fraction(', ')', 'FontFraction'),
  \ dotnet#method('set_Fraction(', 'FontFraction value)', 'void'),
  \ dotnet#method('get_SlashedZero(', ')', 'bool'),
  \ dotnet#method('set_SlashedZero(', 'bool value)', 'void'),
  \ dotnet#method('get_MathematicalGreek(', ')', 'bool'),
  \ dotnet#method('set_MathematicalGreek(', 'bool value)', 'void'),
  \ dotnet#method('get_EastAsianExpertForms(', ')', 'bool'),
  \ dotnet#method('set_EastAsianExpertForms(', 'bool value)', 'void'),
  \ dotnet#method('get_Variants(', ')', 'FontVariants'),
  \ dotnet#method('set_Variants(', 'FontVariants value)', 'void'),
  \ dotnet#method('get_Capitals(', ')', 'FontCapitals'),
  \ dotnet#method('set_Capitals(', 'FontCapitals value)', 'void'),
  \ dotnet#method('get_NumeralStyle(', ')', 'FontNumeralStyle'),
  \ dotnet#method('set_NumeralStyle(', 'FontNumeralStyle value)', 'void'),
  \ dotnet#method('get_NumeralAlignment(', ')', 'FontNumeralAlignment'),
  \ dotnet#method('set_NumeralAlignment(', 'FontNumeralAlignment value)', 'void'),
  \ dotnet#method('get_EastAsianWidths(', ')', 'FontEastAsianWidths'),
  \ dotnet#method('set_EastAsianWidths(', 'FontEastAsianWidths value)', 'void'),
  \ dotnet#method('get_EastAsianLanguage(', ')', 'FontEastAsianLanguage'),
  \ dotnet#method('set_EastAsianLanguage(', 'FontEastAsianLanguage value)', 'void'),
  \ dotnet#method('get_StandardSwashes(', ')', 'int32'),
  \ dotnet#method('set_StandardSwashes(', 'int32 value)', 'void'),
  \ dotnet#method('get_ContextualSwashes(', ')', 'int32'),
  \ dotnet#method('set_ContextualSwashes(', 'int32 value)', 'void'),
  \ dotnet#method('get_StylisticAlternates(', ')', 'int32'),
  \ dotnet#method('set_StylisticAlternates(', 'int32 value)', 'void'),
  \ dotnet#method('SetStandardLigatures(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStandardLigatures(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetContextualLigatures(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetContextualLigatures(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetDiscretionaryLigatures(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetDiscretionaryLigatures(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetHistoricalLigatures(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetHistoricalLigatures(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetAnnotationAlternates(', 'class DependencyObject element, int32 value)', 'static void'),
  \ dotnet#method('GetAnnotationAlternates(', 'class DependencyObject element)', 'static int32'),
  \ dotnet#method('SetContextualAlternates(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetContextualAlternates(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetHistoricalForms(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetHistoricalForms(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetKerning(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetKerning(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetCapitalSpacing(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetCapitalSpacing(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetCaseSensitiveForms(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetCaseSensitiveForms(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet1(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet1(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet2(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet2(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet3(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet3(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet4(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet4(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet5(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet5(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet6(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet6(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet7(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet7(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet8(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet8(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet9(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet9(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet10(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet10(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet11(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet11(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet12(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet12(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet13(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet13(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet14(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet14(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet15(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet15(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet16(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet16(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet17(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet17(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet18(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet18(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet19(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet19(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetStylisticSet20(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetStylisticSet20(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetFraction(', 'class DependencyObject element, FontFraction value)', 'static void'),
  \ dotnet#method('GetFraction(', 'class DependencyObject element)', 'static FontFraction'),
  \ dotnet#method('SetSlashedZero(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetSlashedZero(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetMathematicalGreek(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetMathematicalGreek(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetEastAsianExpertForms(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetEastAsianExpertForms(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetVariants(', 'class DependencyObject element, FontVariants value)', 'static void'),
  \ dotnet#method('GetVariants(', 'class DependencyObject element)', 'static FontVariants'),
  \ dotnet#method('SetCapitals(', 'class DependencyObject element, FontCapitals value)', 'static void'),
  \ dotnet#method('GetCapitals(', 'class DependencyObject element)', 'static FontCapitals'),
  \ dotnet#method('SetNumeralStyle(', 'class DependencyObject element, FontNumeralStyle value)', 'static void'),
  \ dotnet#method('GetNumeralStyle(', 'class DependencyObject element)', 'static FontNumeralStyle'),
  \ dotnet#method('SetNumeralAlignment(', 'class DependencyObject element, FontNumeralAlignment value)', 'static void'),
  \ dotnet#method('GetNumeralAlignment(', 'class DependencyObject element)', 'static FontNumeralAlignment'),
  \ dotnet#method('SetEastAsianWidths(', 'class DependencyObject element, FontEastAsianWidths value)', 'static void'),
  \ dotnet#method('GetEastAsianWidths(', 'class DependencyObject element)', 'static FontEastAsianWidths'),
  \ dotnet#method('SetEastAsianLanguage(', 'class DependencyObject element, FontEastAsianLanguage value)', 'static void'),
  \ dotnet#method('GetEastAsianLanguage(', 'class DependencyObject element)', 'static FontEastAsianLanguage'),
  \ dotnet#method('SetStandardSwashes(', 'class DependencyObject element, int32 value)', 'static void'),
  \ dotnet#method('GetStandardSwashes(', 'class DependencyObject element)', 'static int32'),
  \ dotnet#method('SetContextualSwashes(', 'class DependencyObject element, int32 value)', 'static void'),
  \ dotnet#method('GetContextualSwashes(', 'class DependencyObject element)', 'static int32'),
  \ dotnet#method('SetStylisticAlternates(', 'class DependencyObject element, int32 value)', 'static void'),
  \ dotnet#method('GetStylisticAlternates(', 'class DependencyObject element)', 'static int32'),
  \ dotnet#method('Typography(', ')', 'static void .'),
  \ dotnet#prop('StandardLigatures', 'bool'),
  \ dotnet#prop('ContextualLigatures', 'bool'),
  \ dotnet#prop('DiscretionaryLigatures', 'bool'),
  \ dotnet#prop('HistoricalLigatures', 'bool'),
  \ dotnet#prop('AnnotationAlternates', 'int32'),
  \ dotnet#prop('ContextualAlternates', 'bool'),
  \ dotnet#prop('HistoricalForms', 'bool'),
  \ dotnet#prop('Kerning', 'bool'),
  \ dotnet#prop('CapitalSpacing', 'bool'),
  \ dotnet#prop('CaseSensitiveForms', 'bool'),
  \ dotnet#prop('StylisticSet1', 'bool'),
  \ dotnet#prop('StylisticSet2', 'bool'),
  \ dotnet#prop('StylisticSet3', 'bool'),
  \ dotnet#prop('StylisticSet4', 'bool'),
  \ dotnet#prop('StylisticSet5', 'bool'),
  \ dotnet#prop('StylisticSet6', 'bool'),
  \ dotnet#prop('StylisticSet7', 'bool'),
  \ dotnet#prop('StylisticSet8', 'bool'),
  \ dotnet#prop('StylisticSet9', 'bool'),
  \ dotnet#prop('StylisticSet10', 'bool'),
  \ dotnet#prop('StylisticSet11', 'bool'),
  \ dotnet#prop('StylisticSet12', 'bool'),
  \ dotnet#prop('StylisticSet13', 'bool'),
  \ dotnet#prop('StylisticSet14', 'bool'),
  \ dotnet#prop('StylisticSet15', 'bool'),
  \ dotnet#prop('StylisticSet16', 'bool'),
  \ dotnet#prop('StylisticSet17', 'bool'),
  \ dotnet#prop('StylisticSet18', 'bool'),
  \ dotnet#prop('StylisticSet19', 'bool'),
  \ dotnet#prop('StylisticSet20', 'bool'),
  \ dotnet#prop('Fraction', 'FontFraction'),
  \ dotnet#prop('SlashedZero', 'bool'),
  \ dotnet#prop('MathematicalGreek', 'bool'),
  \ dotnet#prop('EastAsianExpertForms', 'bool'),
  \ dotnet#prop('Variants', 'FontVariants'),
  \ dotnet#prop('Capitals', 'FontCapitals'),
  \ dotnet#prop('NumeralStyle', 'FontNumeralStyle'),
  \ dotnet#prop('NumeralAlignment', 'FontNumeralAlignment'),
  \ dotnet#prop('EastAsianWidths', 'FontEastAsianWidths'),
  \ dotnet#prop('EastAsianLanguage', 'FontEastAsianLanguage'),
  \ dotnet#prop('StandardSwashes', 'int32'),
  \ dotnet#prop('ContextualSwashes', 'int32'),
  \ dotnet#prop('StylisticAlternates', 'int32'),
  \ ])

call dotnet#class('Underline', 'Span', [ 
  \ dotnet#method('Underline(', ')', 'void'),
  \ dotnet#method('Underline(', 'class Inline childInline)', 'void'),
  \ dotnet#method('Underline(', 'class Inline childInline, TextPointer insertionPosition)', 'void'),
  \ dotnet#method('Underline(', 'class TextPointer start, TextPointer end)', 'void'),
  \ dotnet#method('Underline(', ')', 'static void .'),
  \ ])

call dotnet#class('ZoomPercentageConverter', 'Object', [ 
  \ dotnet#method('ZoomPercentageConverter(', ')', 'void'),
  \ dotnet#method('Convert(', 'object value, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('ConvertBack(', 'object value, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ ])

call dotnet#class('TableCellCollection', 'Object', [ 
  \ dotnet#method('TableCellCollection(', 'class TableRow owner)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class TableCell[] array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('Add(', 'class TableCell item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class TableCell item)', 'bool'),
  \ dotnet#method('IndexOf(', 'class TableCell item)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, TableCell item)', 'void'),
  \ dotnet#method('Remove(', 'class TableCell item)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('TrimToSize(', ')', 'void'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Clear(', ')', 'void '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, TableCell value)', 'void'),
  \ dotnet#method('InternalAdd(', 'class TableCell item)', 'void'),
  \ dotnet#method('InternalRemove(', 'class TableCell item)', 'void'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Item(int32)', 'TableCell'),
  \ ])

call dotnet#class('TableColumnCollection', 'Object', [ 
  \ dotnet#method('TableColumnCollection(', 'class Table owner)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class TableColumn[] array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('Add(', 'class TableColumn item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class TableColumn item)', 'bool'),
  \ dotnet#method('IndexOf(', 'class TableColumn item)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, TableColumn item)', 'void'),
  \ dotnet#method('Remove(', 'class TableColumn item)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('TrimToSize(', ')', 'void'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Clear(', ')', 'void '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, TableColumn value)', 'void'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Item(int32)', 'TableColumn'),
  \ ])

call dotnet#class('TableRowCollection', 'Object', [ 
  \ dotnet#method('TableRowCollection(', 'class TableRowGroup owner)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class TableRow[] array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('Add(', 'class TableRow item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class TableRow item)', 'bool'),
  \ dotnet#method('IndexOf(', 'class TableRow item)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, TableRow item)', 'void'),
  \ dotnet#method('Remove(', 'class TableRow item)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('TrimToSize(', ')', 'void'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Clear(', ')', 'void '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, TableRow value)', 'void'),
  \ dotnet#method('InternalAdd(', 'class TableRow item)', 'void'),
  \ dotnet#method('InternalRemove(', 'class TableRow item)', 'void'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Item(int32)', 'TableRow'),
  \ ])

call dotnet#class('TableRowGroupCollection', 'Object', [ 
  \ dotnet#method('TableRowGroupCollection(', 'class Table owner)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class TableRowGroup[] array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('Add(', 'class TableRowGroup item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class TableRowGroup item)', 'bool'),
  \ dotnet#method('IndexOf(', 'class TableRowGroup item)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, TableRowGroup item)', 'void'),
  \ dotnet#method('Remove(', 'class TableRowGroup item)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('TrimToSize(', ')', 'void'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Clear(', ')', 'void '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, TableRowGroup value)', 'void'),
  \ dotnet#method('InternalAdd(', 'class TableRowGroup item)', 'void'),
  \ dotnet#method('InternalRemove(', 'class TableRowGroup item)', 'void'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Item(int32)', 'TableRowGroup'),
  \ ])

