call dotnet#namespace('System.IO.IsolatedStorage')

call dotnet#class('IsolatedStorage', 'MarshalByRefObject', [ 
  \ dotnet#method('IsRoaming(', 'IsolatedStorageScope scope)', 'static bool'),
  \ dotnet#method('IsRoaming(', ')', 'bool'),
  \ dotnet#method('IsDomain(', 'IsolatedStorageScope scope)', 'static bool'),
  \ dotnet#method('IsDomain(', ')', 'bool'),
  \ dotnet#method('IsMachine(', 'IsolatedStorageScope scope)', 'static bool'),
  \ dotnet#method('IsAssembly(', ')', 'bool'),
  \ dotnet#method('IsApp(', 'IsolatedStorageScope scope)', 'static bool'),
  \ dotnet#method('IsApp(', ')', 'bool'),
  \ dotnet#method('GetHash(', 'class Stream s)', 'static string'),
  \ dotnet#method('get_SeparatorExternal(', ')', 'char'),
  \ dotnet#method('get_SeparatorInternal(', ')', 'char'),
  \ dotnet#method('get_MaximumSize(', ')', 'uint64'),
  \ dotnet#method('get_CurrentSize(', ')', 'uint64'),
  \ dotnet#method('get_UsedSize(', ')', 'int64'),
  \ dotnet#method('get_Quota(', ')', 'int64'),
  \ dotnet#method('set_Quota(', 'int64 value)', 'strict void'),
  \ dotnet#method('get_AvailableFreeSpace(', ')', 'int64'),
  \ dotnet#method('get_DomainIdentity(', ')', 'object'),
  \ dotnet#method('get_ApplicationIdentity(', ')', 'object'),
  \ dotnet#method('get_AssemblyIdentity(', ')', 'object'),
  \ dotnet#method('IncreaseQuotaTo(', 'int64 newQuotaSize)', 'bool'),
  \ dotnet#method('GetIdentityStream(', 'IsolatedStorageScope scope)', 'MemoryStream'),
  \ dotnet#method('get_Scope(', ')', 'IsolatedStorageScope'),
  \ dotnet#method('get_DomainName(', ')', 'string'),
  \ dotnet#method('get_AssemName(', ')', 'string'),
  \ dotnet#method('get_AppName(', ')', 'string'),
  \ dotnet#method('InitStore(', 'IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType)', 'void'),
  \ dotnet#method('InitStore(', 'IsolatedStorageScope scope, Type appEvidenceType)', 'void'),
  \ dotnet#method('InitStore(', 'IsolatedStorageScope scope, object domain, object assem, object app)', 'void'),
  \ dotnet#method('InitStore(', 'IsolatedStorageScope scope, Evidence domainEv, Type domainEvidenceType, Evidence assemEv, Type assemEvidenceType, Evidence appEv, Type appEvidenceType)', 'void'),
  \ dotnet#method('InitStore(', 'IsolatedStorageScope scope, Stream domain, Stream assem, Stream app, string domainName, string assemName, string appName)', 'bool'),
  \ dotnet#method('VerifyScope(', 'IsolatedStorageScope scope)', 'static void'),
  \ dotnet#method('SetQuota(', 'class PermissionSet psAllowed, PermissionSet psDenied)', 'strict void'),
  \ dotnet#method('Remove(', ')', 'abstract void'),
  \ dotnet#method('GetPermission(', 'class PermissionSet ps)', 'abstract'),
  \ dotnet#method('GetCaller(', ')', 'static RuntimeAssembly'),
  \ dotnet#method('IsolatedStorage(', ')', 'void'),
  \ dotnet#prop('SeparatorExternal', 'char'),
  \ dotnet#prop('SeparatorInternal', 'char'),
  \ dotnet#prop('MaximumSize', 'uint64'),
  \ dotnet#prop('CurrentSize', 'uint64'),
  \ dotnet#prop('UsedSize', 'int64'),
  \ dotnet#prop('Quota', 'int64'),
  \ dotnet#prop('AvailableFreeSpace', 'int64'),
  \ dotnet#prop('DomainIdentity', 'object'),
  \ dotnet#prop('ApplicationIdentity', 'object'),
  \ dotnet#prop('AssemblyIdentity', 'object'),
  \ dotnet#prop('Scope', 'IsolatedStorageScope'),
  \ dotnet#prop('DomainName', 'string'),
  \ dotnet#prop('AssemName', 'string'),
  \ dotnet#prop('AppName', 'string'),
  \ ])

call dotnet#class('IsolatedStorageFileStream', 'FileStream', [ 
  \ dotnet#method('IsolatedStorageFileStream(', ')', 'void'),
  \ dotnet#method('IsolatedStorageFileStream(', 'string path, FileMode mode)', 'void'),
  \ dotnet#method('IsolatedStorageFileStream(', 'string path, FileMode mode, IsolatedStorageFile isf)', 'void'),
  \ dotnet#method('IsolatedStorageFileStream(', 'string path, FileMode mode, FileAccess access)', 'void'),
  \ dotnet#method('IsolatedStorageFileStream(', 'string path, FileMode mode, FileAccess access, IsolatedStorageFile isf)', 'void'),
  \ dotnet#method('IsolatedStorageFileStream(', 'string path, FileMode mode, FileAccess access, FileShare share)', 'void'),
  \ dotnet#method('IsolatedStorageFileStream(', 'string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf)', 'void'),
  \ dotnet#method('IsolatedStorageFileStream(', 'string path, FileMode mode, FileAccess access, FileShare share, int32 bufferSize)', 'void'),
  \ dotnet#method('IsolatedStorageFileStream(', 'string path, FileMode mode, FileAccess access, FileShare share, int32 bufferSize, IsolatedStorageFile isf)', 'void'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_IsAsync(', ')', 'bool'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Flush(', 'bool flushToDisk)', 'void'),
  \ dotnet#method('get_Handle(', ')', 'int'),
  \ dotnet#method('get_SafeFileHandle(', ')', ''),
  \ dotnet#method('SetLength(', 'int64 value)', 'void'),
  \ dotnet#method('Read(', 'uint8[] buffer, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('ReadByte(', ')', 'int32'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin origin)', 'int64'),
  \ dotnet#method('Write(', 'uint8[] buffer, int32 offset, int32 count)', 'void'),
  \ dotnet#method('WriteByte(', 'uint8 value)', 'void'),
  \ dotnet#method('BeginRead(', 'uint8[] buffer, int32 offset, int32 numBytes, AsyncCallback userCallback, object stateObject)', 'IAsyncResult'),
  \ dotnet#method('EndRead(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('BeginWrite(', 'uint8[] buffer, int32 offset, int32 numBytes, AsyncCallback userCallback, object stateObject)', 'IAsyncResult'),
  \ dotnet#method('EndWrite(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('NotPermittedError(', 'string str)', 'void'),
  \ dotnet#method('NotPermittedError(', ')', 'void'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('IsAsync', 'bool'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ dotnet#prop('Handle', 'int'),
  \ dotnet#prop('SafeFileHandle', 'SafeFileHandle'),
  \ ])

call dotnet#class('IsolatedStorageException', 'Exception', [ 
  \ dotnet#method('IsolatedStorageException(', ')', 'void'),
  \ dotnet#method('IsolatedStorageException(', 'string message)', 'void'),
  \ dotnet#method('IsolatedStorageException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('IsolatedStorageException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('IsolatedStorageSecurityState', 'SecurityState', [ 
  \ dotnet#method('CreateStateToIncreaseQuotaForApplication(', 'int64 newQuota, int64 usedSize)', 'static IsolatedStorageSecurityState'),
  \ dotnet#method('IsolatedStorageSecurityState(', ')', 'void'),
  \ dotnet#method('get_Options(', ')', 'IsolatedStorageSecurityOptions'),
  \ dotnet#method('get_UsedSize(', ')', 'int64'),
  \ dotnet#method('get_Quota(', ')', 'int64'),
  \ dotnet#method('set_Quota(', 'int64 value)', 'void'),
  \ dotnet#method('EnsureState(', ')', 'void'),
  \ dotnet#prop('Options', 'IsolatedStorageSecurityOptions'),
  \ dotnet#prop('UsedSize', 'int64'),
  \ dotnet#prop('Quota', 'int64'),
  \ ])

call dotnet#class('IsolatedStorageFile', 'IsolatedStorage', [ 
  \ dotnet#method('IsolatedStorageFile(', ')', 'void'),
  \ dotnet#method('GetUserStoreForDomain(', ')', 'static IsolatedStorageFile'),
  \ dotnet#method('GetUserStoreForAssembly(', ')', 'static IsolatedStorageFile'),
  \ dotnet#method('GetUserStoreForApplication(', ')', 'static IsolatedStorageFile'),
  \ dotnet#method('GetUserStoreForSite(', ')', 'static IsolatedStorageFile'),
  \ dotnet#method('GetMachineStoreForDomain(', ')', 'static IsolatedStorageFile'),
  \ dotnet#method('GetMachineStoreForAssembly(', ')', 'static IsolatedStorageFile'),
  \ dotnet#method('GetMachineStoreForApplication(', ')', 'static IsolatedStorageFile'),
  \ dotnet#method('GetStore(', 'IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType)', 'static IsolatedStorageFile'),
  \ dotnet#method('EnsureStoreIsValid(', ')', 'void'),
  \ dotnet#method('GetStore(', 'IsolatedStorageScope scope, object domainIdentity, object assemblyIdentity)', 'static IsolatedStorageFile'),
  \ dotnet#method('GetStore(', 'IsolatedStorageScope scope, Evidence domainEvidence, Type domainEvidenceType, Evidence assemblyEvidence, Type assemblyEvidenceType)', 'static IsolatedStorageFile'),
  \ dotnet#method('GetStore(', 'IsolatedStorageScope scope, Type applicationEvidenceType)', 'static IsolatedStorageFile'),
  \ dotnet#method('GetStore(', 'IsolatedStorageScope scope, object applicationIdentity)', 'static IsolatedStorageFile'),
  \ dotnet#method('get_UsedSize(', ')', 'int64'),
  \ dotnet#method('get_CurrentSize(', ')', 'uint64'),
  \ dotnet#method('get_AvailableFreeSpace(', ')', 'int64'),
  \ dotnet#method('get_Quota(', ')', 'int64'),
  \ dotnet#method('set_Quota(', 'int64 value)', 'strict void'),
  \ dotnet#method('get_IsEnabled(', ')', 'static bool'),
  \ dotnet#method('get_MaximumSize(', ')', 'uint64'),
  \ dotnet#method('IncreaseQuotaTo(', 'int64 newQuotaSize)', 'bool'),
  \ dotnet#method('Reserve(', 'uint64 lReserve)', 'void'),
  \ dotnet#method('Unreserve(', 'uint64 lFree)', 'void'),
  \ dotnet#method('Unreserve(', 'uint64 lFree, uint64 quota)', 'void'),
  \ dotnet#method('DeleteFile(', 'string)', 'void'),
  \ dotnet#method('FileExists(', 'string path)', 'bool'),
  \ dotnet#method('DirIsolatedStorageFileyExists(', 'string path)', 'bool'),
  \ dotnet#method('CreateDirIsolatedStorageFiley(', 'string dir)', 'void'),
  \ dotnet#method('GetCreationTime(', 'string path)', 'DateTimeOffset'),
  \ dotnet#method('GetLastAccessTime(', 'string path)', 'DateTimeOffset'),
  \ dotnet#method('GetLastWriteTime(', 'string path)', 'DateTimeOffset'),
  \ dotnet#method('CopyFile(', 'string sourceFileName, string destinationFileName)', 'void'),
  \ dotnet#method('CopyFile(', 'string sourceFileName, string destinationFileName, bool overwrite)', 'void'),
  \ dotnet#method('MoveFile(', 'string sourceFileName, string destinationFileName)', 'void'),
  \ dotnet#method('MoveDirIsolatedStorageFiley(', 'string sourceDirIsolatedStorageFileyName, string destinationDirIsolatedStorageFileyName)', 'void'),
  \ dotnet#method('DeleteDirIsolatedStorageFiley(', 'string dir)', 'void'),
  \ dotnet#method('GetFileNames(', ')', 'string[]'),
  \ dotnet#method('GetFileNames(', 'string searchPattern)', 'string[]'),
  \ dotnet#method('GetDirIsolatedStorageFileyNames(', ')', 'string[]'),
  \ dotnet#method('GetDirIsolatedStorageFileyNames(', 'string searchPattern)', 'string[]'),
  \ dotnet#method('OpenFile(', 'string path, FileMode mode)', 'IsolatedStorageFileStream'),
  \ dotnet#method('OpenFile(', 'string path, FileMode mode, FileAccess access)', 'IsolatedStorageFileStream'),
  \ dotnet#method('OpenFile(', 'string path, FileMode mode, FileAccess access, FileShare share)', 'IsolatedStorageFileStream'),
  \ dotnet#method('CreateFile(', 'string path)', 'IsolatedStorageFileStream'),
  \ dotnet#method('Remove(', ')', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('NotAssemFilesDir(', 'string dir)', 'static bool'),
  \ dotnet#method('NotAppFilesDir(', 'string dir)', 'static bool'),
  \ dotnet#method('Remove(', 'IsolatedStorageScope scope)', 'static void'),
  \ dotnet#method('GetEnumerator(', 'IsolatedStorageScope scope)', 'static IEnumerator'),
  \ dotnet#method('get_RootDirIsolatedStorageFiley(', ')', 'string'),
  \ dotnet#method('GetFullPath(', 'string path)', 'string'),
  \ dotnet#method('Init(', 'IsolatedStorageScope scope)', 'void'),
  \ dotnet#method('InitExistingStore(', 'IsolatedStorageScope scope)', 'bool'),
  \ dotnet#method('GetPermission(', 'class PermissionSet ps)', 'IsolatedStoragePermission'),
  \ dotnet#method('UndoReserveOperation(', 'uint64 oldLen, uint64 newLen)', 'void'),
  \ dotnet#method('Reserve(', 'uint64 oldLen, uint64 newLen)', 'void'),
  \ dotnet#method('ReserveOneBlock(', ')', 'void'),
  \ dotnet#method('UnreserveOneBlock(', ')', 'void'),
  \ dotnet#method('RoundToBlockSize(', 'uint64 num)', 'static uint64'),
  \ dotnet#method('RoundToBlockSizeFloor(', 'uint64 num)', 'static uint64'),
  \ dotnet#method('GetRootDir(', 'IsolatedStorageScope scope)', 'static string'),
  \ dotnet#method('get_Disposed(', ')', 'bool'),
  \ dotnet#method('MigrateOldIsoStoreDirIsolatedStorageFiley(', 'string rootDir, string oldRandomDirIsolatedStorageFiley)', 'static string'),
  \ dotnet#method('CreateRandomDirIsolatedStorageFiley(', 'string rootDir)', 'static string'),
  \ dotnet#method('GetRandomDirIsolatedStorageFiley(', 'string rootDir, [out] bool& bMigrateNeeded, [out] string& sOldStoreLocation)', 'static string'),
  \ dotnet#method('GetMachineRandomDirIsolatedStorageFiley(', 'string rootDir)', 'static string'),
  \ dotnet#method('CreateMutexNotOwned(', 'string pathName)', 'static Mutex'),
  \ dotnet#method('GetStrongHashSuitableForObjectName(', 'string name)', 'static string'),
  \ dotnet#method('Lock(', 'bool& locked)', 'void'),
  \ dotnet#method('Unlock(', ')', 'void'),
  \ dotnet#method('GetGlobalFileIOPerm(', 'IsolatedStorageScope scope)', 'static FileIOPermission'),
  \ dotnet#method('VerifyGlobalScope(', 'IsolatedStorageScope scope)', 'static void'),
  \ dotnet#method('CreateIDFile(', 'string path, IsolatedStorageScope scope)', 'void'),
  \ dotnet#method('GetFileDirIsolatedStorageFileyNames(', 'string path, string userSearchPattern, bool)', 'static string[]'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) uint64 GetUsage(class SafeIsolatedStorageFileHandle handle) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) SafeIsolatedStorageFileHandle Open(string infoFile, string syncName) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void Reserve(class SafeIsolatedStorageFileHandle handle, uint64 plQuota, uint64 plReserve, bool marshal( bool) fFree) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void GetRootDir(IsolatedStorageScope scope, StringHandleOnStack retRootDir) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) bool marshal( bool) Lock(class SafeIsolatedStorageFileHandle handle,', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void CreateDirIsolatedStorageFileyWithDacl(string path) preservesig', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) bool marshal( bool) GetQuota(class SafeIsolatedStorageFileHandle scope,', 'static'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void marshal( bool) SetQuota(class SafeIsolatedStorageFileHandle scope,', 'static'),
  \ dotnet#prop('UsedSize', 'int64'),
  \ dotnet#prop('CurrentSize', 'uint64'),
  \ dotnet#prop('AvailableFreeSpace', 'int64'),
  \ dotnet#prop('Quota', 'int64'),
  \ dotnet#prop('IsEnabled', 'bool'),
  \ dotnet#prop('MaximumSize', 'uint64'),
  \ dotnet#prop('RootDirIsolatedStorageFiley', 'string'),
  \ dotnet#prop('Disposed', 'bool'),
  \ ])

