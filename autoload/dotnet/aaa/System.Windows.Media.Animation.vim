call dotnet#namespace('System.Windows.Media.Animation')

call dotnet#class('Animatable', 'Freezable', [ 
  \ dotnet#method('Animatable(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Animatable'),
  \ dotnet#method('PropertyChanged(', 'class DependencyProperty dp)', 'void'),
  \ dotnet#method('AddRefOnChannelAnimations(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('ReleaseOnChannelAnimations(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('RegisterProperty(', 'string name, Type propertyType, Type ownerType, object defaultValue, PropertyChangedCallback changed, ValidateValueCallback validate, bool isIndependentlyAnimated, CoerceValueCallback coerced)', 'static DependencyProperty'),
  \ dotnet#method('AddRefResource(', 'class DUCE/IResource resource, DUCE/Channel channel)', 'void'),
  \ dotnet#method('ReleaseResource(', 'class DUCE/IResource resource, DUCE/Channel channel)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('Get3DHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('RemoveChildFromParent(', 'class DUCE/IResource parent, DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetAnimationResourceHandle(', 'class DependencyProperty dp, DUCE/Channel channel)', 'DUCE/ResourceHandle'),
  \ dotnet#method('GetWeakReference(', ')', 'WeakReference'),
  \ dotnet#method('IsBaseValueDefault(', 'class DependencyProperty dp)', 'bool'),
  \ dotnet#method('RegisterForAsyncUpdateResource(', ')', 'void'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('InternalWritePreamble(', ')', 'void'),
  \ dotnet#method('ShouldSerializeStoredWeakReference(', 'class DependencyObject target)', 'static bool'),
  \ dotnet#method('ApplyAnimationClock(', 'class DependencyProperty dp, AnimationClock clock)', 'void'),
  \ dotnet#method('ApplyAnimationClock(', 'class DependencyProperty dp, AnimationClock clock, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('BeginAnimation(', 'class DependencyProperty dp, AnimationTimeline animation)', 'void'),
  \ dotnet#method('BeginAnimation(', 'class DependencyProperty dp, AnimationTimeline animation, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('get_HasAnimatedProperties(', ')', 'bool'),
  \ dotnet#method('GetAnimationBaseValue(', 'class DependencyProperty dp)', 'object'),
  \ dotnet#method('EvaluateAnimatedValueCore(', 'class DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry& entry)', 'void'),
  \ dotnet#method('Animatable(', ')', 'static void .'),
  \ dotnet#prop('HasAnimatedProperties', 'bool'),
  \ ])

call dotnet#class('Clock', 'DispatcherObject', [ 
  \ dotnet#method('Clock(', 'class Clock syncClock)', 'void'),
  \ dotnet#method('UpdateClockBeginTime(', ')', 'void'),
  \ dotnet#method('get_SyncClock(', ')', '.method'),
  \ dotnet#method('get_SyncClockResolvedDuration(', ')', '.method'),
  \ dotnet#method('get_SyncClockHasReachedEffectiveDuration(', ')', 'bool'),
  \ dotnet#method('get_SyncClockEffectiveDuration(', ')', '.method'),
  \ dotnet#method('get_SyncClockSpeedRatio(', ')', 'float64'),
  \ dotnet#method('get_IsInSyncPeriod(', ')', 'bool'),
  \ dotnet#method('set_IsInSyncPeriod(', 'bool value)', 'void'),
  \ dotnet#method('get_SyncClockDiscontinuousEvent(', ')', 'bool'),
  \ dotnet#method('set_SyncClockDiscontinuousEvent(', 'bool value)', 'void'),
  \ dotnet#method('get_PreviousSyncClockTime(', ')', '.method'),
  \ dotnet#method('set_PreviousSyncClockTime(', 'TimeSpan value)', 'void'),
  \ dotnet#method('get_PreviousRepeatTime(', ')', '.method'),
  \ dotnet#method('set_PreviousRepeatTime(', 'TimeSpan value)', 'void'),
  \ dotnet#method('get_SyncClockBeginTime(', ')', '.method'),
  \ dotnet#prop('SyncClock', 'Clock'),
  \ dotnet#prop('SyncClockResolvedDuration', 'Duration'),
  \ dotnet#prop('SyncClockHasReachedEffectiveDuration', 'bool'),
  \ dotnet#prop('SyncClockEffectiveDuration', 'Nullable'),
  \ dotnet#prop('SyncClockSpeedRatio', 'float64'),
  \ dotnet#prop('IsInSyncPeriod', 'bool'),
  \ dotnet#prop('SyncClockDiscontinuousEvent', 'bool'),
  \ dotnet#prop('PreviousSyncClockTime', 'TimeSpan'),
  \ dotnet#prop('PreviousRepeatTime', 'TimeSpan'),
  \ dotnet#prop('SyncClockBeginTime', 'TimeSpan'),
  \ dotnet#method('Clock(', ')', 'void'),
  \ dotnet#method('get_CurrentAdjustedGlobalTime(', ')', '.method'),
  \ dotnet#method('set_CurrentAdjustedGlobalTime(', 'TimeSpan value)', 'void'),
  \ dotnet#method('get_DesiredFrameRate(', ')', 'int32'),
  \ dotnet#method('set_DesiredFrameRate(', 'int32 value)', 'void'),
  \ dotnet#method('get_InteractiveSpeedRatio(', ')', 'float64'),
  \ dotnet#method('set_InteractiveSpeedRatio(', 'float64 value)', 'void'),
  \ dotnet#method('get_LastAdjustedGlobalTime(', ')', '.method'),
  \ dotnet#method('set_LastAdjustedGlobalTime(', 'TimeSpan value)', 'void'),
  \ dotnet#method('get_PendingSeekDestination(', ')', '.method'),
  \ dotnet#method('set_PendingSeekDestination(', 'Nullable value)', 'void'),
  \ dotnet#method('get_PendingSpeedRatio(', ')', '.method'),
  \ dotnet#method('set_PendingSpeedRatio(', 'Nullable value)', 'void'),
  \ dotnet#prop('CurrentAdjustedGlobalTime', 'TimeSpan'),
  \ dotnet#prop('DesiredFrameRate', 'int32'),
  \ dotnet#prop('InteractiveSpeedRatio', 'float64'),
  \ dotnet#prop('LastAdjustedGlobalTime', 'TimeSpan'),
  \ dotnet#prop('PendingSeekDestination', 'Nullable'),
  \ dotnet#prop('PendingSpeedRatio', 'Nullable'),
  \ dotnet#field('_syncData', 'Clock/SyncData'),
  \ dotnet#field('_beginTime', 'Nullable'),
  \ dotnet#field('_nextTickNeededTime', 'Nullable'),
  \ dotnet#field('_resolvedDuration', 'Duration'),
  \ dotnet#field('_currentDuration', 'Duration'),
  \ dotnet#field('_timeline', 'Timeline'),
  \ dotnet#field('_timeManager', 'TimeManager'),
  \ dotnet#field('_parent', 'ClockGroup'),
  \ dotnet#field('_childIndex', 'int32'),
  \ dotnet#field('_depth', 'int32'),
  \ dotnet#method('Clock(', 'class Timeline timeline)', 'famorassem void'),
  \ dotnet#method('get_CanGrow(', ')', 'bool'),
  \ dotnet#method('get_CanSlip(', ')', 'bool'),
  \ dotnet#method('get_Controller(', ')', 'ClockController'),
  \ dotnet#method('get_CurrentIteration(', ')', 'Nullable'),
  \ dotnet#method('get_CurrentGlobalSpeed(', ')', 'Nullable'),
  \ dotnet#method('get_CurrentProgress(', ')', 'Nullable'),
  \ dotnet#method('get_CurrentState(', ')', 'ClockState'),
  \ dotnet#method('get_CurrentTime(', ')', 'Nullable'),
  \ dotnet#method('get_HasControllableRoot(', ')', 'bool'),
  \ dotnet#method('get_IsPaused(', ')', 'bool'),
  \ dotnet#method('get_NaturalDuration(', ')', 'Duration'),
  \ dotnet#method('get_Parent(', ')', 'Clock'),
  \ dotnet#method('get_Timeline(', ')', 'Timeline'),
  \ dotnet#method('add_Completed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Completed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_CurrentGlobalSpeedInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentGlobalSpeedInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_CurrentStateInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentStateInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_CurrentTimeInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentTimeInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_RemoveRequested(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_RemoveRequested(', 'class EventHandler value)', 'void'),
  \ dotnet#method('DiscontinuousTimeMovement(', ')', 'void'),
  \ dotnet#method('GetCanSlip(', ')', 'bool'),
  \ dotnet#method('GetCurrentTimeCore(', ')', 'family'),
  \ dotnet#method('SpeedChanged(', ')', 'void'),
  \ dotnet#method('Stopped(', ')', 'void'),
  \ dotnet#method('get_CurrentGlobalTime(', ')', 'TimeSpan'),
  \ dotnet#method('AddNullPointToCurrentIntervals(', ')', 'strict void'),
  \ dotnet#method('AllocateClock(', 'class Timeline timeline, bool hasControllableRoot)', 'static Clock'),
  \ dotnet#method('BuildClockSubTreeFromTimeline(', 'class Timeline timeline, bool hasControllableRoot)', 'strict void'),
  \ dotnet#method('BuildClockTreeFromTimeline(', 'class Timeline rootTimeline, bool hasControllableRoot)', 'static Clock'),
  \ dotnet#method('ClearCurrentIntervalsToNull(', ')', 'strict void'),
  \ dotnet#method('ClipNextTickByParent(', ')', 'void'),
  \ dotnet#method('ComputeCurrentIntervals(', 'TimeIntervalCollection parentIntervalCollection, TimeSpan beginTime, Nullable endTime, Duration fillDuration, Duration period, float64 appliedSpeedRatio, float64 accelRatio, float64 decelRatio, bool isAutoReversed)', 'strict void'),
  \ dotnet#method('ComputeCurrentFillInterval(', 'TimeIntervalCollection parentIntervalCollection, TimeSpan beginTime, TimeSpan endTime, Duration period, float64 appliedSpeedRatio, float64 accelRatio, float64 decelRatio, bool isAutoReversed)', 'strict void'),
  \ dotnet#method('ComputeLocalState(', ')', 'void'),
  \ dotnet#method('get_CurrentDuration(', ')', 'strict'),
  \ dotnet#method('InternalBegin(', ')', 'void'),
  \ dotnet#method('InternalGetSpeedRatio(', ')', 'float64'),
  \ dotnet#method('InternalPause(', ')', 'void'),
  \ dotnet#method('InternalRemove(', ')', 'void'),
  \ dotnet#method('InternalResume(', ')', 'void'),
  \ dotnet#method('InternalSeek(', 'TimeSpan destination)', 'void'),
  \ dotnet#method('InternalSeekAlignedToLastTick(', 'TimeSpan destination)', 'void'),
  \ dotnet#method('InternalSetSpeedRatio(', 'float64 ratio)', 'void'),
  \ dotnet#method('InternalSkipToFill(', ')', 'void'),
  \ dotnet#method('InternalStop(', ')', 'void'),
  \ dotnet#method('RaiseAccumulatedEvents(', ')', 'void'),
  \ dotnet#method('RaiseCompleted(', ')', 'void'),
  \ dotnet#method('RaiseCurrentGlobalSpeedInvalidated(', ')', 'void'),
  \ dotnet#method('RaiseCurrentStateInvalidated(', ')', 'void'),
  \ dotnet#method('RaiseCurrentTimeInvalidated(', ')', 'void'),
  \ dotnet#method('RaiseRemoveRequested(', ')', 'void'),
  \ dotnet#method('ResetCachedStateToStopped(', ')', 'void'),
  \ dotnet#method('ResetNodesWithSlip(', ')', 'strict void'),
  \ dotnet#method('UpdateDescendantsWithUnresolvedDuration(', ')', 'strict void'),
  \ dotnet#method('get_Depth(', ')', 'int32'),
  \ dotnet#method('get_EndOfActivePeriod(', ')', '.method'),
  \ dotnet#method('get_FirstChild(', ')', 'strict'),
  \ dotnet#method('get_InternalCurrentClockState(', ')', '.method'),
  \ dotnet#method('set_InternalCurrentClockState(', 'ClockState value)', 'void'),
  \ dotnet#method('get_InternalCurrentGlobalSpeed(', ')', '.method'),
  \ dotnet#method('set_InternalCurrentGlobalSpeed(', 'Nullable value)', 'void'),
  \ dotnet#method('get_InternalCurrentIteration(', ')', '.method'),
  \ dotnet#method('set_InternalCurrentIteration(', 'Nullable value)', 'void'),
  \ dotnet#method('get_InternalCurrentProgress(', ')', '.method'),
  \ dotnet#method('set_InternalCurrentProgress(', 'Nullable value)', 'void'),
  \ dotnet#method('get_InternalNextTickNeededTime(', ')', '.method'),
  \ dotnet#method('set_InternalNextTickNeededTime(', 'Nullable value)', 'void'),
  \ dotnet#method('get_InternalParent(', ')', '.method'),
  \ dotnet#method('get_ResolvedDuration(', ')', '.method'),
  \ dotnet#method('get_NextSibling(', ')', '.method'),
  \ dotnet#method('get_WeakReference(', ')', '.method'),
  \ dotnet#method('get_DesiredFrameRate(', ')', '.method'),
  \ dotnet#method('get_CompletedEventRaised(', ')', 'bool'),
  \ dotnet#method('set_CompletedEventRaised(', 'bool value)', 'void'),
  \ dotnet#method('get_CurrentGlobalSpeedInvalidatedEventRaised(', ')', 'bool'),
  \ dotnet#method('set_CurrentGlobalSpeedInvalidatedEventRaised(', 'bool value)', 'void'),
  \ dotnet#method('get_CurrentStateInvalidatedEventRaised(', ')', 'bool'),
  \ dotnet#method('set_CurrentStateInvalidatedEventRaised(', 'bool value)', 'void'),
  \ dotnet#method('get_CurrentTimeInvalidatedEventRaised(', ')', 'bool'),
  \ dotnet#method('set_CurrentTimeInvalidatedEventRaised(', 'bool value)', 'void'),
  \ dotnet#method('get_HasResolvedDuration(', ')', 'bool'),
  \ dotnet#method('set_HasResolvedDuration(', 'bool value)', 'void'),
  \ dotnet#method('get_IsBackwardsProgressingGlobal(', ')', 'bool'),
  \ dotnet#method('set_IsBackwardsProgressingGlobal(', 'bool value)', 'void'),
  \ dotnet#method('get_IsInEventQueue(', ')', 'bool'),
  \ dotnet#method('set_IsInEventQueue(', 'bool value)', 'void'),
  \ dotnet#method('get_IsInteractivelyPaused(', ')', 'bool'),
  \ dotnet#method('set_IsInteractivelyPaused(', 'bool value)', 'void'),
  \ dotnet#method('get_IsInteractivelyStopped(', ')', 'bool'),
  \ dotnet#method('set_IsInteractivelyStopped(', 'bool value)', 'void'),
  \ dotnet#method('get_IsRoot(', ')', 'bool'),
  \ dotnet#method('set_IsRoot(', 'bool value)', 'void'),
  \ dotnet#method('get_IsTimeManager(', ')', 'bool'),
  \ dotnet#method('set_IsTimeManager(', 'bool value)', 'void'),
  \ dotnet#method('get_NeedsPostfixTraversal(', ')', 'bool'),
  \ dotnet#method('set_NeedsPostfixTraversal(', 'bool value)', 'void'),
  \ dotnet#method('get_NeedsTicksWhenActive(', ')', 'strict bool'),
  \ dotnet#method('set_NeedsTicksWhenActive(', 'bool value)', 'strict void'),
  \ dotnet#method('get_PauseStateChangedDuringTick(', ')', 'bool'),
  \ dotnet#method('set_PauseStateChangedDuringTick(', 'bool value)', 'void'),
  \ dotnet#method('get_PendingInteractivePause(', ')', 'bool'),
  \ dotnet#method('set_PendingInteractivePause(', 'bool value)', 'void'),
  \ dotnet#method('get_PendingInteractiveRemove(', ')', 'bool'),
  \ dotnet#method('set_PendingInteractiveRemove(', 'bool value)', 'void'),
  \ dotnet#method('get_PendingInteractiveResume(', ')', 'bool'),
  \ dotnet#method('set_PendingInteractiveResume(', 'bool value)', 'void'),
  \ dotnet#method('get_PendingInteractiveStop(', ')', 'bool'),
  \ dotnet#method('set_PendingInteractiveStop(', 'bool value)', 'void'),
  \ dotnet#method('get_RemoveRequestedEventRaised(', ')', 'bool'),
  \ dotnet#method('set_RemoveRequestedEventRaised(', 'bool value)', 'void'),
  \ dotnet#method('get_HasDescendantsWithUnresolvedDuration(', ')', 'bool'),
  \ dotnet#method('set_HasDescendantsWithUnresolvedDuration(', 'bool value)', 'void'),
  \ dotnet#method('ApplyDesiredFrameRateToGlobalTime(', ')', 'void'),
  \ dotnet#method('ApplyDesiredFrameRateToNextTick(', ')', 'void'),
  \ dotnet#method('Clock(', ')', 'static void .'),
  \ dotnet#event('Completed', 'EventHandler'),
  \ dotnet#event('CurrentGlobalSpeedInvalidated', 'EventHandler'),
  \ dotnet#event('CurrentStateInvalidated', 'EventHandler'),
  \ dotnet#event('CurrentTimeInvalidated', 'EventHandler'),
  \ dotnet#event('RemoveRequested', 'EventHandler'),
  \ dotnet#prop('CanGrow', 'bool'),
  \ dotnet#prop('CanSlip', 'bool'),
  \ dotnet#prop('Controller', 'ClockController'),
  \ dotnet#prop('CurrentIteration', 'Nullable'),
  \ dotnet#prop('CurrentGlobalSpeed', 'Nullable'),
  \ dotnet#prop('CurrentProgress', 'Nullable'),
  \ dotnet#prop('CurrentState', 'ClockState'),
  \ dotnet#prop('CurrentTime', 'Nullable'),
  \ dotnet#prop('HasControllableRoot', 'bool'),
  \ dotnet#prop('IsPaused', 'bool'),
  \ dotnet#prop('NaturalDuration', 'Duration'),
  \ dotnet#prop('Parent', 'Clock'),
  \ dotnet#prop('Timeline', 'Timeline'),
  \ dotnet#prop('CurrentGlobalTime', 'TimeSpan'),
  \ dotnet#prop('CurrentDuration', 'Duration'),
  \ dotnet#prop('Depth', 'int32'),
  \ dotnet#prop('EndOfActivePeriod', 'Duration'),
  \ dotnet#prop('FirstChild', 'Clock'),
  \ dotnet#prop('InternalCurrentClockState', 'ClockState'),
  \ dotnet#prop('InternalCurrentGlobalSpeed', 'Nullable'),
  \ dotnet#prop('InternalCurrentIteration', 'Nullable'),
  \ dotnet#prop('InternalCurrentProgress', 'Nullable'),
  \ dotnet#prop('InternalNextTickNeededTime', 'Nullable'),
  \ dotnet#prop('InternalParent', 'ClockGroup'),
  \ dotnet#prop('ResolvedDuration', 'Duration'),
  \ dotnet#prop('NextSibling', 'Clock'),
  \ dotnet#prop('WeakReference', 'WeakReference'),
  \ dotnet#prop('DesiredFrameRate', 'Nullable'),
  \ dotnet#prop('CompletedEventRaised', 'bool'),
  \ dotnet#prop('CurrentGlobalSpeedInvalidatedEventRaised', 'bool'),
  \ dotnet#prop('CurrentStateInvalidatedEventRaised', 'bool'),
  \ dotnet#prop('CurrentTimeInvalidatedEventRaised', 'bool'),
  \ dotnet#prop('HasResolvedDuration', 'bool'),
  \ dotnet#prop('IsBackwardsProgressingGlobal', 'bool'),
  \ dotnet#prop('IsInEventQueue', 'bool'),
  \ dotnet#prop('IsInteractivelyPaused', 'bool'),
  \ dotnet#prop('IsInteractivelyStopped', 'bool'),
  \ dotnet#prop('IsRoot', 'bool'),
  \ dotnet#prop('IsTimeManager', 'bool'),
  \ dotnet#prop('NeedsPostfixTraversal', 'bool'),
  \ dotnet#prop('NeedsTicksWhenActive', 'bool'),
  \ dotnet#prop('PauseStateChangedDuringTick', 'bool'),
  \ dotnet#prop('PendingInteractivePause', 'bool'),
  \ dotnet#prop('PendingInteractiveRemove', 'bool'),
  \ dotnet#prop('PendingInteractiveResume', 'bool'),
  \ dotnet#prop('PendingInteractiveStop', 'bool'),
  \ dotnet#prop('RemoveRequestedEventRaised', 'bool'),
  \ dotnet#prop('HasDescendantsWithUnresolvedDuration', 'bool'),
  \ ])

call dotnet#class('AnimationClock', 'Clock', [ 
  \ dotnet#method('AnimationClock(', 'class AnimationTimeline animation)', 'famorassem void'),
  \ dotnet#method('get_Timeline(', ')', 'AnimationTimeline'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue)', 'object'),
  \ dotnet#method('get_NeedsTicksWhenActive(', ')', 'strict bool'),
  \ dotnet#prop('Timeline', 'AnimationTimeline'),
  \ dotnet#prop('NeedsTicksWhenActive', 'bool'),
  \ ])

call dotnet#class('AnimationException', 'SystemException', [ 
  \ dotnet#method('AnimationException(', 'class AnimationClock clock, DependencyProperty property, IAnimatable target, string message, Exception innerException)', 'void'),
  \ dotnet#method('get_Clock(', ')', 'AnimationClock'),
  \ dotnet#method('get_Property(', ')', 'DependencyProperty'),
  \ dotnet#method('get_Target(', ')', 'IAnimatable'),
  \ dotnet#method('AnimationException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Clock', 'AnimationClock'),
  \ dotnet#prop('Property', 'DependencyProperty'),
  \ dotnet#prop('Target', 'IAnimatable'),
  \ ])

call dotnet#class('Timeline', 'Animatable', [ 
  \ dotnet#method('Clone(', ')', 'Timeline'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Timeline'),
  \ dotnet#method('Timeline(', ')', 'void'),
  \ dotnet#method('Timeline(', 'Nullable beginTime)', 'void'),
  \ dotnet#method('Timeline(', 'Nullable beginTime, Duration duration)', 'void'),
  \ dotnet#method('Timeline(', 'Nullable beginTime, Duration duration, RepeatBehavior repeatBehavior)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('get_AccelerationRatio(', ')', 'float64'),
  \ dotnet#method('set_AccelerationRatio(', 'float64 value)', 'void'),
  \ dotnet#method('get_AutoReverse(', ')', 'bool'),
  \ dotnet#method('set_AutoReverse(', 'bool value)', 'void'),
  \ dotnet#method('get_BeginTime(', ')', 'Nullable'),
  \ dotnet#method('set_BeginTime(', 'Nullable value)', 'void'),
  \ dotnet#method('get_DecelerationRatio(', ')', 'float64'),
  \ dotnet#method('set_DecelerationRatio(', 'float64 value)', 'void'),
  \ dotnet#method('GetDesiredFrameRate(', 'class Timeline timeline)', 'static Nullable'),
  \ dotnet#method('SetDesiredFrameRate(', 'class Timeline timeline, Nullable desiredFrameRate)', 'static void'),
  \ dotnet#method('get_Duration(', ')', 'Duration'),
  \ dotnet#method('set_Duration(', 'Duration value)', 'void'),
  \ dotnet#method('get_FillBehavior(', ')', 'FillBehavior'),
  \ dotnet#method('set_FillBehavior(', 'FillBehavior value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('get_RepeatBehavior(', ')', 'RepeatBehavior'),
  \ dotnet#method('set_RepeatBehavior(', 'RepeatBehavior value)', 'void'),
  \ dotnet#method('get_SpeedRatio(', ')', 'float64'),
  \ dotnet#method('set_SpeedRatio(', 'float64 value)', 'void'),
  \ dotnet#method('AllocateClock(', ')', 'famorassem'),
  \ dotnet#method('CreateClock(', ')', 'Clock'),
  \ dotnet#method('CreateClock(', 'bool hasControllableRoot)', 'Clock'),
  \ dotnet#method('GetNaturalDuration(', 'class Clock clock)', 'famorassem Duration'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('add_CurrentStateInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentStateInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_CurrentTimeInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentTimeInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_CurrentGlobalSpeedInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentGlobalSpeedInvalidated(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_Completed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Completed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_RemoveRequested(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_RemoveRequested(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_InternalEventHandlersStore(', ')', '.method'),
  \ dotnet#method('InternalOnFreezablePropertyChanged(', 'class Timeline originalTimeline, Timeline newTimeline)', 'void'),
  \ dotnet#method('InternalFreeze(', 'bool isChecking)', 'bool'),
  \ dotnet#method('InternalReadPreamble(', ')', 'void'),
  \ dotnet#method('InternalWritePostscript(', ')', 'void'),
  \ dotnet#method('Timeline(', ')', 'static void .'),
  \ dotnet#event('CurrentStateInvalidated', 'EventHandler'),
  \ dotnet#event('CurrentTimeInvalidated', 'EventHandler'),
  \ dotnet#event('CurrentGlobalSpeedInvalidated', 'EventHandler'),
  \ dotnet#event('Completed', 'EventHandler'),
  \ dotnet#event('RemoveRequested', 'EventHandler'),
  \ dotnet#prop('AccelerationRatio', 'float64'),
  \ dotnet#prop('AutoReverse', 'bool'),
  \ dotnet#prop('BeginTime', 'Nullable'),
  \ dotnet#prop('DecelerationRatio', 'float64'),
  \ dotnet#prop('Duration', 'Duration'),
  \ dotnet#prop('FillBehavior', 'FillBehavior'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('RepeatBehavior', 'RepeatBehavior'),
  \ dotnet#prop('SpeedRatio', 'float64'),
  \ dotnet#prop('InternalEventHandlersStore', 'EventHandlersStore'),
  \ ])

call dotnet#class('AnimationTimeline', 'Timeline', [ 
  \ dotnet#method('AnimationTimeline(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'AnimationTimeline'),
  \ dotnet#method('AllocateClock(', ')', 'famorassem Clock'),
  \ dotnet#method('CreateClock(', ')', 'AnimationClock'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'Duration'),
  \ dotnet#method('get_TargetPropertyType(', ')', 'abstract'),
  \ dotnet#method('get_IsDestinationDefault(', ')', 'bool'),
  \ dotnet#method('AnimationTimeline(', ')', 'static void .'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ dotnet#prop('IsDestinationDefault', 'bool'),
  \ ])

call dotnet#class('ClockController', 'DispatcherObject', [ 
  \ dotnet#method('ClockController(', 'class Clock owner)', 'void'),
  \ dotnet#method('Begin(', ')', 'void'),
  \ dotnet#method('SkipToFill(', ')', 'void'),
  \ dotnet#method('Pause(', ')', 'void'),
  \ dotnet#method('Resume(', ')', 'void'),
  \ dotnet#method('Seek(', 'TimeSpan offset, TimeSeekOrigin origin)', 'void'),
  \ dotnet#method('SeekAlignedToLastTick(', 'TimeSpan offset, TimeSeekOrigin origin)', 'void'),
  \ dotnet#method('Stop(', ')', 'void'),
  \ dotnet#method('Remove(', ')', 'void'),
  \ dotnet#method('get_Clock(', ')', 'Clock'),
  \ dotnet#method('get_SpeedRatio(', ')', 'float64'),
  \ dotnet#method('set_SpeedRatio(', 'float64 value)', 'void'),
  \ dotnet#prop('Clock', 'Clock'),
  \ dotnet#prop('SpeedRatio', 'float64'),
  \ ])

call dotnet#class('ClockGroup', 'Clock', [ 
  \ dotnet#method('ClockGroup(', 'class TimelineGroup timelineGroup)', 'famorassem void'),
  \ dotnet#method('get_Timeline(', ')', 'TimelineGroup'),
  \ dotnet#method('get_Children(', ')', 'ClockCollection'),
  \ dotnet#method('get_InternalChildren(', ')', '.method'),
  \ dotnet#method('get_InternalRootChildren(', ')', '.method'),
  \ dotnet#method('BuildClockSubTreeFromTimeline(', 'class Timeline timeline, bool hasControllableRoot)', 'strict void'),
  \ dotnet#method('get_FirstChild(', ')', 'strict'),
  \ dotnet#method('GetMaxDesiredFrameRate(', ')', 'int32'),
  \ dotnet#method('ComputeTreeState(', ')', 'void'),
  \ dotnet#method('ComputeTreeStateRoot(', ')', 'void'),
  \ dotnet#method('get_CurrentDuration(', ')', 'strict'),
  \ dotnet#method('MakeRoot(', 'class TimeManager timeManager)', 'void'),
  \ dotnet#method('ResetNodesWithSlip(', ')', 'strict void'),
  \ dotnet#method('RootActivate(', ')', 'void'),
  \ dotnet#method('RootCleanChildren(', ')', 'void'),
  \ dotnet#method('get_RootHasChildren(', ')', 'bool'),
  \ dotnet#method('RootDisable(', ')', 'void'),
  \ dotnet#method('UpdateDescendantsWithUnresolvedDuration(', ')', 'strict void'),
  \ dotnet#method('ClearCurrentIntervalsToNull(', ')', 'strict void'),
  \ dotnet#method('AddNullPointToCurrentIntervals(', ')', 'strict void'),
  \ dotnet#method('ComputeCurrentIntervals(', 'TimeIntervalCollection parentIntervalCollection, TimeSpan beginTime, Nullable endTime, Duration fillDuration, Duration period, float64 appliedSpeedRatio, float64 accelRatio, float64 decelRatio, bool isAutoReversed)', 'strict void'),
  \ dotnet#method('ComputeCurrentFillInterval(', 'TimeIntervalCollection parentIntervalCollection, TimeSpan beginTime, TimeSpan endTime, Duration period, float64 appliedSpeedRatio, float64 accelRatio, float64 decelRatio, bool isAutoReversed)', 'strict void'),
  \ dotnet#method('get_CurrentIntervals(', ')', '.method'),
  \ dotnet#prop('Timeline', 'TimelineGroup'),
  \ dotnet#prop('Children', 'ClockCollection'),
  \ dotnet#prop('InternalChildren', 'List'),
  \ dotnet#prop('InternalRootChildren', 'List'),
  \ dotnet#prop('FirstChild', 'Clock'),
  \ dotnet#prop('CurrentDuration', 'Duration'),
  \ dotnet#prop('RootHasChildren', 'bool'),
  \ dotnet#prop('CurrentIntervals', 'TimeIntervalCollection'),
  \ ])

call dotnet#class('DoubleAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('DoubleAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'DoubleAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'float64 defaultOriginValue, float64 defaultDestinationValue, AnimationClock animationClock)', 'float64'),
  \ dotnet#method('GetCurrentValueCore(', 'float64 defaultOriginValue, float64 defaultDestinationValue, AnimationClock animationClock)', 'abstract float64'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('DoubleAnimationUsingPath', 'DoubleAnimationBase', [ 
  \ dotnet#method('DoubleAnimationUsingPath(', ')', 'void'),
  \ dotnet#method('get_PathGeometry(', ')', 'PathGeometry'),
  \ dotnet#method('set_PathGeometry(', 'class PathGeometry value)', 'void'),
  \ dotnet#method('get_Source(', ')', 'PathAnimationSource'),
  \ dotnet#method('set_Source(', 'PathAnimationSource value)', 'void'),
  \ dotnet#method('Clone(', ')', 'DoubleAnimationUsingPath'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'float64 defaultOriginValue, float64 defaultDestinationValue, AnimationClock animationClock)', 'float64'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('CalculateAngleFromTangentVDoubleAnimationUsingPath(', 'float64 x, float64 y)', 'static float64'),
  \ dotnet#method('DoubleAnimationUsingPath(', ')', 'static void .'),
  \ dotnet#prop('PathGeometry', 'PathGeometry'),
  \ dotnet#prop('Source', 'PathAnimationSource'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('BooleanAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('BooleanAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'BooleanAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'bool defaultOriginValue, bool defaultDestinationValue, AnimationClock animationClock)', 'bool'),
  \ dotnet#method('GetCurrentValueCore(', 'bool defaultOriginValue, bool defaultDestinationValue, AnimationClock animationClock)', 'abstract bool'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('BooleanAnimationUsingKeyFrames', 'BooleanAnimationBase', [ 
  \ dotnet#method('BooleanAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'BooleanAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'BooleanAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'bool defaultOriginValue, bool defaultDestinationValue, AnimationClock animationClock)', 'bool'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'BooleanKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class BooleanKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'BooleanKeyFrameCollection'),
  \ ])

call dotnet#class('BooleanKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('BooleanKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'BooleanKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class BooleanKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class BooleanKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class BooleanKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class BooleanKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, BooleanKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class BooleanKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'BooleanKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, BooleanKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'BooleanKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'BooleanKeyFrame'),
  \ ])

call dotnet#class('ByteAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('ByteAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ByteAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'uint8 defaultOriginValue, uint8 defaultDestinationValue, AnimationClock animationClock)', 'uint8'),
  \ dotnet#method('GetCurrentValueCore(', 'uint8 defaultOriginValue, uint8 defaultDestinationValue, AnimationClock animationClock)', 'abstract uint8'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('ByteAnimation', 'ByteAnimationBase', [ 
  \ dotnet#method('ByteAnimation(', ')', 'void'),
  \ dotnet#method('ByteAnimation(', 'uint8 toValue, Duration duration)', 'void'),
  \ dotnet#method('ByteAnimation(', 'uint8 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('ByteAnimation(', 'uint8 fromValue, uint8 toValue, Duration duration)', 'void'),
  \ dotnet#method('ByteAnimation(', 'uint8 fromValue, uint8 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'ByteAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'uint8 defaultOriginValue, uint8 defaultDestinationValue, AnimationClock animationClock)', 'uint8'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('ByteAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('ByteAnimationUsingKeyFrames', 'ByteAnimationBase', [ 
  \ dotnet#method('ByteAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ByteAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ByteAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'uint8 defaultOriginValue, uint8 defaultDestinationValue, AnimationClock animationClock)', 'uint8'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'ByteKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class ByteKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'ByteKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('ByteKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('ByteKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'ByteKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class ByteKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class ByteKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class ByteKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class ByteKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, ByteKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class ByteKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'ByteKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, ByteKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'ByteKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'ByteKeyFrame'),
  \ ])

call dotnet#class('CharAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('CharAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'CharAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'char defaultOriginValue, char defaultDestinationValue, AnimationClock animationClock)', 'char'),
  \ dotnet#method('GetCurrentValueCore(', 'char defaultOriginValue, char defaultDestinationValue, AnimationClock animationClock)', 'abstract char'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('CharAnimationUsingKeyFrames', 'CharAnimationBase', [ 
  \ dotnet#method('CharAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'CharAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'CharAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'char defaultOriginValue, char defaultDestinationValue, AnimationClock animationClock)', 'char'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'CharKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class CharKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'CharKeyFrameCollection'),
  \ ])

call dotnet#class('CharKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('CharKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'CharKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class CharKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class CharKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class CharKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class CharKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, CharKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class CharKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'CharKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, CharKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'CharKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'CharKeyFrame'),
  \ ])

call dotnet#class('ColorAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('ColorAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ColorAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'Color defaultOriginValue, Color defaultDestinationValue, AnimationClock animationClock)', 'Color'),
  \ dotnet#method('GetCurrentValueCore(', 'Color defaultOriginValue, Color defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('ColorAnimation', 'ColorAnimationBase', [ 
  \ dotnet#method('ColorAnimation(', ')', 'void'),
  \ dotnet#method('ColorAnimation(', 'Color toValue, Duration duration)', 'void'),
  \ dotnet#method('ColorAnimation(', 'Color toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('ColorAnimation(', 'Color fromValue, Color toValue, Duration duration)', 'void'),
  \ dotnet#method('ColorAnimation(', 'Color fromValue, Color toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'ColorAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'Color defaultOriginValue, Color defaultDestinationValue, AnimationClock animationClock)', 'Color'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('ColorAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('ColorAnimationUsingKeyFrames', 'ColorAnimationBase', [ 
  \ dotnet#method('ColorAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ColorAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ColorAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Color defaultOriginValue, Color defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'ColorKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class ColorKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'ColorKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('ColorKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('ColorKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'ColorKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class ColorKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class ColorKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class ColorKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class ColorKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, ColorKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class ColorKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'ColorKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, ColorKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'ColorKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'ColorKeyFrame'),
  \ ])

call dotnet#class('DecimalAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('DecimalAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'DecimalAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'Decimal defaultOriginValue, Decimal defaultDestinationValue, AnimationClock animationClock)', 'Decimal'),
  \ dotnet#method('GetCurrentValueCore(', 'Decimal defaultOriginValue, Decimal defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('DecimalAnimation', 'DecimalAnimationBase', [ 
  \ dotnet#method('DecimalAnimation(', ')', 'void'),
  \ dotnet#method('DecimalAnimation(', 'Decimal toValue, Duration duration)', 'void'),
  \ dotnet#method('DecimalAnimation(', 'Decimal toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('DecimalAnimation(', 'Decimal fromValue, Decimal toValue, Duration duration)', 'void'),
  \ dotnet#method('DecimalAnimation(', 'Decimal fromValue, Decimal toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'DecimalAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'Decimal defaultOriginValue, Decimal defaultDestinationValue, AnimationClock animationClock)', 'Decimal'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('DecimalAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('DecimalAnimationUsingKeyFrames', 'DecimalAnimationBase', [ 
  \ dotnet#method('DecimalAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'DecimalAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DecimalAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Decimal defaultOriginValue, Decimal defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'DecimalKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class DecimalKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'DecimalKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('DecimalKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('DecimalKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'DecimalKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class DecimalKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class DecimalKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class DecimalKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class DecimalKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, DecimalKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class DecimalKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'DecimalKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, DecimalKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'DecimalKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'DecimalKeyFrame'),
  \ ])

call dotnet#class('BooleanKeyFrame', 'Freezable', [ 
  \ dotnet#method('BooleanKeyFrame(', ')', 'void'),
  \ dotnet#method('BooleanKeyFrame(', 'bool value)', 'void'),
  \ dotnet#method('BooleanKeyFrame(', 'bool value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'bool'),
  \ dotnet#method('set_Value(', 'bool value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'bool baseValue, float64 keyFrameProgress)', 'bool'),
  \ dotnet#method('InterpolateValueCore(', 'bool baseValue, float64 keyFrameProgress)', 'abstract bool'),
  \ dotnet#method('BooleanKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'bool'),
  \ ])

call dotnet#class('DiscreteBooleanKeyFrame', 'BooleanKeyFrame', [ 
  \ dotnet#method('DiscreteBooleanKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteBooleanKeyFrame(', 'bool value)', 'void'),
  \ dotnet#method('DiscreteBooleanKeyFrame(', 'bool value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'bool baseValue, float64 keyFrameProgress)', 'bool'),
  \ ])

call dotnet#class('ByteKeyFrame', 'Freezable', [ 
  \ dotnet#method('ByteKeyFrame(', ')', 'void'),
  \ dotnet#method('ByteKeyFrame(', 'uint8 value)', 'void'),
  \ dotnet#method('ByteKeyFrame(', 'uint8 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'uint8'),
  \ dotnet#method('set_Value(', 'uint8 value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'uint8 baseValue, float64 keyFrameProgress)', 'uint8'),
  \ dotnet#method('InterpolateValueCore(', 'uint8 baseValue, float64 keyFrameProgress)', 'abstract uint8'),
  \ dotnet#method('ByteKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'uint8'),
  \ ])

call dotnet#class('DiscreteByteKeyFrame', 'ByteKeyFrame', [ 
  \ dotnet#method('DiscreteByteKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteByteKeyFrame(', 'uint8 value)', 'void'),
  \ dotnet#method('DiscreteByteKeyFrame(', 'uint8 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'uint8 baseValue, float64 keyFrameProgress)', 'uint8'),
  \ ])

call dotnet#class('CharKeyFrame', 'Freezable', [ 
  \ dotnet#method('CharKeyFrame(', ')', 'void'),
  \ dotnet#method('CharKeyFrame(', 'char value)', 'void'),
  \ dotnet#method('CharKeyFrame(', 'char value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'char'),
  \ dotnet#method('set_Value(', 'char value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'char baseValue, float64 keyFrameProgress)', 'char'),
  \ dotnet#method('InterpolateValueCore(', 'char baseValue, float64 keyFrameProgress)', 'abstract char'),
  \ dotnet#method('CharKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'char'),
  \ ])

call dotnet#class('DiscreteCharKeyFrame', 'CharKeyFrame', [ 
  \ dotnet#method('DiscreteCharKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteCharKeyFrame(', 'char value)', 'void'),
  \ dotnet#method('DiscreteCharKeyFrame(', 'char value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'char baseValue, float64 keyFrameProgress)', 'char'),
  \ ])

call dotnet#class('ColorKeyFrame', 'Freezable', [ 
  \ dotnet#method('ColorKeyFrame(', ')', 'void'),
  \ dotnet#method('ColorKeyFrame(', 'Color value)', 'void'),
  \ dotnet#method('ColorKeyFrame(', 'Color value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Color'),
  \ dotnet#method('set_Value(', 'Color value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'Color baseValue, float64 keyFrameProgress)', 'Color'),
  \ dotnet#method('InterpolateValueCore(', 'Color baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('ColorKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Color'),
  \ ])

call dotnet#class('DiscreteColorKeyFrame', 'ColorKeyFrame', [ 
  \ dotnet#method('DiscreteColorKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteColorKeyFrame(', 'Color value)', 'void'),
  \ dotnet#method('DiscreteColorKeyFrame(', 'Color value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Color baseValue, float64 keyFrameProgress)', 'Color'),
  \ ])

call dotnet#class('DecimalKeyFrame', 'Freezable', [ 
  \ dotnet#method('DecimalKeyFrame(', ')', 'void'),
  \ dotnet#method('DecimalKeyFrame(', 'Decimal value)', 'void'),
  \ dotnet#method('DecimalKeyFrame(', 'Decimal value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Decimal'),
  \ dotnet#method('set_Value(', 'Decimal value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'Decimal baseValue, float64 keyFrameProgress)', 'Decimal'),
  \ dotnet#method('InterpolateValueCore(', 'Decimal baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('DecimalKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Decimal'),
  \ ])

call dotnet#class('DiscreteDecimalKeyFrame', 'DecimalKeyFrame', [ 
  \ dotnet#method('DiscreteDecimalKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteDecimalKeyFrame(', 'Decimal value)', 'void'),
  \ dotnet#method('DiscreteDecimalKeyFrame(', 'Decimal value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Decimal baseValue, float64 keyFrameProgress)', 'Decimal'),
  \ ])

call dotnet#class('DoubleKeyFrame', 'Freezable', [ 
  \ dotnet#method('DoubleKeyFrame(', ')', 'void'),
  \ dotnet#method('DoubleKeyFrame(', 'float64 value)', 'void'),
  \ dotnet#method('DoubleKeyFrame(', 'float64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'float64'),
  \ dotnet#method('set_Value(', 'float64 value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'float64 baseValue, float64 keyFrameProgress)', 'float64'),
  \ dotnet#method('InterpolateValueCore(', 'float64 baseValue, float64 keyFrameProgress)', 'abstract float64'),
  \ dotnet#method('DoubleKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'float64'),
  \ ])

call dotnet#class('DiscreteDoubleKeyFrame', 'DoubleKeyFrame', [ 
  \ dotnet#method('DiscreteDoubleKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteDoubleKeyFrame(', 'float64 value)', 'void'),
  \ dotnet#method('DiscreteDoubleKeyFrame(', 'float64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'float64 baseValue, float64 keyFrameProgress)', 'float64'),
  \ ])

call dotnet#class('Int16KeyFrame', 'Freezable', [ 
  \ dotnet#method('Int16KeyFrame(', ')', 'void'),
  \ dotnet#method('Int16KeyFrame(', 'int16 value)', 'void'),
  \ dotnet#method('Int16KeyFrame(', 'int16 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'int16'),
  \ dotnet#method('set_Value(', 'int16 value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'int16 baseValue, float64 keyFrameProgress)', 'int16'),
  \ dotnet#method('InterpolateValueCore(', 'int16 baseValue, float64 keyFrameProgress)', 'abstract int16'),
  \ dotnet#method('Int16KeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'int16'),
  \ ])

call dotnet#class('DiscreteInt16KeyFrame', 'Int16KeyFrame', [ 
  \ dotnet#method('DiscreteInt16KeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteInt16KeyFrame(', 'int16 value)', 'void'),
  \ dotnet#method('DiscreteInt16KeyFrame(', 'int16 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int16 baseValue, float64 keyFrameProgress)', 'int16'),
  \ ])

call dotnet#class('Int32KeyFrame', 'Freezable', [ 
  \ dotnet#method('Int32KeyFrame(', ')', 'void'),
  \ dotnet#method('Int32KeyFrame(', 'int32 value)', 'void'),
  \ dotnet#method('Int32KeyFrame(', 'int32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'int32'),
  \ dotnet#method('set_Value(', 'int32 value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'int32 baseValue, float64 keyFrameProgress)', 'int32'),
  \ dotnet#method('InterpolateValueCore(', 'int32 baseValue, float64 keyFrameProgress)', 'abstract int32'),
  \ dotnet#method('Int32KeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'int32'),
  \ ])

call dotnet#class('DiscreteInt32KeyFrame', 'Int32KeyFrame', [ 
  \ dotnet#method('DiscreteInt32KeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteInt32KeyFrame(', 'int32 value)', 'void'),
  \ dotnet#method('DiscreteInt32KeyFrame(', 'int32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int32 baseValue, float64 keyFrameProgress)', 'int32'),
  \ ])

call dotnet#class('Int64KeyFrame', 'Freezable', [ 
  \ dotnet#method('Int64KeyFrame(', ')', 'void'),
  \ dotnet#method('Int64KeyFrame(', 'int64 value)', 'void'),
  \ dotnet#method('Int64KeyFrame(', 'int64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'int64'),
  \ dotnet#method('set_Value(', 'int64 value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'int64 baseValue, float64 keyFrameProgress)', 'int64'),
  \ dotnet#method('InterpolateValueCore(', 'int64 baseValue, float64 keyFrameProgress)', 'abstract int64'),
  \ dotnet#method('Int64KeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'int64'),
  \ ])

call dotnet#class('DiscreteInt64KeyFrame', 'Int64KeyFrame', [ 
  \ dotnet#method('DiscreteInt64KeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteInt64KeyFrame(', 'int64 value)', 'void'),
  \ dotnet#method('DiscreteInt64KeyFrame(', 'int64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int64 baseValue, float64 keyFrameProgress)', 'int64'),
  \ ])

call dotnet#class('MatrixKeyFrame', 'Freezable', [ 
  \ dotnet#method('MatrixKeyFrame(', ')', 'void'),
  \ dotnet#method('MatrixKeyFrame(', 'Matrix value)', 'void'),
  \ dotnet#method('MatrixKeyFrame(', 'Matrix value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Matrix'),
  \ dotnet#method('set_Value(', 'Matrix value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'Matrix baseValue, float64 keyFrameProgress)', 'Matrix'),
  \ dotnet#method('InterpolateValueCore(', 'Matrix baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('MatrixKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Matrix'),
  \ ])

call dotnet#class('DiscreteMatrixKeyFrame', 'MatrixKeyFrame', [ 
  \ dotnet#method('DiscreteMatrixKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteMatrixKeyFrame(', 'Matrix value)', 'void'),
  \ dotnet#method('DiscreteMatrixKeyFrame(', 'Matrix value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Matrix baseValue, float64 keyFrameProgress)', 'Matrix'),
  \ ])

call dotnet#class('ObjectKeyFrame', 'Freezable', [ 
  \ dotnet#method('ObjectKeyFrame(', ')', 'void'),
  \ dotnet#method('ObjectKeyFrame(', 'object value)', 'void'),
  \ dotnet#method('ObjectKeyFrame(', 'object value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('set_Value(', 'object value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'object baseValue, float64 keyFrameProgress)', 'object'),
  \ dotnet#method('InterpolateValueCore(', 'object baseValue, float64 keyFrameProgress)', 'abstract object'),
  \ dotnet#method('ObjectKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'object'),
  \ ])

call dotnet#class('DiscreteObjectKeyFrame', 'ObjectKeyFrame', [ 
  \ dotnet#method('DiscreteObjectKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteObjectKeyFrame(', 'object value)', 'void'),
  \ dotnet#method('DiscreteObjectKeyFrame(', 'object value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'object baseValue, float64 keyFrameProgress)', 'object'),
  \ ])

call dotnet#class('PointKeyFrame', 'Freezable', [ 
  \ dotnet#method('PointKeyFrame(', ')', 'void'),
  \ dotnet#method('PointKeyFrame(', 'Point value)', 'void'),
  \ dotnet#method('PointKeyFrame(', 'Point value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Point'),
  \ dotnet#method('set_Value(', 'Point value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'Point baseValue, float64 keyFrameProgress)', 'Point'),
  \ dotnet#method('InterpolateValueCore(', 'Point baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('PointKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Point'),
  \ ])

call dotnet#class('DiscretePointKeyFrame', 'PointKeyFrame', [ 
  \ dotnet#method('DiscretePointKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscretePointKeyFrame(', 'Point value)', 'void'),
  \ dotnet#method('DiscretePointKeyFrame(', 'Point value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Point baseValue, float64 keyFrameProgress)', 'Point'),
  \ ])

call dotnet#class('Point3DKeyFrame', 'Freezable', [ 
  \ dotnet#method('Point3DKeyFrame(', ')', 'void'),
  \ dotnet#method('Point3DKeyFrame(', 'Point3D value)', 'void'),
  \ dotnet#method('Point3DKeyFrame(', 'Point3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Point3D'),
  \ dotnet#method('set_Value(', 'Point3D value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'Point3D baseValue, float64 keyFrameProgress)', 'Point3D'),
  \ dotnet#method('InterpolateValueCore(', 'Point3D baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('Point3DKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Point3D'),
  \ ])

call dotnet#class('DiscretePoint3DKeyFrame', 'Point3DKeyFrame', [ 
  \ dotnet#method('DiscretePoint3DKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscretePoint3DKeyFrame(', 'Point3D value)', 'void'),
  \ dotnet#method('DiscretePoint3DKeyFrame(', 'Point3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Point3D baseValue, float64 keyFrameProgress)', 'Point3D'),
  \ ])

call dotnet#class('QuaternionKeyFrame', 'Freezable', [ 
  \ dotnet#method('QuaternionKeyFrame(', ')', 'void'),
  \ dotnet#method('QuaternionKeyFrame(', 'Quaternion value)', 'void'),
  \ dotnet#method('QuaternionKeyFrame(', 'Quaternion value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Quaternion'),
  \ dotnet#method('set_Value(', 'Quaternion value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'Quaternion baseValue, float64 keyFrameProgress)', 'Quaternion'),
  \ dotnet#method('InterpolateValueCore(', 'Quaternion baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('QuaternionKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Quaternion'),
  \ ])

call dotnet#class('DiscreteQuaternionKeyFrame', 'QuaternionKeyFrame', [ 
  \ dotnet#method('DiscreteQuaternionKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteQuaternionKeyFrame(', 'Quaternion value)', 'void'),
  \ dotnet#method('DiscreteQuaternionKeyFrame(', 'Quaternion value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Quaternion baseValue, float64 keyFrameProgress)', 'Quaternion'),
  \ ])

call dotnet#class('Rotation3DKeyFrame', 'Freezable', [ 
  \ dotnet#method('Rotation3DKeyFrame(', ')', 'void'),
  \ dotnet#method('Rotation3DKeyFrame(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('Rotation3DKeyFrame(', 'class Rotation3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Rotation3D'),
  \ dotnet#method('set_Value(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'class Rotation3D baseValue, float64 keyFrameProgress)', 'Rotation3D'),
  \ dotnet#method('InterpolateValueCore(', 'class Rotation3D baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('Rotation3DKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Rotation3D'),
  \ ])

call dotnet#class('DiscreteRotation3DKeyFrame', 'Rotation3DKeyFrame', [ 
  \ dotnet#method('DiscreteRotation3DKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteRotation3DKeyFrame(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('DiscreteRotation3DKeyFrame(', 'class Rotation3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'class Rotation3D baseValue, float64 keyFrameProgress)', 'Rotation3D'),
  \ ])

call dotnet#class('RectKeyFrame', 'Freezable', [ 
  \ dotnet#method('RectKeyFrame(', ')', 'void'),
  \ dotnet#method('RectKeyFrame(', 'Rect value)', 'void'),
  \ dotnet#method('RectKeyFrame(', 'Rect value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Rect'),
  \ dotnet#method('set_Value(', 'Rect value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'Rect baseValue, float64 keyFrameProgress)', 'Rect'),
  \ dotnet#method('InterpolateValueCore(', 'Rect baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('RectKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Rect'),
  \ ])

call dotnet#class('DiscreteRectKeyFrame', 'RectKeyFrame', [ 
  \ dotnet#method('DiscreteRectKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteRectKeyFrame(', 'Rect value)', 'void'),
  \ dotnet#method('DiscreteRectKeyFrame(', 'Rect value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Rect baseValue, float64 keyFrameProgress)', 'Rect'),
  \ ])

call dotnet#class('SingleKeyFrame', 'Freezable', [ 
  \ dotnet#method('SingleKeyFrame(', ')', 'void'),
  \ dotnet#method('SingleKeyFrame(', 'float32 value)', 'void'),
  \ dotnet#method('SingleKeyFrame(', 'float32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'float32'),
  \ dotnet#method('set_Value(', 'float32 value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'float32 baseValue, float64 keyFrameProgress)', 'float32'),
  \ dotnet#method('InterpolateValueCore(', 'float32 baseValue, float64 keyFrameProgress)', 'abstract float32'),
  \ dotnet#method('SingleKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'float32'),
  \ ])

call dotnet#class('DiscreteSingleKeyFrame', 'SingleKeyFrame', [ 
  \ dotnet#method('DiscreteSingleKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteSingleKeyFrame(', 'float32 value)', 'void'),
  \ dotnet#method('DiscreteSingleKeyFrame(', 'float32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'float32 baseValue, float64 keyFrameProgress)', 'float32'),
  \ ])

call dotnet#class('SizeKeyFrame', 'Freezable', [ 
  \ dotnet#method('SizeKeyFrame(', ')', 'void'),
  \ dotnet#method('SizeKeyFrame(', 'Size value)', 'void'),
  \ dotnet#method('SizeKeyFrame(', 'Size value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Size'),
  \ dotnet#method('set_Value(', 'Size value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'Size baseValue, float64 keyFrameProgress)', 'Size'),
  \ dotnet#method('InterpolateValueCore(', 'Size baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('SizeKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Size'),
  \ ])

call dotnet#class('DiscreteSizeKeyFrame', 'SizeKeyFrame', [ 
  \ dotnet#method('DiscreteSizeKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteSizeKeyFrame(', 'Size value)', 'void'),
  \ dotnet#method('DiscreteSizeKeyFrame(', 'Size value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Size baseValue, float64 keyFrameProgress)', 'Size'),
  \ ])

call dotnet#class('StringKeyFrame', 'Freezable', [ 
  \ dotnet#method('StringKeyFrame(', ')', 'void'),
  \ dotnet#method('StringKeyFrame(', 'string value)', 'void'),
  \ dotnet#method('StringKeyFrame(', 'string value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'string'),
  \ dotnet#method('set_Value(', 'string value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'string baseValue, float64 keyFrameProgress)', 'string'),
  \ dotnet#method('InterpolateValueCore(', 'string baseValue, float64 keyFrameProgress)', 'abstract string'),
  \ dotnet#method('StringKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'string'),
  \ ])

call dotnet#class('DiscreteStringKeyFrame', 'StringKeyFrame', [ 
  \ dotnet#method('DiscreteStringKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteStringKeyFrame(', 'string value)', 'void'),
  \ dotnet#method('DiscreteStringKeyFrame(', 'string value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'string baseValue, float64 keyFrameProgress)', 'string'),
  \ ])

call dotnet#class('VVectorKeyFrameKeyFrame', 'Freezable', [ 
  \ dotnet#method('VectorKeyFrame(', ')', 'void'),
  \ dotnet#method('VectorKeyFrame(', 'VVectorKeyFrame value)', 'void'),
  \ dotnet#method('VectorKeyFrame(', 'VVectorKeyFrame value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'VVectorKeyFrame'),
  \ dotnet#method('set_Value(', 'VVectorKeyFrame value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'VVectorKeyFrame baseValue, float64 keyFrameProgress)', 'VVectorKeyFrame'),
  \ dotnet#method('InterpolateValueCore(', 'VVectorKeyFrame baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('VectorKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'VVectorKeyFrame'),
  \ ])

call dotnet#class('DiscreteVDiscreteVectorKeyFrameKeyFrame', 'VDiscreteVectorKeyFrameKeyFrame', [ 
  \ dotnet#method('DiscreteVectorKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteVectorKeyFrame(', 'VDiscreteVectorKeyFrame value)', 'void'),
  \ dotnet#method('DiscreteVectorKeyFrame(', 'VDiscreteVectorKeyFrame value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'VDiscreteVectorKeyFrame baseValue, float64 keyFrameProgress)', 'VDiscreteVectorKeyFrame'),
  \ ])

call dotnet#class('VVector3DKeyFrame3DKeyFrame', 'Freezable', [ 
  \ dotnet#method('Vector3DKeyFrame(', ')', 'void'),
  \ dotnet#method('Vector3DKeyFrame(', 'VVector3DKeyFrame3D value)', 'void'),
  \ dotnet#method('Vector3DKeyFrame(', 'VVector3DKeyFrame3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'VVector3DKeyFrame3D'),
  \ dotnet#method('set_Value(', 'VVector3DKeyFrame3D value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'VVector3DKeyFrame3D baseValue, float64 keyFrameProgress)', 'VVector3DKeyFrame3D'),
  \ dotnet#method('InterpolateValueCore(', 'VVector3DKeyFrame3D baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('Vector3DKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'VVector3DKeyFrame3D'),
  \ ])

call dotnet#class('DiscreteVDiscreteVector3DKeyFrame3DKeyFrame', 'VDiscreteVector3DKeyFrame3DKeyFrame', [ 
  \ dotnet#method('DiscreteVector3DKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteVector3DKeyFrame(', 'VDiscreteVector3DKeyFrame3D value)', 'void'),
  \ dotnet#method('DiscreteVector3DKeyFrame(', 'VDiscreteVector3DKeyFrame3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'VDiscreteVector3DKeyFrame3D baseValue, float64 keyFrameProgress)', 'VDiscreteVector3DKeyFrame3D'),
  \ ])

call dotnet#class('DoubleAnimation', 'DoubleAnimationBase', [ 
  \ dotnet#method('DoubleAnimation(', ')', 'void'),
  \ dotnet#method('DoubleAnimation(', 'float64 toValue, Duration duration)', 'void'),
  \ dotnet#method('DoubleAnimation(', 'float64 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('DoubleAnimation(', 'float64 fromValue, float64 toValue, Duration duration)', 'void'),
  \ dotnet#method('DoubleAnimation(', 'float64 fromValue, float64 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'DoubleAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'float64 defaultOriginValue, float64 defaultDestinationValue, AnimationClock animationClock)', 'float64'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('DoubleAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('DoubleAnimationUsingKeyFrames', 'DoubleAnimationBase', [ 
  \ dotnet#method('DoubleAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'DoubleAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DoubleAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'float64 defaultOriginValue, float64 defaultDestinationValue, AnimationClock animationClock)', 'float64'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'DoubleKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class DoubleKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'DoubleKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('DoubleKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('DoubleKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'DoubleKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class DoubleKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class DoubleKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class DoubleKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class DoubleKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, DoubleKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class DoubleKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'DoubleKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, DoubleKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'DoubleKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'DoubleKeyFrame'),
  \ ])

call dotnet#class('EasingByteKeyFrame', 'ByteKeyFrame', [ 
  \ dotnet#method('EasingByteKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingByteKeyFrame(', 'uint8 value)', 'void'),
  \ dotnet#method('EasingByteKeyFrame(', 'uint8 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingByteKeyFrame(', 'uint8 value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'uint8 baseValue, float64 keyFrameProgress)', 'uint8'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingByteKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingColorKeyFrame', 'ColorKeyFrame', [ 
  \ dotnet#method('EasingColorKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingColorKeyFrame(', 'Color value)', 'void'),
  \ dotnet#method('EasingColorKeyFrame(', 'Color value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingColorKeyFrame(', 'Color value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Color baseValue, float64 keyFrameProgress)', 'Color'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingColorKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingDecimalKeyFrame', 'DecimalKeyFrame', [ 
  \ dotnet#method('EasingDecimalKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingDecimalKeyFrame(', 'Decimal value)', 'void'),
  \ dotnet#method('EasingDecimalKeyFrame(', 'Decimal value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingDecimalKeyFrame(', 'Decimal value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Decimal baseValue, float64 keyFrameProgress)', 'Decimal'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingDecimalKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingDoubleKeyFrame', 'DoubleKeyFrame', [ 
  \ dotnet#method('EasingDoubleKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingDoubleKeyFrame(', 'float64 value)', 'void'),
  \ dotnet#method('EasingDoubleKeyFrame(', 'float64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingDoubleKeyFrame(', 'float64 value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'float64 baseValue, float64 keyFrameProgress)', 'float64'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingDoubleKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingInt16KeyFrame', 'Int16KeyFrame', [ 
  \ dotnet#method('EasingInt16KeyFrame(', ')', 'void'),
  \ dotnet#method('EasingInt16KeyFrame(', 'int16 value)', 'void'),
  \ dotnet#method('EasingInt16KeyFrame(', 'int16 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingInt16KeyFrame(', 'int16 value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int16 baseValue, float64 keyFrameProgress)', 'int16'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingInt16KeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingInt32KeyFrame', 'Int32KeyFrame', [ 
  \ dotnet#method('EasingInt32KeyFrame(', ')', 'void'),
  \ dotnet#method('EasingInt32KeyFrame(', 'int32 value)', 'void'),
  \ dotnet#method('EasingInt32KeyFrame(', 'int32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingInt32KeyFrame(', 'int32 value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int32 baseValue, float64 keyFrameProgress)', 'int32'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingInt32KeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingInt64KeyFrame', 'Int64KeyFrame', [ 
  \ dotnet#method('EasingInt64KeyFrame(', ')', 'void'),
  \ dotnet#method('EasingInt64KeyFrame(', 'int64 value)', 'void'),
  \ dotnet#method('EasingInt64KeyFrame(', 'int64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingInt64KeyFrame(', 'int64 value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int64 baseValue, float64 keyFrameProgress)', 'int64'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingInt64KeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingPointKeyFrame', 'PointKeyFrame', [ 
  \ dotnet#method('EasingPointKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingPointKeyFrame(', 'Point value)', 'void'),
  \ dotnet#method('EasingPointKeyFrame(', 'Point value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingPointKeyFrame(', 'Point value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Point baseValue, float64 keyFrameProgress)', 'Point'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingPointKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingPoint3DKeyFrame', 'Point3DKeyFrame', [ 
  \ dotnet#method('EasingPoint3DKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingPoint3DKeyFrame(', 'Point3D value)', 'void'),
  \ dotnet#method('EasingPoint3DKeyFrame(', 'Point3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingPoint3DKeyFrame(', 'Point3D value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Point3D baseValue, float64 keyFrameProgress)', 'Point3D'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingPoint3DKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingQuaternionKeyFrame', 'QuaternionKeyFrame', [ 
  \ dotnet#method('EasingQuaternionKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingQuaternionKeyFrame(', 'Quaternion value)', 'void'),
  \ dotnet#method('EasingQuaternionKeyFrame(', 'Quaternion value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingQuaternionKeyFrame(', 'Quaternion value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Quaternion baseValue, float64 keyFrameProgress)', 'Quaternion'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_UseShortestPath(', ')', 'bool'),
  \ dotnet#method('set_UseShortestPath(', 'bool value)', 'void'),
  \ dotnet#method('EasingQuaternionKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('UseShortestPath', 'bool'),
  \ ])

call dotnet#class('EasingRotation3DKeyFrame', 'Rotation3DKeyFrame', [ 
  \ dotnet#method('EasingRotation3DKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingRotation3DKeyFrame(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('EasingRotation3DKeyFrame(', 'class Rotation3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingRotation3DKeyFrame(', 'class Rotation3D value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'class Rotation3D baseValue, float64 keyFrameProgress)', 'Rotation3D'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingRotation3DKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingRectKeyFrame', 'RectKeyFrame', [ 
  \ dotnet#method('EasingRectKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingRectKeyFrame(', 'Rect value)', 'void'),
  \ dotnet#method('EasingRectKeyFrame(', 'Rect value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingRectKeyFrame(', 'Rect value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Rect baseValue, float64 keyFrameProgress)', 'Rect'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingRectKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingSingleKeyFrame', 'SingleKeyFrame', [ 
  \ dotnet#method('EasingSingleKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingSingleKeyFrame(', 'float32 value)', 'void'),
  \ dotnet#method('EasingSingleKeyFrame(', 'float32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingSingleKeyFrame(', 'float32 value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'float32 baseValue, float64 keyFrameProgress)', 'float32'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingSingleKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingSizeKeyFrame', 'SizeKeyFrame', [ 
  \ dotnet#method('EasingSizeKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingSizeKeyFrame(', 'Size value)', 'void'),
  \ dotnet#method('EasingSizeKeyFrame(', 'Size value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingSizeKeyFrame(', 'Size value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Size baseValue, float64 keyFrameProgress)', 'Size'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingSizeKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingVEasingVectorKeyFrameKeyFrame', 'VEasingVectorKeyFrameKeyFrame', [ 
  \ dotnet#method('EasingVectorKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingVectorKeyFrame(', 'VEasingVectorKeyFrame value)', 'void'),
  \ dotnet#method('EasingVectorKeyFrame(', 'VEasingVectorKeyFrame value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingVectorKeyFrame(', 'VEasingVectorKeyFrame value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'VEasingVectorKeyFrame baseValue, float64 keyFrameProgress)', 'VEasingVectorKeyFrame'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingVectorKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('EasingVEasingVector3DKeyFrame3DKeyFrame', 'VEasingVector3DKeyFrame3DKeyFrame', [ 
  \ dotnet#method('EasingVector3DKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingVector3DKeyFrame(', 'VEasingVector3DKeyFrame3D value)', 'void'),
  \ dotnet#method('EasingVector3DKeyFrame(', 'VEasingVector3DKeyFrame3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingVector3DKeyFrame(', 'VEasingVector3DKeyFrame3D value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'VEasingVector3DKeyFrame3D baseValue, float64 keyFrameProgress)', 'VEasingVector3DKeyFrame3D'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingVector3DKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('Int16AnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('Int16AnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Int16AnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'int16 defaultOriginValue, int16 defaultDestinationValue, AnimationClock animationClock)', 'int16'),
  \ dotnet#method('GetCurrentValueCore(', 'int16 defaultOriginValue, int16 defaultDestinationValue, AnimationClock animationClock)', 'abstract int16'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('Int16Animation', 'Int16AnimationBase', [ 
  \ dotnet#method('Int16Animation(', ')', 'void'),
  \ dotnet#method('Int16Animation(', 'int16 toValue, Duration duration)', 'void'),
  \ dotnet#method('Int16Animation(', 'int16 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Int16Animation(', 'int16 fromValue, int16 toValue, Duration duration)', 'void'),
  \ dotnet#method('Int16Animation(', 'int16 fromValue, int16 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'Int16Animation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'int16 defaultOriginValue, int16 defaultDestinationValue, AnimationClock animationClock)', 'int16'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('Int16Animation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Int16AnimationUsingKeyFrames', 'Int16AnimationBase', [ 
  \ dotnet#method('Int16AnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Int16AnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Int16AnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'int16 defaultOriginValue, int16 defaultDestinationValue, AnimationClock animationClock)', 'int16'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'Int16KeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class Int16KeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'Int16KeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Int16KeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('Int16KeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'Int16KeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class Int16KeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class Int16KeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class Int16KeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class Int16KeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, Int16KeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class Int16KeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'Int16KeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, Int16KeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'Int16KeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'Int16KeyFrame'),
  \ ])

call dotnet#class('Int32AnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('Int32AnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Int32AnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'int32 defaultOriginValue, int32 defaultDestinationValue, AnimationClock animationClock)', 'int32'),
  \ dotnet#method('GetCurrentValueCore(', 'int32 defaultOriginValue, int32 defaultDestinationValue, AnimationClock animationClock)', 'abstract int32'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('Int32Animation', 'Int32AnimationBase', [ 
  \ dotnet#method('Int32Animation(', ')', 'void'),
  \ dotnet#method('Int32Animation(', 'int32 toValue, Duration duration)', 'void'),
  \ dotnet#method('Int32Animation(', 'int32 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Int32Animation(', 'int32 fromValue, int32 toValue, Duration duration)', 'void'),
  \ dotnet#method('Int32Animation(', 'int32 fromValue, int32 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'Int32Animation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'int32 defaultOriginValue, int32 defaultDestinationValue, AnimationClock animationClock)', 'int32'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('Int32Animation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Int32AnimationUsingKeyFrames', 'Int32AnimationBase', [ 
  \ dotnet#method('Int32AnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Int32AnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Int32AnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'int32 defaultOriginValue, int32 defaultDestinationValue, AnimationClock animationClock)', 'int32'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'Int32KeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class Int32KeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'Int32KeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Int32KeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('Int32KeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'Int32KeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class Int32KeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class Int32KeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class Int32KeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class Int32KeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, Int32KeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class Int32KeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'Int32KeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, Int32KeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'Int32KeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'Int32KeyFrame'),
  \ ])

call dotnet#class('Int64AnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('Int64AnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Int64AnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'int64 defaultOriginValue, int64 defaultDestinationValue, AnimationClock animationClock)', 'int64'),
  \ dotnet#method('GetCurrentValueCore(', 'int64 defaultOriginValue, int64 defaultDestinationValue, AnimationClock animationClock)', 'abstract int64'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('Int64Animation', 'Int64AnimationBase', [ 
  \ dotnet#method('Int64Animation(', ')', 'void'),
  \ dotnet#method('Int64Animation(', 'int64 toValue, Duration duration)', 'void'),
  \ dotnet#method('Int64Animation(', 'int64 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Int64Animation(', 'int64 fromValue, int64 toValue, Duration duration)', 'void'),
  \ dotnet#method('Int64Animation(', 'int64 fromValue, int64 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'Int64Animation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'int64 defaultOriginValue, int64 defaultDestinationValue, AnimationClock animationClock)', 'int64'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('Int64Animation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Int64AnimationUsingKeyFrames', 'Int64AnimationBase', [ 
  \ dotnet#method('Int64AnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Int64AnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Int64AnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'int64 defaultOriginValue, int64 defaultDestinationValue, AnimationClock animationClock)', 'int64'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'Int64KeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class Int64KeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'Int64KeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Int64KeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('Int64KeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'Int64KeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class Int64KeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class Int64KeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class Int64KeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class Int64KeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, Int64KeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class Int64KeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'Int64KeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, Int64KeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'Int64KeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'Int64KeyFrame'),
  \ ])

call dotnet#class('LinearByteKeyFrame', 'ByteKeyFrame', [ 
  \ dotnet#method('LinearByteKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearByteKeyFrame(', 'uint8 value)', 'void'),
  \ dotnet#method('LinearByteKeyFrame(', 'uint8 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'uint8 baseValue, float64 keyFrameProgress)', 'uint8'),
  \ ])

call dotnet#class('LinearColorKeyFrame', 'ColorKeyFrame', [ 
  \ dotnet#method('LinearColorKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearColorKeyFrame(', 'Color value)', 'void'),
  \ dotnet#method('LinearColorKeyFrame(', 'Color value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Color baseValue, float64 keyFrameProgress)', 'Color'),
  \ ])

call dotnet#class('LinearDecimalKeyFrame', 'DecimalKeyFrame', [ 
  \ dotnet#method('LinearDecimalKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearDecimalKeyFrame(', 'Decimal value)', 'void'),
  \ dotnet#method('LinearDecimalKeyFrame(', 'Decimal value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Decimal baseValue, float64 keyFrameProgress)', 'Decimal'),
  \ ])

call dotnet#class('LinearDoubleKeyFrame', 'DoubleKeyFrame', [ 
  \ dotnet#method('LinearDoubleKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearDoubleKeyFrame(', 'float64 value)', 'void'),
  \ dotnet#method('LinearDoubleKeyFrame(', 'float64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'float64 baseValue, float64 keyFrameProgress)', 'float64'),
  \ ])

call dotnet#class('LinearInt16KeyFrame', 'Int16KeyFrame', [ 
  \ dotnet#method('LinearInt16KeyFrame(', ')', 'void'),
  \ dotnet#method('LinearInt16KeyFrame(', 'int16 value)', 'void'),
  \ dotnet#method('LinearInt16KeyFrame(', 'int16 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int16 baseValue, float64 keyFrameProgress)', 'int16'),
  \ ])

call dotnet#class('LinearInt32KeyFrame', 'Int32KeyFrame', [ 
  \ dotnet#method('LinearInt32KeyFrame(', ')', 'void'),
  \ dotnet#method('LinearInt32KeyFrame(', 'int32 value)', 'void'),
  \ dotnet#method('LinearInt32KeyFrame(', 'int32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int32 baseValue, float64 keyFrameProgress)', 'int32'),
  \ ])

call dotnet#class('LinearInt64KeyFrame', 'Int64KeyFrame', [ 
  \ dotnet#method('LinearInt64KeyFrame(', ')', 'void'),
  \ dotnet#method('LinearInt64KeyFrame(', 'int64 value)', 'void'),
  \ dotnet#method('LinearInt64KeyFrame(', 'int64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int64 baseValue, float64 keyFrameProgress)', 'int64'),
  \ ])

call dotnet#class('LinearPointKeyFrame', 'PointKeyFrame', [ 
  \ dotnet#method('LinearPointKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearPointKeyFrame(', 'Point value)', 'void'),
  \ dotnet#method('LinearPointKeyFrame(', 'Point value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Point baseValue, float64 keyFrameProgress)', 'Point'),
  \ ])

call dotnet#class('LinearPoint3DKeyFrame', 'Point3DKeyFrame', [ 
  \ dotnet#method('LinearPoint3DKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearPoint3DKeyFrame(', 'Point3D value)', 'void'),
  \ dotnet#method('LinearPoint3DKeyFrame(', 'Point3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Point3D baseValue, float64 keyFrameProgress)', 'Point3D'),
  \ ])

call dotnet#class('LinearQuaternionKeyFrame', 'QuaternionKeyFrame', [ 
  \ dotnet#method('LinearQuaternionKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearQuaternionKeyFrame(', 'Quaternion value)', 'void'),
  \ dotnet#method('LinearQuaternionKeyFrame(', 'Quaternion value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Quaternion baseValue, float64 keyFrameProgress)', 'Quaternion'),
  \ dotnet#method('get_UseShortestPath(', ')', 'bool'),
  \ dotnet#method('set_UseShortestPath(', 'bool value)', 'void'),
  \ dotnet#method('LinearQuaternionKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('UseShortestPath', 'bool'),
  \ ])

call dotnet#class('LinearRotation3DKeyFrame', 'Rotation3DKeyFrame', [ 
  \ dotnet#method('LinearRotation3DKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearRotation3DKeyFrame(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('LinearRotation3DKeyFrame(', 'class Rotation3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'class Rotation3D baseValue, float64 keyFrameProgress)', 'Rotation3D'),
  \ ])

call dotnet#class('LinearRectKeyFrame', 'RectKeyFrame', [ 
  \ dotnet#method('LinearRectKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearRectKeyFrame(', 'Rect value)', 'void'),
  \ dotnet#method('LinearRectKeyFrame(', 'Rect value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Rect baseValue, float64 keyFrameProgress)', 'Rect'),
  \ ])

call dotnet#class('LinearSingleKeyFrame', 'SingleKeyFrame', [ 
  \ dotnet#method('LinearSingleKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearSingleKeyFrame(', 'float32 value)', 'void'),
  \ dotnet#method('LinearSingleKeyFrame(', 'float32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'float32 baseValue, float64 keyFrameProgress)', 'float32'),
  \ ])

call dotnet#class('LinearSizeKeyFrame', 'SizeKeyFrame', [ 
  \ dotnet#method('LinearSizeKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearSizeKeyFrame(', 'Size value)', 'void'),
  \ dotnet#method('LinearSizeKeyFrame(', 'Size value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Size baseValue, float64 keyFrameProgress)', 'Size'),
  \ ])

call dotnet#class('LinearVLinearVectorKeyFrameKeyFrame', 'VLinearVectorKeyFrameKeyFrame', [ 
  \ dotnet#method('LinearVectorKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearVectorKeyFrame(', 'VLinearVectorKeyFrame value)', 'void'),
  \ dotnet#method('LinearVectorKeyFrame(', 'VLinearVectorKeyFrame value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'VLinearVectorKeyFrame baseValue, float64 keyFrameProgress)', 'VLinearVectorKeyFrame'),
  \ ])

call dotnet#class('LinearVLinearVector3DKeyFrame3DKeyFrame', 'VLinearVector3DKeyFrame3DKeyFrame', [ 
  \ dotnet#method('LinearVector3DKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearVector3DKeyFrame(', 'VLinearVector3DKeyFrame3D value)', 'void'),
  \ dotnet#method('LinearVector3DKeyFrame(', 'VLinearVector3DKeyFrame3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'VLinearVector3DKeyFrame3D baseValue, float64 keyFrameProgress)', 'VLinearVector3DKeyFrame3D'),
  \ ])

call dotnet#class('MatrixAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('MatrixAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'MatrixAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'Matrix defaultOriginValue, Matrix defaultDestinationValue, AnimationClock animationClock)', 'Matrix'),
  \ dotnet#method('GetCurrentValueCore(', 'Matrix defaultOriginValue, Matrix defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('MatrixAnimationUsingKeyFrames', 'MatrixAnimationBase', [ 
  \ dotnet#method('MatrixAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'MatrixAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'MatrixAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Matrix defaultOriginValue, Matrix defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'MatrixKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class MatrixKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'MatrixKeyFrameCollection'),
  \ ])

call dotnet#class('MatrixKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('MatrixKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'MatrixKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class MatrixKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class MatrixKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class MatrixKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class MatrixKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, MatrixKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class MatrixKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'MatrixKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, MatrixKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'MatrixKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'MatrixKeyFrame'),
  \ ])

call dotnet#class('ObjectAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('ObjectAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ObjectAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValueCore(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'abstract object'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('ObjectAnimationUsingKeyFrames', 'ObjectAnimationBase', [ 
  \ dotnet#method('ObjectAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ObjectAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ObjectAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'ObjectKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class ObjectKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'ObjectKeyFrameCollection'),
  \ ])

call dotnet#class('ObjectKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('ObjectKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'ObjectKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class ObjectKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class ObjectKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class ObjectKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class ObjectKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, ObjectKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class ObjectKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'ObjectKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, ObjectKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'ObjectKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'ObjectKeyFrame'),
  \ ])

call dotnet#class('TimelineGroup', 'Timeline', [ 
  \ dotnet#method('Clone(', ')', 'TimelineGroup'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TimelineGroup'),
  \ dotnet#method('get_Children(', ')', 'TimelineCollection'),
  \ dotnet#method('set_Children(', 'class TimelineCollection value)', 'void'),
  \ dotnet#method('TimelineGroup(', ')', 'void'),
  \ dotnet#method('TimelineGroup(', 'Nullable beginTime)', 'void'),
  \ dotnet#method('TimelineGroup(', 'Nullable beginTime, Duration duration)', 'void'),
  \ dotnet#method('TimelineGroup(', 'Nullable beginTime, Duration duration, RepeatBehavior repeatBehavior)', 'void'),
  \ dotnet#method('AllocateClock(', ')', 'famorassem Clock'),
  \ dotnet#method('CreateClock(', ')', 'ClockGroup'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('TimelineGroup(', ')', 'static void .'),
  \ dotnet#prop('Children', 'TimelineCollection'),
  \ ])

call dotnet#class('ParallelTimeline', 'TimelineGroup', [ 
  \ dotnet#method('Clone(', ')', 'ParallelTimeline'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ParallelTimeline'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('ParallelTimeline(', ')', 'void'),
  \ dotnet#method('ParallelTimeline(', 'Nullable beginTime)', 'void'),
  \ dotnet#method('ParallelTimeline(', 'Nullable beginTime, Duration duration)', 'void'),
  \ dotnet#method('ParallelTimeline(', 'Nullable beginTime, Duration duration, RepeatBehavior repeatBehavior)', 'void'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'Duration'),
  \ dotnet#method('get_SlipBehavior(', ')', 'SlipBehavior'),
  \ dotnet#method('set_SlipBehavior(', 'SlipBehavior value)', 'void'),
  \ dotnet#method('ParallelTimeline_PropertyChangedFunction(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('ParallelTimeline(', ')', 'static void .'),
  \ dotnet#prop('SlipBehavior', 'SlipBehavior'),
  \ ])

call dotnet#class('Point3DAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('Point3DAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Point3DAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'Point3D defaultOriginValue, Point3D defaultDestinationValue, AnimationClock animationClock)', 'Point3D'),
  \ dotnet#method('GetCurrentValueCore(', 'Point3D defaultOriginValue, Point3D defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('Point3DAnimation', 'Point3DAnimationBase', [ 
  \ dotnet#method('Point3DAnimation(', ')', 'void'),
  \ dotnet#method('Point3DAnimation(', 'Point3D toValue, Duration duration)', 'void'),
  \ dotnet#method('Point3DAnimation(', 'Point3D toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Point3DAnimation(', 'Point3D fromValue, Point3D toValue, Duration duration)', 'void'),
  \ dotnet#method('Point3DAnimation(', 'Point3D fromValue, Point3D toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'Point3DAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'Point3D defaultOriginValue, Point3D defaultDestinationValue, AnimationClock animationClock)', 'Point3D'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('Point3DAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Point3DAnimationUsingKeyFrames', 'Point3DAnimationBase', [ 
  \ dotnet#method('Point3DAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Point3DAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Point3DAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Point3D defaultOriginValue, Point3D defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'Point3DKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class Point3DKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'Point3DKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Point3DKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('Point3DKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'Point3DKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class Point3DKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class Point3DKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class Point3DKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class Point3DKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, Point3DKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class Point3DKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'Point3DKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, Point3DKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'Point3DKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'Point3DKeyFrame'),
  \ ])

call dotnet#class('PointAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('PointAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'PointAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'Point defaultOriginValue, Point defaultDestinationValue, AnimationClock animationClock)', 'Point'),
  \ dotnet#method('GetCurrentValueCore(', 'Point defaultOriginValue, Point defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('PointAnimation', 'PointAnimationBase', [ 
  \ dotnet#method('PointAnimation(', ')', 'void'),
  \ dotnet#method('PointAnimation(', 'Point toValue, Duration duration)', 'void'),
  \ dotnet#method('PointAnimation(', 'Point toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('PointAnimation(', 'Point fromValue, Point toValue, Duration duration)', 'void'),
  \ dotnet#method('PointAnimation(', 'Point fromValue, Point toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'PointAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'Point defaultOriginValue, Point defaultDestinationValue, AnimationClock animationClock)', 'Point'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('PointAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('PointAnimationUsingKeyFrames', 'PointAnimationBase', [ 
  \ dotnet#method('PointAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'PointAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PointAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Point defaultOriginValue, Point defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'PointKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class PointKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'PointKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('PointKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('PointKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'PointKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class PointKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class PointKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class PointKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class PointKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, PointKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class PointKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'PointKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, PointKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'PointKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'PointKeyFrame'),
  \ ])

call dotnet#class('QuaternionAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('QuaternionAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'QuaternionAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'Quaternion defaultOriginValue, Quaternion defaultDestinationValue, AnimationClock animationClock)', 'Quaternion'),
  \ dotnet#method('GetCurrentValueCore(', 'Quaternion defaultOriginValue, Quaternion defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('QuaternionAnimation', 'QuaternionAnimationBase', [ 
  \ dotnet#method('QuaternionAnimation(', ')', 'void'),
  \ dotnet#method('QuaternionAnimation(', 'Quaternion toValue, Duration duration)', 'void'),
  \ dotnet#method('QuaternionAnimation(', 'Quaternion toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('QuaternionAnimation(', 'Quaternion fromValue, Quaternion toValue, Duration duration)', 'void'),
  \ dotnet#method('QuaternionAnimation(', 'Quaternion fromValue, Quaternion toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'QuaternionAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'Quaternion defaultOriginValue, Quaternion defaultDestinationValue, AnimationClock animationClock)', 'Quaternion'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('get_UseShortestPath(', ')', 'bool'),
  \ dotnet#method('set_UseShortestPath(', 'bool value)', 'void'),
  \ dotnet#method('QuaternionAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ dotnet#prop('UseShortestPath', 'bool'),
  \ ])

call dotnet#class('QuaternionAnimationUsingKeyFrames', 'QuaternionAnimationBase', [ 
  \ dotnet#method('QuaternionAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'QuaternionAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'QuaternionAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Quaternion defaultOriginValue, Quaternion defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'QuaternionKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class QuaternionKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'QuaternionKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('QuaternionKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('QuaternionKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'QuaternionKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class QuaternionKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class QuaternionKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class QuaternionKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class QuaternionKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, QuaternionKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class QuaternionKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'QuaternionKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, QuaternionKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'QuaternionKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'QuaternionKeyFrame'),
  \ ])

call dotnet#class('RectAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('RectAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'RectAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'Rect defaultOriginValue, Rect defaultDestinationValue, AnimationClock animationClock)', 'Rect'),
  \ dotnet#method('GetCurrentValueCore(', 'Rect defaultOriginValue, Rect defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('RectAnimation', 'RectAnimationBase', [ 
  \ dotnet#method('RectAnimation(', ')', 'void'),
  \ dotnet#method('RectAnimation(', 'Rect toValue, Duration duration)', 'void'),
  \ dotnet#method('RectAnimation(', 'Rect toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('RectAnimation(', 'Rect fromValue, Rect toValue, Duration duration)', 'void'),
  \ dotnet#method('RectAnimation(', 'Rect fromValue, Rect toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'RectAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'Rect defaultOriginValue, Rect defaultDestinationValue, AnimationClock animationClock)', 'Rect'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('RectAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('RectAnimationUsingKeyFrames', 'RectAnimationBase', [ 
  \ dotnet#method('RectAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'RectAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'RectAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Rect defaultOriginValue, Rect defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'RectKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class RectKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'RectKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('RectKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('RectKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'RectKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class RectKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class RectKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class RectKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class RectKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, RectKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class RectKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'RectKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, RectKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'RectKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'RectKeyFrame'),
  \ ])

call dotnet#class('Rotation3DAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('Rotation3DAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Rotation3DAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'class Rotation3D defaultOriginValue, Rotation3D defaultDestinationValue, AnimationClock animationClock)', 'Rotation3D'),
  \ dotnet#method('GetCurrentValueCore(', 'class Rotation3D defaultOriginValue, Rotation3D defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('Rotation3DAnimation', 'Rotation3DAnimationBase', [ 
  \ dotnet#method('Rotation3DAnimation(', ')', 'void'),
  \ dotnet#method('Rotation3DAnimation(', 'class Rotation3D toValue, Duration duration)', 'void'),
  \ dotnet#method('Rotation3DAnimation(', 'class Rotation3D toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Rotation3DAnimation(', 'class Rotation3D fromValue, Rotation3D toValue, Duration duration)', 'void'),
  \ dotnet#method('Rotation3DAnimation(', 'class Rotation3D fromValue, Rotation3D toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'Rotation3DAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'class Rotation3D defaultOriginValue, Rotation3D defaultDestinationValue, AnimationClock animationClock)', 'Rotation3D'),
  \ dotnet#method('get_From(', ')', 'Rotation3D'),
  \ dotnet#method('set_From(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Rotation3D'),
  \ dotnet#method('set_To(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Rotation3D'),
  \ dotnet#method('set_By(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('Rotation3DAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Rotation3D'),
  \ dotnet#prop('To', 'Rotation3D'),
  \ dotnet#prop('By', 'Rotation3D'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Rotation3DAnimationUsingKeyFrames', 'Rotation3DAnimationBase', [ 
  \ dotnet#method('Rotation3DAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'Rotation3DAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Rotation3DAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'class Rotation3D defaultOriginValue, Rotation3D defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'Rotation3DKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class Rotation3DKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'Rotation3DKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('Rotation3DKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('Rotation3DKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'Rotation3DKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class Rotation3DKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class Rotation3DKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class Rotation3DKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class Rotation3DKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, Rotation3DKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class Rotation3DKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'Rotation3DKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, Rotation3DKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'Rotation3DKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'Rotation3DKeyFrame'),
  \ ])

call dotnet#class('SingleAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('SingleAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'SingleAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'float32 defaultOriginValue, float32 defaultDestinationValue, AnimationClock animationClock)', 'float32'),
  \ dotnet#method('GetCurrentValueCore(', 'float32 defaultOriginValue, float32 defaultDestinationValue, AnimationClock animationClock)', 'abstract float32'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('SingleAnimation', 'SingleAnimationBase', [ 
  \ dotnet#method('SingleAnimation(', ')', 'void'),
  \ dotnet#method('SingleAnimation(', 'float32 toValue, Duration duration)', 'void'),
  \ dotnet#method('SingleAnimation(', 'float32 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('SingleAnimation(', 'float32 fromValue, float32 toValue, Duration duration)', 'void'),
  \ dotnet#method('SingleAnimation(', 'float32 fromValue, float32 toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'SingleAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'float32 defaultOriginValue, float32 defaultDestinationValue, AnimationClock animationClock)', 'float32'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('SingleAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('SingleAnimationUsingKeyFrames', 'SingleAnimationBase', [ 
  \ dotnet#method('SingleAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'SingleAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'SingleAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'float32 defaultOriginValue, float32 defaultDestinationValue, AnimationClock animationClock)', 'float32'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'SingleKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class SingleKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'SingleKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('SingleKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('SingleKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'SingleKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class SingleKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class SingleKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class SingleKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class SingleKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, SingleKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class SingleKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'SingleKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, SingleKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'SingleKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'SingleKeyFrame'),
  \ ])

call dotnet#class('SizeAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('SizeAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'SizeAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'Size defaultOriginValue, Size defaultDestinationValue, AnimationClock animationClock)', 'Size'),
  \ dotnet#method('GetCurrentValueCore(', 'Size defaultOriginValue, Size defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('SizeAnimation', 'SizeAnimationBase', [ 
  \ dotnet#method('SizeAnimation(', ')', 'void'),
  \ dotnet#method('SizeAnimation(', 'Size toValue, Duration duration)', 'void'),
  \ dotnet#method('SizeAnimation(', 'Size toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('SizeAnimation(', 'Size fromValue, Size toValue, Duration duration)', 'void'),
  \ dotnet#method('SizeAnimation(', 'Size fromValue, Size toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'SizeAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'Size defaultOriginValue, Size defaultDestinationValue, AnimationClock animationClock)', 'Size'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('SizeAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('SizeAnimationUsingKeyFrames', 'SizeAnimationBase', [ 
  \ dotnet#method('SizeAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'SizeAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'SizeAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Size defaultOriginValue, Size defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'SizeKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class SizeKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'SizeKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('SizeKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('SizeKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'SizeKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class SizeKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class SizeKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class SizeKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class SizeKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, SizeKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class SizeKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'SizeKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, SizeKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'SizeKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'SizeKeyFrame'),
  \ ])

call dotnet#class('SplineByteKeyFrame', 'ByteKeyFrame', [ 
  \ dotnet#method('SplineByteKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineByteKeyFrame(', 'uint8 value)', 'void'),
  \ dotnet#method('SplineByteKeyFrame(', 'uint8 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineByteKeyFrame(', 'uint8 value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'uint8 baseValue, float64 keyFrameProgress)', 'uint8'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineByteKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineColorKeyFrame', 'ColorKeyFrame', [ 
  \ dotnet#method('SplineColorKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineColorKeyFrame(', 'Color value)', 'void'),
  \ dotnet#method('SplineColorKeyFrame(', 'Color value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineColorKeyFrame(', 'Color value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Color baseValue, float64 keyFrameProgress)', 'Color'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineColorKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineDecimalKeyFrame', 'DecimalKeyFrame', [ 
  \ dotnet#method('SplineDecimalKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineDecimalKeyFrame(', 'Decimal value)', 'void'),
  \ dotnet#method('SplineDecimalKeyFrame(', 'Decimal value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineDecimalKeyFrame(', 'Decimal value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Decimal baseValue, float64 keyFrameProgress)', 'Decimal'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineDecimalKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineDoubleKeyFrame', 'DoubleKeyFrame', [ 
  \ dotnet#method('SplineDoubleKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineDoubleKeyFrame(', 'float64 value)', 'void'),
  \ dotnet#method('SplineDoubleKeyFrame(', 'float64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineDoubleKeyFrame(', 'float64 value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'float64 baseValue, float64 keyFrameProgress)', 'float64'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineDoubleKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineInt16KeyFrame', 'Int16KeyFrame', [ 
  \ dotnet#method('SplineInt16KeyFrame(', ')', 'void'),
  \ dotnet#method('SplineInt16KeyFrame(', 'int16 value)', 'void'),
  \ dotnet#method('SplineInt16KeyFrame(', 'int16 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineInt16KeyFrame(', 'int16 value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int16 baseValue, float64 keyFrameProgress)', 'int16'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineInt16KeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineInt32KeyFrame', 'Int32KeyFrame', [ 
  \ dotnet#method('SplineInt32KeyFrame(', ')', 'void'),
  \ dotnet#method('SplineInt32KeyFrame(', 'int32 value)', 'void'),
  \ dotnet#method('SplineInt32KeyFrame(', 'int32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineInt32KeyFrame(', 'int32 value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int32 baseValue, float64 keyFrameProgress)', 'int32'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineInt32KeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineInt64KeyFrame', 'Int64KeyFrame', [ 
  \ dotnet#method('SplineInt64KeyFrame(', ')', 'void'),
  \ dotnet#method('SplineInt64KeyFrame(', 'int64 value)', 'void'),
  \ dotnet#method('SplineInt64KeyFrame(', 'int64 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineInt64KeyFrame(', 'int64 value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'int64 baseValue, float64 keyFrameProgress)', 'int64'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineInt64KeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplinePointKeyFrame', 'PointKeyFrame', [ 
  \ dotnet#method('SplinePointKeyFrame(', ')', 'void'),
  \ dotnet#method('SplinePointKeyFrame(', 'Point value)', 'void'),
  \ dotnet#method('SplinePointKeyFrame(', 'Point value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplinePointKeyFrame(', 'Point value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Point baseValue, float64 keyFrameProgress)', 'Point'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplinePointKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplinePoint3DKeyFrame', 'Point3DKeyFrame', [ 
  \ dotnet#method('SplinePoint3DKeyFrame(', ')', 'void'),
  \ dotnet#method('SplinePoint3DKeyFrame(', 'Point3D value)', 'void'),
  \ dotnet#method('SplinePoint3DKeyFrame(', 'Point3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplinePoint3DKeyFrame(', 'Point3D value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Point3D baseValue, float64 keyFrameProgress)', 'Point3D'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplinePoint3DKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineQuaternionKeyFrame', 'QuaternionKeyFrame', [ 
  \ dotnet#method('SplineQuaternionKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineQuaternionKeyFrame(', 'Quaternion value)', 'void'),
  \ dotnet#method('SplineQuaternionKeyFrame(', 'Quaternion value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineQuaternionKeyFrame(', 'Quaternion value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Quaternion baseValue, float64 keyFrameProgress)', 'Quaternion'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('get_UseShortestPath(', ')', 'bool'),
  \ dotnet#method('set_UseShortestPath(', 'bool value)', 'void'),
  \ dotnet#method('SplineQuaternionKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ dotnet#prop('UseShortestPath', 'bool'),
  \ ])

call dotnet#class('SplineRotation3DKeyFrame', 'Rotation3DKeyFrame', [ 
  \ dotnet#method('SplineRotation3DKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineRotation3DKeyFrame(', 'class Rotation3D value)', 'void'),
  \ dotnet#method('SplineRotation3DKeyFrame(', 'class Rotation3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineRotation3DKeyFrame(', 'class Rotation3D value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'class Rotation3D baseValue, float64 keyFrameProgress)', 'Rotation3D'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineRotation3DKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineRectKeyFrame', 'RectKeyFrame', [ 
  \ dotnet#method('SplineRectKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineRectKeyFrame(', 'Rect value)', 'void'),
  \ dotnet#method('SplineRectKeyFrame(', 'Rect value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineRectKeyFrame(', 'Rect value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Rect baseValue, float64 keyFrameProgress)', 'Rect'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineRectKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineSingleKeyFrame', 'SingleKeyFrame', [ 
  \ dotnet#method('SplineSingleKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineSingleKeyFrame(', 'float32 value)', 'void'),
  \ dotnet#method('SplineSingleKeyFrame(', 'float32 value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineSingleKeyFrame(', 'float32 value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'float32 baseValue, float64 keyFrameProgress)', 'float32'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineSingleKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineSizeKeyFrame', 'SizeKeyFrame', [ 
  \ dotnet#method('SplineSizeKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineSizeKeyFrame(', 'Size value)', 'void'),
  \ dotnet#method('SplineSizeKeyFrame(', 'Size value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineSizeKeyFrame(', 'Size value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Size baseValue, float64 keyFrameProgress)', 'Size'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineSizeKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineVSplineVectorKeyFrameKeyFrame', 'VSplineVectorKeyFrameKeyFrame', [ 
  \ dotnet#method('SplineVectorKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineVectorKeyFrame(', 'VSplineVectorKeyFrame value)', 'void'),
  \ dotnet#method('SplineVectorKeyFrame(', 'VSplineVectorKeyFrame value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineVectorKeyFrame(', 'VSplineVectorKeyFrame value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'VSplineVectorKeyFrame baseValue, float64 keyFrameProgress)', 'VSplineVectorKeyFrame'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineVectorKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('SplineVSplineVector3DKeyFrame3DKeyFrame', 'VSplineVector3DKeyFrame3DKeyFrame', [ 
  \ dotnet#method('SplineVector3DKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineVector3DKeyFrame(', 'VSplineVector3DKeyFrame3D value)', 'void'),
  \ dotnet#method('SplineVector3DKeyFrame(', 'VSplineVector3DKeyFrame3D value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineVector3DKeyFrame(', 'VSplineVector3DKeyFrame3D value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'VSplineVector3DKeyFrame3D baseValue, float64 keyFrameProgress)', 'VSplineVector3DKeyFrame3D'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineVector3DKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('StringAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('StringAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'StringAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'string defaultOriginValue, string defaultDestinationValue, AnimationClock animationClock)', 'string'),
  \ dotnet#method('GetCurrentValueCore(', 'string defaultOriginValue, string defaultDestinationValue, AnimationClock animationClock)', 'abstract string'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('StringAnimationUsingKeyFrames', 'StringAnimationBase', [ 
  \ dotnet#method('StringAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'StringAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'StringAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'string defaultOriginValue, string defaultDestinationValue, AnimationClock animationClock)', 'string'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'StringKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class StringKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'StringKeyFrameCollection'),
  \ ])

call dotnet#class('StringKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('StringKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'StringKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class StringKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class StringKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class StringKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class StringKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, StringKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class StringKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'StringKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, StringKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'StringKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'StringKeyFrame'),
  \ ])

call dotnet#class('TimelineCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Timeline'),
  \ dotnet#field('_list', 'TimelineCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('TimelineCollection(', 'class TimelineCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Timeline'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'TimelineCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TimelineCollection'),
  \ dotnet#method('Add(', 'class Timeline value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class Timeline value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class Timeline value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, Timeline value)', 'void'),
  \ dotnet#method('Remove(', 'class Timeline value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Timeline value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Timeline[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'TimelineCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'Timeline'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class Timeline value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('TimelineCollection(', ')', 'void'),
  \ dotnet#method('TimelineCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('TimelineCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'Timeline'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'TimelineCollection'),
  \ ])

call dotnet#class('VVector3DAnimationBase3DAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('Vector3DAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'VVector3DAnimationBase3DAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'VVector3DAnimationBase3D defaultOriginValue, VVector3DAnimationBase3D defaultDestinationValue, AnimationClock animationClock)', 'VVector3DAnimationBase3D'),
  \ dotnet#method('GetCurrentValueCore(', 'VVector3DAnimationBase3D defaultOriginValue, VVector3DAnimationBase3D defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('VVector3DAnimation3DAnimation', 'VVector3DAnimation3DAnimationBase', [ 
  \ dotnet#method('Vector3DAnimation(', ')', 'void'),
  \ dotnet#method('Vector3DAnimation(', 'VVector3DAnimation3D toValue, Duration duration)', 'void'),
  \ dotnet#method('Vector3DAnimation(', 'VVector3DAnimation3D toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Vector3DAnimation(', 'VVector3DAnimation3D fromValue, VVector3DAnimation3D toValue, Duration duration)', 'void'),
  \ dotnet#method('Vector3DAnimation(', 'VVector3DAnimation3D fromValue, VVector3DAnimation3D toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'VVector3DAnimation3DAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'VVector3DAnimation3D defaultOriginValue, VVector3DAnimation3D defaultDestinationValue, AnimationClock animationClock)', 'VVector3DAnimation3D'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('Vector3DAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('VVector3DAnimationUsingKeyFrames3DAnimationUsingKeyFrames', 'VVector3DAnimationUsingKeyFrames3DAnimationBase', [ 
  \ dotnet#method('Vector3DAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'VVector3DAnimationUsingKeyFrames3DAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'VVector3DAnimationUsingKeyFrames3DAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'VVector3DAnimationUsingKeyFrames3D defaultOriginValue, VVector3DAnimationUsingKeyFrames3D defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'VVector3DAnimationUsingKeyFrames3DKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class VVector3DAnimationUsingKeyFrames3DKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'VVector3DAnimationUsingKeyFrames3DKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('VVector3DKeyFrameCollection3DKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('Vector3DKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'VVector3DKeyFrameCollection3DKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class VVector3DKeyFrameCollection3DKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class VVector3DKeyFrameCollection3DKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class VVector3DKeyFrameCollection3DKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class VVector3DKeyFrameCollection3DKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, VVector3DKeyFrameCollection3DKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class VVector3DKeyFrameCollection3DKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'VVector3DKeyFrameCollection3DKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, VVector3DKeyFrameCollection3DKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'VVector3DKeyFrameCollection3DKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'VVector3DKeyFrameCollection3DKeyFrame'),
  \ ])

call dotnet#class('VVectorAnimationBaseAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('VectorAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'VVectorAnimationBaseAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'VVectorAnimationBase defaultOriginValue, VVectorAnimationBase defaultDestinationValue, AnimationClock animationClock)', 'VVectorAnimationBase'),
  \ dotnet#method('GetCurrentValueCore(', 'VVectorAnimationBase defaultOriginValue, VVectorAnimationBase defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('VVectorAnimationAnimation', 'VVectorAnimationAnimationBase', [ 
  \ dotnet#method('VectorAnimation(', ')', 'void'),
  \ dotnet#method('VectorAnimation(', 'VVectorAnimation toValue, Duration duration)', 'void'),
  \ dotnet#method('VectorAnimation(', 'VVectorAnimation toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('VectorAnimation(', 'VVectorAnimation fromValue, VVectorAnimation toValue, Duration duration)', 'void'),
  \ dotnet#method('VectorAnimation(', 'VVectorAnimation fromValue, VVectorAnimation toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'VVectorAnimationAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'VVectorAnimation defaultOriginValue, VVectorAnimation defaultDestinationValue, AnimationClock animationClock)', 'VVectorAnimation'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('VectorAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('VVectorAnimationUsingKeyFramesAnimationUsingKeyFrames', 'VVectorAnimationUsingKeyFramesAnimationBase', [ 
  \ dotnet#method('VectorAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'VVectorAnimationUsingKeyFramesAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'VVectorAnimationUsingKeyFramesAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'VVectorAnimationUsingKeyFrames defaultOriginValue, VVectorAnimationUsingKeyFrames defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'VVectorAnimationUsingKeyFramesKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class VVectorAnimationUsingKeyFramesKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'VVectorAnimationUsingKeyFramesKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('VVectorKeyFrameCollectionKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('VectorKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'VVectorKeyFrameCollectionKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class VVectorKeyFrameCollectionKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class VVectorKeyFrameCollectionKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class VVectorKeyFrameCollectionKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class VVectorKeyFrameCollectionKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, VVectorKeyFrameCollectionKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class VVectorKeyFrameCollectionKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'VVectorKeyFrameCollectionKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, VVectorKeyFrameCollectionKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'VVectorKeyFrameCollectionKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'VVectorKeyFrameCollectionKeyFrame'),
  \ ])

call dotnet#class('KeySpline', 'Freezable', [ 
  \ dotnet#method('KeySpline(', ')', 'void'),
  \ dotnet#method('KeySpline(', 'float64 x1, float64 y1, float64 x2, float64 y2)', 'void'),
  \ dotnet#method('KeySpline(', 'Point controlPoint1, Point controlPoint2)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('get_ControlPoint1(', ')', 'Point'),
  \ dotnet#method('set_ControlPoint1(', 'Point value)', 'void'),
  \ dotnet#method('get_ControlPoint2(', ')', 'Point'),
  \ dotnet#method('set_ControlPoint2(', 'Point value)', 'void'),
  \ dotnet#method('GetSplineProgress(', 'float64 linearProgress)', 'float64'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider formatProvider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider formatProvider)', 'string '),
  \ dotnet#method('InternalConvertToString(', 'string format, IFormatProvider formatProvider)', 'string'),
  \ dotnet#prop('ControlPoint1', 'Point'),
  \ dotnet#prop('ControlPoint2', 'Point'),
  \ ])

call dotnet#class('KeyTime', 'ValueType', [ 
  \ dotnet#field('_value', 'object'),
  \ dotnet#field('_type', 'KeyTimeType'),
  \ dotnet#method('FromPercent(', 'float64 percent)', 'static KeyTime'),
  \ dotnet#method('FromTimeSpan(', 'TimeSpan timeSpan)', 'static KeyTime'),
  \ dotnet#method('get_Uniform(', ')', 'static'),
  \ dotnet#method('get_Paced(', ')', 'static'),
  \ dotnet#method('Equals(', 'KeyTime keyTime1, KeyTime keyTime2)', 'static bool'),
  \ dotnet#method('op_Equality(', 'KeyTime keyTime1, KeyTime keyTime2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'KeyTime keyTime1, KeyTime keyTime2)', 'static bool'),
  \ dotnet#method('Equals(', 'KeyTime value)', 'bool'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('op_Implicit(', 'TimeSpan timeSpan)', 'static'),
  \ dotnet#method('get_TimeSpan(', ')', 'TimeSpan'),
  \ dotnet#method('get_Percent(', ')', 'float64'),
  \ dotnet#method('get_Type(', ')', 'KeyTimeType'),
  \ dotnet#prop('Uniform', 'KeyTime'),
  \ dotnet#prop('Paced', 'KeyTime'),
  \ dotnet#prop('TimeSpan', 'TimeSpan'),
  \ dotnet#prop('Percent', 'float64'),
  \ dotnet#prop('Type', 'KeyTimeType'),
  \ ])

call dotnet#class('MatrixAnimationUsingPath', 'MatrixAnimationBase', [ 
  \ dotnet#method('MatrixAnimationUsingPath(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'MatrixAnimationUsingPath'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('get_DoesRotateWithTangent(', ')', 'bool'),
  \ dotnet#method('set_DoesRotateWithTangent(', 'bool value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsAngleCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsAngleCumulative(', 'bool value)', 'void'),
  \ dotnet#method('get_IsOffsetCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsOffsetCumulative(', 'bool value)', 'void'),
  \ dotnet#method('get_PathGeometry(', ')', 'PathGeometry'),
  \ dotnet#method('set_PathGeometry(', 'class PathGeometry value)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Matrix defaultOriginValue, Matrix defaultDestinationValue, AnimationClock animationClock)', 'Matrix'),
  \ dotnet#method('MatrixAnimationUsingPath(', ')', 'static void .'),
  \ dotnet#prop('DoesRotateWithTangent', 'bool'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsAngleCumulative', 'bool'),
  \ dotnet#prop('IsOffsetCumulative', 'bool'),
  \ dotnet#prop('PathGeometry', 'PathGeometry'),
  \ ])

call dotnet#class('PointAnimationUsingPath', 'PointAnimationBase', [ 
  \ dotnet#method('PointAnimationUsingPath(', ')', 'void'),
  \ dotnet#method('get_PathGeometry(', ')', 'PathGeometry'),
  \ dotnet#method('set_PathGeometry(', 'class PathGeometry value)', 'void'),
  \ dotnet#method('Clone(', ')', 'PointAnimationUsingPath'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Point defaultOriginValue, Point defaultDestinationValue, AnimationClock animationClock)', 'Point'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('PointAnimationUsingPath(', ')', 'static void .'),
  \ dotnet#prop('PathGeometry', 'PathGeometry'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('RepeatBehavior', 'ValueType', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#field('_iterationCount', 'float64'),
  \ dotnet#field('_repeatDuration', 'TimeSpan'),
  \ dotnet#field('_type', 'RepeatBehavior/RepeatBehaviorType'),
  \ dotnet#method('RepeatBehavior(', 'float64 count)', 'void'),
  \ dotnet#method('RepeatBehavior(', 'TimeSpan duration)', 'void'),
  \ dotnet#method('get_Forever(', ')', 'static'),
  \ dotnet#method('get_HasCount(', ')', 'bool'),
  \ dotnet#method('get_HasDuration(', ')', 'bool'),
  \ dotnet#method('get_Count(', ')', 'float64'),
  \ dotnet#method('get_Duration(', ')', 'TimeSpan'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('Equals(', 'RepeatBehavior repeatBehavior)', 'bool'),
  \ dotnet#method('Equals(', 'RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider formatProvider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider formatProvider)', 'string '),
  \ dotnet#method('InternalToString(', 'string format, IFormatProvider formatProvider)', 'string'),
  \ dotnet#method('op_Equality(', 'RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2)', 'static bool'),
  \ dotnet#prop('Forever', 'RepeatBehavior'),
  \ dotnet#prop('HasCount', 'bool'),
  \ dotnet#prop('HasDuration', 'bool'),
  \ dotnet#prop('Count', 'float64'),
  \ dotnet#prop('Duration', 'TimeSpan'),
  \ ])

call dotnet#class('RepeatBehaviorConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext td, Type t)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext td, CultureInfo cultureInfo, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('RepeatBehaviorConverter(', ')', 'void'),
  \ dotnet#method('RepeatBehaviorConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('ClockCollection', 'Object', [ 
  \ dotnet#field('_owner', 'Clock'),
  \ dotnet#method('ClockCollection(', 'class Clock owner)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'get_Current()'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('Reset(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#prop('Current', 'Clock'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Add(', 'class Clock item)', 'void'),
  \ dotnet#method('Remove(', 'class Clock item)', 'bool'),
  \ dotnet#method('Contains(', 'class Clock item)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Clock[] array, int32 index)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'class ClockCollection objA, ClockCollection objB)', 'static bool'),
  \ dotnet#method('op_Equality(', 'class ClockCollection objA, ClockCollection objB)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class ClockCollection objA, ClockCollection objB)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_Item(', 'int32 index)', 'Clock'),
  \ dotnet#method('ClockCollection(', 'class Clock owner)', 'void'),
  \ dotnet#method('ClockCollection(', ')', 'void'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'Clock'),
  \ ])

call dotnet#class('EasingFunctionBase', 'Freezable', [ 
  \ dotnet#method('get_EasingMode(', ')', 'EasingMode'),
  \ dotnet#method('set_EasingMode(', 'EasingMode value)', 'void'),
  \ dotnet#method('Ease(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'abstract float64'),
  \ dotnet#method('EasingFunctionBase(', ')', 'void'),
  \ dotnet#method('EasingFunctionBase(', ')', 'static void .'),
  \ dotnet#prop('EasingMode', 'EasingMode'),
  \ ])

call dotnet#class('SineEase', 'EasingFunctionBase', [ 
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('SineEase(', ')', 'void'),
  \ ])

call dotnet#class('BounceEase', 'EasingFunctionBase', [ 
  \ dotnet#method('BounceEase(', ')', 'void'),
  \ dotnet#method('get_Bounces(', ')', 'int32'),
  \ dotnet#method('set_Bounces(', 'int32 value)', 'void'),
  \ dotnet#method('get_Bounciness(', ')', 'float64'),
  \ dotnet#method('set_Bounciness(', 'float64 value)', 'void'),
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('BounceEase(', ')', 'static void .'),
  \ dotnet#prop('Bounces', 'int32'),
  \ dotnet#prop('Bounciness', 'float64'),
  \ ])

call dotnet#class('CircleEase', 'EasingFunctionBase', [ 
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CircleEase(', ')', 'void'),
  \ ])

call dotnet#class('BackEase', 'EasingFunctionBase', [ 
  \ dotnet#method('BackEase(', ')', 'void'),
  \ dotnet#method('get_Amplitude(', ')', 'float64'),
  \ dotnet#method('set_Amplitude(', 'float64 value)', 'void'),
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('BackEase(', ')', 'static void .'),
  \ dotnet#prop('Amplitude', 'float64'),
  \ ])

call dotnet#class('ElasticEase', 'EasingFunctionBase', [ 
  \ dotnet#method('ElasticEase(', ')', 'void'),
  \ dotnet#method('get_Oscillations(', ')', 'int32'),
  \ dotnet#method('set_Oscillations(', 'int32 value)', 'void'),
  \ dotnet#method('get_Springiness(', ')', 'float64'),
  \ dotnet#method('set_Springiness(', 'float64 value)', 'void'),
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('ElasticEase(', ')', 'static void .'),
  \ dotnet#prop('Oscillations', 'int32'),
  \ dotnet#prop('Springiness', 'float64'),
  \ ])

call dotnet#class('ExponentialEase', 'EasingFunctionBase', [ 
  \ dotnet#method('ExponentialEase(', ')', 'void'),
  \ dotnet#method('get_Exponent(', ')', 'float64'),
  \ dotnet#method('set_Exponent(', 'float64 value)', 'void'),
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('ExponentialEase(', ')', 'static void .'),
  \ dotnet#prop('Exponent', 'float64'),
  \ ])

call dotnet#class('PowerEase', 'EasingFunctionBase', [ 
  \ dotnet#method('PowerEase(', ')', 'void'),
  \ dotnet#method('get_Power(', ')', 'float64'),
  \ dotnet#method('set_Power(', 'float64 value)', 'void'),
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('PowerEase(', ')', 'static void .'),
  \ dotnet#prop('Power', 'float64'),
  \ ])

call dotnet#class('QuinticEase', 'EasingFunctionBase', [ 
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('QuinticEase(', ')', 'void'),
  \ ])

call dotnet#class('QuarticEase', 'EasingFunctionBase', [ 
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('QuarticEase(', ')', 'void'),
  \ ])

call dotnet#class('CubicEase', 'EasingFunctionBase', [ 
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CubicEase(', ')', 'void'),
  \ ])

call dotnet#class('QuadraticEase', 'EasingFunctionBase', [ 
  \ dotnet#method('EaseInCore(', 'float64 normalizedTime)', 'float64'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('QuadraticEase(', ')', 'void'),
  \ ])

call dotnet#class('BeginStoryboard', 'TriggerAction', [ 
  \ dotnet#method('BeginStoryboard(', ')', 'void'),
  \ dotnet#method('get_Storyboard(', ')', 'Storyboard'),
  \ dotnet#method('set_Storyboard(', 'class Storyboard value)', 'void'),
  \ dotnet#method('get_HandoffBehavior(', ')', 'HandoffBehavior'),
  \ dotnet#method('set_HandoffBehavior(', 'HandoffBehavior value)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('set_Name(', 'string value)', 'void'),
  \ dotnet#method('Seal(', ')', 'strict void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement fe, FrameworkContentElement fce, Style targetStyle, FrameworkTemplate frameworkTemplate, int64 layer)', 'void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement fe)', 'void'),
  \ dotnet#method('BeginStoryboard(', ')', 'static void .'),
  \ dotnet#prop('Storyboard', 'Storyboard'),
  \ dotnet#prop('HandoffBehavior', 'HandoffBehavior'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('ControllableStoryboardAction', 'TriggerAction', [ 
  \ dotnet#method('ControllableStoryboardAction(', ')', 'void'),
  \ dotnet#method('get_BeginStoryboardName(', ')', 'string'),
  \ dotnet#method('set_BeginStoryboardName(', 'string value)', 'void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement fe, FrameworkContentElement fce, Style targetStyle, FrameworkTemplate frameworkTemplate, int64 layer)', 'void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement fe)', 'void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement containingFE, FrameworkContentElement containingFCE, Storyboard storyboard)', 'strict void'),
  \ dotnet#prop('BeginStoryboardName', 'string'),
  \ ])

call dotnet#class('PauseStoryboard', 'ControllableStoryboardAction', [ 
  \ dotnet#method('Invoke(', 'class FrameworkElement containingFE, FrameworkContentElement containingFCE, Storyboard storyboard)', 'strict void'),
  \ dotnet#method('PauseStoryboard(', ')', 'void'),
  \ ])

call dotnet#class('RemoveStoryboard', 'ControllableStoryboardAction', [ 
  \ dotnet#method('Invoke(', 'class FrameworkElement containingFE, FrameworkContentElement containingFCE, Storyboard storyboard)', 'strict void'),
  \ dotnet#method('RemoveStoryboard(', ')', 'void'),
  \ ])

call dotnet#class('ResumeStoryboard', 'ControllableStoryboardAction', [ 
  \ dotnet#method('Invoke(', 'class FrameworkElement containingFE, FrameworkContentElement containingFCE, Storyboard storyboard)', 'strict void'),
  \ dotnet#method('ResumeStoryboard(', ')', 'void'),
  \ ])

call dotnet#class('SeekStoryboard', 'ControllableStoryboardAction', [ 
  \ dotnet#method('get_Offset(', ')', 'TimeSpan'),
  \ dotnet#method('set_Offset(', 'TimeSpan value)', 'void'),
  \ dotnet#method('ShouldSerializeOffset(', ')', 'bool'),
  \ dotnet#method('get_Origin(', ')', 'TimeSeekOrigin'),
  \ dotnet#method('set_Origin(', 'TimeSeekOrigin value)', 'void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement containingFE, FrameworkContentElement containingFCE, Storyboard storyboard)', 'strict void'),
  \ dotnet#method('SeekStoryboard(', ')', 'void'),
  \ dotnet#prop('Offset', 'TimeSpan'),
  \ dotnet#prop('Origin', 'TimeSeekOrigin'),
  \ ])

call dotnet#class('SetStoryboardSpeedRatio', 'ControllableStoryboardAction', [ 
  \ dotnet#method('get_SpeedRatio(', ')', 'float64'),
  \ dotnet#method('set_SpeedRatio(', 'float64 value)', 'void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement containingFE, FrameworkContentElement containingFCE, Storyboard storyboard)', 'strict void'),
  \ dotnet#method('SetStoryboardSpeedRatio(', ')', 'void'),
  \ dotnet#prop('SpeedRatio', 'float64'),
  \ ])

call dotnet#class('SkipStoryboardToFill', 'ControllableStoryboardAction', [ 
  \ dotnet#method('Invoke(', 'class FrameworkElement containingFE, FrameworkContentElement containingFCE, Storyboard storyboard)', 'strict void'),
  \ dotnet#method('SkipStoryboardToFill(', ')', 'void'),
  \ ])

call dotnet#class('StopStoryboard', 'ControllableStoryboardAction', [ 
  \ dotnet#method('Invoke(', 'class FrameworkElement containingFE, FrameworkContentElement containingFCE, Storyboard storyboard)', 'strict void'),
  \ dotnet#method('StopStoryboard(', ')', 'void'),
  \ ])

call dotnet#class('Storyboard', 'ParallelTimeline', [ 
  \ dotnet#method('Storyboard(', 'class DependencyObject target, Freezable clone, DependencyProperty property, Freezable original)', 'void'),
  \ dotnet#method('InvalidatePropertyOnCloneChange(', 'object source, EventArgs e)', 'void'),
  \ dotnet#method('InvalidatePropertyOnOriginalChange(', 'object source, EventArgs e)', 'void'),
  \ dotnet#method('ListenToChangesOnFreezable(', 'class DependencyObject target, Freezable clone, DependencyProperty dp, Freezable original)', 'static void'),
  \ dotnet#method('Storyboard(', ')', 'static void .'),
  \ dotnet#method('Storyboard(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('Clone(', ')', 'Storyboard'),
  \ dotnet#method('SetTarget(', 'class DependencyObject element, DependencyObject value)', 'static void'),
  \ dotnet#method('GetTarget(', 'class DependencyObject element)', 'static DependencyObject'),
  \ dotnet#method('SetTargetName(', 'class DependencyObject element, string name)', 'static void'),
  \ dotnet#method('GetTargetName(', 'class DependencyObject element)', 'static string'),
  \ dotnet#method('SetTargetProperty(', 'class DependencyObject element, PropertyPath path)', 'static void'),
  \ dotnet#method('GetTargetProperty(', 'class DependencyObject element)', 'static PropertyPath'),
  \ dotnet#method('ResolveTargetName(', 'string targetName, INameScope nameScope, DependencyObject element)', 'static DependencyObject'),
  \ dotnet#method('ResolveBeginStoryboardName(', 'string targetName, INameScope nameScope, FrameworkElement fe, FrameworkContentElement fce)', 'static BeginStoryboard'),
  \ dotnet#method('VerifyPathIsAnimatable(', 'class PropertyPath path)', 'static void'),
  \ dotnet#method('GetComplexPathValue(', 'class DependencyObject targetObject, DependencyProperty targetProperty, EffectiveValueEntry& entry, PropertyMetadata metadata)', 'static void'),
  \ dotnet#method('Begin(', 'class FrameworkElement containingObject)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkElement containingObject, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkElement containingObject, bool isControllable)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkElement containingObject, HandoffBehavior handoffBehavior, bool isControllable)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkElement containingObject, FrameworkTemplate frameworkTemplate)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkElement containingObject, FrameworkTemplate frameworkTemplate, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkElement containingObject, FrameworkTemplate frameworkTemplate, bool isControllable)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkElement containingObject, FrameworkTemplate frameworkTemplate, HandoffBehavior handoffBehavior, bool isControllable)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkContentElement containingObject)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkContentElement containingObject, HandoffBehavior handoffBehavior)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkContentElement containingObject, bool isControllable)', 'void'),
  \ dotnet#method('Begin(', 'class FrameworkContentElement containingObject, HandoffBehavior handoffBehavior, bool isControllable)', 'void'),
  \ dotnet#method('Begin(', ')', 'void'),
  \ dotnet#method('BeginCommon(', 'class DependencyObject containingObject, INameScope nameScope, HandoffBehavior handoffBehavior, bool isControllable, int64 layer)', 'void'),
  \ dotnet#method('GetCurrentGlobalSpeed(', 'class FrameworkElement containingObject)', 'Nullable'),
  \ dotnet#method('GetCurrentGlobalSpeed(', 'class FrameworkContentElement containingObject)', 'Nullable'),
  \ dotnet#method('GetCurrentGlobalSpeed(', ')', 'float64'),
  \ dotnet#method('GetCurrentIteration(', 'class FrameworkElement containingObject)', 'Nullable'),
  \ dotnet#method('GetCurrentIteration(', 'class FrameworkContentElement containingObject)', 'Nullable'),
  \ dotnet#method('GetCurrentIteration(', ')', 'int32'),
  \ dotnet#method('GetCurrentProgress(', 'class FrameworkElement containingObject)', 'Nullable'),
  \ dotnet#method('GetCurrentProgress(', 'class FrameworkContentElement containingObject)', 'Nullable'),
  \ dotnet#method('GetCurrentProgress(', ')', 'float64'),
  \ dotnet#method('GetCurrentState(', 'class FrameworkElement containingObject)', 'ClockState'),
  \ dotnet#method('GetCurrentState(', 'class FrameworkContentElement containingObject)', 'ClockState'),
  \ dotnet#method('GetCurrentState(', ')', 'ClockState'),
  \ dotnet#method('GetCurrentTime(', 'class FrameworkElement containingObject)', 'Nullable'),
  \ dotnet#method('GetCurrentTime(', 'class FrameworkContentElement containingObject)', 'Nullable'),
  \ dotnet#method('GetCurrentTime(', ')', 'TimeSpan'),
  \ dotnet#method('GetIsPaused(', 'class FrameworkElement containingObject)', 'bool'),
  \ dotnet#method('GetIsPaused(', 'class FrameworkContentElement containingObject)', 'bool'),
  \ dotnet#method('GetIsPaused(', ')', 'bool'),
  \ dotnet#method('Pause(', 'class FrameworkElement containingObject)', 'void'),
  \ dotnet#method('Pause(', 'class FrameworkContentElement containingObject)', 'void'),
  \ dotnet#method('Pause(', ')', 'void'),
  \ dotnet#method('Remove(', 'class FrameworkElement containingObject)', 'void'),
  \ dotnet#method('Remove(', 'class FrameworkContentElement containingObject)', 'void'),
  \ dotnet#method('Remove(', ')', 'void'),
  \ dotnet#method('Resume(', 'class FrameworkElement containingObject)', 'void'),
  \ dotnet#method('Resume(', 'class FrameworkContentElement containingObject)', 'void'),
  \ dotnet#method('Resume(', ')', 'void'),
  \ dotnet#method('Seek(', 'class FrameworkElement containingObject, TimeSpan offset, TimeSeekOrigin origin)', 'void'),
  \ dotnet#method('Seek(', 'class FrameworkContentElement containingObject, TimeSpan offset, TimeSeekOrigin origin)', 'void'),
  \ dotnet#method('Seek(', 'TimeSpan offset, TimeSeekOrigin origin)', 'void'),
  \ dotnet#method('Seek(', 'TimeSpan offset)', 'void'),
  \ dotnet#method('SeekAlignedToLastTick(', 'class FrameworkElement containingObject, TimeSpan offset, TimeSeekOrigin origin)', 'void'),
  \ dotnet#method('SeekAlignedToLastTick(', 'class FrameworkContentElement containingObject, TimeSpan offset, TimeSeekOrigin origin)', 'void'),
  \ dotnet#method('SeekAlignedToLastTick(', 'TimeSpan offset, TimeSeekOrigin origin)', 'void'),
  \ dotnet#method('SeekAlignedToLastTick(', 'TimeSpan offset)', 'void'),
  \ dotnet#method('SetSpeedRatio(', 'class FrameworkElement containingObject, float64 speedRatio)', 'void'),
  \ dotnet#method('SetSpeedRatio(', 'class FrameworkContentElement containingObject, float64 speedRatio)', 'void'),
  \ dotnet#method('SetSpeedRatio(', 'float64 speedRatio)', 'void'),
  \ dotnet#method('SkipToFill(', 'class FrameworkElement containingObject)', 'void'),
  \ dotnet#method('SkipToFill(', 'class FrameworkContentElement containingObject)', 'void'),
  \ dotnet#method('SkipToFill(', ')', 'void'),
  \ dotnet#method('Stop(', 'class FrameworkElement containingObject)', 'void'),
  \ dotnet#method('Stop(', 'class FrameworkContentElement containingObject)', 'void'),
  \ dotnet#method('Stop(', ')', 'void'),
  \ dotnet#method('Storyboard(', ')', 'static void .'),
  \ ])

call dotnet#class('ThicknessKeyFrame', 'Freezable', [ 
  \ dotnet#method('ThicknessKeyFrame(', ')', 'void'),
  \ dotnet#method('ThicknessKeyFrame(', 'Thickness value)', 'void'),
  \ dotnet#method('ThicknessKeyFrame(', 'Thickness value, KeyTime keyTime)', 'void'),
  \ dotnet#method('get_KeyTime(', ')', ''),
  \ dotnet#method('set_KeyTime(', 'KeyTime value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object '),
  \ dotnet#method('set_Value(', 'object value)', 'void '),
  \ dotnet#method('get_Value(', ')', 'Thickness'),
  \ dotnet#method('set_Value(', 'Thickness value)', 'void'),
  \ dotnet#method('InterpolateValue(', 'Thickness baseValue, float64 keyFrameProgress)', 'Thickness'),
  \ dotnet#method('InterpolateValueCore(', 'Thickness baseValue, float64 keyFrameProgress)', 'abstract'),
  \ dotnet#method('ThicknessKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeyTime', 'KeyTime'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('Value', 'Thickness'),
  \ ])

call dotnet#class('DiscreteThicknessKeyFrame', 'ThicknessKeyFrame', [ 
  \ dotnet#method('DiscreteThicknessKeyFrame(', ')', 'void'),
  \ dotnet#method('DiscreteThicknessKeyFrame(', 'Thickness value)', 'void'),
  \ dotnet#method('DiscreteThicknessKeyFrame(', 'Thickness value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Thickness baseValue, float64 keyFrameProgress)', 'Thickness'),
  \ ])

call dotnet#class('LinearThicknessKeyFrame', 'ThicknessKeyFrame', [ 
  \ dotnet#method('LinearThicknessKeyFrame(', ')', 'void'),
  \ dotnet#method('LinearThicknessKeyFrame(', 'Thickness value)', 'void'),
  \ dotnet#method('LinearThicknessKeyFrame(', 'Thickness value, KeyTime keyTime)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Thickness baseValue, float64 keyFrameProgress)', 'Thickness'),
  \ ])

call dotnet#class('SplineThicknessKeyFrame', 'ThicknessKeyFrame', [ 
  \ dotnet#method('SplineThicknessKeyFrame(', ')', 'void'),
  \ dotnet#method('SplineThicknessKeyFrame(', 'Thickness value)', 'void'),
  \ dotnet#method('SplineThicknessKeyFrame(', 'Thickness value, KeyTime keyTime)', 'void'),
  \ dotnet#method('SplineThicknessKeyFrame(', 'Thickness value, KeyTime keyTime, KeySpline keySpline)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Thickness baseValue, float64 keyFrameProgress)', 'Thickness'),
  \ dotnet#method('get_KeySpline(', ')', 'KeySpline'),
  \ dotnet#method('set_KeySpline(', 'class KeySpline value)', 'void'),
  \ dotnet#method('SplineThicknessKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('KeySpline', 'KeySpline'),
  \ ])

call dotnet#class('EasingThicknessKeyFrame', 'ThicknessKeyFrame', [ 
  \ dotnet#method('EasingThicknessKeyFrame(', ')', 'void'),
  \ dotnet#method('EasingThicknessKeyFrame(', 'Thickness value)', 'void'),
  \ dotnet#method('EasingThicknessKeyFrame(', 'Thickness value, KeyTime keyTime)', 'void'),
  \ dotnet#method('EasingThicknessKeyFrame(', 'Thickness value, KeyTime keyTime, IEasingFunction easingFunction)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('InterpolateValueCore(', 'Thickness baseValue, float64 keyFrameProgress)', 'Thickness'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('EasingThicknessKeyFrame(', ')', 'static void .'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ ])

call dotnet#class('ThicknessAnimationBase', 'AnimationTimeline', [ 
  \ dotnet#method('ThicknessAnimationBase(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ThicknessAnimationBase'),
  \ dotnet#method('GetCurrentValue(', 'object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)', 'object'),
  \ dotnet#method('get_TargetPropertyType(', ')', ''),
  \ dotnet#method('GetCurrentValue(', 'Thickness defaultOriginValue, Thickness defaultDestinationValue, AnimationClock animationClock)', 'Thickness'),
  \ dotnet#method('GetCurrentValueCore(', 'Thickness defaultOriginValue, Thickness defaultDestinationValue, AnimationClock animationClock)', 'abstract'),
  \ dotnet#prop('TargetPropertyType', 'Type'),
  \ ])

call dotnet#class('ThicknessAnimation', 'ThicknessAnimationBase', [ 
  \ dotnet#method('ThicknessAnimation(', ')', 'void'),
  \ dotnet#method('ThicknessAnimation(', 'Thickness toValue, Duration duration)', 'void'),
  \ dotnet#method('ThicknessAnimation(', 'Thickness toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('ThicknessAnimation(', 'Thickness fromValue, Thickness toValue, Duration duration)', 'void'),
  \ dotnet#method('ThicknessAnimation(', 'Thickness fromValue, Thickness toValue, Duration duration, FillBehavior fillBehavior)', 'void'),
  \ dotnet#method('Clone(', ')', 'ThicknessAnimation'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GetCurrentValueCore(', 'Thickness defaultOriginValue, Thickness defaultDestinationValue, AnimationClock animationClock)', 'Thickness'),
  \ dotnet#method('get_From(', ')', 'Nullable'),
  \ dotnet#method('set_From(', 'Nullable value)', 'void'),
  \ dotnet#method('get_To(', ')', 'Nullable'),
  \ dotnet#method('set_To(', 'Nullable value)', 'void'),
  \ dotnet#method('get_By(', ')', 'Nullable'),
  \ dotnet#method('set_By(', 'Nullable value)', 'void'),
  \ dotnet#method('get_EasingFunction(', ')', 'IEasingFunction'),
  \ dotnet#method('set_EasingFunction(', 'class IEasingFunction value)', 'void'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#method('ThicknessAnimation(', ')', 'static void .'),
  \ dotnet#prop('From', 'Nullable'),
  \ dotnet#prop('To', 'Nullable'),
  \ dotnet#prop('By', 'Nullable'),
  \ dotnet#prop('EasingFunction', 'IEasingFunction'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('ThicknessAnimationUsingKeyFrames', 'ThicknessAnimationBase', [ 
  \ dotnet#method('ThicknessAnimationUsingKeyFrames(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ThicknessAnimationUsingKeyFrames'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ThicknessAnimationUsingKeyFrames'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('AddChild(', 'object child)', 'void '),
  \ dotnet#method('AddChild(', 'object child)', 'void'),
  \ dotnet#method('AddText(', 'string childText)', 'void '),
  \ dotnet#method('AddText(', 'string childText)', 'void'),
  \ dotnet#method('GetCurrentValueCore(', 'Thickness defaultOriginValue, Thickness defaultDestinationValue, AnimationClock animationClock)', 'family'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'family'),
  \ dotnet#method('get_KeyFrames(', ')', ''),
  \ dotnet#method('set_KeyFrames(', 'class IList value)', 'void '),
  \ dotnet#method('get_KeyFrames(', ')', 'ThicknessKeyFrameCollection'),
  \ dotnet#method('set_KeyFrames(', 'class ThicknessKeyFrameCollection value)', 'void'),
  \ dotnet#method('ShouldSerializeKeyFrames(', ')', 'bool'),
  \ dotnet#method('get_IsAdditive(', ')', 'bool'),
  \ dotnet#method('set_IsAdditive(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCumulative(', ')', 'bool'),
  \ dotnet#method('set_IsCumulative(', 'bool value)', 'void'),
  \ dotnet#prop('KeyFrames', 'IList'),
  \ dotnet#prop('KeyFrames', 'ThicknessKeyFrameCollection'),
  \ dotnet#prop('IsAdditive', 'bool'),
  \ dotnet#prop('IsCumulative', 'bool'),
  \ ])

call dotnet#class('ThicknessKeyFrameCollection', 'Freezable', [ 
  \ dotnet#method('ThicknessKeyFrameCollection(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Clone(', ')', 'ThicknessKeyFrameCollection'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class ThicknessKeyFrame[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('Add(', 'class ThicknessKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object keyFrame)', 'bool '),
  \ dotnet#method('Contains(', 'class ThicknessKeyFrame keyFrame)', 'bool'),
  \ dotnet#method('IndexOf(', 'object keyFrame)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class ThicknessKeyFrame keyFrame)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object keyFrame)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, ThicknessKeyFrame keyFrame)', 'void'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Remove(', 'object keyFrame)', 'void '),
  \ dotnet#method('Remove(', 'class ThicknessKeyFrame keyFrame)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'ThicknessKeyFrame'),
  \ dotnet#method('set_Item(', 'int32 index, ThicknessKeyFrame value)', 'void'),
  \ dotnet#prop('Empty', 'ThicknessKeyFrameCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'ThicknessKeyFrame'),
  \ ])

