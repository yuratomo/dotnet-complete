call dotnet#namespace('System.Net.Security')

call dotnet#class('AuthenticatedStream', 'Stream', [ 
  \ dotnet#method('AuthenticatedStream(', 'class Stream innerStream, bool leaveInnerStreamOpen)', 'void'),
  \ dotnet#method('get_LeaveInnerStreamOpen(', ')', 'bool'),
  \ dotnet#method('get_InnerStream(', ')', 'Stream'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('get_IsAuthenticated(', ')', 'abstract bool'),
  \ dotnet#method('get_IsMutuallyAuthenticated(', ')', 'abstract bool'),
  \ dotnet#method('get_IsEncrypted(', ')', 'abstract bool'),
  \ dotnet#method('get_IsSigned(', ')', 'abstract bool'),
  \ dotnet#method('get_IsServer(', ')', 'abstract bool'),
  \ dotnet#prop('LeaveInnerStreamOpen', 'bool'),
  \ dotnet#prop('InnerStream', 'Stream'),
  \ dotnet#prop('IsAuthenticated', 'bool'),
  \ dotnet#prop('IsMutuallyAuthenticated', 'bool'),
  \ dotnet#prop('IsEncrypted', 'bool'),
  \ dotnet#prop('IsSigned', 'bool'),
  \ dotnet#prop('IsServer', 'bool'),
  \ ])

call dotnet#class('NegotiateStream', 'AuthenticatedStream', [ 
  \ dotnet#method('NegotiateStream(', 'class Stream innerStream)', 'void'),
  \ dotnet#method('NegotiateStream(', 'class Stream innerStream, bool leaveInnerStreamOpen)', 'void'),
  \ dotnet#method('AuthenticateAsClient(', ')', 'void'),
  \ dotnet#method('AuthenticateAsClient(', 'class NetworkCredential credential, string targetName)', 'void'),
  \ dotnet#method('AuthenticateAsClient(', 'class NetworkCredential credential, ChannelBinding binding, string targetName)', 'void'),
  \ dotnet#method('AuthenticateAsClient(', 'class NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel)', 'void'),
  \ dotnet#method('AuthenticateAsClient(', 'class NetworkCredential credential, ChannelBinding binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel)', 'void'),
  \ dotnet#method('BeginAuthenticateAsClient(', 'class AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('BeginAuthenticateAsClient(', 'class NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('BeginAuthenticateAsClient(', 'class NetworkCredential credential, ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('BeginAuthenticateAsClient(', 'class NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('BeginAuthenticateAsClient(', 'class NetworkCredential credential, ChannelBinding binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('EndAuthenticateAsClient(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('AuthenticateAsServer(', ')', 'void'),
  \ dotnet#method('AuthenticateAsServer(', 'class ExtendedProtectionPolicy policy)', 'void'),
  \ dotnet#method('AuthenticateAsServer(', 'class NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel)', 'void'),
  \ dotnet#method('AuthenticateAsServer(', 'class NetworkCredential credential, ExtendedProtectionPolicy policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel)', 'void'),
  \ dotnet#method('BeginAuthenticateAsServer(', 'class AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('BeginAuthenticateAsServer(', 'class ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('BeginAuthenticateAsServer(', 'class NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('BeginAuthenticateAsServer(', 'class NetworkCredential credential, ExtendedProtectionPolicy policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('EndAuthenticateAsServer(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('get_IsAuthenticated(', ')', 'bool'),
  \ dotnet#method('get_IsMutuallyAuthenticated(', ')', 'bool'),
  \ dotnet#method('get_IsEncrypted(', ')', 'bool'),
  \ dotnet#method('get_IsSigned(', ')', 'bool'),
  \ dotnet#method('get_IsServer(', ')', 'bool'),
  \ dotnet#method('get_ImpersonationLevel(', ')', ''),
  \ dotnet#method('get_RemoteIdentity(', ')', ''),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanTimeout(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('get_ReadTimeout(', ')', 'int32'),
  \ dotnet#method('set_ReadTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_WriteTimeout(', ')', 'int32'),
  \ dotnet#method('set_WriteTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('SetLength(', 'int64 value)', 'void'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin origin)', 'int64'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Read(', 'uint8[] buffer, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('Write(', 'uint8[] buffer, int32 offset, int32 count)', 'void'),
  \ dotnet#method('BeginRead(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback asyncCallback, object asyncState)', 'IAsyncResult'),
  \ dotnet#method('EndRead(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('BeginWrite(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback asyncCallback, object asyncState)', 'IAsyncResult'),
  \ dotnet#method('EndWrite(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('NegotiateStream(', ')', 'static void .'),
  \ dotnet#prop('IsAuthenticated', 'bool'),
  \ dotnet#prop('IsMutuallyAuthenticated', 'bool'),
  \ dotnet#prop('IsEncrypted', 'bool'),
  \ dotnet#prop('IsSigned', 'bool'),
  \ dotnet#prop('IsServer', 'bool'),
  \ dotnet#prop('ImpersonationLevel', 'TokenImpersonationLevel'),
  \ dotnet#prop('RemoteIdentity', 'IIdentity'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanTimeout', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('ReadTimeout', 'int32'),
  \ dotnet#prop('WriteTimeout', 'int32'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ ])

call dotnet#class('RemoteCertificateValidationCallback', 'MulticastDelegate', [ 
  \ dotnet#method('RemoteCertificateValidationCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)', 'bool'),
  \ dotnet#method('BeginInvoke(', 'object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'bool'),
  \ ])

call dotnet#class('LocalCertificateSelectionCallback', 'MulticastDelegate', [ 
  \ dotnet#method('LocalCertificateSelectionCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers)', ''),
  \ dotnet#method('BeginInvoke(', 'object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('SslStream', 'AuthenticatedStream', [ 
  \ dotnet#method('SslStream(', 'class Stream innerStream)', 'void'),
  \ dotnet#method('SslStream(', 'class Stream innerStream, bool leaveInnerStreamOpen)', 'void'),
  \ dotnet#method('SslStream(', 'class Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback)', 'void'),
  \ dotnet#method('SslStream(', 'class Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback, LocalCertificateSelectionCallback userCertificateSelectionCallback)', 'void'),
  \ dotnet#method('SslStream(', 'class Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback, LocalCertificateSelectionCallback userCertificateSelectionCallback, EncryptionPolicy encryptionPolicy)', 'void'),
  \ dotnet#method('AuthenticateAsClient(', 'string targetHost)', 'void'),
  \ dotnet#method('AuthenticateAsClient(', 'string targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, bool checkCertificateRevocation)', 'void'),
  \ dotnet#method('BeginAuthenticateAsClient(', 'string targetHost, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('BeginAuthenticateAsClient(', 'string targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('EndAuthenticateAsClient(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('AuthenticateAsServer(', 'class X509Certificate serverCertificate)', 'void'),
  \ dotnet#method('AuthenticateAsServer(', 'class X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols enabledSslProtocols, bool checkCertificateRevocation)', 'void'),
  \ dotnet#method('BeginAuthenticateAsServer(', 'class X509Certificate serverCertificate, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('BeginAuthenticateAsServer(', 'class X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState)', ''),
  \ dotnet#method('EndAuthenticateAsServer(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#method('get_TransportContext(', ')', 'TransportContext'),
  \ dotnet#method('get_IsAuthenticated(', ')', 'bool'),
  \ dotnet#method('get_IsMutuallyAuthenticated(', ')', 'bool'),
  \ dotnet#method('get_IsEncrypted(', ')', 'bool'),
  \ dotnet#method('get_IsSigned(', ')', 'bool'),
  \ dotnet#method('get_IsServer(', ')', 'bool'),
  \ dotnet#method('get_SslProtocol(', ')', ''),
  \ dotnet#method('get_CheckCertRevocationStatus(', ')', 'bool'),
  \ dotnet#method('get_LocalCertificate(', ')', ''),
  \ dotnet#method('get_RemoteCertificate(', ')', ''),
  \ dotnet#method('get_CipherAlgorithm(', ')', ''),
  \ dotnet#method('get_CipherStrength(', ')', 'int32'),
  \ dotnet#method('get_HashAlgorithm(', ')', ''),
  \ dotnet#method('get_HashStrength(', ')', 'int32'),
  \ dotnet#method('get_KeyExchangeAlgorithm(', ')', ''),
  \ dotnet#method('get_KeyExchangeStrength(', ')', 'int32'),
  \ dotnet#method('get_CanSeek(', ')', 'bool'),
  \ dotnet#method('get_CanRead(', ')', 'bool'),
  \ dotnet#method('get_CanTimeout(', ')', 'bool'),
  \ dotnet#method('get_CanWrite(', ')', 'bool'),
  \ dotnet#method('get_ReadTimeout(', ')', 'int32'),
  \ dotnet#method('set_ReadTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_WriteTimeout(', ')', 'int32'),
  \ dotnet#method('set_WriteTimeout(', 'int32 value)', 'void'),
  \ dotnet#method('get_Length(', ')', 'int64'),
  \ dotnet#method('get_Position(', ')', 'int64'),
  \ dotnet#method('set_Position(', 'int64 value)', 'void'),
  \ dotnet#method('SetLength(', 'int64 value)', 'void'),
  \ dotnet#method('Seek(', 'int64 offset, SeekOrigin origin)', 'int64'),
  \ dotnet#method('Flush(', ')', 'void'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('Read(', 'uint8[] buffer, int32 offset, int32 count)', 'int32'),
  \ dotnet#method('Write(', 'uint8[] buffer)', 'void'),
  \ dotnet#method('Write(', 'uint8[] buffer, int32 offset, int32 count)', 'void'),
  \ dotnet#method('BeginRead(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback asyncCallback, object asyncState)', 'IAsyncResult'),
  \ dotnet#method('EndRead(', 'class IAsyncResult asyncResult)', 'int32'),
  \ dotnet#method('BeginWrite(', 'uint8[] buffer, int32 offset, int32 count, AsyncCallback asyncCallback, object asyncState)', 'IAsyncResult'),
  \ dotnet#method('EndWrite(', 'class IAsyncResult asyncResult)', 'void'),
  \ dotnet#prop('TransportContext', 'TransportContext'),
  \ dotnet#prop('IsAuthenticated', 'bool'),
  \ dotnet#prop('IsMutuallyAuthenticated', 'bool'),
  \ dotnet#prop('IsEncrypted', 'bool'),
  \ dotnet#prop('IsSigned', 'bool'),
  \ dotnet#prop('IsServer', 'bool'),
  \ dotnet#prop('SslProtocol', 'SslProtocols'),
  \ dotnet#prop('CheckCertRevocationStatus', 'bool'),
  \ dotnet#prop('LocalCertificate', 'X509Certificate'),
  \ dotnet#prop('RemoteCertificate', 'X509Certificate'),
  \ dotnet#prop('CipherAlgorithm', 'CipherAlgorithmType'),
  \ dotnet#prop('CipherStrength', 'int32'),
  \ dotnet#prop('HashAlgorithm', 'HashAlgorithmType'),
  \ dotnet#prop('HashStrength', 'int32'),
  \ dotnet#prop('KeyExchangeAlgorithm', 'ExchangeAlgorithmType'),
  \ dotnet#prop('KeyExchangeStrength', 'int32'),
  \ dotnet#prop('CanSeek', 'bool'),
  \ dotnet#prop('CanRead', 'bool'),
  \ dotnet#prop('CanTimeout', 'bool'),
  \ dotnet#prop('CanWrite', 'bool'),
  \ dotnet#prop('ReadTimeout', 'int32'),
  \ dotnet#prop('WriteTimeout', 'int32'),
  \ dotnet#prop('Length', 'int64'),
  \ dotnet#prop('Position', 'int64'),
  \ ])

