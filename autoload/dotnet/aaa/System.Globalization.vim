call dotnet#namespace('System.Globalization')

call dotnet#class('Calendar', 'Object', [ 
  \ dotnet#field('m_currentEraValue', 'int32'),
  \ dotnet#field('twoDigitYearMax', 'int32'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('Calendar(', ')', 'void'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('get_BaseCalendarID(', ')', 'strict int32'),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('ReadOnly(', 'class Calendar calendar)', 'static Calendar'),
  \ dotnet#method('VerifyWritable(', ')', 'void'),
  \ dotnet#method('SetReadOnlyState(', 'bool readOnly)', 'void'),
  \ dotnet#method('get_CurrentEraValue(', ')', 'strict int32'),
  \ dotnet#method('CheckAddResult(', 'int64 ticks, DateTime minValue, DateTime maxValue)', 'static void'),
  \ dotnet#method('Add(', 'DateTime time, float64 value, int32 scale)', 'DateTime'),
  \ dotnet#method('AddMilliseconds(', 'DateTime time, float64 milliseconds)', ''),
  \ dotnet#method('AddDays(', 'DateTime time, int32 days)', ''),
  \ dotnet#method('AddHours(', 'DateTime time, int32 hours)', ''),
  \ dotnet#method('AddMinutes(', 'DateTime time, int32 minutes)', ''),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'abstract'),
  \ dotnet#method('AddSeconds(', 'DateTime time, int32 seconds)', ''),
  \ dotnet#method('AddWeeks(', 'DateTime time, int32 weeks)', ''),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'abstract'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'abstract int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'abstract'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'abstract int32'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month)', 'int32'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'abstract int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'abstract int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'abstract int32'),
  \ dotnet#method('get_Eras(', ')', 'abstract int32[]'),
  \ dotnet#method('GetHour(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMilliseconds(', 'DateTime time)', 'float64'),
  \ dotnet#method('GetMinute(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'abstract int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'abstract int32'),
  \ dotnet#method('GetSecond(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetFirstDayWeekOfYear(', 'DateTime time, int32 firstDayOfWeek)', 'int32'),
  \ dotnet#method('GetWeekOfYearFullDays(', 'DateTime time, CalendarWeekRule rule, int32 firstDayOfWeek, int32 fullDays)', 'int32'),
  \ dotnet#method('GetWeekOfYear(', 'DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'abstract int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day)', 'bool'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'abstract bool'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month)', 'bool'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'abstract bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year)', 'int32'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapYear(', 'int32 year)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'abstract bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond)', ''),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'abstract'),
  \ dotnet#method('TryToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era, [out] DateTime& result)', 'strict bool'),
  \ dotnet#method('IsValidYear(', 'int32 year, int32 era)', 'strict bool'),
  \ dotnet#method('IsValidMonth(', 'int32 year, int32 month, int32 era)', 'strict bool'),
  \ dotnet#method('IsValidDay(', 'int32 year, int32 month, int32 day, int32 era)', 'strict bool'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('TimeToTicks(', 'int32 hour, int32 minute, int32 second, int32 millisecond)', 'static int64'),
  \ dotnet#method('GetSystemTwoDigitYearSetting(', 'int32 CalID, int32 defaultYearValue)', 'static int32'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('CurrentEraValue', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('CharUnicodeInfo', 'Object', [ 
  \ dotnet#field('TableName', 'char'),
  \ dotnet#field('version', 'uint16'),
  \ dotnet#field('OffsetToCategoriesIndex', 'uint32'),
  \ dotnet#field('OffsetToCategoriesValue', 'uint32'),
  \ dotnet#field('OffsetToNumbericIndex', 'uint32'),
  \ dotnet#field('OffsetToDigitValue', 'uint32'),
  \ dotnet#field('OffsetToNumbericValue', 'uint32'),
  \ dotnet#field('decimalDigit', 'int8'),
  \ dotnet#field('digit', 'int8'),
  \ dotnet#method('CharUnicodeInfo(', ')', 'static void .'),
  \ dotnet#method('InternalConvertToUtf32(', 'string s, int32 index)', 'static int32'),
  \ dotnet#method('InternalConvertToUtf32(', 'string s, int32 index, [out] int32& charLength)', 'static int32'),
  \ dotnet#method('IsWhiteSpace(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsWhiteSpace(', 'char c)', 'static bool'),
  \ dotnet#method('InternalGetNumericValue(', 'int32 ch)', 'static float64'),
  \ dotnet#method('InternalGetDigitValues(', 'int32 ch)', 'static CharUnicodeInfo/DigitValues*'),
  \ dotnet#method('InternalGetDecimalDigitValue(', 'int32 ch)', 'static int8'),
  \ dotnet#method('InternalGetDigitValue(', 'int32 ch)', 'static int8'),
  \ dotnet#method('GetNumericValue(', 'char ch)', 'static float64'),
  \ dotnet#method('GetNumericValue(', 'string s, int32 index)', 'static float64'),
  \ dotnet#method('GetDecimalDigitValue(', 'char ch)', 'static int32'),
  \ dotnet#method('GetDecimalDigitValue(', 'string s, int32 index)', 'static int32'),
  \ dotnet#method('GetDigitValue(', 'char ch)', 'static int32'),
  \ dotnet#method('GetDigitValue(', 'string s, int32 index)', 'static int32'),
  \ dotnet#method('GetUnicodeCategory(', 'char ch)', 'static UnicodeCategory'),
  \ dotnet#method('GetUnicodeCategory(', 'string s, int32 index)', 'static UnicodeCategory'),
  \ dotnet#method('InternalGetUnicodeCategory(', 'int32 ch)', 'static UnicodeCategory'),
  \ dotnet#method('InternalGetCategoryValue(', 'int32 ch, int32 offset)', 'static uint8'),
  \ dotnet#method('GetBidiCategory(', 'string s, int32 index)', 'static BidiCategory'),
  \ dotnet#method('InternalGetUnicodeCategory(', 'string value, int32 index)', 'static UnicodeCategory'),
  \ dotnet#method('InternalGetUnicodeCategory(', 'string str, int32 index, [out] int32& charLength)', 'static UnicodeCategory'),
  \ dotnet#method('IsCombiningCategory(', 'UnicodeCategory uc)', 'static bool'),
  \ ])

call dotnet#class('CompareInfo', 'Object', [ 
  \ dotnet#method('CompareInfo(', 'class CultureInfo culture)', 'void'),
  \ dotnet#method('GetCompareInfo(', 'int32 culture, Assembly assembly)', 'static CompareInfo'),
  \ dotnet#method('GetCompareInfo(', 'string name, Assembly assembly)', 'static CompareInfo'),
  \ dotnet#method('GetCompareInfo(', 'int32 culture)', 'static CompareInfo'),
  \ dotnet#method('GetCompareInfo(', 'string name)', 'static CompareInfo'),
  \ dotnet#method('IsSortable(', 'char ch)', 'static bool'),
  \ dotnet#method('IsSortable(', 'string text)', 'static bool'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('GetNativeCompareFlags(', 'CompareOptions options)', 'static int32'),
  \ dotnet#method('Compare(', 'string string1, string string2)', 'int32'),
  \ dotnet#method('Compare(', 'string string1, string string2, CompareOptions options)', 'int32'),
  \ dotnet#method('Compare(', 'string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2)', 'int32'),
  \ dotnet#method('Compare(', 'string string1, int32 offset1, string string2, int32 offset2, CompareOptions options)', 'int32'),
  \ dotnet#method('Compare(', 'string string1, int32 offset1, string string2, int32 offset2)', 'int32'),
  \ dotnet#method('Compare(', 'string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, CompareOptions options)', 'int32'),
  \ dotnet#method('IsPrefix(', 'string source, string prefix, CompareOptions options)', 'bool'),
  \ dotnet#method('IsPrefix(', 'string source, string prefix)', 'bool'),
  \ dotnet#method('IsSuffix(', 'string source, string suffix, CompareOptions options)', 'bool'),
  \ dotnet#method('IsSuffix(', 'string source, string suffix)', 'bool'),
  \ dotnet#method('IndexOf(', 'string source, char value)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, string value)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, char value, CompareOptions options)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, string value, CompareOptions options)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, char value, int32 startIndex)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, string value, int32 startIndex)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, char value, int32 startIndex, CompareOptions options)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, string value, int32 startIndex, CompareOptions options)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, char value, int32 startIndex, int32 count)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, string value, int32 startIndex, int32 count)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, char value, int32 startIndex, int32 count, CompareOptions options)', 'int32'),
  \ dotnet#method('IndexOf(', 'string source, string value, int32 startIndex, int32 count, CompareOptions options)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, char value)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, string value)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, char value, CompareOptions options)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, string value, CompareOptions options)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, char value, int32 startIndex)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, string value, int32 startIndex)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, char value, int32 startIndex, CompareOptions options)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, string value, int32 startIndex, CompareOptions options)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, char value, int32 startIndex, int32 count)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, string value, int32 startIndex, int32 count)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, char value, int32 startIndex, int32 count, CompareOptions options)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string source, string value, int32 startIndex, int32 count, CompareOptions options)', 'int32'),
  \ dotnet#method('GetSortKey(', 'string source, CompareOptions options)', ''),
  \ dotnet#method('GetSortKey(', 'string source)', ''),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetHashCodeOfString(', 'string source, CompareOptions options)', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_LCID(', ')', 'int32'),
  \ dotnet#method('InternalInitSortHandle(', 'string localeName)', 'static int'),
  \ dotnet#method('get_IsLegacy20SortingBehaviorRequested(', ')', 'static bool'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('LCID', 'int32'),
  \ dotnet#prop('IsLegacy20SortingBehaviorRequested', 'bool'),
  \ ])

call dotnet#class('CultureInfo', 'Object', [ 
  \ dotnet#field('m_isReadOnly', 'bool'),
  \ dotnet#field('compareInfo', 'CompareInfo'),
  \ dotnet#field('textInfo', 'TextInfo'),
  \ dotnet#field('regionInfo', 'RegionInfo'),
  \ dotnet#field('numInfo', 'NumberFormatInfo'),
  \ dotnet#field('dateTimeInfo', 'DateTimeFormatInfo'),
  \ dotnet#field('calendar', 'Calendar'),
  \ dotnet#field('m_dataItem', 'int32'),
  \ dotnet#field('cultureID', 'int32'),
  \ dotnet#field('m_cultureData', 'CultureData'),
  \ dotnet#field('m_isInherited', 'bool'),
  \ dotnet#field('m_name', 'string'),
  \ dotnet#method('CultureInfo(', 'string name)', 'void'),
  \ dotnet#method('CultureInfo(', 'string name, bool useUserOverride)', 'void'),
  \ dotnet#method('CultureInfo(', 'int32 culture)', 'void'),
  \ dotnet#method('CultureInfo(', 'int32 culture, bool useUserOverride)', 'void'),
  \ dotnet#method('CheckDomainSafetyObject(', 'object obj, object container)', 'static void'),
  \ dotnet#method('get_IsSafeCrossDomain(', ')', 'bool'),
  \ dotnet#method('get_CreatedDomainID(', ')', 'int32'),
  \ dotnet#method('CanSendCrossDomain(', ')', 'bool'),
  \ dotnet#method('StartCrossDomainTracking(', ')', 'void'),
  \ dotnet#method('CultureInfo(', 'string cultureName, string textAndCompareCultureName)', 'void'),
  \ dotnet#method('CreateSpecificCulture(', 'string name)', 'static CultureInfo'),
  \ dotnet#method('VerifyCultureName(', 'string cultureName, bool throwException)', 'static bool'),
  \ dotnet#method('VerifyCultureName(', 'class CultureInfo culture, bool throwException)', 'static bool'),
  \ dotnet#method('get_CurrentCulture(', ')', 'static'),
  \ dotnet#method('get_UserDefaultCulture(', ')', 'static'),
  \ dotnet#method('get_UserDefaultUICulture(', ')', 'static'),
  \ dotnet#method('get_CurrentUICulture(', ')', 'static'),
  \ dotnet#method('get_InstalledUICulture(', ')', 'static'),
  \ dotnet#method('get_InvariantCulture(', ')', 'static'),
  \ dotnet#method('get_Parent(', ')', ''),
  \ dotnet#method('get_LCID(', ')', 'int32'),
  \ dotnet#method('get_KeyboardLayoutId(', ')', 'int32'),
  \ dotnet#method('GetCultures(', 'CultureTypes types)', 'static CultureInfo[]'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_SortName(', ')', 'string'),
  \ dotnet#method('get_IetfLanguageTag(', ')', 'string'),
  \ dotnet#method('get_DisplayName(', ')', 'string'),
  \ dotnet#method('get_NativeName(', ')', 'string'),
  \ dotnet#method('get_EnglishName(', ')', 'string'),
  \ dotnet#method('get_TwoLetterISOLanguageName(', ')', 'string'),
  \ dotnet#method('get_ThreeLetterISOLanguageName(', ')', 'string'),
  \ dotnet#method('get_ThreeLetterWindowsLanguageName(', ')', 'string'),
  \ dotnet#method('get_CompareInfo(', ')', ''),
  \ dotnet#method('get_TextInfo(', ')', ''),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetFormat(', 'class Type formatType)', 'object'),
  \ dotnet#method('get_IsNeutralCulture(', ')', 'bool'),
  \ dotnet#method('get_CultureTypes(', ')', 'CultureTypes'),
  \ dotnet#method('get_NumberFormat(', ')', ''),
  \ dotnet#method('set_NumberFormat(', 'class NumberFormatInfo value)', 'void'),
  \ dotnet#method('get_DateTimeFormat(', ')', ''),
  \ dotnet#method('set_DateTimeFormat(', 'class DateTimeFormatInfo value)', 'void'),
  \ dotnet#method('ClearCachedData(', ')', 'void'),
  \ dotnet#method('GetCalendarInstance(', 'int32 calType)', 'static Calendar'),
  \ dotnet#method('GetCalendarInstanceRare(', 'int32 calType)', 'static Calendar'),
  \ dotnet#method('get_Calendar(', ')', ''),
  \ dotnet#method('get_OptionalCalendars(', ')', ''),
  \ dotnet#method('get_UseUserOverride(', ')', 'bool'),
  \ dotnet#method('GetConsoleFallbackUICulture(', ')', 'CultureInfo'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('ReadOnly(', 'class CultureInfo ci)', 'static CultureInfo'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_HasInvariantCultureName(', ')', 'bool'),
  \ dotnet#method('GetCultureInfoHelper(', 'int32 lcid, string name, string altName)', 'static CultureInfo'),
  \ dotnet#method('GetCultureInfo(', 'int32 culture)', 'static CultureInfo'),
  \ dotnet#method('GetCultureInfo(', 'string name)', 'static CultureInfo'),
  \ dotnet#method('GetCultureInfo(', 'string name, string altName)', 'static CultureInfo'),
  \ dotnet#method('GetCultureInfoByIetfLanguageTag(', 'string name)', 'static CultureInfo'),
  \ dotnet#method('get_IsTaiwanSku(', ')', 'static bool'),
  \ dotnet#method('nativeGetLocaleInfoEx(', 'string localeName, uint32 field) internalcall', 'static string'),
  \ dotnet#method('nativeGetLocaleInfoExInt(', 'string localeName, uint32 field) internalcall', 'static int32'),
  \ dotnet#method('nativeSetThreadLocale(', 'string localeName) internalcall', 'static bool'),
  \ dotnet#method('CultureInfo(', ')', 'static void .'),
  \ dotnet#prop('IsSafeCrossDomain', 'bool'),
  \ dotnet#prop('CreatedDomainID', 'int32'),
  \ dotnet#prop('CurrentCulture', 'CultureInfo'),
  \ dotnet#prop('UserDefaultCulture', 'CultureInfo'),
  \ dotnet#prop('UserDefaultUICulture', 'CultureInfo'),
  \ dotnet#prop('CurrentUICulture', 'CultureInfo'),
  \ dotnet#prop('InstalledUICulture', 'CultureInfo'),
  \ dotnet#prop('InvariantCulture', 'CultureInfo'),
  \ dotnet#prop('Parent', 'CultureInfo'),
  \ dotnet#prop('LCID', 'int32'),
  \ dotnet#prop('KeyboardLayoutId', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('SortName', 'string'),
  \ dotnet#prop('IetfLanguageTag', 'string'),
  \ dotnet#prop('DisplayName', 'string'),
  \ dotnet#prop('NativeName', 'string'),
  \ dotnet#prop('EnglishName', 'string'),
  \ dotnet#prop('TwoLetterISOLanguageName', 'string'),
  \ dotnet#prop('ThreeLetterISOLanguageName', 'string'),
  \ dotnet#prop('ThreeLetterWindowsLanguageName', 'string'),
  \ dotnet#prop('CompareInfo', 'CompareInfo'),
  \ dotnet#prop('TextInfo', 'TextInfo'),
  \ dotnet#prop('IsNeutralCulture', 'bool'),
  \ dotnet#prop('CultureTypes', 'CultureTypes'),
  \ dotnet#prop('NumberFormat', 'NumberFormatInfo'),
  \ dotnet#prop('DateTimeFormat', 'DateTimeFormatInfo'),
  \ dotnet#prop('Calendar', 'Calendar'),
  \ dotnet#prop('OptionalCalendars', 'Calendar[]'),
  \ dotnet#prop('UseUserOverride', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('HasInvariantCultureName', 'bool'),
  \ dotnet#prop('IsTaiwanSku', 'bool'),
  \ ])

call dotnet#class('CultureNotFoundException', 'ArgumentException', [ 
  \ dotnet#method('CultureNotFoundException(', ')', 'void'),
  \ dotnet#method('CultureNotFoundException(', 'string message)', 'void'),
  \ dotnet#method('CultureNotFoundException(', 'string paramName, string message)', 'void'),
  \ dotnet#method('CultureNotFoundException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('CultureNotFoundException(', 'string paramName, int32 invalidCultureId, string message)', 'void'),
  \ dotnet#method('CultureNotFoundException(', 'string message, int32 invalidCultureId, Exception innerException)', 'void'),
  \ dotnet#method('CultureNotFoundException(', 'string paramName, string invalidCultureName, string message)', 'void'),
  \ dotnet#method('CultureNotFoundException(', 'string message, string invalidCultureName, Exception innerException)', 'void'),
  \ dotnet#method('CultureNotFoundException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_InvalidCultureId(', ')', ''),
  \ dotnet#method('get_InvalidCultureName(', ')', 'string'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#prop('InvalidCultureId', 'Nullable'),
  \ dotnet#prop('InvalidCultureName', 'string'),
  \ dotnet#prop('Message', 'string'),
  \ ])

call dotnet#class('DateTimeFormatInfo', 'Object', [ 
  \ dotnet#field('m_name', 'string'),
  \ dotnet#field('amDesignator', 'string'),
  \ dotnet#field('pmDesignator', 'string'),
  \ dotnet#field('dateSeparator', 'string'),
  \ dotnet#field('generalShortTimePattern', 'string'),
  \ dotnet#field('generalLongTimePattern', 'string'),
  \ dotnet#field('timeSeparator', 'string'),
  \ dotnet#field('monthDayPattern', 'string'),
  \ dotnet#field('dateTimeOffsetPattern', 'string'),
  \ dotnet#field('calendar', 'Calendar'),
  \ dotnet#field('firstDayOfWeek', 'int32'),
  \ dotnet#field('calendarWeekRule', 'int32'),
  \ dotnet#field('fullDateTimePattern', 'string'),
  \ dotnet#field('abbreviatedDayNames', 'string[]'),
  \ dotnet#field('m_superShortDayNames', 'string[]'),
  \ dotnet#field('dayNames', 'string[]'),
  \ dotnet#field('abbreviatedMonthNames', 'string[]'),
  \ dotnet#field('monthNames', 'string[]'),
  \ dotnet#field('genitiveMonthNames', 'string[]'),
  \ dotnet#field('m_genitiveAbbreviatedMonthNames', 'string[]'),
  \ dotnet#field('leapYearMonthNames', 'string[]'),
  \ dotnet#field('longDatePattern', 'string'),
  \ dotnet#field('shortDatePattern', 'string'),
  \ dotnet#field('yearMonthPattern', 'string'),
  \ dotnet#field('longTimePattern', 'string'),
  \ dotnet#field('shortTimePattern', 'string'),
  \ dotnet#field('allShortDatePatterns', 'string[]'),
  \ dotnet#field('allLongDatePatterns', 'string[]'),
  \ dotnet#field('allShortTimePatterns', 'string[]'),
  \ dotnet#field('allLongTimePatterns', 'string[]'),
  \ dotnet#field('m_eraNames', 'string[]'),
  \ dotnet#field('m_abbrevEraNames', 'string[]'),
  \ dotnet#field('m_abbrevEnglishEraNames', 'string[]'),
  \ dotnet#field('optionalCalendars', 'int32[]'),
  \ dotnet#field('m_isReadOnly', 'bool'),
  \ dotnet#field('formatFlags', 'DateTimeFormatFlags'),
  \ dotnet#field('m_isDefaultCalendar', 'bool'),
  \ dotnet#field('m_dateWords', 'string[]'),
  \ dotnet#method('DateTimeFormatInfo(', ')', 'void'),
  \ dotnet#method('DateTimeFormatInfo(', 'class CultureData cultureData, Calendar cal)', 'void'),
  \ dotnet#method('get_InvariantInfo(', ')', 'static'),
  \ dotnet#method('get_CurrentInfo(', ')', 'static'),
  \ dotnet#method('GetInstance(', 'class IFormatProvider provider)', 'static DateTimeFormatInfo'),
  \ dotnet#method('GetFormat(', 'class Type formatType)', 'object'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('get_AMDesignator(', ')', 'string'),
  \ dotnet#method('set_AMDesignator(', 'string value)', 'void'),
  \ dotnet#method('get_Calendar(', ')', 'Calendar'),
  \ dotnet#method('set_Calendar(', 'class Calendar value)', 'void'),
  \ dotnet#method('GetEra(', 'string eraName)', 'int32'),
  \ dotnet#method('get_EraNames(', ')', 'string[]'),
  \ dotnet#method('GetEraName(', 'int32 era)', 'string'),
  \ dotnet#method('get_AbbreviatedEraNames(', ')', 'string[]'),
  \ dotnet#method('GetAbbreviatedEraName(', 'int32 era)', 'string'),
  \ dotnet#method('get_AbbreviatedEnglishEraNames(', ')', 'string[]'),
  \ dotnet#method('get_DateSeparator(', ')', 'string'),
  \ dotnet#method('set_DateSeparator(', 'string value)', 'void'),
  \ dotnet#method('get_FirstDayOfWeek(', ')', 'DayOfWeek'),
  \ dotnet#method('set_FirstDayOfWeek(', 'DayOfWeek value)', 'void'),
  \ dotnet#method('get_CalendarWeekRule(', ')', 'CalendarWeekRule'),
  \ dotnet#method('set_CalendarWeekRule(', 'CalendarWeekRule value)', 'void'),
  \ dotnet#method('get_FullDateTimePattern(', ')', 'string'),
  \ dotnet#method('set_FullDateTimePattern(', 'string value)', 'void'),
  \ dotnet#method('get_LongDatePattern(', ')', 'string'),
  \ dotnet#method('set_LongDatePattern(', 'string value)', 'void'),
  \ dotnet#method('get_LongTimePattern(', ')', 'string'),
  \ dotnet#method('set_LongTimePattern(', 'string value)', 'void'),
  \ dotnet#method('get_MonthDayPattern(', ')', 'string'),
  \ dotnet#method('set_MonthDayPattern(', 'string value)', 'void'),
  \ dotnet#method('get_PMDesignator(', ')', 'string'),
  \ dotnet#method('set_PMDesignator(', 'string value)', 'void'),
  \ dotnet#method('get_RFC1123Pattern(', ')', 'string'),
  \ dotnet#method('get_ShortDatePattern(', ')', 'string'),
  \ dotnet#method('set_ShortDatePattern(', 'string value)', 'void'),
  \ dotnet#method('get_ShortTimePattern(', ')', 'string'),
  \ dotnet#method('set_ShortTimePattern(', 'string value)', 'void'),
  \ dotnet#method('get_SortableDateTimePattern(', ')', 'string'),
  \ dotnet#method('get_GeneralShortTimePattern(', ')', 'string'),
  \ dotnet#method('get_GeneralLongTimePattern(', ')', 'string'),
  \ dotnet#method('get_DateTimeOffsetPattern(', ')', 'string'),
  \ dotnet#method('get_TimeSeparator(', ')', 'string'),
  \ dotnet#method('set_TimeSeparator(', 'string value)', 'void'),
  \ dotnet#method('get_UniversalSortableDateTimePattern(', ')', 'string'),
  \ dotnet#method('get_YearMonthPattern(', ')', 'string'),
  \ dotnet#method('set_YearMonthPattern(', 'string value)', 'void'),
  \ dotnet#method('get_AbbreviatedDayNames(', ')', 'string[]'),
  \ dotnet#method('set_AbbreviatedDayNames(', 'string[] value)', 'void'),
  \ dotnet#method('get_ShortestDayNames(', ')', 'string[]'),
  \ dotnet#method('set_ShortestDayNames(', 'string[] value)', 'void'),
  \ dotnet#method('get_DayNames(', ')', 'string[]'),
  \ dotnet#method('set_DayNames(', 'string[] value)', 'void'),
  \ dotnet#method('get_AbbreviatedMonthNames(', ')', 'string[]'),
  \ dotnet#method('set_AbbreviatedMonthNames(', 'string[] value)', 'void'),
  \ dotnet#method('get_MonthNames(', ')', 'string[]'),
  \ dotnet#method('set_MonthNames(', 'string[] value)', 'void'),
  \ dotnet#method('get_HasSpacesInMonthNames(', ')', 'bool'),
  \ dotnet#method('get_HasSpacesInDayNames(', ')', 'bool'),
  \ dotnet#method('internalGetMonthName(', 'int32 month, MonthNameStyles style, bool abbreviated)', 'string'),
  \ dotnet#method('internalGetLeapYearMonthNames(', ')', 'string[]'),
  \ dotnet#method('GetAbbreviatedDayName(', 'DayOfWeek dayofweek)', 'string'),
  \ dotnet#method('GetShortestDayName(', 'DayOfWeek dayOfWeek)', 'string'),
  \ dotnet#method('GetAllDateTimePatterns(', ')', 'string[]'),
  \ dotnet#method('GetAllDateTimePatterns(', 'char format)', 'string[]'),
  \ dotnet#method('GetDayName(', 'DayOfWeek dayofweek)', 'string'),
  \ dotnet#method('GetAbbreviatedMonthName(', 'int32 month)', 'string'),
  \ dotnet#method('GetMonthName(', 'int32 month)', 'string'),
  \ dotnet#method('ReadOnly(', 'class DateTimeFormatInfo dtfi)', 'static DateTimeFormatInfo'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_NativeCalendarName(', ')', 'string'),
  \ dotnet#method('SetAllDateTimePatterns(', 'string[] patterns, char format)', 'void'),
  \ dotnet#method('get_AbbreviatedMonthGenitiveNames(', ')', 'string[]'),
  \ dotnet#method('set_AbbreviatedMonthGenitiveNames(', 'string[] value)', 'void'),
  \ dotnet#method('get_MonthGenitiveNames(', ')', 'string[]'),
  \ dotnet#method('set_MonthGenitiveNames(', 'string[] value)', 'void'),
  \ dotnet#method('get_FullTimeSpanPositivePattern(', ')', 'string'),
  \ dotnet#method('get_FullTimeSpanNegativePattern(', ')', 'string'),
  \ dotnet#method('get_CompareInfo(', ')', '.method'),
  \ dotnet#method('ValidateStyles(', 'DateTimeStyles style, string parameterName)', 'static void'),
  \ dotnet#method('get_FormatFlags(', ')', '.method'),
  \ dotnet#method('get_HasForceTwoDigitYears(', ')', 'bool'),
  \ dotnet#method('get_HasYearMonthAdjustment(', ')', 'bool'),
  \ dotnet#method('YearMonthAdjustment(', 'int32& year, int32& month, bool parsedMonthName)', 'bool'),
  \ dotnet#method('GetJapaneseCalendarDTFI(', ')', 'static DateTimeFormatInfo'),
  \ dotnet#method('GetTaiwanCalendarDTFI(', ')', 'static DateTimeFormatInfo'),
  \ dotnet#method('CreateTokenHashTable(', ')', 'TokenHashValue[]'),
  \ dotnet#method('Tokenize(', 'TokenType TokenMask, [out] TokenType& tokenType, [out] int32& tokenValue, __DTString& str)', 'bool'),
  \ dotnet#method('DateTimeFormatInfo(', ')', 'static void .'),
  \ dotnet#prop('InvariantInfo', 'DateTimeFormatInfo'),
  \ dotnet#prop('CurrentInfo', 'DateTimeFormatInfo'),
  \ dotnet#prop('AMDesignator', 'string'),
  \ dotnet#prop('Calendar', 'Calendar'),
  \ dotnet#prop('EraNames', 'string[]'),
  \ dotnet#prop('AbbreviatedEraNames', 'string[]'),
  \ dotnet#prop('AbbreviatedEnglishEraNames', 'string[]'),
  \ dotnet#prop('DateSeparator', 'string'),
  \ dotnet#prop('FirstDayOfWeek', 'DayOfWeek'),
  \ dotnet#prop('CalendarWeekRule', 'CalendarWeekRule'),
  \ dotnet#prop('FullDateTimePattern', 'string'),
  \ dotnet#prop('LongDatePattern', 'string'),
  \ dotnet#prop('LongTimePattern', 'string'),
  \ dotnet#prop('MonthDayPattern', 'string'),
  \ dotnet#prop('PMDesignator', 'string'),
  \ dotnet#prop('RFC1123Pattern', 'string'),
  \ dotnet#prop('ShortDatePattern', 'string'),
  \ dotnet#prop('ShortTimePattern', 'string'),
  \ dotnet#prop('SortableDateTimePattern', 'string'),
  \ dotnet#prop('GeneralShortTimePattern', 'string'),
  \ dotnet#prop('GeneralLongTimePattern', 'string'),
  \ dotnet#prop('DateTimeOffsetPattern', 'string'),
  \ dotnet#prop('TimeSeparator', 'string'),
  \ dotnet#prop('UniversalSortableDateTimePattern', 'string'),
  \ dotnet#prop('YearMonthPattern', 'string'),
  \ dotnet#prop('AbbreviatedDayNames', 'string[]'),
  \ dotnet#prop('ShortestDayNames', 'string[]'),
  \ dotnet#prop('DayNames', 'string[]'),
  \ dotnet#prop('AbbreviatedMonthNames', 'string[]'),
  \ dotnet#prop('MonthNames', 'string[]'),
  \ dotnet#prop('HasSpacesInMonthNames', 'bool'),
  \ dotnet#prop('HasSpacesInDayNames', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('NativeCalendarName', 'string'),
  \ dotnet#prop('AbbreviatedMonthGenitiveNames', 'string[]'),
  \ dotnet#prop('MonthGenitiveNames', 'string[]'),
  \ dotnet#prop('FullTimeSpanPositivePattern', 'string'),
  \ dotnet#prop('FullTimeSpanNegativePattern', 'string'),
  \ dotnet#prop('CompareInfo', 'CompareInfo'),
  \ dotnet#prop('FormatFlags', 'DateTimeFormatFlags'),
  \ dotnet#prop('HasForceTwoDigitYears', 'bool'),
  \ dotnet#prop('HasYearMonthAdjustment', 'bool'),
  \ ])

call dotnet#class('DaylightTime', 'Object', [ 
  \ dotnet#field('m_start', 'DateTime'),
  \ dotnet#field('m_end', 'DateTime'),
  \ dotnet#field('m_delta', 'TimeSpan'),
  \ dotnet#method('DaylightTime(', ')', 'void'),
  \ dotnet#method('DaylightTime(', 'DateTime start, DateTime end, TimeSpan delta)', 'void'),
  \ dotnet#method('get_Start(', ')', 'DateTime'),
  \ dotnet#method('get_End(', ')', 'DateTime'),
  \ dotnet#method('get_Delta(', ')', 'TimeSpan'),
  \ dotnet#prop('Start', 'DateTime'),
  \ dotnet#prop('End', 'DateTime'),
  \ dotnet#prop('Delta', 'TimeSpan'),
  \ ])

call dotnet#class('GregorianCalendar', 'Calendar', [ 
  \ dotnet#field('m_type', 'GregorianCalendarTypes'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('GetDefaultInstance(', ')', 'static Calendar'),
  \ dotnet#method('GregorianCalendar(', ')', 'void'),
  \ dotnet#method('GregorianCalendar(', 'GregorianCalendarTypes type)', 'void'),
  \ dotnet#method('get_CalendarType(', ')', ''),
  \ dotnet#method('set_CalendarType(', 'GregorianCalendarTypes value)', 'void'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('GetDatePart(', 'int64 ticks, int32 part)', 'strict int32'),
  \ dotnet#method('GetAbsoluteDate(', 'int32 year, int32 month, int32 day)', 'static int64'),
  \ dotnet#method('DateToTicks(', 'int32 year, int32 month, int32 day)', 'strict int64'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetWeekOfYear(', 'DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)', 'int32'),
  \ dotnet#method('InternalGetWeekOfYearFullDays(', 'class Calendar cal, DateTime time, int32 firstDayOfWeek, int32 fullDays, int32 daysOfMinYearMinusOne)', 'static int32'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('TryToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era, [out] DateTime& result)', 'strict bool'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('GregorianCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('CalendarType', 'GregorianCalendarTypes'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('HebrewCalendar', 'Calendar', [ 
  \ dotnet#field('year', 'int32'),
  \ dotnet#field('month', 'int32'),
  \ dotnet#field('day', 'int32'),
  \ dotnet#method('HebrewCalendar(', ')', 'void'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('HebrewCalendar(', ')', 'void'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('CheckEraRange(', 'int32 era)', 'static void'),
  \ dotnet#method('GetResult(', 'class HebrewCalendar/__DateBuffer result, int32 part)', 'static int32'),
  \ dotnet#method('GetLunarMonthDay(', 'int32 gregorianYear, HebrewCalendar/__DateBuffer lunarDate)', 'static int32'),
  \ dotnet#method('GetDatePart(', 'int64 ticks, int32 part)', 'strict int32'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetHebrewYearType(', 'int32 year, int32 era)', 'static int32'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('HebrewCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('HijriCalendar', 'Calendar', [ 
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('HijriCalendar(', ')', 'void'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('get_HijriAdjustment(', ')', 'int32'),
  \ dotnet#method('set_HijriAdjustment(', 'int32 value)', 'void'),
  \ dotnet#method('CheckTicksRange(', 'int64 ticks)', 'static void'),
  \ dotnet#method('CheckEraRange(', 'int32 era)', 'static void'),
  \ dotnet#method('CheckYearRange(', 'int32 year, int32 era)', 'static void'),
  \ dotnet#method('CheckYearMonthRange(', 'int32 year, int32 month, int32 era)', 'static void'),
  \ dotnet#method('GetDatePart(', 'int64 ticks, int32 part)', 'strict int32'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('HijriCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('HijriAdjustment', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('UmAlQuraCalendar', 'Calendar', [ 
  \ dotnet#field('HijriMonthsLengthFlags', 'int32'),
  \ dotnet#field('GregorianDate', 'DateTime'),
  \ dotnet#method('UmAlQuraCalendar(', 'int32 MonthsLengthFlags, int32 GYear, int32 GMonth, int32 GDay)', 'void'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('UmAlQuraCalendar(', ')', 'void'),
  \ dotnet#method('get_BaseCalendarID(', ')', 'strict int32'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('CheckTicksRange(', 'int64 ticks)', 'static void'),
  \ dotnet#method('CheckEraRange(', 'int32 era)', 'static void'),
  \ dotnet#method('CheckYearRange(', 'int32 year, int32 era)', 'static void'),
  \ dotnet#method('CheckYearMonthRange(', 'int32 year, int32 month, int32 era)', 'static void'),
  \ dotnet#method('GetDatePart(', 'DateTime time, int32 part)', 'strict int32'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('RealGetDaysInYear(', 'int32 year)', 'static int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('UmAlQuraCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('EastAsianLunisolarCalendar', 'Calendar', [ 
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('GetSexagenaryYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetCelestialStem(', 'int32 sexagenaryYear)', 'int32'),
  \ dotnet#method('GetTerrestrialBranch(', 'int32 sexagenaryYear)', 'int32'),
  \ dotnet#method('GetYearInfo(', 'int32 LunarYear, int32 Index)', 'abstract strict int32'),
  \ dotnet#method('GetYear(', 'int32 year, DateTime time)', 'abstract strict int32'),
  \ dotnet#method('GetGregorianYear(', 'int32 year, int32 era)', 'abstract strict int32'),
  \ dotnet#method('get_MinCalendarYear(', ')', 'abstract strict int32'),
  \ dotnet#method('get_MaxCalendarYear(', ')', 'abstract strict int32'),
  \ dotnet#method('get_CalEraInfo(', ')', 'abstract strict'),
  \ dotnet#method('get_MinDate(', ')', 'abstract strict'),
  \ dotnet#method('get_MaxDate(', ')', 'abstract strict'),
  \ dotnet#method('MinEraCalendarYear(', 'int32 era)', 'int32'),
  \ dotnet#method('MaxEraCalendarYear(', 'int32 era)', 'int32'),
  \ dotnet#method('EastAsianLunisolarCalendar(', ')', 'void'),
  \ dotnet#method('CheckTicksRange(', 'int64 ticks)', 'void'),
  \ dotnet#method('CheckEraRange(', 'int32 era)', 'void'),
  \ dotnet#method('CheckYearRange(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('CheckYearMonthRange(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('InternalGetDaysInMonth(', 'int32 year, int32 month)', 'int32'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('GregorianToLunar(', 'int32 nSYear, int32 nSMonth, int32 nSDate, int32& nLYear, int32& nLMonth, int32& nLDate)', 'void'),
  \ dotnet#method('LunarToGregorian(', 'int32 nLYear, int32 nLMonth, int32 nLDate, int32& nSolarYear, int32& nSolarMonth, int32& nSolarDay)', 'bool'),
  \ dotnet#method('LunarToTime(', 'DateTime time, int32 year, int32 month, int32 day)', 'DateTime'),
  \ dotnet#method('TimeToLunar(', 'DateTime time, int32& year, int32& month, int32& day)', 'void'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('InternalIsLeapYear(', 'int32 year)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('EastAsianLunisolarCalendar(', ')', 'static void .'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('ChineseLunisolarCalendar', 'EastAsianLunisolarCalendar', [ 
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MinCalendarYear(', ')', 'strict int32'),
  \ dotnet#method('get_MaxCalendarYear(', ')', 'strict int32'),
  \ dotnet#method('get_MinDate(', ')', 'strict'),
  \ dotnet#method('get_MaxDate(', ')', 'strict'),
  \ dotnet#method('get_CalEraInfo(', ')', 'strict'),
  \ dotnet#method('GetYearInfo(', 'int32 LunarYear, int32 Index)', 'strict int32'),
  \ dotnet#method('GetYear(', 'int32 year, DateTime time)', 'strict int32'),
  \ dotnet#method('GetGregorianYear(', 'int32 year, int32 era)', 'strict int32'),
  \ dotnet#method('ChineseLunisolarCalendar(', ')', 'void'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('get_BaseCalendarID(', ')', 'strict int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('ChineseLunisolarCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ ])

call dotnet#class('JapaneseLunisolarCalendar', 'EastAsianLunisolarCalendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MinCalendarYear(', ')', 'strict int32'),
  \ dotnet#method('get_MaxCalendarYear(', ')', 'strict int32'),
  \ dotnet#method('get_MinDate(', ')', 'strict'),
  \ dotnet#method('get_MaxDate(', ')', 'strict'),
  \ dotnet#method('get_CalEraInfo(', ')', 'strict'),
  \ dotnet#method('GetYearInfo(', 'int32 LunarYear, int32 Index)', 'strict int32'),
  \ dotnet#method('GetYear(', 'int32 year, DateTime time)', 'strict int32'),
  \ dotnet#method('GetGregorianYear(', 'int32 year, int32 era)', 'strict int32'),
  \ dotnet#method('JapaneseLunisolarCalendar(', ')', 'void'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_BaseCalendarID(', ')', 'strict int32'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('JapaneseLunisolarCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ ])

call dotnet#class('JulianCalendar', 'Calendar', [ 
  \ dotnet#field('MaxYear', 'int32'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('JulianCalendar(', ')', 'void'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('CheckEraRange(', 'int32 era)', 'static void'),
  \ dotnet#method('CheckYearEraRange(', 'int32 year, int32 era)', 'void'),
  \ dotnet#method('CheckMonthRange(', 'int32 month)', 'static void'),
  \ dotnet#method('CheckDayRange(', 'int32 year, int32 month, int32 day)', 'static void'),
  \ dotnet#method('GetDatePart(', 'int64 ticks, int32 part)', 'static int32'),
  \ dotnet#method('DateToTicks(', 'int32 year, int32 month, int32 day)', 'static int64'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('JulianCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('KoreanLunisolarCalendar', 'EastAsianLunisolarCalendar', [ 
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MinCalendarYear(', ')', 'strict int32'),
  \ dotnet#method('get_MaxCalendarYear(', ')', 'strict int32'),
  \ dotnet#method('get_MinDate(', ')', 'strict'),
  \ dotnet#method('get_MaxDate(', ')', 'strict'),
  \ dotnet#method('get_CalEraInfo(', ')', 'strict'),
  \ dotnet#method('GetYearInfo(', 'int32 LunarYear, int32 Index)', 'strict int32'),
  \ dotnet#method('GetYear(', 'int32 year, DateTime time)', 'strict int32'),
  \ dotnet#method('GetGregorianYear(', 'int32 year, int32 era)', 'strict int32'),
  \ dotnet#method('KoreanLunisolarCalendar(', ')', 'void'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_BaseCalendarID(', ')', 'strict int32'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('KoreanLunisolarCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ ])

call dotnet#class('PersianCalendar', 'Calendar', [ 
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('PersianCalendar(', ')', 'void'),
  \ dotnet#method('get_BaseCalendarID(', ')', 'strict int32'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('CheckTicksRange(', 'int64 ticks)', 'static void'),
  \ dotnet#method('CheckEraRange(', 'int32 era)', 'static void'),
  \ dotnet#method('CheckYearRange(', 'int32 year, int32 era)', 'static void'),
  \ dotnet#method('CheckYearMonthRange(', 'int32 year, int32 month, int32 era)', 'static void'),
  \ dotnet#method('GetDatePart(', 'int64 ticks, int32 part)', 'int32'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('PersianCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('TaiwanLunisolarCalendar', 'EastAsianLunisolarCalendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MinCalendarYear(', ')', 'strict int32'),
  \ dotnet#method('get_MaxCalendarYear(', ')', 'strict int32'),
  \ dotnet#method('get_MinDate(', ')', 'strict'),
  \ dotnet#method('get_MaxDate(', ')', 'strict'),
  \ dotnet#method('get_CalEraInfo(', ')', 'strict'),
  \ dotnet#method('GetYearInfo(', 'int32 LunarYear, int32 Index)', 'strict int32'),
  \ dotnet#method('GetYear(', 'int32 year, DateTime time)', 'strict int32'),
  \ dotnet#method('GetGregorianYear(', 'int32 year, int32 era)', 'strict int32'),
  \ dotnet#method('TaiwanLunisolarCalendar(', ')', 'void'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('get_BaseCalendarID(', ')', 'strict int32'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('TaiwanLunisolarCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MinCalendarYear', 'int32'),
  \ dotnet#prop('MaxCalendarYear', 'int32'),
  \ dotnet#prop('MinDate', 'DateTime'),
  \ dotnet#prop('MaxDate', 'DateTime'),
  \ dotnet#prop('CalEraInfo', 'EraInfo[]'),
  \ dotnet#prop('BaseCalendarID', 'int32'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ ])

call dotnet#class('IdnMapping', 'Object', [ 
  \ dotnet#method('IdnMapping(', ')', 'void'),
  \ dotnet#method('get_AllowUnassigned(', ')', 'bool'),
  \ dotnet#method('set_AllowUnassigned(', 'bool value)', 'void'),
  \ dotnet#method('get_UseStd3AsciiRules(', ')', 'bool'),
  \ dotnet#method('set_UseStd3AsciiRules(', 'bool value)', 'void'),
  \ dotnet#method('GetAscii(', 'string unicode)', 'string'),
  \ dotnet#method('GetAscii(', 'string unicode, int32 index)', 'string'),
  \ dotnet#method('GetAscii(', 'string unicode, int32 index, int32 count)', 'string'),
  \ dotnet#method('GetUnicode(', 'string ascii)', 'string'),
  \ dotnet#method('GetUnicode(', 'string ascii, int32 index)', 'string'),
  \ dotnet#method('GetUnicode(', 'string ascii, int32 index, int32 count)', 'string'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('IdnMapping(', ')', 'static void .'),
  \ dotnet#prop('AllowUnassigned', 'bool'),
  \ dotnet#prop('UseStd3AsciiRules', 'bool'),
  \ ])

call dotnet#class('JapaneseCalendar', 'Calendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('GetEraInfo(', ')', 'static EraInfo[]'),
  \ dotnet#method('GetDefaultInstance(', ')', 'static Calendar'),
  \ dotnet#method('JapaneseCalendar(', ')', 'void'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetWeekOfYear(', 'DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('EraNames(', ')', 'static string[]'),
  \ dotnet#method('AbbrevEraNames(', ')', 'static string[]'),
  \ dotnet#method('EnglishEraNames(', ')', 'static string[]'),
  \ dotnet#method('IsValidYear(', 'int32 year, int32 era)', 'strict bool'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('JapaneseCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('KoreanCalendar', 'Calendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('KoreanCalendar(', ')', 'void'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetWeekOfYear(', 'DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('KoreanCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('RegionInfo', 'Object', [ 
  \ dotnet#field('m_name', 'string'),
  \ dotnet#field('m_cultureData', 'CultureData'),
  \ dotnet#field('m_dataItem', 'int32'),
  \ dotnet#method('RegionInfo(', 'string name)', 'void'),
  \ dotnet#method('RegionInfo(', 'int32 culture)', 'void'),
  \ dotnet#method('RegionInfo(', 'class CultureData cultureData)', 'void'),
  \ dotnet#method('get_CurrentRegion(', ')', 'static'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_EnglishName(', ')', 'string'),
  \ dotnet#method('get_DisplayName(', ')', 'string'),
  \ dotnet#method('get_NativeName(', ')', 'string'),
  \ dotnet#method('get_TwoLetterISORegionName(', ')', 'string'),
  \ dotnet#method('get_ThreeLetterISORegionName(', ')', 'string'),
  \ dotnet#method('get_ThreeLetterWindowsRegionName(', ')', 'string'),
  \ dotnet#method('get_IsMetric(', ')', 'bool'),
  \ dotnet#method('get_GeoId(', ')', 'int32'),
  \ dotnet#method('get_CurrencyEnglishName(', ')', 'string'),
  \ dotnet#method('get_CurrencyNativeName(', ')', 'string'),
  \ dotnet#method('get_CurrencySymbol(', ')', 'string'),
  \ dotnet#method('get_ISOCurrencySymbol(', ')', 'string'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('RegionInfo(', ')', 'static void .'),
  \ dotnet#prop('CurrentRegion', 'RegionInfo'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('EnglishName', 'string'),
  \ dotnet#prop('DisplayName', 'string'),
  \ dotnet#prop('NativeName', 'string'),
  \ dotnet#prop('TwoLetterISORegionName', 'string'),
  \ dotnet#prop('ThreeLetterISORegionName', 'string'),
  \ dotnet#prop('ThreeLetterWindowsRegionName', 'string'),
  \ dotnet#prop('IsMetric', 'bool'),
  \ dotnet#prop('GeoId', 'int32'),
  \ dotnet#prop('CurrencyEnglishName', 'string'),
  \ dotnet#prop('CurrencyNativeName', 'string'),
  \ dotnet#prop('CurrencySymbol', 'string'),
  \ dotnet#prop('ISOCurrencySymbol', 'string'),
  \ ])

call dotnet#class('SortKey', 'Object', [ 
  \ dotnet#field('localeName', 'string'),
  \ dotnet#field('win32LCID', 'int32'),
  \ dotnet#field('options', 'CompareOptions'),
  \ dotnet#field('m_String', 'string'),
  \ dotnet#field('m_KeyData', 'uint8[]'),
  \ dotnet#method('SortKey(', 'string localeName, string str, CompareOptions options, uint8[] keyData)', 'void'),
  \ dotnet#method('get_OriginalString(', ')', 'string'),
  \ dotnet#method('get_KeyData(', ')', 'uint8[]'),
  \ dotnet#method('Compare(', 'class SortKey sortkey1, SortKey sortkey2)', 'static int32'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('OriginalString', 'string'),
  \ dotnet#prop('KeyData', 'uint8[]'),
  \ ])

call dotnet#class('StringInfo', 'Object', [ 
  \ dotnet#method('StringInfo(', ')', 'void'),
  \ dotnet#method('StringInfo(', 'string value)', 'void'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_String(', ')', 'string'),
  \ dotnet#method('set_String(', 'string value)', 'void'),
  \ dotnet#method('get_LengthInTextElements(', ')', 'int32'),
  \ dotnet#method('SubstringByTextElements(', 'int32 startingTextElement)', 'string'),
  \ dotnet#method('SubstringByTextElements(', 'int32 startingTextElement, int32 lengthInTextElements)', 'string'),
  \ dotnet#method('GetNextTextElement(', 'string str)', 'static string'),
  \ dotnet#method('GetCurrentTextElementLen(', 'string str, int32 index, int32 len, UnicodeCategory& ucCurrent, int32& currentCharCount)', 'static int32'),
  \ dotnet#method('GetNextTextElement(', 'string str, int32 index)', 'static string'),
  \ dotnet#method('GetTextElementEnumerator(', 'string str)', 'static TextElementEnumerator'),
  \ dotnet#method('GetTextElementEnumerator(', 'string str, int32 index)', 'static TextElementEnumerator'),
  \ dotnet#method('ParseCombiningCharacters(', 'string str)', 'static int32[]'),
  \ dotnet#prop('String', 'string'),
  \ dotnet#prop('LengthInTextElements', 'int32'),
  \ ])

call dotnet#class('TaiwanCalendar', 'Calendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('GetDefaultInstance(', ')', 'static Calendar'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('TaiwanCalendar(', ')', 'void'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetWeekOfYear(', 'DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('TaiwanCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('TextInfo', 'Object', [ 
  \ dotnet#field('m_nDataItem', 'int32'),
  \ dotnet#field('m_useUserOverride', 'bool'),
  \ dotnet#field('m_win32LangID', 'int32'),
  \ dotnet#method('TextInfo(', ')', 'static void .'),
  \ dotnet#method('TextInfo(', 'class CultureData cultureData)', 'void'),
  \ dotnet#method('GetHashCodeOrdinalIgnoreCase(', 'string s)', 'static int32'),
  \ dotnet#method('CompareOrdinalIgnoreCase(', 'string str1, string str2)', 'static int32'),
  \ dotnet#method('CompareOrdinalIgnoreCaseEx(', 'string strA, int32 indexA, string strB, int32 indexB, int32 lengthA, int32 lengthB)', 'static int32'),
  \ dotnet#method('IndexOfStringOrdinalIgnoreCase(', 'string source, string value, int32 startIndex, int32 count)', 'static int32'),
  \ dotnet#method('LastIndexOfStringOrdinalIgnoreCase(', 'string source, string value, int32 startIndex, int32 count)', 'static int32'),
  \ dotnet#method('get_ANSICodePage(', ')', 'int32'),
  \ dotnet#method('get_OEMCodePage(', ')', 'int32'),
  \ dotnet#method('get_MacCodePage(', ')', 'int32'),
  \ dotnet#method('get_EBCDICCodePage(', ')', 'int32'),
  \ dotnet#method('get_LCID(', ')', 'int32'),
  \ dotnet#method('get_CultureName(', ')', 'string'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('ReadOnly(', 'class TextInfo textInfo)', 'static TextInfo'),
  \ dotnet#method('SetReadOnlyState(', 'bool readOnly)', 'void'),
  \ dotnet#method('get_ListSeparator(', ')', 'string'),
  \ dotnet#method('set_ListSeparator(', 'string value)', 'void'),
  \ dotnet#method('ToLower(', 'char c)', 'char'),
  \ dotnet#method('ToLower(', 'string str)', 'string'),
  \ dotnet#method('ToUpper(', 'char c)', 'char'),
  \ dotnet#method('ToUpper(', 'string str)', 'string'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToTitleCase(', 'string str)', 'string'),
  \ dotnet#method('get_IsRightToLeft(', ')', 'bool'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('GetCaseInsensitiveHashCode(', 'string str)', 'int32'),
  \ dotnet#prop('ANSICodePage', 'int32'),
  \ dotnet#prop('OEMCodePage', 'int32'),
  \ dotnet#prop('MacCodePage', 'int32'),
  \ dotnet#prop('EBCDICCodePage', 'int32'),
  \ dotnet#prop('LCID', 'int32'),
  \ dotnet#prop('CultureName', 'string'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('ListSeparator', 'string'),
  \ dotnet#prop('IsRightToLeft', 'bool'),
  \ ])

call dotnet#class('ThaiBuddhistCalendar', 'Calendar', [ 
  \ dotnet#field('helper', 'GregorianCalendarHelper'),
  \ dotnet#method('get_MinSupportedDateTime(', ')', ''),
  \ dotnet#method('get_MaxSupportedDateTime(', ')', ''),
  \ dotnet#method('get_AlgorithmType(', ')', ''),
  \ dotnet#method('ThaiBuddhistCalendar(', ')', 'void'),
  \ dotnet#method('get_ID(', ')', 'strict int32'),
  \ dotnet#method('AddMonths(', 'DateTime time, int32 months)', 'DateTime'),
  \ dotnet#method('AddYears(', 'DateTime time, int32 years)', 'DateTime'),
  \ dotnet#method('GetDaysInMonth(', 'int32 year, int32 month, int32 era)', 'int32'),
  \ dotnet#method('GetDaysInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetDayOfMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetDayOfWeek(', 'DateTime time)', 'DayOfWeek'),
  \ dotnet#method('GetDayOfYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonthsInYear(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('GetWeekOfYear(', 'DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)', 'int32'),
  \ dotnet#method('GetEra(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetMonth(', 'DateTime time)', 'int32'),
  \ dotnet#method('GetYear(', 'DateTime time)', 'int32'),
  \ dotnet#method('IsLeapDay(', 'int32 year, int32 month, int32 day, int32 era)', 'bool'),
  \ dotnet#method('IsLeapYear(', 'int32 year, int32 era)', 'bool'),
  \ dotnet#method('GetLeapMonth(', 'int32 year, int32 era)', 'int32'),
  \ dotnet#method('IsLeapMonth(', 'int32 year, int32 month, int32 era)', 'bool'),
  \ dotnet#method('ToDateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)', 'DateTime'),
  \ dotnet#method('get_Eras(', ')', 'int32[]'),
  \ dotnet#method('get_TwoDigitYearMax(', ')', 'int32'),
  \ dotnet#method('set_TwoDigitYearMax(', 'int32 value)', 'void'),
  \ dotnet#method('ToFourDigitYear(', 'int32 year)', 'int32'),
  \ dotnet#method('ThaiBuddhistCalendar(', ')', 'static void .'),
  \ dotnet#prop('MinSupportedDateTime', 'DateTime'),
  \ dotnet#prop('MaxSupportedDateTime', 'DateTime'),
  \ dotnet#prop('AlgorithmType', 'CalendarAlgorithmType'),
  \ dotnet#prop('ID', 'int32'),
  \ dotnet#prop('Eras', 'int32[]'),
  \ dotnet#prop('TwoDigitYearMax', 'int32'),
  \ ])

call dotnet#class('NumberFormatInfo', 'Object', [ 
  \ dotnet#field('numberGroupSizes', 'int32[]'),
  \ dotnet#field('currencyGroupSizes', 'int32[]'),
  \ dotnet#field('percentGroupSizes', 'int32[]'),
  \ dotnet#field('positiveSign', 'string'),
  \ dotnet#field('negativeSign', 'string'),
  \ dotnet#field('numberDecimalSeparator', 'string'),
  \ dotnet#field('numberGroupSeparator', 'string'),
  \ dotnet#field('currencyGroupSeparator', 'string'),
  \ dotnet#field('currencyDecimalSeparator', 'string'),
  \ dotnet#field('currencySymbol', 'string'),
  \ dotnet#field('ansiCurrencySymbol', 'string'),
  \ dotnet#field('nanSymbol', 'string'),
  \ dotnet#field('positiveInfinitySymbol', 'string'),
  \ dotnet#field('negativeInfinitySymbol', 'string'),
  \ dotnet#field('percentDecimalSeparator', 'string'),
  \ dotnet#field('percentGroupSeparator', 'string'),
  \ dotnet#field('percentSymbol', 'string'),
  \ dotnet#field('perMilleSymbol', 'string'),
  \ dotnet#field('nativeDigits', 'string[]'),
  \ dotnet#field('m_dataItem', 'int32'),
  \ dotnet#field('numberDecimalDigits', 'int32'),
  \ dotnet#field('currencyDecimalDigits', 'int32'),
  \ dotnet#field('currencyPositivePattern', 'int32'),
  \ dotnet#field('currencyNegativePattern', 'int32'),
  \ dotnet#field('numberNegativePattern', 'int32'),
  \ dotnet#field('percentPositivePattern', 'int32'),
  \ dotnet#field('percentNegativePattern', 'int32'),
  \ dotnet#field('percentDecimalDigits', 'int32'),
  \ dotnet#field('digitSubstitution', 'int32'),
  \ dotnet#field('isReadOnly', 'bool'),
  \ dotnet#field('m_useUserOverride', 'bool'),
  \ dotnet#field('m_isInvariant', 'bool'),
  \ dotnet#field('validForParseAsNumber', 'bool'),
  \ dotnet#field('validForParseAsCurrency', 'bool'),
  \ dotnet#method('NumberFormatInfo(', ')', 'void'),
  \ dotnet#method('NumberFormatInfo(', 'class CultureData cultureData)', 'void'),
  \ dotnet#method('get_InvariantInfo(', ')', 'static'),
  \ dotnet#method('GetInstance(', 'class IFormatProvider formatProvider)', 'static NumberFormatInfo'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('get_CurrencyDecimalDigits(', ')', 'int32'),
  \ dotnet#method('set_CurrencyDecimalDigits(', 'int32 value)', 'void'),
  \ dotnet#method('get_CurrencyDecimalSeparator(', ')', 'string'),
  \ dotnet#method('set_CurrencyDecimalSeparator(', 'string value)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('CheckGroupSize(', 'string propName, int32[] groupSize)', 'static void'),
  \ dotnet#method('get_CurrencyGroupSizes(', ')', 'int32[]'),
  \ dotnet#method('set_CurrencyGroupSizes(', 'int32[] value)', 'void'),
  \ dotnet#method('get_NumberGroupSizes(', ')', 'int32[]'),
  \ dotnet#method('set_NumberGroupSizes(', 'int32[] value)', 'void'),
  \ dotnet#method('get_PercentGroupSizes(', ')', 'int32[]'),
  \ dotnet#method('set_PercentGroupSizes(', 'int32[] value)', 'void'),
  \ dotnet#method('get_CurrencyGroupSeparator(', ')', 'string'),
  \ dotnet#method('set_CurrencyGroupSeparator(', 'string value)', 'void'),
  \ dotnet#method('get_CurrencySymbol(', ')', 'string'),
  \ dotnet#method('set_CurrencySymbol(', 'string value)', 'void'),
  \ dotnet#method('get_CurrentInfo(', ')', 'static'),
  \ dotnet#method('get_NaNSymbol(', ')', 'string'),
  \ dotnet#method('set_NaNSymbol(', 'string value)', 'void'),
  \ dotnet#method('get_CurrencyNegativePattern(', ')', 'int32'),
  \ dotnet#method('set_CurrencyNegativePattern(', 'int32 value)', 'void'),
  \ dotnet#method('get_NumberNegativePattern(', ')', 'int32'),
  \ dotnet#method('set_NumberNegativePattern(', 'int32 value)', 'void'),
  \ dotnet#method('get_PercentPositivePattern(', ')', 'int32'),
  \ dotnet#method('set_PercentPositivePattern(', 'int32 value)', 'void'),
  \ dotnet#method('get_PercentNegativePattern(', ')', 'int32'),
  \ dotnet#method('set_PercentNegativePattern(', 'int32 value)', 'void'),
  \ dotnet#method('get_NegativeInfinitySymbol(', ')', 'string'),
  \ dotnet#method('set_NegativeInfinitySymbol(', 'string value)', 'void'),
  \ dotnet#method('get_NegativeSign(', ')', 'string'),
  \ dotnet#method('set_NegativeSign(', 'string value)', 'void'),
  \ dotnet#method('get_NumberDecimalDigits(', ')', 'int32'),
  \ dotnet#method('set_NumberDecimalDigits(', 'int32 value)', 'void'),
  \ dotnet#method('get_NumberDecimalSeparator(', ')', 'string'),
  \ dotnet#method('set_NumberDecimalSeparator(', 'string value)', 'void'),
  \ dotnet#method('get_NumberGroupSeparator(', ')', 'string'),
  \ dotnet#method('set_NumberGroupSeparator(', 'string value)', 'void'),
  \ dotnet#method('get_CurrencyPositivePattern(', ')', 'int32'),
  \ dotnet#method('set_CurrencyPositivePattern(', 'int32 value)', 'void'),
  \ dotnet#method('get_PositiveInfinitySymbol(', ')', 'string'),
  \ dotnet#method('set_PositiveInfinitySymbol(', 'string value)', 'void'),
  \ dotnet#method('get_PositiveSign(', ')', 'string'),
  \ dotnet#method('set_PositiveSign(', 'string value)', 'void'),
  \ dotnet#method('get_PercentDecimalDigits(', ')', 'int32'),
  \ dotnet#method('set_PercentDecimalDigits(', 'int32 value)', 'void'),
  \ dotnet#method('get_PercentDecimalSeparator(', ')', 'string'),
  \ dotnet#method('set_PercentDecimalSeparator(', 'string value)', 'void'),
  \ dotnet#method('get_PercentGroupSeparator(', ')', 'string'),
  \ dotnet#method('set_PercentGroupSeparator(', 'string value)', 'void'),
  \ dotnet#method('get_PercentSymbol(', ')', 'string'),
  \ dotnet#method('set_PercentSymbol(', 'string value)', 'void'),
  \ dotnet#method('get_PerMilleSymbol(', ')', 'string'),
  \ dotnet#method('set_PerMilleSymbol(', 'string value)', 'void'),
  \ dotnet#method('get_NativeDigits(', ')', 'string[]'),
  \ dotnet#method('set_NativeDigits(', 'string[] value)', 'void'),
  \ dotnet#method('get_DigitSubstitution(', ')', 'DigitShapes'),
  \ dotnet#method('set_DigitSubstitution(', 'DigitShapes value)', 'void'),
  \ dotnet#method('GetFormat(', 'class Type formatType)', 'object'),
  \ dotnet#method('ReadOnly(', 'class NumberFormatInfo nfi)', 'static NumberFormatInfo'),
  \ dotnet#method('ValidateParseStyleInteger(', 'NumberStyles style)', 'static void'),
  \ dotnet#method('ValidateParseStyleFloatingPoint(', 'NumberStyles style)', 'static void'),
  \ dotnet#prop('InvariantInfo', 'NumberFormatInfo'),
  \ dotnet#prop('CurrencyDecimalDigits', 'int32'),
  \ dotnet#prop('CurrencyDecimalSeparator', 'string'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('CurrencyGroupSizes', 'int32[]'),
  \ dotnet#prop('NumberGroupSizes', 'int32[]'),
  \ dotnet#prop('PercentGroupSizes', 'int32[]'),
  \ dotnet#prop('CurrencyGroupSeparator', 'string'),
  \ dotnet#prop('CurrencySymbol', 'string'),
  \ dotnet#prop('CurrentInfo', 'NumberFormatInfo'),
  \ dotnet#prop('NaNSymbol', 'string'),
  \ dotnet#prop('CurrencyNegativePattern', 'int32'),
  \ dotnet#prop('NumberNegativePattern', 'int32'),
  \ dotnet#prop('PercentPositivePattern', 'int32'),
  \ dotnet#prop('PercentNegativePattern', 'int32'),
  \ dotnet#prop('NegativeInfinitySymbol', 'string'),
  \ dotnet#prop('NegativeSign', 'string'),
  \ dotnet#prop('NumberDecimalDigits', 'int32'),
  \ dotnet#prop('NumberDecimalSeparator', 'string'),
  \ dotnet#prop('NumberGroupSeparator', 'string'),
  \ dotnet#prop('CurrencyPositivePattern', 'int32'),
  \ dotnet#prop('PositiveInfinitySymbol', 'string'),
  \ dotnet#prop('PositiveSign', 'string'),
  \ dotnet#prop('PercentDecimalDigits', 'int32'),
  \ dotnet#prop('PercentDecimalSeparator', 'string'),
  \ dotnet#prop('PercentGroupSeparator', 'string'),
  \ dotnet#prop('PercentSymbol', 'string'),
  \ dotnet#prop('PerMilleSymbol', 'string'),
  \ dotnet#prop('NativeDigits', 'string[]'),
  \ dotnet#prop('DigitSubstitution', 'DigitShapes'),
  \ ])

