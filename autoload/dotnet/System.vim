call dotnet#namespace('System')

call dotnet#class('Exception', 'Object', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#field('_message', 'string'),
  \ dotnet#field('_HResult', 'int32'),
  \ dotnet#method('Exception(', ')', 'void'),
  \ dotnet#method('Exception(', 'string message)', 'void'),
  \ dotnet#method('Exception(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('Exception(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_Data(', ')', ''),
  \ dotnet#method('GetBaseException(', ')', ''),
  \ dotnet#method('get_InnerException(', ')', ''),
  \ dotnet#method('get_TargetSite(', ')', ''),
  \ dotnet#method('get_StackTrace(', ')', 'string'),
  \ dotnet#method('SetErrorCode(', 'int32 hr)', 'void'),
  \ dotnet#method('get_HelpLink(', ')', 'string'),
  \ dotnet#method('set_HelpLink(', 'string value)', 'void'),
  \ dotnet#method('get_Source(', ')', 'string'),
  \ dotnet#method('set_Source(', 'string value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('add_SerializeObjectState(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SerializeObjectState(', 'class EventHandler value)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('PrepForRemoting(', ')', 'Exception'),
  \ dotnet#method('InternalPreserveStackTrace(', ')', 'void'),
  \ dotnet#method('get_HResult(', ')', 'int32'),
  \ dotnet#method('set_HResult(', 'int32 value)', 'void'),
  \ dotnet#method('InternalToString(', ')', 'strict string'),
  \ dotnet#method('GetType(', ')', 'Type'),
  \ dotnet#method('get_IsTransient(', ')', 'bool'),
  \ dotnet#method('GetMessageFromNativeResources(', 'Exception/ExceptionMessageKind kind)', 'static string'),
  \ dotnet#event('SerializeObjectState', 'EventHandler'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('Data', 'IDictionary'),
  \ dotnet#prop('InnerException', 'Exception'),
  \ dotnet#prop('TargetSite', 'MethodBase'),
  \ dotnet#prop('StackTrace', 'string'),
  \ dotnet#prop('HelpLink', 'string'),
  \ dotnet#prop('Source', 'string'),
  \ dotnet#prop('HResult', 'int32'),
  \ dotnet#prop('IsTransient', 'bool'),
  \ ])

call dotnet#class('ValueType', 'Object', [ 
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ') internalcall', 'int32'),
  \ dotnet#method('GetHashCodeOfPtr(', 'native int ptr) internalcall', 'static int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ ])

call dotnet#class('Enum', 'ValueType', [ 
  \ dotnet#method('ToUInt64(', 'object value)', 'static uint64'),
  \ dotnet#method('InternalGetUnderlyingType(', 'class RuntimeType enumType) internalcall', 'static RuntimeType'),
  \ dotnet#method('TryParse(', 'string value, [out] !!TEnum& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string value, bool ignoreCase, [out] !!TEnum& result)', 'static bool'),
  \ dotnet#method('Parse(', 'class Type enumType, string value)', 'static object'),
  \ dotnet#method('Parse(', 'class Type enumType, string value, bool ignoreCase)', 'static object'),
  \ dotnet#method('GetUnderlyingType(', 'class Type enumType)', 'static Type'),
  \ dotnet#method('GetValues(', 'class Type enumType)', 'static Array'),
  \ dotnet#method('InternalGetValues(', 'class RuntimeType enumType)', 'static uint64[]'),
  \ dotnet#method('GetName(', 'class Type enumType, object value)', 'static string'),
  \ dotnet#method('GetNames(', 'class Type enumType)', 'static string[]'),
  \ dotnet#method('InternalGetNames(', 'class RuntimeType enumType)', 'static string[]'),
  \ dotnet#method('ToObject(', 'class Type enumType, object value)', 'static object'),
  \ dotnet#method('IsDefined(', 'class Type enumType, object value)', 'static bool'),
  \ dotnet#method('Format(', 'class Type enumType, object value, string format)', 'static string'),
  \ dotnet#method('GetValue(', ')', 'object'),
  \ dotnet#method('Equals(', 'object obj) internalcall', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('CompareTo(', 'object target)', 'int32'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('HasFlag(', 'class Enum flag)', 'bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ dotnet#method('ToObject(', 'class Type enumType, int8 value)', 'static object'),
  \ dotnet#method('ToObject(', 'class Type enumType, int16 value)', 'static object'),
  \ dotnet#method('ToObject(', 'class Type enumType, int32 value)', 'static object'),
  \ dotnet#method('ToObject(', 'class Type enumType, uint8 value)', 'static object'),
  \ dotnet#method('ToObject(', 'class Type enumType, uint16 value)', 'static object'),
  \ dotnet#method('ToObject(', 'class Type enumType, uint32 value)', 'static object'),
  \ dotnet#method('ToObject(', 'class Type enumType, int64 value)', 'static object'),
  \ dotnet#method('ToObject(', 'class Type enumType, uint64 value)', 'static object'),
  \ dotnet#method('Enum(', ')', 'void'),
  \ dotnet#method('Enum(', ')', 'static void .'),
  \ ])

call dotnet#class('AggregateException', 'Exception', [ 
  \ dotnet#method('AggregateException(', ')', 'void'),
  \ dotnet#method('AggregateException(', 'string message)', 'void'),
  \ dotnet#method('AggregateException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('AggregateException(', 'class IEnumerable innerExceptions)', 'void'),
  \ dotnet#method('AggregateException(', 'class Exception[] innerExceptions)', 'void'),
  \ dotnet#method('AggregateException(', 'string message, IEnumerable innerExceptions)', 'void'),
  \ dotnet#method('AggregateException(', 'string message, Exception[] innerExceptions)', 'void'),
  \ dotnet#method('AggregateException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetBaseException(', ')', 'Exception'),
  \ dotnet#method('get_InnerExceptions(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('Handle(', 'class Func predicate)', 'void'),
  \ dotnet#method('Flatten(', ')', 'AggregateException'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('InnerExceptions', 'ReadOnlyCollection'),
  \ ])

call dotnet#class('Delegate', 'Object', [ 
  \ dotnet#field('_target', 'object'),
  \ dotnet#field('_methodBase', 'object'),
  \ dotnet#field('_methodPtr', 'int'),
  \ dotnet#field('_methodPtrAux', 'int'),
  \ dotnet#method('Delegate(', 'object target, string method)', 'void'),
  \ dotnet#method('Delegate(', 'class Type target, string method)', 'void'),
  \ dotnet#method('Delegate(', ')', 'void'),
  \ dotnet#method('DynamicInvoke(', 'object[] args)', 'object'),
  \ dotnet#method('DynamicInvokeImpl(', 'object[] args)', 'object'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Combine(', 'class Delegate a, Delegate b)', 'static Delegate'),
  \ dotnet#method('Combine(', 'class Delegate[] delegates)', 'static Delegate'),
  \ dotnet#method('GetInvocationList(', ')', ''),
  \ dotnet#method('get_Method(', ')', 'MethodInfo'),
  \ dotnet#method('GetMethodImpl(', ')', 'family'),
  \ dotnet#method('get_Target(', ')', 'object'),
  \ dotnet#method('Remove(', 'class Delegate source, Delegate value)', 'static Delegate'),
  \ dotnet#method('RemoveAll(', 'class Delegate source, Delegate value)', 'static Delegate'),
  \ dotnet#method('CombineImpl(', 'class Delegate d)', 'family'),
  \ dotnet#method('RemoveImpl(', 'class Delegate d)', 'family'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('CreateDelegate(', 'class Type type, object target, string method)', 'static Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type type, object target, string method, bool ignoreCase)', 'static Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure)', 'static Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type type, Type target, string method)', 'static Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type type, Type target, string method, bool ignoreCase)', 'static Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure)', 'static Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type type, MethodInfo method, bool throwOnBindFailure)', 'static Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type type, object firstArgument, MethodInfo method)', 'static Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure)', 'static Delegate'),
  \ dotnet#method('op_Equality(', 'class Delegate d1, Delegate d2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class Delegate d1, Delegate d2)', 'static bool'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('CreateDelegate(', 'class Type type, object target, RuntimeMethodHandle method)', 'static Delegate'),
  \ dotnet#method('InternalCreateDelegate(', 'class Type type, object firstArgument, MethodInfo method)', 'static Delegate'),
  \ dotnet#method('CreateDelegate(', 'class Type type, MethodInfo method)', 'static Delegate'),
  \ dotnet#method('InternalAlloc(', 'class RuntimeType type) internalcall', 'static MulticastDelegate'),
  \ dotnet#method('InternalAllocLike(', 'class Delegate d) internalcall', 'static MulticastDelegate'),
  \ dotnet#method('InternalEqualTypes(', 'object a, object b) internalcall', 'static bool'),
  \ dotnet#method('GetMulticastInvoke(', ') internalcall', 'int'),
  \ dotnet#method('GetInvokeMethod(', ') internalcall', 'int'),
  \ dotnet#method('FindMethodHandle(', ') internalcall', 'IRuntimeMethodInfo'),
  \ dotnet#method('InternalEqualMethodHandles(', 'class Delegate left, Delegate right) internalcall', 'static bool'),
  \ dotnet#method('AdjustTarget(', 'object target, int methodPtr) internalcall', 'int'),
  \ dotnet#method('GetCallStub(', 'native int methodPtr) internalcall', 'int'),
  \ dotnet#method('GetTarget(', ')', 'strict object'),
  \ dotnet#method('CompareUnmanagedFunctionPtrs(', 'class Delegate d1, Delegate d2) internalcall', 'static bool'),
  \ dotnet#prop('Method', 'MethodInfo'),
  \ dotnet#prop('Target', 'object'),
  \ ])

call dotnet#class('MulticastDelegate', 'Delegate', [ 
  \ dotnet#method('MulticastDelegate(', 'object target, string method)', 'void'),
  \ dotnet#method('MulticastDelegate(', 'class Type target, string method)', 'void'),
  \ dotnet#method('IsUnmanagedFunctionPtr(', ')', 'bool'),
  \ dotnet#method('InvocationListLogicallyNull(', ')', 'bool'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('NewMulticastDelegate(', 'object[] invocationList, int32 invocationCount, bool thisIsMultiCastAlready)', 'MulticastDelegate'),
  \ dotnet#method('NewMulticastDelegate(', 'object[] invocationList, int32 invocationCount)', 'MulticastDelegate'),
  \ dotnet#method('StoreDynamicMethod(', 'class MethodInfo dynamicMethod)', 'void'),
  \ dotnet#method('CombineImpl(', 'class Delegate follow)', 'family'),
  \ dotnet#method('RemoveImpl(', 'class Delegate value)', 'family'),
  \ dotnet#method('GetInvocationList(', ')', ''),
  \ dotnet#method('op_Equality(', 'class MulticastDelegate d1, MulticastDelegate d2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class MulticastDelegate d1, MulticastDelegate d2)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetTarget(', ')', 'strict object'),
  \ dotnet#method('GetMethodImpl(', ')', 'MethodInfo'),
  \ ])

call dotnet#class('Action', 'MulticastDelegate', [ 
  \ dotnet#method('Action`1(', 'object object, int method)', 'void Action`'),
  \ dotnet#method('Invoke(', '!T obj)', 'void'),
  \ dotnet#method('BeginInvoke(', '!T obj, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('Action', 'MulticastDelegate', [ 
  \ dotnet#method('Action(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', ')', 'void'),
  \ dotnet#method('BeginInvoke(', 'class AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('Action', 'MulticastDelegate', [ 
  \ dotnet#method('Action`2(', 'object object, int method)', 'void Action`'),
  \ dotnet#method('Invoke(', '!T1 arg1, !T2 arg2)', 'void'),
  \ dotnet#method('BeginInvoke(', '!T1 arg1, !T2 arg2, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('Action', 'MulticastDelegate', [ 
  \ dotnet#method('Action`3(', 'object object, int method)', 'void Action`'),
  \ dotnet#method('Invoke(', '!T1 arg1, !T2 arg2, !T3 arg3)', 'void'),
  \ dotnet#method('BeginInvoke(', '!T1 arg1, !T2 arg2, !T3 arg3, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('Action', 'MulticastDelegate', [ 
  \ dotnet#method('Action`4(', 'object object, int method)', 'void Action`'),
  \ dotnet#method('Invoke(', '!T1 arg1, !T2 arg2, !T3 arg3, !T4 arg4)', 'void'),
  \ dotnet#method('BeginInvoke(', '!T1 arg1, !T2 arg2, !T3 arg3, !T4 arg4, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('Func', 'MulticastDelegate', [ 
  \ dotnet#method('Func`1(', 'object object, int method)', 'void Func`'),
  \ dotnet#method('Invoke(', ')', '!TResult'),
  \ dotnet#method('BeginInvoke(', 'class AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', '!TResult'),
  \ ])

call dotnet#class('Func', 'MulticastDelegate', [ 
  \ dotnet#method('Func`2(', 'object object, int method)', 'void Func`'),
  \ dotnet#method('Invoke(', '!T arg)', '!TResult'),
  \ dotnet#method('BeginInvoke(', '!T arg, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', '!TResult'),
  \ ])

call dotnet#class('Func', 'MulticastDelegate', [ 
  \ dotnet#method('Func`3(', 'object object, int method)', 'void Func`'),
  \ dotnet#method('Invoke(', '!T1 arg1, !T2 arg2)', '!TResult'),
  \ dotnet#method('BeginInvoke(', '!T1 arg1, !T2 arg2, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', '!TResult'),
  \ ])

call dotnet#class('Func', 'MulticastDelegate', [ 
  \ dotnet#method('Func`4(', 'object object, int method)', 'void Func`'),
  \ dotnet#method('Invoke(', '!T1 arg1, !T2 arg2, !T3 arg3)', '!TResult'),
  \ dotnet#method('BeginInvoke(', '!T1 arg1, !T2 arg2, !T3 arg3, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', '!TResult'),
  \ ])

call dotnet#class('Comparison', 'MulticastDelegate', [ 
  \ dotnet#method('Comparison`1(', 'object object, int method)', 'void Comparison`'),
  \ dotnet#method('Invoke(', '!T x, !T y)', 'int32'),
  \ dotnet#method('BeginInvoke(', '!T x, !T y, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'int32'),
  \ ])

call dotnet#class('Converter', 'MulticastDelegate', [ 
  \ dotnet#method('Converter`2(', 'object object, int method)', 'void Converter`'),
  \ dotnet#method('Invoke(', '!TInput input)', '!TOutput'),
  \ dotnet#method('BeginInvoke(', '!TInput input, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', '!TOutput'),
  \ ])

call dotnet#class('Predicate', 'MulticastDelegate', [ 
  \ dotnet#method('Predicate`1(', 'object object, int method)', 'void Predicate`'),
  \ dotnet#method('Invoke(', '!T obj)', 'bool'),
  \ dotnet#method('BeginInvoke(', '!T obj, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'bool'),
  \ ])

call dotnet#class('Array', 'Object', [ 
  \ dotnet#method('Array(', 'class Comparison comparison)', 'void'),
  \ dotnet#method('Compare(', '!T x, !T y)', 'int32'),
  \ dotnet#method('Array(', ')', 'void'),
  \ dotnet#method('AsReadOnly(', '!!T[] array)', 'static ReadOnlyCollection'),
  \ dotnet#method('Resize(', '!!T[]& array, int32 newSize)', 'static void'),
  \ dotnet#method('CreateInstance(', 'class Type elementType, int32 length)', 'static Array'),
  \ dotnet#method('CreateInstance(', 'class Type elementType, int32 length1, int32 length2)', 'static Array'),
  \ dotnet#method('CreateInstance(', 'class Type elementType, int32 length1, int32 length2, int32 length3)', 'static Array'),
  \ dotnet#method('CreateInstance(', 'class Type elementType, int32[] lengths)', 'static Array'),
  \ dotnet#method('CreateInstance(', 'class Type elementType, int64[] lengths)', 'static Array'),
  \ dotnet#method('CreateInstance(', 'class Type elementType, int32[] lengths, int32[] lowerBounds)', 'static Array'),
  \ dotnet#method('UnsafeCreateInstance(', 'class Type elementType, int32 length)', 'static Array'),
  \ dotnet#method('UnsafeCreateInstance(', 'class Type elementType, int32 length1, int32 length2)', 'static Array'),
  \ dotnet#method('UnsafeCreateInstance(', 'class Type elementType, int32[] lengths)', 'static Array'),
  \ dotnet#method('UnsafeCreateInstance(', 'class Type elementType, int32[] lengths, int32[] lowerBounds)', 'static Array'),
  \ dotnet#method('Copy(', 'class Array sourceArray, Array destinationArray, int32 length)', 'static void'),
  \ dotnet#method('Copy(', 'class Array sourceArray, int32 sourceIndex, Array destinationArray, int32 destinationIndex, int32 length)', 'static void'),
  \ dotnet#method('Copy(', 'class Array sourceArray, int32 sourceIndex, Array destinationArray, int32 destinationIndex, int32 length, bool reliable) internalcall', 'static void'),
  \ dotnet#method('ConstrainedCopy(', 'class Array sourceArray, int32 sourceIndex, Array destinationArray, int32 destinationIndex, int32 length)', 'static void'),
  \ dotnet#method('Copy(', 'class Array sourceArray, Array destinationArray, int64 length)', 'static void'),
  \ dotnet#method('Copy(', 'class Array sourceArray, int64 sourceIndex, Array destinationArray, int64 destinationIndex, int64 length)', 'static void'),
  \ dotnet#method('Clear(', 'class Array array, int32 index, int32 length) internalcall', 'static void'),
  \ dotnet#method('GetValue(', 'int32[] indices)', 'object'),
  \ dotnet#method('GetValue(', 'int32 index)', 'object'),
  \ dotnet#method('GetValue(', 'int32 index1, int32 index2)', 'object'),
  \ dotnet#method('GetValue(', 'int32 index1, int32 index2, int32 index3)', 'object'),
  \ dotnet#method('GetValue(', 'int64 index)', 'object'),
  \ dotnet#method('GetValue(', 'int64 index1, int64 index2)', 'object'),
  \ dotnet#method('GetValue(', 'int64 index1, int64 index2, int64 index3)', 'object'),
  \ dotnet#method('GetValue(', 'int64[] indices)', 'object'),
  \ dotnet#method('SetValue(', 'object value, int32 index)', 'void'),
  \ dotnet#method('SetValue(', 'object value, int32 index1, int32 index2)', 'void'),
  \ dotnet#method('SetValue(', 'object value, int32 index1, int32 index2, int32 index3)', 'void'),
  \ dotnet#method('SetValue(', 'object value, int32[] indices)', 'void'),
  \ dotnet#method('SetValue(', 'object value, int64 index)', 'void'),
  \ dotnet#method('SetValue(', 'object value, int64 index1, int64 index2)', 'void'),
  \ dotnet#method('SetValue(', 'object value, int64 index1, int64 index2, int64 index3)', 'void'),
  \ dotnet#method('SetValue(', 'object value, int64[] indices)', 'void'),
  \ dotnet#method('get_Length(', ') internalcall', 'int32'),
  \ dotnet#method('get_LongLength(', ')', 'int64'),
  \ dotnet#method('GetLength(', 'int32 dimension) internalcall', 'int32'),
  \ dotnet#method('GetLongLength(', 'int32 dimension)', 'int64'),
  \ dotnet#method('get_Rank(', ') internalcall', 'int32'),
  \ dotnet#method('GetUpperBound(', 'int32 dimension) internalcall', 'int32'),
  \ dotnet#method('GetLowerBound(', 'int32 dimension) internalcall', 'int32'),
  \ dotnet#method('GetDataPtrOffsetInternal(', ') internalcall', 'int32'),
  \ dotnet#method('get_Count(', ')', 'int32 '),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('Clear(', ')', 'void '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void '),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('CompareTo(', 'object other, IComparer comparer)', 'int32 '),
  \ dotnet#method('Equals(', 'object other, IEqualityComparer comparer)', 'bool '),
  \ dotnet#method('CombineHashCodes(', 'int32 h1, int32 h2)', 'static int32'),
  \ dotnet#method('GetHashCode(', 'class IEqualityComparer comparer)', 'int32 '),
  \ dotnet#method('BinarySearch(', 'class Array array, object value)', 'static int32'),
  \ dotnet#method('BinarySearch(', 'class Array array, int32 index, int32 length, object value)', 'static int32'),
  \ dotnet#method('BinarySearch(', 'class Array array, object value, IComparer comparer)', 'static int32'),
  \ dotnet#method('BinarySearch(', 'class Array array, int32 index, int32 length, object value, IComparer comparer)', 'static int32'),
  \ dotnet#method('BinarySearch(', '!!T[] array, !!T value)', 'static int32'),
  \ dotnet#method('BinarySearch(', '!!T[] array, !!T value, IComparer comparer)', 'static int32'),
  \ dotnet#method('BinarySearch(', '!!T[] array, int32 index, int32 length, !!T value)', 'static int32'),
  \ dotnet#method('BinarySearch(', '!!T[] array, int32 index, int32 length, !!T value, IComparer comparer)', 'static int32'),
  \ dotnet#method('ConvertAll(', '!!TInput[] array, Converter converter)', 'static !!TOutput[]'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int64 index)', 'void'),
  \ dotnet#method('Exists(', '!!T[] array, Predicate match)', 'static bool'),
  \ dotnet#method('Find(', '!!T[] array, Predicate match)', 'static !!T'),
  \ dotnet#method('FindAll(', '!!T[] array, Predicate match)', 'static !!T[]'),
  \ dotnet#method('FindIndex(', '!!T[] array, Predicate match)', 'static int32'),
  \ dotnet#method('FindIndex(', '!!T[] array, int32 startIndex, Predicate match)', 'static int32'),
  \ dotnet#method('FindIndex(', '!!T[] array, int32 startIndex, int32 count, Predicate match)', 'static int32'),
  \ dotnet#method('FindLast(', '!!T[] array, Predicate match)', 'static !!T'),
  \ dotnet#method('FindLastIndex(', '!!T[] array, Predicate match)', 'static int32'),
  \ dotnet#method('FindLastIndex(', '!!T[] array, int32 startIndex, Predicate match)', 'static int32'),
  \ dotnet#method('FindLastIndex(', '!!T[] array, int32 startIndex, int32 count, Predicate match)', 'static int32'),
  \ dotnet#method('ForEach(', '!!T[] array, Action action)', 'static void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('IndexOf(', 'class Array array, object value)', 'static int32'),
  \ dotnet#method('IndexOf(', 'class Array array, object value, int32 startIndex)', 'static int32'),
  \ dotnet#method('IndexOf(', 'class Array array, object value, int32 startIndex, int32 count)', 'static int32'),
  \ dotnet#method('IndexOf(', '!!T[] array, !!T value)', 'static int32'),
  \ dotnet#method('IndexOf(', '!!T[] array, !!T value, int32 startIndex)', 'static int32'),
  \ dotnet#method('IndexOf(', '!!T[] array, !!T value, int32 startIndex, int32 count)', 'static int32'),
  \ dotnet#method('LastIndexOf(', 'class Array array, object value)', 'static int32'),
  \ dotnet#method('LastIndexOf(', 'class Array array, object value, int32 startIndex)', 'static int32'),
  \ dotnet#method('LastIndexOf(', 'class Array array, object value, int32 startIndex, int32 count)', 'static int32'),
  \ dotnet#method('LastIndexOf(', '!!T[] array, !!T value)', 'static int32'),
  \ dotnet#method('LastIndexOf(', '!!T[] array, !!T value, int32 startIndex)', 'static int32'),
  \ dotnet#method('LastIndexOf(', '!!T[] array, !!T value, int32 startIndex, int32 count)', 'static int32'),
  \ dotnet#method('Reverse(', 'class Array array)', 'static void'),
  \ dotnet#method('Reverse(', 'class Array array, int32 index, int32 length)', 'static void'),
  \ dotnet#method('Sort(', 'class Array array)', 'static void'),
  \ dotnet#method('Sort(', 'class Array keys, Array items)', 'static void'),
  \ dotnet#method('Sort(', 'class Array array, int32 index, int32 length)', 'static void'),
  \ dotnet#method('Sort(', 'class Array keys, Array items, int32 index, int32 length)', 'static void'),
  \ dotnet#method('Sort(', 'class Array array, IComparer comparer)', 'static void'),
  \ dotnet#method('Sort(', 'class Array keys, Array items, IComparer comparer)', 'static void'),
  \ dotnet#method('Sort(', 'class Array array, int32 index, int32 length, IComparer comparer)', 'static void'),
  \ dotnet#method('Sort(', 'class Array keys, Array items, int32 index, int32 length, IComparer comparer)', 'static void'),
  \ dotnet#method('Sort(', '!!T[] array)', 'static void'),
  \ dotnet#method('Sort(', '!!TKey[] keys, !!TValue[] items)', 'static void'),
  \ dotnet#method('Sort(', '!!T[] array, int32 index, int32 length)', 'static void'),
  \ dotnet#method('Sort(', '!!TKey[] keys, !!TValue[] items, int32 index, int32 length)', 'static void'),
  \ dotnet#method('Sort(', '!!T[] array, IComparer comparer)', 'static void'),
  \ dotnet#method('Sort(', '!!TKey[] keys, !!TValue[] items, IComparer comparer)', 'static void'),
  \ dotnet#method('Sort(', '!!T[] array, int32 index, int32 length, IComparer comparer)', 'static void'),
  \ dotnet#method('Sort(', '!!TKey[] keys, !!TValue[] items, int32 index, int32 length, IComparer comparer)', 'static void'),
  \ dotnet#method('Sort(', '!!T[] array, Comparison comparison)', 'static void'),
  \ dotnet#method('TrueForAll(', '!!T[] array, Predicate match)', 'static bool'),
  \ dotnet#method('Initialize(', ') internalcall', 'void'),
  \ dotnet#prop('Length', 'int32'),
  \ dotnet#prop('LongLength', 'int64'),
  \ dotnet#prop('Rank', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ ])

call dotnet#class('ArraySegment', 'ValueType', [ 
  \ dotnet#field('_array', '!T[]'),
  \ dotnet#field('_offset', 'int32'),
  \ dotnet#field('_count', 'int32'),
  \ dotnet#method('ArraySegment`1(', '!T[] array)', 'void ArraySegment`'),
  \ dotnet#method('ArraySegment`1(', '!T[] array, int32 offset, int32 count)', 'void ArraySegment`'),
  \ dotnet#method('get_Array(', ')', '!T[]'),
  \ dotnet#method('get_Offset(', ')', 'int32'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'ArraySegment obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'ArraySegment a, ArraySegment b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'ArraySegment a, ArraySegment b)', 'static bool'),
  \ dotnet#prop('Array', '!T[]'),
  \ dotnet#prop('Offset', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ ])

call dotnet#class('Tuple', 'Object', [ 
  \ dotnet#method('Create(', '!!T1 item1)', 'static Tuple'),
  \ dotnet#method('Create(', '!!T1 item1, !!T2 item2)', 'static Tuple'),
  \ dotnet#method('Create(', '!!T1 item1, !!T2 item2, !!T3 item3)', 'static Tuple'),
  \ dotnet#method('Create(', '!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4)', 'static Tuple'),
  \ dotnet#method('Create(', '!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5)', 'static Tuple'),
  \ dotnet#method('Create(', '!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6)', 'static Tuple'),
  \ dotnet#method('Create(', '!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7)', 'static Tuple'),
  \ dotnet#method('Create(', '!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8)', 'static Tuple'),
  \ dotnet#method('CombineHashCodes(', 'int32 h1, int32 h2)', 'static int32'),
  \ dotnet#method('CombineHashCodes(', 'int32 h1, int32 h2, int32 h3)', 'static int32'),
  \ dotnet#method('CombineHashCodes(', 'int32 h1, int32 h2, int32 h3, int32 h4)', 'static int32'),
  \ dotnet#method('CombineHashCodes(', 'int32 h1, int32 h2, int32 h3, int32 h4, int32 h5)', 'static int32'),
  \ dotnet#method('CombineHashCodes(', 'int32 h1, int32 h2, int32 h3, int32 h4, int32 h5, int32 h6)', 'static int32'),
  \ dotnet#method('CombineHashCodes(', 'int32 h1, int32 h2, int32 h3, int32 h4, int32 h5, int32 h6, int32 h7)', 'static int32'),
  \ dotnet#method('CombineHashCodes(', 'int32 h1, int32 h2, int32 h3, int32 h4, int32 h5, int32 h6, int32 h7, int32 h8)', 'static int32'),
  \ ])

call dotnet#class('Tuple', 'Object', [ 
  \ dotnet#method('get_Item1(', ')', '!T1'),
  \ dotnet#method('Tuple`1(', '!T1 item1)', 'void Tuple`'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'object other, IEqualityComparer comparer)', 'bool '),
  \ dotnet#method('CompareTo(', 'object obj)', 'int32 '),
  \ dotnet#method('CompareTo(', 'object other, IComparer comparer)', 'int32 '),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', 'class IEqualityComparer comparer)', 'int32 '),
  \ dotnet#method('GetHashCode(', 'class IEqualityComparer comparer)', 'int32 '),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class StringBuilder sb)', 'string '),
  \ dotnet#method('get_Size(', ')', 'int32 '),
  \ dotnet#prop('Item1', '!T1'),
  \ dotnet#prop('Size', 'int32'),
  \ ])

call dotnet#class('Tuple', 'Object', [ 
  \ dotnet#method('get_Item1(', ')', '!T1'),
  \ dotnet#method('get_Item2(', ')', '!T2'),
  \ dotnet#method('Tuple`2(', '!T1 item1, !T2 item2)', 'void Tuple`'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'object other, IEqualityComparer comparer)', 'bool '),
  \ dotnet#method('CompareTo(', 'object obj)', 'int32 '),
  \ dotnet#method('CompareTo(', 'object other, IComparer comparer)', 'int32 '),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', 'class IEqualityComparer comparer)', 'int32 '),
  \ dotnet#method('GetHashCode(', 'class IEqualityComparer comparer)', 'int32 '),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class StringBuilder sb)', 'string '),
  \ dotnet#method('get_Size(', ')', 'int32 '),
  \ dotnet#prop('Item1', '!T1'),
  \ dotnet#prop('Item2', '!T2'),
  \ dotnet#prop('Size', 'int32'),
  \ ])

call dotnet#class('Tuple', 'Object', [ 
  \ dotnet#method('get_Item1(', ')', '!T1'),
  \ dotnet#method('get_Item2(', ')', '!T2'),
  \ dotnet#method('get_Item3(', ')', '!T3'),
  \ dotnet#method('Tuple`3(', '!T1 item1, !T2 item2, !T3 item3)', 'void Tuple`'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'object other, IEqualityComparer comparer)', 'bool '),
  \ dotnet#method('CompareTo(', 'object obj)', 'int32 '),
  \ dotnet#method('CompareTo(', 'object other, IComparer comparer)', 'int32 '),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', 'class IEqualityComparer comparer)', 'int32 '),
  \ dotnet#method('GetHashCode(', 'class IEqualityComparer comparer)', 'int32 '),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class StringBuilder sb)', 'string '),
  \ dotnet#method('get_Size(', ')', 'int32 '),
  \ dotnet#prop('Item1', '!T1'),
  \ dotnet#prop('Item2', '!T2'),
  \ dotnet#prop('Item3', '!T3'),
  \ dotnet#prop('Size', 'int32'),
  \ ])

call dotnet#class('Tuple', 'Object', [ 
  \ dotnet#method('get_Item1(', ')', '!T1'),
  \ dotnet#method('get_Item2(', ')', '!T2'),
  \ dotnet#method('get_Item3(', ')', '!T3'),
  \ dotnet#method('get_Item4(', ')', '!T4'),
  \ dotnet#method('Tuple`4(', '!T1 item1, !T2 item2, !T3 item3, !T4 item4)', 'void Tuple`'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'object other, IEqualityComparer comparer)', 'bool '),
  \ dotnet#method('CompareTo(', 'object obj)', 'int32 '),
  \ dotnet#method('CompareTo(', 'object other, IComparer comparer)', 'int32 '),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', 'class IEqualityComparer comparer)', 'int32 '),
  \ dotnet#method('GetHashCode(', 'class IEqualityComparer comparer)', 'int32 '),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class StringBuilder sb)', 'string '),
  \ dotnet#method('get_Size(', ')', 'int32 '),
  \ dotnet#prop('Item1', '!T1'),
  \ dotnet#prop('Item2', '!T2'),
  \ dotnet#prop('Item3', '!T3'),
  \ dotnet#prop('Item4', '!T4'),
  \ dotnet#prop('Size', 'int32'),
  \ ])

call dotnet#class('String', 'Object', [ 
  \ dotnet#method('Join(', 'string separator, string[] value)', 'static string'),
  \ dotnet#method('Join(', 'string separator, object[] values)', 'static string'),
  \ dotnet#method('Join(', 'string separator, IEnumerable values)', 'static string'),
  \ dotnet#method('Join(', 'string separator, IEnumerable values)', 'static string'),
  \ dotnet#method('get_FirstChar(', ')', 'char'),
  \ dotnet#method('Join(', 'string separator, string[] value, int32 startIndex, int32 count)', 'static string'),
  \ dotnet#method('nativeCompareOrdinalEx(', 'string strA, int32 indexA, string strB, int32 indexB, int32 count) internalcall', 'static int32'),
  \ dotnet#method('nativeCompareOrdinalIgnoreCaseWC(', 'string strA, char* strBChars) internalcall', 'static int32'),
  \ dotnet#method('SmallCharToUpper(', 'string strIn)', 'static string'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'string value)', 'bool'),
  \ dotnet#method('Equals(', 'string value, StringComparison comparisonType)', 'bool'),
  \ dotnet#method('Equals(', 'string a, string b)', 'static bool'),
  \ dotnet#method('Equals(', 'string a, string b, StringComparison comparisonType)', 'static bool'),
  \ dotnet#method('op_Equality(', 'string a, string b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'string a, string b)', 'static bool'),
  \ dotnet#method('get_Chars(', 'int32 index) internalcall', 'char'),
  \ dotnet#method('CopyTo(', 'int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count)', 'void'),
  \ dotnet#method('ToCharArray(', ')', 'char[]'),
  \ dotnet#method('ToCharArray(', 'int32 startIndex, int32 length)', 'char[]'),
  \ dotnet#method('IsNullOrEmpty(', 'string value)', 'static bool'),
  \ dotnet#method('IsNullOrWhiteSpace(', 'string value)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_Length(', ') internalcall', 'int32'),
  \ dotnet#method('Split(', 'char[] separator)', 'string[]'),
  \ dotnet#method('Split(', 'char[] separator, int32 count)', 'string[]'),
  \ dotnet#method('Split(', 'char[] separator, StringSplitOptions options)', 'string[]'),
  \ dotnet#method('Split(', 'char[] separator, int32 count, StringSplitOptions options)', 'string[]'),
  \ dotnet#method('SplitInternal(', 'char[] separator, int32 count, StringSplitOptions options)', 'string[]'),
  \ dotnet#method('Split(', 'string[] separator, StringSplitOptions options)', 'string[]'),
  \ dotnet#method('Split(', 'string[] separator, int32 count, StringSplitOptions options)', 'string[]'),
  \ dotnet#method('Substring(', 'int32 startIndex)', 'string'),
  \ dotnet#method('Substring(', 'int32 startIndex, int32 length)', 'string'),
  \ dotnet#method('InternalSubStringWithChecks(', 'int32 startIndex, int32 length, bool fAlwaysCopy)', 'string'),
  \ dotnet#method('Trim(', 'char[] trimChars)', 'string'),
  \ dotnet#method('TrimStart(', 'char[] trimChars)', 'string'),
  \ dotnet#method('TrimEnd(', 'char[] trimChars)', 'string'),
  \ dotnet#method('String(', 'char* value) internalcall', 'void'),
  \ dotnet#method('String(', 'char* value, int32 startIndex, int32 length) internalcall', 'void'),
  \ dotnet#method('String(', 'int8* value) internalcall', 'void'),
  \ dotnet#method('String(', 'int8* value, int32 startIndex, int32 length) internalcall', 'void'),
  \ dotnet#method('String(', 'int8* value, int32 startIndex, int32 length, Encoding enc) internalcall', 'void'),
  \ dotnet#method('CreateStringFromEncoding(', 'uint8* bytes, int32 byteLength, Encoding encoding)', 'static string'),
  \ dotnet#method('ConvertToAnsi(', 'int32 iMaxDBCSCharByteSize, bool fBestFit, bool fThrowOnUnmappableChar, [out] int32& cbLength)', 'uint8[]'),
  \ dotnet#method('IsNormalized(', ')', 'bool'),
  \ dotnet#method('IsNormalized(', 'NormalizationForm normalizationForm)', 'bool'),
  \ dotnet#method('Normalize(', ')', 'string'),
  \ dotnet#method('Normalize(', 'NormalizationForm normalizationForm)', 'string'),
  \ dotnet#method('FastAllocateString(', 'int32 length) internalcall', 'static string'),
  \ dotnet#method('String(', 'char[] value, int32 startIndex, int32 length) internalcall', 'void'),
  \ dotnet#method('String(', 'char[] value) internalcall', 'void'),
  \ dotnet#method('wstrcpy(', 'char* dmem, char* smem, int32 charCount)', 'static void'),
  \ dotnet#method('String(', 'char c, int32 count) internalcall', 'void'),
  \ dotnet#method('Compare(', 'string strA, string strB)', 'static int32'),
  \ dotnet#method('Compare(', 'string strA, string strB, bool ignoreCase)', 'static int32'),
  \ dotnet#method('Compare(', 'string strA, string strB, StringComparison comparisonType)', 'static int32'),
  \ dotnet#method('Compare(', 'string strA, string strB, CultureInfo culture, CompareOptions options)', 'static int32'),
  \ dotnet#method('Compare(', 'string strA, string strB, bool ignoreCase, CultureInfo culture)', 'static int32'),
  \ dotnet#method('Compare(', 'string strA, int32 indexA, string strB, int32 indexB, int32 length)', 'static int32'),
  \ dotnet#method('Compare(', 'string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase)', 'static int32'),
  \ dotnet#method('Compare(', 'string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase, CultureInfo culture)', 'static int32'),
  \ dotnet#method('Compare(', 'string strA, int32 indexA, string strB, int32 indexB, int32 length, CultureInfo culture, CompareOptions options)', 'static int32'),
  \ dotnet#method('Compare(', 'string strA, int32 indexA, string strB, int32 indexB, int32 length, StringComparison comparisonType)', 'static int32'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'string strB)', 'int32'),
  \ dotnet#method('CompareOrdinal(', 'string strA, string strB)', 'static int32'),
  \ dotnet#method('CompareOrdinal(', 'string strA, int32 indexA, string strB, int32 indexB, int32 length)', 'static int32'),
  \ dotnet#method('Contains(', 'string value)', 'bool'),
  \ dotnet#method('EndsWith(', 'string value)', 'bool'),
  \ dotnet#method('EndsWith(', 'string value, StringComparison comparisonType)', 'bool'),
  \ dotnet#method('EndsWith(', 'string value, bool ignoreCase, CultureInfo culture)', 'bool'),
  \ dotnet#method('EndsWith(', 'char value)', 'bool'),
  \ dotnet#method('IndexOf(', 'char value)', 'int32'),
  \ dotnet#method('IndexOf(', 'char value, int32 startIndex)', 'int32'),
  \ dotnet#method('IndexOf(', 'char value, int32 startIndex, int32 count) internalcall', 'int32'),
  \ dotnet#method('IndexOfAny(', 'char[] anyOf)', 'int32'),
  \ dotnet#method('IndexOfAny(', 'char[] anyOf, int32 startIndex)', 'int32'),
  \ dotnet#method('IndexOfAny(', 'char[] anyOf, int32 startIndex, int32 count) internalcall', 'int32'),
  \ dotnet#method('IndexOf(', 'string value)', 'int32'),
  \ dotnet#method('IndexOf(', 'string value, int32 startIndex)', 'int32'),
  \ dotnet#method('IndexOf(', 'string value, int32 startIndex, int32 count)', 'int32'),
  \ dotnet#method('IndexOf(', 'string value, StringComparison comparisonType)', 'int32'),
  \ dotnet#method('IndexOf(', 'string value, int32 startIndex, StringComparison comparisonType)', 'int32'),
  \ dotnet#method('IndexOf(', 'string value, int32 startIndex, int32 count, StringComparison comparisonType)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'char value)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'char value, int32 startIndex)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'char value, int32 startIndex, int32 count) internalcall', 'int32'),
  \ dotnet#method('LastIndexOfAny(', 'char[] anyOf)', 'int32'),
  \ dotnet#method('LastIndexOfAny(', 'char[] anyOf, int32 startIndex)', 'int32'),
  \ dotnet#method('LastIndexOfAny(', 'char[] anyOf, int32 startIndex, int32 count) internalcall', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string value)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string value, int32 startIndex)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string value, int32 startIndex, int32 count)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string value, StringComparison comparisonType)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string value, int32 startIndex, StringComparison comparisonType)', 'int32'),
  \ dotnet#method('LastIndexOf(', 'string value, int32 startIndex, int32 count, StringComparison comparisonType)', 'int32'),
  \ dotnet#method('PadLeft(', 'int32 totalWidth)', 'string'),
  \ dotnet#method('PadLeft(', 'int32 totalWidth, char paddingChar)', 'string'),
  \ dotnet#method('PadRight(', 'int32 totalWidth)', 'string'),
  \ dotnet#method('PadRight(', 'int32 totalWidth, char paddingChar)', 'string'),
  \ dotnet#method('StartsWith(', 'string value)', 'bool'),
  \ dotnet#method('StartsWith(', 'string value, StringComparison comparisonType)', 'bool'),
  \ dotnet#method('StartsWith(', 'string value, bool ignoreCase, CultureInfo culture)', 'bool'),
  \ dotnet#method('ToLower(', ')', 'string'),
  \ dotnet#method('ToLower(', 'class CultureInfo culture)', 'string'),
  \ dotnet#method('ToLowerInvariant(', ')', 'string'),
  \ dotnet#method('ToUpper(', ')', 'string'),
  \ dotnet#method('ToUpper(', 'class CultureInfo culture)', 'string'),
  \ dotnet#method('ToUpperInvariant(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('Trim(', ')', 'string'),
  \ dotnet#method('Insert(', 'int32 startIndex, string value)', 'string'),
  \ dotnet#method('Replace(', 'char oldChar, char newChar)', 'string'),
  \ dotnet#method('Replace(', 'string oldValue, string newValue)', 'string'),
  \ dotnet#method('Remove(', 'int32 startIndex, int32 count)', 'string'),
  \ dotnet#method('Remove(', 'int32 startIndex)', 'string'),
  \ dotnet#method('Format(', 'string format, object arg0)', 'static string'),
  \ dotnet#method('Format(', 'string format, object arg0, object arg1)', 'static string'),
  \ dotnet#method('Format(', 'string format, object arg0, object arg1, object arg2)', 'static string'),
  \ dotnet#method('Format(', 'string format, object[] args)', 'static string'),
  \ dotnet#method('Format(', 'class IFormatProvider provider, string format, object[] args)', 'static string'),
  \ dotnet#method('Copy(', 'string str)', 'static string'),
  \ dotnet#method('Concat(', 'object arg0)', 'static string'),
  \ dotnet#method('Concat(', 'object arg0, object arg1)', 'static string'),
  \ dotnet#method('Concat(', 'object arg0, object arg1, object arg2)', 'static string'),
  \ dotnet#method('Concat(', 'object arg0, object arg1, object arg2, object arg3)', 'static vararg string'),
  \ dotnet#method('Concat(', 'object[] args)', 'static string'),
  \ dotnet#method('Concat(', 'class IEnumerable values)', 'static string'),
  \ dotnet#method('Concat(', 'class IEnumerable values)', 'static string'),
  \ dotnet#method('Concat(', 'string str0, string str1)', 'static string'),
  \ dotnet#method('Concat(', 'string str0, string str1, string str2)', 'static string'),
  \ dotnet#method('Concat(', 'string str0, string str1, string str2, string str3)', 'static string'),
  \ dotnet#method('Concat(', 'string[] values)', 'static string'),
  \ dotnet#method('Intern(', 'string str)', 'static string'),
  \ dotnet#method('IsInterned(', 'string str)', 'static string'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ dotnet#method('IsFastSort(', ') internalcall', 'bool'),
  \ dotnet#method('IsAscii(', ') internalcall', 'bool'),
  \ dotnet#method('SetTrailByte(', 'uint8 data) internalcall', 'void'),
  \ dotnet#method('TryGetTrailByte(', '[out] uint8& data) internalcall', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', 'CharEnumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('InternalCopy(', 'string src, int dest, int32 len)', 'static void'),
  \ dotnet#method('String(', ')', 'static void .'),
  \ dotnet#prop('FirstChar', 'char'),
  \ dotnet#prop('Chars(int32)', 'char'),
  \ dotnet#prop('Length', 'int32'),
  \ ])

call dotnet#class('StringComparer', 'Object', [ 
  \ dotnet#method('get_InvariantCulture(', ')', 'static StringComparer'),
  \ dotnet#method('get_InvariantCultureIgnoreCase(', ')', 'static StringComparer'),
  \ dotnet#method('get_CurrentCulture(', ')', 'static StringComparer'),
  \ dotnet#method('get_CurrentCultureIgnoreCase(', ')', 'static StringComparer'),
  \ dotnet#method('get_Ordinal(', ')', 'static StringComparer'),
  \ dotnet#method('get_OrdinalIgnoreCase(', ')', 'static StringComparer'),
  \ dotnet#method('Create(', 'class CultureInfo culture, bool ignoreCase)', 'static StringComparer'),
  \ dotnet#method('Compare(', 'object x, object y)', 'int32'),
  \ dotnet#method('Equals(', 'object x, object y)', 'bool'),
  \ dotnet#method('GetHashCode(', 'object obj)', 'int32'),
  \ dotnet#method('Compare(', 'string x, string y)', 'abstract int32'),
  \ dotnet#method('Equals(', 'string x, string y)', 'abstract bool'),
  \ dotnet#method('GetHashCode(', 'string obj)', 'abstract int32'),
  \ dotnet#method('StringComparer(', ')', 'void'),
  \ dotnet#method('StringComparer(', ')', 'static void .'),
  \ dotnet#prop('InvariantCulture', 'StringComparer'),
  \ dotnet#prop('InvariantCultureIgnoreCase', 'StringComparer'),
  \ dotnet#prop('CurrentCulture', 'StringComparer'),
  \ dotnet#prop('CurrentCultureIgnoreCase', 'StringComparer'),
  \ dotnet#prop('Ordinal', 'StringComparer'),
  \ dotnet#prop('OrdinalIgnoreCase', 'StringComparer'),
  \ ])

call dotnet#class('DateTime', 'ValueType', [ 
  \ dotnet#field('dateData', 'uint64'),
  \ dotnet#method('DateTime(', 'int64 ticks)', 'void'),
  \ dotnet#method('DateTime(', 'int64 ticks, DateTimeKind kind)', 'void'),
  \ dotnet#method('DateTime(', 'int64 ticks, DateTimeKind kind, bool isAmbiguousDst)', 'void'),
  \ dotnet#method('DateTime(', 'int32 year, int32 month, int32 day)', 'void'),
  \ dotnet#method('DateTime(', 'int32 year, int32 month, int32 day, Calendar calendar)', 'void'),
  \ dotnet#method('DateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second)', 'void'),
  \ dotnet#method('DateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, DateTimeKind kind)', 'void'),
  \ dotnet#method('DateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, Calendar calendar)', 'void'),
  \ dotnet#method('DateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond)', 'void'),
  \ dotnet#method('DateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, DateTimeKind kind)', 'void'),
  \ dotnet#method('DateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, Calendar calendar)', 'void'),
  \ dotnet#method('DateTime(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, Calendar calendar, DateTimeKind kind)', 'void'),
  \ dotnet#method('get_InternalTicks(', ')', 'int64'),
  \ dotnet#method('Add(', 'TimeSpan value)', 'DateTime'),
  \ dotnet#method('AddDays(', 'float64 value)', 'DateTime'),
  \ dotnet#method('AddHours(', 'float64 value)', 'DateTime'),
  \ dotnet#method('AddMilliseconds(', 'float64 value)', 'DateTime'),
  \ dotnet#method('AddMinutes(', 'float64 value)', 'DateTime'),
  \ dotnet#method('AddMonths(', 'int32 months)', 'DateTime'),
  \ dotnet#method('AddSeconds(', 'float64 value)', 'DateTime'),
  \ dotnet#method('AddTicks(', 'int64 value)', 'DateTime'),
  \ dotnet#method('AddYears(', 'int32 value)', 'DateTime'),
  \ dotnet#method('Compare(', 'DateTime t1, DateTime t2)', 'static int32'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'DateTime value)', 'int32'),
  \ dotnet#method('DaysInMonth(', 'int32 year, int32 month)', 'static int32'),
  \ dotnet#method('DoubleDateToTicks(', 'float64 value)', 'static int64'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('Equals(', 'DateTime value)', 'bool'),
  \ dotnet#method('Equals(', 'DateTime t1, DateTime t2)', 'static bool'),
  \ dotnet#method('FromBinary(', 'int64 dateData)', 'static DateTime'),
  \ dotnet#method('FromBinaryRaw(', 'int64 dateData)', 'static DateTime'),
  \ dotnet#method('FromFileTime(', 'int64 fileTime)', 'static DateTime'),
  \ dotnet#method('FromFileTimeUtc(', 'int64 fileTime)', 'static DateTime'),
  \ dotnet#method('FromOADate(', 'float64 d)', 'static DateTime'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('IsDaylightSavingTime(', ')', 'bool'),
  \ dotnet#method('SpecifyKind(', 'DateTime value, DateTimeKind kind)', 'static DateTime'),
  \ dotnet#method('ToBinary(', ')', 'int64'),
  \ dotnet#method('ToBinaryRaw(', ')', 'int64'),
  \ dotnet#method('get_Date(', ')', 'DateTime'),
  \ dotnet#method('get_Day(', ')', 'int32'),
  \ dotnet#method('get_DayOfWeek(', ')', 'DayOfWeek'),
  \ dotnet#method('get_DayOfYear(', ')', 'int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_Hour(', ')', 'int32'),
  \ dotnet#method('IsAmbiguousDaylightSavingTime(', ')', 'bool'),
  \ dotnet#method('get_Kind(', ')', 'DateTimeKind'),
  \ dotnet#method('get_Millisecond(', ')', 'int32'),
  \ dotnet#method('get_Minute(', ')', 'int32'),
  \ dotnet#method('get_Month(', ')', 'int32'),
  \ dotnet#method('get_Now(', ')', 'static DateTime'),
  \ dotnet#method('get_UtcNow(', ')', 'static DateTime'),
  \ dotnet#method('GetSystemTimeAsFileTime(', ') internalcall', 'static int64'),
  \ dotnet#method('get_Second(', ')', 'int32'),
  \ dotnet#method('get_Ticks(', ')', 'int64'),
  \ dotnet#method('get_TimeOfDay(', ')', 'TimeSpan'),
  \ dotnet#method('get_Today(', ')', 'static DateTime'),
  \ dotnet#method('get_Year(', ')', 'int32'),
  \ dotnet#method('IsLeapYear(', 'int32 year)', 'static bool'),
  \ dotnet#method('Parse(', 'string s)', 'static DateTime'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static DateTime'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider, DateTimeStyles styles)', 'static DateTime'),
  \ dotnet#method('ParseExact(', 'string s, string format, IFormatProvider provider)', 'static DateTime'),
  \ dotnet#method('ParseExact(', 'string s, string format, IFormatProvider provider, DateTimeStyles style)', 'static DateTime'),
  \ dotnet#method('ParseExact(', 'string s, string[] formats, IFormatProvider provider, DateTimeStyles style)', 'static DateTime'),
  \ dotnet#method('Subtract(', 'DateTime value)', 'TimeSpan'),
  \ dotnet#method('Subtract(', 'TimeSpan value)', 'DateTime'),
  \ dotnet#method('ToOADate(', ')', 'float64'),
  \ dotnet#method('ToFileTime(', ')', 'int64'),
  \ dotnet#method('ToFileTimeUtc(', ')', 'int64'),
  \ dotnet#method('ToLocalTime(', ')', 'DateTime'),
  \ dotnet#method('ToLongDateString(', ')', 'string'),
  \ dotnet#method('ToLongTimeString(', ')', 'string'),
  \ dotnet#method('ToShortDateString(', ')', 'string'),
  \ dotnet#method('ToShortTimeString(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('ToUniversalTime(', ')', 'DateTime'),
  \ dotnet#method('TryParse(', 'string s, [out] DateTime& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, IFormatProvider provider, DateTimeStyles styles, [out] DateTime& result)', 'static bool'),
  \ dotnet#method('TryParseExact(', 'string s, string format, IFormatProvider provider, DateTimeStyles style, [out] DateTime& result)', 'static bool'),
  \ dotnet#method('TryParseExact(', 'string s, string[] formats, IFormatProvider provider, DateTimeStyles style, [out] DateTime& result)', 'static bool'),
  \ dotnet#method('op_Addition(', 'DateTime d, TimeSpan t)', 'static DateTime'),
  \ dotnet#method('op_Subtraction(', 'DateTime d, TimeSpan t)', 'static DateTime'),
  \ dotnet#method('op_Subtraction(', 'DateTime d1, DateTime d2)', 'static TimeSpan'),
  \ dotnet#method('op_Equality(', 'DateTime d1, DateTime d2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'DateTime d1, DateTime d2)', 'static bool'),
  \ dotnet#method('op_LessThan(', 'DateTime t1, DateTime t2)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'DateTime t1, DateTime t2)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'DateTime t1, DateTime t2)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'DateTime t1, DateTime t2)', 'static bool'),
  \ dotnet#method('GetDateTimeFormats(', ')', 'string[]'),
  \ dotnet#method('GetDateTimeFormats(', 'class IFormatProvider provider)', 'string[]'),
  \ dotnet#method('GetDateTimeFormats(', 'char format)', 'string[]'),
  \ dotnet#method('GetDateTimeFormats(', 'char format, IFormatProvider provider)', 'string[]'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ dotnet#method('TryCreate(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, [out] DateTime& result)', 'static bool'),
  \ dotnet#method('DateTime(', ')', 'static void .'),
  \ dotnet#prop('InternalTicks', 'int64'),
  \ dotnet#prop('Date', 'DateTime'),
  \ dotnet#prop('Day', 'int32'),
  \ dotnet#prop('DayOfWeek', 'DayOfWeek'),
  \ dotnet#prop('DayOfYear', 'int32'),
  \ dotnet#prop('Hour', 'int32'),
  \ dotnet#prop('Kind', 'DateTimeKind'),
  \ dotnet#prop('Millisecond', 'int32'),
  \ dotnet#prop('Minute', 'int32'),
  \ dotnet#prop('Month', 'int32'),
  \ dotnet#prop('Now', 'DateTime'),
  \ dotnet#prop('UtcNow', 'DateTime'),
  \ dotnet#prop('Second', 'int32'),
  \ dotnet#prop('Ticks', 'int64'),
  \ dotnet#prop('TimeOfDay', 'TimeSpan'),
  \ dotnet#prop('Today', 'DateTime'),
  \ dotnet#prop('Year', 'int32'),
  \ ])

call dotnet#class('DateTimeOffset', 'ValueType', [ 
  \ dotnet#field('m_dateTime', 'DateTime'),
  \ dotnet#field('m_offsetMinutes', 'int16'),
  \ dotnet#method('DateTimeOffset(', 'int64 ticks, TimeSpan offset)', 'void'),
  \ dotnet#method('DateTimeOffset(', 'DateTime dateTime)', 'void'),
  \ dotnet#method('DateTimeOffset(', 'DateTime dateTime, TimeSpan offset)', 'void'),
  \ dotnet#method('DateTimeOffset(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, TimeSpan offset)', 'void'),
  \ dotnet#method('DateTimeOffset(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, TimeSpan offset)', 'void'),
  \ dotnet#method('DateTimeOffset(', 'int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, Calendar calendar, TimeSpan offset)', 'void'),
  \ dotnet#method('get_Now(', ')', 'static'),
  \ dotnet#method('get_UtcNow(', ')', 'static'),
  \ dotnet#method('get_DateTime(', ')', 'DateTime'),
  \ dotnet#method('get_UtcDateTime(', ')', 'DateTime'),
  \ dotnet#method('get_LocalDateTime(', ')', 'DateTime'),
  \ dotnet#method('ToOffset(', 'TimeSpan offset)', 'DateTimeOffset'),
  \ dotnet#method('get_Date(', ')', 'DateTime'),
  \ dotnet#method('get_Day(', ')', 'int32'),
  \ dotnet#method('get_DayOfWeek(', ')', 'DayOfWeek'),
  \ dotnet#method('get_DayOfYear(', ')', 'int32'),
  \ dotnet#method('get_Hour(', ')', 'int32'),
  \ dotnet#method('get_Millisecond(', ')', 'int32'),
  \ dotnet#method('get_Minute(', ')', 'int32'),
  \ dotnet#method('get_Month(', ')', 'int32'),
  \ dotnet#method('get_Offset(', ')', 'TimeSpan'),
  \ dotnet#method('get_Second(', ')', 'int32'),
  \ dotnet#method('get_Ticks(', ')', 'int64'),
  \ dotnet#method('get_UtcTicks(', ')', 'int64'),
  \ dotnet#method('get_TimeOfDay(', ')', 'TimeSpan'),
  \ dotnet#method('get_Year(', ')', 'int32'),
  \ dotnet#method('Add(', 'TimeSpan timeSpan)', 'DateTimeOffset'),
  \ dotnet#method('AddDays(', 'float64 days)', 'DateTimeOffset'),
  \ dotnet#method('AddHours(', 'float64 hours)', 'DateTimeOffset'),
  \ dotnet#method('AddMilliseconds(', 'float64 milliseconds)', 'DateTimeOffset'),
  \ dotnet#method('AddMinutes(', 'float64 minutes)', 'DateTimeOffset'),
  \ dotnet#method('AddMonths(', 'int32 months)', 'DateTimeOffset'),
  \ dotnet#method('AddSeconds(', 'float64 seconds)', 'DateTimeOffset'),
  \ dotnet#method('AddTicks(', 'int64 ticks)', 'DateTimeOffset'),
  \ dotnet#method('AddYears(', 'int32 years)', 'DateTimeOffset'),
  \ dotnet#method('Compare(', 'DateTimeOffset first, DateTimeOffset second)', 'static int32'),
  \ dotnet#method('CompareTo(', 'object obj)', 'int32 '),
  \ dotnet#method('CompareTo(', 'DateTimeOffset other)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'DateTimeOffset other)', 'bool'),
  \ dotnet#method('EqualsExact(', 'DateTimeOffset other)', 'bool'),
  \ dotnet#method('Equals(', 'DateTimeOffset first, DateTimeOffset second)', 'static bool'),
  \ dotnet#method('FromFileTime(', 'int64 fileTime)', 'static DateTimeOffset'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string input)', 'static DateTimeOffset'),
  \ dotnet#method('Parse(', 'string input, IFormatProvider formatProvider)', 'static DateTimeOffset'),
  \ dotnet#method('Parse(', 'string input, IFormatProvider formatProvider, DateTimeStyles styles)', 'static DateTimeOffset'),
  \ dotnet#method('ParseExact(', 'string input, string format, IFormatProvider formatProvider)', 'static DateTimeOffset'),
  \ dotnet#method('ParseExact(', 'string input, string format, IFormatProvider formatProvider, DateTimeStyles styles)', 'static DateTimeOffset'),
  \ dotnet#method('ParseExact(', 'string input, string[] formats, IFormatProvider formatProvider, DateTimeStyles styles)', 'static DateTimeOffset'),
  \ dotnet#method('Subtract(', 'DateTimeOffset value)', 'TimeSpan'),
  \ dotnet#method('Subtract(', 'TimeSpan value)', 'DateTimeOffset'),
  \ dotnet#method('ToFileTime(', ')', 'int64'),
  \ dotnet#method('ToLocalTime(', ')', 'DateTimeOffset'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider formatProvider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider formatProvider)', 'string'),
  \ dotnet#method('ToUniversalTime(', ')', 'DateTimeOffset'),
  \ dotnet#method('TryParse(', 'string input, [out] DateTimeOffset& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string input, IFormatProvider formatProvider, DateTimeStyles styles, [out] DateTimeOffset& result)', 'static bool'),
  \ dotnet#method('TryParseExact(', 'string input, string format, IFormatProvider formatProvider, DateTimeStyles styles, [out] DateTimeOffset& result)', 'static bool'),
  \ dotnet#method('TryParseExact(', 'string input, string[] formats, IFormatProvider formatProvider, DateTimeStyles styles, [out] DateTimeOffset& result)', 'static bool'),
  \ dotnet#method('op_Implicit(', 'DateTime dateTime)', 'static'),
  \ dotnet#method('op_Addition(', 'DateTimeOffset dateTimeOffset, TimeSpan timeSpan)', 'static'),
  \ dotnet#method('op_Subtraction(', 'DateTimeOffset dateTimeOffset, TimeSpan timeSpan)', 'static'),
  \ dotnet#method('op_Subtraction(', 'DateTimeOffset left, DateTimeOffset right)', 'static TimeSpan'),
  \ dotnet#method('op_Equality(', 'DateTimeOffset left, DateTimeOffset right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'DateTimeOffset left, DateTimeOffset right)', 'static bool'),
  \ dotnet#method('op_LessThan(', 'DateTimeOffset left, DateTimeOffset right)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'DateTimeOffset left, DateTimeOffset right)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'DateTimeOffset left, DateTimeOffset right)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'DateTimeOffset left, DateTimeOffset right)', 'static bool'),
  \ dotnet#method('DateTimeOffset(', ')', 'static void .'),
  \ dotnet#prop('Now', 'DateTimeOffset'),
  \ dotnet#prop('UtcNow', 'DateTimeOffset'),
  \ dotnet#prop('DateTime', 'DateTime'),
  \ dotnet#prop('UtcDateTime', 'DateTime'),
  \ dotnet#prop('LocalDateTime', 'DateTime'),
  \ dotnet#prop('Date', 'DateTime'),
  \ dotnet#prop('Day', 'int32'),
  \ dotnet#prop('DayOfWeek', 'DayOfWeek'),
  \ dotnet#prop('DayOfYear', 'int32'),
  \ dotnet#prop('Hour', 'int32'),
  \ dotnet#prop('Millisecond', 'int32'),
  \ dotnet#prop('Minute', 'int32'),
  \ dotnet#prop('Month', 'int32'),
  \ dotnet#prop('Offset', 'TimeSpan'),
  \ dotnet#prop('Second', 'int32'),
  \ dotnet#prop('Ticks', 'int64'),
  \ dotnet#prop('UtcTicks', 'int64'),
  \ dotnet#prop('TimeOfDay', 'TimeSpan'),
  \ dotnet#prop('Year', 'int32'),
  \ ])

call dotnet#class('SystemException', 'Exception', [ 
  \ dotnet#method('SystemException(', ')', 'void'),
  \ dotnet#method('SystemException(', 'string message)', 'void'),
  \ dotnet#method('SystemException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('SystemException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('OutOfMemoryException', 'SystemException', [ 
  \ dotnet#method('OutOfMemoryException(', ')', 'void'),
  \ dotnet#method('OutOfMemoryException(', 'string message)', 'void'),
  \ dotnet#method('OutOfMemoryException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('OutOfMemoryException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('StackOverflowException', 'SystemException', [ 
  \ dotnet#method('StackOverflowException(', ')', 'void'),
  \ dotnet#method('StackOverflowException(', 'string message)', 'void'),
  \ dotnet#method('StackOverflowException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('StackOverflowException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('DataMisalignedException', 'SystemException', [ 
  \ dotnet#method('DataMisalignedException(', ')', 'void'),
  \ dotnet#method('DataMisalignedException(', 'string message)', 'void'),
  \ dotnet#method('DataMisalignedException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('DataMisalignedException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ExecutionEngineException', 'SystemException', [ 
  \ dotnet#method('ExecutionEngineException(', ')', 'void'),
  \ dotnet#method('ExecutionEngineException(', 'string message)', 'void'),
  \ dotnet#method('ExecutionEngineException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('ExecutionEngineException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('MemberAccessException', 'SystemException', [ 
  \ dotnet#method('MemberAccessException(', ')', 'void'),
  \ dotnet#method('MemberAccessException(', 'string message)', 'void'),
  \ dotnet#method('MemberAccessException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('MemberAccessException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('Activator', 'Object', [ 
  \ dotnet#method('Activator(', ')', 'void'),
  \ dotnet#method('CreateInstance(', 'class Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture)', 'static object'),
  \ dotnet#method('CreateInstance(', 'class Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)', 'static object'),
  \ dotnet#method('CreateInstance(', 'class Type type, object[] args)', 'static object'),
  \ dotnet#method('CreateInstance(', 'class Type type, object[] args, object[] activationAttributes)', 'static object'),
  \ dotnet#method('CreateInstance(', 'class Type type)', 'static object'),
  \ dotnet#method('CreateInstance(', 'string assemblyName, string typeName) noinlining', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'string assemblyName, string typeName, object[] activationAttributes) noinlining', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'class Type type, bool nonPublic)', 'static object'),
  \ dotnet#method('CreateInstance(', ')', 'static !!T'),
  \ dotnet#method('CreateInstanceFrom(', 'string assemblyFile, string typeName)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstanceFrom(', 'string assemblyFile, string typeName, object[] activationAttributes)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityInfo) noinlining', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes) noinlining', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityInfo, StackCrawlMark& stackMark)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstanceFrom(', 'string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityInfo)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstanceFrom(', 'string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'class AppDomain domain, string assemblyName, string typeName)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'class AppDomain domain, string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'class AppDomain domain, string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstanceFrom(', 'class AppDomain domain, string assemblyFile, string typeName)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstanceFrom(', 'class AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstanceFrom(', 'class AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'class ActivationContext activationContext)', 'static ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'class ActivationContext activationContext, string[] activationCustomData)', 'static ObjectHandle'),
  \ dotnet#method('CreateComInstanceFrom(', 'string assemblyName, string typeName)', 'static ObjectHandle'),
  \ dotnet#method('CreateComInstanceFrom(', 'string assemblyName, string typeName, uint8[] hashValue, AssemblyHashAlgorithm hashAlgorithm)', 'static ObjectHandle'),
  \ dotnet#method('GetObject(', 'class Type type, string url)', 'static object'),
  \ dotnet#method('GetObject(', 'class Type type, string url, object state)', 'static object'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ ])

call dotnet#class('AccessViolationException', 'SystemException', [ 
  \ dotnet#method('AccessViolationException(', ')', 'void'),
  \ dotnet#method('AccessViolationException(', 'string message)', 'void'),
  \ dotnet#method('AccessViolationException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('AccessViolationException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ApplicationException', 'Exception', [ 
  \ dotnet#method('ApplicationException(', ')', 'void'),
  \ dotnet#method('ApplicationException(', 'string message)', 'void'),
  \ dotnet#method('ApplicationException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('ApplicationException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('EventArgs', 'Object', [ 
  \ dotnet#method('EventArgs(', ')', 'void'),
  \ dotnet#method('EventArgs(', ')', 'static void .'),
  \ ])

call dotnet#class('ResolveEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_RequestingAssembly(', ')', 'Assembly'),
  \ dotnet#method('ResolveEventArgs(', 'string name)', 'void'),
  \ dotnet#method('ResolveEventArgs(', 'string name, Assembly requestingAssembly)', 'void'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('RequestingAssembly', 'Assembly'),
  \ ])

call dotnet#class('AssemblyLoadEventArgs', 'EventArgs', [ 
  \ dotnet#method('get_LoadedAssembly(', ')', 'Assembly'),
  \ dotnet#method('AssemblyLoadEventArgs(', 'class Assembly loadedAssembly)', 'void'),
  \ dotnet#prop('LoadedAssembly', 'Assembly'),
  \ ])

call dotnet#class('ResolveEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ResolveEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ResolveEventArgs args)', ''),
  \ dotnet#method('BeginInvoke(', 'object sender, ResolveEventArgs args, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('AssemblyLoadEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('AssemblyLoadEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, AssemblyLoadEventArgs args)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, AssemblyLoadEventArgs args, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('AppDomainInitializer', 'MulticastDelegate', [ 
  \ dotnet#method('AppDomainInitializer(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'string[] args)', 'void'),
  \ dotnet#method('BeginInvoke(', 'string[] args, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('MarshalByRefObject', 'Object', [ 
  \ dotnet#method('GetComIUnknown(', 'bool fIsBeingMarshalled)', 'int'),
  \ dotnet#method('GetComIUnknown(', 'class MarshalByRefObject o) internalcall', 'static int'),
  \ dotnet#method('IsInstanceOfType(', 'class Type T)', 'bool'),
  \ dotnet#method('InvokeMember(', 'string name, BindingFlags invokeAttr, Binder binder, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)', 'object'),
  \ dotnet#method('MemberwiseClone(', 'bool cloneIdentity)', 'MarshalByRefObject'),
  \ dotnet#method('GetIdentity(', 'class MarshalByRefObject obj, [out] bool& fServer)', 'static Identity'),
  \ dotnet#method('GetIdentity(', 'class MarshalByRefObject obj)', 'static Identity'),
  \ dotnet#method('__RaceSetServerIdentity(', 'class ServerIdentity id)', 'ServerIdentity'),
  \ dotnet#method('__ResetServerIdentity(', ')', 'void'),
  \ dotnet#method('GetLifetimeService(', ')', 'object'),
  \ dotnet#method('InitializeLifetimeService(', ')', 'object'),
  \ dotnet#method('CreateObjRef(', 'class Type requestedType)', ''),
  \ dotnet#method('CanCastToXmlType(', 'string xmlTypeName, string xmlTypeNamespace)', 'bool'),
  \ dotnet#method('CanCastToXmlTypeHelper(', 'class RuntimeType castType, MarshalByRefObject o)', 'static bool'),
  \ dotnet#method('MarshalByRefObject(', ')', 'void'),
  \ ])

call dotnet#class('AppDomain', 'MarshalByRefObject', [ 
  \ dotnet#method('add_AssemblyLoad(', 'class AssemblyLoadEventHandler value)', 'void'),
  \ dotnet#method('remove_AssemblyLoad(', 'class AssemblyLoadEventHandler value)', 'void'),
  \ dotnet#method('add_TypeResolve(', 'class ResolveEventHandler value)', 'void'),
  \ dotnet#method('remove_TypeResolve(', 'class ResolveEventHandler value)', 'void'),
  \ dotnet#method('add_ResourceResolve(', 'class ResolveEventHandler value)', 'void'),
  \ dotnet#method('remove_ResourceResolve(', 'class ResolveEventHandler value)', 'void'),
  \ dotnet#method('add_AssemblyResolve(', 'class ResolveEventHandler value)', 'void'),
  \ dotnet#method('remove_AssemblyResolve(', 'class ResolveEventHandler value)', 'void'),
  \ dotnet#method('add_ReflectionOnlyAssemblyResolve(', 'class ResolveEventHandler value)', 'void'),
  \ dotnet#method('remove_ReflectionOnlyAssemblyResolve(', 'class ResolveEventHandler value)', 'void'),
  \ dotnet#method('GetType(', ')', 'Type'),
  \ dotnet#method('GetNativeHandle(', ')', 'AppDomainHandle'),
  \ dotnet#method('DisableFusionUpdatesFromADManager(', ')', 'bool'),
  \ dotnet#method('GetAppDomainManagerType(', '[out] string& assembly, [out] string& type)', 'void'),
  \ dotnet#method('get_PartialTrustVisibleAssemblies(', ')', 'string[]'),
  \ dotnet#method('set_PartialTrustVisibleAssemblies(', 'string[] value)', 'void'),
  \ dotnet#method('get_DomainManager(', ')', 'AppDomainManager'),
  \ dotnet#method('get_HostSecurityManager(', ')', '.method'),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access) noinlining', ''),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, IEnumerable assemblyAttributes) noinlining', 'AssemblyBuilder'),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, IEnumerable assemblyAttributes, SecurityContextSource securityContextSource) noinlining', 'AssemblyBuilder'),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, string dir) noinlining', ''),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, Evidence evidence) noinlining', ''),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions) noinlining', ''),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence) noinlining', ''),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions) noinlining', ''),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions) noinlining', ''),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions) noinlining', ''),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized) noinlining', ''),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized, IEnumerable assemblyAttributes) noinlining', 'AssemblyBuilder'),
  \ dotnet#method('DefineDynamicAssembly(', 'class AssemblyName name, AssemblyBuilderAccess access, string dir, bool isSynchronized, IEnumerable assemblyAttributes) noinlining', 'AssemblyBuilder'),
  \ dotnet#method('ApplyPolicy(', 'string assemblyName)', 'string'),
  \ dotnet#method('CreateInstance(', 'string assemblyName, string typeName)', ''),
  \ dotnet#method('InternalCreateInstanceWithNoSecurity(', 'string assemblyName, string typeName)', 'ObjectHandle'),
  \ dotnet#method('CreateInstanceFrom(', 'string assemblyFile, string typeName)', ''),
  \ dotnet#method('InternalCreateInstanceFromWithNoSecurity(', 'string assemblyName, string typeName)', 'ObjectHandle'),
  \ dotnet#method('CreateComInstanceFrom(', 'string assemblyName, string typeName)', 'ObjectHandle'),
  \ dotnet#method('CreateComInstanceFrom(', 'string assemblyFile, string typeName, uint8[] hashValue, AssemblyHashAlgorithm hashAlgorithm)', 'ObjectHandle'),
  \ dotnet#method('CreateInstance(', 'string assemblyName, string typeName, object[] activationAttributes)', ''),
  \ dotnet#method('CreateInstanceFrom(', 'string assemblyFile, string typeName, object[] activationAttributes)', ''),
  \ dotnet#method('CreateInstance(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)', ''),
  \ dotnet#method('CreateInstance(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)', 'ObjectHandle'),
  \ dotnet#method('InternalCreateInstanceWithNoSecurity(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)', 'ObjectHandle'),
  \ dotnet#method('CreateInstanceFrom(', 'string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)', ''),
  \ dotnet#method('CreateInstanceFrom(', 'string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)', 'ObjectHandle'),
  \ dotnet#method('InternalCreateInstanceFromWithNoSecurity(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)', 'ObjectHandle'),
  \ dotnet#method('Load(', 'class AssemblyName assemblyRef) noinlining', ''),
  \ dotnet#method('Load(', 'string assemblyString) noinlining', ''),
  \ dotnet#method('Load(', 'uint8[] rawAssembly) noinlining', ''),
  \ dotnet#method('Load(', 'uint8[] rawAssembly, uint8[] rawSymbolStore) noinlining', ''),
  \ dotnet#method('Load(', 'uint8[] rawAssembly, uint8[] rawSymbolStore, Evidence securityEvidence) noinlining', ''),
  \ dotnet#method('Load(', 'class AssemblyName assemblyRef, Evidence assemblySecurity) noinlining', ''),
  \ dotnet#method('Load(', 'string assemblyString, Evidence assemblySecurity) noinlining', ''),
  \ dotnet#method('ExecuteAssembly(', 'string assemblyFile)', 'int32'),
  \ dotnet#method('ExecuteAssembly(', 'string assemblyFile, Evidence assemblySecurity)', 'int32'),
  \ dotnet#method('ExecuteAssembly(', 'string assemblyFile, Evidence assemblySecurity, string[] args)', 'int32'),
  \ dotnet#method('ExecuteAssembly(', 'string assemblyFile, string[] args)', 'int32'),
  \ dotnet#method('ExecuteAssembly(', 'string assemblyFile, Evidence assemblySecurity, string[] args, uint8[] hashValue, AssemblyHashAlgorithm hashAlgorithm)', 'int32'),
  \ dotnet#method('ExecuteAssembly(', 'string assemblyFile, string[] args, uint8[] hashValue, AssemblyHashAlgorithm hashAlgorithm)', 'int32'),
  \ dotnet#method('ExecuteAssemblyByName(', 'string assemblyName)', 'int32'),
  \ dotnet#method('ExecuteAssemblyByName(', 'string assemblyName, Evidence assemblySecurity)', 'int32'),
  \ dotnet#method('ExecuteAssemblyByName(', 'string assemblyName, Evidence assemblySecurity, string[] args)', 'int32'),
  \ dotnet#method('ExecuteAssemblyByName(', 'string assemblyName, string[] args)', 'int32'),
  \ dotnet#method('ExecuteAssemblyByName(', 'class AssemblyName assemblyName, Evidence assemblySecurity, string[] args)', 'int32'),
  \ dotnet#method('ExecuteAssemblyByName(', 'class AssemblyName assemblyName, string[] args)', 'int32'),
  \ dotnet#method('get_CurrentDomain(', ')', 'static AppDomain'),
  \ dotnet#method('get_Evidence(', ')', ''),
  \ dotnet#method('get_EvidenceNoDemand(', ')', '.method'),
  \ dotnet#method('get_InternalEvidence(', ')', '.method'),
  \ dotnet#method('GetHostEvidence(', 'class Type type)', 'EvidenceBase'),
  \ dotnet#method('get_FriendlyName(', ')', 'string'),
  \ dotnet#method('get_BaseDirAppDomainy(', ')', 'string'),
  \ dotnet#method('get_RelativeSearchPath(', ')', 'string'),
  \ dotnet#method('get_ShadowCopyFiles(', ')', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetAssemblies(', ')', ''),
  \ dotnet#method('ReflectionOnlyGetAssemblies(', ')', 'Assembly[]'),
  \ dotnet#method('IsUnloadingForcedFinalize(', ') internalcall', 'bool'),
  \ dotnet#method('IsFinalizingForUnload(', ') internalcall', 'bool'),
  \ dotnet#method('PublishAnonymouslyHostedDynamicMethodsAssembly(', 'class RuntimeAssembly assemblyHandle) internalcall', 'static void'),
  \ dotnet#method('AppendPrivatePath(', 'string path)', 'void'),
  \ dotnet#method('ClearPrivatePath(', ')', 'void'),
  \ dotnet#method('ClearShadowCopyPath(', ')', 'void'),
  \ dotnet#method('SetCachePath(', 'string path)', 'void'),
  \ dotnet#method('SetData(', 'string name, object data)', 'void'),
  \ dotnet#method('SetData(', 'string name, object data, IPermission permission)', 'void'),
  \ dotnet#method('GetData(', 'string name)', 'object'),
  \ dotnet#method('IsCompatibilitySwitchSet(', 'string value)', 'Nullable'),
  \ dotnet#method('pinvokeimpl(', '"dll" winapi) int32 GetCurrentThreadId() preservesig', 'static'),
  \ dotnet#method('Unload(', 'class AppDomain domain)', 'static void'),
  \ dotnet#method('SetAppDomainPolicy(', 'class PolicyLevel domainPolicy)', 'void'),
  \ dotnet#method('get_ActivationContext(', ')', 'ActivationContext'),
  \ dotnet#method('get_ApplicationIdentity(', ')', 'ApplicationIdentity'),
  \ dotnet#method('get_ApplicationTrust(', ')', 'ApplicationTrust'),
  \ dotnet#method('SetThreadPrincipal(', 'class IPrincipal principal)', 'void'),
  \ dotnet#method('SetPrincipalPolicy(', 'PrincipalPolicy policy)', 'void'),
  \ dotnet#method('InitializeLifetimeService(', ')', 'object'),
  \ dotnet#method('DoCallBack(', 'class CrossAppDomainDelegate callBackDelegate)', 'void'),
  \ dotnet#method('get_DynamicDirAppDomainy(', ')', 'string'),
  \ dotnet#method('CreateDomain(', 'string friendlyName, Evidence securityInfo)', 'static AppDomain'),
  \ dotnet#method('CreateDomain(', 'string friendlyName, Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles)', 'static AppDomain'),
  \ dotnet#method('CreateDomain(', 'string friendlyName)', 'static AppDomain'),
  \ dotnet#method('AppDomain(', ')', 'void'),
  \ dotnet#method('nExecuteAssembly(', 'class RuntimeAssembly assembly, string[] args)', 'int32'),
  \ dotnet#method('CreateRemotingData(', ')', 'void'),
  \ dotnet#method('get_RemotingData(', ')', '.method'),
  \ dotnet#method('add_ProcessExit(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ProcessExit(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DomainUnload(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DomainUnload(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_UnhandledException(', 'class UnhandledExceptionEventHandler value)', 'void'),
  \ dotnet#method('remove_UnhandledException(', 'class UnhandledExceptionEventHandler value)', 'void'),
  \ dotnet#method('add_FirstChanceException(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_FirstChanceException(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_FusionStore(', ')', '.method'),
  \ dotnet#method('GetIdForUnload(', 'class AppDomain domain)', 'static int32'),
  \ dotnet#method('IsDomainIdValid(', 'int32 id) internalcall', 'static bool'),
  \ dotnet#method('GetDefaultDomain(', ') internalcall', 'static AppDomain'),
  \ dotnet#method('GetThreadPrincipal(', ')', 'IPrincipal'),
  \ dotnet#method('CreateDefaultContext(', ')', 'void'),
  \ dotnet#method('GetDefaultContext(', ')', 'Context'),
  \ dotnet#method('CheckDomainCreationEvidence(', 'class AppDomainSetup creationDomainSetup, Evidence creationEvidence)', 'static void'),
  \ dotnet#method('CreateDomain(', 'string friendlyName, Evidence securityInfo, AppDomainSetup info)', 'static AppDomain'),
  \ dotnet#method('InternalCreateDomain(', 'string friendlyName, Evidence securityInfo, AppDomainSetup info)', 'static AppDomain'),
  \ dotnet#method('CreateDomain(', 'string friendlyName, Evidence securityInfo, AppDomainSetup info, PermissionSet grantSet, StrongName[] fullTrustAssemblies)', 'static AppDomain'),
  \ dotnet#method('CreateDomain(', 'string friendlyName, Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer adInit, string[] adInitArgs)', 'static AppDomain'),
  \ dotnet#method('GetFusionContext(', ') internalcall', 'int'),
  \ dotnet#method('GetSecurityDescriptor(', ') internalcall', 'int'),
  \ dotnet#method('nCreateDomain(', 'string friendlyName, AppDomainSetup setup, Evidence providedSecurityInfo, Evidence creatorsSecurityInfo, int parentSecurityDescriptor) internalcall', 'static AppDomain'),
  \ dotnet#method('nCreateInstance(', 'string friendlyName, AppDomainSetup setup, Evidence providedSecurityInfo, Evidence creatorsSecurityInfo, int parentSecurityDescriptor) internalcall', 'static ObjRef'),
  \ dotnet#method('UpdateLoaderOptimization(', 'LoaderOptimization optimization) internalcall', 'void'),
  \ dotnet#method('SetShadowCopyPath(', 'string path)', 'void'),
  \ dotnet#method('SetShadowCopyFiles(', ')', 'void'),
  \ dotnet#method('SetDynamicBase(', 'string path)', 'void'),
  \ dotnet#method('get_SetupInformation(', ')', 'AppDomainSetup'),
  \ dotnet#method('InternalSetShadowCopyPath(', 'string path)', 'void'),
  \ dotnet#method('InternalSetShadowCopyFiles(', ')', 'void'),
  \ dotnet#method('InternalSetCachePath(', 'string path)', 'void'),
  \ dotnet#method('InternalSetPrivateBinPath(', 'string path)', 'void'),
  \ dotnet#method('InternalSetDynamicBase(', 'string path)', 'void'),
  \ dotnet#method('IsStringInterned(', 'string str) internalcall', 'string'),
  \ dotnet#method('GetOrInternString(', 'string str) internalcall', 'string'),
  \ dotnet#method('get_PermissionSet(', ')', 'PermissionSet'),
  \ dotnet#method('get_IsFullyTrusted(', ')', 'bool'),
  \ dotnet#method('get_IsHomogenous(', ')', 'bool'),
  \ dotnet#method('get_IsLegacyCasPolicyEnabled(', ')', 'bool'),
  \ dotnet#method('GetHomogenousGrantSet(', 'class Evidence evidence)', 'PermissionSet'),
  \ dotnet#method('nUnload(', 'int32 domainInternal) internalcall', 'static void'),
  \ dotnet#method('CreateInstanceAndUnwrap(', 'string assemblyName, string typeName)', 'object'),
  \ dotnet#method('CreateInstanceAndUnwrap(', 'string assemblyName, string typeName, object[] activationAttributes)', 'object'),
  \ dotnet#method('CreateInstanceAndUnwrap(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)', 'object'),
  \ dotnet#method('CreateInstanceAndUnwrap(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)', 'object'),
  \ dotnet#method('CreateInstanceFromAndUnwrap(', 'string assemblyName, string typeName)', 'object'),
  \ dotnet#method('CreateInstanceFromAndUnwrap(', 'string assemblyName, string typeName, object[] activationAttributes)', 'object'),
  \ dotnet#method('CreateInstanceFromAndUnwrap(', 'string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)', 'object'),
  \ dotnet#method('CreateInstanceFromAndUnwrap(', 'string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)', 'object'),
  \ dotnet#method('get_Id(', ')', 'int32'),
  \ dotnet#method('GetId(', ') internalcall', 'int32'),
  \ dotnet#method('IsDefaultAppDomain(', ')', 'bool'),
  \ dotnet#method('get_MonitoringIsEnabled(', ')', 'static bool'),
  \ dotnet#method('set_MonitoringIsEnabled(', 'bool value)', 'static void'),
  \ dotnet#method('get_MonitoringTotalProcessorTime(', ')', 'TimeSpan'),
  \ dotnet#method('get_MonitoringTotalAllocatedMemorySize(', ')', 'int64'),
  \ dotnet#method('get_MonitoringSurvivedMemorySize(', ')', 'int64'),
  \ dotnet#method('get_MonitoringSurvivedProcessMemorySize(', ')', 'static int64'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#event('AssemblyLoad', 'AssemblyLoadEventHandler'),
  \ dotnet#event('TypeResolve', 'ResolveEventHandler'),
  \ dotnet#event('ResourceResolve', 'ResolveEventHandler'),
  \ dotnet#event('AssemblyResolve', 'ResolveEventHandler'),
  \ dotnet#event('ReflectionOnlyAssemblyResolve', 'ResolveEventHandler'),
  \ dotnet#event('ProcessExit', 'EventHandler'),
  \ dotnet#event('DomainUnload', 'EventHandler'),
  \ dotnet#event('UnhandledException', 'UnhandledExceptionEventHandler'),
  \ dotnet#event('FirstChanceException', 'EventHandler'),
  \ dotnet#prop('PartialTrustVisibleAssemblies', 'string[]'),
  \ dotnet#prop('DomainManager', 'AppDomainManager'),
  \ dotnet#prop('HostSecurityManager', 'HostSecurityManager'),
  \ dotnet#prop('CurrentDomain', 'AppDomain'),
  \ dotnet#prop('Evidence', 'Evidence'),
  \ dotnet#prop('EvidenceNoDemand', 'Evidence'),
  \ dotnet#prop('InternalEvidence', 'Evidence'),
  \ dotnet#prop('FriendlyName', 'string'),
  \ dotnet#prop('BaseDirAppDomainy', 'string'),
  \ dotnet#prop('RelativeSearchPath', 'string'),
  \ dotnet#prop('ShadowCopyFiles', 'bool'),
  \ dotnet#prop('ActivationContext', 'ActivationContext'),
  \ dotnet#prop('ApplicationIdentity', 'ApplicationIdentity'),
  \ dotnet#prop('ApplicationTrust', 'ApplicationTrust'),
  \ dotnet#prop('DynamicDirAppDomainy', 'string'),
  \ dotnet#prop('RemotingData', 'DomainSpecificRemotingData'),
  \ dotnet#prop('FusionStore', 'AppDomainSetup'),
  \ dotnet#prop('SetupInformation', 'AppDomainSetup'),
  \ dotnet#prop('', 'PermissionSet'),
  \ dotnet#prop('IsFullyTrusted', 'bool'),
  \ dotnet#prop('IsHomogenous', 'bool'),
  \ dotnet#prop('IsLegacyCasPolicyEnabled', 'bool'),
  \ dotnet#prop('Id', 'int32'),
  \ dotnet#prop('MonitoringIsEnabled', 'bool'),
  \ dotnet#prop('MonitoringTotalProcessorTime', 'TimeSpan'),
  \ dotnet#prop('MonitoringTotalAllocatedMemorySize', 'int64'),
  \ dotnet#prop('MonitoringSurvivedMemorySize', 'int64'),
  \ dotnet#prop('MonitoringSurvivedProcessMemorySize', 'int64'),
  \ ])

call dotnet#class('CrossAppDomainDelegate', 'MulticastDelegate', [ 
  \ dotnet#method('CrossAppDomainDelegate(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', ')', 'void'),
  \ dotnet#method('BeginInvoke(', 'class AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('AppDomainManager', 'MarshalByRefObject', [ 
  \ dotnet#method('AppDomainManager(', ')', 'void'),
  \ dotnet#method('CreateDomain(', 'string friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo)', ''),
  \ dotnet#method('CreateDomainHelper(', 'string friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo)', 'static AppDomain'),
  \ dotnet#method('InitializeNewDomain(', 'class AppDomainSetup appDomainInfo)', 'void'),
  \ dotnet#method('get_InitializationFlags(', ')', 'AppDomainManagerInitializationOptions'),
  \ dotnet#method('set_InitializationFlags(', 'AppDomainManagerInitializationOptions value)', 'void'),
  \ dotnet#method('get_ApplicationActivator(', ')', ''),
  \ dotnet#method('get_HostSecurityManager(', ')', ''),
  \ dotnet#method('get_HostExecutionContextManager(', ')', ''),
  \ dotnet#method('get_EntryAssembly(', ')', ''),
  \ dotnet#method('get_CurrentAppDomainManager(', ')', 'static AppDomainManager'),
  \ dotnet#method('CheckSecuritySettings(', 'class SecurityState state)', 'bool'),
  \ dotnet#method('RegisterWithHost(', ')', 'void'),
  \ dotnet#prop('InitializationFlags', 'AppDomainManagerInitializationOptions'),
  \ dotnet#prop('ApplicationActivator', 'ApplicationActivator'),
  \ dotnet#prop('HostSecurityManager', 'HostSecurityManager'),
  \ dotnet#prop('HostExecutionContextManager', 'HostExecutionContextManager'),
  \ dotnet#prop('EntryAssembly', 'Assembly'),
  \ dotnet#prop('CurrentAppDomainManager', 'AppDomainManager'),
  \ ])

call dotnet#class('AppDomainSetup', 'Object', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('AppDomainSetup(', 'class AppDomainSetup copy, bool copyDomainBoundData)', 'void'),
  \ dotnet#method('AppDomainSetup(', ')', 'void'),
  \ dotnet#method('AppDomainSetup(', 'class ActivationContext activationContext)', 'void'),
  \ dotnet#method('AppDomainSetup(', 'class ActivationArguments activationArguments)', 'void'),
  \ dotnet#method('SetupDefaults(', 'string imageLocation)', 'void'),
  \ dotnet#method('get_Value(', ')', 'string[]'),
  \ dotnet#method('GetUnsecureApplicationBase(', ')', 'string'),
  \ dotnet#method('get_AppDomainManagerAssembly(', ')', 'string'),
  \ dotnet#method('set_AppDomainManagerAssembly(', 'string value)', 'void'),
  \ dotnet#method('get_AppDomainManagerType(', ')', 'string'),
  \ dotnet#method('set_AppDomainManagerType(', 'string value)', 'void'),
  \ dotnet#method('get_PartialTrustVisibleAssemblies(', ')', 'string[]'),
  \ dotnet#method('set_PartialTrustVisibleAssemblies(', 'string[] value)', 'void'),
  \ dotnet#method('get_ApplicationBase(', ')', 'string'),
  \ dotnet#method('set_ApplicationBase(', 'string value)', 'void'),
  \ dotnet#method('get_ApplicationBaseKey(', ')', 'static string'),
  \ dotnet#method('get_ConfigurationFile(', ')', 'string'),
  \ dotnet#method('set_ConfigurationFile(', 'string value)', 'void'),
  \ dotnet#method('get_ConfigurationFileInternal(', ')', 'string'),
  \ dotnet#method('get_ConfigurationFileKey(', ')', 'static string'),
  \ dotnet#method('GetConfigurationBytes(', ')', 'uint8[]'),
  \ dotnet#method('SetConfigurationBytes(', 'uint8[] value)', 'void'),
  \ dotnet#method('GetCompatibilityFlags(', ')', 'Dictionary'),
  \ dotnet#method('SetCompatibilitySwitches(', 'class IEnumerable switches)', 'void'),
  \ dotnet#method('get_DynamicBase(', ')', 'string'),
  \ dotnet#method('set_DynamicBase(', 'string value)', 'void'),
  \ dotnet#method('get_DynamicBaseKey(', ')', 'static string'),
  \ dotnet#method('get_DisallowPublisherPolicy(', ')', 'bool'),
  \ dotnet#method('set_DisallowPublisherPolicy(', 'bool value)', 'void'),
  \ dotnet#method('get_DisallowBindingRedirects(', ')', 'bool'),
  \ dotnet#method('set_DisallowBindingRedirects(', 'bool value)', 'void'),
  \ dotnet#method('get_DisallowCodeDownload(', ')', 'bool'),
  \ dotnet#method('set_DisallowCodeDownload(', 'bool value)', 'void'),
  \ dotnet#method('get_DisallowApplicationBaseProbing(', ')', 'bool'),
  \ dotnet#method('set_DisallowApplicationBaseProbing(', 'bool value)', 'void'),
  \ dotnet#method('get_DeveloperPath(', ')', 'string'),
  \ dotnet#method('set_DeveloperPath(', 'string value)', 'void'),
  \ dotnet#method('get_DisallowPublisherPolicyKey(', ')', 'static string'),
  \ dotnet#method('get_DisallowCodeDownloadKey(', ')', 'static string'),
  \ dotnet#method('get_DisallowBindingRedirectsKey(', ')', 'static string'),
  \ dotnet#method('get_DeveloperPathKey(', ')', 'static string'),
  \ dotnet#method('get_DisallowAppBaseProbingKey(', ')', 'static string'),
  \ dotnet#method('get_ApplicationName(', ')', 'string'),
  \ dotnet#method('set_ApplicationName(', 'string value)', 'void'),
  \ dotnet#method('get_ApplicationNameKey(', ')', 'static string'),
  \ dotnet#method('get_AppDomainInitializer(', ')', 'AppDomainInitializer'),
  \ dotnet#method('set_AppDomainInitializer(', 'class AppDomainInitializer value)', 'void'),
  \ dotnet#method('get_AppDomainInitializerArguments(', ')', 'string[]'),
  \ dotnet#method('set_AppDomainInitializerArguments(', 'string[] value)', 'void'),
  \ dotnet#method('get_ActivationArguments(', ')', 'ActivationArguments'),
  \ dotnet#method('set_ActivationArguments(', 'class ActivationArguments value)', 'void'),
  \ dotnet#method('InternalGetApplicationTrust(', ')', 'ApplicationTrust'),
  \ dotnet#method('InternalSetApplicationTrust(', 'class ApplicationTrust value)', 'void'),
  \ dotnet#method('get_ApplicationTrust(', ')', 'ApplicationTrust'),
  \ dotnet#method('set_ApplicationTrust(', 'class ApplicationTrust value)', 'void'),
  \ dotnet#method('get_PrivateBinPath(', ')', 'string'),
  \ dotnet#method('set_PrivateBinPath(', 'string value)', 'void'),
  \ dotnet#method('get_PrivateBinPathKey(', ')', 'static string'),
  \ dotnet#method('get_PrivateBinPathProbe(', ')', 'string'),
  \ dotnet#method('set_PrivateBinPathProbe(', 'string value)', 'void'),
  \ dotnet#method('get_PrivateBinPathProbeKey(', ')', 'static string'),
  \ dotnet#method('get_ShadowCopyDirAppDomainSetupies(', ')', 'string'),
  \ dotnet#method('set_ShadowCopyDirAppDomainSetupies(', 'string value)', 'void'),
  \ dotnet#method('get_ShadowCopyDirAppDomainSetupiesKey(', ')', 'static string'),
  \ dotnet#method('get_ShadowCopyFiles(', ')', 'string'),
  \ dotnet#method('set_ShadowCopyFiles(', 'string value)', 'void'),
  \ dotnet#method('get_ShadowCopyFilesKey(', ')', 'static string'),
  \ dotnet#method('get_CachePath(', ')', 'string'),
  \ dotnet#method('set_CachePath(', 'string value)', 'void'),
  \ dotnet#method('get_CachePathKey(', ')', 'static string'),
  \ dotnet#method('get_LicenseFile(', ')', 'string'),
  \ dotnet#method('set_LicenseFile(', 'string value)', 'void'),
  \ dotnet#method('get_LoaderOptimization(', ')', 'LoaderOptimization'),
  \ dotnet#method('set_LoaderOptimization(', 'LoaderOptimization value)', 'void'),
  \ dotnet#method('get_LoaderOptimizationKey(', ')', 'static string'),
  \ dotnet#method('get_ConfigurationExtension(', ')', 'static string'),
  \ dotnet#method('get_PrivateBinPathEnvironmentVariable(', ')', 'static string'),
  \ dotnet#method('get_RuntimeConfigurationFile(', ')', 'static string'),
  \ dotnet#method('get_MachineConfigKey(', ')', 'static string'),
  \ dotnet#method('get_HostBindingKey(', ')', 'static string'),
  \ dotnet#method('UpdateContextPropertyIfNeeded(', 'AppDomainSetup/LoaderInformation FieldValue, string FieldKey, string UpdatedField, int fusionContext, AppDomainSetup oldADS)', 'bool'),
  \ dotnet#method('UpdateBooleanContextPropertyIfNeeded(', 'AppDomainSetup/LoaderInformation FieldValue, string FieldKey, int fusionContext, AppDomainSetup oldADS)', 'void'),
  \ dotnet#method('ByteArraysAreDifferent(', 'uint8[] A, uint8[] B)', 'static bool'),
  \ dotnet#method('UpdateByteArrayContextPropertyIfNeeded(', 'uint8[] NewArray, uint8[] OldArray, string FieldKey, int fusionContext)', 'static void'),
  \ dotnet#method('SetupFusionContext(', 'native int fusionContext, AppDomainSetup oldADS)', 'void'),
  \ dotnet#method('UpdateContextProperty(', 'native int fusionContext, string key, object value) internalcall', 'static void'),
  \ dotnet#method('Locate(', 'string s)', 'static int32'),
  \ dotnet#method('get_SandboxInterop(', ')', 'bool'),
  \ dotnet#method('set_SandboxInterop(', 'bool value)', 'void'),
  \ dotnet#prop('Value', 'string[]'),
  \ dotnet#prop('AppDomainManagerAssembly', 'string'),
  \ dotnet#prop('AppDomainManagerType', 'string'),
  \ dotnet#prop('PartialTrustVisibleAssemblies', 'string[]'),
  \ dotnet#prop('ApplicationBase', 'string'),
  \ dotnet#prop('ApplicationBaseKey', 'string'),
  \ dotnet#prop('ConfigurationFile', 'string'),
  \ dotnet#prop('ConfigurationFileInternal', 'string'),
  \ dotnet#prop('ConfigurationFileKey', 'string'),
  \ dotnet#prop('DynamicBase', 'string'),
  \ dotnet#prop('DynamicBaseKey', 'string'),
  \ dotnet#prop('DisallowPublisherPolicy', 'bool'),
  \ dotnet#prop('DisallowBindingRedirects', 'bool'),
  \ dotnet#prop('DisallowCodeDownload', 'bool'),
  \ dotnet#prop('DisallowApplicationBaseProbing', 'bool'),
  \ dotnet#prop('DeveloperPath', 'string'),
  \ dotnet#prop('DisallowPublisherPolicyKey', 'string'),
  \ dotnet#prop('DisallowCodeDownloadKey', 'string'),
  \ dotnet#prop('DisallowBindingRedirectsKey', 'string'),
  \ dotnet#prop('DeveloperPathKey', 'string'),
  \ dotnet#prop('DisallowAppBaseProbingKey', 'string'),
  \ dotnet#prop('ApplicationName', 'string'),
  \ dotnet#prop('ApplicationNameKey', 'string'),
  \ dotnet#prop('AppDomainInitializer', 'AppDomainInitializer'),
  \ dotnet#prop('AppDomainInitializerArguments', 'string[]'),
  \ dotnet#prop('ActivationArguments', 'ActivationArguments'),
  \ dotnet#prop('ApplicationTrust', 'ApplicationTrust'),
  \ dotnet#prop('PrivateBinPath', 'string'),
  \ dotnet#prop('PrivateBinPathKey', 'string'),
  \ dotnet#prop('PrivateBinPathProbe', 'string'),
  \ dotnet#prop('PrivateBinPathProbeKey', 'string'),
  \ dotnet#prop('ShadowCopyDirAppDomainSetupies', 'string'),
  \ dotnet#prop('ShadowCopyDirAppDomainSetupiesKey', 'string'),
  \ dotnet#prop('ShadowCopyFiles', 'string'),
  \ dotnet#prop('ShadowCopyFilesKey', 'string'),
  \ dotnet#prop('CachePath', 'string'),
  \ dotnet#prop('CachePathKey', 'string'),
  \ dotnet#prop('LicenseFile', 'string'),
  \ dotnet#prop('LoaderOptimization', 'LoaderOptimization'),
  \ dotnet#prop('LoaderOptimizationKey', 'string'),
  \ dotnet#prop('ConfigurationExtension', 'string'),
  \ dotnet#prop('PrivateBinPathEnvironmentVariable', 'string'),
  \ dotnet#prop('RuntimeConfigurationFile', 'string'),
  \ dotnet#prop('MachineConfigKey', 'string'),
  \ dotnet#prop('HostBindingKey', 'string'),
  \ dotnet#prop('SandboxInterop', 'bool'),
  \ ])

call dotnet#class('Attribute', 'Object', [ 
  \ dotnet#method('GetCustomAttributes(', 'class MemberInfo element, Type type)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class MemberInfo element, Type type, bool inherit)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class MemberInfo element)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class MemberInfo element, bool inherit)', 'static Attribute[]'),
  \ dotnet#method('IsDefined(', 'class MemberInfo element, Type attributeType)', 'static bool'),
  \ dotnet#method('IsDefined(', 'class MemberInfo element, Type attributeType, bool inherit)', 'static bool'),
  \ dotnet#method('GetCustomAttribute(', 'class MemberInfo element, Type attributeType)', 'static Attribute'),
  \ dotnet#method('GetCustomAttribute(', 'class MemberInfo element, Type attributeType, bool inherit)', 'static Attribute'),
  \ dotnet#method('GetCustomAttributes(', 'class ParameterInfo element)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class ParameterInfo element, Type attributeType)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class ParameterInfo element, Type attributeType, bool inherit)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class ParameterInfo element, bool inherit)', 'static Attribute[]'),
  \ dotnet#method('IsDefined(', 'class ParameterInfo element, Type attributeType)', 'static bool'),
  \ dotnet#method('IsDefined(', 'class ParameterInfo element, Type attributeType, bool inherit)', 'static bool'),
  \ dotnet#method('GetCustomAttribute(', 'class ParameterInfo element, Type attributeType)', 'static Attribute'),
  \ dotnet#method('GetCustomAttribute(', 'class ParameterInfo element, Type attributeType, bool inherit)', 'static Attribute'),
  \ dotnet#method('GetCustomAttributes(', 'class Module element, Type attributeType)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Module element)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Module element, bool inherit)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Module element, Type attributeType, bool inherit)', 'static Attribute[]'),
  \ dotnet#method('IsDefined(', 'class Module element, Type attributeType)', 'static bool'),
  \ dotnet#method('IsDefined(', 'class Module element, Type attributeType, bool inherit)', 'static bool'),
  \ dotnet#method('GetCustomAttribute(', 'class Module element, Type attributeType)', 'static Attribute'),
  \ dotnet#method('GetCustomAttribute(', 'class Module element, Type attributeType, bool inherit)', 'static Attribute'),
  \ dotnet#method('GetCustomAttributes(', 'class Assembly element, Type attributeType)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Assembly element, Type attributeType, bool inherit)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Assembly element)', 'static Attribute[]'),
  \ dotnet#method('GetCustomAttributes(', 'class Assembly element, bool inherit)', 'static Attribute[]'),
  \ dotnet#method('IsDefined(', 'class Assembly element, Type attributeType)', 'static bool'),
  \ dotnet#method('IsDefined(', 'class Assembly element, Type attributeType, bool inherit)', 'static bool'),
  \ dotnet#method('GetCustomAttribute(', 'class Assembly element, Type attributeType)', 'static Attribute'),
  \ dotnet#method('GetCustomAttribute(', 'class Assembly element, Type attributeType, bool inherit)', 'static Attribute'),
  \ dotnet#method('Attribute(', ')', 'void'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_TypeId(', ')', 'object'),
  \ dotnet#method('Match(', 'object obj)', 'bool'),
  \ dotnet#method('IsDefaultAttribute(', ')', 'bool'),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('TypeId', 'object'),
  \ ])

call dotnet#class('LoaderOptimizationAttribute', 'Attribute', [ 
  \ dotnet#field('_val', 'uint8'),
  \ dotnet#method('LoaderOptimizationAttribute(', 'uint8 value)', 'void'),
  \ dotnet#method('LoaderOptimizationAttribute(', 'LoaderOptimization value)', 'void'),
  \ dotnet#method('get_Value(', ')', 'LoaderOptimization'),
  \ dotnet#prop('Value', 'LoaderOptimization'),
  \ ])

call dotnet#class('AppDomainUnloadedException', 'SystemException', [ 
  \ dotnet#method('AppDomainUnloadedException(', ')', 'void'),
  \ dotnet#method('AppDomainUnloadedException(', 'string message)', 'void'),
  \ dotnet#method('AppDomainUnloadedException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('AppDomainUnloadedException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ActivationContext', 'Object', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#field('value__', 'int32'),
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('ActivationContext(', ')', 'void'),
  \ dotnet#method('ActivationContext(', 'class ApplicationIdentity applicationIdentity)', 'void'),
  \ dotnet#method('ActivationContext(', 'class ApplicationIdentity applicationIdentity, string[] manifestPaths)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('CreatePartialActivationContext(', 'class ApplicationIdentity identity)', 'static ActivationContext'),
  \ dotnet#method('CreatePartialActivationContext(', 'class ApplicationIdentity identity, string[] manifestPaths)', 'static ActivationContext'),
  \ dotnet#method('get_Identity(', ')', 'ApplicationIdentity'),
  \ dotnet#method('get_Form(', ')', 'ActivationContext/ContextForm'),
  \ dotnet#method('get_ApplicationManifestBytes(', ')', 'uint8[]'),
  \ dotnet#method('get_DeploymentManifestBytes(', ')', 'uint8[]'),
  \ dotnet#method('get_ManifestPaths(', ')', 'string[]'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_ApplicationDirActivationContexty(', ')', 'string'),
  \ dotnet#method('get_DataDirActivationContexty(', ')', 'string'),
  \ dotnet#method('get_ActivationContextData(', ')', '.method'),
  \ dotnet#method('get_DeploymentComponentManifest(', ')', '.method'),
  \ dotnet#method('get_ApplicationComponentManifest(', ')', '.method'),
  \ dotnet#method('get_LastApplicationStateResult(', ')', '.method'),
  \ dotnet#method('GetComponentManifest(', 'class IDefinitionIdentity component)', 'ICMS'),
  \ dotnet#method('GetDeploymentManifestBytes(', ')', 'uint8[]'),
  \ dotnet#method('GetApplicationManifestBytes(', ')', 'uint8[]'),
  \ dotnet#method('PrepareForExecution(', ')', 'void'),
  \ dotnet#method('SetApplicationState(', 'ActivationContext/ApplicationState s)', 'ActivationContext/ApplicationStateDisposition'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#prop('Identity', 'ApplicationIdentity'),
  \ dotnet#prop('Form', 'ActivationContext/ContextForm'),
  \ dotnet#prop('ApplicationManifestBytes', 'uint8[]'),
  \ dotnet#prop('DeploymentManifestBytes', 'uint8[]'),
  \ dotnet#prop('ManifestPaths', 'string[]'),
  \ dotnet#prop('ApplicationDirActivationContexty', 'string'),
  \ dotnet#prop('DataDirActivationContexty', 'string'),
  \ dotnet#prop('ActivationContextData', 'ICMS'),
  \ dotnet#prop('DeploymentComponentManifest', 'ICMS'),
  \ dotnet#prop('ApplicationComponentManifest', 'ICMS'),
  \ dotnet#prop('LastApplicationStateResult', 'ActivationContext/ApplicationStateDisposition'),
  \ ])

call dotnet#class('ApplicationIdentity', 'Object', [ 
  \ dotnet#method('ApplicationIdentity(', ')', 'void'),
  \ dotnet#method('ApplicationIdentity(', 'string applicationIdentityFullName)', 'void'),
  \ dotnet#method('ApplicationIdentity(', 'class IDefinitionAppId applicationIdentity)', 'void'),
  \ dotnet#method('get_FullName(', ')', 'string'),
  \ dotnet#method('get_CodeBase(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Identity(', ')', '.method'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#prop('FullName', 'string'),
  \ dotnet#prop('CodeBase', 'string'),
  \ dotnet#prop('Identity', 'IDefinitionAppId'),
  \ ])

call dotnet#class('ApplicationId', 'Object', [ 
  \ dotnet#field('m_publicKeyToken', 'uint8[]'),
  \ dotnet#method('ApplicationId(', ')', 'void'),
  \ dotnet#method('ApplicationId(', 'uint8[] publicKeyToken, string name, Version version, string processorArchitecture, string culture)', 'void'),
  \ dotnet#method('get_PublicKeyToken(', ')', 'uint8[]'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Version(', ')', 'Version'),
  \ dotnet#method('get_ProcessorArchitecture(', ')', 'string'),
  \ dotnet#method('get_Culture(', ')', 'string'),
  \ dotnet#method('Copy(', ')', 'ApplicationId'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('PublicKeyToken', 'uint8[]'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Version', 'Version'),
  \ dotnet#prop('ProcessorArchitecture', 'string'),
  \ dotnet#prop('Culture', 'string'),
  \ ])

call dotnet#class('ArgumentException', 'SystemException', [ 
  \ dotnet#method('ArgumentException(', ')', 'void'),
  \ dotnet#method('ArgumentException(', 'string message)', 'void'),
  \ dotnet#method('ArgumentException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('ArgumentException(', 'string message, string paramName, Exception innerException)', 'void'),
  \ dotnet#method('ArgumentException(', 'string message, string paramName)', 'void'),
  \ dotnet#method('ArgumentException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_ParamName(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('ParamName', 'string'),
  \ ])

call dotnet#class('ArgumentNullException', 'ArgumentException', [ 
  \ dotnet#method('ArgumentNullException(', ')', 'void'),
  \ dotnet#method('ArgumentNullException(', 'string paramName)', 'void'),
  \ dotnet#method('ArgumentNullException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('ArgumentNullException(', 'string paramName, string message)', 'void'),
  \ dotnet#method('ArgumentNullException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ArgumentOutOfRangeException', 'ArgumentException', [ 
  \ dotnet#method('ArgumentOutOfRangeException(', ')', 'void'),
  \ dotnet#method('ArgumentOutOfRangeException(', 'string paramName)', 'void'),
  \ dotnet#method('ArgumentOutOfRangeException(', 'string paramName, string message)', 'void'),
  \ dotnet#method('ArgumentOutOfRangeException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('ArgumentOutOfRangeException(', 'string paramName, object actualValue, string message)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_ActualValue(', ')', 'object'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('ArgumentOutOfRangeException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('ActualValue', 'object'),
  \ ])

call dotnet#class('ArgIterator', 'ValueType', [ 
  \ dotnet#field('ArgCookie', 'int'),
  \ dotnet#field('sigPtr', 'int'),
  \ dotnet#field('sigPtrLen', 'int'),
  \ dotnet#field('ArgPtr', 'int'),
  \ dotnet#field('RemainingArgs', 'int32'),
  \ dotnet#method('ArgIterator(', 'RuntimeArgumentHandle arglist)', 'void'),
  \ dotnet#method('ArgIterator(', 'RuntimeArgumentHandle arglist, void* ptr)', 'void'),
  \ dotnet#method('GetNextArg(', ')', 'typedref'),
  \ dotnet#method('GetNextArg(', 'RuntimeTypeHandle rth)', 'typedref'),
  \ dotnet#method('End(', ')', 'void'),
  \ dotnet#method('GetRemainingCount(', ') internalcall', 'int32'),
  \ dotnet#method('GetNextArgType(', ')', 'RuntimeTypeHandle'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ ])

call dotnet#class('ArithmeticException', 'SystemException', [ 
  \ dotnet#method('ArithmeticException(', ')', 'void'),
  \ dotnet#method('ArithmeticException(', 'string message)', 'void'),
  \ dotnet#method('ArithmeticException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('ArithmeticException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ArrayTypeMismatchException', 'SystemException', [ 
  \ dotnet#method('ArrayTypeMismatchException(', ')', 'void'),
  \ dotnet#method('ArrayTypeMismatchException(', 'string message)', 'void'),
  \ dotnet#method('ArrayTypeMismatchException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('ArrayTypeMismatchException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('AsyncCallback', 'MulticastDelegate', [ 
  \ dotnet#method('AsyncCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class IAsyncResult ar)', 'void'),
  \ dotnet#method('BeginInvoke(', 'class IAsyncResult ar, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('AttributeUsageAttribute', 'Attribute', [ 
  \ dotnet#field('m_attributeTarget', 'AttributeTargets'),
  \ dotnet#field('m_allowMultiple', 'bool'),
  \ dotnet#field('m_inherited', 'bool'),
  \ dotnet#method('AttributeUsageAttribute(', 'AttributeTargets validOn)', 'void'),
  \ dotnet#method('AttributeUsageAttribute(', 'AttributeTargets validOn, bool allowMultiple, bool inherited)', 'void'),
  \ dotnet#method('get_ValidOn(', ')', 'AttributeTargets'),
  \ dotnet#method('get_AllowMultiple(', ')', 'bool'),
  \ dotnet#method('set_AllowMultiple(', 'bool value)', 'void'),
  \ dotnet#method('get_Inherited(', ')', 'bool'),
  \ dotnet#method('set_Inherited(', 'bool value)', 'void'),
  \ dotnet#method('AttributeUsageAttribute(', ')', 'static void .'),
  \ dotnet#prop('ValidOn', 'AttributeTargets'),
  \ dotnet#prop('AllowMultiple', 'bool'),
  \ dotnet#prop('Inherited', 'bool'),
  \ ])

call dotnet#class('BadImageFormatException', 'SystemException', [ 
  \ dotnet#method('BadImageFormatException(', ')', 'void'),
  \ dotnet#method('BadImageFormatException(', 'string message)', 'void'),
  \ dotnet#method('BadImageFormatException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('BadImageFormatException(', 'string message, string fileName)', 'void'),
  \ dotnet#method('BadImageFormatException(', 'string message, string fileName, Exception inner)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_FileName(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('BadImageFormatException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_FusionLog(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('FileName', 'string'),
  \ dotnet#prop('FusionLog', 'string'),
  \ ])

call dotnet#class('BitConverter', 'Object', [ 
  \ dotnet#method('GetBytes(', 'bool value)', 'static uint8[]'),
  \ dotnet#method('GetBytes(', 'char value)', 'static uint8[]'),
  \ dotnet#method('GetBytes(', 'int16 value)', 'static uint8[]'),
  \ dotnet#method('GetBytes(', 'int32 value)', 'static uint8[]'),
  \ dotnet#method('GetBytes(', 'int64 value)', 'static uint8[]'),
  \ dotnet#method('GetBytes(', 'uint16 value)', 'static uint8[]'),
  \ dotnet#method('GetBytes(', 'uint32 value)', 'static uint8[]'),
  \ dotnet#method('GetBytes(', 'uint64 value)', 'static uint8[]'),
  \ dotnet#method('GetBytes(', 'float32 value)', 'static uint8[]'),
  \ dotnet#method('GetBytes(', 'float64 value)', 'static uint8[]'),
  \ dotnet#method('ToChar(', 'uint8[] value, int32 startIndex)', 'static char'),
  \ dotnet#method('ToInt16(', 'uint8[] value, int32 startIndex)', 'static int16'),
  \ dotnet#method('ToInt32(', 'uint8[] value, int32 startIndex)', 'static int32'),
  \ dotnet#method('ToInt64(', 'uint8[] value, int32 startIndex)', 'static int64'),
  \ dotnet#method('ToUInt16(', 'uint8[] value, int32 startIndex)', 'static uint16'),
  \ dotnet#method('ToUInt32(', 'uint8[] value, int32 startIndex)', 'static uint32'),
  \ dotnet#method('ToUInt64(', 'uint8[] value, int32 startIndex)', 'static uint64'),
  \ dotnet#method('ToSingle(', 'uint8[] value, int32 startIndex)', 'static float32'),
  \ dotnet#method('ToDouble(', 'uint8[] value, int32 startIndex)', 'static float64'),
  \ dotnet#method('ToString(', 'uint8[] value, int32 startIndex, int32 length)', 'static string'),
  \ dotnet#method('ToString(', 'uint8[] value)', 'static string'),
  \ dotnet#method('ToString(', 'uint8[] value, int32 startIndex)', 'static string'),
  \ dotnet#method('ToBoolean(', 'uint8[] value, int32 startIndex)', 'static bool'),
  \ dotnet#method('DoubleToInt64Bits(', 'float64 value)', 'static int64'),
  \ dotnet#method('Int64BitsToDouble(', 'int64 value)', 'static float64'),
  \ dotnet#method('BitConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('Boolean', 'ValueType', [ 
  \ dotnet#field('m_value', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'bool obj)', 'bool'),
  \ dotnet#method('CompareTo(', 'object obj)', 'int32'),
  \ dotnet#method('CompareTo(', 'bool value)', 'int32'),
  \ dotnet#method('Parse(', 'string value)', 'static bool'),
  \ dotnet#method('TryParse(', 'string value, [out] bool& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ dotnet#method('Boolean(', ')', 'static void .'),
  \ ])

call dotnet#class('Buffer', 'Object', [ 
  \ dotnet#method('BlockCopy(', 'class Array src, int32 srcOffset, Array dst, int32 dstOffset, int32 count) internalcall', 'static void'),
  \ dotnet#method('InternalBlockCopy(', 'class Array src, int32 srcOffsetBytes, Array dst, int32 dstOffsetBytes, int32 byteCount) internalcall', 'static void'),
  \ dotnet#method('IndexOfByte(', 'uint8* src, uint8 value, int32 index, int32 count)', 'static int32'),
  \ dotnet#method('GetByte(', 'class Array array, int32 index)', 'static uint8'),
  \ dotnet#method('SetByte(', 'class Array array, int32 index, uint8 value)', 'static void'),
  \ dotnet#method('ByteLength(', 'class Array array)', 'static int32'),
  \ dotnet#method('ZeroMemory(', 'uint8* src, int64 len)', 'static void'),
  \ dotnet#method('memcpy(', 'uint8* src, int32 srcIndex, uint8[] dest, int32 destIndex, int32 len)', 'static void'),
  \ dotnet#method('memcpy(', 'uint8[] src, int32 srcIndex, uint8* pDest, int32 destIndex, int32 len)', 'static void'),
  \ dotnet#method('memcpy(', 'char* pSrc, int32 srcIndex, char* pDest, int32 destIndex, int32 len)', 'static void'),
  \ dotnet#method('memcpyimpl(', 'uint8* src, uint8* dest, int32 len)', 'static void'),
  \ ])

call dotnet#class('Byte', 'ValueType', [ 
  \ dotnet#field('m_value', 'uint8'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'uint8 value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'uint8 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string s)', 'static uint8'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static uint8'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static uint8'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static uint8'),
  \ dotnet#method('TryParse(', 'string s, [out] uint8& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] uint8& result)', 'static bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ ])

call dotnet#class('CannotUnloadAppDomainException', 'SystemException', [ 
  \ dotnet#method('CannotUnloadAppDomainException(', ')', 'void'),
  \ dotnet#method('CannotUnloadAppDomainException(', 'string message)', 'void'),
  \ dotnet#method('CannotUnloadAppDomainException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('CannotUnloadAppDomainException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('Char', 'ValueType', [ 
  \ dotnet#field('m_value', 'char'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'char obj)', 'bool'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'char value)', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'char c)', 'static string'),
  \ dotnet#method('Parse(', 'string s)', 'static char'),
  \ dotnet#method('TryParse(', 'string s, [out] char& result)', 'static bool'),
  \ dotnet#method('IsDigit(', 'char c)', 'static bool'),
  \ dotnet#method('CheckLetter(', 'UnicodeCategory uc)', 'static bool'),
  \ dotnet#method('IsLetter(', 'char c)', 'static bool'),
  \ dotnet#method('IsWhiteSpace(', 'char c)', 'static bool'),
  \ dotnet#method('IsUpper(', 'char c)', 'static bool'),
  \ dotnet#method('IsLower(', 'char c)', 'static bool'),
  \ dotnet#method('CheckPunctuation(', 'UnicodeCategory uc)', 'static bool'),
  \ dotnet#method('IsPunctuation(', 'char c)', 'static bool'),
  \ dotnet#method('CheckLetterOrDigit(', 'UnicodeCategory uc)', 'static bool'),
  \ dotnet#method('IsLetterOrDigit(', 'char c)', 'static bool'),
  \ dotnet#method('ToUpper(', 'char c, CultureInfo culture)', 'static char'),
  \ dotnet#method('ToUpper(', 'char c)', 'static char'),
  \ dotnet#method('ToUpperInvariant(', 'char c)', 'static char'),
  \ dotnet#method('ToLower(', 'char c, CultureInfo culture)', 'static char'),
  \ dotnet#method('ToLower(', 'char c)', 'static char'),
  \ dotnet#method('ToLowerInvariant(', 'char c)', 'static char'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ dotnet#method('IsControl(', 'char c)', 'static bool'),
  \ dotnet#method('IsControl(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsDigit(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsLetter(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsLetterOrDigit(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsLower(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('CheckNumber(', 'UnicodeCategory uc)', 'static bool'),
  \ dotnet#method('IsNumber(', 'char c)', 'static bool'),
  \ dotnet#method('IsNumber(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsPunctuation(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('CheckSeparator(', 'UnicodeCategory uc)', 'static bool'),
  \ dotnet#method('IsSeparator(', 'char c)', 'static bool'),
  \ dotnet#method('IsSeparator(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsSurrogate(', 'char c)', 'static bool'),
  \ dotnet#method('IsSurrogate(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('CheckSymbol(', 'UnicodeCategory uc)', 'static bool'),
  \ dotnet#method('IsSymbol(', 'char c)', 'static bool'),
  \ dotnet#method('IsSymbol(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsUpper(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsWhiteSpace(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('GetUnicodeCategory(', 'char c)', 'static UnicodeCategory'),
  \ dotnet#method('GetUnicodeCategory(', 'string s, int32 index)', 'static UnicodeCategory'),
  \ dotnet#method('GetNumericValue(', 'char c)', 'static float64'),
  \ dotnet#method('GetNumericValue(', 'string s, int32 index)', 'static float64'),
  \ dotnet#method('IsHighSurrogate(', 'char c)', 'static bool'),
  \ dotnet#method('IsHighSurrogate(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsLowSurrogate(', 'char c)', 'static bool'),
  \ dotnet#method('IsLowSurrogate(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsSurrogatePair(', 'string s, int32 index)', 'static bool'),
  \ dotnet#method('IsSurrogatePair(', 'char highSurrogate, char lowSurrogate)', 'static bool'),
  \ dotnet#method('ConvertFromUtf32(', 'int32 utf32)', 'static string'),
  \ dotnet#method('ConvertToUtf32(', 'char highSurrogate, char lowSurrogate)', 'static int32'),
  \ dotnet#method('ConvertToUtf32(', 'string s, int32 index)', 'static int32'),
  \ dotnet#method('Char(', ')', 'static void .'),
  \ ])

call dotnet#class('CLSCompliantAttribute', 'Attribute', [ 
  \ dotnet#method('CLSCompliantAttribute(', 'bool isCompliant)', 'void'),
  \ dotnet#method('get_IsCompliant(', ')', 'bool'),
  \ dotnet#prop('IsCompliant', 'bool'),
  \ ])

call dotnet#class('TypeUnloadedException', 'SystemException', [ 
  \ dotnet#method('TypeUnloadedException(', ')', 'void'),
  \ dotnet#method('TypeUnloadedException(', 'string message)', 'void'),
  \ dotnet#method('TypeUnloadedException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('TypeUnloadedException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('Console', 'Object', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('Console(', ')', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Hook(', ')', 'void'),
  \ dotnet#method('Unhook(', ')', 'void'),
  \ dotnet#method('get_Error(', ')', 'static TextWriter'),
  \ dotnet#method('get_In(', ')', 'static TextReader'),
  \ dotnet#method('get_Out(', ')', 'static TextWriter'),
  \ dotnet#method('get_InputEncoding(', ')', 'static Encoding'),
  \ dotnet#method('set_InputEncoding(', 'class Encoding value)', 'static void'),
  \ dotnet#method('get_OutputEncoding(', ')', 'static Encoding'),
  \ dotnet#method('set_OutputEncoding(', 'class Encoding value)', 'static void'),
  \ dotnet#method('Beep(', ') linkcheck', 'static void'),
  \ dotnet#method('Beep(', 'int32 frequency, int32 duration)', 'static void'),
  \ dotnet#method('Clear(', ')', 'static void'),
  \ dotnet#method('get_BackgroundColor(', ')', 'static ConsoleColor'),
  \ dotnet#method('set_BackgroundColor(', 'ConsoleColor value)', 'static void'),
  \ dotnet#method('get_ForegroundColor(', ')', 'static ConsoleColor'),
  \ dotnet#method('set_ForegroundColor(', 'ConsoleColor value)', 'static void'),
  \ dotnet#method('ResetColor(', ')', 'static void'),
  \ dotnet#method('MoveBufferArea(', 'int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop)', 'static void'),
  \ dotnet#method('MoveBufferArea(', 'int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor)', 'static void'),
  \ dotnet#method('get_BufferHeight(', ')', 'static int32'),
  \ dotnet#method('set_BufferHeight(', 'int32 value)', 'static void'),
  \ dotnet#method('get_BufferWidth(', ')', 'static int32'),
  \ dotnet#method('set_BufferWidth(', 'int32 value)', 'static void'),
  \ dotnet#method('SetBufferSize(', 'int32 width, int32 height)', 'static void'),
  \ dotnet#method('get_WindowHeight(', ')', 'static int32'),
  \ dotnet#method('set_WindowHeight(', 'int32 value)', 'static void'),
  \ dotnet#method('get_WindowWidth(', ')', 'static int32'),
  \ dotnet#method('set_WindowWidth(', 'int32 value)', 'static void'),
  \ dotnet#method('SetWindowSize(', 'int32 width, int32 height)', 'static void'),
  \ dotnet#method('get_LargestWindowWidth(', ')', 'static int32'),
  \ dotnet#method('get_LargestWindowHeight(', ')', 'static int32'),
  \ dotnet#method('get_WindowLeft(', ')', 'static int32'),
  \ dotnet#method('set_WindowLeft(', 'int32 value)', 'static void'),
  \ dotnet#method('get_WindowTop(', ')', 'static int32'),
  \ dotnet#method('set_WindowTop(', 'int32 value)', 'static void'),
  \ dotnet#method('SetWindowPosition(', 'int32 left, int32 top)', 'static void'),
  \ dotnet#method('get_CursorLeft(', ')', 'static int32'),
  \ dotnet#method('set_CursorLeft(', 'int32 value)', 'static void'),
  \ dotnet#method('get_CursorTop(', ')', 'static int32'),
  \ dotnet#method('set_CursorTop(', 'int32 value)', 'static void'),
  \ dotnet#method('SetCursorPosition(', 'int32 left, int32 top)', 'static void'),
  \ dotnet#method('get_CursorSize(', ')', 'static int32'),
  \ dotnet#method('set_CursorSize(', 'int32 value)', 'static void'),
  \ dotnet#method('get_CursorVisible(', ')', 'static bool'),
  \ dotnet#method('set_CursorVisible(', 'bool value)', 'static void'),
  \ dotnet#method('get_Title(', ')', 'static string'),
  \ dotnet#method('set_Title(', 'string value)', 'static void'),
  \ dotnet#method('ReadKey(', ')', 'static ConsoleKeyInfo'),
  \ dotnet#method('ReadKey(', 'bool intercept)', 'static ConsoleKeyInfo'),
  \ dotnet#method('get_KeyAvailable(', ')', 'static bool'),
  \ dotnet#method('get_NumberLock(', ')', 'static bool'),
  \ dotnet#method('get_CapsLock(', ')', 'static bool'),
  \ dotnet#method('get_TreatControlCAsInput(', ')', 'static bool'),
  \ dotnet#method('set_TreatControlCAsInput(', 'bool value)', 'static void'),
  \ dotnet#method('add_CancelKeyPress(', 'class ConsoleCancelEventHandler value)', 'static void'),
  \ dotnet#method('remove_CancelKeyPress(', 'class ConsoleCancelEventHandler value)', 'static void'),
  \ dotnet#method('OpenStandardError(', ')', 'static Stream'),
  \ dotnet#method('OpenStandardError(', 'int32 bufferSize)', 'static Stream'),
  \ dotnet#method('OpenStandardInput(', ')', 'static Stream'),
  \ dotnet#method('OpenStandardInput(', 'int32 bufferSize)', 'static Stream'),
  \ dotnet#method('OpenStandardOutput(', ')', 'static Stream'),
  \ dotnet#method('OpenStandardOutput(', 'int32 bufferSize)', 'static Stream'),
  \ dotnet#method('SetIn(', 'class TextReader newIn) linkcheck', 'static void'),
  \ dotnet#method('SetOut(', 'class TextWriter newOut) linkcheck', 'static void'),
  \ dotnet#method('SetError(', 'class TextWriter newError) linkcheck', 'static void'),
  \ dotnet#method('Read(', ') linkcheck', 'static int32'),
  \ dotnet#method('ReadLine(', ')', 'static string'),
  \ dotnet#method('WriteLine(', ') linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'bool value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'char value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'char[] buffer) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'char[] buffer, int32 index, int32 count)', 'static void'),
  \ dotnet#method('WriteLine(', 'Decimal value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'float64 value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'float32 value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'int32 value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'uint32 value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'int64 value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'uint64 value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'object value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'string value) linkcheck', 'static void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0)', 'static void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0, object arg1)', 'static void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0, object arg1, object arg2)', 'static void'),
  \ dotnet#method('WriteLine(', 'string format, object arg0, object arg1, object arg2, object arg3)', 'static vararg void'),
  \ dotnet#method('WriteLine(', 'string format, object[] arg)', 'static void'),
  \ dotnet#method('Write(', 'string format, object arg0)', 'static void'),
  \ dotnet#method('Write(', 'string format, object arg0, object arg1)', 'static void'),
  \ dotnet#method('Write(', 'string format, object arg0, object arg1, object arg2)', 'static void'),
  \ dotnet#method('Write(', 'string format, object arg0, object arg1, object arg2, object arg3)', 'static vararg void'),
  \ dotnet#method('Write(', 'string format, object[] arg)', 'static void'),
  \ dotnet#method('Write(', 'bool value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'char value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'char[] buffer) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'char[] buffer, int32 index, int32 count)', 'static void'),
  \ dotnet#method('Write(', 'float64 value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'Decimal value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'float32 value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'int32 value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'uint32 value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'int64 value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'uint64 value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'object value) linkcheck', 'static void'),
  \ dotnet#method('Write(', 'string value) linkcheck', 'static void'),
  \ dotnet#event('CancelKeyPress', 'ConsoleCancelEventHandler'),
  \ dotnet#prop('Error', 'TextWriter'),
  \ dotnet#prop('In', 'TextReader'),
  \ dotnet#prop('Out', 'TextWriter'),
  \ dotnet#prop('InputEncoding', 'Encoding'),
  \ dotnet#prop('OutputEncoding', 'Encoding'),
  \ dotnet#prop('BackgroundColor', 'ConsoleColor'),
  \ dotnet#prop('ForegroundColor', 'ConsoleColor'),
  \ dotnet#prop('BufferHeight', 'int32'),
  \ dotnet#prop('BufferWidth', 'int32'),
  \ dotnet#prop('WindowHeight', 'int32'),
  \ dotnet#prop('WindowWidth', 'int32'),
  \ dotnet#prop('LargestWindowWidth', 'int32'),
  \ dotnet#prop('LargestWindowHeight', 'int32'),
  \ dotnet#prop('WindowLeft', 'int32'),
  \ dotnet#prop('WindowTop', 'int32'),
  \ dotnet#prop('CursorLeft', 'int32'),
  \ dotnet#prop('CursorTop', 'int32'),
  \ dotnet#prop('CursorSize', 'int32'),
  \ dotnet#prop('CursorVisible', 'bool'),
  \ dotnet#prop('Title', 'string'),
  \ dotnet#prop('KeyAvailable', 'bool'),
  \ dotnet#prop('NumberLock', 'bool'),
  \ dotnet#prop('CapsLock', 'bool'),
  \ dotnet#prop('TreatControlCAsInput', 'bool'),
  \ ])

call dotnet#class('ConsoleCancelEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ConsoleCancelEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ConsoleCancelEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ConsoleCancelEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ConsoleCancelEventArgs', 'EventArgs', [ 
  \ dotnet#method('ConsoleCancelEventArgs(', 'ConsoleSpecialKey type)', 'void'),
  \ dotnet#method('get_Cancel(', ')', 'bool'),
  \ dotnet#method('set_Cancel(', 'bool value)', 'void'),
  \ dotnet#method('get_SpecialKey(', ')', 'ConsoleSpecialKey'),
  \ dotnet#prop('Cancel', 'bool'),
  \ dotnet#prop('SpecialKey', 'ConsoleSpecialKey'),
  \ ])

call dotnet#class('ConsoleKeyInfo', 'ValueType', [ 
  \ dotnet#field('_keyChar', 'char'),
  \ dotnet#field('_key', 'ConsoleKey'),
  \ dotnet#field('_mods', 'ConsoleModifiers'),
  \ dotnet#method('ConsoleKeyInfo(', 'char keyChar, ConsoleKey key, bool shift, bool alt, bool control)', 'void'),
  \ dotnet#method('get_KeyChar(', ')', 'char'),
  \ dotnet#method('get_Key(', ')', 'ConsoleKey'),
  \ dotnet#method('get_Modifiers(', ')', 'ConsoleModifiers'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('Equals(', 'ConsoleKeyInfo obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'ConsoleKeyInfo a, ConsoleKeyInfo b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'ConsoleKeyInfo a, ConsoleKeyInfo b)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('KeyChar', 'char'),
  \ dotnet#prop('Key', 'ConsoleKey'),
  \ dotnet#prop('Modifiers', 'ConsoleModifiers'),
  \ ])

call dotnet#class('ContextMarshalException', 'SystemException', [ 
  \ dotnet#method('ContextMarshalException(', ')', 'void'),
  \ dotnet#method('ContextMarshalException(', 'string message)', 'void'),
  \ dotnet#method('ContextMarshalException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('ContextMarshalException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('Convert', 'Object', [ 
  \ dotnet#method('GetTypeCode(', 'object value)', 'static TypeCode'),
  \ dotnet#method('IsDBNull(', 'object value)', 'static bool'),
  \ dotnet#method('ChangeType(', 'object value, TypeCode typeCode)', 'static object'),
  \ dotnet#method('ChangeType(', 'object value, TypeCode typeCode, IFormatProvider provider)', 'static object'),
  \ dotnet#method('DefaultToType(', 'class IConvertible value, Type targetType, IFormatProvider provider)', 'static object'),
  \ dotnet#method('ChangeType(', 'object value, Type conversionType)', 'static object'),
  \ dotnet#method('ChangeType(', 'object value, Type conversionType, IFormatProvider provider)', 'static object'),
  \ dotnet#method('ToBoolean(', 'object value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'object value, IFormatProvider provider)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'bool value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'int8 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'char value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'uint8 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'int16 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'uint16 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'int32 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'uint32 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'int64 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'uint64 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'string value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'string value, IFormatProvider provider)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'float32 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'float64 value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'Decimal value)', 'static bool'),
  \ dotnet#method('ToBoolean(', 'DateTime value)', 'static bool'),
  \ dotnet#method('ToChar(', 'object value)', 'static char'),
  \ dotnet#method('ToChar(', 'object value, IFormatProvider provider)', 'static char'),
  \ dotnet#method('ToChar(', 'bool value)', 'static char'),
  \ dotnet#method('ToChar(', 'char value)', 'static char'),
  \ dotnet#method('ToChar(', 'int8 value)', 'static char'),
  \ dotnet#method('ToChar(', 'uint8 value)', 'static char'),
  \ dotnet#method('ToChar(', 'int16 value)', 'static char'),
  \ dotnet#method('ToChar(', 'uint16 value)', 'static char'),
  \ dotnet#method('ToChar(', 'int32 value)', 'static char'),
  \ dotnet#method('ToChar(', 'uint32 value)', 'static char'),
  \ dotnet#method('ToChar(', 'int64 value)', 'static char'),
  \ dotnet#method('ToChar(', 'uint64 value)', 'static char'),
  \ dotnet#method('ToChar(', 'string value)', 'static char'),
  \ dotnet#method('ToChar(', 'string value, IFormatProvider provider)', 'static char'),
  \ dotnet#method('ToChar(', 'float32 value)', 'static char'),
  \ dotnet#method('ToChar(', 'float64 value)', 'static char'),
  \ dotnet#method('ToChar(', 'Decimal value)', 'static char'),
  \ dotnet#method('ToChar(', 'DateTime value)', 'static char'),
  \ dotnet#method('ToSByte(', 'object value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'object value, IFormatProvider provider)', 'static int8'),
  \ dotnet#method('ToSByte(', 'bool value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'int8 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'char value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'uint8 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'int16 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'uint16 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'int32 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'uint32 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'int64 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'uint64 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'float32 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'float64 value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'Decimal value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'string value)', 'static int8'),
  \ dotnet#method('ToSByte(', 'string value, IFormatProvider provider)', 'static int8'),
  \ dotnet#method('ToSByte(', 'DateTime value)', 'static int8'),
  \ dotnet#method('ToByte(', 'object value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'object value, IFormatProvider provider)', 'static uint8'),
  \ dotnet#method('ToByte(', 'bool value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'uint8 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'char value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'int8 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'int16 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'uint16 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'int32 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'uint32 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'int64 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'uint64 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'float32 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'float64 value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'Decimal value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'string value)', 'static uint8'),
  \ dotnet#method('ToByte(', 'string value, IFormatProvider provider)', 'static uint8'),
  \ dotnet#method('ToByte(', 'DateTime value)', 'static uint8'),
  \ dotnet#method('ToInt16(', 'object value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'object value, IFormatProvider provider)', 'static int16'),
  \ dotnet#method('ToInt16(', 'bool value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'char value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'int8 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'uint8 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'uint16 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'int32 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'uint32 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'int16 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'int64 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'uint64 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'float32 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'float64 value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'Decimal value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'string value)', 'static int16'),
  \ dotnet#method('ToInt16(', 'string value, IFormatProvider provider)', 'static int16'),
  \ dotnet#method('ToInt16(', 'DateTime value)', 'static int16'),
  \ dotnet#method('ToUInt16(', 'object value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'object value, IFormatProvider provider)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'bool value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'char value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'int8 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'uint8 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'int16 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'int32 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'uint16 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'uint32 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'int64 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'uint64 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'float32 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'float64 value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'Decimal value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'string value)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'string value, IFormatProvider provider)', 'static uint16'),
  \ dotnet#method('ToUInt16(', 'DateTime value)', 'static uint16'),
  \ dotnet#method('ToInt32(', 'object value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'object value, IFormatProvider provider)', 'static int32'),
  \ dotnet#method('ToInt32(', 'bool value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'char value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'int8 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'uint8 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'int16 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'uint16 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'uint32 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'int32 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'int64 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'uint64 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'float32 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'float64 value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'Decimal value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'string value)', 'static int32'),
  \ dotnet#method('ToInt32(', 'string value, IFormatProvider provider)', 'static int32'),
  \ dotnet#method('ToInt32(', 'DateTime value)', 'static int32'),
  \ dotnet#method('ToUInt32(', 'object value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'object value, IFormatProvider provider)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'bool value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'char value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'int8 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'uint8 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'int16 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'uint16 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'int32 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'uint32 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'int64 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'uint64 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'float32 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'float64 value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'Decimal value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'string value)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'string value, IFormatProvider provider)', 'static uint32'),
  \ dotnet#method('ToUInt32(', 'DateTime value)', 'static uint32'),
  \ dotnet#method('ToInt64(', 'object value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'object value, IFormatProvider provider)', 'static int64'),
  \ dotnet#method('ToInt64(', 'bool value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'char value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'int8 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'uint8 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'int16 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'uint16 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'int32 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'uint32 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'uint64 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'int64 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'float32 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'float64 value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'Decimal value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'string value)', 'static int64'),
  \ dotnet#method('ToInt64(', 'string value, IFormatProvider provider)', 'static int64'),
  \ dotnet#method('ToInt64(', 'DateTime value)', 'static int64'),
  \ dotnet#method('ToUInt64(', 'object value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'object value, IFormatProvider provider)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'bool value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'char value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'int8 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'uint8 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'int16 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'uint16 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'int32 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'uint32 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'int64 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'uint64 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'float32 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'float64 value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'Decimal value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'string value)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'string value, IFormatProvider provider)', 'static uint64'),
  \ dotnet#method('ToUInt64(', 'DateTime value)', 'static uint64'),
  \ dotnet#method('ToSingle(', 'object value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'object value, IFormatProvider provider)', 'static float32'),
  \ dotnet#method('ToSingle(', 'int8 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'uint8 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'char value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'int16 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'uint16 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'int32 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'uint32 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'int64 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'uint64 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'float32 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'float64 value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'Decimal value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'string value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'string value, IFormatProvider provider)', 'static float32'),
  \ dotnet#method('ToSingle(', 'bool value)', 'static float32'),
  \ dotnet#method('ToSingle(', 'DateTime value)', 'static float32'),
  \ dotnet#method('ToDouble(', 'object value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'object value, IFormatProvider provider)', 'static float64'),
  \ dotnet#method('ToDouble(', 'int8 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'uint8 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'int16 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'char value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'uint16 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'int32 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'uint32 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'int64 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'uint64 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'float32 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'float64 value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'Decimal value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'string value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'string value, IFormatProvider provider)', 'static float64'),
  \ dotnet#method('ToDouble(', 'bool value)', 'static float64'),
  \ dotnet#method('ToDouble(', 'DateTime value)', 'static float64'),
  \ dotnet#method('ToDecimal(', 'object value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'object value, IFormatProvider provider)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'int8 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'uint8 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'char value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'int16 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'uint16 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'int32 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'uint32 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'int64 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'uint64 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'float32 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'float64 value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'string value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'string value, IFormatProvider provider)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'Decimal value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'bool value)', 'static Decimal'),
  \ dotnet#method('ToDecimal(', 'DateTime value)', 'static Decimal'),
  \ dotnet#method('ToDateTime(', 'DateTime value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'object value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'object value, IFormatProvider provider)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'string value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'string value, IFormatProvider provider)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'int8 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'uint8 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'int16 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'uint16 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'int32 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'uint32 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'int64 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'uint64 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'bool value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'char value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'float32 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'float64 value)', 'static DateTime'),
  \ dotnet#method('ToDateTime(', 'Decimal value)', 'static DateTime'),
  \ dotnet#method('ToString(', 'object value)', 'static string'),
  \ dotnet#method('ToString(', 'object value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'bool value)', 'static string'),
  \ dotnet#method('ToString(', 'bool value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'char value)', 'static string'),
  \ dotnet#method('ToString(', 'char value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'int8 value)', 'static string'),
  \ dotnet#method('ToString(', 'int8 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'uint8 value)', 'static string'),
  \ dotnet#method('ToString(', 'uint8 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'int16 value)', 'static string'),
  \ dotnet#method('ToString(', 'int16 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'uint16 value)', 'static string'),
  \ dotnet#method('ToString(', 'uint16 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'int32 value)', 'static string'),
  \ dotnet#method('ToString(', 'int32 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'uint32 value)', 'static string'),
  \ dotnet#method('ToString(', 'uint32 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'int64 value)', 'static string'),
  \ dotnet#method('ToString(', 'int64 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'uint64 value)', 'static string'),
  \ dotnet#method('ToString(', 'uint64 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'float32 value)', 'static string'),
  \ dotnet#method('ToString(', 'float32 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'float64 value)', 'static string'),
  \ dotnet#method('ToString(', 'float64 value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'Decimal value)', 'static string'),
  \ dotnet#method('ToString(', 'Decimal value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'DateTime value)', 'static string'),
  \ dotnet#method('ToString(', 'DateTime value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToString(', 'string value)', 'static string'),
  \ dotnet#method('ToString(', 'string value, IFormatProvider provider)', 'static string'),
  \ dotnet#method('ToByte(', 'string value, int32 fromBase)', 'static uint8'),
  \ dotnet#method('ToSByte(', 'string value, int32 fromBase)', 'static int8'),
  \ dotnet#method('ToInt16(', 'string value, int32 fromBase)', 'static int16'),
  \ dotnet#method('ToUInt16(', 'string value, int32 fromBase)', 'static uint16'),
  \ dotnet#method('ToInt32(', 'string value, int32 fromBase)', 'static int32'),
  \ dotnet#method('ToUInt32(', 'string value, int32 fromBase)', 'static uint32'),
  \ dotnet#method('ToInt64(', 'string value, int32 fromBase)', 'static int64'),
  \ dotnet#method('ToUInt64(', 'string value, int32 fromBase)', 'static uint64'),
  \ dotnet#method('ToString(', 'uint8 value, int32 toBase)', 'static string'),
  \ dotnet#method('ToString(', 'int16 value, int32 toBase)', 'static string'),
  \ dotnet#method('ToString(', 'int32 value, int32 toBase)', 'static string'),
  \ dotnet#method('ToString(', 'int64 value, int32 toBase)', 'static string'),
  \ dotnet#method('ToBase64String(', 'uint8[] inArray)', 'static string'),
  \ dotnet#method('ToBase64String(', 'uint8[] inArray, Base64FormattingOptions options)', 'static string'),
  \ dotnet#method('ToBase64String(', 'uint8[] inArray, int32 offset, int32 length)', 'static string'),
  \ dotnet#method('ToBase64String(', 'uint8[] inArray, int32 offset, int32 length, Base64FormattingOptions options)', 'static string'),
  \ dotnet#method('ToBase64CharArray(', 'uint8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut)', 'static int32'),
  \ dotnet#method('ToBase64CharArray(', 'uint8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut, Base64FormattingOptions options)', 'static int32'),
  \ dotnet#method('FromBase64String(', 'string s) internalcall', 'static uint8[]'),
  \ dotnet#method('FromBase64CharArray(', 'char[] inArray, int32 offset, int32 length) internalcall', 'static uint8[]'),
  \ dotnet#method('Convert(', ')', 'static void .'),
  \ ])

call dotnet#class('ContextBoundObject', 'MarshalByRefObject', [ 
  \ dotnet#method('ContextBoundObject(', ')', 'void'),
  \ ])

call dotnet#class('ContextStaticAttribute', 'Attribute', [ 
  \ dotnet#method('ContextStaticAttribute(', ')', 'void'),
  \ ])

call dotnet#class('TimeZone', 'Object', [ 
  \ dotnet#method('TimeZone(', ')', 'void'),
  \ dotnet#method('get_CurrentTimeZone(', ')', 'static TimeZone'),
  \ dotnet#method('ResetTimeZone(', ')', 'static void'),
  \ dotnet#method('get_StandardName(', ')', 'abstract string'),
  \ dotnet#method('get_DaylightName(', ')', 'abstract string'),
  \ dotnet#method('GetUtcOffset(', 'DateTime time)', 'abstract'),
  \ dotnet#method('ToUniversalTime(', 'DateTime time)', ''),
  \ dotnet#method('ToLocalTime(', 'DateTime time)', ''),
  \ dotnet#method('GetDaylightChanges(', 'int32 year)', 'abstract'),
  \ dotnet#method('IsDaylightSavingTime(', 'DateTime time)', 'bool'),
  \ dotnet#method('IsDaylightSavingTime(', 'DateTime time, DaylightTime daylightTimes)', 'static bool'),
  \ dotnet#method('CalculateUtcOffset(', 'DateTime time, DaylightTime daylightTimes)', 'static TimeSpan'),
  \ dotnet#method('TimeZone(', ')', 'static void .'),
  \ dotnet#prop('CurrentTimeZone', 'TimeZone'),
  \ dotnet#prop('StandardName', 'string'),
  \ dotnet#prop('DaylightName', 'string'),
  \ ])

call dotnet#class('DBNull', 'Object', [ 
  \ dotnet#method('DBNull(', ')', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ dotnet#method('DBNull(', ')', 'static void .'),
  \ ])

call dotnet#class('Decimal', 'ValueType', [ 
  \ dotnet#field('flags', 'int32'),
  \ dotnet#field('hi', 'int32'),
  \ dotnet#field('lo', 'int32'),
  \ dotnet#field('mid', 'int32'),
  \ dotnet#method('Decimal(', 'int32 value)', 'void'),
  \ dotnet#method('Decimal(', 'uint32 value)', 'void'),
  \ dotnet#method('Decimal(', 'int64 value)', 'void'),
  \ dotnet#method('Decimal(', 'uint64 value)', 'void'),
  \ dotnet#method('Decimal(', 'float32 value) internalcall', 'void'),
  \ dotnet#method('Decimal(', 'float64 value) internalcall', 'void'),
  \ dotnet#method('Decimal(', 'Currency value)', 'void'),
  \ dotnet#method('ToOACurrency(', 'Decimal value)', 'static int64'),
  \ dotnet#method('FromOACurrency(', 'int64 cy)', 'static Decimal'),
  \ dotnet#method('Decimal(', 'int32[] bits)', 'void'),
  \ dotnet#method('Decimal(', 'int32 lo, int32 mid, int32 hi, bool isNegative, uint8 scale)', 'void'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('Abs(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('Add(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('Ceiling(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('Compare(', 'Decimal d1, Decimal d2)', 'static int32'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'Decimal value)', 'int32'),
  \ dotnet#method('Divide(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('Equals(', 'Decimal value)', 'bool'),
  \ dotnet#method('GetHashCode(', ') internalcall', 'int32'),
  \ dotnet#method('Equals(', 'Decimal d1, Decimal d2)', 'static bool'),
  \ dotnet#method('Floor(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static Decimal'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static Decimal'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static Decimal'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static Decimal'),
  \ dotnet#method('TryParse(', 'string s, [out] Decimal& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] Decimal& result)', 'static bool'),
  \ dotnet#method('GetBits(', 'Decimal d)', 'static int32[]'),
  \ dotnet#method('GetBytes(', 'Decimal d, uint8[] buffer)', 'static void'),
  \ dotnet#method('ToDecimal(', 'uint8[] buffer)', 'static Decimal'),
  \ dotnet#method('Max(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('Min(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('Remainder(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('Multiply(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('Negate(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('Round(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('Round(', 'Decimal d, int32 decimals)', 'static Decimal'),
  \ dotnet#method('Round(', 'Decimal d, MidpointRounding mode)', 'static Decimal'),
  \ dotnet#method('Round(', 'Decimal d, int32 decimals, MidpointRounding mode)', 'static Decimal'),
  \ dotnet#method('Subtract(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('ToByte(', 'Decimal value)', 'static uint8'),
  \ dotnet#method('ToSByte(', 'Decimal value)', 'static int8'),
  \ dotnet#method('ToInt16(', 'Decimal value)', 'static int16'),
  \ dotnet#method('ToCurrency(', 'Decimal d)', 'static Currency'),
  \ dotnet#method('ToDouble(', 'Decimal d) internalcall', 'static float64'),
  \ dotnet#method('FCallToInt32(', 'Decimal d) internalcall', 'static int32'),
  \ dotnet#method('ToInt32(', 'Decimal d)', 'static int32'),
  \ dotnet#method('ToInt64(', 'Decimal d)', 'static int64'),
  \ dotnet#method('ToUInt16(', 'Decimal value)', 'static uint16'),
  \ dotnet#method('ToUInt32(', 'Decimal d)', 'static uint32'),
  \ dotnet#method('ToUInt64(', 'Decimal d)', 'static uint64'),
  \ dotnet#method('ToSingle(', 'Decimal d) internalcall', 'static float32'),
  \ dotnet#method('Truncate(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('op_Implicit(', 'uint8 value)', 'static Decimal'),
  \ dotnet#method('op_Implicit(', 'int8 value)', 'static Decimal'),
  \ dotnet#method('op_Implicit(', 'int16 value)', 'static Decimal'),
  \ dotnet#method('op_Implicit(', 'uint16 value)', 'static Decimal'),
  \ dotnet#method('op_Implicit(', 'char value)', 'static Decimal'),
  \ dotnet#method('op_Implicit(', 'int32 value)', 'static Decimal'),
  \ dotnet#method('op_Implicit(', 'uint32 value)', 'static Decimal'),
  \ dotnet#method('op_Implicit(', 'int64 value)', 'static Decimal'),
  \ dotnet#method('op_Implicit(', 'uint64 value)', 'static Decimal'),
  \ dotnet#method('op_Explicit(', 'float32 value)', 'static Decimal'),
  \ dotnet#method('op_Explicit(', 'float64 value)', 'static Decimal'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static uint8'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static int8'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static char'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static int16'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static uint16'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static int32'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static uint32'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static int64'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static uint64'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static float32'),
  \ dotnet#method('op_Explicit(', 'Decimal value)', 'static float64'),
  \ dotnet#method('op_UnaryPlus(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('op_UnaryNegation(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('op_Increment(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('op_Decrement(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('op_Addition(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('op_Subtraction(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('op_Multiply(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('op_Division(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('op_Modulus(', 'Decimal d1, Decimal d2)', 'static Decimal'),
  \ dotnet#method('op_Equality(', 'Decimal d1, Decimal d2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Decimal d1, Decimal d2)', 'static bool'),
  \ dotnet#method('op_LessThan(', 'Decimal d1, Decimal d2)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'Decimal d1, Decimal d2)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'Decimal d1, Decimal d2)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'Decimal d1, Decimal d2)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ dotnet#method('Decimal(', ')', 'static void .'),
  \ ])

call dotnet#class('DivideByZeroException', 'ArithmeticException', [ 
  \ dotnet#method('DivideByZeroException(', ')', 'void'),
  \ dotnet#method('DivideByZeroException(', 'string message)', 'void'),
  \ dotnet#method('DivideByZeroException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('DivideByZeroException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('Double', 'ValueType', [ 
  \ dotnet#field('m_value', 'float64'),
  \ dotnet#method('IsInfinity(', 'float64 d)', 'static bool'),
  \ dotnet#method('IsPositiveInfinity(', 'float64 d)', 'static bool'),
  \ dotnet#method('IsNegativeInfinity(', 'float64 d)', 'static bool'),
  \ dotnet#method('IsNegative(', 'float64 d)', 'static bool'),
  \ dotnet#method('IsNaN(', 'float64 d)', 'static bool'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'float64 value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'float64 left, float64 right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'float64 left, float64 right)', 'static bool'),
  \ dotnet#method('op_LessThan(', 'float64 left, float64 right)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'float64 left, float64 right)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'float64 left, float64 right)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'float64 left, float64 right)', 'static bool'),
  \ dotnet#method('Equals(', 'float64 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static float64'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static float64'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static float64'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static float64'),
  \ dotnet#method('TryParse(', 'string s, [out] float64& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] float64& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ dotnet#method('Double(', ')', 'static void .'),
  \ ])

call dotnet#class('DuplicateWaitObjectException', 'ArgumentException', [ 
  \ dotnet#method('DuplicateWaitObjectException(', ')', 'void'),
  \ dotnet#method('DuplicateWaitObjectException(', 'string parameterName)', 'void'),
  \ dotnet#method('DuplicateWaitObjectException(', 'string parameterName, string message)', 'void'),
  \ dotnet#method('DuplicateWaitObjectException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('DuplicateWaitObjectException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('DuplicateWaitObjectException(', ')', 'static void .'),
  \ ])

call dotnet#class('TypeLoadException', 'SystemException', [ 
  \ dotnet#field('ResourceId', 'int32'),
  \ dotnet#method('TypeLoadException(', ')', 'void'),
  \ dotnet#method('TypeLoadException(', 'string message)', 'void'),
  \ dotnet#method('TypeLoadException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_TypeName(', ')', 'string'),
  \ dotnet#method('TypeLoadException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('TypeName', 'string'),
  \ ])

call dotnet#class('EntryPointNotFoundException', 'TypeLoadException', [ 
  \ dotnet#method('EntryPointNotFoundException(', ')', 'void'),
  \ dotnet#method('EntryPointNotFoundException(', 'string message)', 'void'),
  \ dotnet#method('EntryPointNotFoundException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('EntryPointNotFoundException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('DllNotFoundException', 'TypeLoadException', [ 
  \ dotnet#method('DllNotFoundException(', ')', 'void'),
  \ dotnet#method('DllNotFoundException(', 'string message)', 'void'),
  \ dotnet#method('DllNotFoundException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('DllNotFoundException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('Environment', 'Object', [ 
  \ dotnet#field('m_resourceHelper', 'Environment/ResourceHelper'),
  \ dotnet#field('m_key', 'string'),
  \ dotnet#field('m_culture', 'CultureInfo'),
  \ dotnet#field('m_retVal', 'string'),
  \ dotnet#field('m_lockWasTaken', 'bool'),
  \ dotnet#method('Environment(', 'class Environment/ResourceHelper resourceHelper, string key, CultureInfo culture)', 'void'),
  \ dotnet#field('resourceManagerInited', 'bool'),
  \ dotnet#method('Environment(', 'string name)', 'void'),
  \ dotnet#method('GetResourceString(', 'string key)', 'string'),
  \ dotnet#method('GetResourceString(', 'string key, CultureInfo culture)', 'string'),
  \ dotnet#field('value__', 'int32'),
  \ dotnet#field('value__', 'int32'),
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('get_TickCount(', ') internalcall', 'static int32'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void _Exit(int32 exitCode) preservesig', 'static'),
  \ dotnet#method('Exit(', 'int32 exitCode)', 'static void'),
  \ dotnet#method('get_ExitCode(', ') internalcall', 'static int32'),
  \ dotnet#method('set_ExitCode(', 'int32 value) internalcall', 'static void'),
  \ dotnet#method('FailFast(', 'string message) internalcall', 'static void'),
  \ dotnet#method('FailFast(', 'string message, Exception exception) internalcall', 'static void'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void TriggerCodeContractFailure(ContractFailureKind failureKind, string message, string condition, string exceptionAsString) preservesig', 'static'),
  \ dotnet#method('get_IsCLRHosted(', ')', 'static bool'),
  \ dotnet#method('get_CommandLine(', ')', 'static string'),
  \ dotnet#method('get_CurrentDirEnvironmenty(', ')', 'static string'),
  \ dotnet#method('set_CurrentDirEnvironmenty(', 'string value)', 'static void'),
  \ dotnet#method('get_SystemDirEnvironmenty(', ')', 'static string'),
  \ dotnet#method('get_InternalWindowsDirEnvironmenty(', ')', 'static string'),
  \ dotnet#method('ExpandEnvironmentVariables(', 'string name)', 'static string'),
  \ dotnet#method('get_MachineName(', ')', 'static string'),
  \ dotnet#method('get_ProcessorCount(', ')', 'static int32'),
  \ dotnet#method('get_SystemPageSize(', ')', 'static int32'),
  \ dotnet#method('GetCommandLineArgs(', ')', 'static string[]'),
  \ dotnet#method('nativeGetEnvironmentVariable(', 'string variable) internalcall', 'static string'),
  \ dotnet#method('GetEnvironmentVariable(', 'string variable)', 'static string'),
  \ dotnet#method('GetEnvironmentVariable(', 'string variable, EnvironmentVariableTarget target)', 'static string'),
  \ dotnet#method('GetEnvironmentVariables(', ')', 'static IDictionary'),
  \ dotnet#method('GetRegistryKeyNameValuePairs(', 'class RegistryKey registryKey)', 'static IDictionary'),
  \ dotnet#method('GetEnvironmentVariables(', 'EnvironmentVariableTarget target)', 'static IDictionary'),
  \ dotnet#method('SetEnvironmentVariable(', 'string variable, string value)', 'static void'),
  \ dotnet#method('SetEnvironmentVariable(', 'string variable, string value, EnvironmentVariableTarget target)', 'static void'),
  \ dotnet#method('GetLogicalDrives(', ')', 'static string[]'),
  \ dotnet#method('get_NewLine(', ')', 'static string'),
  \ dotnet#method('get_Version(', ')', 'static Version'),
  \ dotnet#method('get_WorkingSet(', ')', 'static int64'),
  \ dotnet#method('get_OSVersion(', ')', 'static OperatingSystem'),
  \ dotnet#method('get_IsWindowsVista(', ')', 'static bool'),
  \ dotnet#method('get_IsW2k3(', ')', 'static bool'),
  \ dotnet#method('get_RunningOnWinNT(', ')', 'static bool'),
  \ dotnet#method('GetVersion(', 'class Win32Native/OSVERSIONINFO osVer) internalcall', 'static bool'),
  \ dotnet#method('GetVersionEx(', 'class Win32Native/OSVERSIONINFOEX osVer) internalcall', 'static bool'),
  \ dotnet#method('get_OSInfo(', ')', 'static'),
  \ dotnet#method('get_StackTrace(', ')', 'static string'),
  \ dotnet#method('GetStackTrace(', 'class Exception e, bool needFileInfo)', 'static string'),
  \ dotnet#method('GetResourceFromDefault(', 'string key) internalcall', 'static string'),
  \ dotnet#method('GetResourceStringLocal(', 'string key)', 'static string'),
  \ dotnet#method('GetResourceString(', 'string key)', 'static string'),
  \ dotnet#method('GetResourceString(', 'string key, object[] values)', 'static string'),
  \ dotnet#method('GetRuntimeResourceString(', 'string key)', 'static string'),
  \ dotnet#method('GetRuntimeResourceString(', 'string key, object[] values)', 'static string'),
  \ dotnet#method('get_Is64BitProcess(', ')', 'static bool'),
  \ dotnet#method('get_Is64BitOperatingSystem(', ')', 'static bool'),
  \ dotnet#method('get_HasShutdownStarted(', ') internalcall', 'static bool'),
  \ dotnet#method('GetCompatibilityFlag(', 'CompatibilityFlag flag) internalcall', 'static bool'),
  \ dotnet#method('get_UserName(', ')', 'static string'),
  \ dotnet#method('get_UserInteractive(', ')', 'static bool'),
  \ dotnet#method('GetFolderPath(', 'Environment/SpecialFolder folder)', 'static string'),
  \ dotnet#method('GetFolderPath(', 'Environment/SpecialFolder folder, Environment/SpecialFolderOption option)', 'static string'),
  \ dotnet#method('get_UserDomainName(', ')', 'static string'),
  \ dotnet#prop('TickCount', 'int32'),
  \ dotnet#prop('ExitCode', 'int32'),
  \ dotnet#prop('IsCLRHosted', 'bool'),
  \ dotnet#prop('CommandLine', 'string'),
  \ dotnet#prop('CurrentDirEnvironmenty', 'string'),
  \ dotnet#prop('SystemDirEnvironmenty', 'string'),
  \ dotnet#prop('InternalWindowsDirEnvironmenty', 'string'),
  \ dotnet#prop('MachineName', 'string'),
  \ dotnet#prop('ProcessorCount', 'int32'),
  \ dotnet#prop('SystemPageSize', 'int32'),
  \ dotnet#prop('NewLine', 'string'),
  \ dotnet#prop('Version', 'Version'),
  \ dotnet#prop('WorkingSet', 'int64'),
  \ dotnet#prop('OSVersion', 'OperatingSystem'),
  \ dotnet#prop('IsWindowsVista', 'bool'),
  \ dotnet#prop('IsW2k3', 'bool'),
  \ dotnet#prop('RunningOnWinNT', 'bool'),
  \ dotnet#prop('OSInfo', 'Environment/OSName'),
  \ dotnet#prop('StackTrace', 'string'),
  \ dotnet#prop('Is64BitProcess', 'bool'),
  \ dotnet#prop('Is64BitOperatingSystem', 'bool'),
  \ dotnet#prop('HasShutdownStarted', 'bool'),
  \ dotnet#prop('UserName', 'string'),
  \ dotnet#prop('UserInteractive', 'bool'),
  \ dotnet#prop('UserDomainName', 'string'),
  \ ])

call dotnet#class('EventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('EventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, EventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('EventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('EventHandler`1(', 'object object, int method)', 'void EventHandler`'),
  \ dotnet#method('Invoke(', 'object sender, !TEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, !TEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('FieldAccessException', 'MemberAccessException', [ 
  \ dotnet#method('FieldAccessException(', ')', 'void'),
  \ dotnet#method('FieldAccessException(', 'string message)', 'void'),
  \ dotnet#method('FieldAccessException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('FieldAccessException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('FlagsAttribute', 'Attribute', [ 
  \ dotnet#method('FlagsAttribute(', ')', 'void'),
  \ ])

call dotnet#class('FormatException', 'SystemException', [ 
  \ dotnet#method('FormatException(', ')', 'void'),
  \ dotnet#method('FormatException(', 'string message)', 'void'),
  \ dotnet#method('FormatException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('FormatException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('GC', 'Object', [ 
  \ dotnet#method('GetGCLatencyMode(', ') internalcall', 'static int32'),
  \ dotnet#method('SetGCLatencyMode(', 'int32 newLatencyMode) internalcall', 'static void'),
  \ dotnet#method('IsServerGC(', ') internalcall', 'static bool'),
  \ dotnet#method('AddMemoryPressure(', 'int64 bytesAllocated)', 'static void'),
  \ dotnet#method('RemoveMemoryPressure(', 'int64 bytesAllocated)', 'static void'),
  \ dotnet#method('GetGeneration(', 'object obj) internalcall', 'static int32'),
  \ dotnet#method('Collect(', 'int32 generation)', 'static void'),
  \ dotnet#method('Collect(', ')', 'static void'),
  \ dotnet#method('Collect(', 'int32 generation, GCCollectionMode mode)', 'static void'),
  \ dotnet#method('CollectionCount(', 'int32 generation)', 'static int32'),
  \ dotnet#method('KeepAlive(', 'object obj) internalcall', 'static void'),
  \ dotnet#method('GetGeneration(', 'class WeakReference wo)', 'static int32'),
  \ dotnet#method('get_MaxGeneration(', ')', 'static int32'),
  \ dotnet#method('WaitForPendingFinalizers(', ')', 'static void'),
  \ dotnet#method('SuppressFinalize(', 'object obj)', 'static void'),
  \ dotnet#method('ReRegisterForFinalize(', 'object obj)', 'static void'),
  \ dotnet#method('GetTotalMemory(', 'bool forceFullCollection)', 'static int64'),
  \ dotnet#method('RegisterForFullGCNotification(', 'int32 maxGenerationThreshold, int32 largeObjectHeapThreshold)', 'static void'),
  \ dotnet#method('CancelFullGCNotification(', ')', 'static void'),
  \ dotnet#method('WaitForFullGCApproach(', ')', 'static GCNotificationStatus'),
  \ dotnet#method('WaitForFullGCApproach(', 'int32 millisecondsTimeout)', 'static GCNotificationStatus'),
  \ dotnet#method('WaitForFullGCComplete(', ')', 'static GCNotificationStatus'),
  \ dotnet#method('WaitForFullGCComplete(', 'int32 millisecondsTimeout)', 'static GCNotificationStatus'),
  \ dotnet#method('add_ClearCache(', 'class ClearCacheHandler value)', 'static void'),
  \ dotnet#method('remove_ClearCache(', 'class ClearCacheHandler value)', 'static void'),
  \ dotnet#method('FireCacheEvent(', ')', 'static void'),
  \ dotnet#method('GC(', ')', 'static void .'),
  \ dotnet#event('ClearCache', 'ClearCacheHandler'),
  \ dotnet#prop('MaxGeneration', 'int32'),
  \ ])

call dotnet#class('Guid', 'ValueType', [ 
  \ dotnet#field('_a', 'int32'),
  \ dotnet#field('_b', 'int16'),
  \ dotnet#field('_c', 'int16'),
  \ dotnet#field('_d', 'uint8'),
  \ dotnet#field('_e', 'uint8'),
  \ dotnet#field('_f', 'uint8'),
  \ dotnet#field('_g', 'uint8'),
  \ dotnet#field('_h', 'uint8'),
  \ dotnet#field('_i', 'uint8'),
  \ dotnet#field('_j', 'uint8'),
  \ dotnet#field('_k', 'uint8'),
  \ dotnet#method('Guid(', 'uint8[] b)', 'void'),
  \ dotnet#method('Guid(', 'uint32 a, uint16 b, uint16 c, uint8 d, uint8 e, uint8 f, uint8 g, uint8 h, uint8 i, uint8 j, uint8 k)', 'void'),
  \ dotnet#method('Guid(', 'int32 a, int16 b, int16 c, uint8[] d)', 'void'),
  \ dotnet#method('Guid(', 'int32 a, int16 b, int16 c, uint8 d, uint8 e, uint8 f, uint8 g, uint8 h, uint8 i, uint8 j, uint8 k)', 'void'),
  \ dotnet#method('Guid(', 'string g)', 'void'),
  \ dotnet#method('Parse(', 'string input)', 'static Guid'),
  \ dotnet#method('TryParse(', 'string input, [out] Guid& result)', 'static bool'),
  \ dotnet#method('ParseExact(', 'string input, string format)', 'static Guid'),
  \ dotnet#method('TryParseExact(', 'string input, string format, [out] Guid& result)', 'static bool'),
  \ dotnet#method('ToByteArray(', ')', 'uint8[]'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Guid g)', 'bool'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'Guid value)', 'int32'),
  \ dotnet#method('op_Equality(', 'Guid a, Guid b)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Guid a, Guid b)', 'static bool'),
  \ dotnet#method('NewGuid(', ')', 'static Guid'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Guid(', ')', 'static void .'),
  \ ])

call dotnet#class('IndexOutOfRangeException', 'SystemException', [ 
  \ dotnet#method('IndexOutOfRangeException(', ')', 'void'),
  \ dotnet#method('IndexOutOfRangeException(', 'string message)', 'void'),
  \ dotnet#method('IndexOutOfRangeException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('IndexOutOfRangeException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('InsufficientMemoryException', 'OutOfMemoryException', [ 
  \ dotnet#method('InsufficientMemoryException(', ')', 'void'),
  \ dotnet#method('InsufficientMemoryException(', 'string message)', 'void'),
  \ dotnet#method('InsufficientMemoryException(', 'string message, Exception innerException)', 'void'),
  \ ])

call dotnet#class('InsufficientExecutionStackException', 'SystemException', [ 
  \ dotnet#method('InsufficientExecutionStackException(', ')', 'void'),
  \ dotnet#method('InsufficientExecutionStackException(', 'string message)', 'void'),
  \ dotnet#method('InsufficientExecutionStackException(', 'string message, Exception innerException)', 'void'),
  \ ])

call dotnet#class('Lazy', 'Object', [ 
  \ dotnet#method('Lazy`1(', ')', 'void Lazy`'),
  \ dotnet#method('Lazy`1(', 'bool isThreadSafe)', 'void Lazy`'),
  \ dotnet#method('Lazy`1(', 'LazyThreadSafetyMode mode)', 'void Lazy`'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_ValueForDebugDisplay(', ')', '!T'),
  \ dotnet#method('get_Mode(', ')', '.method'),
  \ dotnet#method('get_IsValueFaulted(', ')', 'bool'),
  \ dotnet#method('get_IsValueCreated(', ')', 'bool'),
  \ dotnet#method('get_Value(', ')', '!T'),
  \ dotnet#method('Lazy`1(', ')', 'static void .Lazy`'),
  \ dotnet#prop('ValueForDebugDisplay', '!T'),
  \ dotnet#prop('Mode', 'LazyThreadSafetyMode'),
  \ dotnet#prop('IsValueFaulted', 'bool'),
  \ dotnet#prop('IsValueCreated', 'bool'),
  \ dotnet#prop('Value', '!T'),
  \ ])

call dotnet#class('Int16', 'ValueType', [ 
  \ dotnet#field('m_value', 'int16'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'int16 value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'int16 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static int16'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static int16'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static int16'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static int16'),
  \ dotnet#method('TryParse(', 'string s, [out] int16& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] int16& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ ])

call dotnet#class('Int32', 'ValueType', [ 
  \ dotnet#field('m_value', 'int32'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'int32 value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'int32 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static int32'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static int32'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static int32'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static int32'),
  \ dotnet#method('TryParse(', 'string s, [out] int32& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] int32& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ ])

call dotnet#class('Int64', 'ValueType', [ 
  \ dotnet#field('m_value', 'int64'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'int64 value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'int64 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static int64'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static int64'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static int64'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static int64'),
  \ dotnet#method('TryParse(', 'string s, [out] int64& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] int64& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ ])

call dotnet#class('IntPtr', 'ValueType', [ 
  \ dotnet#field('m_value', 'void*'),
  \ dotnet#method('IsNull(', ')', 'bool'),
  \ dotnet#method('IntPtr(', 'int32 value)', 'void'),
  \ dotnet#method('IntPtr(', 'int64 value)', 'void'),
  \ dotnet#method('IntPtr(', 'void* value)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToInt32(', ')', 'int32'),
  \ dotnet#method('ToInt64(', ')', 'int64'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('op_Explicit(', 'int32 value)', 'static int'),
  \ dotnet#method('op_Explicit(', 'int64 value)', 'static int'),
  \ dotnet#method('op_Explicit(', 'void* value)', 'static int'),
  \ dotnet#method('op_Explicit(', 'native int value)', 'static void*'),
  \ dotnet#method('op_Explicit(', 'native int value)', 'static int32'),
  \ dotnet#method('op_Explicit(', 'native int value)', 'static int64'),
  \ dotnet#method('op_Equality(', 'native int value1, int value2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'native int value1, int value2)', 'static bool'),
  \ dotnet#method('Add(', 'native int pointer, int32 offset)', 'static int'),
  \ dotnet#method('op_Addition(', 'native int pointer, int32 offset)', 'static int'),
  \ dotnet#method('Subtract(', 'native int pointer, int32 offset)', 'static int'),
  \ dotnet#method('op_Subtraction(', 'native int pointer, int32 offset)', 'static int'),
  \ dotnet#method('get_Size(', ')', 'static int32'),
  \ dotnet#method('ToPointer(', ')', 'void*'),
  \ dotnet#prop('Size', 'int32'),
  \ ])

call dotnet#class('InvalidCastException', 'SystemException', [ 
  \ dotnet#method('InvalidCastException(', ')', 'void'),
  \ dotnet#method('InvalidCastException(', 'string message)', 'void'),
  \ dotnet#method('InvalidCastException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('InvalidCastException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('InvalidCastException(', 'string message, int32 errorCode)', 'void'),
  \ ])

call dotnet#class('InvalidOperationException', 'SystemException', [ 
  \ dotnet#method('InvalidOperationException(', ')', 'void'),
  \ dotnet#method('InvalidOperationException(', 'string message)', 'void'),
  \ dotnet#method('InvalidOperationException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('InvalidOperationException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('InvalidProgramException', 'SystemException', [ 
  \ dotnet#method('InvalidProgramException(', ')', 'void'),
  \ dotnet#method('InvalidProgramException(', 'string message)', 'void'),
  \ dotnet#method('InvalidProgramException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('InvalidProgramException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('InvalidTimeZoneException', 'Exception', [ 
  \ dotnet#method('InvalidTimeZoneException(', 'string message)', 'void'),
  \ dotnet#method('InvalidTimeZoneException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('InvalidTimeZoneException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('InvalidTimeZoneException(', ')', 'void'),
  \ ])

call dotnet#class('LocalDataStoreSlot', 'Object', [ 
  \ dotnet#method('LocalDataStoreSlot(', 'class LocalDataStoreMgr mgr, int32 slot, int64 cookie)', 'void'),
  \ dotnet#method('get_Manager(', ')', '.method'),
  \ dotnet#method('get_Slot(', ')', 'int32'),
  \ dotnet#method('get_Cookie(', ')', 'int64'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#prop('Manager', 'LocalDataStoreMgr'),
  \ dotnet#prop('Slot', 'int32'),
  \ dotnet#prop('Cookie', 'int64'),
  \ ])

call dotnet#class('Math', 'Object', [ 
  \ dotnet#method('Acos(', 'float64 d) internalcall', 'static float64'),
  \ dotnet#method('Asin(', 'float64 d) internalcall', 'static float64'),
  \ dotnet#method('Atan(', 'float64 d) internalcall', 'static float64'),
  \ dotnet#method('Atan2(', 'float64 y, float64 x) internalcall', 'static float64'),
  \ dotnet#method('Ceiling(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('Ceiling(', 'float64 a) internalcall', 'static float64'),
  \ dotnet#method('Cos(', 'float64 d) internalcall', 'static float64'),
  \ dotnet#method('Cosh(', 'float64 value) internalcall', 'static float64'),
  \ dotnet#method('Floor(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('Floor(', 'float64 d) internalcall', 'static float64'),
  \ dotnet#method('Sin(', 'float64 a) internalcall', 'static float64'),
  \ dotnet#method('Tan(', 'float64 a) internalcall', 'static float64'),
  \ dotnet#method('Sinh(', 'float64 value) internalcall', 'static float64'),
  \ dotnet#method('Tanh(', 'float64 value) internalcall', 'static float64'),
  \ dotnet#method('Round(', 'float64 a) internalcall', 'static float64'),
  \ dotnet#method('Round(', 'float64 value, int32 digits)', 'static float64'),
  \ dotnet#method('Round(', 'float64 value, MidpointRounding mode)', 'static float64'),
  \ dotnet#method('Round(', 'float64 value, int32 digits, MidpointRounding mode)', 'static float64'),
  \ dotnet#method('Round(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('Round(', 'Decimal d, int32 decimals)', 'static Decimal'),
  \ dotnet#method('Round(', 'Decimal d, MidpointRounding mode)', 'static Decimal'),
  \ dotnet#method('Round(', 'Decimal d, int32 decimals, MidpointRounding mode)', 'static Decimal'),
  \ dotnet#method('Truncate(', 'Decimal d)', 'static Decimal'),
  \ dotnet#method('Truncate(', 'float64 d)', 'static float64'),
  \ dotnet#method('Sqrt(', 'float64 d) internalcall', 'static float64'),
  \ dotnet#method('Log(', 'float64 d) internalcall', 'static float64'),
  \ dotnet#method('Log10(', 'float64 d) internalcall', 'static float64'),
  \ dotnet#method('Exp(', 'float64 d) internalcall', 'static float64'),
  \ dotnet#method('Pow(', 'float64 x, float64 y) internalcall', 'static float64'),
  \ dotnet#method('IEEERemainder(', 'float64 x, float64 y)', 'static float64'),
  \ dotnet#method('Abs(', 'int8 value)', 'static int8'),
  \ dotnet#method('Abs(', 'int16 value)', 'static int16'),
  \ dotnet#method('Abs(', 'int32 value)', 'static int32'),
  \ dotnet#method('Abs(', 'int64 value)', 'static int64'),
  \ dotnet#method('Abs(', 'float32 value) internalcall', 'static float32'),
  \ dotnet#method('Abs(', 'float64 value) internalcall', 'static float64'),
  \ dotnet#method('Abs(', 'Decimal value)', 'static Decimal'),
  \ dotnet#method('Max(', 'int8 val1, int8 val2)', 'static int8'),
  \ dotnet#method('Max(', 'uint8 val1, uint8 val2)', 'static uint8'),
  \ dotnet#method('Max(', 'int16 val1, int16 val2)', 'static int16'),
  \ dotnet#method('Max(', 'uint16 val1, uint16 val2)', 'static uint16'),
  \ dotnet#method('Max(', 'int32 val1, int32 val2)', 'static int32'),
  \ dotnet#method('Max(', 'uint32 val1, uint32 val2)', 'static uint32'),
  \ dotnet#method('Max(', 'int64 val1, int64 val2)', 'static int64'),
  \ dotnet#method('Max(', 'uint64 val1, uint64 val2)', 'static uint64'),
  \ dotnet#method('Max(', 'float32 val1, float32 val2)', 'static float32'),
  \ dotnet#method('Max(', 'float64 val1, float64 val2)', 'static float64'),
  \ dotnet#method('Max(', 'Decimal val1, Decimal val2)', 'static Decimal'),
  \ dotnet#method('Min(', 'int8 val1, int8 val2)', 'static int8'),
  \ dotnet#method('Min(', 'uint8 val1, uint8 val2)', 'static uint8'),
  \ dotnet#method('Min(', 'int16 val1, int16 val2)', 'static int16'),
  \ dotnet#method('Min(', 'uint16 val1, uint16 val2)', 'static uint16'),
  \ dotnet#method('Min(', 'int32 val1, int32 val2)', 'static int32'),
  \ dotnet#method('Min(', 'uint32 val1, uint32 val2)', 'static uint32'),
  \ dotnet#method('Min(', 'int64 val1, int64 val2)', 'static int64'),
  \ dotnet#method('Min(', 'uint64 val1, uint64 val2)', 'static uint64'),
  \ dotnet#method('Min(', 'float32 val1, float32 val2)', 'static float32'),
  \ dotnet#method('Min(', 'float64 val1, float64 val2)', 'static float64'),
  \ dotnet#method('Min(', 'Decimal val1, Decimal val2)', 'static Decimal'),
  \ dotnet#method('Log(', 'float64 a, float64 newBase)', 'static float64'),
  \ dotnet#method('Sign(', 'int8 value)', 'static int32'),
  \ dotnet#method('Sign(', 'int16 value)', 'static int32'),
  \ dotnet#method('Sign(', 'int32 value)', 'static int32'),
  \ dotnet#method('Sign(', 'int64 value)', 'static int32'),
  \ dotnet#method('Sign(', 'float32 value)', 'static int32'),
  \ dotnet#method('Sign(', 'float64 value)', 'static int32'),
  \ dotnet#method('Sign(', 'Decimal value)', 'static int32'),
  \ dotnet#method('BigMul(', 'int32 a, int32 b)', 'static int64'),
  \ dotnet#method('DivRem(', 'int32 a, int32 b, [out] int32& result)', 'static int32'),
  \ dotnet#method('DivRem(', 'int64 a, int64 b, [out] int64& result)', 'static int64'),
  \ dotnet#method('Math(', ')', 'static void .'),
  \ ])

call dotnet#class('MethodAccessException', 'MemberAccessException', [ 
  \ dotnet#method('MethodAccessException(', ')', 'void'),
  \ dotnet#method('MethodAccessException(', 'string message)', 'void'),
  \ dotnet#method('MethodAccessException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('MethodAccessException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('MissingMemberException', 'MemberAccessException', [ 
  \ dotnet#field('ClassName', 'string'),
  \ dotnet#field('MemberName', 'string'),
  \ dotnet#field('Signature', 'uint8[]'),
  \ dotnet#method('MissingMemberException(', ')', 'void'),
  \ dotnet#method('MissingMemberException(', 'string message)', 'void'),
  \ dotnet#method('MissingMemberException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('MissingMemberException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('FormatSignature(', 'uint8[] signature) internalcall', 'static string'),
  \ dotnet#method('MissingMemberException(', 'string className, string memberName)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ ])

call dotnet#class('MissingFieldException', 'MissingMemberException', [ 
  \ dotnet#method('MissingFieldException(', ')', 'void'),
  \ dotnet#method('MissingFieldException(', 'string message)', 'void'),
  \ dotnet#method('MissingFieldException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('MissingFieldException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('MissingFieldException(', 'string className, string fieldName)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ ])

call dotnet#class('MissingMethodException', 'MissingMemberException', [ 
  \ dotnet#method('MissingMethodException(', ')', 'void'),
  \ dotnet#method('MissingMethodException(', 'string message)', 'void'),
  \ dotnet#method('MissingMethodException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('MissingMethodException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('MissingMethodException(', 'string className, string methodName)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ ])

call dotnet#class('MulticastNotSupportedException', 'SystemException', [ 
  \ dotnet#method('MulticastNotSupportedException(', ')', 'void'),
  \ dotnet#method('MulticastNotSupportedException(', 'string message)', 'void'),
  \ dotnet#method('MulticastNotSupportedException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('MulticastNotSupportedException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('NonSerializedAttribute', 'Attribute', [ 
  \ dotnet#method('GetCustomAttribute(', 'class RuntimeFieldInfo field)', 'static Attribute'),
  \ dotnet#method('IsDefined(', 'class RuntimeFieldInfo field)', 'static bool'),
  \ dotnet#method('NonSerializedAttribute(', ')', 'void'),
  \ ])

call dotnet#class('NotFiniteNumberException', 'ArithmeticException', [ 
  \ dotnet#method('NotFiniteNumberException(', ')', 'void'),
  \ dotnet#method('NotFiniteNumberException(', 'float64 offendingNumber)', 'void'),
  \ dotnet#method('NotFiniteNumberException(', 'string message)', 'void'),
  \ dotnet#method('NotFiniteNumberException(', 'string message, float64 offendingNumber)', 'void'),
  \ dotnet#method('NotFiniteNumberException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('NotFiniteNumberException(', 'string message, float64 offendingNumber, Exception innerException)', 'void'),
  \ dotnet#method('NotFiniteNumberException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_OffendingNumber(', ')', 'float64'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('OffendingNumber', 'float64'),
  \ ])

call dotnet#class('NotImplementedException', 'SystemException', [ 
  \ dotnet#method('NotImplementedException(', ')', 'void'),
  \ dotnet#method('NotImplementedException(', 'string message)', 'void'),
  \ dotnet#method('NotImplementedException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('NotImplementedException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('NotSupportedException', 'SystemException', [ 
  \ dotnet#method('NotSupportedException(', ')', 'void'),
  \ dotnet#method('NotSupportedException(', 'string message)', 'void'),
  \ dotnet#method('NotSupportedException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('NotSupportedException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('NullReferenceException', 'SystemException', [ 
  \ dotnet#method('NullReferenceException(', ')', 'void'),
  \ dotnet#method('NullReferenceException(', 'string message)', 'void'),
  \ dotnet#method('NullReferenceException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('NullReferenceException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ObjectDisposedException', 'InvalidOperationException', [ 
  \ dotnet#method('ObjectDisposedException(', ')', 'void'),
  \ dotnet#method('ObjectDisposedException(', 'string objectName)', 'void'),
  \ dotnet#method('ObjectDisposedException(', 'string objectName, string message)', 'void'),
  \ dotnet#method('ObjectDisposedException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_ObjectName(', ')', 'string'),
  \ dotnet#method('ObjectDisposedException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('ObjectName', 'string'),
  \ ])

call dotnet#class('ObsoleteAttribute', 'Attribute', [ 
  \ dotnet#method('ObsoleteAttribute(', ')', 'void'),
  \ dotnet#method('ObsoleteAttribute(', 'string message)', 'void'),
  \ dotnet#method('ObsoleteAttribute(', 'string message, bool error)', 'void'),
  \ dotnet#method('get_Message(', ')', 'string'),
  \ dotnet#method('get_IsError(', ')', 'bool'),
  \ dotnet#prop('Message', 'string'),
  \ dotnet#prop('IsError', 'bool'),
  \ ])

call dotnet#class('OperatingSystem', 'Object', [ 
  \ dotnet#method('OperatingSystem(', ')', 'void'),
  \ dotnet#method('OperatingSystem(', 'PlatformID platform, Version version)', 'void'),
  \ dotnet#method('OperatingSystem(', 'PlatformID platform, Version version, string servicePack)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Platform(', ')', 'PlatformID'),
  \ dotnet#method('get_ServicePack(', ')', 'string'),
  \ dotnet#method('get_Version(', ')', 'Version'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_VersionString(', ')', 'string'),
  \ dotnet#prop('Platform', 'PlatformID'),
  \ dotnet#prop('ServicePack', 'string'),
  \ dotnet#prop('Version', 'Version'),
  \ dotnet#prop('VersionString', 'string'),
  \ ])

call dotnet#class('OperationCanceledException', 'SystemException', [ 
  \ dotnet#method('get_CancellationToken(', ')', 'CancellationToken'),
  \ dotnet#method('set_CancellationToken(', 'CancellationToken value)', 'void'),
  \ dotnet#method('OperationCanceledException(', ')', 'void'),
  \ dotnet#method('OperationCanceledException(', 'string message)', 'void'),
  \ dotnet#method('OperationCanceledException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('OperationCanceledException(', 'CancellationToken token)', 'void'),
  \ dotnet#method('OperationCanceledException(', 'string message, CancellationToken token)', 'void'),
  \ dotnet#method('OperationCanceledException(', 'string message, Exception innerException, CancellationToken token)', 'void'),
  \ dotnet#method('OperationCanceledException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('CancellationToken', 'CancellationToken'),
  \ ])

call dotnet#class('OverflowException', 'ArithmeticException', [ 
  \ dotnet#method('OverflowException(', ')', 'void'),
  \ dotnet#method('OverflowException(', 'string message)', 'void'),
  \ dotnet#method('OverflowException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('OverflowException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ParamArrayAttribute', 'Attribute', [ 
  \ dotnet#method('ParamArrayAttribute(', ')', 'void'),
  \ ])

call dotnet#class('PlatformNotSupportedException', 'NotSupportedException', [ 
  \ dotnet#method('PlatformNotSupportedException(', ')', 'void'),
  \ dotnet#method('PlatformNotSupportedException(', 'string message)', 'void'),
  \ dotnet#method('PlatformNotSupportedException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('PlatformNotSupportedException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('Random', 'Object', [ 
  \ dotnet#method('Random(', ')', 'void'),
  \ dotnet#method('Random(', 'int32 Seed)', 'void'),
  \ dotnet#method('Sample(', ')', 'float64'),
  \ dotnet#method('Next(', ')', 'int32'),
  \ dotnet#method('Next(', 'int32 minValue, int32 maxValue)', 'int32'),
  \ dotnet#method('Next(', 'int32 maxValue)', 'int32'),
  \ dotnet#method('NextDouble(', ')', 'float64'),
  \ dotnet#method('NextBytes(', 'uint8[] buffer)', 'void'),
  \ ])

call dotnet#class('RankException', 'SystemException', [ 
  \ dotnet#method('RankException(', ')', 'void'),
  \ dotnet#method('RankException(', 'string message)', 'void'),
  \ dotnet#method('RankException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('RankException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('Type', 'MemberInfo', [ 
  \ dotnet#method('Type(', ')', 'static void .'),
  \ dotnet#method('Type(', ')', 'void'),
  \ dotnet#method('get_MemberType(', ')', ''),
  \ dotnet#method('get_DeclaringType(', ')', 'Type'),
  \ dotnet#method('get_DeclaringMethod(', ')', ''),
  \ dotnet#method('get_ReflectedType(', ')', 'Type'),
  \ dotnet#method('GetType(', ')', 'Type'),
  \ dotnet#method('GetType(', 'string typeName, bool throwOnError, bool ignoreCase) noinlining', 'static Type'),
  \ dotnet#method('GetType(', 'string typeName, bool throwOnError) noinlining', 'static Type'),
  \ dotnet#method('GetType(', 'string typeName) noinlining', 'static Type'),
  \ dotnet#method('GetType(', 'string typeName, Func assemblyResolver, Func typeResolver) noinlining', 'static Type'),
  \ dotnet#method('GetType(', 'string typeName, Func assemblyResolver, Func typeResolver, bool throwOnError) noinlining', 'static Type'),
  \ dotnet#method('GetType(', 'string typeName, Func assemblyResolver, Func typeResolver, bool throwOnError, bool ignoreCase) noinlining', 'static Type'),
  \ dotnet#method('ReflectionOnlyGetType(', 'string typeName, bool throwIfNotFound, bool ignoreCase) noinlining', 'static Type'),
  \ dotnet#method('MakePointerType(', ')', 'Type'),
  \ dotnet#method('get_StructLayoutAttribute(', ')', ''),
  \ dotnet#method('MakeByRefType(', ')', 'Type'),
  \ dotnet#method('MakeArrayType(', ')', 'Type'),
  \ dotnet#method('MakeArrayType(', 'int32 rank)', 'Type'),
  \ dotnet#method('GetTypeFromProgID(', 'string progID)', 'static Type'),
  \ dotnet#method('GetTypeFromProgID(', 'string progID, bool throwOnError)', 'static Type'),
  \ dotnet#method('GetTypeFromProgID(', 'string progID, string server)', 'static Type'),
  \ dotnet#method('GetTypeFromProgID(', 'string progID, string server, bool throwOnError)', 'static Type'),
  \ dotnet#method('GetTypeFromCLSID(', 'Guid clsid)', 'static Type'),
  \ dotnet#method('GetTypeFromCLSID(', 'Guid clsid, bool throwOnError)', 'static Type'),
  \ dotnet#method('GetTypeFromCLSID(', 'Guid clsid, string server)', 'static Type'),
  \ dotnet#method('GetTypeFromCLSID(', 'Guid clsid, string server, bool throwOnError)', 'static Type'),
  \ dotnet#method('SigToString(', ')', 'string'),
  \ dotnet#method('GetTypeCode(', 'class Type type)', 'static TypeCode'),
  \ dotnet#method('GetTypeCodeImpl(', ')', 'family'),
  \ dotnet#method('get_GUID(', ')', 'abstract'),
  \ dotnet#method('get_DefaultBinder(', ')', 'static'),
  \ dotnet#method('InvokeMember(', 'string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)', 'abstract object'),
  \ dotnet#method('InvokeMember(', 'string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, CultureInfo culture)', 'object'),
  \ dotnet#method('InvokeMember(', 'string name, BindingFlags invokeAttr, Binder binder, object target, object[] args)', 'object'),
  \ dotnet#method('get_Module(', ')', 'abstract'),
  \ dotnet#method('get_Assembly(', ')', 'abstract'),
  \ dotnet#method('get_TypeHandle(', ')', ''),
  \ dotnet#method('GetTypeHandleInternal(', ')', 'strict'),
  \ dotnet#method('GetTypeHandle(', 'object o)', 'static RuntimeTypeHandle'),
  \ dotnet#method('GetTypeFromHandleUnsafe(', 'native int handle) internalcall', 'static RuntimeType'),
  \ dotnet#method('GetTypeFromHandle(', 'RuntimeTypeHandle handle) internalcall', 'static Type'),
  \ dotnet#method('get_FullName(', ')', 'abstract string'),
  \ dotnet#method('get_Namespace(', ')', 'abstract string'),
  \ dotnet#method('get_AssemblyQualifiedName(', ')', 'abstract string'),
  \ dotnet#method('GetArrayRank(', ')', 'int32'),
  \ dotnet#method('get_BaseType(', ')', 'abstract Type'),
  \ dotnet#method('GetConstrType(', 'BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', ''),
  \ dotnet#method('GetConstrType(', 'BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)', ''),
  \ dotnet#method('GetConstrType(', 'class Type[] types)', ''),
  \ dotnet#method('GetConstrTypeImpl(', 'BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'abstract'),
  \ dotnet#method('GetConstrTypes(', ')', ''),
  \ dotnet#method('GetConstrTypes(', 'BindingFlags bindingAttr)', 'abstract'),
  \ dotnet#method('get_TypeInitializer(', ')', ''),
  \ dotnet#method('GetMethod(', 'string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', ''),
  \ dotnet#method('GetMethod(', 'string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)', ''),
  \ dotnet#method('GetMethod(', 'string name, Type[] types, ParameterModifier[] modifiers)', ''),
  \ dotnet#method('GetMethod(', 'string name, Type[] types)', ''),
  \ dotnet#method('GetMethod(', 'string name, BindingFlags bindingAttr)', ''),
  \ dotnet#method('GetMethod(', 'string name)', ''),
  \ dotnet#method('GetMethodImpl(', 'string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)', 'abstract'),
  \ dotnet#method('GetMethods(', ')', ''),
  \ dotnet#method('GetMethods(', 'BindingFlags bindingAttr)', 'abstract'),
  \ dotnet#method('GetField(', 'string name, BindingFlags bindingAttr)', 'abstract'),
  \ dotnet#method('GetField(', 'string name)', ''),
  \ dotnet#method('GetFields(', ')', ''),
  \ dotnet#method('GetFields(', 'BindingFlags bindingAttr)', 'abstract'),
  \ dotnet#method('GetInterface(', 'string name)', 'Type'),
  \ dotnet#method('GetInterface(', 'string name, bool ignoreCase)', 'abstract Type'),
  \ dotnet#method('GetInterfaces(', ')', 'abstract Type[]'),
  \ dotnet#method('FindInterfaces(', 'class TypeFilter filter, object filterCriteria)', 'Type[]'),
  \ dotnet#method('GetEvent(', 'string name)', ''),
  \ dotnet#method('GetEvent(', 'string name, BindingFlags bindingAttr)', 'abstract'),
  \ dotnet#method('GetEvents(', ')', ''),
  \ dotnet#method('GetEvents(', 'BindingFlags bindingAttr)', 'abstract'),
  \ dotnet#method('GetProperty(', 'string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)', ''),
  \ dotnet#method('GetProperty(', 'string name, Type returnType, Type[] types, ParameterModifier[] modifiers)', ''),
  \ dotnet#method('GetProperty(', 'string name, BindingFlags bindingAttr)', ''),
  \ dotnet#method('GetProperty(', 'string name, Type returnType, Type[] types)', ''),
  \ dotnet#method('GetProperty(', 'string name, Type[] types)', ''),
  \ dotnet#method('GetProperty(', 'string name, Type returnType)', ''),
  \ dotnet#method('GetProperty(', 'string name, BindingFlags bindingAttr, Type returnType)', 'PropertyInfo'),
  \ dotnet#method('GetProperty(', 'string name)', ''),
  \ dotnet#method('GetPropertyImpl(', 'string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)', 'abstract'),
  \ dotnet#method('GetProperties(', 'BindingFlags bindingAttr)', 'abstract'),
  \ dotnet#method('GetProperties(', ')', ''),
  \ dotnet#method('GetNestedTypes(', ')', 'Type[]'),
  \ dotnet#method('GetNestedTypes(', 'BindingFlags bindingAttr)', 'abstract Type[]'),
  \ dotnet#method('GetNestedType(', 'string name)', 'Type'),
  \ dotnet#method('GetNestedType(', 'string name, BindingFlags bindingAttr)', 'abstract Type'),
  \ dotnet#method('GetMember(', 'string name)', ''),
  \ dotnet#method('GetMember(', 'string name, BindingFlags bindingAttr)', ''),
  \ dotnet#method('GetMember(', 'string name, MemberTypes type, BindingFlags bindingAttr)', ''),
  \ dotnet#method('GetMembers(', ')', ''),
  \ dotnet#method('GetMembers(', 'BindingFlags bindingAttr)', 'abstract'),
  \ dotnet#method('GetDefaultMembers(', ')', ''),
  \ dotnet#method('FindMembers(', 'MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria)', ''),
  \ dotnet#method('get_IsNested(', ')', 'bool'),
  \ dotnet#method('get_Attributes(', ')', ''),
  \ dotnet#method('get_GenericParameterAttributes(', ')', ''),
  \ dotnet#method('get_IsVisible(', ')', 'bool'),
  \ dotnet#method('get_IsNotPublic(', ')', 'bool'),
  \ dotnet#method('get_IsPublic(', ')', 'bool'),
  \ dotnet#method('get_IsNestedPublic(', ')', 'bool'),
  \ dotnet#method('get_IsNestedPrivate(', ')', 'bool'),
  \ dotnet#method('get_IsNestedFamily(', ')', 'bool'),
  \ dotnet#method('get_IsNestedAssembly(', ')', 'bool'),
  \ dotnet#method('get_IsNestedFamANDAssem(', ')', 'bool'),
  \ dotnet#method('get_IsNestedFamORAssem(', ')', 'bool'),
  \ dotnet#method('get_IsAutoLayout(', ')', 'bool'),
  \ dotnet#method('get_IsLayoutSequential(', ')', 'bool'),
  \ dotnet#method('get_IsExplicitLayout(', ')', 'bool'),
  \ dotnet#method('get_IsClass(', ')', 'bool'),
  \ dotnet#method('get_IsInterface(', ')', 'bool'),
  \ dotnet#method('get_IsValueType(', ')', 'bool'),
  \ dotnet#method('get_IsAbstract(', ')', 'bool'),
  \ dotnet#method('get_IsSealed(', ')', 'bool'),
  \ dotnet#method('get_IsEnum(', ')', 'bool'),
  \ dotnet#method('get_IsSpecialName(', ')', 'bool'),
  \ dotnet#method('get_IsImport(', ')', 'bool'),
  \ dotnet#method('get_IsSerializable(', ')', 'bool'),
  \ dotnet#method('get_IsAnsiClass(', ')', 'bool'),
  \ dotnet#method('get_IsUnicodeClass(', ')', 'bool'),
  \ dotnet#method('get_IsAutoClass(', ')', 'bool'),
  \ dotnet#method('get_IsArray(', ')', 'bool'),
  \ dotnet#method('get_IsSzArray(', ')', 'strict bool'),
  \ dotnet#method('get_IsGenericType(', ')', 'bool'),
  \ dotnet#method('get_IsGenericTypeDefinition(', ')', 'bool'),
  \ dotnet#method('get_IsGenericParameter(', ')', 'bool'),
  \ dotnet#method('get_GenericParameterPosition(', ')', 'int32'),
  \ dotnet#method('get_ContainsGenericParameters(', ')', 'bool'),
  \ dotnet#method('GetGenericParameterConstraints(', ')', 'Type[]'),
  \ dotnet#method('get_IsByRef(', ')', 'bool'),
  \ dotnet#method('get_IsPointer(', ')', 'bool'),
  \ dotnet#method('get_IsPrimitive(', ')', 'bool'),
  \ dotnet#method('get_IsCOMObject(', ')', 'bool'),
  \ dotnet#method('get_HasElementType(', ')', 'bool'),
  \ dotnet#method('get_IsContextful(', ')', 'bool'),
  \ dotnet#method('get_IsMarshalByRef(', ')', 'bool'),
  \ dotnet#method('get_HasProxyAttribute(', ')', 'bool'),
  \ dotnet#method('IsValueTypeImpl(', ')', 'bool'),
  \ dotnet#method('GetAttributeFlagsImpl(', ')', 'abstract'),
  \ dotnet#method('IsArrayImpl(', ')', 'abstract bool'),
  \ dotnet#method('IsByRefImpl(', ')', 'abstract bool'),
  \ dotnet#method('IsPointerImpl(', ')', 'abstract bool'),
  \ dotnet#method('IsPrimitiveImpl(', ')', 'abstract bool'),
  \ dotnet#method('IsCOMObjectImpl(', ')', 'abstract bool'),
  \ dotnet#method('MakeGenericType(', 'class Type[] typeArguments)', 'Type'),
  \ dotnet#method('IsContextfulImpl(', ')', 'bool'),
  \ dotnet#method('IsMarshalByRefImpl(', ')', 'bool'),
  \ dotnet#method('HasProxyAttributeImpl(', ')', 'strict bool'),
  \ dotnet#method('GetElementType(', ')', 'abstract Type'),
  \ dotnet#method('GetGenericArguments(', ')', 'Type[]'),
  \ dotnet#method('GetGenericTypeDefinition(', ')', 'Type'),
  \ dotnet#method('get_IsRuntimeType(', ')', 'strict bool'),
  \ dotnet#method('HasElementTypeImpl(', ')', 'abstract bool'),
  \ dotnet#method('GetRootElementType(', ')', 'strict Type'),
  \ dotnet#method('GetEnumNames(', ')', 'string[]'),
  \ dotnet#method('GetEnumValues(', ')', 'Array'),
  \ dotnet#method('GetEnumUnderlyingType(', ')', 'Type'),
  \ dotnet#method('IsEnumDefined(', 'object value)', 'bool'),
  \ dotnet#method('GetEnumName(', 'object value)', 'string'),
  \ dotnet#method('IsIntegerType(', 'class Type t)', 'static bool'),
  \ dotnet#method('get_IsSecurityCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecuritySafeCritical(', ')', 'bool'),
  \ dotnet#method('get_IsSecurityTransparent(', ')', 'bool'),
  \ dotnet#method('get_NeedsReflectionSecurityCheck(', ')', 'bool'),
  \ dotnet#method('get_UnderlyingSystemType(', ')', 'abstract Type'),
  \ dotnet#method('IsSubclassOf(', 'class Type c)', 'bool'),
  \ dotnet#method('IsInstanceOfType(', 'object o)', 'bool'),
  \ dotnet#method('IsAssignableFrom(', 'class Type c)', 'bool'),
  \ dotnet#method('IsEquivalentTo(', 'class Type other)', 'bool'),
  \ dotnet#method('ImplementInterface(', 'class Type ifaceType)', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetTypeArray(', 'object[] args)', 'static Type[]'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'class Type o)', 'bool'),
  \ dotnet#method('op_Equality(', 'class Type left, Type right) internalcall', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class Type left, Type right) internalcall', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetInterfaceMap(', 'class Type interfaceType)', ''),
  \ dotnet#method('GetTypeInfoCount(', '[out] uint32& pcTInfo)', 'void '),
  \ dotnet#method('GetTypeInfo(', 'uint32 iTInfo, uint32 lcid, int ppTInfo)', 'void '),
  \ dotnet#method('GetIDsOfNames(', '[in] Guid& riid, int rgszNames, uint32 cNames, uint32 lcid, int rgDispId)', 'void '),
  \ dotnet#method('Invoke(', 'uint32 dispIdMember, [in] Guid& riid, uint32 lcid, int16 wFlags, int pDispParams, int pVarResult, int pExcepInfo, int puArgErr)', 'void '),
  \ dotnet#prop('MemberType', 'MemberTypes'),
  \ dotnet#prop('DeclaringType', 'Type'),
  \ dotnet#prop('DeclaringMethod', 'MethodBase'),
  \ dotnet#prop('ReflectedType', 'Type'),
  \ dotnet#prop('StructLayoutAttribute', 'StructLayoutAttribute'),
  \ dotnet#prop('GUID', 'Guid'),
  \ dotnet#prop('DefaultBinder', 'Binder'),
  \ dotnet#prop('', 'Module'),
  \ dotnet#prop('', 'Assembly'),
  \ dotnet#prop('TypeHandle', 'RuntimeTypeHandle'),
  \ dotnet#prop('FullName', 'string'),
  \ dotnet#prop('Namespace', 'string'),
  \ dotnet#prop('AssemblyQualifiedName', 'string'),
  \ dotnet#prop('BaseType', 'Type'),
  \ dotnet#prop('TypeInitializer', 'ConstrTypeInfo'),
  \ dotnet#prop('IsNested', 'bool'),
  \ dotnet#prop('Attributes', 'TypeAttributes'),
  \ dotnet#prop('GenericParameterAttributes', 'GenericParameterAttributes'),
  \ dotnet#prop('IsVisible', 'bool'),
  \ dotnet#prop('IsNotPublic', 'bool'),
  \ dotnet#prop('IsPublic', 'bool'),
  \ dotnet#prop('IsNestedPublic', 'bool'),
  \ dotnet#prop('IsNestedPrivate', 'bool'),
  \ dotnet#prop('IsNestedFamily', 'bool'),
  \ dotnet#prop('IsNestedAssembly', 'bool'),
  \ dotnet#prop('IsNestedFamANDAssem', 'bool'),
  \ dotnet#prop('IsNestedFamORAssem', 'bool'),
  \ dotnet#prop('IsAutoLayout', 'bool'),
  \ dotnet#prop('IsLayoutSequential', 'bool'),
  \ dotnet#prop('IsExplicitLayout', 'bool'),
  \ dotnet#prop('IsClass', 'bool'),
  \ dotnet#prop('IsInterface', 'bool'),
  \ dotnet#prop('IsValueType', 'bool'),
  \ dotnet#prop('IsAbstract', 'bool'),
  \ dotnet#prop('IsSealed', 'bool'),
  \ dotnet#prop('IsEnum', 'bool'),
  \ dotnet#prop('IsSpecialName', 'bool'),
  \ dotnet#prop('IsImport', 'bool'),
  \ dotnet#prop('IsSerializable', 'bool'),
  \ dotnet#prop('IsAnsiClass', 'bool'),
  \ dotnet#prop('IsUnicodeClass', 'bool'),
  \ dotnet#prop('IsAutoClass', 'bool'),
  \ dotnet#prop('IsArray', 'bool'),
  \ dotnet#prop('IsSzArray', 'bool'),
  \ dotnet#prop('IsGenericType', 'bool'),
  \ dotnet#prop('IsGenericTypeDefinition', 'bool'),
  \ dotnet#prop('IsGenericParameter', 'bool'),
  \ dotnet#prop('GenericParameterPosition', 'int32'),
  \ dotnet#prop('ContainsGenericParameters', 'bool'),
  \ dotnet#prop('IsByRef', 'bool'),
  \ dotnet#prop('IsPointer', 'bool'),
  \ dotnet#prop('IsPrimitive', 'bool'),
  \ dotnet#prop('IsCOMObject', 'bool'),
  \ dotnet#prop('HasElementType', 'bool'),
  \ dotnet#prop('IsContextful', 'bool'),
  \ dotnet#prop('IsMarshalByRef', 'bool'),
  \ dotnet#prop('HasProxyAttribute', 'bool'),
  \ dotnet#prop('IsRuntimeType', 'bool'),
  \ dotnet#prop('IsSecurityCritical', 'bool'),
  \ dotnet#prop('IsSecuritySafeCritical', 'bool'),
  \ dotnet#prop('IsSecurityTransparent', 'bool'),
  \ dotnet#prop('NeedsReflectionSecurityCheck', 'bool'),
  \ dotnet#prop('UnderlyingSystemType', 'Type'),
  \ ])

call dotnet#class('RuntimeArgumentHandle', 'ValueType', [ 
  \ dotnet#field('m_ptr', 'int'),
  \ dotnet#method('get_Value(', ')', 'int'),
  \ dotnet#prop('Value', 'int'),
  \ ])

call dotnet#class('RuntimeTypeHandle', 'ValueType', [ 
  \ dotnet#field('_firstCall', 'bool'),
  \ dotnet#field('_handle', 'RuntimeMethodHandleInternal'),
  \ dotnet#method('RuntimeTypeHandle(', 'class RuntimeType type)', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'RuntimeTypeHandle/IntroducedMethodEnumerator'),
  \ dotnet#prop('Current', 'RuntimeMethodHandleInternal'),
  \ dotnet#field('m_type', 'RuntimeType'),
  \ dotnet#method('GetNativeHandle(', ')', 'RuntimeTypeHandle'),
  \ dotnet#method('GetTypeChecked(', ')', 'RuntimeType'),
  \ dotnet#method('IsInstanceOfType(', 'class RuntimeType type, object o) internalcall', 'static bool'),
  \ dotnet#method('GetTypeHelper(', 'class Type typeStart, Type[] genericArgs, int pModifiers, int32 cModifiers)', 'static Type'),
  \ dotnet#method('op_Equality(', 'RuntimeTypeHandle left, object right)', 'static bool'),
  \ dotnet#method('op_Equality(', 'object left, RuntimeTypeHandle right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'RuntimeTypeHandle left, object right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'object left, RuntimeTypeHandle right)', 'static bool'),
  \ dotnet#method('get_EmptyHandle(', ')', 'static'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'RuntimeTypeHandle handle)', 'bool'),
  \ dotnet#method('get_Value(', ')', 'int'),
  \ dotnet#method('GetValueInternal(', 'RuntimeTypeHandle handle) internalcall', 'static int'),
  \ dotnet#method('RuntimeTypeHandle(', 'class RuntimeType type)', 'void'),
  \ dotnet#method('IsNullHandle(', ')', 'bool'),
  \ dotnet#method('IsPrimitive(', 'class RuntimeType type)', 'static bool'),
  \ dotnet#method('IsByRef(', 'class RuntimeType type)', 'static bool'),
  \ dotnet#method('IsPointer(', 'class RuntimeType type)', 'static bool'),
  \ dotnet#method('IsArray(', 'class RuntimeType type)', 'static bool'),
  \ dotnet#method('IsSzArray(', 'class RuntimeType type)', 'static bool'),
  \ dotnet#method('HasElementType(', 'class RuntimeType type)', 'static bool'),
  \ dotnet#method('IsGenericType(', 'class RuntimeType type)', 'static bool'),
  \ dotnet#method('CopyRuntimeTypeHandles(', 'RuntimeTypeHandle[] inHandles, [out] int32& length)', 'static int[]'),
  \ dotnet#method('CopyRuntimeTypeHandles(', 'class Type[] inHandles, [out] int32& length)', 'static int[]'),
  \ dotnet#method('CreateInstance(', 'class RuntimeType type, bool publicOnly, bool noCheck, bool& canBeCached, RuntimeMethodHandleInternal&RuntimeTypeHandle, bool& bNeedSecurityCheck) internalcall', 'static object'),
  \ dotnet#method('CreateCaInstance(', 'class RuntimeType type, IRuntimeMethodInfoRuntimeTypeHandle) internalcall', 'static object'),
  \ dotnet#method('Allocate(', 'class RuntimeType type) internalcall', 'static object'),
  \ dotnet#method('CreateInstanceForAnotherGenericParameter(', 'class RuntimeType type, RuntimeType genericParameter) internalcall', 'static object'),
  \ dotnet#method('GetRuntimeType(', ')', 'RuntimeType'),
  \ dotnet#method('GetCorElementType(', 'class RuntimeType type) internalcall', 'static CorElementType'),
  \ dotnet#method('GetAssembly(', 'class RuntimeType type) internalcall', 'static RuntimeAssembly'),
  \ dotnet#method('GetModule(', 'class RuntimeType type) internalcall', 'static RuntimeModule'),
  \ dotnet#method('GetModuleHandle(', ')', 'ModuleHandle'),
  \ dotnet#method('GetBaseType(', 'class RuntimeType type) internalcall', 'static RuntimeType'),
  \ dotnet#method('GetAttributes(', 'class RuntimeType type) internalcall', 'static TypeAttributes'),
  \ dotnet#method('GetElementType(', 'class RuntimeType type) internalcall', 'static RuntimeType'),
  \ dotnet#method('CompareCanonicalHandles(', 'class RuntimeType left, RuntimeType right) internalcall', 'static bool'),
  \ dotnet#method('GetArrayRank(', 'class RuntimeType type) internalcall', 'static int32'),
  \ dotnet#method('GetToken(', 'class RuntimeType type) internalcall', 'static int32'),
  \ dotnet#method('GetMethodAt(', 'class RuntimeType type, int32 slot) internalcall', 'static RuntimeMethodHandleInternal'),
  \ dotnet#method('GetIntroducedMethods(', 'class RuntimeType type)', 'static RuntimeTypeHandle/IntroducedMethodEnumerator'),
  \ dotnet#method('GetFields(', 'class RuntimeType type, int* result, int32* count) internalcall', 'static bool'),
  \ dotnet#method('GetInterfaces(', 'class RuntimeType type) internalcall', 'static Type[]'),
  \ dotnet#method('GetConstraints(', ')', 'Type[]'),
  \ dotnet#method('GetGCHandle(', 'GCHandleType type)', 'int'),
  \ dotnet#method('GetNumVirtuals(', 'class RuntimeType type) internalcall', 'static int32'),
  \ dotnet#method('GetInterfaceMethodSlots(', 'class RuntimeType type) internalcall', 'static int32'),
  \ dotnet#method('VerifyInterfaceIsImplemented(', 'RuntimeTypeHandle interfaceHandle)', 'void'),
  \ dotnet#method('GetInterfaceMethodImplementationSlot(', 'RuntimeTypeHandle interfaceHandle, RuntimeMethodHandleInternal interfaceMethodHandle)', 'int32'),
  \ dotnet#method('IsComObject(', 'class RuntimeType type, bool isGenericCOM) internalcall', 'static bool'),
  \ dotnet#method('IsContextful(', 'class RuntimeType type) internalcall', 'static bool'),
  \ dotnet#method('IsInterface(', 'class RuntimeType type) internalcall', 'static bool'),
  \ dotnet#method('IsVisible(', 'class RuntimeType type)', 'static bool'),
  \ dotnet#method('IsSecurityCritical(', ')', 'bool'),
  \ dotnet#method('IsSecuritySafeCritical(', ')', 'bool'),
  \ dotnet#method('IsSecurityTransparent(', ')', 'bool'),
  \ dotnet#method('IsVisibleFromModule(', 'class RuntimeModule)', 'bool'),
  \ dotnet#method('HasProxyAttribute(', 'class RuntimeType type) internalcall', 'static bool'),
  \ dotnet#method('IsValueType(', 'class RuntimeType type) internalcall', 'static bool'),
  \ dotnet#method('ConstructName(', 'bool nameSpace, bool fullInst, bool assembly)', 'string'),
  \ dotnet#method('GetUtf8Name(', 'class RuntimeType type)', 'static Utf8String'),
  \ dotnet#method('CanCastTo(', 'class RuntimeType type, RuntimeType target) internalcall', 'static bool'),
  \ dotnet#method('GetDeclaringType(', 'class RuntimeType type) internalcall', 'static RuntimeType'),
  \ dotnet#method('GetDeclaringMethod(', 'class RuntimeType type) internalcall', 'static IRuntimeMethodInfo'),
  \ dotnet#method('GetDefaultConstrRuntimeTypeHandle(', ')', 'IRuntimeMethodInfo'),
  \ dotnet#method('GetTypeByName(', 'string name, bool throwOnError, bool ignoreCase, bool reflectionOnly, StackCrawlMark& stackMark, bool loadTypeFromPartialName)', 'static RuntimeType'),
  \ dotnet#method('GetTypeByName(', 'string name, StackCrawlMark& stackMark)', 'static Type'),
  \ dotnet#method('GetTypeByNameUsingCARules(', 'string name, RuntimeModule scope)', 'static RuntimeType'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void GetInstantiation(RuntimeTypeHandle type, ObjectHandleOnStack types, bool fAsRuntimeTypeArray) preservesig', 'static'),
  \ dotnet#method('GetInstantiationInternal(', ')', 'RuntimeType[]'),
  \ dotnet#method('GetInstantiationPublic(', ')', 'Type[]'),
  \ dotnet#method('Instantiate(', 'class Type[] inst)', 'RuntimeType'),
  \ dotnet#method('MakeArray(', 'int32 rank)', 'RuntimeType'),
  \ dotnet#method('MakeSZArray(', ')', 'RuntimeType'),
  \ dotnet#method('MakeByRef(', ')', 'RuntimeType'),
  \ dotnet#method('MakePointer(', ')', 'RuntimeType'),
  \ dotnet#method('IsCollectible(', ')', 'bool'),
  \ dotnet#method('HasInstantiation(', 'class RuntimeType type) internalcall', 'static bool'),
  \ dotnet#method('HasInstantiation(', ')', 'bool'),
  \ dotnet#method('GetGenericTypeDefinition(', 'class RuntimeType type)', 'static RuntimeType'),
  \ dotnet#method('IsGenericTypeDefinition(', 'class RuntimeType type) internalcall', 'static bool'),
  \ dotnet#method('IsGenericVariable(', 'class RuntimeType type) internalcall', 'static bool'),
  \ dotnet#method('IsGenericVariable(', ')', 'bool'),
  \ dotnet#method('GetGenericVariableIndex(', ')', 'int32'),
  \ dotnet#method('ContainsGenericVariables(', 'class RuntimeType handle) internalcall', 'static bool'),
  \ dotnet#method('ContainsGenericVariables(', ')', 'bool'),
  \ dotnet#method('SatisfiesConstraints(', 'class RuntimeType paramType, RuntimeType[] typeContext, RuntimeType[] methodContext, RuntimeType toType)', 'static bool'),
  \ dotnet#method('GetMetadataImport(', 'class RuntimeType type)', 'static MetadataImport'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('IsEquivalentTo(', 'class RuntimeType rtType1, RuntimeType rtType2) internalcall', 'static bool'),
  \ dotnet#method('IsEquivalentType(', 'class RuntimeType type) internalcall', 'static bool'),
  \ dotnet#prop('EmptyHandle', 'RuntimeTypeHandle'),
  \ dotnet#prop('Value', 'int'),
  \ ])

call dotnet#class('RuntimeMethodHandle', 'ValueType', [ 
  \ dotnet#field('m_value', 'IRuntimeMethodInfo'),
  \ dotnet#method('EnsureNonNullMethodInfo(', 'class IRuntimeMethodInfo method)', 'static IRuntimeMethodInfo'),
  \ dotnet#method('get_EmptyHandle(', ')', 'static'),
  \ dotnet#method('RuntimeMethodHandle(', 'class IRuntimeMethodInfo method)', 'void'),
  \ dotnet#method('GetMethodInfo(', ')', 'IRuntimeMethodInfo'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_Value(', ')', 'int'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'RuntimeMethodHandle left, RuntimeMethodHandle right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'RuntimeMethodHandle left, RuntimeMethodHandle right)', 'static bool'),
  \ dotnet#method('Equals(', 'RuntimeMethodHandle handle)', 'bool'),
  \ dotnet#method('IsNullHandle(', ')', 'bool'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) int GetFunctionPointer(RuntimeMethodHandleInternal handle) preservesig', 'static'),
  \ dotnet#method('GetFunctionPointer(', ')', 'int'),
  \ dotnet#method('CheckLinktimeDemands(', 'class IRuntimeMethodInfo method, RuntimeModule, bool isDecoratedTargetSecurityTransparent) internalcall', 'static void'),
  \ dotnet#method('IsVisibleFromModule(', 'class IRuntimeMethodInfo method, RuntimeModule source)', 'static bool'),
  \ dotnet#method('IsVisibleFromType(', 'class IRuntimeMethodInfo handle, RuntimeTypeHandle source)', 'static bool'),
  \ dotnet#method('GetCurrentMethod(', 'StackCrawlMark& stackMark)', 'static IRuntimeMethodInfo'),
  \ dotnet#method('GetAttributes(', 'RuntimeMethodHandleInternal method) internalcall', 'static MethodAttributes'),
  \ dotnet#method('GetAttributes(', 'class IRuntimeMethodInfo method)', 'static MethodAttributes'),
  \ dotnet#method('GetImplAttributes(', 'class IRuntimeMethodInfo method) internalcall', 'static MethodImplAttributes'),
  \ dotnet#method('ConstructInstantiation(', 'class IRuntimeMethodInfo method)', 'static string'),
  \ dotnet#method('GetDeclaringType(', 'RuntimeMethodHandleInternal method) internalcall', 'static RuntimeType'),
  \ dotnet#method('GetDeclaringType(', 'class IRuntimeMethodInfo method)', 'static RuntimeType'),
  \ dotnet#method('GetSlot(', 'RuntimeMethodHandleInternal method) internalcall', 'static int32'),
  \ dotnet#method('GetSlot(', 'class IRuntimeMethodInfo method)', 'static int32'),
  \ dotnet#method('GetMethodDef(', 'class IRuntimeMethodInfo method) internalcall', 'static int32'),
  \ dotnet#method('GetName(', 'RuntimeMethodHandleInternal method) internalcall', 'static string'),
  \ dotnet#method('GetName(', 'class IRuntimeMethodInfo method)', 'static string'),
  \ dotnet#method('GetUtf8Name(', 'RuntimeMethodHandleInternal method)', 'static Utf8String'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) bool MatchesNameHash(RuntimeMethodHandleInternal method, uint32 hash) preservesig', 'static'),
  \ dotnet#method('InvokeMethodFast(', 'class IRuntimeMethodInfo method, object target, object[] arguments, Signature sig, MethodAttributes methodAttributes, RuntimeType typeOwner)', 'static object'),
  \ dotnet#method('GetSecurityFlags(', 'class IRuntimeMethodInfo handle)', 'static INVOCATION_FLAGS'),
  \ dotnet#method('GetSpecialSecurityFlags(', 'class IRuntimeMethodInfo method) internalcall', 'static uint32'),
  \ dotnet#method('PerformSecurityCheck(', 'object obj, RuntimeMethodHandleInternal method, RuntimeType parent, uint32 invocationFlags) internalcall', 'static void'),
  \ dotnet#method('PerformSecurityCheck(', 'object obj, IRuntimeMethodInfo method, RuntimeType parent, uint32 invocationFlags)', 'static void'),
  \ dotnet#method('InvokeConstrRuntimeMethodHandle(', 'class IRuntimeMethodInfo method, object[] args, SignatureStruct signature, RuntimeType declaringType)', 'static object'),
  \ dotnet#method('SerializationInvoke(', 'class IRuntimeMethodInfo method, object target, SignatureStruct declaringTypeSig, SerializationInfo info, StreamingContext context)', 'static void'),
  \ dotnet#method('IsILStub(', 'RuntimeMethodHandleInternal method) internalcall', 'static bool'),
  \ dotnet#method('_IsTokenSecurityTransparent(', 'class RuntimeModule, int32 metaDataToken) internalcall', 'static bool'),
  \ dotnet#method('IsTokenSecurityTransparent(', 'class Module, int32 metaDataToken)', 'static bool'),
  \ dotnet#method('IsSecurityCritical(', 'class IRuntimeMethodInfo method)', 'static bool'),
  \ dotnet#method('IsSecuritySafeCritical(', 'class IRuntimeMethodInfo method)', 'static bool'),
  \ dotnet#method('IsSecurityTransparent(', 'class IRuntimeMethodInfo method)', 'static bool'),
  \ dotnet#method('GetMethodInstantiationInternal(', 'class IRuntimeMethodInfo method)', 'static RuntimeType[]'),
  \ dotnet#method('GetMethodInstantiationInternal(', 'RuntimeMethodHandleInternal method)', 'static RuntimeType[]'),
  \ dotnet#method('GetMethodInstantiationPublic(', 'class IRuntimeMethodInfo method)', 'static Type[]'),
  \ dotnet#method('HasMethodInstantiation(', 'RuntimeMethodHandleInternal method) internalcall', 'static bool'),
  \ dotnet#method('HasMethodInstantiation(', 'class IRuntimeMethodInfo method)', 'static bool'),
  \ dotnet#method('GetStubIfNeeded(', 'RuntimeMethodHandleInternal method, RuntimeType declaringType, RuntimeType[] methodInstantiation) internalcall', 'static RuntimeMethodHandleInternal'),
  \ dotnet#method('GetMethodFromCanonical(', 'RuntimeMethodHandleInternal method, RuntimeType declaringType) internalcall', 'static RuntimeMethodHandleInternal'),
  \ dotnet#method('IsGenericMethodDefinition(', 'RuntimeMethodHandleInternal method) internalcall', 'static bool'),
  \ dotnet#method('IsGenericMethodDefinition(', 'class IRuntimeMethodInfo method)', 'static bool'),
  \ dotnet#method('IsTypicalMethodDefinition(', 'class IRuntimeMethodInfo method) internalcall', 'static bool'),
  \ dotnet#method('GetTypicalMethodDefinition(', 'class IRuntimeMethodInfo method)', 'static IRuntimeMethodInfo'),
  \ dotnet#method('StripMethodInstantiation(', 'class IRuntimeMethodInfo method)', 'static IRuntimeMethodInfo'),
  \ dotnet#method('IsDynamicMethod(', 'RuntimeMethodHandleInternal method) internalcall', 'static bool'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void Destroy(RuntimeMethodHandleInternal method) preservesig', 'static'),
  \ dotnet#method('GetResolver(', 'RuntimeMethodHandleInternal method) internalcall', 'static Resolver'),
  \ dotnet#method('GetCallerType(', 'StackCrawlMark& stackMark)', 'static RuntimeType'),
  \ dotnet#method('GetMethodBody(', 'class IRuntimeMethodInfo method, RuntimeType declaringType) internalcall', 'static MethodBody'),
  \ dotnet#method('IsConstrRuntimeMethodHandle(', 'RuntimeMethodHandleInternal method) internalcall', 'static bool'),
  \ dotnet#method('GetLoaderAllocator(', 'RuntimeMethodHandleInternal method) internalcall', 'static object'),
  \ dotnet#prop('EmptyHandle', 'RuntimeMethodHandle'),
  \ dotnet#prop('Value', 'int'),
  \ ])

call dotnet#class('RuntimeFieldHandle', 'ValueType', [ 
  \ dotnet#field('m_ptr', 'IRuntimeFieldInfo'),
  \ dotnet#method('GetNativeHandle(', ')', 'RuntimeFieldHandle'),
  \ dotnet#method('RuntimeFieldHandle(', 'class IRuntimeFieldInfo fieldInfo)', 'void'),
  \ dotnet#method('GetRuntimeFieldInfo(', ')', 'IRuntimeFieldInfo'),
  \ dotnet#method('get_Value(', ')', 'int'),
  \ dotnet#method('IsNullHandle(', ')', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'RuntimeFieldHandle handle)', 'bool'),
  \ dotnet#method('op_Equality(', 'RuntimeFieldHandle left, RuntimeFieldHandle right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'RuntimeFieldHandle left, RuntimeFieldHandle right)', 'static bool'),
  \ dotnet#method('GetName(', 'class RtFieldInfo field) internalcall', 'static string'),
  \ dotnet#method('GetUtf8Name(', 'RuntimeFieldHandleInternal field)', 'static Utf8String'),
  \ dotnet#method('MatchesNameHash(', 'RuntimeFieldHandleInternal field, uint32 hash)', 'static bool'),
  \ dotnet#method('GetAttributes(', 'RuntimeFieldHandleInternal field) internalcall', 'static FieldAttributes'),
  \ dotnet#method('GetApproxDeclaringType(', 'RuntimeFieldHandleInternal field) internalcall', 'static RuntimeType'),
  \ dotnet#method('GetApproxDeclaringType(', 'class IRuntimeFieldInfo field)', 'static RuntimeType'),
  \ dotnet#method('GetToken(', 'class RtFieldInfo field) internalcall', 'static int32'),
  \ dotnet#method('GetValue(', 'class RtFieldInfo field, object instance, RuntimeType fieldType, RuntimeType declaringType, bool& domainInitialized) internalcall', 'static object'),
  \ dotnet#method('GetValueDirect(', 'class RtFieldInfo field, RuntimeType fieldType, void* pTypedRef, RuntimeType contextType) internalcall', 'static object'),
  \ dotnet#method('SetValue(', 'class RtFieldInfo field, object obj, object value, RuntimeType fieldType, FieldAttributes fieldAttr, RuntimeType declaringType, bool& domainInitialized) internalcall', 'static void'),
  \ dotnet#method('SetValueDirect(', 'class RtFieldInfo field, RuntimeType fieldType, void* pTypedRef, object value, RuntimeType contextType) internalcall', 'static void'),
  \ dotnet#method('GetStaticFieldForGenericType(', 'RuntimeFieldHandleInternal field, RuntimeType declaringType) internalcall', 'static RuntimeFieldHandleInternal'),
  \ dotnet#method('AcquiresContextFromThis(', 'RuntimeFieldHandleInternal field) internalcall', 'static bool'),
  \ dotnet#method('IsSecurityCritical(', ')', 'bool'),
  \ dotnet#method('IsSecuritySafeCritical(', ')', 'bool'),
  \ dotnet#method('IsSecurityTransparent(', ')', 'bool'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void CheckAttributeAccess(RuntimeFieldHandle fieldHandle, RuntimeModule decoratedTarget) preservesig', 'static'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('Value', 'int'),
  \ ])

call dotnet#class('ModuleHandle', 'ValueType', [ 
  \ dotnet#field('m_ptr', 'RuntimeModule'),
  \ dotnet#method('ModuleHandle(', 'class RuntimeModule)', 'void'),
  \ dotnet#method('GetRuntimeModule(', ')', 'RuntimeModule'),
  \ dotnet#method('IsNullHandle(', ')', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'ModuleHandle handle)', 'bool'),
  \ dotnet#method('op_Equality(', 'ModuleHandle left, ModuleHandle right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'ModuleHandle left, ModuleHandle right)', 'static bool'),
  \ dotnet#method('GetDynamicMethod(', 'class DynamicMethod method, RuntimeModule, string name, uint8[] sig, Resolver resolver) internalcall', 'static IRuntimeMethodInfo'),
  \ dotnet#method('GetToken(', 'class RuntimeModule) internalcall', 'static int32'),
  \ dotnet#method('GetRuntimeTypeHandleFromMetadataToken(', 'int32 typeToken)', 'RuntimeTypeHandle'),
  \ dotnet#method('ResolveTypeHandle(', 'int32 typeToken)', 'RuntimeTypeHandle'),
  \ dotnet#method('ResolveTypeHandle(', 'int32 typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)', 'RuntimeTypeHandle'),
  \ dotnet#method('ResolveTypeHandleInternal(', 'class RuntimeModule, int32 typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)', 'static RuntimeType'),
  \ dotnet#method('GetRuntimeMethodHandleFromMetadataToken(', 'int32 methodToken)', 'RuntimeMethodHandle'),
  \ dotnet#method('ResolveMethodHandle(', 'int32 methodToken)', 'RuntimeMethodHandle'),
  \ dotnet#method('ResolveMethodHandleInternal(', 'class RuntimeModule, int32 methodToken)', 'static IRuntimeMethodInfo'),
  \ dotnet#method('ResolveMethodHandle(', 'int32 methodToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)', 'RuntimeMethodHandle'),
  \ dotnet#method('ResolveMethodHandleInternal(', 'class RuntimeModule, int32 methodToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)', 'static IRuntimeMethodInfo'),
  \ dotnet#method('ResolveMethodHandleInternalCore(', 'class RuntimeModule, int32 methodToken, int[] typeInstantiationContext, int32 typeInstCount, int[] methodInstantiationContext, int32 methodInstCount)', 'static RuntimeMethodHandleInternal'),
  \ dotnet#method('GetRuntimeFieldHandleFromMetadataToken(', 'int32 fieldToken)', 'RuntimeFieldHandle'),
  \ dotnet#method('ResolveFieldHandle(', 'int32 fieldToken)', 'RuntimeFieldHandle'),
  \ dotnet#method('ResolveFieldHandle(', 'int32 fieldToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)', 'RuntimeFieldHandle'),
  \ dotnet#method('ResolveFieldHandleInternal(', 'class RuntimeModule, int32 fieldToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)', 'static IRuntimeFieldInfo'),
  \ dotnet#method('ContainsPropertyMatchingHash(', 'class RuntimeModule, int32 propertyToken, uint32 hash)', 'static bool'),
  \ dotnet#method('GetAssembly(', 'class RuntimeModule)', 'static RuntimeAssembly'),
  \ dotnet#method('pinvokeimpl(', '"QCall" unicode winapi) void GetModuleType(class RuntimeModule handle, ObjectHandleOnStack type) preservesig', 'static'),
  \ dotnet#method('GetModuleType(', 'class RuntimeModule)', 'static RuntimeType'),
  \ dotnet#method('GetPEKind(', 'class RuntimeModule, [out] PortableExecutableKinds& peKind, [out] ImageFileMachine& machine)', 'static void'),
  \ dotnet#method('GetMDStreamVersion(', 'class RuntimeModule) internalcall', 'static int32'),
  \ dotnet#method('get_MDStreamVersion(', ')', 'int32'),
  \ dotnet#method('GetMetadataImport(', 'class RuntimeModule)', 'static MetadataImport'),
  \ dotnet#method('ModuleHandle(', ')', 'static void .'),
  \ dotnet#prop('MDStreamVersion', 'int32'),
  \ ])

call dotnet#class('SByte', 'ValueType', [ 
  \ dotnet#field('m_value', 'int8'),
  \ dotnet#method('CompareTo(', 'object obj)', 'int32'),
  \ dotnet#method('CompareTo(', 'int8 value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'int8 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static int8'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static int8'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static int8'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static int8'),
  \ dotnet#method('TryParse(', 'string s, [out] int8& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] int8& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ ])

call dotnet#class('SerializableAttribute', 'Attribute', [ 
  \ dotnet#method('GetCustomAttribute(', 'class RuntimeType type)', 'static Attribute'),
  \ dotnet#method('IsDefined(', 'class RuntimeType type)', 'static bool'),
  \ dotnet#method('SerializableAttribute(', ')', 'void'),
  \ ])

call dotnet#class('Single', 'ValueType', [ 
  \ dotnet#field('m_value', 'float32'),
  \ dotnet#method('IsInfinity(', 'float32 f)', 'static bool'),
  \ dotnet#method('IsPositiveInfinity(', 'float32 f)', 'static bool'),
  \ dotnet#method('IsNegativeInfinity(', 'float32 f)', 'static bool'),
  \ dotnet#method('IsNaN(', 'float32 f)', 'static bool'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'float32 value)', 'int32'),
  \ dotnet#method('op_Equality(', 'float32 left, float32 right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'float32 left, float32 right)', 'static bool'),
  \ dotnet#method('op_LessThan(', 'float32 left, float32 right)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'float32 left, float32 right)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'float32 left, float32 right)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'float32 left, float32 right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'float32 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static float32'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static float32'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static float32'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static float32'),
  \ dotnet#method('TryParse(', 'string s, [out] float32& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] float32& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ ])

call dotnet#class('STAThreadAttribute', 'Attribute', [ 
  \ dotnet#method('STAThreadAttribute(', ')', 'void'),
  \ ])

call dotnet#class('MTAThreadAttribute', 'Attribute', [ 
  \ dotnet#method('MTAThreadAttribute(', ')', 'void'),
  \ ])

call dotnet#class('TimeoutException', 'SystemException', [ 
  \ dotnet#method('TimeoutException(', ')', 'void'),
  \ dotnet#method('TimeoutException(', 'string message)', 'void'),
  \ dotnet#method('TimeoutException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('TimeoutException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('TimeSpan', 'ValueType', [ 
  \ dotnet#field('_ticks', 'int64'),
  \ dotnet#method('TimeSpan(', 'int64 ticks)', 'void'),
  \ dotnet#method('TimeSpan(', 'int32 hours, int32 minutes, int32 seconds)', 'void'),
  \ dotnet#method('TimeSpan(', 'int32 days, int32 hours, int32 minutes, int32 seconds)', 'void'),
  \ dotnet#method('TimeSpan(', 'int32 days, int32 hours, int32 minutes, int32 seconds, int32 milliseconds)', 'void'),
  \ dotnet#method('get_Ticks(', ')', 'int64'),
  \ dotnet#method('get_Days(', ')', 'int32'),
  \ dotnet#method('get_Hours(', ')', 'int32'),
  \ dotnet#method('get_Milliseconds(', ')', 'int32'),
  \ dotnet#method('get_Minutes(', ')', 'int32'),
  \ dotnet#method('get_Seconds(', ')', 'int32'),
  \ dotnet#method('get_TotalDays(', ')', 'float64'),
  \ dotnet#method('get_TotalHours(', ')', 'float64'),
  \ dotnet#method('get_TotalMilliseconds(', ')', 'float64'),
  \ dotnet#method('get_TotalMinutes(', ')', 'float64'),
  \ dotnet#method('get_TotalSeconds(', ')', 'float64'),
  \ dotnet#method('Add(', 'TimeSpan ts)', 'TimeSpan'),
  \ dotnet#method('Compare(', 'TimeSpan t1, TimeSpan t2)', 'static int32'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'TimeSpan value)', 'int32'),
  \ dotnet#method('FromDays(', 'float64 value)', 'static TimeSpan'),
  \ dotnet#method('Duration(', ')', 'TimeSpan'),
  \ dotnet#method('Equals(', 'object value)', 'bool'),
  \ dotnet#method('Equals(', 'TimeSpan obj)', 'bool'),
  \ dotnet#method('Equals(', 'TimeSpan t1, TimeSpan t2)', 'static bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('FromHours(', 'float64 value)', 'static TimeSpan'),
  \ dotnet#method('FromMilliseconds(', 'float64 value)', 'static TimeSpan'),
  \ dotnet#method('FromMinutes(', 'float64 value)', 'static TimeSpan'),
  \ dotnet#method('Negate(', ')', 'TimeSpan'),
  \ dotnet#method('FromSeconds(', 'float64 value)', 'static TimeSpan'),
  \ dotnet#method('Subtract(', 'TimeSpan ts)', 'TimeSpan'),
  \ dotnet#method('FromTicks(', 'int64 value)', 'static TimeSpan'),
  \ dotnet#method('TimeToTicks(', 'int32 hour, int32 minute, int32 second)', 'static int64'),
  \ dotnet#method('Parse(', 'string s)', 'static TimeSpan'),
  \ dotnet#method('Parse(', 'string input, IFormatProvider formatProvider)', 'static TimeSpan'),
  \ dotnet#method('ParseExact(', 'string input, string format, IFormatProvider formatProvider)', 'static TimeSpan'),
  \ dotnet#method('ParseExact(', 'string input, string[] formats, IFormatProvider formatProvider)', 'static TimeSpan'),
  \ dotnet#method('ParseExact(', 'string input, string format, IFormatProvider formatProvider, TimeSpanStyles styles)', 'static TimeSpan'),
  \ dotnet#method('ParseExact(', 'string input, string[] formats, IFormatProvider formatProvider, TimeSpanStyles styles)', 'static TimeSpan'),
  \ dotnet#method('TryParse(', 'string s, [out] TimeSpan& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string input, IFormatProvider formatProvider, [out] TimeSpan& result)', 'static bool'),
  \ dotnet#method('TryParseExact(', 'string input, string format, IFormatProvider formatProvider, [out] TimeSpan& result)', 'static bool'),
  \ dotnet#method('TryParseExact(', 'string input, string[] formats, IFormatProvider formatProvider, [out] TimeSpan& result)', 'static bool'),
  \ dotnet#method('TryParseExact(', 'string input, string format, IFormatProvider formatProvider, TimeSpanStyles styles, [out] TimeSpan& result)', 'static bool'),
  \ dotnet#method('TryParseExact(', 'string input, string[] formats, IFormatProvider formatProvider, TimeSpanStyles styles, [out] TimeSpan& result)', 'static bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider formatProvider)', 'string'),
  \ dotnet#method('op_UnaryNegation(', 'TimeSpan t)', 'static TimeSpan'),
  \ dotnet#method('op_Subtraction(', 'TimeSpan t1, TimeSpan t2)', 'static TimeSpan'),
  \ dotnet#method('op_UnaryPlus(', 'TimeSpan t)', 'static TimeSpan'),
  \ dotnet#method('op_Addition(', 'TimeSpan t1, TimeSpan t2)', 'static TimeSpan'),
  \ dotnet#method('op_Equality(', 'TimeSpan t1, TimeSpan t2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'TimeSpan t1, TimeSpan t2)', 'static bool'),
  \ dotnet#method('op_LessThan(', 'TimeSpan t1, TimeSpan t2)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'TimeSpan t1, TimeSpan t2)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'TimeSpan t1, TimeSpan t2)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'TimeSpan t1, TimeSpan t2)', 'static bool'),
  \ dotnet#method('TimeSpan(', ')', 'static void .'),
  \ dotnet#prop('Ticks', 'int64'),
  \ dotnet#prop('Days', 'int32'),
  \ dotnet#prop('Hours', 'int32'),
  \ dotnet#prop('Milliseconds', 'int32'),
  \ dotnet#prop('Minutes', 'int32'),
  \ dotnet#prop('Seconds', 'int32'),
  \ dotnet#prop('TotalDays', 'float64'),
  \ dotnet#prop('TotalHours', 'float64'),
  \ dotnet#prop('TotalMilliseconds', 'float64'),
  \ dotnet#prop('TotalMinutes', 'float64'),
  \ dotnet#prop('TotalSeconds', 'float64'),
  \ ])

call dotnet#class('TimeZoneInfo', 'Object', [ 
  \ dotnet#method('get_DateStart(', ')', ''),
  \ dotnet#method('get_DateEnd(', ')', ''),
  \ dotnet#method('get_DaylightDelta(', ')', ''),
  \ dotnet#method('get_DaylightTransitionStart(', ')', ''),
  \ dotnet#method('get_DaylightTransitionEnd(', ')', ''),
  \ dotnet#method('Equals(', 'class TimeZoneInfo/AdjustmentRule other)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('TimeZoneInfo(', ')', 'void'),
  \ dotnet#method('CreateAdjustmentRule(', 'DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo/TransitionTime daylightTransitionStart, TimeZoneInfo/TransitionTime daylightTransitionEnd)', 'static TimeZoneInfo/AdjustmentRule'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#prop('DateStart', 'DateTime'),
  \ dotnet#prop('DateEnd', 'DateTime'),
  \ dotnet#prop('DaylightDelta', 'TimeSpan'),
  \ dotnet#prop('DaylightTransitionStart', 'TimeZoneInfo/TransitionTime'),
  \ dotnet#prop('DaylightTransitionEnd', 'TimeZoneInfo/TransitionTime'),
  \ dotnet#field('m_timeOfDay', 'DateTime'),
  \ dotnet#field('m_month', 'uint8'),
  \ dotnet#field('m_week', 'uint8'),
  \ dotnet#field('m_day', 'uint8'),
  \ dotnet#field('m_dayOfWeek', 'DayOfWeek'),
  \ dotnet#field('m_isFixedDateRule', 'bool'),
  \ dotnet#method('get_TimeOfDay(', ')', ''),
  \ dotnet#method('get_Month(', ')', 'int32'),
  \ dotnet#method('get_Week(', ')', 'int32'),
  \ dotnet#method('get_Day(', ')', 'int32'),
  \ dotnet#method('get_DayOfWeek(', ')', ''),
  \ dotnet#method('get_IsFixedDateRule(', ')', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'TimeZoneInfo/TransitionTime t1, TimeZoneInfo/TransitionTime t2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'TimeZoneInfo/TransitionTime t1, TimeZoneInfo/TransitionTime t2)', 'static bool'),
  \ dotnet#method('Equals(', 'TimeZoneInfo/TransitionTime other)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('CreateFixedDateRule(', 'DateTime timeOfDay, int32 month, int32 day)', 'static TimeZoneInfo/TransitionTime'),
  \ dotnet#method('CreateFloatingDateRule(', 'DateTime timeOfDay, int32 month, int32 week, DayOfWeek dayOfWeek)', 'static TimeZoneInfo/TransitionTime'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#prop('TimeOfDay', 'DateTime'),
  \ dotnet#prop('Month', 'int32'),
  \ dotnet#prop('Week', 'int32'),
  \ dotnet#prop('Day', 'int32'),
  \ dotnet#prop('DayOfWeek', 'DayOfWeek'),
  \ dotnet#prop('IsFixedDateRule', 'bool'),
  \ dotnet#method('get_Id(', ')', 'string'),
  \ dotnet#method('get_DisplayName(', ')', 'string'),
  \ dotnet#method('get_StandardName(', ')', 'string'),
  \ dotnet#method('get_DaylightName(', ')', 'string'),
  \ dotnet#method('get_BaseUtcOffset(', ')', 'TimeSpan'),
  \ dotnet#method('get_SupportsDaylightSavingTime(', ')', 'bool'),
  \ dotnet#method('GetAdjustmentRules(', ')', 'TimeZoneInfo/AdjustmentRule[]'),
  \ dotnet#method('GetAmbiguousTimeOffsets(', 'DateTimeOffset dateTimeOffset)', 'TimeSpan[]'),
  \ dotnet#method('GetAmbiguousTimeOffsets(', 'DateTime dateTime)', 'TimeSpan[]'),
  \ dotnet#method('GetUtcOffset(', 'DateTimeOffset dateTimeOffset)', 'TimeSpan'),
  \ dotnet#method('GetUtcOffset(', 'DateTime dateTime)', 'TimeSpan'),
  \ dotnet#method('GetUtcOffset(', 'DateTime dateTime, TimeZoneInfoOptions flags)', 'TimeSpan'),
  \ dotnet#method('IsAmbiguousTime(', 'DateTimeOffset dateTimeOffset)', 'bool'),
  \ dotnet#method('IsAmbiguousTime(', 'DateTime dateTime)', 'bool'),
  \ dotnet#method('IsAmbiguousTime(', 'DateTime dateTime, TimeZoneInfoOptions flags)', 'bool'),
  \ dotnet#method('IsDaylightSavingTime(', 'DateTimeOffset dateTimeOffset)', 'bool'),
  \ dotnet#method('IsDaylightSavingTime(', 'DateTime dateTime)', 'bool'),
  \ dotnet#method('IsDaylightSavingTime(', 'DateTime dateTime, TimeZoneInfoOptions flags)', 'bool'),
  \ dotnet#method('IsInvalidTime(', 'DateTime dateTime)', 'bool'),
  \ dotnet#method('ClearCachedData(', ')', 'static void'),
  \ dotnet#method('ConvertTimeBySystemTimeZoneId(', 'DateTimeOffset dateTimeOffset, string destinationTimeZoneId)', 'static DateTimeOffset'),
  \ dotnet#method('ConvertTimeBySystemTimeZoneId(', 'DateTime dateTime, string destinationTimeZoneId)', 'static DateTime'),
  \ dotnet#method('ConvertTimeBySystemTimeZoneId(', 'DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId)', 'static DateTime'),
  \ dotnet#method('ConvertTime(', 'DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone)', 'static DateTimeOffset'),
  \ dotnet#method('ConvertTime(', 'DateTime dateTime, TimeZoneInfo destinationTimeZone)', 'static DateTime'),
  \ dotnet#method('ConvertTime(', 'DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone)', 'static DateTime'),
  \ dotnet#method('ConvertTime(', 'DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone, TimeZoneInfoOptions flags)', 'static DateTime'),
  \ dotnet#method('ConvertTimeFromUtc(', 'DateTime dateTime, TimeZoneInfo destinationTimeZone)', 'static DateTime'),
  \ dotnet#method('ConvertTimeToUtc(', 'DateTime dateTime)', 'static DateTime'),
  \ dotnet#method('ConvertTimeToUtc(', 'DateTime dateTime, TimeZoneInfoOptions flags)', 'static DateTime'),
  \ dotnet#method('ConvertTimeToUtc(', 'DateTime dateTime, TimeZoneInfo sourceTimeZone)', 'static DateTime'),
  \ dotnet#method('Equals(', 'class TimeZoneInfo other)', 'bool'),
  \ dotnet#method('FindSystemTimeZoneById(', 'string id)', 'static TimeZoneInfo'),
  \ dotnet#method('FromSerializedString(', 'string source)', 'static TimeZoneInfo'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('GetSystemTimeZones(', ')', 'static ReadOnlyCollection'),
  \ dotnet#method('HasSameRules(', 'class TimeZoneInfo other)', 'bool'),
  \ dotnet#method('get_Local(', ')', 'static TimeZoneInfo'),
  \ dotnet#method('ToSerializedString(', ')', 'string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Utc(', ')', 'static TimeZoneInfo'),
  \ dotnet#method('CreateCustomTimeZone(', 'string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName)', 'static TimeZoneInfo'),
  \ dotnet#method('CreateCustomTimeZone(', 'string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo/AdjustmentRule[] adjustmentRules)', 'static TimeZoneInfo'),
  \ dotnet#method('CreateCustomTimeZone(', 'string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime)', 'static TimeZoneInfo'),
  \ dotnet#method('OnDeserialization(', 'object sender)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('GetDateTimeNowUtcOffsetFromUtc(', 'DateTime time, [out] bool& isAmbiguousLocalDst)', 'static TimeSpan'),
  \ dotnet#method('GetUtcOffsetFromUtc(', 'DateTime time, TimeZoneInfo zone, [out] bool& isDaylightSavings, [out] bool& isAmbiguousLocalDst)', 'static TimeSpan'),
  \ dotnet#method('UtcOffsetOutOfRange(', 'TimeSpan offset)', 'static bool'),
  \ dotnet#method('TimeZoneInfo(', ')', 'static void .'),
  \ dotnet#prop('Id', 'string'),
  \ dotnet#prop('DisplayName', 'string'),
  \ dotnet#prop('StandardName', 'string'),
  \ dotnet#prop('DaylightName', 'string'),
  \ dotnet#prop('BaseUtcOffset', 'TimeSpan'),
  \ dotnet#prop('SupportsDaylightSavingTime', 'bool'),
  \ dotnet#prop('Local', 'TimeZoneInfo'),
  \ dotnet#prop('Utc', 'TimeZoneInfo'),
  \ ])

call dotnet#class('TimeZoneNotFoundException', 'Exception', [ 
  \ dotnet#method('TimeZoneNotFoundException(', 'string message)', 'void'),
  \ dotnet#method('TimeZoneNotFoundException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('TimeZoneNotFoundException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('TimeZoneNotFoundException(', ')', 'void'),
  \ ])

call dotnet#class('TypeAccessException', 'TypeLoadException', [ 
  \ dotnet#method('TypeAccessException(', ')', 'void'),
  \ dotnet#method('TypeAccessException(', 'string message)', 'void'),
  \ dotnet#method('TypeAccessException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('TypeAccessException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('TypedReference', 'ValueType', [ 
  \ dotnet#field('Value', 'int'),
  \ dotnet#field('Type', 'int'),
  \ dotnet#method('MakeTypedReference(', 'object target, FieldInfo[] flds)', 'static typedref'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('ToObject(', 'typedref value)', 'static object'),
  \ dotnet#method('InternalToObject(', 'void* value) internalcall', 'static object'),
  \ dotnet#method('get_IsNull(', ')', 'bool'),
  \ dotnet#method('GetTargetType(', 'typedref value)', 'static Type'),
  \ dotnet#method('TargetTypeToken(', 'typedref value)', 'static RuntimeTypeHandle'),
  \ dotnet#method('SetTypedReference(', 'typedref target, object value)', 'static void'),
  \ dotnet#method('InternalSetTypedReference(', 'void* target, object value) internalcall', 'static void'),
  \ dotnet#method('GetPointerOnStack(', ')', 'int'),
  \ dotnet#prop('IsNull', 'bool'),
  \ ])

call dotnet#class('TypeInitializationException', 'SystemException', [ 
  \ dotnet#method('TypeInitializationException(', ')', 'void'),
  \ dotnet#method('TypeInitializationException(', 'string fullTypeName, Exception innerException)', 'void'),
  \ dotnet#method('TypeInitializationException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_TypeName(', ')', 'string'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('TypeName', 'string'),
  \ ])

call dotnet#class('UInt16', 'ValueType', [ 
  \ dotnet#field('m_value', 'uint16'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'uint16 value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'uint16 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static uint16'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static uint16'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static uint16'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static uint16'),
  \ dotnet#method('TryParse(', 'string s, [out] uint16& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] uint16& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ ])

call dotnet#class('UInt32', 'ValueType', [ 
  \ dotnet#field('m_value', 'uint32'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'uint32 value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'uint32 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static uint32'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static uint32'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static uint32'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static uint32'),
  \ dotnet#method('TryParse(', 'string s, [out] uint32& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] uint32& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ ])

call dotnet#class('UInt64', 'ValueType', [ 
  \ dotnet#field('m_value', 'uint64'),
  \ dotnet#method('CompareTo(', 'object value)', 'int32'),
  \ dotnet#method('CompareTo(', 'uint64 value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'uint64 obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string s)', 'static uint64'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style)', 'static uint64'),
  \ dotnet#method('Parse(', 'string s, IFormatProvider provider)', 'static uint64'),
  \ dotnet#method('Parse(', 'string s, NumberStyles style, IFormatProvider provider)', 'static uint64'),
  \ dotnet#method('TryParse(', 'string s, [out] uint64& result)', 'static bool'),
  \ dotnet#method('TryParse(', 'string s, NumberStyles style, IFormatProvider provider, [out] uint64& result)', 'static bool'),
  \ dotnet#method('GetTypeCode(', ')', ''),
  \ dotnet#method('ToBoolean(', 'class IFormatProvider provider)', 'bool '),
  \ dotnet#method('ToChar(', 'class IFormatProvider provider)', 'char '),
  \ dotnet#method('ToSByte(', 'class IFormatProvider provider)', 'int8 '),
  \ dotnet#method('ToByte(', 'class IFormatProvider provider)', 'uint8 '),
  \ dotnet#method('ToInt16(', 'class IFormatProvider provider)', 'int16 '),
  \ dotnet#method('ToUInt16(', 'class IFormatProvider provider)', 'uint16 '),
  \ dotnet#method('ToInt32(', 'class IFormatProvider provider)', 'int32 '),
  \ dotnet#method('ToUInt32(', 'class IFormatProvider provider)', 'uint32 '),
  \ dotnet#method('ToInt64(', 'class IFormatProvider provider)', 'int64 '),
  \ dotnet#method('ToUInt64(', 'class IFormatProvider provider)', 'uint64 '),
  \ dotnet#method('ToSingle(', 'class IFormatProvider provider)', 'float32 '),
  \ dotnet#method('ToDouble(', 'class IFormatProvider provider)', 'float64 '),
  \ dotnet#method('ToDecimal(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToDateTime(', 'class IFormatProvider provider)', ''),
  \ dotnet#method('ToType(', 'class Type type, IFormatProvider provider)', 'object '),
  \ ])

call dotnet#class('UIntPtr', 'ValueType', [ 
  \ dotnet#field('m_value', 'void*'),
  \ dotnet#method('UIntPtr(', 'uint32 value)', 'void'),
  \ dotnet#method('UIntPtr(', 'uint64 value)', 'void'),
  \ dotnet#method('UIntPtr(', 'void* value)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void '),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToUInt32(', ')', 'uint32'),
  \ dotnet#method('ToUInt64(', ')', 'uint64'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('op_Explicit(', 'uint32 value)', 'static uint'),
  \ dotnet#method('op_Explicit(', 'uint64 value)', 'static uint'),
  \ dotnet#method('op_Explicit(', 'native uint value)', 'static uint32'),
  \ dotnet#method('op_Explicit(', 'native uint value)', 'static uint64'),
  \ dotnet#method('op_Explicit(', 'void* value)', 'static uint'),
  \ dotnet#method('op_Explicit(', 'native uint value)', 'static void*'),
  \ dotnet#method('op_Equality(', 'native uint value1, uint value2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'native uint value1, uint value2)', 'static bool'),
  \ dotnet#method('Add(', 'native uint pointer, int32 offset)', 'static uint'),
  \ dotnet#method('op_Addition(', 'native uint pointer, int32 offset)', 'static uint'),
  \ dotnet#method('Subtract(', 'native uint pointer, int32 offset)', 'static uint'),
  \ dotnet#method('op_Subtraction(', 'native uint pointer, int32 offset)', 'static uint'),
  \ dotnet#method('get_Size(', ')', 'static int32'),
  \ dotnet#method('ToPointer(', ')', 'void*'),
  \ dotnet#prop('Size', 'int32'),
  \ ])

call dotnet#class('UnauthorizedAccessException', 'SystemException', [ 
  \ dotnet#method('UnauthorizedAccessException(', ')', 'void'),
  \ dotnet#method('UnauthorizedAccessException(', 'string message)', 'void'),
  \ dotnet#method('UnauthorizedAccessException(', 'string message, Exception inner)', 'void'),
  \ dotnet#method('UnauthorizedAccessException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('UnhandledExceptionEventArgs', 'EventArgs', [ 
  \ dotnet#method('UnhandledExceptionEventArgs(', 'object exception, bool isTerminating)', 'void'),
  \ dotnet#method('get_ExceptionObject(', ')', 'object'),
  \ dotnet#method('get_IsTerminating(', ')', 'bool'),
  \ dotnet#prop('ExceptionObject', 'object'),
  \ dotnet#prop('IsTerminating', 'bool'),
  \ ])

call dotnet#class('UnhandledExceptionEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('UnhandledExceptionEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, UnhandledExceptionEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, UnhandledExceptionEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('Version', 'Object', [ 
  \ dotnet#field('value__', 'int32'),
  \ dotnet#field('m_parsedVersion', 'Version'),
  \ dotnet#field('m_failure', 'Version/ParseFailureKind'),
  \ dotnet#field('m_exceptionArgument', 'string'),
  \ dotnet#field('m_argumentName', 'string'),
  \ dotnet#field('m_canThrow', 'bool'),
  \ dotnet#method('Init(', 'string argumentName, bool canThrow)', 'void'),
  \ dotnet#method('SetFailure(', 'Version/ParseFailureKind failure)', 'void'),
  \ dotnet#method('SetFailure(', 'Version/ParseFailureKind failure, string argument)', 'void'),
  \ dotnet#method('GetVersionParseException(', ')', 'Exception'),
  \ dotnet#method('Version(', 'int32 major, int32 minor, int32 build, int32 revision)', 'void'),
  \ dotnet#method('Version(', 'int32 major, int32 minor, int32 build)', 'void'),
  \ dotnet#method('Version(', 'int32 major, int32 minor)', 'void'),
  \ dotnet#method('Version(', 'string version)', 'void'),
  \ dotnet#method('Version(', ')', 'void'),
  \ dotnet#method('get_Major(', ')', 'int32'),
  \ dotnet#method('get_Minor(', ')', 'int32'),
  \ dotnet#method('get_Build(', ')', 'int32'),
  \ dotnet#method('get_Revision(', ')', 'int32'),
  \ dotnet#method('get_MajorRevision(', ')', 'int16'),
  \ dotnet#method('get_MinorRevision(', ')', 'int16'),
  \ dotnet#method('Clone(', ')', 'object'),
  \ dotnet#method('CompareTo(', 'object version)', 'int32'),
  \ dotnet#method('CompareTo(', 'class Version value)', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'class Version obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'int32 fieldCount)', 'string'),
  \ dotnet#method('Parse(', 'string input)', 'static Version'),
  \ dotnet#method('TryParse(', 'string input, [out] Version& result)', 'static bool'),
  \ dotnet#method('op_Equality(', 'class Version v1, Version v2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class Version v1, Version v2)', 'static bool'),
  \ dotnet#method('op_LessThan(', 'class Version v1, Version v2)', 'static bool'),
  \ dotnet#method('op_LessThanOrEqual(', 'class Version v1, Version v2)', 'static bool'),
  \ dotnet#method('op_GreaterThan(', 'class Version v1, Version v2)', 'static bool'),
  \ dotnet#method('op_GreaterThanOrEqual(', 'class Version v1, Version v2)', 'static bool'),
  \ dotnet#prop('Major', 'int32'),
  \ dotnet#prop('Minor', 'int32'),
  \ dotnet#prop('Build', 'int32'),
  \ dotnet#prop('Revision', 'int32'),
  \ dotnet#prop('MajorRevision', 'int16'),
  \ dotnet#prop('MinorRevision', 'int16'),
  \ ])

call dotnet#class('Void', 'ValueType', [ 
  \ ])

call dotnet#class('WeakReference', 'Object', [ 
  \ dotnet#field('m_handle', 'IsVolatile)'),
  \ dotnet#field('m_IsLongReference', 'bool'),
  \ dotnet#method('WeakReference(', 'object target)', 'void'),
  \ dotnet#method('WeakReference(', 'object target, bool trackResurrection)', 'void'),
  \ dotnet#method('WeakReference(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_IsAlive(', ')', 'bool'),
  \ dotnet#method('get_TrackResurrection(', ')', 'bool'),
  \ dotnet#method('get_Target(', ')', 'object'),
  \ dotnet#method('set_Target(', 'object value)', 'void'),
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#prop('IsAlive', 'bool'),
  \ dotnet#prop('TrackResurrection', 'bool'),
  \ dotnet#prop('Target', 'object'),
  \ ])

call dotnet#class('ThreadStaticAttribute', 'Attribute', [ 
  \ dotnet#method('ThreadStaticAttribute(', ')', 'void'),
  \ ])

call dotnet#class('Nullable', 'ValueType', [ 
  \ dotnet#field('hasValue', 'bool'),
  \ dotnet#field('value', '!T'),
  \ dotnet#method('Nullable`1(', '!T value)', 'void Nullable`'),
  \ dotnet#method('get_HasValue(', ')', 'bool'),
  \ dotnet#method('get_Value(', ')', '!T'),
  \ dotnet#method('GetValueOrDefault(', ')', '!T'),
  \ dotnet#method('GetValueOrDefault(', '!T defaultValue)', '!T'),
  \ dotnet#method('Equals(', 'object other)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('op_Implicit(', '!T value)', 'static'),
  \ dotnet#method('op_Explicit(', 'Nullable value)', 'static !T'),
  \ dotnet#prop('HasValue', 'bool'),
  \ dotnet#prop('Value', '!T'),
  \ ])

call dotnet#class('Nullable', 'Object', [ 
  \ dotnet#method('Compare(', 'Nullable n1, Nullable n2)', 'static int32'),
  \ dotnet#method('Equals(', 'Nullable n1, Nullable n2)', 'static bool'),
  \ dotnet#method('GetUnderlyingType(', 'class Type nullableType)', 'static Type'),
  \ ])

call dotnet#class('UriParser', 'Object', [ 
  \ dotnet#method('UriParser(', ')', 'void'),
  \ dotnet#method('OnNewUri(', ')', 'family'),
  \ dotnet#method('OnRegister(', 'string schemeName, int32 defaultPort)', 'void'),
  \ dotnet#method('InitializeAndValidate(', 'class Uri uri, [out] UriFormatException& parsingError)', 'void'),
  \ dotnet#method('Resolve(', 'class Uri baseUri, Uri relativeUri, [out] UriFormatException& parsingError)', 'string'),
  \ dotnet#method('IsBaseOf(', 'class Uri baseUri, Uri relativeUri)', 'bool'),
  \ dotnet#method('GetComponents(', 'class Uri uri, UriComponents components, UriFormat format)', 'string'),
  \ dotnet#method('IsWellFormedOriginalString(', 'class Uri uri)', 'bool'),
  \ dotnet#method('Register(', 'class UriParser uriParser, string schemeName, int32 defaultPort)', 'static void'),
  \ dotnet#method('IsKnownScheme(', 'string schemeName)', 'static bool'),
  \ dotnet#method('UriParser(', ')', 'static void .'),
  \ ])

call dotnet#class('Uri', 'Object', [ 
  \ dotnet#method('Uri(', 'string uriString)', 'void'),
  \ dotnet#method('Uri(', 'string uriString, bool dontEscape)', 'void'),
  \ dotnet#method('Uri(', 'string uriString, UriKind uriKind)', 'void'),
  \ dotnet#method('Uri(', 'class Uri baseUri, string relativeUri)', 'void'),
  \ dotnet#method('Uri(', 'class Uri baseUri, string relativeUri, bool dontEscape)', 'void'),
  \ dotnet#method('Uri(', 'class Uri baseUri, Uri relativeUri)', 'void'),
  \ dotnet#method('Uri(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('get_AbsolutePath(', ')', 'string'),
  \ dotnet#method('get_AbsoluteUri(', ')', 'string'),
  \ dotnet#method('get_Authority(', ')', 'string'),
  \ dotnet#method('get_Host(', ')', 'string'),
  \ dotnet#method('get_HostNameType(', ')', 'UriHostNameType'),
  \ dotnet#method('get_IsDefaultPort(', ')', 'bool'),
  \ dotnet#method('get_IsFile(', ')', 'bool'),
  \ dotnet#method('get_IsLoopback(', ')', 'bool'),
  \ dotnet#method('get_IsUnc(', ')', 'bool'),
  \ dotnet#method('get_LocalPath(', ')', 'string'),
  \ dotnet#method('get_PathAndQuery(', ')', 'string'),
  \ dotnet#method('get_Port(', ')', 'int32'),
  \ dotnet#method('get_Query(', ')', 'string'),
  \ dotnet#method('get_Fragment(', ')', 'string'),
  \ dotnet#method('get_Scheme(', ')', 'string'),
  \ dotnet#method('get_OriginalString(', ')', 'string'),
  \ dotnet#method('get_DnsSafeHost(', ')', 'string'),
  \ dotnet#method('get_IsAbsoluteUri(', ')', 'bool'),
  \ dotnet#method('get_Segments(', ')', 'string[]'),
  \ dotnet#method('get_UserEscaped(', ')', 'bool'),
  \ dotnet#method('get_UserInfo(', ')', 'string'),
  \ dotnet#method('CheckHostName(', 'string name)', 'static UriHostNameType'),
  \ dotnet#method('CheckSchemeName(', 'string schemeName)', 'static bool'),
  \ dotnet#method('FromHex(', 'char digit)', 'static int32'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('op_Equality(', 'class Uri uri1, Uri uri2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class Uri uri1, Uri uri2)', 'static bool'),
  \ dotnet#method('Equals(', 'object comparand)', 'bool'),
  \ dotnet#method('GetLeftPart(', 'UriPartial part)', 'string'),
  \ dotnet#method('HexEscape(', 'char character)', 'static string'),
  \ dotnet#method('HexUnescape(', 'string pattern, int32& index)', 'static char'),
  \ dotnet#method('IsHexDigit(', 'char character)', 'static bool'),
  \ dotnet#method('IsHexEncoding(', 'string pattern, int32 index)', 'static bool'),
  \ dotnet#method('MakeRelative(', 'class Uri toUri)', 'string'),
  \ dotnet#method('MakeRelativeUri(', 'class Uri uri)', 'Uri'),
  \ dotnet#method('Parse(', ')', 'void'),
  \ dotnet#method('Canonicalize(', ')', 'void'),
  \ dotnet#method('Escape(', ')', 'void'),
  \ dotnet#method('Unescape(', 'string path)', 'string'),
  \ dotnet#method('EscapeString(', 'string str)', 'static string'),
  \ dotnet#method('CheckSecurity(', ')', 'void'),
  \ dotnet#method('IsReservedCharacter(', 'char character)', 'bool'),
  \ dotnet#method('IsExcludedCharacter(', 'char character)', 'static bool'),
  \ dotnet#method('IsBadFileSystemCharacter(', 'char character)', 'bool'),
  \ dotnet#method('TryCreate(', 'string uriString, UriKind uriKind, [out] Uri& result)', 'static bool'),
  \ dotnet#method('TryCreate(', 'class Uri baseUri, string relativeUri, [out] Uri& result)', 'static bool'),
  \ dotnet#method('TryCreate(', 'class Uri baseUri, Uri relativeUri, [out] Uri& result)', 'static bool'),
  \ dotnet#method('IsBaseOf(', 'class Uri uri)', 'bool'),
  \ dotnet#method('GetComponents(', 'UriComponents components, UriFormat format)', 'string'),
  \ dotnet#method('IsWellFormedOriginalString(', ')', 'bool'),
  \ dotnet#method('IsWellFormedUriString(', 'string uriString, UriKind uriKind)', 'static bool'),
  \ dotnet#method('Compare(', 'class Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType)', 'static int32'),
  \ dotnet#method('UnescapeDataString(', 'string stringToUnescape)', 'static string'),
  \ dotnet#method('EscapeUriString(', 'string stringToEscape)', 'static string'),
  \ dotnet#method('EscapeDataString(', 'string stringToEscape)', 'static string'),
  \ dotnet#method('Uri(', ')', 'static void .'),
  \ dotnet#prop('AbsolutePath', 'string'),
  \ dotnet#prop('AbsoluteUri', 'string'),
  \ dotnet#prop('Authority', 'string'),
  \ dotnet#prop('Host', 'string'),
  \ dotnet#prop('HostNameType', 'UriHostNameType'),
  \ dotnet#prop('IsDefaultPort', 'bool'),
  \ dotnet#prop('IsFile', 'bool'),
  \ dotnet#prop('IsLoopback', 'bool'),
  \ dotnet#prop('IsUnc', 'bool'),
  \ dotnet#prop('LocalPath', 'string'),
  \ dotnet#prop('PathAndQuery', 'string'),
  \ dotnet#prop('Port', 'int32'),
  \ dotnet#prop('Query', 'string'),
  \ dotnet#prop('Fragment', 'string'),
  \ dotnet#prop('Scheme', 'string'),
  \ dotnet#prop('OriginalString', 'string'),
  \ dotnet#prop('DnsSafeHost', 'string'),
  \ dotnet#prop('IsAbsoluteUri', 'bool'),
  \ dotnet#prop('Segments', 'string[]'),
  \ dotnet#prop('UserEscaped', 'bool'),
  \ dotnet#prop('UserInfo', 'string'),
  \ ])

call dotnet#class('UriBuilder', 'Object', [ 
  \ dotnet#method('UriBuilder(', ')', 'void'),
  \ dotnet#method('UriBuilder(', 'string uri)', 'void'),
  \ dotnet#method('UriBuilder(', 'class Uri uri)', 'void'),
  \ dotnet#method('UriBuilder(', 'string schemeName, string hostName)', 'void'),
  \ dotnet#method('UriBuilder(', 'string scheme, string host, int32 portNumber)', 'void'),
  \ dotnet#method('UriBuilder(', 'string scheme, string host, int32 port, string pathValue)', 'void'),
  \ dotnet#method('UriBuilder(', 'string scheme, string host, int32 port, string path, string extraValue)', 'void'),
  \ dotnet#method('get_Fragment(', ')', 'string'),
  \ dotnet#method('set_Fragment(', 'string value)', 'void'),
  \ dotnet#method('get_Host(', ')', 'string'),
  \ dotnet#method('set_Host(', 'string value)', 'void'),
  \ dotnet#method('get_Password(', ')', 'string'),
  \ dotnet#method('set_Password(', 'string value)', 'void'),
  \ dotnet#method('get_Path(', ')', 'string'),
  \ dotnet#method('set_Path(', 'string value)', 'void'),
  \ dotnet#method('get_Port(', ')', 'int32'),
  \ dotnet#method('set_Port(', 'int32 value)', 'void'),
  \ dotnet#method('get_Query(', ')', 'string'),
  \ dotnet#method('set_Query(', 'string value)', 'void'),
  \ dotnet#method('get_Scheme(', ')', 'string'),
  \ dotnet#method('set_Scheme(', 'string value)', 'void'),
  \ dotnet#method('get_Uri(', ')', 'Uri'),
  \ dotnet#method('get_UserName(', ')', 'string'),
  \ dotnet#method('set_UserName(', 'string value)', 'void'),
  \ dotnet#method('Equals(', 'object rparam)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#prop('Fragment', 'string'),
  \ dotnet#prop('Host', 'string'),
  \ dotnet#prop('Password', 'string'),
  \ dotnet#prop('Path', 'string'),
  \ dotnet#prop('Port', 'int32'),
  \ dotnet#prop('Query', 'string'),
  \ dotnet#prop('Scheme', 'string'),
  \ dotnet#prop('Uri', 'Uri'),
  \ dotnet#prop('UserName', 'string'),
  \ ])

call dotnet#class('UriFormatException', 'FormatException', [ 
  \ dotnet#method('UriFormatException(', ')', 'void'),
  \ dotnet#method('UriFormatException(', 'string textString)', 'void'),
  \ dotnet#method('UriFormatException(', 'string textString, Exception e)', 'void'),
  \ dotnet#method('UriFormatException(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo serializationInfo, StreamingContext streamingContext)', 'void '),
  \ ])

call dotnet#class('UriTypeConverter', 'TypeConverter', [ 
  \ dotnet#method('UriTypeConverter(', ')', 'void'),
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('IsValid(', 'class ITypeDescriptorContext context, object value)', 'bool'),
  \ ])

call dotnet#class('GenericUriParser', 'UriParser', [ 
  \ dotnet#method('GenericUriParser(', 'GenericUriParserOptions options)', 'void'),
  \ ])

call dotnet#class('HttpStyleUriParser', 'UriParser', [ 
  \ dotnet#method('HttpStyleUriParser(', ')', 'void'),
  \ ])

call dotnet#class('FtpStyleUriParser', 'UriParser', [ 
  \ dotnet#method('FtpStyleUriParser(', ')', 'void'),
  \ ])

call dotnet#class('FileStyleUriParser', 'UriParser', [ 
  \ dotnet#method('FileStyleUriParser(', ')', 'void'),
  \ ])

call dotnet#class('NewsStyleUriParser', 'UriParser', [ 
  \ dotnet#method('NewsStyleUriParser(', ')', 'void'),
  \ ])

call dotnet#class('GopherStyleUriParser', 'UriParser', [ 
  \ dotnet#method('GopherStyleUriParser(', ')', 'void'),
  \ ])

call dotnet#class('LdapStyleUriParser', 'UriParser', [ 
  \ dotnet#method('LdapStyleUriParser(', ')', 'void'),
  \ ])

call dotnet#class('NetPipeStyleUriParser', 'UriParser', [ 
  \ dotnet#method('NetPipeStyleUriParser(', ')', 'void'),
  \ ])

call dotnet#class('NetTcpStyleUriParser', 'UriParser', [ 
  \ dotnet#method('NetTcpStyleUriParser(', ')', 'void'),
  \ ])

