call dotnet#namespace('System.Security.RightsManagement')

call dotnet#class('ContentGrant', 'Object', [ 
  \ dotnet#method('ContentGrant(', 'class ContentUser user, ContentRight right)', 'void'),
  \ dotnet#method('ContentGrant(', 'class ContentUser user, ContentRight right, DateTime validFrom, DateTime validUntil)', 'void'),
  \ dotnet#method('get_User(', ')', 'ContentUser'),
  \ dotnet#method('get_Right(', ')', 'ContentRight'),
  \ dotnet#method('get_ValidFrom(', ')', 'DateTime'),
  \ dotnet#method('get_ValidUntil(', ')', 'DateTime'),
  \ dotnet#prop('User', 'ContentUser'),
  \ dotnet#prop('Right', 'ContentRight'),
  \ dotnet#prop('ValidFrom', 'DateTime'),
  \ dotnet#prop('ValidUntil', 'DateTime'),
  \ ])

call dotnet#class('SecureEnvironment', 'Object', [ 
  \ dotnet#method('Create(', 'string applicationManifest, ContentUser user)', 'static SecureEnvironment'),
  \ dotnet#method('Create(', 'string applicationManifest, AuthenticationType authentication, UserActivationMode userActivationMode)', 'static SecureEnvironment'),
  \ dotnet#method('IsUserActivated(', 'class ContentUser user)', 'static bool'),
  \ dotnet#method('RemoveActivatedUser(', 'class ContentUser user)', 'static void'),
  \ dotnet#method('GetActivatedUsers(', ')', 'static ReadOnlyCollection'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_User(', ')', 'ContentUser'),
  \ dotnet#method('get_ApplicationManifest(', ')', 'string'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('get_ClientSession(', ')', '.method'),
  \ dotnet#prop('User', 'ContentUser'),
  \ dotnet#prop('ApplicationManifest', 'string'),
  \ dotnet#prop('ClientSession', 'ClientSession'),
  \ ])

call dotnet#class('CryptoProvider', 'Object', [ 
  \ dotnet#method('Finalize(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('Encrypt(', 'uint8[] clearText)', 'uint8[]'),
  \ dotnet#method('Decrypt(', 'uint8[] cryptoText)', 'uint8[]'),
  \ dotnet#method('Dispose(', 'bool disposing)', 'void'),
  \ dotnet#method('get_BlockSize(', ')', 'int32'),
  \ dotnet#method('get_CanMergeBlocks(', ')', 'bool'),
  \ dotnet#method('get_BoundGrants(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_CanEncrypt(', ')', 'bool'),
  \ dotnet#method('get_CanDecrypt(', ')', 'bool'),
  \ dotnet#method('CryptoProvider(', 'class List boundLicenseHandleList, List rightsInfoList, ContentUser owner)', 'void'),
  \ dotnet#method('DecryptPublishLicense(', 'string serializedPublishLicense)', 'UnsignedPublishLicense'),
  \ dotnet#prop('BlockSize', 'int32'),
  \ dotnet#prop('CanMergeBlocks', 'bool'),
  \ dotnet#prop('BoundGrants', 'ReadOnlyCollection'),
  \ dotnet#prop('CanEncrypt', 'bool'),
  \ dotnet#prop('CanDecrypt', 'bool'),
  \ ])

call dotnet#class('UnsignedPublishLicense', 'Object', [ 
  \ dotnet#method('UnsignedPublishLicense(', ')', 'void'),
  \ dotnet#method('UnsignedPublishLicense(', 'string publishLicenseTemplate)', 'void'),
  \ dotnet#method('Sign(', 'class SecureEnvironment secureEnvironment, [out] UseLicense& authorUseLicense)', 'PublishLicense'),
  \ dotnet#method('get_Owner(', ')', 'ContentUser'),
  \ dotnet#method('set_Owner(', 'class ContentUser value)', 'void'),
  \ dotnet#method('get_ReferralInfoName(', ')', 'string'),
  \ dotnet#method('set_ReferralInfoName(', 'string value)', 'void'),
  \ dotnet#method('get_ReferralInfoUri(', ')', 'Uri'),
  \ dotnet#method('set_ReferralInfoUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_ContentId(', ')', 'Guid'),
  \ dotnet#method('set_ContentId(', 'Guid value)', 'void'),
  \ dotnet#method('get_Grants(', ')', 'ICollection'),
  \ dotnet#method('get_LocalizedNameDescriptionDictionary(', ')', 'IDictionary'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('UnsignedPublishLicense(', 'class SafeRightsManagementHandle boundLicenseHandle, string publishLicenseTemplate)', 'void'),
  \ dotnet#method('get_RightValidityIntervalDays(', ')', 'int32'),
  \ dotnet#method('set_RightValidityIntervalDays(', 'int32 value)', 'void'),
  \ dotnet#method('get_ApplicationSpecificDataDictionary(', ')', '.method'),
  \ dotnet#method('get_RevocationPoint(', ')', '.method'),
  \ dotnet#method('set_RevocationPoint(', 'class RevocationPoint value)', 'void'),
  \ dotnet#prop('Owner', 'ContentUser'),
  \ dotnet#prop('ReferralInfoName', 'string'),
  \ dotnet#prop('ReferralInfoUri', 'Uri'),
  \ dotnet#prop('ContentId', 'Guid'),
  \ dotnet#prop('Grants', 'ICollection'),
  \ dotnet#prop('LocalizedNameDescriptionDictionary', 'IDictionary'),
  \ dotnet#prop('RightValidityIntervalDays', 'int32'),
  \ dotnet#prop('ApplicationSpecificDataDictionary', 'IDictionary'),
  \ dotnet#prop('RevocationPoint', 'RevocationPoint'),
  \ ])

call dotnet#class('PublishLicense', 'Object', [ 
  \ dotnet#method('PublishLicense(', 'string signedPublishLicense)', 'void'),
  \ dotnet#method('DecryptUnsignedPublishLicense(', 'class CryptoProvider cryptoProvider)', 'UnsignedPublishLicense'),
  \ dotnet#method('get_ReferralInfoName(', ')', 'string'),
  \ dotnet#method('get_ReferralInfoUri(', ')', 'Uri'),
  \ dotnet#method('get_ContentId(', ')', 'Guid'),
  \ dotnet#method('get_UseLicenseAcquisitionUrl(', ')', 'Uri'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('AcquireUseLicense(', 'class SecureEnvironment secureEnvironment)', 'UseLicense'),
  \ dotnet#method('AcquireUseLicenseNoUI(', 'class SecureEnvironment secureEnvironment)', 'UseLicense'),
  \ dotnet#prop('ReferralInfoName', 'string'),
  \ dotnet#prop('ReferralInfoUri', 'Uri'),
  \ dotnet#prop('ContentId', 'Guid'),
  \ dotnet#prop('UseLicenseAcquisitionUrl', 'Uri'),
  \ ])

call dotnet#class('UseLicense', 'Object', [ 
  \ dotnet#method('UseLicense(', 'string useLicense)', 'void'),
  \ dotnet#method('get_Owner(', ')', 'ContentUser'),
  \ dotnet#method('get_ContentId(', ')', 'Guid'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Bind(', 'class SecureEnvironment secureEnvironment)', 'CryptoProvider'),
  \ dotnet#method('get_ApplicationData(', ')', 'IDictionary'),
  \ dotnet#method('Equals(', 'object x)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Owner', 'ContentUser'),
  \ dotnet#prop('ContentId', 'Guid'),
  \ dotnet#prop('ApplicationData', 'IDictionary'),
  \ ])

call dotnet#class('ContentUser', 'Object', [ 
  \ dotnet#method('Equals(', 'class ContentUser user1, ContentUser user2)', 'bool Equals(class ContentUser user1,'),
  \ dotnet#method('GetHashCode(', 'class ContentUser user)', 'int32 GetHashCode(class ContentUser user)'),
  \ dotnet#method('ContentUser(', ')', 'void'),
  \ dotnet#method('ContentUser(', 'string name, AuthenticationType authenticationType)', 'void'),
  \ dotnet#method('get_AuthenticationType(', ')', 'AuthenticationType'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('IsAuthenticated(', ')', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('get_AnyoneUser(', ')', 'static'),
  \ dotnet#method('get_OwnerUser(', ')', 'static'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_AuthenticationProviderType(', ')', 'string'),
  \ dotnet#method('GenericEquals(', 'class ContentUser userObj)', 'bool'),
  \ dotnet#method('CompareToAnyone(', 'string name)', 'static bool'),
  \ dotnet#method('CompareToOwner(', 'string name)', 'static bool'),
  \ dotnet#method('ContentUser(', ')', 'static void .'),
  \ dotnet#prop('AuthenticationType', 'AuthenticationType'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('AnyoneUser', 'ContentUser'),
  \ dotnet#prop('OwnerUser', 'ContentUser'),
  \ dotnet#prop('AuthenticationProviderType', 'string'),
  \ ])

call dotnet#class('RightsManagementException', 'Exception', [ 
  \ dotnet#method('RightsManagementException(', ')', 'void'),
  \ dotnet#method('RightsManagementException(', 'string message)', 'void'),
  \ dotnet#method('RightsManagementException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('RightsManagementException(', 'RightsManagementFailureCode failureCode)', 'void'),
  \ dotnet#method('RightsManagementException(', 'RightsManagementFailureCode failureCode, string message)', 'void'),
  \ dotnet#method('RightsManagementException(', 'RightsManagementFailureCode failureCode, Exception innerException)', 'void'),
  \ dotnet#method('RightsManagementException(', 'RightsManagementFailureCode failureCode, string message, Exception innerException)', 'void'),
  \ dotnet#method('RightsManagementException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('GetObjectData(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('get_FailureCode(', ')', 'RightsManagementFailureCode'),
  \ dotnet#prop('FailureCode', 'RightsManagementFailureCode'),
  \ ])

call dotnet#class('LocalizedNameDescriptionPair', 'Object', [ 
  \ dotnet#method('LocalizedNameDescriptionPair(', 'string name, string description)', 'void'),
  \ dotnet#method('get_Name(', ')', 'string'),
  \ dotnet#method('get_Description(', ')', 'string'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Name', 'string'),
  \ dotnet#prop('Description', 'string'),
  \ ])

