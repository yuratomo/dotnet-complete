call dotnet#namespace('System.Windows.Controls')

call dotnet#class('Panel', 'FrameworkElement', [ 
  \ dotnet#method('Panel(', ')', 'void'),
  \ dotnet#method('OnRender(', 'class DrawingContext dc)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_Children(', ')', 'UIElementCollection'),
  \ dotnet#method('ShouldSerializeChildren(', ')', 'bool'),
  \ dotnet#method('get_IsItemsHost(', ')', 'bool'),
  \ dotnet#method('set_IsItemsHost(', 'bool value)', 'void'),
  \ dotnet#method('OnIsItemsHostChanged(', 'bool oldIsItemsHost, bool newIsItemsHost)', 'void'),
  \ dotnet#method('get_LogicalOrientation(', ')', 'famorassem'),
  \ dotnet#method('get_HasLogicalOrientation(', ')', 'famorassem bool'),
  \ dotnet#method('get_InternalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('CreateUIElementCollection(', 'class FrameworkElement logicalParent)', 'family'),
  \ dotnet#method('get_Generator(', ')', '.method'),
  \ dotnet#method('get_VSP_IsVirtualizing(', ')', 'bool'),
  \ dotnet#method('set_VSP_IsVirtualizing(', 'bool value)', 'void'),
  \ dotnet#method('get_VSP_HasMeasured(', ')', 'bool'),
  \ dotnet#method('set_VSP_HasMeasured(', 'bool value)', 'void'),
  \ dotnet#method('get_VSP_IsPixelBased(', ')', 'bool'),
  \ dotnet#method('set_VSP_IsPixelBased(', 'bool value)', 'void'),
  \ dotnet#method('get_IsDataBound(', ')', 'bool'),
  \ dotnet#method('IsAboutToGenerateContent(', 'class Panel panel)', 'static bool'),
  \ dotnet#method('EnsureGenerator(', ')', 'void'),
  \ dotnet#method('OnClearChildrenInternal(', ')', 'strict void'),
  \ dotnet#method('GenerateChildren(', ')', 'strict void'),
  \ dotnet#method('OnItemsChangedInternal(', 'object sender, ItemsChangedEventArgs args)', 'strict void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('OnVisualChildrenChanged(', 'class DependencyObject visualAdded, DependencyObject visualRemoved)', 'famorassem void'),
  \ dotnet#method('SetZIndex(', 'class UIElement element, int32 value)', 'static void'),
  \ dotnet#method('GetZIndex(', 'class UIElement element)', 'static int32'),
  \ dotnet#method('InvalidateZState(', ')', 'void'),
  \ dotnet#method('OnItemsChanged(', 'object sender, ItemsChangedEventArgs args)', 'void'),
  \ dotnet#method('Panel(', ')', 'static void .'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('Children', 'UIElementCollection'),
  \ dotnet#prop('IsItemsHost', 'bool'),
  \ dotnet#prop('LogicalOrientation', 'Orientation'),
  \ dotnet#prop('HasLogicalOrientation', 'bool'),
  \ dotnet#prop('InternalChildren', 'UIElementCollection'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('Generator', 'IItemContainerGenerator'),
  \ dotnet#prop('VSP_IsVirtualizing', 'bool'),
  \ dotnet#prop('VSP_HasMeasured', 'bool'),
  \ dotnet#prop('VSP_IsPixelBased', 'bool'),
  \ dotnet#prop('IsDataBound', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('Canvas', 'Panel', [ 
  \ dotnet#method('Canvas(', ')', 'void'),
  \ dotnet#method('GetLeft(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetLeft(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetTop(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetTop(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetRight(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetRight(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetBottom(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetBottom(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('GetLayoutClip(', 'Size layoutSlotSize)', 'Geometry'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('Canvas(', ')', 'static void .'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('Control', 'FrameworkElement', [ 
  \ dotnet#field('value__', 'uint16'),
  \ dotnet#field('_controlBoolField', 'Control/ControlBoolFlags'),
  \ dotnet#method('Control(', ')', 'void'),
  \ dotnet#method('get_BorderBrush(', ')', 'Brush'),
  \ dotnet#method('set_BorderBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_BorderThickness(', ')', 'Thickness'),
  \ dotnet#method('set_BorderThickness(', 'Thickness value)', 'void'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Foreground(', ')', 'Brush'),
  \ dotnet#method('set_Foreground(', 'class Brush value)', 'void'),
  \ dotnet#method('get_FontFamily(', ')', 'FontFamily'),
  \ dotnet#method('set_FontFamily(', 'class Fontvalue)', 'void'),
  \ dotnet#method('get_FontSize(', ')', 'float64'),
  \ dotnet#method('set_FontSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_FontStretch(', ')', 'FontStretch'),
  \ dotnet#method('set_FontStretch(', 'FontStretch value)', 'void'),
  \ dotnet#method('get_FontStyle(', ')', 'FontStyle'),
  \ dotnet#method('set_FontStyle(', 'FontStyle value)', 'void'),
  \ dotnet#method('get_FontWeight(', ')', 'FontWeight'),
  \ dotnet#method('set_FontWeight(', 'FontWeight value)', 'void'),
  \ dotnet#method('get_HorizontalContentAlignment(', ')', 'HorizontalAlignment'),
  \ dotnet#method('set_HorizontalContentAlignment(', 'HorizontalAlignment value)', 'void'),
  \ dotnet#method('get_VerticalContentAlignment(', ')', 'VerticalAlignment'),
  \ dotnet#method('set_VerticalContentAlignment(', 'VerticalAlignment value)', 'void'),
  \ dotnet#method('get_TabIndex(', ')', 'int32'),
  \ dotnet#method('set_TabIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsTabStop(', ')', 'bool'),
  \ dotnet#method('set_IsTabStop(', 'bool value)', 'void'),
  \ dotnet#method('get_Padding(', ')', 'Thickness'),
  \ dotnet#method('set_Padding(', 'Thickness value)', 'void'),
  \ dotnet#method('get_Template(', ')', 'ControlTemplate'),
  \ dotnet#method('set_Template(', 'class ControlTemplate value)', 'void'),
  \ dotnet#method('get_TemplateInternal(', ')', 'strict'),
  \ dotnet#method('get_TemplateCache(', ')', 'strict'),
  \ dotnet#method('set_TemplateCache(', 'class FrameworkTemplate value)', 'strict void'),
  \ dotnet#method('OnTemplateChangedInternal(', 'class FrameworkTemplate oldTemplate, FrameworkTemplate newTemplate)', 'strict void'),
  \ dotnet#method('OnTemplateChanged(', 'class ControlTemplate oldTemplate, ControlTemplate newTemplate)', 'void'),
  \ dotnet#method('get_HandlesScrolling(', ')', 'famorassem bool'),
  \ dotnet#method('get_VisualStateChangeSuspended(', ')', 'bool'),
  \ dotnet#method('set_VisualStateChangeSuspended(', 'bool value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('add_PreviewMouseDoubleClick(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_PreviewMouseDoubleClick(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnPreviewMouseDoubleClick(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('add_MouseDoubleClick(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_MouseDoubleClick(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('OnMouseDoubleClick(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('OnPostApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('UpdateVisualState(', ')', 'void'),
  \ dotnet#method('UpdateVisualState(', 'bool useTransitions)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('ChangeValidationVisualState(', 'bool useTransitions)', 'void'),
  \ dotnet#method('OnVisualStatePropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeBounds)', 'Size'),
  \ dotnet#method('ReadControlFlag(', 'Control/ControlBoolFlags reqFlag)', 'bool'),
  \ dotnet#method('WriteControlFlag(', 'Control/ControlBoolFlags reqFlag, bool set)', 'void'),
  \ dotnet#method('Control(', ')', 'static void .'),
  \ dotnet#event('PreviewMouseDoubleClick', 'MouseButtonEventHandler'),
  \ dotnet#event('MouseDoubleClick', 'MouseButtonEventHandler'),
  \ dotnet#prop('BorderBrush', 'Brush'),
  \ dotnet#prop('BorderThickness', 'Thickness'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('Foreground', 'Brush'),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('FontSize', 'float64'),
  \ dotnet#prop('FontStretch', 'FontStretch'),
  \ dotnet#prop('FontStyle', 'FontStyle'),
  \ dotnet#prop('FontWeight', 'FontWeight'),
  \ dotnet#prop('HorizontalContentAlignment', 'HorizontalAlignment'),
  \ dotnet#prop('VerticalContentAlignment', 'VerticalAlignment'),
  \ dotnet#prop('TabIndex', 'int32'),
  \ dotnet#prop('IsTabStop', 'bool'),
  \ dotnet#prop('Padding', 'Thickness'),
  \ dotnet#prop('Template', 'ControlTemplate'),
  \ dotnet#prop('TemplateInternal', 'FrameworkTemplate'),
  \ dotnet#prop('TemplateCache', 'FrameworkTemplate'),
  \ dotnet#prop('HandlesScrolling', 'bool'),
  \ dotnet#prop('VisualStateChangeSuspended', 'bool'),
  \ ])

call dotnet#class('ContentControl', 'Control', [ 
  \ dotnet#method('ContentControl(', ')', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('GetPlainText(', ')', 'strict string'),
  \ dotnet#method('ContentObjectToString(', 'object content)', 'static string'),
  \ dotnet#method('PrepareContentControl(', 'object item, DataTemplate itemTemplate, DataTemplateSelContentControl itemTemplateSelContentControl, string itemStringFormat)', 'void'),
  \ dotnet#method('ClearContentControl(', 'object item)', 'void'),
  \ dotnet#method('ShouldSerializeContent(', ')', 'bool'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddChild(', 'object value)', 'void'),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void'),
  \ dotnet#method('get_Content(', ')', 'object'),
  \ dotnet#method('set_Content(', 'object value)', 'void'),
  \ dotnet#method('OnContentChanged(', 'object oldContent, object newContent)', 'void'),
  \ dotnet#method('get_HasContent(', ')', 'bool'),
  \ dotnet#method('get_ContentTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_ContentTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('OnContentTemplateChanged(', 'class DataTemplate oldContentTemplate, DataTemplate newContentTemplate)', 'void'),
  \ dotnet#method('get_ContentTemplateSelContentControl(', ')', 'DataTemplateSelContentControl'),
  \ dotnet#method('set_ContentTemplateSelContentControl(', 'class DataTemplateSelContentControl value)', 'void'),
  \ dotnet#method('OnContentTemplateSelContentControlChanged(', 'class DataTemplateSelContentControl oldContentTemplateSelContentControl, DataTemplateSelContentControl newContentTemplateSelContentControl)', 'void'),
  \ dotnet#method('get_ContentStringFormat(', ')', 'string'),
  \ dotnet#method('set_ContentStringFormat(', 'string value)', 'void'),
  \ dotnet#method('OnContentStringFormatChanged(', 'string oldContentStringFormat, string newContentStringFormat)', 'void'),
  \ dotnet#method('get_ContentIsNotLogical(', ')', 'bool'),
  \ dotnet#method('set_ContentIsNotLogical(', 'bool value)', 'void'),
  \ dotnet#method('get_ContentIsItem(', ')', 'bool'),
  \ dotnet#method('set_ContentIsItem(', 'bool value)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ContentControl(', ')', 'static void .'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('Content', 'object'),
  \ dotnet#prop('HasContent', 'bool'),
  \ dotnet#prop('ContentTemplate', 'DataTemplate'),
  \ dotnet#prop('ContentTemplateSelContentControl', 'DataTemplateSelContentControl'),
  \ dotnet#prop('ContentStringFormat', 'string'),
  \ dotnet#prop('ContentIsNotLogical', 'bool'),
  \ dotnet#prop('ContentIsItem', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('StickyNoteControl', 'Control', [ 
  \ dotnet#method('AddAttachedAnnotation(', 'class IAttachedAnnotation attachedAnnotation)', 'void '),
  \ dotnet#method('RemoveAttachedAnnotation(', 'class IAttachedAnnotation attachedAnnotation)', 'void '),
  \ dotnet#method('ModifyAttachedAnnotation(', 'class IAttachedAnnotation attachedAnnotation, object previousAttachedAnchor, AttachmentLevel previousAttachmentLevel)', 'void '),
  \ dotnet#method('get_AttachedAnnotations(', ')', ''),
  \ dotnet#method('GetDesiredTransform(', 'class GeneralTransform transform)', ''),
  \ dotnet#method('get_AnnotatedElement(', ')', ''),
  \ dotnet#method('get_PresentationContext(', ')', ''),
  \ dotnet#method('set_PresentationContext(', 'class PresentationContext value)', 'void '),
  \ dotnet#method('get_ZOrder(', ')', 'int32 '),
  \ dotnet#method('set_ZOrder(', 'int32 value)', 'void '),
  \ dotnet#method('get_IsDirty(', ')', 'bool '),
  \ dotnet#method('set_IsDirty(', 'bool value)', 'void '),
  \ dotnet#method('get_PositionTransform(', ')', '.method'),
  \ dotnet#method('set_PositionTransform(', 'class TranslateTransform value)', 'void'),
  \ dotnet#method('get_XOffset(', ')', 'float64'),
  \ dotnet#method('set_XOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_YOffset(', ')', 'float64'),
  \ dotnet#method('set_YOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_FlipBothOrigins(', ')', 'bool'),
  \ dotnet#method('StickyNoteControl(', 'StickyNoteType type)', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('get_Author(', ')', 'string'),
  \ dotnet#method('get_IsExpanded(', ')', 'bool'),
  \ dotnet#method('set_IsExpanded(', 'bool value)', 'void'),
  \ dotnet#method('get_IsActive(', ')', 'bool'),
  \ dotnet#method('get_IsMouseOverAnchor(', ')', 'bool'),
  \ dotnet#method('get_CaptionFontFamily(', ')', 'FontFamily'),
  \ dotnet#method('set_CaptionFontFamily(', 'class Fontvalue)', 'void'),
  \ dotnet#method('get_CaptionFontSize(', ')', 'float64'),
  \ dotnet#method('set_CaptionFontSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_CaptionFontStretch(', ')', 'FontStretch'),
  \ dotnet#method('set_CaptionFontStretch(', 'FontStretch value)', 'void'),
  \ dotnet#method('get_CaptionFontStyle(', ')', 'FontStyle'),
  \ dotnet#method('set_CaptionFontStyle(', 'FontStyle value)', 'void'),
  \ dotnet#method('get_CaptionFontWeight(', ')', 'FontWeight'),
  \ dotnet#method('set_CaptionFontWeight(', 'FontWeight value)', 'void'),
  \ dotnet#method('get_PenWidth(', ')', 'float64'),
  \ dotnet#method('set_PenWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_StickyNoteType(', ')', 'StickyNoteType'),
  \ dotnet#method('get_AnchorInfo(', ')', 'IAnchorInfo'),
  \ dotnet#method('OnTemplateChanged(', 'class ControlTemplate oldTemplate, ControlTemplate newTemplate)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs args)', 'void'),
  \ dotnet#method('OnGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs args)', 'void'),
  \ dotnet#method('get_Content(', ')', '.method'),
  \ dotnet#method('StickyNoteControl(', ')', 'static void .'),
  \ dotnet#method('StickyNoteControl(', ')', 'void'),
  \ dotnet#prop('AttachedAnnotations', 'IList'),
  \ dotnet#prop('AnnotatedElement', 'UIElement'),
  \ dotnet#prop('PresentationContext', 'PresentationContext'),
  \ dotnet#prop('ZOrder', 'int32'),
  \ dotnet#prop('IsDirty', 'bool'),
  \ dotnet#prop('PositionTransform', 'TranslateTransform'),
  \ dotnet#prop('XOffset', 'float64'),
  \ dotnet#prop('YOffset', 'float64'),
  \ dotnet#prop('FlipBothOrigins', 'bool'),
  \ dotnet#prop('Author', 'string'),
  \ dotnet#prop('IsExpanded', 'bool'),
  \ dotnet#prop('IsActive', 'bool'),
  \ dotnet#prop('IsMouseOverAnchor', 'bool'),
  \ dotnet#prop('CaptionFontFamily', 'FontFamily'),
  \ dotnet#prop('CaptionFontSize', 'float64'),
  \ dotnet#prop('CaptionFontStretch', 'FontStretch'),
  \ dotnet#prop('CaptionFontStyle', 'FontStyle'),
  \ dotnet#prop('CaptionFontWeight', 'FontWeight'),
  \ dotnet#prop('PenWidth', 'float64'),
  \ dotnet#prop('StickyNoteType', 'StickyNoteType'),
  \ dotnet#prop('AnchorInfo', 'IAnchorInfo'),
  \ dotnet#prop('Content', 'StickyNoteContentControl'),
  \ ])

call dotnet#class('DataTemplateSelDataTemplateSelector', 'Object', [ 
  \ dotnet#method('SelectTemplate(', 'object item, DependencyObject container)', ''),
  \ dotnet#method('DataTemplateSelector(', ')', 'void'),
  \ ])

call dotnet#class('ItemsControl', 'Control', [ 
  \ dotnet#method('ItemsControl(', 'class InputDevice deviceUsed, ModifierKeys modifierKeys)', 'void'),
  \ dotnet#method('get_DeviceUsed(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#prop('DeviceUsed', 'InputDevice'),
  \ dotnet#prop('Empty', 'ItemsControl/ItemNavigateArgs'),
  \ dotnet#method('ItemsControl(', ')', 'void'),
  \ dotnet#method('get_Items(', ')', 'ItemCollection'),
  \ dotnet#method('ShouldSerializeItems(', ')', 'bool'),
  \ dotnet#method('OnItemsSourceChanged(', 'class IEnumerable oldValue, IEnumerable newValue)', 'void'),
  \ dotnet#method('get_ItemsSource(', ')', 'IEnumerable'),
  \ dotnet#method('set_ItemsSource(', 'class IEnumerable value)', 'void'),
  \ dotnet#method('get_ItemContainerGenerator(', ')', 'ItemContainerGenerator'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('OnItemsChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('get_HasItems(', ')', 'bool'),
  \ dotnet#method('get_DisplayMemberPath(', ')', 'string'),
  \ dotnet#method('set_DisplayMemberPath(', 'string value)', 'void'),
  \ dotnet#method('OnDisplayMemberPathChanged(', 'string oldDisplayMemberPath, string newDisplayMemberPath)', 'void'),
  \ dotnet#method('get_ItemTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_ItemTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('OnItemTemplateChanged(', 'class DataTemplate oldItemTemplate, DataTemplate newItemTemplate)', 'void'),
  \ dotnet#method('get_ItemTemplateSelItemsControl(', ')', 'DataTemplateSelItemsControl'),
  \ dotnet#method('set_ItemTemplateSelItemsControl(', 'class DataTemplateSelItemsControl value)', 'void'),
  \ dotnet#method('OnItemTemplateSelItemsControlChanged(', 'class DataTemplateSelItemsControl oldItemTemplateSelItemsControl, DataTemplateSelItemsControl newItemTemplateSelItemsControl)', 'void'),
  \ dotnet#method('get_ItemStringFormat(', ')', 'string'),
  \ dotnet#method('set_ItemStringFormat(', 'string value)', 'void'),
  \ dotnet#method('OnItemStringFormatChanged(', 'string oldItemStringFormat, string newItemStringFormat)', 'void'),
  \ dotnet#method('get_ItemBindingGroup(', ')', 'BindingGroup'),
  \ dotnet#method('set_ItemBindingGroup(', 'class BindingGroup value)', 'void'),
  \ dotnet#method('OnItemBindingGroupChanged(', 'class BindingGroup oldItemBindingGroup, BindingGroup newItemBindingGroup)', 'void'),
  \ dotnet#method('get_ItemContainerStyle(', ')', 'Style'),
  \ dotnet#method('set_ItemContainerStyle(', 'class Style value)', 'void'),
  \ dotnet#method('OnItemContainerStyleChanged(', 'class Style oldItemContainerStyle, Style newItemContainerStyle)', 'void'),
  \ dotnet#method('get_ItemContainerStyleSelItemsControl(', ')', 'StyleSelItemsControl'),
  \ dotnet#method('set_ItemContainerStyleSelItemsControl(', 'class StyleSelItemsControl value)', 'void'),
  \ dotnet#method('OnItemContainerStyleSelItemsControlChanged(', 'class StyleSelItemsControl oldItemContainerStyleSelItemsControl, StyleSelItemsControl newItemContainerStyleSelItemsControl)', 'void'),
  \ dotnet#method('GetItemsOwner(', 'class DependencyObject element)', 'static ItemsControl'),
  \ dotnet#method('get_ItemsPanel(', ')', 'ItemsPanelTemplate'),
  \ dotnet#method('set_ItemsPanel(', 'class ItemsPanelTemplate value)', 'void'),
  \ dotnet#method('OnItemsPanelChanged(', 'class ItemsPanelTemplate oldItemsPanel, ItemsPanelTemplate newItemsPanel)', 'void'),
  \ dotnet#method('get_IsGrouping(', ')', 'bool'),
  \ dotnet#method('get_GroupStyle(', ')', 'ObservableCollection'),
  \ dotnet#method('ShouldSerializeGroupStyle(', ')', 'bool'),
  \ dotnet#method('get_GroupStyleSelItemsControl(', ')', 'GroupStyleSelItemsControl'),
  \ dotnet#method('set_GroupStyleSelItemsControl(', 'class GroupStyleSelItemsControl value)', 'void'),
  \ dotnet#method('OnGroupStyleSelItemsControlChanged(', 'class GroupStyleSelItemsControl oldGroupStyleSelItemsControl, GroupStyleSelItemsControl newGroupStyleSelItemsControl)', 'void'),
  \ dotnet#method('get_AlternationCount(', ')', 'int32'),
  \ dotnet#method('set_AlternationCount(', 'int32 value)', 'void'),
  \ dotnet#method('OnAlternationCountChanged(', 'int32 oldAlternationCount, int32 newAlternationCount)', 'void'),
  \ dotnet#method('GetAlternationIndex(', 'class DependencyObject element)', 'static int32'),
  \ dotnet#method('SetAlternationIndex(', 'class DependencyObject d, int32 value)', 'static void'),
  \ dotnet#method('ClearAlternationIndex(', 'class DependencyObject d)', 'static void'),
  \ dotnet#method('get_IsTextSearchEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsTextSearchEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_IsTextSearchCaseSensitive(', ')', 'bool'),
  \ dotnet#method('set_IsTextSearchCaseSensitive(', 'bool value)', 'void'),
  \ dotnet#method('ItemsControlFromItemContainer(', 'class DependencyObject container)', 'static ItemsControl'),
  \ dotnet#method('ContainerFromElement(', 'class ItemsControl itemsControl, DependencyObject element)', 'static DependencyObject'),
  \ dotnet#method('ContainerFromElement(', 'class DependencyObject element)', 'DependencyObject'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddChild(', 'object value)', 'void'),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void'),
  \ dotnet#method('get_View(', ')', ''),
  \ dotnet#method('IsItemItsOwnContainer(', 'object item)', 'bool '),
  \ dotnet#method('GetContainerForItem(', 'object item)', ''),
  \ dotnet#method('PrepareItemContainer(', 'class DependencyObject container, object item)', 'void '),
  \ dotnet#method('ClearContainerForItem(', 'class DependencyObject container, object item)', 'void '),
  \ dotnet#method('IsHostForItemContainer(', 'class DependencyObject container)', 'bool '),
  \ dotnet#method('GetGroupStyle(', 'class CollectionViewGroup group, int32 level)', ''),
  \ dotnet#method('SetIsGrouping(', 'bool isGrouping)', 'void '),
  \ dotnet#method('get_AlternationCount(', ')', 'int32 '),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'family'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('ClearContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('OnTextInput(', 'class TextCompositionEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnTemplateChangedInternal(', 'class FrameworkTemplate oldTemplate, FrameworkTemplate newTemplate)', 'strict void'),
  \ dotnet#method('ShouldApplyItemContainerStyle(', 'class DependencyObject container, object item)', 'bool'),
  \ dotnet#method('PrepareItemsControl(', 'object item, ItemsControl parentItemsControl)', 'void'),
  \ dotnet#method('ClearItemsControl(', 'object item)', 'void'),
  \ dotnet#method('OnBringItemIntoView(', 'object arg)', 'object'),
  \ dotnet#method('get_ItemsHost(', ')', '.method'),
  \ dotnet#method('set_ItemsHost(', 'class Panel value)', 'void'),
  \ dotnet#method('get_IsVirtualizing(', ')', 'bool'),
  \ dotnet#method('NavigateByLine(', 'FocusNavigationDirection direction, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'void'),
  \ dotnet#method('NavigateByLine(', 'object startingItem, FocusNavigationDirection direction, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'void'),
  \ dotnet#method('NavigateByPage(', 'FocusNavigationDirection direction, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'void'),
  \ dotnet#method('NavigateByPage(', 'object startingItem, FocusNavigationDirection direction, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'void'),
  \ dotnet#method('NavigateToStart(', 'class ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'void'),
  \ dotnet#method('NavigateToEnd(', 'class ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'void'),
  \ dotnet#method('NavigateToItem(', 'object item, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'void'),
  \ dotnet#method('NavigateToItem(', 'object item, int32 itemIndex, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'void'),
  \ dotnet#method('NavigateToItem(', 'object item, ItemsControl/ItemNavigateArgs itemNavigateArgs, bool alwaysAtTopOfViewport)', 'void'),
  \ dotnet#method('MakeVisible(', 'int32 index, bool alwaysAtTopOfViewport, bool alignMinorAxisToo)', 'bool'),
  \ dotnet#method('get_FocusedItem(', ')', 'object'),
  \ dotnet#method('FocusItem(', 'object item, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'strict void'),
  \ dotnet#method('get_IsLogicalVertical(', ')', 'bool'),
  \ dotnet#method('get_IsLogicalHorizontal(', ')', 'bool'),
  \ dotnet#method('get_ScrollHost(', ')', '.method'),
  \ dotnet#method('get_AutoScrollTimeout(', ')', 'static'),
  \ dotnet#method('DoAutoScroll(', ')', 'void'),
  \ dotnet#method('DoAutoScroll(', 'object startingItem)', 'void'),
  \ dotnet#method('GetItemOrContainerFromContainer(', 'class DependencyObject container)', 'object'),
  \ dotnet#method('ReadItemValue(', 'object item, int32 dpIndex)', 'object'),
  \ dotnet#method('StoreItemValue(', 'object item, object value, int32 dpIndex)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ItemsControl(', ')', 'static void .'),
  \ dotnet#prop('Items', 'ItemCollection'),
  \ dotnet#prop('ItemsSource', 'IEnumerable'),
  \ dotnet#prop('ItemContainerGenerator', 'ItemContainerGenerator'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('HasItems', 'bool'),
  \ dotnet#prop('DisplayMemberPath', 'string'),
  \ dotnet#prop('ItemTemplate', 'DataTemplate'),
  \ dotnet#prop('ItemTemplateSelItemsControl', 'DataTemplateSelItemsControl'),
  \ dotnet#prop('ItemStringFormat', 'string'),
  \ dotnet#prop('ItemBindingGroup', 'BindingGroup'),
  \ dotnet#prop('ItemContainerStyle', 'Style'),
  \ dotnet#prop('ItemContainerStyleSelItemsControl', 'StyleSelItemsControl'),
  \ dotnet#prop('ItemsPanel', 'ItemsPanelTemplate'),
  \ dotnet#prop('IsGrouping', 'bool'),
  \ dotnet#prop('GroupStyle', 'ObservableCollection'),
  \ dotnet#prop('GroupStyleSelItemsControl', 'GroupStyleSelItemsControl'),
  \ dotnet#prop('AlternationCount', 'int32'),
  \ dotnet#prop('IsTextSearchEnabled', 'bool'),
  \ dotnet#prop('IsTextSearchCaseSensitive', 'bool'),
  \ dotnet#prop('View', 'ItemCollection'),
  \ dotnet#prop('AlternationCount', 'int32'),
  \ dotnet#prop('ItemsHost', 'Panel'),
  \ dotnet#prop('IsVirtualizing', 'bool'),
  \ dotnet#prop('FocusedItem', 'object'),
  \ dotnet#prop('IsLogicalVertical', 'bool'),
  \ dotnet#prop('IsLogicalHorizontal', 'bool'),
  \ dotnet#prop('ScrollHost', 'ScrollViewer'),
  \ dotnet#prop('AutoScrollTimeout', 'TimeSpan'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ContextMenu', 'MenuBase', [ 
  \ dotnet#method('ContextMenu(', ')', 'void'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('set_HorizontalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('set_VerticalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_IsOpen(', ')', 'bool'),
  \ dotnet#method('set_IsOpen(', 'bool value)', 'void'),
  \ dotnet#method('get_PlacementTarget(', ')', 'UIElement'),
  \ dotnet#method('set_PlacementTarget(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_PlacementRectangle(', ')', 'Rect'),
  \ dotnet#method('set_PlacementRectangle(', 'Rect value)', 'void'),
  \ dotnet#method('get_Placement(', ')', 'PlacementMode'),
  \ dotnet#method('set_Placement(', 'PlacementMode value)', 'void'),
  \ dotnet#method('get_HasDropShadow(', ')', 'bool'),
  \ dotnet#method('set_HasDropShadow(', 'bool value)', 'void'),
  \ dotnet#method('get_CustomPopupPlacementCallback(', ')', 'CustomPopupPlacementCallback'),
  \ dotnet#method('set_CustomPopupPlacementCallback(', 'class CustomPopupPlacementCallback value)', 'void'),
  \ dotnet#method('get_StaysOpen(', ')', 'bool'),
  \ dotnet#method('set_StaysOpen(', 'bool value)', 'void'),
  \ dotnet#method('add_Opened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Opened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnOpened(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_Closed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Closed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnClosed(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('get_HandlesScrolling(', ')', 'famorassem bool'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnKeyUp(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('IgnoreModelParentBuildRoute(', 'class RoutedEventArgs e)', 'strict bool'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('OnAncestorChanged(', ')', 'strict void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ContextMenu(', ')', 'static void .'),
  \ dotnet#event('Opened', 'RoutedEventHandler'),
  \ dotnet#event('Closed', 'RoutedEventHandler'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('IsOpen', 'bool'),
  \ dotnet#prop('PlacementTarget', 'UIElement'),
  \ dotnet#prop('PlacementRectangle', 'Rect'),
  \ dotnet#prop('Placement', 'PlacementMode'),
  \ dotnet#prop('HasDropShadow', 'bool'),
  \ dotnet#prop('CustomPopupPlacementCallback', 'CustomPopupPlacementCallback'),
  \ dotnet#prop('StaysOpen', 'bool'),
  \ dotnet#prop('HandlesScrolling', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('HeaderedItemsControl', 'ItemsControl', [ 
  \ dotnet#method('HeaderedItemsControl(', ')', 'void'),
  \ dotnet#method('get_Header(', ')', 'object'),
  \ dotnet#method('set_Header(', 'object value)', 'void'),
  \ dotnet#method('OnHeaderChanged(', 'object oldHeader, object newHeader)', 'void'),
  \ dotnet#method('get_HasHeader(', ')', 'bool'),
  \ dotnet#method('get_HeaderTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_HeaderTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('OnHeaderTemplateChanged(', 'class DataTemplate oldHeaderTemplate, DataTemplate newHeaderTemplate)', 'void'),
  \ dotnet#method('get_HeaderTemplateSelHeaderedItemsControl(', ')', 'DataTemplateSelHeaderedItemsControl'),
  \ dotnet#method('set_HeaderTemplateSelHeaderedItemsControl(', 'class DataTemplateSelHeaderedItemsControl value)', 'void'),
  \ dotnet#method('OnHeaderTemplateSelHeaderedItemsControlChanged(', 'class DataTemplateSelHeaderedItemsControl oldHeaderTemplateSelHeaderedItemsControl, DataTemplateSelHeaderedItemsControl newHeaderTemplateSelHeaderedItemsControl)', 'void'),
  \ dotnet#method('get_HeaderStringFormat(', ')', 'string'),
  \ dotnet#method('set_HeaderStringFormat(', 'string value)', 'void'),
  \ dotnet#method('OnHeaderStringFormatChanged(', 'string oldHeaderStringFormat, string newHeaderStringFormat)', 'void'),
  \ dotnet#method('PrepareHeaderedItemsControl(', 'object item, ItemsControl parentItemsControl)', 'void'),
  \ dotnet#method('ClearHeaderedItemsControl(', 'object item)', 'void'),
  \ dotnet#method('GetPlainText(', ')', 'strict string'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('HeaderedItemsControl(', ')', 'static void .'),
  \ dotnet#prop('Header', 'object'),
  \ dotnet#prop('HasHeader', 'bool'),
  \ dotnet#prop('HeaderTemplate', 'DataTemplate'),
  \ dotnet#prop('HeaderTemplateSelHeaderedItemsControl', 'DataTemplateSelHeaderedItemsControl'),
  \ dotnet#prop('HeaderStringFormat', 'string'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ ])

call dotnet#class('MenuItem', 'HeaderedItemsControl', [ 
  \ dotnet#method('get_TopLevelItemTemplateKey(', ')', 'static'),
  \ dotnet#method('get_TopLevelHeaderTemplateKey(', ')', 'static'),
  \ dotnet#method('get_SubmenuItemTemplateKey(', ')', 'static'),
  \ dotnet#method('get_SubmenuHeaderTemplateKey(', ')', 'static'),
  \ dotnet#method('MenuItem(', ')', 'void'),
  \ dotnet#method('add_Click(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Click(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_Checked(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Checked(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_Unchecked(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Unchecked(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_SubmenuOpened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_SubmenuOpened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_SubmenuClosed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_SubmenuClosed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('get_Command(', ')', ''),
  \ dotnet#method('set_Command(', 'class ICommand value)', 'void'),
  \ dotnet#method('get_IsEnabledCore(', ')', 'bool'),
  \ dotnet#method('get_CommandParameter(', ')', 'object'),
  \ dotnet#method('set_CommandParameter(', 'object value)', 'void'),
  \ dotnet#method('get_CommandTarget(', ')', ''),
  \ dotnet#method('set_CommandTarget(', 'class IInputElement value)', 'void'),
  \ dotnet#method('get_IsSubmenuOpen(', ')', 'bool'),
  \ dotnet#method('set_IsSubmenuOpen(', 'bool value)', 'void'),
  \ dotnet#method('OnSubmenuOpened(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnSubmenuClosed(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_Role(', ')', 'MenuItemRole'),
  \ dotnet#method('get_IsCheckable(', ')', 'bool'),
  \ dotnet#method('set_IsCheckable(', 'bool value)', 'void'),
  \ dotnet#method('get_IsPressed(', ')', 'bool'),
  \ dotnet#method('set_IsPressed(', 'bool value)', 'void'),
  \ dotnet#method('get_IsHighlighted(', ')', 'bool'),
  \ dotnet#method('set_IsHighlighted(', 'bool value)', 'void'),
  \ dotnet#method('get_IsChecked(', ')', 'bool'),
  \ dotnet#method('set_IsChecked(', 'bool value)', 'void'),
  \ dotnet#method('OnChecked(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnUnchecked(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_StaysOpenOnClick(', ')', 'bool'),
  \ dotnet#method('set_StaysOpenOnClick(', 'bool value)', 'void'),
  \ dotnet#method('get_IsSelected(', ')', 'bool'),
  \ dotnet#method('set_IsSelected(', 'bool value)', 'void'),
  \ dotnet#method('get_InputGestureText(', ')', 'string'),
  \ dotnet#method('set_InputGestureText(', 'string value)', 'void'),
  \ dotnet#method('get_Icon(', ')', 'object'),
  \ dotnet#method('set_Icon(', 'object value)', 'void'),
  \ dotnet#method('get_IsSuspendingPopupAnimation(', ')', 'bool'),
  \ dotnet#method('set_IsSuspendingPopupAnimation(', 'bool value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnInitialized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('PrepareMenuItem(', 'class DependencyObject element, object item)', 'static void'),
  \ dotnet#method('OnClick(', ')', 'void'),
  \ dotnet#method('OnClickCore(', 'bool userInitiated)', 'strict void'),
  \ dotnet#method('OnClickImpl(', 'bool userInitiated)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseRightButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseRightButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeave(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseEnter(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('get_HandlesScrolling(', ')', 'famorassem bool'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('OnItemsChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('ShouldApplyItemContainerStyle(', 'class DependencyObject container, object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('SetInsideContextMenuProperty(', 'class UIElement element, bool value)', 'static void'),
  \ dotnet#method('ClickItem(', ')', 'void'),
  \ dotnet#method('ClickHeader(', ')', 'void'),
  \ dotnet#method('OpenMenu(', ')', 'bool'),
  \ dotnet#method('OpenSubmenuWithKeyboard(', ')', 'void'),
  \ dotnet#method('get_LogicalParent(', ')', 'object'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('get_SeparatorStyleKey(', ')', 'static'),
  \ dotnet#method('MenuItem(', ')', 'static void .'),
  \ dotnet#event('Click', 'RoutedEventHandler'),
  \ dotnet#event('Checked', 'RoutedEventHandler'),
  \ dotnet#event('Unchecked', 'RoutedEventHandler'),
  \ dotnet#event('SubmenuOpened', 'RoutedEventHandler'),
  \ dotnet#event('SubmenuClosed', 'RoutedEventHandler'),
  \ dotnet#prop('TopLevelItemTemplateKey', 'ResourceKey'),
  \ dotnet#prop('TopLevelHeaderTemplateKey', 'ResourceKey'),
  \ dotnet#prop('SubmenuItemTemplateKey', 'ResourceKey'),
  \ dotnet#prop('SubmenuHeaderTemplateKey', 'ResourceKey'),
  \ dotnet#prop('Command', 'ICommand'),
  \ dotnet#prop('IsEnabledCore', 'bool'),
  \ dotnet#prop('CommandParameter', 'object'),
  \ dotnet#prop('CommandTarget', 'IInputElement'),
  \ dotnet#prop('IsSubmenuOpen', 'bool'),
  \ dotnet#prop('Role', 'MenuItemRole'),
  \ dotnet#prop('IsCheckable', 'bool'),
  \ dotnet#prop('IsPressed', 'bool'),
  \ dotnet#prop('IsHighlighted', 'bool'),
  \ dotnet#prop('IsChecked', 'bool'),
  \ dotnet#prop('StaysOpenOnClick', 'bool'),
  \ dotnet#prop('IsSelected', 'bool'),
  \ dotnet#prop('InputGestureText', 'string'),
  \ dotnet#prop('Icon', 'object'),
  \ dotnet#prop('IsSuspendingPopupAnimation', 'bool'),
  \ dotnet#prop('HandlesScrolling', 'bool'),
  \ dotnet#prop('LogicalParent', 'object'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('SeparatorStyleKey', 'ResourceKey'),
  \ ])

call dotnet#class('FlowDocumentScrollViewer', 'Control', [ 
  \ dotnet#method('FlowDocumentScrollViewer(', ')', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('Find(', ')', 'void'),
  \ dotnet#method('Print(', ')', 'void'),
  \ dotnet#method('CancelPrint(', ')', 'void'),
  \ dotnet#method('IncreaseZoom(', ')', 'void'),
  \ dotnet#method('DecreaseZoom(', ')', 'void'),
  \ dotnet#method('get_Document(', ')', 'FlowDocument'),
  \ dotnet#method('set_Document(', 'class FlowDocument value)', 'void'),
  \ dotnet#method('get_Selection(', ')', 'TextSelection'),
  \ dotnet#method('get_Zoom(', ')', 'float64'),
  \ dotnet#method('set_Zoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxZoom(', ')', 'float64'),
  \ dotnet#method('set_MaxZoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinZoom(', ')', 'float64'),
  \ dotnet#method('set_MinZoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_ZoomIncrement(', ')', 'float64'),
  \ dotnet#method('set_ZoomIncrement(', 'float64 value)', 'void'),
  \ dotnet#method('get_CanIncreaseZoom(', ')', 'bool'),
  \ dotnet#method('get_CanDecreaseZoom(', ')', 'bool'),
  \ dotnet#method('get_IsSelectionEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsSelectionEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_IsToolBarVisible(', ')', 'bool'),
  \ dotnet#method('set_IsToolBarVisible(', 'bool value)', 'void'),
  \ dotnet#method('get_HorizontalScrollBarVisibility(', ')', 'ScrollBarVisibility'),
  \ dotnet#method('set_HorizontalScrollBarVisibility(', 'ScrollBarVisibility value)', 'void'),
  \ dotnet#method('get_VerticalScrollBarVisibility(', ')', 'ScrollBarVisibility'),
  \ dotnet#method('set_VerticalScrollBarVisibility(', 'ScrollBarVisibility value)', 'void'),
  \ dotnet#method('get_SelectionBrush(', ')', 'Brush'),
  \ dotnet#method('set_SelectionBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_SelectionOpacity(', ')', 'float64'),
  \ dotnet#method('set_SelectionOpacity(', 'float64 value)', 'void'),
  \ dotnet#method('OnPrintCompleted(', ')', 'void'),
  \ dotnet#method('OnFindCommand(', ')', 'void'),
  \ dotnet#method('OnPrintCommand(', ')', 'void'),
  \ dotnet#method('OnCancelPrintCommand(', ')', 'void'),
  \ dotnet#method('OnIncreaseZoomCommand(', ')', 'void'),
  \ dotnet#method('OnDecreaseZoomCommand(', ')', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnMouseWheel(', 'class MouseWheelEventArgs e)', 'void'),
  \ dotnet#method('OnContextMenuOpening(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('BuildRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict bool'),
  \ dotnet#method('BringContentPositionIntoView(', 'object arg)', 'object'),
  \ dotnet#method('get_ScrollViewer(', ')', '.method'),
  \ dotnet#method('get_CanShowFindToolBar(', ')', 'bool'),
  \ dotnet#method('get_IsPrinting(', ')', 'bool'),
  \ dotnet#method('get_ContentPosition(', ')', '.method'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object '),
  \ dotnet#method('GetJournalState(', 'JournalReason journalReason)', ''),
  \ dotnet#method('RestoreJournalState(', 'class CustomJournalStateInternal state)', 'void '),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('FlowDocumentScrollViewer(', ')', 'static void .'),
  \ dotnet#prop('Document', 'FlowDocument'),
  \ dotnet#prop('Selection', 'TextSelection'),
  \ dotnet#prop('Zoom', 'float64'),
  \ dotnet#prop('MaxZoom', 'float64'),
  \ dotnet#prop('MinZoom', 'float64'),
  \ dotnet#prop('ZoomIncrement', 'float64'),
  \ dotnet#prop('CanIncreaseZoom', 'bool'),
  \ dotnet#prop('CanDecreaseZoom', 'bool'),
  \ dotnet#prop('IsSelectionEnabled', 'bool'),
  \ dotnet#prop('IsToolBarVisible', 'bool'),
  \ dotnet#prop('HorizontalScrollBarVisibility', 'ScrollBarVisibility'),
  \ dotnet#prop('VerticalScrollBarVisibility', 'ScrollBarVisibility'),
  \ dotnet#prop('SelectionBrush', 'Brush'),
  \ dotnet#prop('SelectionOpacity', 'float64'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('ScrollViewer', 'ScrollViewer'),
  \ dotnet#prop('CanShowFindToolBar', 'bool'),
  \ dotnet#prop('IsPrinting', 'bool'),
  \ dotnet#prop('ContentPosition', 'TextPointer'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('FlowDocumentPageViewer', 'DocumentViewerBase', [ 
  \ dotnet#method('FlowDocumentPageViewer(', ')', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('IncreaseZoom(', ')', 'void'),
  \ dotnet#method('DecreaseZoom(', ')', 'void'),
  \ dotnet#method('Find(', ')', 'void'),
  \ dotnet#method('get_Selection(', ')', 'TextSelection'),
  \ dotnet#method('get_Zoom(', ')', 'float64'),
  \ dotnet#method('set_Zoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxZoom(', ')', 'float64'),
  \ dotnet#method('set_MaxZoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinZoom(', ')', 'float64'),
  \ dotnet#method('set_MinZoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_ZoomIncrement(', ')', 'float64'),
  \ dotnet#method('set_ZoomIncrement(', 'float64 value)', 'void'),
  \ dotnet#method('get_CanIncreaseZoom(', ')', 'bool'),
  \ dotnet#method('get_CanDecreaseZoom(', ')', 'bool'),
  \ dotnet#method('get_SelectionBrush(', ')', 'Brush'),
  \ dotnet#method('set_SelectionBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_SelectionOpacity(', ')', 'float64'),
  \ dotnet#method('set_SelectionOpacity(', 'float64 value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnMouseWheel(', 'class MouseWheelEventArgs e)', 'void'),
  \ dotnet#method('OnContextMenuOpening(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('OnPageViewsChanged(', ')', 'void'),
  \ dotnet#method('OnDocumentChanged(', ')', 'void'),
  \ dotnet#method('OnPrintCompleted(', ')', 'void'),
  \ dotnet#method('OnPreviousPageCommand(', ')', 'void'),
  \ dotnet#method('OnNextPageCommand(', ')', 'void'),
  \ dotnet#method('OnFirstPageCommand(', ')', 'void'),
  \ dotnet#method('OnLastPageCommand(', ')', 'void'),
  \ dotnet#method('OnGoToPageCommand(', 'int32 pageNumber)', 'void'),
  \ dotnet#method('OnFindCommand(', ')', 'void'),
  \ dotnet#method('OnPrintCommand(', ')', 'void'),
  \ dotnet#method('OnCancelPrintCommand(', ')', 'void'),
  \ dotnet#method('OnIncreaseZoomCommand(', ')', 'void'),
  \ dotnet#method('OnDecreaseZoomCommand(', ')', 'void'),
  \ dotnet#method('BuildRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict bool'),
  \ dotnet#method('BringPointIntoView(', 'Point point)', 'bool'),
  \ dotnet#method('BringContentPositionIntoView(', 'object arg)', 'object'),
  \ dotnet#method('get_ContentPosition(', ')', '.method'),
  \ dotnet#method('get_CanShowFindToolBar(', ')', 'bool'),
  \ dotnet#method('get_IsPrinting(', ')', 'bool'),
  \ dotnet#method('GetJournalState(', 'JournalReason journalReason)', ''),
  \ dotnet#method('RestoreJournalState(', 'class CustomJournalStateInternal state)', 'void '),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('FlowDocumentPageViewer(', ')', 'static void .'),
  \ dotnet#prop('Selection', 'TextSelection'),
  \ dotnet#prop('Zoom', 'float64'),
  \ dotnet#prop('MaxZoom', 'float64'),
  \ dotnet#prop('MinZoom', 'float64'),
  \ dotnet#prop('ZoomIncrement', 'float64'),
  \ dotnet#prop('CanIncreaseZoom', 'bool'),
  \ dotnet#prop('CanDecreaseZoom', 'bool'),
  \ dotnet#prop('SelectionBrush', 'Brush'),
  \ dotnet#prop('SelectionOpacity', 'float64'),
  \ dotnet#prop('ContentPosition', 'ContentPosition'),
  \ dotnet#prop('CanShowFindToolBar', 'bool'),
  \ dotnet#prop('IsPrinting', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ControlTemplate', 'FrameworkTemplate', [ 
  \ dotnet#method('ControlTemplate(', ')', 'void'),
  \ dotnet#method('ControlTemplate(', 'class Type targetType)', 'void'),
  \ dotnet#method('ValidateTemplatedParent(', 'class FrameworkElement templatedParent)', 'void'),
  \ dotnet#method('get_TargetType(', ')', 'Type'),
  \ dotnet#method('set_TargetType(', 'class Type value)', 'void'),
  \ dotnet#method('get_Triggers(', ')', 'TriggerCollection'),
  \ dotnet#method('get_TargetTypeInternal(', ')', 'strict'),
  \ dotnet#method('SetTargetTypeInternal(', 'class Type targetType)', 'strict void'),
  \ dotnet#method('get_TriggersInternal(', ')', 'strict'),
  \ dotnet#method('ControlTemplate(', ')', 'static void .'),
  \ dotnet#prop('TargetType', 'Type'),
  \ dotnet#prop('Triggers', 'TriggerCollection'),
  \ dotnet#prop('TargetTypeInternal', 'Type'),
  \ dotnet#prop('TriggersInternal', 'TriggerCollection'),
  \ ])

call dotnet#class('AccessText', 'FrameworkElement', [ 
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('AccessText(', ')', 'void'),
  \ dotnet#method('get_AccessKey(', ')', 'char'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('get_FontFamily(', ')', 'FontFamily'),
  \ dotnet#method('set_FontFamily(', 'class Fontvalue)', 'void'),
  \ dotnet#method('get_FontStyle(', ')', 'FontStyle'),
  \ dotnet#method('set_FontStyle(', 'FontStyle value)', 'void'),
  \ dotnet#method('get_FontWeight(', ')', 'FontWeight'),
  \ dotnet#method('set_FontWeight(', 'FontWeight value)', 'void'),
  \ dotnet#method('get_FontStretch(', ')', 'FontStretch'),
  \ dotnet#method('set_FontStretch(', 'FontStretch value)', 'void'),
  \ dotnet#method('get_FontSize(', ')', 'float64'),
  \ dotnet#method('set_FontSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_Foreground(', ')', 'Brush'),
  \ dotnet#method('set_Foreground(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_TextDecorations(', ')', 'TextDecorationCollection'),
  \ dotnet#method('set_TextDecorations(', 'class TextDecorationCollection value)', 'void'),
  \ dotnet#method('get_TextEffects(', ')', 'TextEffectCollection'),
  \ dotnet#method('set_TextEffects(', 'class TextEffectCollection value)', 'void'),
  \ dotnet#method('get_LineHeight(', ')', 'float64'),
  \ dotnet#method('set_LineHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_LineStackingStrategy(', ')', 'LineStackingStrategy'),
  \ dotnet#method('set_LineStackingStrategy(', 'LineStackingStrategy value)', 'void'),
  \ dotnet#method('get_TextAlignment(', ')', 'TextAlignment'),
  \ dotnet#method('set_TextAlignment(', 'TextAlignment value)', 'void'),
  \ dotnet#method('get_TextTrimming(', ')', 'TextTrimming'),
  \ dotnet#method('set_TextTrimming(', 'TextTrimming value)', 'void'),
  \ dotnet#method('get_TextWrapping(', ')', 'TextWrapping'),
  \ dotnet#method('set_TextWrapping(', 'TextWrapping value)', 'void'),
  \ dotnet#method('get_BaselineOffset(', ')', 'float64'),
  \ dotnet#method('set_BaselineOffset(', 'float64 value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'family'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'family'),
  \ dotnet#method('HasCustomSerialization(', 'object o)', 'static bool'),
  \ dotnet#method('get_TextBlock(', ')', '.method'),
  \ dotnet#method('get_AccessKeyMarker(', ')', 'static char'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('SerializeCustom(', 'class XmlWriter xmlWriter, object o)', 'static void'),
  \ dotnet#method('RemoveAccessKeyMarker(', 'string text)', 'static string'),
  \ dotnet#method('AccessText(', ')', 'static void .'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('AccessKey', 'char'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('FontStyle', 'FontStyle'),
  \ dotnet#prop('FontWeight', 'FontWeight'),
  \ dotnet#prop('FontStretch', 'FontStretch'),
  \ dotnet#prop('FontSize', 'float64'),
  \ dotnet#prop('Foreground', 'Brush'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('TextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('TextEffects', 'TextEffectCollection'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('LineStackingStrategy', 'LineStackingStrategy'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('TextTrimming', 'TextTrimming'),
  \ dotnet#prop('TextWrapping', 'TextWrapping'),
  \ dotnet#prop('BaselineOffset', 'float64'),
  \ dotnet#prop('TextBlock', 'TextBlock'),
  \ dotnet#prop('AccessKeyMarker', 'char'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ ])

call dotnet#class('AdornedElementPlaceholder', 'FrameworkElement', [ 
  \ dotnet#method('AdornedElementPlaceholder(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_AdornedElement(', ')', 'UIElement'),
  \ dotnet#method('get_Child(', ')', ''),
  \ dotnet#method('set_Child(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('OnInitialized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeBounds)', 'Size'),
  \ dotnet#prop('AdornedElement', 'UIElement'),
  \ dotnet#prop('Child', 'UIElement'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ ])

call dotnet#class('AlternationConverter', 'Object', [ 
  \ dotnet#method('get_Values(', ')', 'IList'),
  \ dotnet#method('Convert(', 'object o, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('ConvertBack(', 'object o, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('AlternationConverter(', ')', 'void'),
  \ dotnet#prop('Values', 'IList'),
  \ ])

call dotnet#class('BooleanToVisibilityConverter', 'Object', [ 
  \ dotnet#method('Convert(', 'object value, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('ConvertBack(', 'object value, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('BooleanToVisibilityConverter(', ')', 'void'),
  \ ])

call dotnet#class('Decorator', 'FrameworkElement', [ 
  \ dotnet#method('Decorator(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_Child(', ')', ''),
  \ dotnet#method('set_Child(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('get_IntChild(', ')', '.method'),
  \ dotnet#method('set_IntChild(', 'class UIElement value)', 'void'),
  \ dotnet#prop('Child', 'UIElement'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('IntChild', 'UIElement'),
  \ ])

call dotnet#class('Border', 'Decorator', [ 
  \ dotnet#method('Border(', ')', 'void'),
  \ dotnet#method('get_BorderThickness(', ')', 'Thickness'),
  \ dotnet#method('set_BorderThickness(', 'Thickness value)', 'void'),
  \ dotnet#method('get_Padding(', ')', 'Thickness'),
  \ dotnet#method('set_Padding(', 'Thickness value)', 'void'),
  \ dotnet#method('get_CornerRadius(', ')', 'CornerRadius'),
  \ dotnet#method('set_CornerRadius(', 'CornerRadius value)', 'void'),
  \ dotnet#method('get_BorderBrush(', ')', 'Brush'),
  \ dotnet#method('set_BorderBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('OnRender(', 'class DrawingContext dc)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('Border(', ')', 'static void .'),
  \ dotnet#prop('BorderThickness', 'Thickness'),
  \ dotnet#prop('Padding', 'Thickness'),
  \ dotnet#prop('CornerRadius', 'CornerRadius'),
  \ dotnet#prop('BorderBrush', 'Brush'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('BorderGapMaskConverter', 'Object', [ 
  \ dotnet#method('Convert(', 'object[] values, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('ConvertBack(', 'object value, Type[] targetTypes, object parameter, CultureInfo culture)', 'object[]'),
  \ dotnet#method('BorderGapMaskConverter(', ')', 'void'),
  \ ])

call dotnet#class('Button', 'ButtonBase', [ 
  \ dotnet#method('Button(', ')', 'void'),
  \ dotnet#method('get_IsDefault(', ')', 'bool'),
  \ dotnet#method('set_IsDefault(', 'bool value)', 'void'),
  \ dotnet#method('get_IsCancel(', ')', 'bool'),
  \ dotnet#method('set_IsCancel(', 'bool value)', 'void'),
  \ dotnet#method('get_IsDefaulted(', ')', 'bool'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnClick(', ')', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Button(', ')', 'static void .'),
  \ dotnet#prop('IsDefault', 'bool'),
  \ dotnet#prop('IsCancel', 'bool'),
  \ dotnet#prop('IsDefaulted', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('Calendar', 'Control', [ 
  \ dotnet#method('add_SelectedDatesChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SelectedDatesChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DisplayDateChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DisplayDateChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DisplayModeChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DisplayModeChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_SelectionModeChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SelectionModeChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('Calendar(', ')', 'void'),
  \ dotnet#method('get_BlackoutDates(', ')', 'CalendarBlackoutDatesCollection'),
  \ dotnet#method('get_CalendarButtonStyle(', ')', 'Style'),
  \ dotnet#method('set_CalendarButtonStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_CalendarDayButtonStyle(', ')', 'Style'),
  \ dotnet#method('set_CalendarDayButtonStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_CalendarItemStyle(', ')', 'Style'),
  \ dotnet#method('set_CalendarItemStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_DisplayDate(', ')', 'DateTime'),
  \ dotnet#method('set_DisplayDate(', 'DateTime value)', 'void'),
  \ dotnet#method('get_DisplayDateEnd(', ')', 'Nullable'),
  \ dotnet#method('set_DisplayDateEnd(', 'Nullable value)', 'void'),
  \ dotnet#method('get_DisplayDateStart(', ')', 'Nullable'),
  \ dotnet#method('set_DisplayDateStart(', 'Nullable value)', 'void'),
  \ dotnet#method('get_DisplayMode(', ')', 'CalendarMode'),
  \ dotnet#method('set_DisplayMode(', 'CalendarMode value)', 'void'),
  \ dotnet#method('get_FirstDayOfWeek(', ')', 'DayOfWeek'),
  \ dotnet#method('set_FirstDayOfWeek(', 'DayOfWeek value)', 'void'),
  \ dotnet#method('get_IsTodayHighlighted(', ')', 'bool'),
  \ dotnet#method('set_IsTodayHighlighted(', 'bool value)', 'void'),
  \ dotnet#method('get_SelectedDate(', ')', 'Nullable'),
  \ dotnet#method('set_SelectedDate(', 'Nullable value)', 'void'),
  \ dotnet#method('get_SelectedDates(', ')', 'SelectedDatesCollection'),
  \ dotnet#method('get_SelectionMode(', ')', 'CalendarSelectionMode'),
  \ dotnet#method('set_SelectionMode(', 'CalendarSelectionMode value)', 'void'),
  \ dotnet#method('add_DayButtonMouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('remove_DayButtonMouseUp(', 'class MouseButtonEventHandler value)', 'void'),
  \ dotnet#method('add_DayOrMonthPreviewKeyDown(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_DayOrMonthPreviewKeyDown(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('get_DatePickerDisplayDateFlag(', ')', 'bool'),
  \ dotnet#method('set_DatePickerDisplayDateFlag(', 'bool value)', 'void'),
  \ dotnet#method('get_DisplayDateInternal(', ')', '.method'),
  \ dotnet#method('get_DisplayDateEndInternal(', ')', '.method'),
  \ dotnet#method('get_DisplayDateStartInternal(', ')', '.method'),
  \ dotnet#method('get_CurrentDate(', ')', '.method'),
  \ dotnet#method('set_CurrentDate(', 'DateTime value)', 'void'),
  \ dotnet#method('get_HoverStart(', ')', '.method'),
  \ dotnet#method('set_HoverStart(', 'Nullable value)', 'void'),
  \ dotnet#method('get_HoverEnd(', ')', '.method'),
  \ dotnet#method('set_HoverEnd(', 'Nullable value)', 'void'),
  \ dotnet#method('get_MonthControl(', ')', '.method'),
  \ dotnet#method('get_DisplayMonth(', ')', '.method'),
  \ dotnet#method('get_DisplayYear(', ')', '.method'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('OnSelectedDatesChanged(', 'class SelectionChangedEventArgs e)', 'void'),
  \ dotnet#method('OnDisplayDateChanged(', 'class CalendarDateChangedEventArgs e)', 'void'),
  \ dotnet#method('OnDisplayModeChanged(', 'class CalendarModeChangedEventArgs e)', 'void'),
  \ dotnet#method('OnSelectionModeChanged(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnKeyUp(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('FindDayButtonFromDay(', 'DateTime day)', 'CalendarDayButton'),
  \ dotnet#method('IsValidDateSelection(', 'class Calendar cal, object value)', 'static bool'),
  \ dotnet#method('OnDayButtonMouseUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnDayOrMonthPreviewKeyDown(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnDayClick(', 'DateTime selectedDate)', 'void'),
  \ dotnet#method('OnCalendarButtonPressed(', 'class CalendarButton b, bool switchDisplayMode)', 'void'),
  \ dotnet#method('OnNextClick(', ')', 'void'),
  \ dotnet#method('OnPreviousClick(', ')', 'void'),
  \ dotnet#method('OnSelectedDatesCollectionChanged(', 'class SelectionChangedEventArgs e)', 'void'),
  \ dotnet#method('UpdateCellItems(', ')', 'void'),
  \ dotnet#method('IsValidFirstDayOfWeek(', 'object value)', 'static bool'),
  \ dotnet#method('FocusDate(', 'DateTime date)', 'void'),
  \ dotnet#method('Calendar(', ')', 'static void .'),
  \ dotnet#method('set_DisplayDateInternal(', 'DateTime value)', 'void'),
  \ dotnet#event('SelectedDatesChanged', 'EventHandler'),
  \ dotnet#event('DisplayDateChanged', 'EventHandler'),
  \ dotnet#event('DisplayModeChanged', 'EventHandler'),
  \ dotnet#event('SelectionModeChanged', 'EventHandler'),
  \ dotnet#event('DayButtonMouseUp', 'MouseButtonEventHandler'),
  \ dotnet#event('DayOrMonthPreviewKeyDown', 'RoutedEventHandler'),
  \ dotnet#prop('BlackoutDates', 'CalendarBlackoutDatesCollection'),
  \ dotnet#prop('CalendarButtonStyle', 'Style'),
  \ dotnet#prop('CalendarDayButtonStyle', 'Style'),
  \ dotnet#prop('CalendarItemStyle', 'Style'),
  \ dotnet#prop('DisplayDate', 'DateTime'),
  \ dotnet#prop('DisplayDateEnd', 'Nullable'),
  \ dotnet#prop('DisplayDateStart', 'Nullable'),
  \ dotnet#prop('DisplayMode', 'CalendarMode'),
  \ dotnet#prop('FirstDayOfWeek', 'DayOfWeek'),
  \ dotnet#prop('IsTodayHighlighted', 'bool'),
  \ dotnet#prop('SelectedDate', 'Nullable'),
  \ dotnet#prop('SelectedDates', 'SelectedDatesCollection'),
  \ dotnet#prop('SelectionMode', 'CalendarSelectionMode'),
  \ dotnet#prop('DatePickerDisplayDateFlag', 'bool'),
  \ dotnet#prop('DisplayDateInternal', 'DateTime'),
  \ dotnet#prop('DisplayDateEndInternal', 'DateTime'),
  \ dotnet#prop('DisplayDateStartInternal', 'DateTime'),
  \ dotnet#prop('CurrentDate', 'DateTime'),
  \ dotnet#prop('HoverStart', 'Nullable'),
  \ dotnet#prop('HoverEnd', 'Nullable'),
  \ dotnet#prop('MonthControl', 'CalendarItem'),
  \ dotnet#prop('DisplayMonth', 'DateTime'),
  \ dotnet#prop('DisplayYear', 'DateTime'),
  \ ])

call dotnet#class('CalendarBlackoutDatesCollection', 'ObservableCollection', [ 
  \ dotnet#method('CalendarBlackoutDatesCollection(', 'class Calendar owner)', 'void'),
  \ dotnet#method('AddDatesInPast(', ')', 'void'),
  \ dotnet#method('Contains(', 'DateTime date)', 'bool'),
  \ dotnet#method('Contains(', 'DateTime start, DateTime end)', 'bool'),
  \ dotnet#method('ContainsAny(', 'class CalendarDateRange range)', 'bool'),
  \ dotnet#method('GetNonBlackoutDate(', 'Nullable requestedDate, int32 dayInterval)', 'Nullable'),
  \ dotnet#method('ClearItems(', ')', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, CalendarDateRange item)', 'void'),
  \ dotnet#method('RemoveItem(', 'int32 index)', 'void'),
  \ dotnet#method('SetItem(', 'int32 index, CalendarDateRange item)', 'void'),
  \ ])

call dotnet#class('CalendarDateChangedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('CalendarDateChangedEventArgs(', 'Nullable removedDate, Nullable addedDate)', 'void'),
  \ dotnet#method('get_AddedDate(', ')', 'Nullable'),
  \ dotnet#method('get_RemovedDate(', ')', 'Nullable'),
  \ dotnet#method('set_AddedDate(', 'Nullable value)', 'void'),
  \ dotnet#method('set_RemovedDate(', 'Nullable value)', 'void'),
  \ dotnet#prop('AddedDate', 'Nullable'),
  \ dotnet#prop('RemovedDate', 'Nullable'),
  \ ])

call dotnet#class('CalendarDateRange', 'Object', [ 
  \ dotnet#method('CalendarDateRange(', ')', 'void'),
  \ dotnet#method('CalendarDateRange(', 'DateTime day)', 'void'),
  \ dotnet#method('CalendarDateRange(', 'DateTime start, DateTime end)', 'void'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('get_End(', ')', 'DateTime'),
  \ dotnet#method('set_End(', 'DateTime value)', 'void'),
  \ dotnet#method('get_Start(', ')', 'DateTime'),
  \ dotnet#method('set_Start(', 'DateTime value)', 'void'),
  \ dotnet#method('add_Changing(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_Changing(', 'class EventHandler value)', 'void'),
  \ dotnet#method('ContainsAny(', 'class CalendarDateRange range)', 'bool'),
  \ dotnet#event('PropertyChanged', 'PropertyChangedEventHandler'),
  \ dotnet#event('Changing', 'EventHandler'),
  \ dotnet#prop('End', 'DateTime'),
  \ dotnet#prop('Start', 'DateTime'),
  \ ])

call dotnet#class('CalendarModeChangedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('CalendarModeChangedEventArgs(', 'CalendarMode oldMode, CalendarMode newMode)', 'void'),
  \ dotnet#method('get_NewMode(', ')', 'CalendarMode'),
  \ dotnet#method('get_OldMode(', ')', 'CalendarMode'),
  \ dotnet#method('set_NewMode(', 'CalendarMode value)', 'void'),
  \ dotnet#method('set_OldMode(', 'CalendarMode value)', 'void'),
  \ dotnet#prop('NewMode', 'CalendarMode'),
  \ dotnet#prop('OldMode', 'CalendarMode'),
  \ ])

call dotnet#class('SelectionChangedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('SelectionChangedEventArgs(', 'class RoutedEvent id, IList removedItems, IList addedItems)', 'void'),
  \ dotnet#method('SelectionChangedEventArgs(', 'class IList removedItems, IList addedItems)', 'void'),
  \ dotnet#method('get_RemovedItems(', ')', 'IList'),
  \ dotnet#method('get_AddedItems(', ')', 'IList'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('RemovedItems', 'IList'),
  \ dotnet#prop('AddedItems', 'IList'),
  \ ])

call dotnet#class('CheckBox', 'ToggleButton', [ 
  \ dotnet#method('CheckBox(', ')', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('CheckBox(', ')', 'static void .'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('CleanUpVirtualizedItemEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('CleanUpVirtualizedItemEventArgs(', 'object value, UIElement element)', 'void'),
  \ dotnet#method('get_Value(', ')', 'object'),
  \ dotnet#method('get_UIElement(', ')', 'UIElement'),
  \ dotnet#method('get_Cancel(', ')', 'bool'),
  \ dotnet#method('set_Cancel(', 'bool value)', 'void'),
  \ dotnet#prop('Value', 'object'),
  \ dotnet#prop('UIElement', 'UIElement'),
  \ dotnet#prop('Cancel', 'bool'),
  \ ])

call dotnet#class('CleanUpVirtualizedItemEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('CleanUpVirtualizedItemEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, CleanUpVirtualizedItemEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, CleanUpVirtualizedItemEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ComboBox', 'SelComboBox', [ 
  \ dotnet#method('ComboBox(', ')', 'void'),
  \ dotnet#method('get_MaxDropDownHeight(', ')', 'float64'),
  \ dotnet#method('set_MaxDropDownHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_IsDropDownOpen(', ')', 'bool'),
  \ dotnet#method('set_IsDropDownOpen(', 'bool value)', 'void'),
  \ dotnet#method('OnDropDownOpened(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnDropDownClosed(', 'class EventArgs e)', 'void'),
  \ dotnet#method('get_IsEditable(', ')', 'bool'),
  \ dotnet#method('set_IsEditable(', 'bool value)', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('set_IsReadOnly(', 'bool value)', 'void'),
  \ dotnet#method('get_SelectionBoxItem(', ')', 'object'),
  \ dotnet#method('get_SelectionBoxItemTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('get_SelectionBoxItemStringFormat(', ')', 'string'),
  \ dotnet#method('get_StaysOpenOnEdit(', ')', 'bool'),
  \ dotnet#method('set_StaysOpenOnEdit(', 'bool value)', 'void'),
  \ dotnet#method('get_IsSelectionBoxHighlighted(', ')', 'bool'),
  \ dotnet#method('add_DropDownOpened(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DropDownOpened(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_DropDownClosed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DropDownClosed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnSelectionChanged(', 'class SelectionChangedEventArgs e)', 'void'),
  \ dotnet#method('SelectedItemUpdated(', ')', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('get_HandlesScrolling(', ')', 'famorassem bool'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('FocusItem(', 'object item, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'strict void'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('OnIsMouseCapturedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('NotifyComboBoxItemMouseDown(', 'class ComboBoxItem comboBoxItem)', 'void'),
  \ dotnet#method('NotifyComboBoxItemMouseUp(', 'class ComboBoxItem comboBoxItem)', 'void'),
  \ dotnet#method('NotifyComboBoxItemEnter(', 'class ComboBoxItem item)', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('OnPreviewKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('OnTemplateChangedInternal(', 'class FrameworkTemplate oldTemplate, FrameworkTemplate newTemplate)', 'strict void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_EditableTextBoxSite(', ')', '.method'),
  \ dotnet#method('set_EditableTextBoxSite(', 'class TextBox value)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ComboBox(', ')', 'static void .'),
  \ dotnet#method('set_SelectionBoxItem(', 'object value)', 'void'),
  \ dotnet#method('set_SelectionBoxItemTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('set_SelectionBoxItemStringFormat(', 'string value)', 'void'),
  \ dotnet#event('DropDownOpened', 'EventHandler'),
  \ dotnet#event('DropDownClosed', 'EventHandler'),
  \ dotnet#prop('MaxDropDownHeight', 'float64'),
  \ dotnet#prop('IsDropDownOpen', 'bool'),
  \ dotnet#prop('IsEditable', 'bool'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('SelectionBoxItem', 'object'),
  \ dotnet#prop('SelectionBoxItemTemplate', 'DataTemplate'),
  \ dotnet#prop('SelectionBoxItemStringFormat', 'string'),
  \ dotnet#prop('StaysOpenOnEdit', 'bool'),
  \ dotnet#prop('IsSelectionBoxHighlighted', 'bool'),
  \ dotnet#prop('HandlesScrolling', 'bool'),
  \ dotnet#prop('EditableTextBoxSite', 'TextBox'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ListBoxItem', 'ContentControl', [ 
  \ dotnet#method('ListBoxItem(', ')', 'void'),
  \ dotnet#method('get_IsSelected(', ')', 'bool'),
  \ dotnet#method('set_IsSelected(', 'bool value)', 'void'),
  \ dotnet#method('OnSelected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnUnselected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_Selected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Selected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_Unselected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Unselected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseRightButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseEnter(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeave(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('get_ParentSelListBoxItem(', ')', '.method'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ListBoxItem(', ')', 'static void .'),
  \ dotnet#event('Selected', 'RoutedEventHandler'),
  \ dotnet#event('Unselected', 'RoutedEventHandler'),
  \ dotnet#prop('IsSelected', 'bool'),
  \ dotnet#prop('ParentSelListBoxItem', 'SelListBoxItem'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ComboBoxItem', 'ListBoxItem', [ 
  \ dotnet#method('ComboBoxItem(', ')', 'void'),
  \ dotnet#method('get_IsHighlighted(', ')', 'bool'),
  \ dotnet#method('set_IsHighlighted(', 'bool value)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseEnter(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnContentChanged(', 'object oldContent, object newContent)', 'void'),
  \ dotnet#method('OnGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('SetIsHighlighted(', 'bool isHighlighted)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ComboBoxItem(', ')', 'static void .'),
  \ dotnet#prop('IsHighlighted', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ContentPresenter', 'FrameworkElement', [ 
  \ dotnet#method('ContentPresenter(', ')', 'void'),
  \ dotnet#method('get_RecognizesAccessKey(', ')', 'bool'),
  \ dotnet#method('set_RecognizesAccessKey(', 'bool value)', 'void'),
  \ dotnet#method('get_Content(', ')', 'object'),
  \ dotnet#method('set_Content(', 'object value)', 'void'),
  \ dotnet#method('get_ContentTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_ContentTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('OnContentTemplateChanged(', 'class DataTemplate oldContentTemplate, DataTemplate newContentTemplate)', 'void'),
  \ dotnet#method('get_ContentTemplateSelContentPresenter(', ')', 'DataTemplateSelContentPresenter'),
  \ dotnet#method('set_ContentTemplateSelContentPresenter(', 'class DataTemplateSelContentPresenter value)', 'void'),
  \ dotnet#method('ShouldSerializeContentTemplateSelContentPresenter(', ')', 'bool'),
  \ dotnet#method('OnContentTemplateSelContentPresenterChanged(', 'class DataTemplateSelContentPresenter oldContentTemplateSelContentPresenter, DataTemplateSelContentPresenter newContentTemplateSelContentPresenter)', 'void'),
  \ dotnet#method('get_ContentStringFormat(', ')', 'string'),
  \ dotnet#method('set_ContentStringFormat(', 'string value)', 'void'),
  \ dotnet#method('OnContentStringFormatChanged(', 'string oldContentStringFormat, string newContentStringFormat)', 'void'),
  \ dotnet#method('get_ContentSource(', ')', 'string'),
  \ dotnet#method('set_ContentSource(', 'string value)', 'void'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('ChooseTemplate(', ')', 'family'),
  \ dotnet#method('get_AccessTextContentTemplate(', ')', 'static'),
  \ dotnet#method('get_StringContentTemplate(', ')', 'static'),
  \ dotnet#method('get_TemplateInternal(', ')', 'strict'),
  \ dotnet#method('get_TemplateCache(', ')', 'strict'),
  \ dotnet#method('set_TemplateCache(', 'class FrameworkTemplate value)', 'strict void'),
  \ dotnet#method('get_TemplateIsCurrent(', ')', 'bool'),
  \ dotnet#method('PrepareContentPresenter(', 'object item, DataTemplate itemTemplate, DataTemplateSelContentPresenter itemTemplateSelContentPresenter, string stringFormat)', 'void'),
  \ dotnet#method('ClearContentPresenter(', 'object item)', 'void'),
  \ dotnet#method('DataTypeForItem(', 'object item, DependencyObject target, [out] Type& type)', 'static object'),
  \ dotnet#method('OnTemplateChangedInternal(', 'class FrameworkTemplate oldTemplate, FrameworkTemplate newTemplate)', 'strict void'),
  \ dotnet#method('OnTemplateChanged(', 'class DataTemplate oldTemplate, DataTemplate newTemplate)', 'void'),
  \ dotnet#method('CreateAccessTextFContentPresentery(', ')', 'static FrameworkElementFContentPresentery'),
  \ dotnet#method('CreateTextBlockFContentPresentery(', ')', 'static FrameworkElementFContentPresentery'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('ContentPresenter(', ')', 'static void .'),
  \ dotnet#prop('RecognizesAccessKey', 'bool'),
  \ dotnet#prop('Content', 'object'),
  \ dotnet#prop('ContentTemplate', 'DataTemplate'),
  \ dotnet#prop('ContentTemplateSelContentPresenter', 'DataTemplateSelContentPresenter'),
  \ dotnet#prop('ContentStringFormat', 'string'),
  \ dotnet#prop('ContentSource', 'string'),
  \ dotnet#prop('AccessTextContentTemplate', 'DataTemplate'),
  \ dotnet#prop('StringContentTemplate', 'DataTemplate'),
  \ dotnet#prop('TemplateInternal', 'FrameworkTemplate'),
  \ dotnet#prop('TemplateCache', 'FrameworkTemplate'),
  \ dotnet#prop('TemplateIsCurrent', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('ContextMenuService', 'Object', [ 
  \ dotnet#method('GetContextMenu(', 'class DependencyObject element)', 'static ContextMenu'),
  \ dotnet#method('SetContextMenu(', 'class DependencyObject element, ContextMenu value)', 'static void'),
  \ dotnet#method('GetHorizontalOffset(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('SetHorizontalOffset(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetVerticalOffset(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('SetVerticalOffset(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetHasDropShadow(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetHasDropShadow(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetPlacementTarget(', 'class DependencyObject element)', 'static UIElement'),
  \ dotnet#method('SetPlacementTarget(', 'class DependencyObject element, UIElement value)', 'static void'),
  \ dotnet#method('GetPlacementRectangle(', 'class DependencyObject element)', 'static Rect'),
  \ dotnet#method('SetPlacementRectangle(', 'class DependencyObject element, Rect value)', 'static void'),
  \ dotnet#method('GetPlacement(', 'class DependencyObject element)', 'static PlacementMode'),
  \ dotnet#method('SetPlacement(', 'class DependencyObject element, PlacementMode value)', 'static void'),
  \ dotnet#method('GetShowOnDisabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetShowOnDisabled(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetIsEnabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetIsEnabled(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('ContextMenuIsEnabled(', 'class DependencyObject o)', 'static bool'),
  \ dotnet#method('ContextMenuService(', ')', 'static void .'),
  \ ])

call dotnet#class('ContextMenuEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ContextMenuEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ContextMenuEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ContextMenuEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('ContextMenuEventArgs(', 'object source, bool opening)', 'void'),
  \ dotnet#method('ContextMenuEventArgs(', 'object source, bool opening, float64 left, float64 top)', 'void'),
  \ dotnet#method('get_CursorLeft(', ')', 'float64'),
  \ dotnet#method('get_CursorTop(', ')', 'float64'),
  \ dotnet#method('get_TargetElement(', ')', '.method'),
  \ dotnet#method('set_TargetElement(', 'class DependencyObject value)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('CursorLeft', 'float64'),
  \ dotnet#prop('CursorTop', 'float64'),
  \ dotnet#prop('TargetElement', 'DependencyObject'),
  \ ])

call dotnet#class('ValidationRule', 'Object', [ 
  \ dotnet#method('ValidationRule(', ')', 'void'),
  \ dotnet#method('ValidationRule(', 'ValidationStep validationStep, bool validatesOnTargetUpdated)', 'void'),
  \ dotnet#method('Validate(', 'object value, CultureInfo cultureInfo)', 'abstract'),
  \ dotnet#method('get_ValidationStep(', ')', 'ValidationStep'),
  \ dotnet#method('set_ValidationStep(', 'ValidationStep value)', 'void'),
  \ dotnet#method('get_ValidatesOnTargetUpdated(', ')', 'bool'),
  \ dotnet#method('set_ValidatesOnTargetUpdated(', 'bool value)', 'void'),
  \ dotnet#prop('ValidationStep', 'ValidationStep'),
  \ dotnet#prop('ValidatesOnTargetUpdated', 'bool'),
  \ ])

call dotnet#class('DataErrorValidationRule', 'ValidationRule', [ 
  \ dotnet#method('DataErrorValidationRule(', ')', 'void'),
  \ dotnet#method('Validate(', 'object value, CultureInfo cultureInfo)', 'ValidationResult'),
  \ dotnet#method('DataErrorValidationRule(', ')', 'static void .'),
  \ ])

call dotnet#class('DataGrid', 'MultiSelDataGrid', [ 
  \ dotnet#method('DataGrid(', 'class DataGridCell cell)', 'void'),
  \ dotnet#method('DataGrid(', 'object item, DataGridColumn column)', 'void'),
  \ dotnet#method('get_Value(', ')', 'string'),
  \ dotnet#method('TrackValue(', ')', 'void'),
  \ dotnet#method('GetClipboardValue(', ')', 'object'),
  \ dotnet#method('SetValue(', 'class DataGrid dataGrid, object value, bool clipboard)', 'void'),
  \ dotnet#method('DataGrid(', ')', 'static void .'),
  \ dotnet#prop('Value', 'string'),
  \ dotnet#method('DataGrid(', ')', 'void'),
  \ dotnet#method('get_Columns(', ')', 'ObservableCollection'),
  \ dotnet#method('get_InternalColumns(', ')', '.method'),
  \ dotnet#method('get_CanUserResizeColumns(', ')', 'bool'),
  \ dotnet#method('set_CanUserResizeColumns(', 'bool value)', 'void'),
  \ dotnet#method('get_ColumnWidth(', ')', 'DataGridLength'),
  \ dotnet#method('set_ColumnWidth(', 'DataGridLength value)', 'void'),
  \ dotnet#method('get_MinColumnWidth(', ')', 'float64'),
  \ dotnet#method('set_MinColumnWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxColumnWidth(', ')', 'float64'),
  \ dotnet#method('set_MaxColumnWidth(', 'float64 value)', 'void'),
  \ dotnet#method('UpdateDataGridReference(', 'class IList list, bool clear)', 'void'),
  \ dotnet#method('ColumnFromDisplayIndex(', 'int32 displayIndex)', 'DataGridColumn'),
  \ dotnet#method('add_ColumnDisplayIndexChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ColumnDisplayIndexChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnColumnDisplayIndexChanged(', 'class DataGridColumnEventArgs e)', 'famorassem void'),
  \ dotnet#method('get_DisplayIndexMap(', ')', '.method'),
  \ dotnet#method('ValidateDisplayIndex(', 'class DataGridColumn column, int32 displayIndex)', 'void'),
  \ dotnet#method('ColumnIndexFromDisplayIndex(', 'int32 displayIndex)', 'int32'),
  \ dotnet#method('ColumnHeaderFromDisplayIndex(', 'int32 displayIndex)', 'DataGridColumnHeader'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, string propertyName, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('UpdateColumnsOnVirtualizedCellInfoCollections(', 'NotifyCollectionChangedAction action, int32 oldDisplayIndex, DataGridColumn oldColumn, int32 newDisplayIndex)', 'void'),
  \ dotnet#method('get_ColumnHeadersPresenter(', ')', '.method'),
  \ dotnet#method('set_ColumnHeadersPresenter(', 'class DataGridColumnHeadersPresenter value)', 'void'),
  \ dotnet#method('OnTemplateChanged(', 'class ControlTemplate oldTemplate, ControlTemplate newTemplate)', 'void'),
  \ dotnet#method('get_GridLinesVisibility(', ')', 'DataGridGridLinesVisibility'),
  \ dotnet#method('set_GridLinesVisibility(', 'DataGridGridLinesVisibility value)', 'void'),
  \ dotnet#method('get_HorizontalGridLinesBrush(', ')', 'Brush'),
  \ dotnet#method('set_HorizontalGridLinesBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_VerticalGridLinesBrush(', ')', 'Brush'),
  \ dotnet#method('set_VerticalGridLinesBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_HorizontalGridLineThickness(', ')', 'float64'),
  \ dotnet#method('get_VerticalGridLineThickness(', ')', 'float64'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('ClearContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('get_RowStyle(', ')', 'Style'),
  \ dotnet#method('set_RowStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_RowValidationErrorTemplate(', ')', 'ControlTemplate'),
  \ dotnet#method('set_RowValidationErrorTemplate(', 'class ControlTemplate value)', 'void'),
  \ dotnet#method('get_RowValidationRules(', ')', 'ObservableCollection'),
  \ dotnet#method('get_RowStyleSelDataGrid(', ')', 'StyleSelDataGrid'),
  \ dotnet#method('set_RowStyleSelDataGrid(', 'class StyleSelDataGrid value)', 'void'),
  \ dotnet#method('get_RowBackground(', ')', 'Brush'),
  \ dotnet#method('set_RowBackground(', 'class Brush value)', 'void'),
  \ dotnet#method('get_AlternatingRowBackground(', ')', 'Brush'),
  \ dotnet#method('set_AlternatingRowBackground(', 'class Brush value)', 'void'),
  \ dotnet#method('get_RowHeight(', ')', 'float64'),
  \ dotnet#method('set_RowHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinRowHeight(', ')', 'float64'),
  \ dotnet#method('set_MinRowHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_PlaceholderVisibility(', ')', '.method'),
  \ dotnet#method('add_LoadingRow(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_LoadingRow(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_UnloadingRow(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_UnloadingRow(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnLoadingRow(', 'class DataGridRowEventArgs e)', 'void'),
  \ dotnet#method('DelayedOnLoadingRowDetails(', 'object arg)', 'static object'),
  \ dotnet#method('OnUnloadingRow(', 'class DataGridRowEventArgs e)', 'void'),
  \ dotnet#method('get_RowHeaderWidth(', ')', 'float64'),
  \ dotnet#method('set_RowHeaderWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_RowHeaderActualWidth(', ')', 'float64'),
  \ dotnet#method('set_RowHeaderActualWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_ColumnHeaderHeight(', ')', 'float64'),
  \ dotnet#method('set_ColumnHeaderHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_HeadersVisibility(', ')', 'DataGridHeadersVisibility'),
  \ dotnet#method('set_HeadersVisibility(', 'DataGridHeadersVisibility value)', 'void'),
  \ dotnet#method('SetDetailsVisibilityForItem(', 'object item, Visibility detailsVisibility)', 'void'),
  \ dotnet#method('GetDetailsVisibilityForItem(', 'object item)', 'Visibility'),
  \ dotnet#method('ClearDetailsVisibilityForItem(', 'object item)', 'void'),
  \ dotnet#method('get_ItemAttachedStorage(', ')', '.method'),
  \ dotnet#method('get_CellStyle(', ')', 'Style'),
  \ dotnet#method('set_CellStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_ColumnHeaderStyle(', ')', 'Style'),
  \ dotnet#method('set_ColumnHeaderStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_RowHeaderStyle(', ')', 'Style'),
  \ dotnet#method('set_RowHeaderStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_RowHeaderTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_RowHeaderTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_RowHeaderTemplateSelDataGrid(', ')', 'DataTemplateSelDataGrid'),
  \ dotnet#method('set_RowHeaderTemplateSelDataGrid(', 'class DataTemplateSelDataGrid value)', 'void'),
  \ dotnet#method('get_FocusBorderBrushKey(', ')', 'static'),
  \ dotnet#method('get_HeadersVisibilityConverter(', ')', 'static'),
  \ dotnet#method('get_RowDetailsScrollingConverter(', ')', 'static'),
  \ dotnet#method('get_HorizontalScrollBarVisibility(', ')', 'ScrollBarVisibility'),
  \ dotnet#method('set_HorizontalScrollBarVisibility(', 'ScrollBarVisibility value)', 'void'),
  \ dotnet#method('get_VerticalScrollBarVisibility(', ')', 'ScrollBarVisibility'),
  \ dotnet#method('set_VerticalScrollBarVisibility(', 'ScrollBarVisibility value)', 'void'),
  \ dotnet#method('ScrollIntoView(', 'object item)', 'void'),
  \ dotnet#method('ScrollIntoView(', 'object item, DataGridColumn column)', 'void'),
  \ dotnet#method('OnIsMouseCapturedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('get_HandlesScrolling(', ')', 'famorassem bool'),
  \ dotnet#method('get_InternalItemsHost(', ')', '.method'),
  \ dotnet#method('set_InternalItemsHost(', 'class Panel value)', 'void'),
  \ dotnet#method('get_InternalScrollHost(', ')', '.method'),
  \ dotnet#method('get_InternalScrollContentPresenter(', ')', '.method'),
  \ dotnet#method('OnViewportSizeChanged(', 'Size oldSize, Size newSize)', 'void'),
  \ dotnet#method('get_HorizontalScrollOffset(', ')', 'float64'),
  \ dotnet#method('get_DeleteCommand(', ')', 'static'),
  \ dotnet#method('OnCanExecuteBeginEdit(', 'class CanExecuteRoutedEventArgs e)', 'void'),
  \ dotnet#method('OnExecutedBeginEdit(', 'class ExecutedRoutedEventArgs e)', 'void'),
  \ dotnet#method('OnCanExecuteCommitEdit(', 'class CanExecuteRoutedEventArgs e)', 'void'),
  \ dotnet#method('OnExecutedCommitEdit(', 'class ExecutedRoutedEventArgs e)', 'void'),
  \ dotnet#method('add_RowEditEnding(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_RowEditEnding(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnRowEditEnding(', 'class DataGridRowEditEndingEventArgs e)', 'void'),
  \ dotnet#method('add_CellEditEnding(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CellEditEnding(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnCellEditEnding(', 'class DataGridCellEditEndingEventArgs e)', 'void'),
  \ dotnet#method('OnCanExecuteCancelEdit(', 'class CanExecuteRoutedEventArgs e)', 'void'),
  \ dotnet#method('OnExecutedCancelEdit(', 'class ExecutedRoutedEventArgs e)', 'void'),
  \ dotnet#method('OnCanExecuteDelete(', 'class CanExecuteRoutedEventArgs e)', 'void'),
  \ dotnet#method('OnExecutedDelete(', 'class ExecutedRoutedEventArgs e)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('set_IsReadOnly(', 'bool value)', 'void'),
  \ dotnet#method('get_CurrentItem(', ')', 'object'),
  \ dotnet#method('set_CurrentItem(', 'object value)', 'void'),
  \ dotnet#method('get_CurrentColumn(', ')', 'DataGridColumn'),
  \ dotnet#method('set_CurrentColumn(', 'class DataGridColumn value)', 'void'),
  \ dotnet#method('get_CurrentCell(', ')', 'DataGridCellInfo'),
  \ dotnet#method('set_CurrentCell(', 'DataGridCellInfo value)', 'void'),
  \ dotnet#method('add_CurrentCellChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CurrentCellChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnCurrentCellChanged(', 'class EventArgs e)', 'void'),
  \ dotnet#method('add_BeginningEdit(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_BeginningEdit(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnBeginningEdit(', 'class DataGridBeginningEditEventArgs e)', 'void'),
  \ dotnet#method('add_PreparingCellForEdit(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PreparingCellForEdit(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPreparingCellForEdit(', 'class DataGridPreparingCellForEditEventArgs e)', 'famorassem void'),
  \ dotnet#method('BeginEdit(', ')', 'bool'),
  \ dotnet#method('BeginEdit(', 'class RoutedEventArgs editingEventArgs)', 'bool'),
  \ dotnet#method('CancelEdit(', ')', 'bool'),
  \ dotnet#method('CancelEdit(', 'class DataGridCell cell)', 'bool'),
  \ dotnet#method('CancelEdit(', 'DataGridEditingUnit editingUnit)', 'bool'),
  \ dotnet#method('CommitEdit(', ')', 'bool'),
  \ dotnet#method('CommitEdit(', 'DataGridEditingUnit editingUnit, bool exitEditingMode)', 'bool'),
  \ dotnet#method('get_FocusedCell(', ')', '.method'),
  \ dotnet#method('set_FocusedCell(', 'class DataGridCell value)', 'void'),
  \ dotnet#method('get_CanUserAddRows(', ')', 'bool'),
  \ dotnet#method('set_CanUserAddRows(', 'bool value)', 'void'),
  \ dotnet#method('get_CanUserDeleteRows(', ')', 'bool'),
  \ dotnet#method('set_CanUserDeleteRows(', 'bool value)', 'void'),
  \ dotnet#method('add_InitializingNewItem(', 'class InitializingNewItemEventHandler value)', 'void'),
  \ dotnet#method('remove_InitializingNewItem(', 'class InitializingNewItemEventHandler value)', 'void'),
  \ dotnet#method('OnInitializingNewItem(', 'class InitializingNewItemEventArgs e)', 'void'),
  \ dotnet#method('get_RowDetailsVisibilityMode(', ')', 'DataGridRowDetailsVisibilityMode'),
  \ dotnet#method('set_RowDetailsVisibilityMode(', 'DataGridRowDetailsVisibilityMode value)', 'void'),
  \ dotnet#method('get_AreRowDetailsFrozen(', ')', 'bool'),
  \ dotnet#method('set_AreRowDetailsFrozen(', 'bool value)', 'void'),
  \ dotnet#method('get_RowDetailsTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_RowDetailsTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_RowDetailsTemplateSelDataGrid(', ')', 'DataTemplateSelDataGrid'),
  \ dotnet#method('set_RowDetailsTemplateSelDataGrid(', 'class DataTemplateSelDataGrid value)', 'void'),
  \ dotnet#method('add_LoadingRowDetails(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_LoadingRowDetails(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_UnloadingRowDetails(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_UnloadingRowDetails(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_RowDetailsVisibilityChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_RowDetailsVisibilityChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnLoadingRowDetailsWrapper(', 'class DataGridRow row)', 'void'),
  \ dotnet#method('OnUnloadingRowDetailsWrapper(', 'class DataGridRow row)', 'void'),
  \ dotnet#method('OnLoadingRowDetails(', 'class DataGridRowDetailsEventArgs e)', 'void'),
  \ dotnet#method('OnUnloadingRowDetails(', 'class DataGridRowDetailsEventArgs e)', 'void'),
  \ dotnet#method('OnRowDetailsVisibilityChanged(', 'class DataGridRowDetailsEventArgs e)', 'famorassem void'),
  \ dotnet#method('get_CanUserResizeRows(', ')', 'bool'),
  \ dotnet#method('set_CanUserResizeRows(', 'bool value)', 'void'),
  \ dotnet#method('get_SelectedCells(', ')', 'IList'),
  \ dotnet#method('get_SelectedCellsInternal(', ')', '.method'),
  \ dotnet#method('add_SelectedCellsChanged(', 'class SelectedCellsChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_SelectedCellsChanged(', 'class SelectedCellsChangedEventHandler value)', 'void'),
  \ dotnet#method('OnSelectedCellsChanged(', 'NotifyCollectionChangedAction action, VirtualizedCellInfoCollection oldItems, VirtualizedCellInfoCollection newItems)', 'void'),
  \ dotnet#method('OnSelectedCellsChanged(', 'class SelectedCellsChangedEventArgs e)', 'void'),
  \ dotnet#method('get_SelectAllCommand(', ')', 'static'),
  \ dotnet#method('SelectAllImpl(', ')', 'strict void'),
  \ dotnet#method('SelectOnlyThisCell(', 'DataGridCellInfo currentCellInfo)', 'void'),
  \ dotnet#method('SelectAllCells(', ')', 'void'),
  \ dotnet#method('UnselectAllCells(', ')', 'void'),
  \ dotnet#method('get_SelectionMode(', ')', 'DataGridSelectionMode'),
  \ dotnet#method('set_SelectionMode(', 'DataGridSelectionMode value)', 'void'),
  \ dotnet#method('get_SelectionUnit(', ')', 'DataGridSelectionUnit'),
  \ dotnet#method('set_SelectionUnit(', 'DataGridSelectionUnit value)', 'void'),
  \ dotnet#method('OnSelectionChanged(', 'class SelectionChangedEventArgs e)', 'void'),
  \ dotnet#method('CellIsSelectedChanged(', 'class DataGridCell cell, bool isSelected)', 'void'),
  \ dotnet#method('HandleSelectionForCellInput(', 'class DataGridCell cell, bool startDragging, bool allowsExtendSelect, bool allowsMinimalSelect)', 'void'),
  \ dotnet#method('HandleSelectionForRowHeaderAndDetailsInput(', 'class DataGridRow row, bool startDragging)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnContextMenuOpening(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('GetCellAutomationValue(', 'object item, DataGridColumn column)', 'string'),
  \ dotnet#method('GetCellClipboardValue(', 'object item, DataGridColumn column)', 'object'),
  \ dotnet#method('SetCellAutomationValue(', 'object item, DataGridColumn column, string value)', 'void'),
  \ dotnet#method('SetCellClipboardValue(', 'object item, DataGridColumn column, object value)', 'void'),
  \ dotnet#method('TryFindCell(', 'object item, DataGridColumn column)', 'DataGridCell'),
  \ dotnet#method('get_CanUserSortColumns(', ')', 'bool'),
  \ dotnet#method('set_CanUserSortColumns(', 'bool value)', 'void'),
  \ dotnet#method('add_Sorting(', 'class DataGridSortingEventHandler value)', 'void'),
  \ dotnet#method('remove_Sorting(', 'class DataGridSortingEventHandler value)', 'void'),
  \ dotnet#method('OnSorting(', 'class DataGridSortingEventArgs eventArgs)', 'void'),
  \ dotnet#method('PerformSort(', 'class DataGridColumn sortColumn)', 'void'),
  \ dotnet#method('add_AutoGeneratedColumns(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_AutoGeneratedColumns(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_AutoGeneratingColumn(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_AutoGeneratingColumn(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_AutoGenerateColumns(', ')', 'bool'),
  \ dotnet#method('set_AutoGenerateColumns(', 'bool value)', 'void'),
  \ dotnet#method('OnAutoGeneratedColumns(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnAutoGeneratingColumn(', 'class DataGridAutoGeneratingColumnEventArgs e)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('OnItemsSourceChanged(', 'class IEnumerable oldValue, IEnumerable newValue)', 'void'),
  \ dotnet#method('OnItemsChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('GenerateColumns(', 'class IItemProperties itemProperties)', 'static Collection'),
  \ dotnet#method('get_FrozenColumnCount(', ')', 'int32'),
  \ dotnet#method('set_FrozenColumnCount(', 'int32 value)', 'void'),
  \ dotnet#method('get_NonFrozenColumnsViewportHorizontalOffset(', ')', 'float64'),
  \ dotnet#method('set_NonFrozenColumnsViewportHorizontalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('get_EnableRowVirtualization(', ')', 'bool'),
  \ dotnet#method('set_EnableRowVirtualization(', 'bool value)', 'void'),
  \ dotnet#method('get_EnableColumnVirtualization(', ')', 'bool'),
  \ dotnet#method('set_EnableColumnVirtualization(', 'bool value)', 'void'),
  \ dotnet#method('get_CanUserReorderColumns(', ')', 'bool'),
  \ dotnet#method('set_CanUserReorderColumns(', 'bool value)', 'void'),
  \ dotnet#method('get_DragIndicatorStyle(', ')', 'Style'),
  \ dotnet#method('set_DragIndicatorStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_DropLocationIndicatorStyle(', ')', 'Style'),
  \ dotnet#method('set_DropLocationIndicatorStyle(', 'class Style value)', 'void'),
  \ dotnet#method('add_ColumnReordering(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ColumnReordering(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_ColumnHeaderDragStarted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ColumnHeaderDragStarted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_ColumnHeaderDragDelta(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ColumnHeaderDragDelta(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_ColumnHeaderDragCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ColumnHeaderDragCompleted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_ColumnReordered(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ColumnReordered(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnColumnHeaderDragStarted(', 'class DragStartedEventArgs e)', 'famorassem void'),
  \ dotnet#method('OnColumnReordering(', 'class DataGridColumnReorderingEventArgs e)', 'famorassem void'),
  \ dotnet#method('OnColumnHeaderDragDelta(', 'class DragDeltaEventArgs e)', 'famorassem void'),
  \ dotnet#method('OnColumnHeaderDragCompleted(', 'class DragCompletedEventArgs e)', 'famorassem void'),
  \ dotnet#method('OnColumnReordered(', 'class DataGridColumnEventArgs e)', 'famorassem void'),
  \ dotnet#method('get_ClipboardCopyMode(', ')', 'DataGridClipboardCopyMode'),
  \ dotnet#method('set_ClipboardCopyMode(', 'DataGridClipboardCopyMode value)', 'void'),
  \ dotnet#method('OnCanExecuteCopy(', 'class CanExecuteRoutedEventArgs args)', 'void'),
  \ dotnet#method('OnExecutedCopy(', 'class ExecutedRoutedEventArgs args)', 'void'),
  \ dotnet#method('OnCopyingRowClipboardContent(', 'class DataGridRowClipboardEventArgs args)', 'void'),
  \ dotnet#method('add_CopyingRowClipboardContent(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CopyingRowClipboardContent(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_CellsPanelActualWidth(', ')', 'float64'),
  \ dotnet#method('set_CellsPanelActualWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_CellsPanelHorizontalOffset(', ')', 'float64'),
  \ dotnet#method('QueueInvalidateCellsPanelHorizontalOffset(', ')', 'void'),
  \ dotnet#method('GetAnyCellOrColumnHeader(', ')', 'IProvideDataGridColumn'),
  \ dotnet#method('GetViewportWidthForColumns(', ')', 'float64'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('get_NewItemPlaceholder(', ')', 'static object'),
  \ dotnet#method('DataGrid(', ')', 'static void .'),
  \ dotnet#method('set_CellsPanelHorizontalOffset(', 'float64 value)', 'void'),
  \ dotnet#event('ColumnDisplayIndexChanged', 'EventHandler'),
  \ dotnet#event('LoadingRow', 'EventHandler'),
  \ dotnet#event('UnloadingRow', 'EventHandler'),
  \ dotnet#event('RowEditEnding', 'EventHandler'),
  \ dotnet#event('CellEditEnding', 'EventHandler'),
  \ dotnet#event('CurrentCellChanged', 'EventHandler'),
  \ dotnet#event('BeginningEdit', 'EventHandler'),
  \ dotnet#event('PreparingCellForEdit', 'EventHandler'),
  \ dotnet#event('InitializingNewItem', 'InitializingNewItemEventHandler'),
  \ dotnet#event('LoadingRowDetails', 'EventHandler'),
  \ dotnet#event('UnloadingRowDetails', 'EventHandler'),
  \ dotnet#event('RowDetailsVisibilityChanged', 'EventHandler'),
  \ dotnet#event('SelectedCellsChanged', 'SelectedCellsChangedEventHandler'),
  \ dotnet#event('Sorting', 'DataGridSortingEventHandler'),
  \ dotnet#event('AutoGeneratedColumns', 'EventHandler'),
  \ dotnet#event('AutoGeneratingColumn', 'EventHandler'),
  \ dotnet#event('ColumnReordering', 'EventHandler'),
  \ dotnet#event('ColumnHeaderDragStarted', 'EventHandler'),
  \ dotnet#event('ColumnHeaderDragDelta', 'EventHandler'),
  \ dotnet#event('ColumnHeaderDragCompleted', 'EventHandler'),
  \ dotnet#event('ColumnReordered', 'EventHandler'),
  \ dotnet#event('CopyingRowClipboardContent', 'EventHandler'),
  \ dotnet#prop('Columns', 'ObservableCollection'),
  \ dotnet#prop('InternalColumns', 'DataGridColumnCollection'),
  \ dotnet#prop('CanUserResizeColumns', 'bool'),
  \ dotnet#prop('ColumnWidth', 'DataGridLength'),
  \ dotnet#prop('MinColumnWidth', 'float64'),
  \ dotnet#prop('MaxColumnWidth', 'float64'),
  \ dotnet#prop('DisplayIndexMap', 'List'),
  \ dotnet#prop('ColumnHeadersPresenter', 'DataGridColumnHeadersPresenter'),
  \ dotnet#prop('GridLinesVisibility', 'DataGridGridLinesVisibility'),
  \ dotnet#prop('HorizontalGridLinesBrush', 'Brush'),
  \ dotnet#prop('VerticalGridLinesBrush', 'Brush'),
  \ dotnet#prop('HorizontalGridLineThickness', 'float64'),
  \ dotnet#prop('VerticalGridLineThickness', 'float64'),
  \ dotnet#prop('RowStyle', 'Style'),
  \ dotnet#prop('RowValidationErrorTemplate', 'ControlTemplate'),
  \ dotnet#prop('RowValidationRules', 'ObservableCollection'),
  \ dotnet#prop('RowStyleSelDataGrid', 'StyleSelDataGrid'),
  \ dotnet#prop('RowBackground', 'Brush'),
  \ dotnet#prop('AlternatingRowBackground', 'Brush'),
  \ dotnet#prop('RowHeight', 'float64'),
  \ dotnet#prop('MinRowHeight', 'float64'),
  \ dotnet#prop('PlaceholderVisibility', 'Visibility'),
  \ dotnet#prop('RowHeaderWidth', 'float64'),
  \ dotnet#prop('RowHeaderActualWidth', 'float64'),
  \ dotnet#prop('ColumnHeaderHeight', 'float64'),
  \ dotnet#prop('HeadersVisibility', 'DataGridHeadersVisibility'),
  \ dotnet#prop('ItemAttachedStorage', 'DataGridItemAttachedStorage'),
  \ dotnet#prop('CellStyle', 'Style'),
  \ dotnet#prop('ColumnHeaderStyle', 'Style'),
  \ dotnet#prop('RowHeaderStyle', 'Style'),
  \ dotnet#prop('RowHeaderTemplate', 'DataTemplate'),
  \ dotnet#prop('RowHeaderTemplateSelDataGrid', 'DataTemplateSelDataGrid'),
  \ dotnet#prop('FocusBorderBrushKey', 'ComponentResourceKey'),
  \ dotnet#prop('HeadersVisibilityConverter', 'IValueConverter'),
  \ dotnet#prop('RowDetailsScrollingConverter', 'IValueConverter'),
  \ dotnet#prop('HorizontalScrollBarVisibility', 'ScrollBarVisibility'),
  \ dotnet#prop('VerticalScrollBarVisibility', 'ScrollBarVisibility'),
  \ dotnet#prop('HandlesScrolling', 'bool'),
  \ dotnet#prop('InternalItemsHost', 'Panel'),
  \ dotnet#prop('InternalScrollHost', 'ScrollViewer'),
  \ dotnet#prop('InternalScrollContentPresenter', 'ScrollContentPresenter'),
  \ dotnet#prop('HorizontalScrollOffset', 'float64'),
  \ dotnet#prop('DeleteCommand', 'RoutedUICommand'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('CurrentItem', 'object'),
  \ dotnet#prop('CurrentColumn', 'DataGridColumn'),
  \ dotnet#prop('CurrentCell', 'DataGridCellInfo'),
  \ dotnet#prop('FocusedCell', 'DataGridCell'),
  \ dotnet#prop('CanUserAddRows', 'bool'),
  \ dotnet#prop('CanUserDeleteRows', 'bool'),
  \ dotnet#prop('RowDetailsVisibilityMode', 'DataGridRowDetailsVisibilityMode'),
  \ dotnet#prop('AreRowDetailsFrozen', 'bool'),
  \ dotnet#prop('RowDetailsTemplate', 'DataTemplate'),
  \ dotnet#prop('RowDetailsTemplateSelDataGrid', 'DataTemplateSelDataGrid'),
  \ dotnet#prop('CanUserResizeRows', 'bool'),
  \ dotnet#prop('SelectedCells', 'IList'),
  \ dotnet#prop('SelectedCellsInternal', 'SelectedCellsCollection'),
  \ dotnet#prop('SelectAllCommand', 'RoutedUICommand'),
  \ dotnet#prop('SelectionMode', 'DataGridSelectionMode'),
  \ dotnet#prop('SelectionUnit', 'DataGridSelectionUnit'),
  \ dotnet#prop('CanUserSortColumns', 'bool'),
  \ dotnet#prop('AutoGenerateColumns', 'bool'),
  \ dotnet#prop('FrozenColumnCount', 'int32'),
  \ dotnet#prop('NonFrozenColumnsViewportHorizontalOffset', 'float64'),
  \ dotnet#prop('EnableRowVirtualization', 'bool'),
  \ dotnet#prop('EnableColumnVirtualization', 'bool'),
  \ dotnet#prop('CanUserReorderColumns', 'bool'),
  \ dotnet#prop('DragIndicatorStyle', 'Style'),
  \ dotnet#prop('DropLocationIndicatorStyle', 'Style'),
  \ dotnet#prop('ClipboardCopyMode', 'DataGridClipboardCopyMode'),
  \ dotnet#prop('CellsPanelActualWidth', 'float64'),
  \ dotnet#prop('CellsPanelHorizontalOffset', 'float64'),
  \ dotnet#prop('NewItemPlaceholder', 'object'),
  \ ])

call dotnet#class('DataGridAutoGeneratingColumnEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridAutoGeneratingColumnEventArgs(', 'string propertyName, Type propertyType, DataGridColumn column)', 'void'),
  \ dotnet#method('DataGridAutoGeneratingColumnEventArgs(', 'class DataGridColumn column, ItemPropertyInfo itemPropertyInfo)', 'void'),
  \ dotnet#method('DataGridAutoGeneratingColumnEventArgs(', 'class DataGridColumn column, string propertyName, Type propertyType, object propertyDescriptor)', 'void'),
  \ dotnet#method('get_Column(', ')', 'DataGridColumn'),
  \ dotnet#method('set_Column(', 'class DataGridColumn value)', 'void'),
  \ dotnet#method('get_PropertyName(', ')', 'string'),
  \ dotnet#method('get_PropertyType(', ')', 'Type'),
  \ dotnet#method('get_PropertyDescriptor(', ')', 'object'),
  \ dotnet#method('get_Cancel(', ')', 'bool'),
  \ dotnet#method('set_Cancel(', 'bool value)', 'void'),
  \ dotnet#method('set_PropertyDescriptor(', 'object value)', 'void'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ dotnet#prop('PropertyName', 'string'),
  \ dotnet#prop('PropertyType', 'Type'),
  \ dotnet#prop('PropertyDescriptor', 'object'),
  \ dotnet#prop('Cancel', 'bool'),
  \ ])

call dotnet#class('DataGridBeginningEditEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridBeginningEditEventArgs(', 'class DataGridColumn column, DataGridRow row, RoutedEventArgs editingEventArgs)', 'void'),
  \ dotnet#method('get_Cancel(', ')', 'bool'),
  \ dotnet#method('set_Cancel(', 'bool value)', 'void'),
  \ dotnet#method('get_Column(', ')', 'DataGridColumn'),
  \ dotnet#method('get_Row(', ')', 'DataGridRow'),
  \ dotnet#method('get_EditingEventArgs(', ')', 'RoutedEventArgs'),
  \ dotnet#prop('Cancel', 'bool'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ dotnet#prop('Row', 'DataGridRow'),
  \ dotnet#prop('EditingEventArgs', 'RoutedEventArgs'),
  \ ])

call dotnet#class('DataGridColumn', 'DependencyObject', [ 
  \ dotnet#method('get_Header(', ')', 'object'),
  \ dotnet#method('set_Header(', 'object value)', 'void'),
  \ dotnet#method('get_HeaderStyle(', ')', 'Style'),
  \ dotnet#method('set_HeaderStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_HeaderStringFormat(', ')', 'string'),
  \ dotnet#method('set_HeaderStringFormat(', 'string value)', 'void'),
  \ dotnet#method('get_HeaderTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_HeaderTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_HeaderTemplateSelDataGridColumn(', ')', 'DataTemplateSelDataGridColumn'),
  \ dotnet#method('set_HeaderTemplateSelDataGridColumn(', 'class DataTemplateSelDataGridColumn value)', 'void'),
  \ dotnet#method('get_CellStyle(', ')', 'Style'),
  \ dotnet#method('set_CellStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('set_IsReadOnly(', 'bool value)', 'void'),
  \ dotnet#method('OnCoerceIsReadOnly(', 'bool baseValue)', 'bool'),
  \ dotnet#method('get_Width(', ')', 'DataGridLength'),
  \ dotnet#method('set_Width(', 'DataGridLength value)', 'void'),
  \ dotnet#method('SetWidthInternal(', 'DataGridLength width)', 'void'),
  \ dotnet#method('get_MinWidth(', ')', 'float64'),
  \ dotnet#method('set_MinWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxWidth(', ')', 'float64'),
  \ dotnet#method('set_MaxWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_ActualWidth(', ')', 'float64'),
  \ dotnet#method('GetConstraintWidth(', 'bool isHeader)', 'float64'),
  \ dotnet#method('UpdateDesiredWidthForAutoColumn(', 'bool isHeader, float64 pixelWidth)', 'void'),
  \ dotnet#method('UpdateWidthForStarColumn(', 'float64 displayWidth, float64 desiredWidth, float64 starValue)', 'void'),
  \ dotnet#method('GetCellContent(', 'object dataItem)', 'FrameworkElement'),
  \ dotnet#method('GetCellContent(', 'class DataGridRow dataGridRow)', 'FrameworkElement'),
  \ dotnet#method('BuildVisualTree(', 'bool isEditing, object dataItem, DataGridCell cell)', 'FrameworkElement'),
  \ dotnet#method('GenerateElement(', 'class DataGridCell cell, object dataItem)', 'abstract'),
  \ dotnet#method('GenerateEditingElement(', 'class DataGridCell cell, object dataItem)', 'abstract'),
  \ dotnet#method('PrepareCellForEdit(', 'class FrameworkElement editingElement, RoutedEventArgs editingEventArgs)', 'object'),
  \ dotnet#method('CancelCellEdit(', 'class FrameworkElement editingElement, object uneditedValue)', 'void'),
  \ dotnet#method('CommitCellEdit(', 'class FrameworkElement editingElement)', 'bool'),
  \ dotnet#method('BeginEdit(', 'class FrameworkElement editingElement, RoutedEventArgs e)', 'void'),
  \ dotnet#method('CancelEdit(', 'class FrameworkElement editingElement)', 'void'),
  \ dotnet#method('CommitEdit(', 'class FrameworkElement editingElement)', 'bool'),
  \ dotnet#method('OnNotifyCellPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'string propertyName)', 'void'),
  \ dotnet#method('NotifyPropertyChangeForRefreshContent(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('RefreshCellContent(', 'class FrameworkElement element, string propertyName)', 'famorassem void'),
  \ dotnet#method('SyncProperties(', ')', 'void'),
  \ dotnet#method('get_DataGridOwner(', ')', 'famorassem'),
  \ dotnet#method('set_DataGridOwner(', 'class DataGrid value)', 'void'),
  \ dotnet#method('get_DisplayIndex(', ')', 'int32'),
  \ dotnet#method('set_DisplayIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_SortMemberPath(', ')', 'string'),
  \ dotnet#method('set_SortMemberPath(', 'string value)', 'void'),
  \ dotnet#method('get_CanUserSort(', ')', 'bool'),
  \ dotnet#method('set_CanUserSort(', 'bool value)', 'void'),
  \ dotnet#method('OnCoerceCanUserSort(', 'class DependencyObject d, object baseValue)', 'static object'),
  \ dotnet#method('get_SortDirection(', ')', 'Nullable'),
  \ dotnet#method('set_SortDirection(', 'Nullable value)', 'void'),
  \ dotnet#method('get_IsAutoGenerated(', ')', 'bool'),
  \ dotnet#method('set_IsAutoGenerated(', 'bool value)', 'void'),
  \ dotnet#method('CreateDefaultColumn(', 'class ItemPropertyInfo itemProperty)', 'static DataGridColumn'),
  \ dotnet#method('get_IsFrozen(', ')', 'bool'),
  \ dotnet#method('set_IsFrozen(', 'bool value)', 'void'),
  \ dotnet#method('get_CanUserReorder(', ')', 'bool'),
  \ dotnet#method('set_CanUserReorder(', 'bool value)', 'void'),
  \ dotnet#method('get_DragIndicatorStyle(', ')', 'Style'),
  \ dotnet#method('set_DragIndicatorStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_ClipboardContentBinding(', ')', ''),
  \ dotnet#method('set_ClipboardContentBinding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('OnCopyingCellClipboardContent(', 'object item)', 'object'),
  \ dotnet#method('OnPastingCellClipboardContent(', 'object item, object cellContent)', 'void'),
  \ dotnet#method('add_CopyingCellClipboardContent(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_CopyingCellClipboardContent(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_PastingCellClipboardContent(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PastingCellClipboardContent(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnInput(', 'class InputEventArgs e)', 'strict void'),
  \ dotnet#method('BeginEdit(', 'class InputEventArgs e)', 'void'),
  \ dotnet#method('get_CanUserResize(', ')', 'bool'),
  \ dotnet#method('set_CanUserResize(', 'bool value)', 'void'),
  \ dotnet#method('get_Visibility(', ')', 'Visibility'),
  \ dotnet#method('set_Visibility(', 'Visibility value)', 'void'),
  \ dotnet#method('get_IsVisible(', ')', 'bool'),
  \ dotnet#method('DataGridColumn(', ')', 'void'),
  \ dotnet#method('set_ActualWidth(', 'float64 value)', 'void'),
  \ dotnet#method('DataGridColumn(', ')', 'static void .'),
  \ dotnet#event('CopyingCellClipboardContent', 'EventHandler'),
  \ dotnet#event('PastingCellClipboardContent', 'EventHandler'),
  \ dotnet#prop('Header', 'object'),
  \ dotnet#prop('HeaderStyle', 'Style'),
  \ dotnet#prop('HeaderStringFormat', 'string'),
  \ dotnet#prop('HeaderTemplate', 'DataTemplate'),
  \ dotnet#prop('HeaderTemplateSelDataGridColumn', 'DataTemplateSelDataGridColumn'),
  \ dotnet#prop('CellStyle', 'Style'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Width', 'DataGridLength'),
  \ dotnet#prop('MinWidth', 'float64'),
  \ dotnet#prop('MaxWidth', 'float64'),
  \ dotnet#prop('ActualWidth', 'float64'),
  \ dotnet#prop('DataGridOwner', 'DataGrid'),
  \ dotnet#prop('DisplayIndex', 'int32'),
  \ dotnet#prop('SortMemberPath', 'string'),
  \ dotnet#prop('CanUserSort', 'bool'),
  \ dotnet#prop('SortDirection', 'Nullable'),
  \ dotnet#prop('IsAutoGenerated', 'bool'),
  \ dotnet#prop('IsFrozen', 'bool'),
  \ dotnet#prop('CanUserReorder', 'bool'),
  \ dotnet#prop('DragIndicatorStyle', 'Style'),
  \ dotnet#prop('ClipboardContentBinding', 'BindingBase'),
  \ dotnet#prop('CanUserResize', 'bool'),
  \ dotnet#prop('Visibility', 'Visibility'),
  \ dotnet#prop('IsVisible', 'bool'),
  \ ])

call dotnet#class('DataGridBoundColumn', 'DataGridColumn', [ 
  \ dotnet#method('get_Binding(', ')', ''),
  \ dotnet#method('set_Binding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('OnCoerceIsReadOnly(', 'bool baseValue)', 'bool'),
  \ dotnet#method('OnBindingChanged(', 'class BindingBase oldBinding, BindingBase newBinding)', 'void'),
  \ dotnet#method('ApplyBinding(', 'class DependencyObject target, DependencyProperty property)', 'void'),
  \ dotnet#method('get_ElementStyle(', ')', 'Style'),
  \ dotnet#method('set_ElementStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_EditingElementStyle(', ')', 'Style'),
  \ dotnet#method('set_EditingElementStyle(', 'class Style value)', 'void'),
  \ dotnet#method('ApplyStyle(', 'bool isEditing, bool defaultToElementStyle, FrameworkElement element)', 'void'),
  \ dotnet#method('get_ClipboardContentBinding(', ')', ''),
  \ dotnet#method('set_ClipboardContentBinding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('RefreshCellContent(', 'class FrameworkElement element, string propertyName)', 'famorassem void'),
  \ dotnet#method('DataGridBoundColumn(', ')', 'void'),
  \ dotnet#method('DataGridBoundColumn(', ')', 'static void .'),
  \ dotnet#prop('Binding', 'BindingBase'),
  \ dotnet#prop('ElementStyle', 'Style'),
  \ dotnet#prop('EditingElementStyle', 'Style'),
  \ dotnet#prop('ClipboardContentBinding', 'BindingBase'),
  \ ])

call dotnet#class('DataGridCell', 'ContentControl', [ 
  \ dotnet#method('DataGridCell(', ')', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('PrepareCell(', 'object item, ItemsControl cellsPresenter, DataGridRow ownerRow)', 'void'),
  \ dotnet#method('PrepareCell(', 'object item, DataGridRow ownerRow, int32 index)', 'void'),
  \ dotnet#method('ClearCell(', 'class DataGridRow ownerRow)', 'void'),
  \ dotnet#method('get_Tracker(', ')', '.method'),
  \ dotnet#method('get_Column(', ')', ''),
  \ dotnet#method('set_Column(', 'class DataGridColumn value)', 'void'),
  \ dotnet#method('OnColumnChanged(', 'class DataGridColumn oldColumn, DataGridColumn newColumn)', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, string propertyName, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('BuildVisualTree(', ')', 'void'),
  \ dotnet#method('get_IsEditing(', ')', 'bool'),
  \ dotnet#method('set_IsEditing(', 'bool value)', 'void'),
  \ dotnet#method('OnIsEditingChanged(', 'bool isEditing)', 'void'),
  \ dotnet#method('NotifyCurrentCellContainerChanged(', ')', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('BeginEdit(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('CancelEdit(', ')', 'void'),
  \ dotnet#method('CommitEdit(', ')', 'bool'),
  \ dotnet#method('get_EditingElement(', ')', '.method'),
  \ dotnet#method('get_IsSelected(', ')', 'bool'),
  \ dotnet#method('set_IsSelected(', 'bool value)', 'void'),
  \ dotnet#method('SyncIsSelected(', 'bool isSelected)', 'void'),
  \ dotnet#method('add_Selected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Selected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnSelected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_Unselected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Unselected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnUnselected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('OnRender(', 'class DrawingContext drawingContext)', 'void'),
  \ dotnet#method('OnTextInput(', 'class TextCompositionEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('get_DataGridOwner(', ')', '.method'),
  \ dotnet#method('get_RowOwner(', ')', '.method'),
  \ dotnet#method('get_RowDataItem(', ')', 'object'),
  \ dotnet#method('DataGridCell(', ')', 'static void .'),
  \ dotnet#event('Selected', 'RoutedEventHandler'),
  \ dotnet#event('Unselected', 'RoutedEventHandler'),
  \ dotnet#prop('Tracker', 'ContainerTracking'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ dotnet#prop('IsEditing', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('EditingElement', 'FrameworkElement'),
  \ dotnet#prop('IsSelected', 'bool'),
  \ dotnet#prop('DataGridOwner', 'DataGrid'),
  \ dotnet#prop('RowOwner', 'DataGridRow'),
  \ dotnet#prop('RowDataItem', 'object'),
  \ ])

call dotnet#class('DataGridCellClipboardEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridCellClipboardEventArgs(', 'object item, DataGridColumn column, object content)', 'void'),
  \ dotnet#method('get_Content(', ')', 'object'),
  \ dotnet#method('set_Content(', 'object value)', 'void'),
  \ dotnet#method('get_Item(', ')', 'object'),
  \ dotnet#method('get_Column(', ')', 'DataGridColumn'),
  \ dotnet#prop('Content', 'object'),
  \ dotnet#prop('Item', 'object'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ ])

call dotnet#class('DataGridCellEditEndingEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridCellEditEndingEventArgs(', 'class DataGridColumn column, DataGridRow row, FrameworkElement editingElement, DataGridEditAction editAction)', 'void'),
  \ dotnet#method('get_Cancel(', ')', 'bool'),
  \ dotnet#method('set_Cancel(', 'bool value)', 'void'),
  \ dotnet#method('get_Column(', ')', 'DataGridColumn'),
  \ dotnet#method('get_Row(', ')', 'DataGridRow'),
  \ dotnet#method('get_EditingElement(', ')', 'FrameworkElement'),
  \ dotnet#method('get_EditAction(', ')', 'DataGridEditAction'),
  \ dotnet#prop('Cancel', 'bool'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ dotnet#prop('Row', 'DataGridRow'),
  \ dotnet#prop('EditingElement', 'FrameworkElement'),
  \ dotnet#prop('EditAction', 'DataGridEditAction'),
  \ ])

call dotnet#class('DataGridCellInfo', 'ValueType', [ 
  \ dotnet#field('_item', 'object'),
  \ dotnet#field('_column', 'DataGridColumn'),
  \ dotnet#field('_owner', 'WeakReference'),
  \ dotnet#method('DataGridCellInfo(', 'object item, DataGridColumn column)', 'void'),
  \ dotnet#method('DataGridCellInfo(', 'class DataGridCell cell)', 'void'),
  \ dotnet#method('DataGridCellInfo(', 'object item, DataGridColumn column, DataGrid owner)', 'void'),
  \ dotnet#method('DataGridCellInfo(', 'object item)', 'void'),
  \ dotnet#method('CreatePossiblyPartialCellInfo(', 'object item, DataGridColumn column, DataGrid owner)', 'static DataGridCellInfo'),
  \ dotnet#method('get_Item(', ')', 'object'),
  \ dotnet#method('get_Column(', ')', 'DataGridColumn'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('op_Equality(', 'DataGridCellInfo cell1, DataGridCellInfo cell2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'DataGridCellInfo cell1, DataGridCellInfo cell2)', 'static bool'),
  \ dotnet#method('EqualsImpl(', 'DataGridCellInfo cell)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_IsValid(', ')', 'bool'),
  \ dotnet#method('IsValidForDataGrid(', 'class DataGrid dataGrid)', 'bool'),
  \ dotnet#method('get_Unset(', ')', 'static'),
  \ dotnet#prop('Item', 'object'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ dotnet#prop('IsValid', 'bool'),
  \ dotnet#prop('Unset', 'DataGridCellInfo'),
  \ ])

call dotnet#class('VirtualizingPanel', 'Panel', [ 
  \ dotnet#method('VirtualizingPanel(', ')', 'void'),
  \ dotnet#method('get_ItemContainerGenerator(', ')', 'IItemContainerGenerator'),
  \ dotnet#method('GenerateChildren(', ')', 'strict void'),
  \ dotnet#method('AddInternalChild(', 'class UIElement child)', 'void'),
  \ dotnet#method('InsertInternalChild(', 'int32 index, UIElement child)', 'void'),
  \ dotnet#method('RemoveInternalChildRange(', 'int32 index, int32 range)', 'void'),
  \ dotnet#method('AddInternalChild(', 'class UIElementCollection children, UIElement child)', 'static void'),
  \ dotnet#method('InsertInternalChild(', 'class UIElementCollection children, int32 index, UIElement child)', 'static void'),
  \ dotnet#method('RemoveInternalChildRange(', 'class UIElementCollection children, int32 index, int32 range)', 'static void'),
  \ dotnet#method('OnItemsChanged(', 'object sender, ItemsChangedEventArgs args)', 'void'),
  \ dotnet#method('OnClearChildren(', ')', 'void'),
  \ dotnet#method('BringIndexIntoView(', 'int32 index)', 'famorassem void'),
  \ dotnet#method('OnItemsChangedInternal(', 'object sender, ItemsChangedEventArgs args)', 'strict void'),
  \ dotnet#method('OnClearChildrenInternal(', ')', 'strict void'),
  \ dotnet#prop('ItemContainerGenerator', 'IItemContainerGenerator'),
  \ ])

call dotnet#class('DataGridCellsPanel', 'VirtualizingPanel', [ 
  \ dotnet#method('DataGridCellsPanel(', ')', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('OnIsItemsHostChanged(', 'bool oldIsItemsHost, bool newIsItemsHost)', 'void'),
  \ dotnet#method('ComputeCellsPanelHorizontalOffset(', ')', 'float64'),
  \ dotnet#method('OnItemsChanged(', 'object sender, ItemsChangedEventArgs args)', 'void'),
  \ dotnet#method('OnClearChildren(', ')', 'void'),
  \ dotnet#method('InternalBringIndexIntoView(', 'int32 index)', 'void'),
  \ dotnet#method('BringIndexIntoView(', 'int32 index)', 'famorassem void'),
  \ dotnet#method('GetFrozenClipForChild(', 'class UIElement child)', 'Geometry'),
  \ dotnet#method('DataGridCellsPanel(', ')', 'static void .'),
  \ ])

call dotnet#class('DataGridCheckBoxColumn', 'DataGridBoundColumn', [ 
  \ dotnet#method('get_DefaultElementStyle(', ')', 'static Style'),
  \ dotnet#method('get_DefaultEditingElementStyle(', ')', 'static Style'),
  \ dotnet#method('GenerateElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('GenerateEditingElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('RefreshCellContent(', 'class FrameworkElement element, string propertyName)', 'famorassem void'),
  \ dotnet#method('get_IsThreeState(', ')', 'bool'),
  \ dotnet#method('set_IsThreeState(', 'bool value)', 'void'),
  \ dotnet#method('PrepareCellForEdit(', 'class FrameworkElement editingElement, RoutedEventArgs editingEventArgs)', 'object'),
  \ dotnet#method('OnInput(', 'class InputEventArgs e)', 'strict void'),
  \ dotnet#method('DataGridCheckBoxColumn(', ')', 'void'),
  \ dotnet#method('DataGridCheckBoxColumn(', ')', 'static void .'),
  \ dotnet#prop('DefaultElementStyle', 'Style'),
  \ dotnet#prop('DefaultEditingElementStyle', 'Style'),
  \ dotnet#prop('IsThreeState', 'bool'),
  \ ])

call dotnet#class('DataGridClipboardCellContent', 'ValueType', [ 
  \ dotnet#field('_item', 'object'),
  \ dotnet#field('_column', 'DataGridColumn'),
  \ dotnet#field('_content', 'object'),
  \ dotnet#method('DataGridClipboardCellContent(', 'object item, DataGridColumn column, object content)', 'void'),
  \ dotnet#method('get_Item(', ')', 'object'),
  \ dotnet#method('get_Column(', ')', 'DataGridColumn'),
  \ dotnet#method('get_Content(', ')', 'object'),
  \ dotnet#method('Equals(', 'object data)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('op_Equality(', 'DataGridClipboardCellContent clipboardCellContent1, DataGridClipboardCellContent clipboardCellContent2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'DataGridClipboardCellContent clipboardCellContent1, DataGridClipboardCellContent clipboardCellContent2)', 'static bool'),
  \ dotnet#prop('Item', 'object'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ dotnet#prop('Content', 'object'),
  \ ])

call dotnet#class('Separator', 'Control', [ 
  \ dotnet#method('PrepareContainer(', 'class Control container)', 'static void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Separator(', ')', 'void'),
  \ dotnet#method('Separator(', ')', 'static void .'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('DataGridColumnEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridColumnEventArgs(', 'class DataGridColumn column)', 'void'),
  \ dotnet#method('get_Column(', ')', 'DataGridColumn'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ ])

call dotnet#class('DataGridColumnReorderingEventArgs', 'DataGridColumnEventArgs', [ 
  \ dotnet#method('DataGridColumnReorderingEventArgs(', 'class DataGridColumn dataGridColumn)', 'void'),
  \ dotnet#method('get_Cancel(', ')', 'bool'),
  \ dotnet#method('set_Cancel(', 'bool value)', 'void'),
  \ dotnet#method('get_DropLocationIndicator(', ')', 'Control'),
  \ dotnet#method('set_DropLocationIndicator(', 'class Control value)', 'void'),
  \ dotnet#method('get_DragIndicator(', ')', 'Control'),
  \ dotnet#method('set_DragIndicator(', 'class Control value)', 'void'),
  \ dotnet#prop('Cancel', 'bool'),
  \ dotnet#prop('DropLocationIndicator', 'Control'),
  \ dotnet#prop('DragIndicator', 'Control'),
  \ ])

call dotnet#class('DataGridComboBoxColumn', 'DataGridColumn', [ 
  \ dotnet#method('DataGridComboBoxColumn(', ')', 'void'),
  \ dotnet#method('DataGridComboBoxColumn(', ')', 'static void .'),
  \ dotnet#method('get_TextBlockComboBoxStyleKey(', ')', 'static'),
  \ dotnet#method('get_SelectedValueBinding(', ')', ''),
  \ dotnet#method('set_SelectedValueBinding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('OnCoerceIsReadOnly(', 'bool baseValue)', 'bool'),
  \ dotnet#method('get_SelectedItemBinding(', ')', ''),
  \ dotnet#method('set_SelectedItemBinding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('get_TextBinding(', ')', ''),
  \ dotnet#method('set_TextBinding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('OnSelectedValueBindingChanged(', 'class BindingBase oldBinding, BindingBase newBinding)', 'void'),
  \ dotnet#method('OnSelectedItemBindingChanged(', 'class BindingBase oldBinding, BindingBase newBinding)', 'void'),
  \ dotnet#method('OnTextBindingChanged(', 'class BindingBase oldBinding, BindingBase newBinding)', 'void'),
  \ dotnet#method('get_DefaultElementStyle(', ')', 'static Style'),
  \ dotnet#method('get_DefaultEditingElementStyle(', ')', 'static Style'),
  \ dotnet#method('get_ElementStyle(', ')', 'Style'),
  \ dotnet#method('set_ElementStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_EditingElementStyle(', ')', 'Style'),
  \ dotnet#method('set_EditingElementStyle(', 'class Style value)', 'void'),
  \ dotnet#method('ApplyStyle(', 'bool isEditing, bool defaultToElementStyle, FrameworkContentElement element)', 'void'),
  \ dotnet#method('get_ClipboardContentBinding(', ')', ''),
  \ dotnet#method('set_ClipboardContentBinding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('get_ItemsSource(', ')', 'IEnumerable'),
  \ dotnet#method('set_ItemsSource(', 'class IEnumerable value)', 'void'),
  \ dotnet#method('get_DisplayMemberPath(', ')', 'string'),
  \ dotnet#method('set_DisplayMemberPath(', 'string value)', 'void'),
  \ dotnet#method('get_SelectedValuePath(', ')', 'string'),
  \ dotnet#method('set_SelectedValuePath(', 'string value)', 'void'),
  \ dotnet#method('RefreshCellContent(', 'class FrameworkElement element, string propertyName)', 'famorassem void'),
  \ dotnet#method('GenerateElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('GenerateEditingElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('PrepareCellForEdit(', 'class FrameworkElement editingElement, RoutedEventArgs editingEventArgs)', 'object'),
  \ dotnet#method('OnInput(', 'class InputEventArgs e)', 'strict void'),
  \ dotnet#method('DataGridComboBoxColumn(', ')', 'void'),
  \ dotnet#method('DataGridComboBoxColumn(', ')', 'static void .'),
  \ dotnet#prop('TextBlockComboBoxStyleKey', 'ComponentResourceKey'),
  \ dotnet#prop('SelectedValueBinding', 'BindingBase'),
  \ dotnet#prop('SelectedItemBinding', 'BindingBase'),
  \ dotnet#prop('TextBinding', 'BindingBase'),
  \ dotnet#prop('DefaultElementStyle', 'Style'),
  \ dotnet#prop('DefaultEditingElementStyle', 'Style'),
  \ dotnet#prop('ElementStyle', 'Style'),
  \ dotnet#prop('EditingElementStyle', 'Style'),
  \ dotnet#prop('ClipboardContentBinding', 'BindingBase'),
  \ dotnet#prop('ItemsSource', 'IEnumerable'),
  \ dotnet#prop('DisplayMemberPath', 'string'),
  \ dotnet#prop('SelectedValuePath', 'string'),
  \ ])

call dotnet#class('DataGridHyperlinkColumn', 'DataGridBoundColumn', [ 
  \ dotnet#method('get_TargetName(', ')', 'string'),
  \ dotnet#method('set_TargetName(', 'string value)', 'void'),
  \ dotnet#method('get_ContentBinding(', ')', 'BindingBase'),
  \ dotnet#method('set_ContentBinding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('OnContentBindingChanged(', 'class BindingBase oldBinding, BindingBase newBinding)', 'void'),
  \ dotnet#method('RefreshCellContent(', 'class FrameworkElement element, string propertyName)', 'famorassem void'),
  \ dotnet#method('get_DefaultElementStyle(', ')', 'static Style'),
  \ dotnet#method('get_DefaultEditingElementStyle(', ')', 'static Style'),
  \ dotnet#method('GenerateElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('GenerateEditingElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('PrepareCellForEdit(', 'class FrameworkElement editingElement, RoutedEventArgs editingEventArgs)', 'object'),
  \ dotnet#method('OnInput(', 'class InputEventArgs e)', 'strict void'),
  \ dotnet#method('DataGridHyperlinkColumn(', ')', 'void'),
  \ dotnet#method('DataGridHyperlinkColumn(', ')', 'static void .'),
  \ dotnet#prop('TargetName', 'string'),
  \ dotnet#prop('ContentBinding', 'BindingBase'),
  \ dotnet#prop('DefaultElementStyle', 'Style'),
  \ dotnet#prop('DefaultEditingElementStyle', 'Style'),
  \ ])

call dotnet#class('DataGridLength', 'ValueType', [ 
  \ dotnet#field('_unitValue', 'float64'),
  \ dotnet#field('_unitType', 'DataGridLengthUnitType'),
  \ dotnet#field('_desiredValue', 'float64'),
  \ dotnet#field('_displayValue', 'float64'),
  \ dotnet#method('DataGridLength(', 'float64 pixels)', 'void'),
  \ dotnet#method('DataGridLength(', 'float64 value, DataGridLengthUnitType type)', 'void'),
  \ dotnet#method('DataGridLength(', 'float64 value, DataGridLengthUnitType type, float64 desiredValue, float64 displayValue)', 'void'),
  \ dotnet#method('op_Equality(', 'DataGridLength gl1, DataGridLength gl2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'DataGridLength gl1, DataGridLength gl2)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'DataGridLength other)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_IsAbsolute(', ')', 'bool'),
  \ dotnet#method('get_IsAuto(', ')', 'bool'),
  \ dotnet#method('get_IsStar(', ')', 'bool'),
  \ dotnet#method('get_IsSizeToCells(', ')', 'bool'),
  \ dotnet#method('get_IsSizeToHeader(', ')', 'bool'),
  \ dotnet#method('get_Value(', ')', 'float64'),
  \ dotnet#method('get_UnitType(', ')', 'DataGridLengthUnitType'),
  \ dotnet#method('get_DesiredValue(', ')', 'float64'),
  \ dotnet#method('get_DisplayValue(', ')', 'float64'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Auto(', ')', 'static'),
  \ dotnet#method('get_SizeToCells(', ')', 'static'),
  \ dotnet#method('get_SizeToHeader(', ')', 'static'),
  \ dotnet#method('op_Implicit(', 'float64 value)', 'static'),
  \ dotnet#method('DataGridLength(', ')', 'static void .'),
  \ dotnet#prop('IsAbsolute', 'bool'),
  \ dotnet#prop('IsAuto', 'bool'),
  \ dotnet#prop('IsStar', 'bool'),
  \ dotnet#prop('IsSizeToCells', 'bool'),
  \ dotnet#prop('IsSizeToHeader', 'bool'),
  \ dotnet#prop('Value', 'float64'),
  \ dotnet#prop('UnitType', 'DataGridLengthUnitType'),
  \ dotnet#prop('DesiredValue', 'float64'),
  \ dotnet#prop('DisplayValue', 'float64'),
  \ dotnet#prop('', 'DataGridLength'),
  \ dotnet#prop('SizeToCells', 'DataGridLength'),
  \ dotnet#prop('SizeToHeader', 'DataGridLength'),
  \ ])

call dotnet#class('DataGridLengthConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('ConvertToString(', 'DataGridLength length, CultureInfo cultureInfo)', 'static string'),
  \ dotnet#method('DataGridLengthConverter(', ')', 'void'),
  \ dotnet#method('DataGridLengthConverter(', ')', 'static void .'),
  \ ])

call dotnet#class('DataGridPreparingCellForEditEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridPreparingCellForEditEventArgs(', 'class DataGridColumn column, DataGridRow row, RoutedEventArgs editingEventArgs, FrameworkElement editingElement)', 'void'),
  \ dotnet#method('get_Column(', ')', 'DataGridColumn'),
  \ dotnet#method('get_Row(', ')', 'DataGridRow'),
  \ dotnet#method('get_EditingEventArgs(', ')', 'RoutedEventArgs'),
  \ dotnet#method('get_EditingElement(', ')', 'FrameworkElement'),
  \ dotnet#prop('Column', 'DataGridColumn'),
  \ dotnet#prop('Row', 'DataGridRow'),
  \ dotnet#prop('EditingEventArgs', 'RoutedEventArgs'),
  \ dotnet#prop('EditingElement', 'FrameworkElement'),
  \ ])

call dotnet#class('DataGridRow', 'Control', [ 
  \ dotnet#field('_detailsLoaded', 'bool'),
  \ dotnet#method('DataGridRow(', ')', 'void'),
  \ dotnet#method('get_Item(', ')', 'object'),
  \ dotnet#method('set_Item(', 'object value)', 'void'),
  \ dotnet#method('OnItemChanged(', 'object oldItem, object newItem)', 'void'),
  \ dotnet#method('get_ItemsPanel(', ')', 'ItemsPanelTemplate'),
  \ dotnet#method('set_ItemsPanel(', 'class ItemsPanelTemplate value)', 'void'),
  \ dotnet#method('OnTemplateChanged(', 'class ControlTemplate oldTemplate, ControlTemplate newTemplate)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('get_Header(', ')', 'object'),
  \ dotnet#method('set_Header(', 'object value)', 'void'),
  \ dotnet#method('OnHeaderChanged(', 'object oldHeader, object newHeader)', 'void'),
  \ dotnet#method('get_HeaderStyle(', ')', 'Style'),
  \ dotnet#method('set_HeaderStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_HeaderTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_HeaderTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_HeaderTemplateSelDataGridRow(', ')', 'DataTemplateSelDataGridRow'),
  \ dotnet#method('set_HeaderTemplateSelDataGridRow(', 'class DataTemplateSelDataGridRow value)', 'void'),
  \ dotnet#method('get_ValidationErrorTemplate(', ')', 'ControlTemplate'),
  \ dotnet#method('set_ValidationErrorTemplate(', 'class ControlTemplate value)', 'void'),
  \ dotnet#method('get_DetailsTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_DetailsTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_DetailsTemplateSelDataGridRow(', ')', 'DataTemplateSelDataGridRow'),
  \ dotnet#method('set_DetailsTemplateSelDataGridRow(', 'class DataTemplateSelDataGridRow value)', 'void'),
  \ dotnet#method('get_DetailsVisibility(', ')', 'Visibility'),
  \ dotnet#method('set_DetailsVisibility(', 'Visibility value)', 'void'),
  \ dotnet#method('get_DetailsLoaded(', ')', 'bool'),
  \ dotnet#method('set_DetailsLoaded(', 'bool value)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('PrepareRow(', 'object item, DataGrid owningDataGrid)', 'void'),
  \ dotnet#method('ClearRow(', 'class DataGrid owningDataGrid)', 'void'),
  \ dotnet#method('get_Tracker(', ')', '.method'),
  \ dotnet#method('OnRowResizeStarted(', ')', 'void'),
  \ dotnet#method('OnRowResize(', 'float64 changeAmount)', 'void'),
  \ dotnet#method('OnRowResizeCompleted(', 'bool canceled)', 'void'),
  \ dotnet#method('OnRowResizeReset(', ')', 'void'),
  \ dotnet#method('OnColumnsChanged(', 'class ObservableCollection columns, NotifyCollectionChangedEventArgs e)', 'famorassem void'),
  \ dotnet#method('get_CellsPresenter(', ')', '.method'),
  \ dotnet#method('set_CellsPresenter(', 'class DataGridCellsPresenter value)', 'void'),
  \ dotnet#method('get_DetailsPresenter(', ')', '.method'),
  \ dotnet#method('set_DetailsPresenter(', 'class DataGridDetailsPresenter value)', 'void'),
  \ dotnet#method('get_RowHeader(', ')', '.method'),
  \ dotnet#method('set_RowHeader(', 'class DataGridRowHeader value)', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('NotifyPropertyChanged(', 'class DependencyObject d, string propertyName, DependencyPropertyChangedEventArgs e, DataGridNotificationTarget target)', 'void'),
  \ dotnet#method('get_AlternationIndex(', ')', 'int32'),
  \ dotnet#method('get_IsSelected(', ')', 'bool'),
  \ dotnet#method('set_IsSelected(', 'bool value)', 'void'),
  \ dotnet#method('add_Selected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Selected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnSelected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_Unselected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Unselected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnUnselected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_IsEditing(', ')', 'bool'),
  \ dotnet#method('set_IsEditing(', 'bool value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('ScrollCellIntoView(', 'int32 index)', 'void'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeBounds)', 'Size'),
  \ dotnet#method('GetIndex(', ')', 'int32'),
  \ dotnet#method('GetRowContainingElement(', 'class FrameworkElement element)', 'static DataGridRow'),
  \ dotnet#method('get_DataGridOwner(', ')', '.method'),
  \ dotnet#method('get_DetailsPresenterDrawsGridLines(', ')', 'bool'),
  \ dotnet#method('TryGetCell(', 'int32 index)', 'DataGridCell'),
  \ dotnet#method('DataGridRow(', ')', 'static void .'),
  \ dotnet#event('Selected', 'RoutedEventHandler'),
  \ dotnet#event('Unselected', 'RoutedEventHandler'),
  \ dotnet#prop('Item', 'object'),
  \ dotnet#prop('ItemsPanel', 'ItemsPanelTemplate'),
  \ dotnet#prop('Header', 'object'),
  \ dotnet#prop('HeaderStyle', 'Style'),
  \ dotnet#prop('HeaderTemplate', 'DataTemplate'),
  \ dotnet#prop('HeaderTemplateSelDataGridRow', 'DataTemplateSelDataGridRow'),
  \ dotnet#prop('ValidationErrorTemplate', 'ControlTemplate'),
  \ dotnet#prop('DetailsTemplate', 'DataTemplate'),
  \ dotnet#prop('DetailsTemplateSelDataGridRow', 'DataTemplateSelDataGridRow'),
  \ dotnet#prop('DetailsVisibility', 'Visibility'),
  \ dotnet#prop('DetailsLoaded', 'bool'),
  \ dotnet#prop('Tracker', 'ContainerTracking'),
  \ dotnet#prop('CellsPresenter', 'DataGridCellsPresenter'),
  \ dotnet#prop('DetailsPresenter', 'DataGridDetailsPresenter'),
  \ dotnet#prop('RowHeader', 'DataGridRowHeader'),
  \ dotnet#prop('AlternationIndex', 'int32'),
  \ dotnet#prop('IsSelected', 'bool'),
  \ dotnet#prop('IsEditing', 'bool'),
  \ dotnet#prop('DataGridOwner', 'DataGrid'),
  \ dotnet#prop('DetailsPresenterDrawsGridLines', 'bool'),
  \ ])

call dotnet#class('DataGridRowClipboardEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridRowClipboardEventArgs(', 'object item, int32 startColumnDisplayIndex, int32 endColumnDisplayIndex, bool isColumnHeadersRow)', 'void'),
  \ dotnet#method('DataGridRowClipboardEventArgs(', 'object item, int32 startColumnDisplayIndex, int32 endColumnDisplayIndex, bool isColumnHeadersRow, int32 rowIndexHint)', 'void'),
  \ dotnet#method('get_Item(', ')', 'object'),
  \ dotnet#method('get_ClipboardRowContent(', ')', 'List'),
  \ dotnet#method('FormatClipboardCellValues(', 'string format)', 'string'),
  \ dotnet#method('get_StartColumnDisplayIndex(', ')', 'int32'),
  \ dotnet#method('get_EndColumnDisplayIndex(', ')', 'int32'),
  \ dotnet#method('get_IsColumnHeadersRow(', ')', 'bool'),
  \ dotnet#method('get_RowIndexHint(', ')', 'int32'),
  \ dotnet#prop('Item', 'object'),
  \ dotnet#prop('ClipboardRowContent', 'List'),
  \ dotnet#prop('StartColumnDisplayIndex', 'int32'),
  \ dotnet#prop('EndColumnDisplayIndex', 'int32'),
  \ dotnet#prop('IsColumnHeadersRow', 'bool'),
  \ dotnet#prop('RowIndexHint', 'int32'),
  \ ])

call dotnet#class('DataGridRowDetailsEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridRowDetailsEventArgs(', 'class DataGridRow row, FrameworkElement detailsElement)', 'void'),
  \ dotnet#method('get_DetailsElement(', ')', 'FrameworkElement'),
  \ dotnet#method('get_Row(', ')', 'DataGridRow'),
  \ dotnet#method('set_DetailsElement(', 'class FrameworkElement value)', 'void'),
  \ dotnet#method('set_Row(', 'class DataGridRow value)', 'void'),
  \ dotnet#prop('DetailsElement', 'FrameworkElement'),
  \ dotnet#prop('Row', 'DataGridRow'),
  \ ])

call dotnet#class('DataGridRowEditEndingEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridRowEditEndingEventArgs(', 'class DataGridRow row, DataGridEditAction editAction)', 'void'),
  \ dotnet#method('get_Cancel(', ')', 'bool'),
  \ dotnet#method('set_Cancel(', 'bool value)', 'void'),
  \ dotnet#method('get_Row(', ')', 'DataGridRow'),
  \ dotnet#method('get_EditAction(', ')', 'DataGridEditAction'),
  \ dotnet#prop('Cancel', 'bool'),
  \ dotnet#prop('Row', 'DataGridRow'),
  \ dotnet#prop('EditAction', 'DataGridEditAction'),
  \ ])

call dotnet#class('DataGridRowEventArgs', 'EventArgs', [ 
  \ dotnet#method('DataGridRowEventArgs(', 'class DataGridRow row)', 'void'),
  \ dotnet#method('get_Row(', ')', 'DataGridRow'),
  \ dotnet#method('set_Row(', 'class DataGridRow value)', 'void'),
  \ dotnet#prop('Row', 'DataGridRow'),
  \ ])

call dotnet#class('DataGridSortingEventArgs', 'DataGridColumnEventArgs', [ 
  \ dotnet#method('DataGridSortingEventArgs(', 'class DataGridColumn column)', 'void'),
  \ dotnet#method('get_Handled(', ')', 'bool'),
  \ dotnet#method('set_Handled(', 'bool value)', 'void'),
  \ dotnet#prop('Handled', 'bool'),
  \ ])

call dotnet#class('DataGridSortingEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('DataGridSortingEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, DataGridSortingEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, DataGridSortingEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('DataGridTemplateColumn', 'DataGridColumn', [ 
  \ dotnet#method('get_CellTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_CellTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_CellTemplateSelDataGridTemplateColumn(', ')', 'DataTemplateSelDataGridTemplateColumn'),
  \ dotnet#method('set_CellTemplateSelDataGridTemplateColumn(', 'class DataTemplateSelDataGridTemplateColumn value)', 'void'),
  \ dotnet#method('get_CellEditingTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_CellEditingTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_CellEditingTemplateSelDataGridTemplateColumn(', ')', 'DataTemplateSelDataGridTemplateColumn'),
  \ dotnet#method('set_CellEditingTemplateSelDataGridTemplateColumn(', 'class DataTemplateSelDataGridTemplateColumn value)', 'void'),
  \ dotnet#method('GenerateElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('GenerateEditingElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('RefreshCellContent(', 'class FrameworkElement element, string propertyName)', 'famorassem void'),
  \ dotnet#method('DataGridTemplateColumn(', ')', 'void'),
  \ dotnet#method('DataGridTemplateColumn(', ')', 'static void .'),
  \ dotnet#prop('CellTemplate', 'DataTemplate'),
  \ dotnet#prop('CellTemplateSelDataGridTemplateColumn', 'DataTemplateSelDataGridTemplateColumn'),
  \ dotnet#prop('CellEditingTemplate', 'DataTemplate'),
  \ dotnet#prop('CellEditingTemplateSelDataGridTemplateColumn', 'DataTemplateSelDataGridTemplateColumn'),
  \ ])

call dotnet#class('DataGridTextColumn', 'DataGridBoundColumn', [ 
  \ dotnet#method('get_DefaultElementStyle(', ')', 'static Style'),
  \ dotnet#method('get_DefaultEditingElementStyle(', ')', 'static Style'),
  \ dotnet#method('GenerateElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('GenerateEditingElement(', 'class DataGridCell cell, object dataItem)', 'FrameworkElement'),
  \ dotnet#method('RefreshCellContent(', 'class FrameworkElement element, string propertyName)', 'famorassem void'),
  \ dotnet#method('PrepareCellForEdit(', 'class FrameworkElement editingElement, RoutedEventArgs editingEventArgs)', 'object'),
  \ dotnet#method('OnInput(', 'class InputEventArgs e)', 'strict void'),
  \ dotnet#method('get_FontFamily(', ')', 'FontFamily'),
  \ dotnet#method('set_FontFamily(', 'class Fontvalue)', 'void'),
  \ dotnet#method('get_FontSize(', ')', 'float64'),
  \ dotnet#method('set_FontSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_FontStyle(', ')', 'FontStyle'),
  \ dotnet#method('set_FontStyle(', 'FontStyle value)', 'void'),
  \ dotnet#method('get_FontWeight(', ')', 'FontWeight'),
  \ dotnet#method('set_FontWeight(', 'FontWeight value)', 'void'),
  \ dotnet#method('get_Foreground(', ')', 'Brush'),
  \ dotnet#method('set_Foreground(', 'class Brush value)', 'void'),
  \ dotnet#method('DataGridTextColumn(', ')', 'void'),
  \ dotnet#method('DataGridTextColumn(', ')', 'static void .'),
  \ dotnet#prop('DefaultElementStyle', 'Style'),
  \ dotnet#prop('DefaultEditingElementStyle', 'Style'),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('FontSize', 'float64'),
  \ dotnet#prop('FontStyle', 'FontStyle'),
  \ dotnet#prop('FontWeight', 'FontWeight'),
  \ dotnet#prop('Foreground', 'Brush'),
  \ ])

call dotnet#class('DatePicker', 'Control', [ 
  \ dotnet#method('add_CalendarClosed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_CalendarClosed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_CalendarOpened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_CalendarOpened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_DateValidationError(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_DateValidationError(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_SelectedDateChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SelectedDateChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('DatePicker(', ')', 'void'),
  \ dotnet#method('get_BlackoutDates(', ')', 'CalendarBlackoutDatesCollection'),
  \ dotnet#method('get_CalendarStyle(', ')', 'Style'),
  \ dotnet#method('set_CalendarStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_DisplayDate(', ')', 'DateTime'),
  \ dotnet#method('set_DisplayDate(', 'DateTime value)', 'void'),
  \ dotnet#method('get_DisplayDateEnd(', ')', 'Nullable'),
  \ dotnet#method('set_DisplayDateEnd(', 'Nullable value)', 'void'),
  \ dotnet#method('get_DisplayDateStart(', ')', 'Nullable'),
  \ dotnet#method('set_DisplayDateStart(', 'Nullable value)', 'void'),
  \ dotnet#method('get_FirstDayOfWeek(', ')', 'DayOfWeek'),
  \ dotnet#method('set_FirstDayOfWeek(', 'DayOfWeek value)', 'void'),
  \ dotnet#method('get_IsDropDownOpen(', ')', 'bool'),
  \ dotnet#method('set_IsDropDownOpen(', 'bool value)', 'void'),
  \ dotnet#method('get_IsTodayHighlighted(', ')', 'bool'),
  \ dotnet#method('set_IsTodayHighlighted(', 'bool value)', 'void'),
  \ dotnet#method('get_SelectedDate(', ')', 'Nullable'),
  \ dotnet#method('set_SelectedDate(', 'Nullable value)', 'void'),
  \ dotnet#method('get_SelectedDateFormat(', ')', 'DatePickerFormat'),
  \ dotnet#method('set_SelectedDateFormat(', 'DatePickerFormat value)', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('get_Calendar(', ')', '.method'),
  \ dotnet#method('get_TextBox(', ')', '.method'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnCalendarClosed(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnCalendarOpened(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnSelectedDateChanged(', 'class SelectionChangedEventArgs e)', 'void'),
  \ dotnet#method('OnDateValidationError(', 'class DatePickerDateValidationErrorEventArgs e)', 'void'),
  \ dotnet#method('DatePicker(', ')', 'static void .'),
  \ dotnet#event('CalendarClosed', 'RoutedEventHandler'),
  \ dotnet#event('CalendarOpened', 'RoutedEventHandler'),
  \ dotnet#event('DateValidationError', 'EventHandler'),
  \ dotnet#event('SelectedDateChanged', 'EventHandler'),
  \ dotnet#prop('BlackoutDates', 'CalendarBlackoutDatesCollection'),
  \ dotnet#prop('CalendarStyle', 'Style'),
  \ dotnet#prop('DisplayDate', 'DateTime'),
  \ dotnet#prop('DisplayDateEnd', 'Nullable'),
  \ dotnet#prop('DisplayDateStart', 'Nullable'),
  \ dotnet#prop('FirstDayOfWeek', 'DayOfWeek'),
  \ dotnet#prop('IsDropDownOpen', 'bool'),
  \ dotnet#prop('IsTodayHighlighted', 'bool'),
  \ dotnet#prop('SelectedDate', 'Nullable'),
  \ dotnet#prop('SelectedDateFormat', 'DatePickerFormat'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('Calendar', 'Calendar'),
  \ dotnet#prop('TextBox', 'TextBox'),
  \ ])

call dotnet#class('DatePickerDateValidationErrorEventArgs', 'EventArgs', [ 
  \ dotnet#method('DatePickerDateValidationErrorEventArgs(', 'class Exception exception, string text)', 'void'),
  \ dotnet#method('get_Exception(', ')', 'Exception'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('get_ThrowException(', ')', 'bool'),
  \ dotnet#method('set_ThrowException(', 'bool value)', 'void'),
  \ dotnet#method('set_Exception(', 'class Exception value)', 'void'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#prop('Exception', 'Exception'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('ThrowException', 'bool'),
  \ ])

call dotnet#class('DefinitionBase', 'FrameworkContentElement', [ 
  \ dotnet#method('DefinitionBase(', 'bool isColumnDefinition)', 'void'),
  \ dotnet#method('get_SharedSizeGroup(', ')', 'string'),
  \ dotnet#method('set_SharedSizeGroup(', 'string value)', 'void'),
  \ dotnet#method('OnEnterParentTree(', ')', 'void'),
  \ dotnet#method('OnExitParentTree(', ')', 'void'),
  \ dotnet#method('OnBeforeLayout(', 'class Grid grid)', 'void'),
  \ dotnet#method('UpdateMinSize(', 'float64 minSize)', 'void'),
  \ dotnet#method('OnUserSizePropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('IsUserSizePropertyValueValid(', 'object value)', 'static bool'),
  \ dotnet#method('OnUserMinSizePropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('IsUserMinSizePropertyValueValid(', 'object value)', 'static bool'),
  \ dotnet#method('OnUserMaxSizePropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('IsUserMaxSizePropertyValueValid(', 'object value)', 'static bool'),
  \ dotnet#method('OnIsSharedSizeScopePropertyChanged(', 'class DependencyObject d, DependencyPropertyChangedEventArgs e)', 'static void'),
  \ dotnet#method('get_IsShared(', ')', 'bool'),
  \ dotnet#method('get_UserSize(', ')', '.method'),
  \ dotnet#method('get_UserMinSize(', ')', 'float64'),
  \ dotnet#method('get_UserMaxSize(', ')', 'float64'),
  \ dotnet#method('get_Index(', ')', 'int32'),
  \ dotnet#method('set_Index(', 'int32 value)', 'void'),
  \ dotnet#method('get_SizeType(', ')', '.method'),
  \ dotnet#method('set_SizeType(', 'Grid/LayoutTimeSizeType value)', 'void'),
  \ dotnet#method('get_MeasureSize(', ')', 'float64'),
  \ dotnet#method('set_MeasureSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_PreferredSize(', ')', 'float64'),
  \ dotnet#method('get_SizeCache(', ')', 'float64'),
  \ dotnet#method('set_SizeCache(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinSize(', ')', 'float64'),
  \ dotnet#method('get_MinSizeForArrange(', ')', 'float64'),
  \ dotnet#method('get_FinalOffset(', ')', 'float64'),
  \ dotnet#method('set_FinalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_UserSizeValueCache(', ')', '.method'),
  \ dotnet#method('get_UserMinSizeValueCache(', ')', 'float64'),
  \ dotnet#method('get_UserMaxSizeValueCache(', ')', 'float64'),
  \ dotnet#method('get_InParentLogicalTree(', ')', 'bool'),
  \ dotnet#method('DefinitionBase(', ')', 'static void .'),
  \ dotnet#prop('SharedSizeGroup', 'string'),
  \ dotnet#prop('IsShared', 'bool'),
  \ dotnet#prop('UserSize', 'GridLength'),
  \ dotnet#prop('UserMinSize', 'float64'),
  \ dotnet#prop('UserMaxSize', 'float64'),
  \ dotnet#prop('Index', 'int32'),
  \ dotnet#prop('SizeType', 'Grid/LayoutTimeSizeType'),
  \ dotnet#prop('MeasureSize', 'float64'),
  \ dotnet#prop('PreferredSize', 'float64'),
  \ dotnet#prop('SizeCache', 'float64'),
  \ dotnet#prop('MinSize', 'float64'),
  \ dotnet#prop('MinSizeForArrange', 'float64'),
  \ dotnet#prop('FinalOffset', 'float64'),
  \ dotnet#prop('UserSizeValueCache', 'GridLength'),
  \ dotnet#prop('UserMinSizeValueCache', 'float64'),
  \ dotnet#prop('UserMaxSizeValueCache', 'float64'),
  \ dotnet#prop('InParentLogicalTree', 'bool'),
  \ ])

call dotnet#class('DockPanel', 'Panel', [ 
  \ dotnet#method('DockPanel(', ')', 'void'),
  \ dotnet#method('GetDock(', 'class UIElement element)', 'static Dock'),
  \ dotnet#method('SetDock(', 'class UIElement element, Dock dock)', 'static void'),
  \ dotnet#method('get_LastChildFill(', ')', 'bool'),
  \ dotnet#method('set_LastChildFill(', 'bool value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('IsValidDock(', 'object o)', 'static bool'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('DockPanel(', ')', 'static void .'),
  \ dotnet#prop('LastChildFill', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('DocumentViewer', 'DocumentViewerBase', [ 
  \ dotnet#method('DocumentViewer(', ')', 'void'),
  \ dotnet#method('ViewThumbnails(', ')', 'void'),
  \ dotnet#method('FitToWidth(', ')', 'void'),
  \ dotnet#method('FitToHeight(', ')', 'void'),
  \ dotnet#method('FitToMaxPagesAcross(', ')', 'void'),
  \ dotnet#method('FitToMaxPagesAcross(', 'int32 pagesAcross)', 'void'),
  \ dotnet#method('Find(', ')', 'void'),
  \ dotnet#method('ScrollPageUp(', ')', 'void'),
  \ dotnet#method('ScrollPageDown(', ')', 'void'),
  \ dotnet#method('ScrollPageLeft(', ')', 'void'),
  \ dotnet#method('ScrollPageRight(', ')', 'void'),
  \ dotnet#method('MoveUp(', ')', 'void'),
  \ dotnet#method('MoveDown(', ')', 'void'),
  \ dotnet#method('MoveLeft(', ')', 'void'),
  \ dotnet#method('MoveRight(', ')', 'void'),
  \ dotnet#method('IncreaseZoom(', ')', 'void'),
  \ dotnet#method('DecreaseZoom(', ')', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('get_ViewThumbnailsCommand(', ')', 'static'),
  \ dotnet#method('get_FitToWidthCommand(', ')', 'static'),
  \ dotnet#method('get_FitToHeightCommand(', ')', 'static'),
  \ dotnet#method('get_FitToMaxPagesAcrossCommand(', ')', 'static'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('set_HorizontalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('set_VerticalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_ExtentWidth(', ')', 'float64'),
  \ dotnet#method('get_ExtentHeight(', ')', 'float64'),
  \ dotnet#method('get_ViewportWidth(', ')', 'float64'),
  \ dotnet#method('get_ViewportHeight(', ')', 'float64'),
  \ dotnet#method('get_ShowPageBorders(', ')', 'bool'),
  \ dotnet#method('set_ShowPageBorders(', 'bool value)', 'void'),
  \ dotnet#method('get_Zoom(', ')', 'float64'),
  \ dotnet#method('set_Zoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxPagesAcross(', ')', 'int32'),
  \ dotnet#method('set_MaxPagesAcross(', 'int32 value)', 'void'),
  \ dotnet#method('get_VerticalPageSpacing(', ')', 'float64'),
  \ dotnet#method('set_VerticalPageSpacing(', 'float64 value)', 'void'),
  \ dotnet#method('get_HorizontalPageSpacing(', ')', 'float64'),
  \ dotnet#method('set_HorizontalPageSpacing(', 'float64 value)', 'void'),
  \ dotnet#method('get_CanMoveUp(', ')', 'bool'),
  \ dotnet#method('get_CanMoveDown(', ')', 'bool'),
  \ dotnet#method('get_CanMoveLeft(', ')', 'bool'),
  \ dotnet#method('get_CanMoveRight(', ')', 'bool'),
  \ dotnet#method('get_CanIncreaseZoom(', ')', 'bool'),
  \ dotnet#method('get_CanDecreaseZoom(', ')', 'bool'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnDocumentChanged(', ')', 'void'),
  \ dotnet#method('OnBringIntoView(', 'class DependencyObject element, Rect rect, int32 pageNumber)', 'void'),
  \ dotnet#method('OnPreviousPageCommand(', ')', 'void'),
  \ dotnet#method('OnNextPageCommand(', ')', 'void'),
  \ dotnet#method('OnFirstPageCommand(', ')', 'void'),
  \ dotnet#method('OnLastPageCommand(', ')', 'void'),
  \ dotnet#method('OnGoToPageCommand(', 'int32 pageNumber)', 'void'),
  \ dotnet#method('OnViewThumbnailsCommand(', ')', 'void'),
  \ dotnet#method('OnFitToWidthCommand(', ')', 'void'),
  \ dotnet#method('OnFitToHeightCommand(', ')', 'void'),
  \ dotnet#method('OnFitToMaxPagesAcrossCommand(', ')', 'void'),
  \ dotnet#method('OnFitToMaxPagesAcrossCommand(', 'int32 pagesAcross)', 'void'),
  \ dotnet#method('OnFindCommand(', ')', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnScrollPageUpCommand(', ')', 'void'),
  \ dotnet#method('OnScrollPageDownCommand(', ')', 'void'),
  \ dotnet#method('OnScrollPageLeftCommand(', ')', 'void'),
  \ dotnet#method('OnScrollPageRightCommand(', ')', 'void'),
  \ dotnet#method('OnMoveUpCommand(', ')', 'void'),
  \ dotnet#method('OnMoveDownCommand(', ')', 'void'),
  \ dotnet#method('OnMoveLeftCommand(', ')', 'void'),
  \ dotnet#method('OnMoveRightCommand(', ')', 'void'),
  \ dotnet#method('OnIncreaseZoomCommand(', ')', 'void'),
  \ dotnet#method('OnDecreaseZoomCommand(', ')', 'void'),
  \ dotnet#method('GetPageViewsCollection(', '[out] bool& changed)', 'ReadOnlyCollection'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnPreviewMouseWheel(', 'class MouseWheelEventArgs e)', 'void'),
  \ dotnet#method('InvalidateDocumentScrollInfo(', ')', 'void'),
  \ dotnet#method('InvalidatePageViewsInternal(', ')', 'void'),
  \ dotnet#method('BringPointIntoView(', 'Point point)', 'bool'),
  \ dotnet#method('get_TextSelection(', ')', '.method'),
  \ dotnet#method('get_DocumentScrollInfo(', ')', '.method'),
  \ dotnet#method('get_ScrollViewer(', ')', '.method'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('DocumentViewer(', ')', 'static void .'),
  \ dotnet#prop('ViewThumbnailsCommand', 'RoutedUICommand'),
  \ dotnet#prop('FitToWidthCommand', 'RoutedUICommand'),
  \ dotnet#prop('FitToHeightCommand', 'RoutedUICommand'),
  \ dotnet#prop('FitToMaxPagesAcrossCommand', 'RoutedUICommand'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('ExtentWidth', 'float64'),
  \ dotnet#prop('ExtentHeight', 'float64'),
  \ dotnet#prop('ViewportWidth', 'float64'),
  \ dotnet#prop('ViewportHeight', 'float64'),
  \ dotnet#prop('ShowPageBorders', 'bool'),
  \ dotnet#prop('Zoom', 'float64'),
  \ dotnet#prop('MaxPagesAcross', 'int32'),
  \ dotnet#prop('VerticalPageSpacing', 'float64'),
  \ dotnet#prop('HorizontalPageSpacing', 'float64'),
  \ dotnet#prop('CanMoveUp', 'bool'),
  \ dotnet#prop('CanMoveDown', 'bool'),
  \ dotnet#prop('CanMoveLeft', 'bool'),
  \ dotnet#prop('CanMoveRight', 'bool'),
  \ dotnet#prop('CanIncreaseZoom', 'bool'),
  \ dotnet#prop('CanDecreaseZoom', 'bool'),
  \ dotnet#prop('TextSelection', 'ITextSelection'),
  \ dotnet#prop('DocumentScrollInfo', 'IDocumentScrollInfo'),
  \ dotnet#prop('ScrollViewer', 'ScrollViewer'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ExceptionValidationRule', 'ValidationRule', [ 
  \ dotnet#method('ExceptionValidationRule(', ')', 'void'),
  \ dotnet#method('Validate(', 'object value, CultureInfo cultureInfo)', 'ValidationResult'),
  \ dotnet#method('ExceptionValidationRule(', ')', 'static void .'),
  \ ])

call dotnet#class('HeaderedContentControl', 'ContentControl', [ 
  \ dotnet#method('HeaderedContentControl(', ')', 'void'),
  \ dotnet#method('get_Header(', ')', 'object'),
  \ dotnet#method('set_Header(', 'object value)', 'void'),
  \ dotnet#method('OnHeaderChanged(', 'object oldHeader, object newHeader)', 'void'),
  \ dotnet#method('get_HasHeader(', ')', 'bool'),
  \ dotnet#method('get_HeaderTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_HeaderTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('OnHeaderTemplateChanged(', 'class DataTemplate oldHeaderTemplate, DataTemplate newHeaderTemplate)', 'void'),
  \ dotnet#method('get_HeaderTemplateSelHeaderedContentControl(', ')', 'DataTemplateSelHeaderedContentControl'),
  \ dotnet#method('set_HeaderTemplateSelHeaderedContentControl(', 'class DataTemplateSelHeaderedContentControl value)', 'void'),
  \ dotnet#method('OnHeaderTemplateSelHeaderedContentControlChanged(', 'class DataTemplateSelHeaderedContentControl oldHeaderTemplateSelHeaderedContentControl, DataTemplateSelHeaderedContentControl newHeaderTemplateSelHeaderedContentControl)', 'void'),
  \ dotnet#method('get_HeaderStringFormat(', ')', 'string'),
  \ dotnet#method('set_HeaderStringFormat(', 'string value)', 'void'),
  \ dotnet#method('OnHeaderStringFormatChanged(', 'string oldHeaderStringFormat, string newHeaderStringFormat)', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('GetPlainText(', ')', 'strict string'),
  \ dotnet#method('get_HeaderIsNotLogical(', ')', 'bool'),
  \ dotnet#method('set_HeaderIsNotLogical(', 'bool value)', 'void'),
  \ dotnet#method('get_HeaderIsItem(', ')', 'bool'),
  \ dotnet#method('set_HeaderIsItem(', 'bool value)', 'void'),
  \ dotnet#method('PrepareHeaderedContentControl(', 'object item, DataTemplate itemTemplate, DataTemplateSelHeaderedContentControl itemTemplateSelHeaderedContentControl, string stringFormat)', 'void'),
  \ dotnet#method('ClearHeaderedContentControl(', 'object item)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('HeaderedContentControl(', ')', 'static void .'),
  \ dotnet#prop('Header', 'object'),
  \ dotnet#prop('HasHeader', 'bool'),
  \ dotnet#prop('HeaderTemplate', 'DataTemplate'),
  \ dotnet#prop('HeaderTemplateSelHeaderedContentControl', 'DataTemplateSelHeaderedContentControl'),
  \ dotnet#prop('HeaderStringFormat', 'string'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('HeaderIsNotLogical', 'bool'),
  \ dotnet#prop('HeaderIsItem', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('Expander', 'HeaderedContentControl', [ 
  \ dotnet#method('get_ExpandDirection(', ')', 'ExpandDirection'),
  \ dotnet#method('set_ExpandDirection(', 'ExpandDirection value)', 'void'),
  \ dotnet#method('get_IsExpanded(', ')', 'bool'),
  \ dotnet#method('set_IsExpanded(', 'bool value)', 'void'),
  \ dotnet#method('add_Expanded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Expanded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_Collapsed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Collapsed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnExpanded(', ')', 'void'),
  \ dotnet#method('OnCollapsed(', ')', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Expander(', ')', 'void'),
  \ dotnet#method('Expander(', ')', 'static void .'),
  \ dotnet#event('Expanded', 'RoutedEventHandler'),
  \ dotnet#event('Collapsed', 'RoutedEventHandler'),
  \ dotnet#prop('ExpandDirection', 'ExpandDirection'),
  \ dotnet#prop('IsExpanded', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('FlowDocumentReader', 'Control', [ 
  \ dotnet#method('FlowDocumentReader(', ')', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('CanGoToPage(', 'int32 pageNumber)', 'bool'),
  \ dotnet#method('Find(', ')', 'void'),
  \ dotnet#method('Print(', ')', 'void'),
  \ dotnet#method('CancelPrint(', ')', 'void'),
  \ dotnet#method('IncreaseZoom(', ')', 'void'),
  \ dotnet#method('DecreaseZoom(', ')', 'void'),
  \ dotnet#method('SwitchViewingMode(', 'FlowDocumentReaderViewingMode viewingMode)', 'void'),
  \ dotnet#method('get_ViewingMode(', ')', 'FlowDocumentReaderViewingMode'),
  \ dotnet#method('set_ViewingMode(', 'FlowDocumentReaderViewingMode value)', 'void'),
  \ dotnet#method('get_Selection(', ')', 'TextSelection'),
  \ dotnet#method('get_IsPageViewEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsPageViewEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_IsTwoPageViewEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsTwoPageViewEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_IsScrollViewEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsScrollViewEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_PageCount(', ')', 'int32'),
  \ dotnet#method('get_PageNumber(', ')', 'int32'),
  \ dotnet#method('get_CanGoToPreviousPage(', ')', 'bool'),
  \ dotnet#method('get_CanGoToNextPage(', ')', 'bool'),
  \ dotnet#method('get_IsFindEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsFindEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_IsPrintEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsPrintEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_Document(', ')', 'FlowDocument'),
  \ dotnet#method('set_Document(', 'class FlowDocument value)', 'void'),
  \ dotnet#method('get_Zoom(', ')', 'float64'),
  \ dotnet#method('set_Zoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxZoom(', ')', 'float64'),
  \ dotnet#method('set_MaxZoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_MinZoom(', ')', 'float64'),
  \ dotnet#method('set_MinZoom(', 'float64 value)', 'void'),
  \ dotnet#method('get_ZoomIncrement(', ')', 'float64'),
  \ dotnet#method('set_ZoomIncrement(', 'float64 value)', 'void'),
  \ dotnet#method('get_CanIncreaseZoom(', ')', 'bool'),
  \ dotnet#method('get_CanDecreaseZoom(', ')', 'bool'),
  \ dotnet#method('get_SelectionBrush(', ')', 'Brush'),
  \ dotnet#method('set_SelectionBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_SelectionOpacity(', ')', 'float64'),
  \ dotnet#method('set_SelectionOpacity(', 'float64 value)', 'void'),
  \ dotnet#method('OnPrintCompleted(', ')', 'void'),
  \ dotnet#method('OnFindCommand(', ')', 'void'),
  \ dotnet#method('OnPrintCommand(', ')', 'void'),
  \ dotnet#method('OnCancelPrintCommand(', ')', 'void'),
  \ dotnet#method('OnIncreaseZoomCommand(', ')', 'void'),
  \ dotnet#method('OnDecreaseZoomCommand(', ')', 'void'),
  \ dotnet#method('OnSwitchViewingModeCommand(', 'FlowDocumentReaderViewingMode viewingMode)', 'void'),
  \ dotnet#method('OnInitialized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('BuildRouteCore(', 'class EventRoute route, RoutedEventArgs args)', 'strict bool'),
  \ dotnet#method('SwitchViewingModeCore(', 'FlowDocumentReaderViewingMode viewingMode)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('GetJournalState(', 'JournalReason journalReason)', ''),
  \ dotnet#method('RestoreJournalState(', 'class CustomJournalStateInternal state)', 'void '),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('FlowDocumentReader(', ')', 'static void .'),
  \ dotnet#prop('ViewingMode', 'FlowDocumentReaderViewingMode'),
  \ dotnet#prop('Selection', 'TextSelection'),
  \ dotnet#prop('IsPageViewEnabled', 'bool'),
  \ dotnet#prop('IsTwoPageViewEnabled', 'bool'),
  \ dotnet#prop('IsScrollViewEnabled', 'bool'),
  \ dotnet#prop('PageCount', 'int32'),
  \ dotnet#prop('PageNumber', 'int32'),
  \ dotnet#prop('CanGoToPreviousPage', 'bool'),
  \ dotnet#prop('CanGoToNextPage', 'bool'),
  \ dotnet#prop('IsFindEnabled', 'bool'),
  \ dotnet#prop('IsPrintEnabled', 'bool'),
  \ dotnet#prop('Document', 'FlowDocument'),
  \ dotnet#prop('Zoom', 'float64'),
  \ dotnet#prop('MaxZoom', 'float64'),
  \ dotnet#prop('MinZoom', 'float64'),
  \ dotnet#prop('ZoomIncrement', 'float64'),
  \ dotnet#prop('CanIncreaseZoom', 'bool'),
  \ dotnet#prop('CanDecreaseZoom', 'bool'),
  \ dotnet#prop('SelectionBrush', 'Brush'),
  \ dotnet#prop('SelectionOpacity', 'float64'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('Frame', 'ContentControl', [ 
  \ dotnet#method('Frame(', ')', 'void'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('get_BaseUri(', ')', 'family'),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_Downloader(', ')', ''),
  \ dotnet#method('add_ContentRendered(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ContentRendered(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnContentRendered(', 'class EventArgs args)', 'void'),
  \ dotnet#method('OnSourceUpdatedFromNavService(', 'bool journalOrCancel)', 'void '),
  \ dotnet#method('get_Source(', ')', ''),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('get_NavigationUIVisibility(', ')', 'NavigationUIVisibility'),
  \ dotnet#method('set_NavigationUIVisibility(', 'NavigationUIVisibility value)', 'void'),
  \ dotnet#method('get_SandboxExternalContent(', ')', 'bool'),
  \ dotnet#method('set_SandboxExternalContent(', 'bool value)', 'void'),
  \ dotnet#method('get_JournalOwnership(', ')', 'JournalOwnership'),
  \ dotnet#method('set_JournalOwnership(', 'JournalOwnership value)', 'void'),
  \ dotnet#method('get_NavigationService(', ')', ''),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('AddChild(', 'object value)', 'void'),
  \ dotnet#method('AddText(', 'string text)', 'void'),
  \ dotnet#method('AdjustEventSource(', 'class RoutedEventArgs e)', 'strict object'),
  \ dotnet#method('GetPlainText(', ')', 'strict string'),
  \ dotnet#method('ShouldSerializeContent(', ')', 'bool'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('FindRootViewer(', ')', ''),
  \ dotnet#method('GetJournal(', 'bool create)', ''),
  \ dotnet#method('get_CanGoForward(', ')', 'bool'),
  \ dotnet#method('get_CanGoBack(', ')', 'bool'),
  \ dotnet#method('AddBackEntry(', 'class CustomContentState state)', 'void'),
  \ dotnet#method('RemoveBackEntry(', ')', ''),
  \ dotnet#method('Navigate(', 'class Uri source)', 'bool'),
  \ dotnet#method('Navigate(', 'class Uri source, object extraData)', 'bool'),
  \ dotnet#method('Navigate(', 'object content)', 'bool'),
  \ dotnet#method('Navigate(', 'object content, object extraData)', 'bool'),
  \ dotnet#method('GoForward(', ')', 'void'),
  \ dotnet#method('GoBack(', ')', 'void'),
  \ dotnet#method('StopLoading(', ')', 'void'),
  \ dotnet#method('Refresh(', ')', 'void'),
  \ dotnet#method('get_CurrentSource(', ')', ''),
  \ dotnet#method('get_BackStack(', ')', ''),
  \ dotnet#method('get_ForwardStack(', ')', ''),
  \ dotnet#method('add_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationProgress(', 'class NavigationProgressEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationProgress(', 'class NavigationProgressEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationFailed(', 'class NavigationFailedEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationFailed(', 'class NavigationFailedEventHandler value)', 'void'),
  \ dotnet#method('add_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('add_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('add_NavigationStopped(', 'class NavigationStoppedEventHandler value)', 'void'),
  \ dotnet#method('remove_NavigationStopped(', 'class NavigationStoppedEventHandler value)', 'void'),
  \ dotnet#method('add_FragmentNavigation(', 'class FragmentNavigationEventHandler value)', 'void'),
  \ dotnet#method('remove_FragmentNavigation(', 'class FragmentNavigationEventHandler value)', 'void'),
  \ dotnet#method('VerifyContextAndObjectState(', ')', 'void '),
  \ dotnet#method('OnJournalAvailable(', ')', 'void '),
  \ dotnet#method('GoBackOverride(', ')', 'bool '),
  \ dotnet#method('GoForwardOverride(', ')', 'bool '),
  \ dotnet#method('GetJournalState(', 'JournalReason journalReason)', ''),
  \ dotnet#method('RestoreJournalState(', 'class CustomJournalStateInternal cjs)', 'void '),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('OnThemeChanged(', ')', 'strict void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Frame(', ')', 'static void .'),
  \ dotnet#event('ContentRendered', 'EventHandler'),
  \ dotnet#event('Navigating', 'NavigatingCancelEventHandler'),
  \ dotnet#event('NavigationProgress', 'NavigationProgressEventHandler'),
  \ dotnet#event('NavigationFailed', 'NavigationFailedEventHandler'),
  \ dotnet#event('Navigated', 'NavigatedEventHandler'),
  \ dotnet#event('LoadCompleted', 'LoadCompletedEventHandler'),
  \ dotnet#event('NavigationStopped', 'NavigationStoppedEventHandler'),
  \ dotnet#event('FragmentNavigation', 'FragmentNavigationEventHandler'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('Downloader', 'NavigationService'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('NavigationUIVisibility', 'NavigationUIVisibility'),
  \ dotnet#prop('SandboxExternalContent', 'bool'),
  \ dotnet#prop('JournalOwnership', 'JournalOwnership'),
  \ dotnet#prop('NavigationService', 'NavigationService'),
  \ dotnet#prop('CanGoForward', 'bool'),
  \ dotnet#prop('CanGoBack', 'bool'),
  \ dotnet#prop('CurrentSource', 'Uri'),
  \ dotnet#prop('BackStack', 'IEnumerable'),
  \ dotnet#prop('ForwardStack', 'IEnumerable'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('Grid', 'Panel', [ 
  \ dotnet#field('value__', 'uint8'),
  \ dotnet#method('UpdateRenderBounds(', 'Size boundsSize)', 'void'),
  \ dotnet#method('Grid(', ')', 'void'),
  \ dotnet#method('Grid(', ')', 'static void .'),
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('Grid(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('SetColumn(', 'class UIElement element, int32 value)', 'static void'),
  \ dotnet#method('GetColumn(', 'class UIElement element)', 'static int32'),
  \ dotnet#method('SetRow(', 'class UIElement element, int32 value)', 'static void'),
  \ dotnet#method('GetRow(', 'class UIElement element)', 'static int32'),
  \ dotnet#method('SetColumnSpan(', 'class UIElement element, int32 value)', 'static void'),
  \ dotnet#method('GetColumnSpan(', 'class UIElement element)', 'static int32'),
  \ dotnet#method('SetRowSpan(', 'class UIElement element, int32 value)', 'static void'),
  \ dotnet#method('GetRowSpan(', 'class UIElement element)', 'static int32'),
  \ dotnet#method('SetIsSharedSizeScope(', 'class UIElement element, bool value)', 'static void'),
  \ dotnet#method('GetIsSharedSizeScope(', 'class UIElement element)', 'static bool'),
  \ dotnet#method('get_ShowGridLines(', ')', 'bool'),
  \ dotnet#method('set_ShowGridLines(', 'bool value)', 'void'),
  \ dotnet#method('get_ColumnDefinitions(', ')', 'ColumnDefinitionCollection'),
  \ dotnet#method('get_RowDefinitions(', ')', 'RowDefinitionCollection'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('OnVisualChildrenChanged(', 'class DependencyObject visualAdded, DependencyObject visualRemoved)', 'famorassem void'),
  \ dotnet#method('Invalidate(', ')', 'void'),
  \ dotnet#method('GetFinalColumnDefinitionWidth(', 'int32 columnIndex)', 'float64'),
  \ dotnet#method('GetFinalRowDefinitionHeight(', 'int32 rowIndex)', 'float64'),
  \ dotnet#method('get_MeasureOverrideInProgress(', ')', 'bool'),
  \ dotnet#method('set_MeasureOverrideInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_ArrangeOverrideInProgress(', ')', 'bool'),
  \ dotnet#method('set_ArrangeOverrideInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_ColumnDefinitionCollectionDirty(', ')', 'bool'),
  \ dotnet#method('set_ColumnDefinitionCollectionDirty(', 'bool value)', 'void'),
  \ dotnet#method('get_RowDefinitionCollectionDirty(', ')', 'bool'),
  \ dotnet#method('set_RowDefinitionCollectionDirty(', 'bool value)', 'void'),
  \ dotnet#method('ShouldSerializeColumnDefinitions(', ')', 'bool'),
  \ dotnet#method('ShouldSerializeRowDefinitions(', ')', 'bool'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('EnterCounterScope(', 'Grid/Counters scopeCounter)', 'void'),
  \ dotnet#method('ExitCounterScope(', 'Grid/Counters scopeCounter)', 'void'),
  \ dotnet#method('EnterCounter(', 'Grid/Counters counter)', 'void'),
  \ dotnet#method('ExitCounter(', 'Grid/Counters counter)', 'void'),
  \ dotnet#method('Grid(', ')', 'static void .'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('ShowGridLines', 'bool'),
  \ dotnet#prop('ColumnDefinitions', 'ColumnDefinitionCollection'),
  \ dotnet#prop('RowDefinitions', 'RowDefinitionCollection'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('MeasureOverrideInProgress', 'bool'),
  \ dotnet#prop('ArrangeOverrideInProgress', 'bool'),
  \ dotnet#prop('ColumnDefinitionCollectionDirty', 'bool'),
  \ dotnet#prop('RowDefinitionCollectionDirty', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('ViewBase', 'DependencyObject', [ 
  \ dotnet#method('PrepareItem(', 'class ListViewItem item)', 'famorassem void'),
  \ dotnet#method('ClearItem(', 'class ListViewItem item)', 'famorassem void'),
  \ dotnet#method('get_DefaultStyleKey(', ')', 'famorassem object'),
  \ dotnet#method('get_ItemContainerDefaultStyleKey(', ')', 'famorassem object'),
  \ dotnet#method('OnThemeChanged(', ')', 'strict void'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('GetAutomationPeer(', 'class ListView parent)', 'famorassem'),
  \ dotnet#method('get_IsUsed(', ')', 'bool'),
  \ dotnet#method('set_IsUsed(', 'bool value)', 'void'),
  \ dotnet#method('ViewBase(', ')', 'void'),
  \ dotnet#prop('DefaultStyleKey', 'object'),
  \ dotnet#prop('ItemContainerDefaultStyleKey', 'object'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ dotnet#prop('IsUsed', 'bool'),
  \ ])

call dotnet#class('GridView', 'ViewBase', [ 
  \ dotnet#method('AddChild(', 'object column)', 'void '),
  \ dotnet#method('AddChild(', 'object column)', 'void'),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetAutomationPeer(', 'class ListView parent)', 'famorassem IViewAutomationPeer'),
  \ dotnet#method('get_GridViewScrollViewerStyleKey(', ')', 'static'),
  \ dotnet#method('get_GridViewStyleKey(', ')', 'static'),
  \ dotnet#method('get_GridViewItemContainerStyleKey(', ')', 'static'),
  \ dotnet#method('GetColumnCollection(', 'class DependencyObject element)', 'static GridViewColumnCollection'),
  \ dotnet#method('SetColumnCollection(', 'class DependencyObject element, GridViewColumnCollection collection)', 'static void'),
  \ dotnet#method('ShouldSerializeColumnCollection(', 'class DependencyObject obj)', 'static bool'),
  \ dotnet#method('get_Columns(', ')', 'GridViewColumnCollection'),
  \ dotnet#method('get_ColumnHeaderContainerStyle(', ')', 'Style'),
  \ dotnet#method('set_ColumnHeaderContainerStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_ColumnHeaderTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_ColumnHeaderTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_ColumnHeaderTemplateSelGridView(', ')', 'DataTemplateSelGridView'),
  \ dotnet#method('set_ColumnHeaderTemplateSelGridView(', 'class DataTemplateSelGridView value)', 'void'),
  \ dotnet#method('get_ColumnHeaderStringFormat(', ')', 'string'),
  \ dotnet#method('set_ColumnHeaderStringFormat(', 'string value)', 'void'),
  \ dotnet#method('get_AllowsColumnReorder(', ')', 'bool'),
  \ dotnet#method('set_AllowsColumnReorder(', 'bool value)', 'void'),
  \ dotnet#method('get_ColumnHeaderContextMenu(', ')', 'ContextMenu'),
  \ dotnet#method('set_ColumnHeaderContextMenu(', 'class ContextMenu value)', 'void'),
  \ dotnet#method('get_ColumnHeaderToolTip(', ')', 'object'),
  \ dotnet#method('set_ColumnHeaderToolTip(', 'object value)', 'void'),
  \ dotnet#method('PrepareItem(', 'class ListViewItem item)', 'famorassem void'),
  \ dotnet#method('ClearItem(', 'class ListViewItem item)', 'famorassem void'),
  \ dotnet#method('get_DefaultStyleKey(', ')', 'famorassem object'),
  \ dotnet#method('get_ItemContainerDefaultStyleKey(', ')', 'famorassem object'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('OnThemeChanged(', ')', 'strict void'),
  \ dotnet#method('get_HeaderRowPresenter(', ')', '.method'),
  \ dotnet#method('set_HeaderRowPresenter(', 'class GridViewHeaderRowPresenter value)', 'void'),
  \ dotnet#method('GridView(', ')', 'void'),
  \ dotnet#method('GridView(', ')', 'static void .'),
  \ dotnet#prop('GridViewScrollViewerStyleKey', 'ResourceKey'),
  \ dotnet#prop('GridViewStyleKey', 'ResourceKey'),
  \ dotnet#prop('GridViewItemContainerStyleKey', 'ResourceKey'),
  \ dotnet#prop('Columns', 'GridViewColumnCollection'),
  \ dotnet#prop('ColumnHeaderContainerStyle', 'Style'),
  \ dotnet#prop('ColumnHeaderTemplate', 'DataTemplate'),
  \ dotnet#prop('ColumnHeaderTemplateSelGridView', 'DataTemplateSelGridView'),
  \ dotnet#prop('ColumnHeaderStringFormat', 'string'),
  \ dotnet#prop('AllowsColumnReorder', 'bool'),
  \ dotnet#prop('ColumnHeaderContextMenu', 'ContextMenu'),
  \ dotnet#prop('ColumnHeaderToolTip', 'object'),
  \ dotnet#prop('DefaultStyleKey', 'object'),
  \ dotnet#prop('ItemContainerDefaultStyleKey', 'object'),
  \ dotnet#prop('HeaderRowPresenter', 'GridViewHeaderRowPresenter'),
  \ ])

call dotnet#class('GridViewColumn', 'DependencyObject', [ 
  \ dotnet#method('GridViewColumn(', ')', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Header(', ')', 'object'),
  \ dotnet#method('set_Header(', 'object value)', 'void'),
  \ dotnet#method('get_HeaderContainerStyle(', ')', 'Style'),
  \ dotnet#method('set_HeaderContainerStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_HeaderTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_HeaderTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_HeaderTemplateSelGridViewColumn(', ')', 'DataTemplateSelGridViewColumn'),
  \ dotnet#method('set_HeaderTemplateSelGridViewColumn(', 'class DataTemplateSelGridViewColumn value)', 'void'),
  \ dotnet#method('get_HeaderStringFormat(', ')', 'string'),
  \ dotnet#method('set_HeaderStringFormat(', 'string value)', 'void'),
  \ dotnet#method('OnHeaderStringFormatChanged(', 'string oldHeaderStringFormat, string newHeaderStringFormat)', 'void'),
  \ dotnet#method('get_DisplayMemberBinding(', ')', 'BindingBase'),
  \ dotnet#method('set_DisplayMemberBinding(', 'class BindingBase value)', 'void'),
  \ dotnet#method('get_CellTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_CellTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_CellTemplateSelGridViewColumn(', ')', 'DataTemplateSelGridViewColumn'),
  \ dotnet#method('set_CellTemplateSelGridViewColumn(', 'class DataTemplateSelGridViewColumn value)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('set_Width(', 'float64 value)', 'void'),
  \ dotnet#method('get_ActualWidth(', ')', 'float64'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('OnPropertyChanged(', 'class PropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('OnThemeChanged(', ')', 'void'),
  \ dotnet#method('EnsureWidth(', 'float64 width)', 'float64'),
  \ dotnet#method('ResetPrivateData(', ')', 'void'),
  \ dotnet#method('get_State(', ')', '.method'),
  \ dotnet#method('set_State(', 'ColumnMeasureState value)', 'void'),
  \ dotnet#method('get_ActualIndex(', ')', 'int32'),
  \ dotnet#method('set_ActualIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_DesiredWidth(', ')', 'float64'),
  \ dotnet#method('get_InheritanceContext(', ')', 'strict'),
  \ dotnet#method('AddInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('RemoveInheritanceContext(', 'class DependencyObject context, DependencyProperty property)', 'strict void'),
  \ dotnet#method('set_ActualWidth(', 'float64 value)', 'void'),
  \ dotnet#method('set_DesiredWidth(', 'float64 value)', 'void'),
  \ dotnet#method('GridViewColumn(', ')', 'static void .'),
  \ dotnet#prop('Header', 'object'),
  \ dotnet#prop('HeaderContainerStyle', 'Style'),
  \ dotnet#prop('HeaderTemplate', 'DataTemplate'),
  \ dotnet#prop('HeaderTemplateSelGridViewColumn', 'DataTemplateSelGridViewColumn'),
  \ dotnet#prop('HeaderStringFormat', 'string'),
  \ dotnet#prop('DisplayMemberBinding', 'BindingBase'),
  \ dotnet#prop('CellTemplate', 'DataTemplate'),
  \ dotnet#prop('CellTemplateSelGridViewColumn', 'DataTemplateSelGridViewColumn'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('ActualWidth', 'float64'),
  \ dotnet#prop('State', 'ColumnMeasureState'),
  \ dotnet#prop('ActualIndex', 'int32'),
  \ dotnet#prop('DesiredWidth', 'float64'),
  \ dotnet#prop('InheritanceContext', 'DependencyObject'),
  \ ])

call dotnet#class('GridViewColumnCollection', 'ObservableCollection', [ 
  \ dotnet#method('ClearItems(', ')', 'void'),
  \ dotnet#method('RemoveItem(', 'int32 index)', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, GridViewColumn column)', 'void'),
  \ dotnet#method('SetItem(', 'int32 index, GridViewColumn column)', 'void'),
  \ dotnet#method('MoveItem(', 'int32 oldIndex, int32 newIndex)', 'void'),
  \ dotnet#method('OnCollectionChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('add_InternalCollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_InternalCollectionChanged(', 'class NotifyCollectionChangedEventHandler value)', 'void'),
  \ dotnet#method('BlockWrite(', ')', 'void'),
  \ dotnet#method('UnblockWrite(', ')', 'void'),
  \ dotnet#method('get_ColumnCollection(', ')', '.method'),
  \ dotnet#method('get_IndexList(', ')', '.method'),
  \ dotnet#method('get_Owner(', ')', '.method'),
  \ dotnet#method('set_Owner(', 'class DependencyObject value)', 'void'),
  \ dotnet#method('get_InViewMode(', ')', 'bool'),
  \ dotnet#method('set_InViewMode(', 'bool value)', 'void'),
  \ dotnet#method('GridViewColumnCollection(', ')', 'void'),
  \ dotnet#event('InternalCollectionChanged', 'NotifyCollectionChangedEventHandler'),
  \ dotnet#prop('ColumnCollection', 'List'),
  \ dotnet#prop('IndexList', 'List'),
  \ dotnet#prop('Owner', 'DependencyObject'),
  \ dotnet#prop('InViewMode', 'bool'),
  \ ])

call dotnet#class('GridViewColumnHeader', 'ButtonBase', [ 
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('get_Column(', ')', 'GridViewColumn'),
  \ dotnet#method('get_Role(', ')', 'GridViewColumnHeaderRole'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnRenderSizeChanged(', 'class SizeChangedInfo sizeInfo)', 'famorassem void'),
  \ dotnet#method('OnClick(', ')', 'void'),
  \ dotnet#method('OnAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('ShouldSerializeProperty(', 'class DependencyProperty dp)', 'famorassem bool'),
  \ dotnet#method('OnMouseEnter(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeave(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('AutomationClick(', ')', 'void'),
  \ dotnet#method('OnColumnHeaderKeyDown(', 'object sender, KeyEventArgs e)', 'void'),
  \ dotnet#method('CheckWidthForPreviousHeaderGripper(', ')', 'void'),
  \ dotnet#method('ResetFloatingHeaderCanvasBackground(', ')', 'void'),
  \ dotnet#method('UpdateProperty(', 'class DependencyProperty dp, object value)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('get_PreviousVisualHeader(', ')', '.method'),
  \ dotnet#method('set_PreviousVisualHeader(', 'class GridViewColumnHeader value)', 'void'),
  \ dotnet#method('get_SuppressClickEvent(', ')', 'bool'),
  \ dotnet#method('set_SuppressClickEvent(', 'bool value)', 'void'),
  \ dotnet#method('get_FloatSourceHeader(', ')', '.method'),
  \ dotnet#method('set_FloatSourceHeader(', 'class GridViewColumnHeader value)', 'void'),
  \ dotnet#method('get_IsInternalGenerated(', ')', 'bool'),
  \ dotnet#method('set_IsInternalGenerated(', 'bool value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('GridViewColumnHeader(', ')', 'void'),
  \ dotnet#method('GridViewColumnHeader(', ')', 'static void .'),
  \ dotnet#prop('Column', 'GridViewColumn'),
  \ dotnet#prop('Role', 'GridViewColumnHeaderRole'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('PreviousVisualHeader', 'GridViewColumnHeader'),
  \ dotnet#prop('SuppressClickEvent', 'bool'),
  \ dotnet#prop('FloatSourceHeader', 'GridViewColumnHeader'),
  \ dotnet#prop('IsInternalGenerated', 'bool'),
  \ ])

call dotnet#class('GridViewHeaderRowPresenter', 'GridViewRowPresenterBase', [ 
  \ dotnet#method('get_ColumnHeaderContainerStyle(', ')', 'Style'),
  \ dotnet#method('set_ColumnHeaderContainerStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_ColumnHeaderTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_ColumnHeaderTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_ColumnHeaderTemplateSelGridViewHeaderRowPresenter(', ')', 'DataTemplateSelGridViewHeaderRowPresenter'),
  \ dotnet#method('set_ColumnHeaderTemplateSelGridViewHeaderRowPresenter(', 'class DataTemplateSelGridViewHeaderRowPresenter value)', 'void'),
  \ dotnet#method('get_ColumnHeaderStringFormat(', ')', 'string'),
  \ dotnet#method('set_ColumnHeaderStringFormat(', 'string value)', 'void'),
  \ dotnet#method('get_AllowsColumnReorder(', ')', 'bool'),
  \ dotnet#method('set_AllowsColumnReorder(', 'bool value)', 'void'),
  \ dotnet#method('get_ColumnHeaderContextMenu(', ')', 'ContextMenu'),
  \ dotnet#method('set_ColumnHeaderContextMenu(', 'class ContextMenu value)', 'void'),
  \ dotnet#method('get_ColumnHeaderToolTip(', ')', 'object'),
  \ dotnet#method('set_ColumnHeaderToolTip(', 'object value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnLostMouseCapture(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('OnColumnPropertyChanged(', 'class GridViewColumn column, string propertyName)', 'strict void'),
  \ dotnet#method('OnColumnCollectionChanged(', 'class GridViewColumnCollectionChangedEventArgs e)', 'strict void'),
  \ dotnet#method('MakeParentItemsControlGotFocus(', ')', 'void'),
  \ dotnet#method('UpdateHeaderProperty(', 'class GridViewColumnHeader header, DependencyProperty property)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_ActualColumnHeaders(', ')', '.method'),
  \ dotnet#method('GridViewHeaderRowPresenter(', ')', 'void'),
  \ dotnet#method('GridViewHeaderRowPresenter(', ')', 'static void .'),
  \ dotnet#prop('ColumnHeaderContainerStyle', 'Style'),
  \ dotnet#prop('ColumnHeaderTemplate', 'DataTemplate'),
  \ dotnet#prop('ColumnHeaderTemplateSelGridViewHeaderRowPresenter', 'DataTemplateSelGridViewHeaderRowPresenter'),
  \ dotnet#prop('ColumnHeaderStringFormat', 'string'),
  \ dotnet#prop('AllowsColumnReorder', 'bool'),
  \ dotnet#prop('ColumnHeaderContextMenu', 'ContextMenu'),
  \ dotnet#prop('ColumnHeaderToolTip', 'object'),
  \ dotnet#prop('ActualColumnHeaders', 'List'),
  \ ])

call dotnet#class('GridViewRowPresenter', 'GridViewRowPresenterBase', [ 
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_Content(', ')', 'object'),
  \ dotnet#method('set_Content(', 'object value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('OnColumnPropertyChanged(', 'class GridViewColumn column, string propertyName)', 'strict void'),
  \ dotnet#method('OnColumnCollectionChanged(', 'class GridViewColumnCollectionChangedEventArgs e)', 'strict void'),
  \ dotnet#method('get_ActualCells(', ')', '.method'),
  \ dotnet#method('GridViewRowPresenter(', ')', 'void'),
  \ dotnet#method('GridViewRowPresenter(', ')', 'static void .'),
  \ dotnet#prop('Content', 'object'),
  \ dotnet#prop('ActualCells', 'List'),
  \ ])

call dotnet#class('GridSplitter', 'Thumb', [ 
  \ dotnet#method('GridSplitter(', ')', 'void'),
  \ dotnet#method('get_ResizeDirection(', ')', 'GridResizeDirection'),
  \ dotnet#method('set_ResizeDirection(', 'GridResizeDirection value)', 'void'),
  \ dotnet#method('get_ResizeBehavior(', ')', 'GridResizeBehavior'),
  \ dotnet#method('set_ResizeBehavior(', 'GridResizeBehavior value)', 'void'),
  \ dotnet#method('get_ShowsPreview(', ')', 'bool'),
  \ dotnet#method('set_ShowsPreview(', 'bool value)', 'void'),
  \ dotnet#method('get_PreviewStyle(', ')', 'Style'),
  \ dotnet#method('set_PreviewStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_KeyboardIncrement(', ')', 'float64'),
  \ dotnet#method('set_KeyboardIncrement(', 'float64 value)', 'void'),
  \ dotnet#method('get_DragIncrement(', ')', 'float64'),
  \ dotnet#method('set_DragIncrement(', 'float64 value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnRenderSizeChanged(', 'class SizeChangedInfo sizeInfo)', 'famorassem void'),
  \ dotnet#method('OnLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('KeyboardMoveSplitter(', 'float64 horizontalChange, float64 verticalChange)', 'bool'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('GridSplitter(', ')', 'static void .'),
  \ dotnet#prop('ResizeDirection', 'GridResizeDirection'),
  \ dotnet#prop('ResizeBehavior', 'GridResizeBehavior'),
  \ dotnet#prop('ShowsPreview', 'bool'),
  \ dotnet#prop('PreviewStyle', 'Style'),
  \ dotnet#prop('KeyboardIncrement', 'float64'),
  \ dotnet#prop('DragIncrement', 'float64'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('GroupStyle', 'Object', [ 
  \ dotnet#method('GroupStyle(', ')', 'void'),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void '),
  \ dotnet#method('add_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_PropertyChanged(', 'class PropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'class PropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('get_Panel(', ')', 'ItemsPanelTemplate'),
  \ dotnet#method('set_Panel(', 'class ItemsPanelTemplate value)', 'void'),
  \ dotnet#method('get_ContainerStyle(', ')', 'Style'),
  \ dotnet#method('set_ContainerStyle(', 'class Style value)', 'void'),
  \ dotnet#method('get_ContainerStyleSelGroupStyle(', ')', 'StyleSelGroupStyle'),
  \ dotnet#method('set_ContainerStyleSelGroupStyle(', 'class StyleSelGroupStyle value)', 'void'),
  \ dotnet#method('get_HeaderTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_HeaderTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_HeaderTemplateSelGroupStyle(', ')', 'DataTemplateSelGroupStyle'),
  \ dotnet#method('set_HeaderTemplateSelGroupStyle(', 'class DataTemplateSelGroupStyle value)', 'void'),
  \ dotnet#method('get_HeaderStringFormat(', ')', 'string'),
  \ dotnet#method('set_HeaderStringFormat(', 'string value)', 'void'),
  \ dotnet#method('get_HidesIfEmpty(', ')', 'bool'),
  \ dotnet#method('set_HidesIfEmpty(', 'bool value)', 'void'),
  \ dotnet#method('get_AlternationCount(', ')', 'int32'),
  \ dotnet#method('set_AlternationCount(', 'int32 value)', 'void'),
  \ dotnet#method('get_Default(', ')', 'static'),
  \ dotnet#method('get_IsAlternationCountSet(', ')', 'bool'),
  \ dotnet#method('GroupStyle(', ')', 'static void .'),
  \ dotnet#event('PropertyChanged', 'PropertyChangedEventHandler'),
  \ dotnet#prop('Panel', 'ItemsPanelTemplate'),
  \ dotnet#prop('ContainerStyle', 'Style'),
  \ dotnet#prop('ContainerStyleSelGroupStyle', 'StyleSelGroupStyle'),
  \ dotnet#prop('HeaderTemplate', 'DataTemplate'),
  \ dotnet#prop('HeaderTemplateSelGroupStyle', 'DataTemplateSelGroupStyle'),
  \ dotnet#prop('HeaderStringFormat', 'string'),
  \ dotnet#prop('HidesIfEmpty', 'bool'),
  \ dotnet#prop('AlternationCount', 'int32'),
  \ dotnet#prop('Default', 'GroupStyle'),
  \ dotnet#prop('IsAlternationCountSet', 'bool'),
  \ ])

call dotnet#class('GroupStyleSelGroupStyleSelector', 'MulticastDelegate', [ 
  \ dotnet#method('GroupStyleSelector(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class CollectionViewGroup group, int32 level)', ''),
  \ dotnet#method('BeginInvoke(', 'class CollectionViewGroup group, int32 level, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('GroupBox', 'HeaderedContentControl', [ 
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('GroupBox(', ')', 'void'),
  \ dotnet#method('GroupBox(', ')', 'static void .'),
  \ ])

call dotnet#class('GroupItem', 'ContentControl', [ 
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('GetPlainText(', ')', 'strict string'),
  \ dotnet#method('get_Generator(', ')', '.method'),
  \ dotnet#method('set_Generator(', 'class ItemContainerGenerator value)', 'void'),
  \ dotnet#method('PrepareItemContainer(', 'object item)', 'void'),
  \ dotnet#method('ClearContainerForItem(', 'object item)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('GroupItem(', ')', 'void'),
  \ dotnet#method('GroupItem(', ')', 'static void .'),
  \ dotnet#prop('Generator', 'ItemContainerGenerator'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('Image', 'FrameworkElement', [ 
  \ dotnet#method('Image(', ')', 'void'),
  \ dotnet#method('get_Source(', ')', 'ImageSource'),
  \ dotnet#method('set_Source(', 'class ImageSource value)', 'void'),
  \ dotnet#method('get_Stretch(', ')', 'Stretch'),
  \ dotnet#method('set_Stretch(', 'Stretch value)', 'void'),
  \ dotnet#method('get_StretchDirection(', ')', 'StretchDirection'),
  \ dotnet#method('set_StretchDirection(', 'StretchDirection value)', 'void'),
  \ dotnet#method('add_ImageFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ImageFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('OnRender(', 'class DrawingContext dc)', 'void'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('get_BaseUri(', ')', 'family'),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('CanProvidePropertyFallback(', 'string property)', 'bool '),
  \ dotnet#method('ProvidePropertyFallback(', 'string property, Exception cause)', 'object '),
  \ dotnet#method('Image(', ')', 'static void .'),
  \ dotnet#event('ImageFailed', 'EventHandler'),
  \ dotnet#prop('Source', 'ImageSource'),
  \ dotnet#prop('Stretch', 'Stretch'),
  \ dotnet#prop('StretchDirection', 'StretchDirection'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('InitializingNewItemEventArgs', 'EventArgs', [ 
  \ dotnet#method('InitializingNewItemEventArgs(', 'object newItem)', 'void'),
  \ dotnet#method('get_NewItem(', ')', 'object'),
  \ dotnet#prop('NewItem', 'object'),
  \ ])

call dotnet#class('InitializingNewItemEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InitializingNewItemEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InitializingNewItemEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InitializingNewItemEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InkCanvas', 'FrameworkElement', [ 
  \ dotnet#method('InkCanvas(', ')', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('HitTestCore(', 'class PointHitTestParameters hitTestParams)', 'HitTestResult'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('GetTop(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetTop(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetBottom(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetBottom(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetLeft(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetLeft(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('GetRight(', 'class UIElement element)', 'static float64'),
  \ dotnet#method('SetRight(', 'class UIElement element, float64 length)', 'static void'),
  \ dotnet#method('get_Strokes(', ')', 'StrokeCollection'),
  \ dotnet#method('set_Strokes(', 'class StrokeCollection value)', 'void'),
  \ dotnet#method('get_SelectionAdorner(', ')', '.method'),
  \ dotnet#method('get_FeedbackAdorner(', ')', '.method'),
  \ dotnet#method('get_IsGestureRecognizerAvailable(', ')', 'bool'),
  \ dotnet#method('get_Children(', ')', 'UIElementCollection'),
  \ dotnet#method('get_DefaultDrawingAttributes(', ')', 'DrawingAttributes'),
  \ dotnet#method('set_DefaultDrawingAttributes(', 'class DrawingAttributes value)', 'void'),
  \ dotnet#method('get_EraserShape(', ')', 'StylusShape'),
  \ dotnet#method('set_EraserShape(', 'class StylusShape value)', 'void'),
  \ dotnet#method('get_ActiveEditingMode(', ')', 'InkCanvasEditingMode'),
  \ dotnet#method('get_EditingMode(', ')', 'InkCanvasEditingMode'),
  \ dotnet#method('set_EditingMode(', 'InkCanvasEditingMode value)', 'void'),
  \ dotnet#method('get_EditingModeInverted(', ')', 'InkCanvasEditingMode'),
  \ dotnet#method('set_EditingModeInverted(', 'InkCanvasEditingMode value)', 'void'),
  \ dotnet#method('get_UseCustomCursor(', ')', 'bool'),
  \ dotnet#method('set_UseCustomCursor(', 'bool value)', 'void'),
  \ dotnet#method('get_MoveEnabled(', ')', 'bool'),
  \ dotnet#method('set_MoveEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_ResizeEnabled(', ')', 'bool'),
  \ dotnet#method('set_ResizeEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_DefaultStylusPointDescription(', ')', 'StylusPointDescription'),
  \ dotnet#method('set_DefaultStylusPointDescription(', 'class StylusPointDescription value)', 'void'),
  \ dotnet#method('get_PreferredPasteFormats(', ')', 'IEnumerable'),
  \ dotnet#method('set_PreferredPasteFormats(', 'class IEnumerable value)', 'void'),
  \ dotnet#method('add_StrokeCollected(', 'class InkCanvasStrokeCollectedEventHandler value)', 'void'),
  \ dotnet#method('remove_StrokeCollected(', 'class InkCanvasStrokeCollectedEventHandler value)', 'void'),
  \ dotnet#method('OnStrokeCollected(', 'class InkCanvasStrokeCollectedEventArgs e)', 'void'),
  \ dotnet#method('RaiseGestureOrStrokeCollected(', 'class InkCanvasStrokeCollectedEventArgs e, bool userInitiated)', 'void'),
  \ dotnet#method('add_Gesture(', 'class InkCanvasGestureEventHandler value)', 'void'),
  \ dotnet#method('remove_Gesture(', 'class InkCanvasGestureEventHandler value)', 'void'),
  \ dotnet#method('OnGesture(', 'class InkCanvasGestureEventArgs e)', 'void'),
  \ dotnet#method('add_StrokesReplaced(', 'class InkCanvasStrokesReplacedEventHandler value)', 'void'),
  \ dotnet#method('remove_StrokesReplaced(', 'class InkCanvasStrokesReplacedEventHandler value)', 'void'),
  \ dotnet#method('OnStrokesReplaced(', 'class InkCanvasStrokesReplacedEventArgs e)', 'void'),
  \ dotnet#method('add_DefaultDrawingAttributesReplaced(', 'class DrawingAttributesReplacedEventHandler value)', 'void'),
  \ dotnet#method('remove_DefaultDrawingAttributesReplaced(', 'class DrawingAttributesReplacedEventHandler value)', 'void'),
  \ dotnet#method('OnDefaultDrawingAttributesReplaced(', 'class DrawingAttributesReplacedEventArgs e)', 'void'),
  \ dotnet#method('add_ActiveEditingModeChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_ActiveEditingModeChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnActiveEditingModeChanged(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('RaiseActiveEditingModeChanged(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_EditingModeChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_EditingModeChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnEditingModeChanged(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_EditingModeInvertedChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_EditingModeInvertedChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnEditingModeInvertedChanged(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_SelectionMoving(', 'class InkCanvasSelectionEditingEventHandler value)', 'void'),
  \ dotnet#method('remove_SelectionMoving(', 'class InkCanvasSelectionEditingEventHandler value)', 'void'),
  \ dotnet#method('OnSelectionMoving(', 'class InkCanvasSelectionEditingEventArgs e)', 'void'),
  \ dotnet#method('RaiseSelectionMoving(', 'class InkCanvasSelectionEditingEventArgs e)', 'void'),
  \ dotnet#method('add_SelectionMoved(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SelectionMoved(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnSelectionMoved(', 'class EventArgs e)', 'void'),
  \ dotnet#method('RaiseSelectionMoved(', 'class EventArgs e)', 'void'),
  \ dotnet#method('add_StrokeErasing(', 'class InkCanvasStrokeErasingEventHandler value)', 'void'),
  \ dotnet#method('remove_StrokeErasing(', 'class InkCanvasStrokeErasingEventHandler value)', 'void'),
  \ dotnet#method('OnStrokeErasing(', 'class InkCanvasStrokeErasingEventArgs e)', 'void'),
  \ dotnet#method('RaiseStrokeErasing(', 'class InkCanvasStrokeErasingEventArgs e)', 'void'),
  \ dotnet#method('add_StrokeErased(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_StrokeErased(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnStrokeErased(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('RaiseInkErased(', ')', 'void'),
  \ dotnet#method('add_SelectionResizing(', 'class InkCanvasSelectionEditingEventHandler value)', 'void'),
  \ dotnet#method('remove_SelectionResizing(', 'class InkCanvasSelectionEditingEventHandler value)', 'void'),
  \ dotnet#method('OnSelectionResizing(', 'class InkCanvasSelectionEditingEventArgs e)', 'void'),
  \ dotnet#method('RaiseSelectionResizing(', 'class InkCanvasSelectionEditingEventArgs e)', 'void'),
  \ dotnet#method('add_SelectionResized(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SelectionResized(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnSelectionResized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('RaiseSelectionResized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('add_SelectionChanging(', 'class InkCanvasSelectionChangingEventHandler value)', 'void'),
  \ dotnet#method('remove_SelectionChanging(', 'class InkCanvasSelectionChangingEventHandler value)', 'void'),
  \ dotnet#method('OnSelectionChanging(', 'class InkCanvasSelectionChangingEventArgs e)', 'void'),
  \ dotnet#method('add_SelectionChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_SelectionChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnSelectionChanged(', 'class EventArgs e)', 'void'),
  \ dotnet#method('RaiseSelectionChanged(', 'class EventArgs e)', 'void'),
  \ dotnet#method('RaiseOnVisualChildrenChanged(', 'class DependencyObject visualAdded, DependencyObject visualRemoved)', 'void'),
  \ dotnet#method('GetEnabledGestures(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('SetEnabledGestures(', 'class IEnumerable applicationGestures)', 'void'),
  \ dotnet#method('GetSelectionBounds(', ')', 'Rect'),
  \ dotnet#method('GetSelectedElements(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('GetSelectedStrokes(', ')', 'StrokeCollection'),
  \ dotnet#method('Select(', 'class StrokeCollection selectedStrokes)', 'void'),
  \ dotnet#method('Select(', 'class IEnumerable selectedElements)', 'void'),
  \ dotnet#method('Select(', 'class StrokeCollection selectedStrokes, IEnumerable selectedElements)', 'void'),
  \ dotnet#method('HitTestSelection(', 'Point point)', 'InkCanvasSelectionHitResult'),
  \ dotnet#method('CopySelection(', ')', 'void'),
  \ dotnet#method('CutSelection(', ')', 'void'),
  \ dotnet#method('Paste(', ')', 'void'),
  \ dotnet#method('Paste(', 'Point point)', 'void'),
  \ dotnet#method('CanPaste(', ')', 'bool'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string textData)', 'void '),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_DynamicRenderer(', ')', 'DynamicRenderer'),
  \ dotnet#method('set_DynamicRenderer(', 'class DynamicRenderer value)', 'void'),
  \ dotnet#method('get_InkPresenter(', ')', 'InkPresenter'),
  \ dotnet#method('PasteFromDataObject(', 'class IDataObject dataObj, Point point)', 'void'),
  \ dotnet#method('get_EditingCoordinator(', ')', '.method'),
  \ dotnet#method('get_InternalDynamicRenderer(', ')', '.method'),
  \ dotnet#method('get_InnerCanvas(', ')', '.method'),
  \ dotnet#method('get_InkCanvasSelection(', ')', '.method'),
  \ dotnet#method('BeginDynamicSelection(', 'class Visual visual)', 'void'),
  \ dotnet#method('UpdateDynamicSelection(', 'class StrokeCollection strokesToDynamicallySelect, StrokeCollection strokesToDynamicallyUnselect)', 'void'),
  \ dotnet#method('EndDynamicSelection(', 'class Visual visual)', 'StrokeCollection'),
  \ dotnet#method('ClearSelectionRaiseSelectionChanging(', ')', 'bool'),
  \ dotnet#method('ClearSelection(', 'bool raiseSelectionChangedEvent)', 'void'),
  \ dotnet#method('ChangeInkCanvasSelection(', 'class StrokeCollection strokes, UIElement[] elements)', 'void'),
  \ dotnet#method('GetValidStrokes(', 'class StrokeCollection subset, StrokeCollection superset)', 'static StrokeCollection'),
  \ dotnet#method('UpdateDynamicRenderer(', ')', 'void'),
  \ dotnet#method('UpdateCursor(', ')', 'void'),
  \ dotnet#method('InkCanvas(', ')', 'static void .'),
  \ dotnet#event('StrokeCollected', 'InkCanvasStrokeCollectedEventHandler'),
  \ dotnet#event('Gesture', 'InkCanvasGestureEventHandler'),
  \ dotnet#event('StrokesReplaced', 'InkCanvasStrokesReplacedEventHandler'),
  \ dotnet#event('DefaultDrawingAttributesReplaced', 'DrawingAttributesReplacedEventHandler'),
  \ dotnet#event('ActiveEditingModeChanged', 'RoutedEventHandler'),
  \ dotnet#event('EditingModeChanged', 'RoutedEventHandler'),
  \ dotnet#event('EditingModeInvertedChanged', 'RoutedEventHandler'),
  \ dotnet#event('SelectionMoving', 'InkCanvasSelectionEditingEventHandler'),
  \ dotnet#event('SelectionMoved', 'EventHandler'),
  \ dotnet#event('StrokeErasing', 'InkCanvasStrokeErasingEventHandler'),
  \ dotnet#event('StrokeErased', 'RoutedEventHandler'),
  \ dotnet#event('SelectionResizing', 'InkCanvasSelectionEditingEventHandler'),
  \ dotnet#event('SelectionResized', 'EventHandler'),
  \ dotnet#event('SelectionChanging', 'InkCanvasSelectionChangingEventHandler'),
  \ dotnet#event('SelectionChanged', 'EventHandler'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('Strokes', 'StrokeCollection'),
  \ dotnet#prop('SelectionAdorner', 'InkCanvasSelectionAdorner'),
  \ dotnet#prop('FeedbackAdorner', 'InkCanvasFeedbackAdorner'),
  \ dotnet#prop('IsGestureRecognizerAvailable', 'bool'),
  \ dotnet#prop('Children', 'UIElementCollection'),
  \ dotnet#prop('DefaultDrawingAttributes', 'DrawingAttributes'),
  \ dotnet#prop('EraserShape', 'StylusShape'),
  \ dotnet#prop('ActiveEditingMode', 'InkCanvasEditingMode'),
  \ dotnet#prop('EditingMode', 'InkCanvasEditingMode'),
  \ dotnet#prop('EditingModeInverted', 'InkCanvasEditingMode'),
  \ dotnet#prop('UseCustomCursor', 'bool'),
  \ dotnet#prop('MoveEnabled', 'bool'),
  \ dotnet#prop('ResizeEnabled', 'bool'),
  \ dotnet#prop('DefaultStylusPointDescription', 'StylusPointDescription'),
  \ dotnet#prop('PreferredPasteFormats', 'IEnumerable'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('DynamicRenderer', 'DynamicRenderer'),
  \ dotnet#prop('InkPresenter', 'InkPresenter'),
  \ dotnet#prop('EditingCoordinator', 'EditingCoordinator'),
  \ dotnet#prop('InternalDynamicRenderer', 'DynamicRenderer'),
  \ dotnet#prop('InnerCanvas', 'InkCanvasInnerCanvas'),
  \ dotnet#prop('InkCanvasSelection', 'InkCanvasSelection'),
  \ ])

call dotnet#class('InkPresenter', 'Decorator', [ 
  \ dotnet#method('InkPresenter(', ')', 'void'),
  \ dotnet#method('AttachVisuals(', 'class Visual visual, DrawingAttributes drawingAttributes)', 'void'),
  \ dotnet#method('DetachVisuals(', 'class Visual visual)', 'void'),
  \ dotnet#method('get_Strokes(', ')', 'StrokeCollection'),
  \ dotnet#method('set_Strokes(', 'class StrokeCollection value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('GetLayoutClip(', 'Size layoutSlotSize)', 'Geometry'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('ContainsAttachedVisual(', 'class Visual visual)', 'bool'),
  \ dotnet#method('AttachedVisualIsPositionedCorrectly(', 'class Visual visual, DrawingAttributes drawingAttributes)', 'bool'),
  \ dotnet#method('InkPresenter(', ')', 'static void .'),
  \ dotnet#prop('Strokes', 'StrokeCollection'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ ])

call dotnet#class('ItemCollection', 'CollectionView', [ 
  \ dotnet#method('ItemCollection(', 'class DependencyObject modelParent)', 'void'),
  \ dotnet#method('ItemCollection(', 'class FrameworkElement modelParent, int32 capacity)', 'void'),
  \ dotnet#method('MoveCurrentToFirst(', ')', 'bool'),
  \ dotnet#method('MoveCurrentToNext(', ')', 'bool'),
  \ dotnet#method('MoveCurrentToPrevious(', ')', 'bool'),
  \ dotnet#method('MoveCurrentToLast(', ')', 'bool'),
  \ dotnet#method('MoveCurrentTo(', 'object item)', 'bool'),
  \ dotnet#method('MoveCurrentToPosition(', 'int32 position)', 'bool'),
  \ dotnet#method('GetEnumerator(', ')', 'IEnumerator'),
  \ dotnet#method('Add(', 'object newItem)', 'int32'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object containItem)', 'bool'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('IndexOf(', 'object item)', 'int32'),
  \ dotnet#method('GetItemAt(', 'int32 index)', 'object'),
  \ dotnet#method('Insert(', 'int32 insertIndex, object insertItem)', 'void'),
  \ dotnet#method('Remove(', 'object removeItem)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 removeIndex)', 'void'),
  \ dotnet#method('PassesFilter(', 'object item)', 'bool'),
  \ dotnet#method('RefreshOverride(', ')', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object'),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void'),
  \ dotnet#method('get_SourceCollection(', ')', ''),
  \ dotnet#method('get_NeedsRefresh(', ')', 'bool'),
  \ dotnet#method('get_SortDescriptions(', ')', ''),
  \ dotnet#method('get_CanSort(', ')', 'bool'),
  \ dotnet#method('get_Filter(', ')', ''),
  \ dotnet#method('set_Filter(', 'class Predicate value)', 'void'),
  \ dotnet#method('get_CanFilter(', ')', 'bool'),
  \ dotnet#method('get_CanGroup(', ')', 'bool'),
  \ dotnet#method('get_GroupDescriptions(', ')', ''),
  \ dotnet#method('get_Groups(', ')', ''),
  \ dotnet#method('DeferRefresh(', ')', 'IDisposable'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_CurrentPosition(', ')', 'int32'),
  \ dotnet#method('get_CurrentItem(', ')', 'object'),
  \ dotnet#method('get_IsCurrentAfterLast(', ')', 'bool'),
  \ dotnet#method('get_IsCurrentBeforeFirst(', ')', 'bool'),
  \ dotnet#method('get_NewItemPlaceholderPosition(', ')', ''),
  \ dotnet#method('set_NewItemPlaceholderPosition(', 'NewItemPlaceholderPosition value)', 'void '),
  \ dotnet#method('get_CanAddNew(', ')', 'bool '),
  \ dotnet#method('AddNew(', ')', 'object '),
  \ dotnet#method('CommitNew(', ')', 'void '),
  \ dotnet#method('CancelNew(', ')', 'void '),
  \ dotnet#method('get_IsAddingNew(', ')', 'bool '),
  \ dotnet#method('get_CurrentAddItem(', ')', 'object '),
  \ dotnet#method('get_CanRemove(', ')', 'bool '),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void '),
  \ dotnet#method('Remove(', 'object item)', 'void '),
  \ dotnet#method('EditItem(', 'object item)', 'void '),
  \ dotnet#method('CommitEdit(', ')', 'void '),
  \ dotnet#method('CancelEdit(', ')', 'void '),
  \ dotnet#method('get_CanCancelEdit(', ')', 'bool '),
  \ dotnet#method('get_IsEditingItem(', ')', 'bool '),
  \ dotnet#method('get_CurrentEditItem(', ')', 'object '),
  \ dotnet#method('get_CanAddNewItem(', ')', 'bool '),
  \ dotnet#method('AddNewItem(', 'object newItem)', 'object '),
  \ dotnet#method('get_ItemProperties(', ')', ''),
  \ dotnet#method('get_ModelParent(', ')', '.method'),
  \ dotnet#method('get_ModelParentFE(', ')', '.method'),
  \ dotnet#method('SetItemsSource(', 'class IEnumerable value)', 'void'),
  \ dotnet#method('ClearItemsSource(', ')', 'void'),
  \ dotnet#method('get_ItemsSource(', ')', '.method'),
  \ dotnet#method('get_IsUsingItemsSource(', ')', 'bool'),
  \ dotnet#method('get_CollectionView(', ')', '.method'),
  \ dotnet#method('BeginInit(', ')', 'void'),
  \ dotnet#method('EndInit(', ')', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', '.method'),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool '),
  \ dotnet#method('ItemCollection(', ')', 'static void .'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsEmpty', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('SourceCollection', 'IEnumerable'),
  \ dotnet#prop('NeedsRefresh', 'bool'),
  \ dotnet#prop('SortDescriptions', 'SortDescriptionCollection'),
  \ dotnet#prop('CanSort', 'bool'),
  \ dotnet#prop('Filter', 'Predicate'),
  \ dotnet#prop('CanFilter', 'bool'),
  \ dotnet#prop('CanGroup', 'bool'),
  \ dotnet#prop('GroupDescriptions', 'ObservableCollection'),
  \ dotnet#prop('Groups', 'ReadOnlyObservableCollection'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('CurrentPosition', 'int32'),
  \ dotnet#prop('CurrentItem', 'object'),
  \ dotnet#prop('IsCurrentAfterLast', 'bool'),
  \ dotnet#prop('IsCurrentBeforeFirst', 'bool'),
  \ dotnet#prop('NewItemPlaceholderPosition', 'NewItemPlaceholderPosition'),
  \ dotnet#prop('CanAddNew', 'bool'),
  \ dotnet#prop('IsAddingNew', 'bool'),
  \ dotnet#prop('CurrentAddItem', 'object'),
  \ dotnet#prop('CanRemove', 'bool'),
  \ dotnet#prop('CanCancelEdit', 'bool'),
  \ dotnet#prop('IsEditingItem', 'bool'),
  \ dotnet#prop('CurrentEditItem', 'object'),
  \ dotnet#prop('CanAddNewItem', 'bool'),
  \ dotnet#prop('ItemProperties', 'ReadOnlyCollection'),
  \ dotnet#prop('ModelParent', 'DependencyObject'),
  \ dotnet#prop('ModelParentFE', 'FrameworkElement'),
  \ dotnet#prop('ItemsSource', 'IEnumerable'),
  \ dotnet#prop('IsUsingItemsSource', 'bool'),
  \ dotnet#prop('CollectionView', 'CollectionView'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ ])

call dotnet#class('ItemContainerGenerator', 'Object', [ 
  \ dotnet#method('ItemContainerGenerator(', 'class IGeneratorHost host)', 'void'),
  \ dotnet#method('get_Status(', ')', 'GeneratorStatus'),
  \ dotnet#method('GetItemContainerGeneratorForPanel(', 'class Panel panel)', ''),
  \ dotnet#method('StartAt(', 'GeneratorPosition position, GeneratorDirection direction)', ''),
  \ dotnet#method('StartAt(', 'GeneratorPosition position, GeneratorDirection direction, bool allowStartAtRealizedItem)', ''),
  \ dotnet#method('GenerateNext(', ')', ''),
  \ dotnet#method('GenerateNext(', '[out] bool& isNewlyRealized)', ''),
  \ dotnet#method('PrepareItemContainer(', 'class DependencyObject container)', 'void '),
  \ dotnet#method('Remove(', 'GeneratorPosition position, int32 count)', 'void '),
  \ dotnet#method('RemoveAll(', ')', 'void '),
  \ dotnet#method('Recycle(', 'GeneratorPosition position, int32 count)', 'void '),
  \ dotnet#method('GeneratorPositionFromIndex(', 'int32 itemIndex)', ''),
  \ dotnet#method('IndexFromGeneratorPosition(', 'GeneratorPosition position)', 'int32 '),
  \ dotnet#method('ItemFromContainer(', 'class DependencyObject container)', 'object'),
  \ dotnet#method('ContainerFromItem(', 'object item)', 'DependencyObject'),
  \ dotnet#method('IndexFromContainer(', 'class DependencyObject container)', 'int32'),
  \ dotnet#method('ContainerFromIndex(', 'int32 index)', 'DependencyObject'),
  \ dotnet#method('add_ItemsChanged(', 'class ItemsChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_ItemsChanged(', 'class ItemsChangedEventHandler value)', 'void'),
  \ dotnet#method('add_StatusChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_StatusChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_RecyclableContainers(', ')', '.method'),
  \ dotnet#method('Refresh(', ')', 'void'),
  \ dotnet#method('Release(', ')', 'void'),
  \ dotnet#method('ChangeAlternationCount(', ')', 'void'),
  \ dotnet#method('get_Parent(', ')', '.method'),
  \ dotnet#method('get_Level(', ')', 'int32'),
  \ dotnet#method('get_GroupStyle(', ')', '.method'),
  \ dotnet#method('set_GroupStyle(', 'class GroupStyle value)', 'void'),
  \ dotnet#method('get_Items(', ')', '.method'),
  \ dotnet#method('set_Items(', 'class IList value)', 'void'),
  \ dotnet#method('add_PanelChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_PanelChanged(', 'class EventHandler value)', 'void'),
  \ dotnet#method('OnPanelChanged(', ')', 'void'),
  \ dotnet#method('ReceiveWeakEvent(', 'class Type managerType, object sender, EventArgs e)', 'bool '),
  \ dotnet#method('ItemContainerGenerator(', ')', 'static void .'),
  \ dotnet#event('ItemsChanged', 'ItemsChangedEventHandler'),
  \ dotnet#event('StatusChanged', 'EventHandler'),
  \ dotnet#event('PanelChanged', 'EventHandler'),
  \ dotnet#prop('Status', 'GeneratorStatus'),
  \ dotnet#prop('RecyclableContainers', 'IEnumerable'),
  \ dotnet#prop('Parent', 'ItemContainerGenerator'),
  \ dotnet#prop('Level', 'int32'),
  \ dotnet#prop('GroupStyle', 'GroupStyle'),
  \ dotnet#prop('Items', 'IList'),
  \ ])

call dotnet#class('ItemsPanelTemplate', 'FrameworkTemplate', [ 
  \ dotnet#method('ItemsPanelTemplate(', ')', 'void'),
  \ dotnet#method('ItemsPanelTemplate(', 'class FrameworkElementFItemsPanelTemplatey root)', 'void'),
  \ dotnet#method('get_TargetTypeInternal(', ')', 'strict'),
  \ dotnet#method('SetTargetTypeInternal(', 'class Type targetType)', 'strict void'),
  \ dotnet#method('get_DefaultTargetType(', ')', 'static Type'),
  \ dotnet#method('ProcessTemplateBeforeSeal(', ')', 'strict void'),
  \ dotnet#method('ValidateTemplatedParent(', 'class FrameworkElement templatedParent)', 'void'),
  \ dotnet#prop('TargetTypeInternal', 'Type'),
  \ dotnet#prop('DefaultTargetType', 'Type'),
  \ ])

call dotnet#class('ItemsPresenter', 'FrameworkElement', [ 
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('get_Owner(', ')', '.method'),
  \ dotnet#method('get_Generator(', ')', '.method'),
  \ dotnet#method('get_TemplateInternal(', ')', 'strict'),
  \ dotnet#method('get_TemplateCache(', ')', 'strict'),
  \ dotnet#method('set_TemplateCache(', 'class FrameworkTemplate value)', 'strict void'),
  \ dotnet#method('OnTemplateChangedInternal(', 'class FrameworkTemplate oldTemplate, FrameworkTemplate newTemplate)', 'strict void'),
  \ dotnet#method('OnTemplateChanged(', 'class ItemsPanelTemplate oldTemplate, ItemsPanelTemplate newTemplate)', 'void'),
  \ dotnet#method('FromPanel(', 'class Panel panel)', 'static ItemsPresenter'),
  \ dotnet#method('FromGroupItem(', 'class GroupItem groupItem)', 'static ItemsPresenter'),
  \ dotnet#method('OnAncestorChanged(', ')', 'strict void'),
  \ dotnet#method('ItemsPresenter(', ')', 'void'),
  \ dotnet#method('ItemsPresenter(', ')', 'static void .'),
  \ dotnet#prop('Owner', 'ItemsControl'),
  \ dotnet#prop('Generator', 'ItemContainerGenerator'),
  \ dotnet#prop('TemplateInternal', 'FrameworkTemplate'),
  \ dotnet#prop('TemplateCache', 'FrameworkTemplate'),
  \ ])

call dotnet#class('Label', 'ContentControl', [ 
  \ dotnet#method('Label(', ')', 'void'),
  \ dotnet#method('get_Target(', ')', 'UIElement'),
  \ dotnet#method('set_Target(', 'class UIElement value)', 'void'),
  \ dotnet#method('GetLabeledBy(', 'class DependencyObject o)', 'static Label'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Label(', ')', 'static void .'),
  \ dotnet#prop('Target', 'UIElement'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ListBox', 'SelListBox', [ 
  \ dotnet#method('ListBox(', ')', 'void'),
  \ dotnet#method('SelectAll(', ')', 'void'),
  \ dotnet#method('UnselectAll(', ')', 'void'),
  \ dotnet#method('ScrollIntoView(', 'object item)', 'void'),
  \ dotnet#method('get_SelectionMode(', ')', 'SelectionMode'),
  \ dotnet#method('set_SelectionMode(', 'SelectionMode value)', 'void'),
  \ dotnet#method('get_SelectedItems(', ')', 'IList'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('SetSelectedItems(', 'class IEnumerable selectedItems)', 'bool'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('OnSelectionChanged(', 'class SelectionChangedEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnIsMouseCapturedChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('get_HandlesScrolling(', ')', 'famorassem bool'),
  \ dotnet#method('NotifyListItemClicked(', 'class ListBoxItem item, MouseButton mouseButton)', 'void'),
  \ dotnet#method('NotifyListItemMouseDragged(', 'class ListBoxItem listItem)', 'void'),
  \ dotnet#method('FocusItem(', 'object item, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'strict void'),
  \ dotnet#method('get_AnchorItem(', ')', 'object'),
  \ dotnet#method('set_AnchorItem(', 'object value)', 'void'),
  \ dotnet#method('get_LastActionItem(', ')', '.method'),
  \ dotnet#method('set_LastActionItem(', 'class ListBoxItem value)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ListBox(', ')', 'static void .'),
  \ dotnet#prop('SelectionMode', 'SelectionMode'),
  \ dotnet#prop('SelectedItems', 'IList'),
  \ dotnet#prop('HandlesScrolling', 'bool'),
  \ dotnet#prop('AnchorItem', 'object'),
  \ dotnet#prop('LastActionItem', 'ListBoxItem'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ListView', 'ListBox', [ 
  \ dotnet#method('get_View(', ')', 'ViewBase'),
  \ dotnet#method('set_View(', 'class ViewBase value)', 'void'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('ClearContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('OnItemsChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnThemeChanged(', ')', 'strict void'),
  \ dotnet#method('ListView(', ')', 'void'),
  \ dotnet#method('ListView(', ')', 'static void .'),
  \ dotnet#prop('View', 'ViewBase'),
  \ ])

call dotnet#class('ListViewItem', 'ListBoxItem', [ 
  \ dotnet#method('SetDefaultStyleKey(', 'object key)', 'void'),
  \ dotnet#method('ClearDefaultStyleKey(', ')', 'void'),
  \ dotnet#method('ListViewItem(', ')', 'void'),
  \ ])

call dotnet#class('MediaElement', 'FrameworkElement', [ 
  \ dotnet#method('MediaElement(', ')', 'void'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('get_Clock(', ')', 'MediaClock'),
  \ dotnet#method('set_Clock(', 'class MediaClock value)', 'void'),
  \ dotnet#method('Play(', ')', 'void'),
  \ dotnet#method('Pause(', ')', 'void'),
  \ dotnet#method('Stop(', ')', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('get_Stretch(', ')', 'Stretch'),
  \ dotnet#method('set_Stretch(', 'Stretch value)', 'void'),
  \ dotnet#method('get_StretchDirection(', ')', 'StretchDirection'),
  \ dotnet#method('set_StretchDirection(', 'StretchDirection value)', 'void'),
  \ dotnet#method('get_Volume(', ')', 'float64'),
  \ dotnet#method('set_Volume(', 'float64 value)', 'void'),
  \ dotnet#method('get_Balance(', ')', 'float64'),
  \ dotnet#method('set_Balance(', 'float64 value)', 'void'),
  \ dotnet#method('get_IsMuted(', ')', 'bool'),
  \ dotnet#method('set_IsMuted(', 'bool value)', 'void'),
  \ dotnet#method('get_ScrubbingEnabled(', ')', 'bool'),
  \ dotnet#method('set_ScrubbingEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_UnloadedBehavior(', ')', 'MediaState'),
  \ dotnet#method('set_UnloadedBehavior(', 'MediaState value)', 'void'),
  \ dotnet#method('get_LoadedBehavior(', ')', 'MediaState'),
  \ dotnet#method('set_LoadedBehavior(', 'MediaState value)', 'void'),
  \ dotnet#method('get_CanPause(', ')', 'bool'),
  \ dotnet#method('get_IsBuffering(', ')', 'bool'),
  \ dotnet#method('get_DownloadProgress(', ')', 'float64'),
  \ dotnet#method('get_BufferingProgress(', ')', 'float64'),
  \ dotnet#method('get_NaturalVideoHeight(', ')', 'int32'),
  \ dotnet#method('get_NaturalVideoWidth(', ')', 'int32'),
  \ dotnet#method('get_HasAudio(', ')', 'bool'),
  \ dotnet#method('get_HasVideo(', ')', 'bool'),
  \ dotnet#method('get_NaturalDuration(', ')', 'Duration'),
  \ dotnet#method('get_Position(', ')', 'TimeSpan'),
  \ dotnet#method('set_Position(', 'TimeSpan value)', 'void'),
  \ dotnet#method('get_SpeedRatio(', ')', 'float64'),
  \ dotnet#method('set_SpeedRatio(', 'float64 value)', 'void'),
  \ dotnet#method('add_MediaFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_MediaFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_MediaOpened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_MediaOpened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_BufferingStarted(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_BufferingStarted(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_BufferingEnded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_BufferingEnded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('add_ScriptCommand(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ScriptCommand(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_MediaEnded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_MediaEnded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('MeasureOverride(', 'Size availableSize)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('OnRender(', 'class DrawingContext drawingContext)', 'void'),
  \ dotnet#method('get_Helper(', ')', '.method'),
  \ dotnet#method('OnMediaFailed(', 'object sender, ExceptionEventArgs args)', 'void'),
  \ dotnet#method('OnMediaOpened(', 'object sender, EventArgs args)', 'void'),
  \ dotnet#method('OnBufferingStarted(', 'object sender, EventArgs args)', 'void'),
  \ dotnet#method('OnBufferingEnded(', 'object sender, EventArgs args)', 'void'),
  \ dotnet#method('OnMediaEnded(', 'object sender, EventArgs args)', 'void'),
  \ dotnet#method('OnScriptCommand(', 'object sender, MediaScriptCommandEventArgs args)', 'void'),
  \ dotnet#method('MediaElement(', ')', 'static void .'),
  \ dotnet#event('MediaFailed', 'EventHandler'),
  \ dotnet#event('MediaOpened', 'RoutedEventHandler'),
  \ dotnet#event('BufferingStarted', 'RoutedEventHandler'),
  \ dotnet#event('BufferingEnded', 'RoutedEventHandler'),
  \ dotnet#event('ScriptCommand', 'EventHandler'),
  \ dotnet#event('MediaEnded', 'RoutedEventHandler'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('Clock', 'MediaClock'),
  \ dotnet#prop('Stretch', 'Stretch'),
  \ dotnet#prop('StretchDirection', 'StretchDirection'),
  \ dotnet#prop('Volume', 'float64'),
  \ dotnet#prop('Balance', 'float64'),
  \ dotnet#prop('IsMuted', 'bool'),
  \ dotnet#prop('ScrubbingEnabled', 'bool'),
  \ dotnet#prop('UnloadedBehavior', 'MediaState'),
  \ dotnet#prop('LoadedBehavior', 'MediaState'),
  \ dotnet#prop('CanPause', 'bool'),
  \ dotnet#prop('IsBuffering', 'bool'),
  \ dotnet#prop('DownloadProgress', 'float64'),
  \ dotnet#prop('BufferingProgress', 'float64'),
  \ dotnet#prop('NaturalVideoHeight', 'int32'),
  \ dotnet#prop('NaturalVideoWidth', 'int32'),
  \ dotnet#prop('HasAudio', 'bool'),
  \ dotnet#prop('HasVideo', 'bool'),
  \ dotnet#prop('NaturalDuration', 'Duration'),
  \ dotnet#prop('Position', 'TimeSpan'),
  \ dotnet#prop('SpeedRatio', 'float64'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('Helper', 'AVElementHelper'),
  \ ])

call dotnet#class('Menu', 'MenuBase', [ 
  \ dotnet#method('Menu(', ')', 'void'),
  \ dotnet#method('get_IsMainMenu(', ')', 'bool'),
  \ dotnet#method('set_IsMainMenu(', 'bool value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnInitialized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnTextInput(', 'class TextCompositionEventArgs e)', 'void'),
  \ dotnet#method('HandleMouseButton(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('FocusItem(', 'object item, ItemsControl/ItemNavigateArgs itemNavigateArgs)', 'strict void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Menu(', ')', 'static void .'),
  \ dotnet#prop('IsMainMenu', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('MenuScrollingVisibilityConverter', 'Object', [ 
  \ dotnet#method('Convert(', 'object[] values, Type targetType, object parameter, CultureInfo culture)', 'object'),
  \ dotnet#method('ConvertBack(', 'object value, Type[] targetTypes, object parameter, CultureInfo culture)', 'object[]'),
  \ dotnet#method('MenuScrollingVisibilityConverter(', ')', 'void'),
  \ ])

call dotnet#class('Page', 'FrameworkElement', [ 
  \ dotnet#method('Page(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object obj)', 'void '),
  \ dotnet#method('AddText(', 'string str)', 'void '),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_Content(', ')', 'object'),
  \ dotnet#method('set_Content(', 'object value)', 'void'),
  \ dotnet#method('get_Title(', ')', 'string '),
  \ dotnet#method('set_Title(', 'string value)', 'void '),
  \ dotnet#method('get_WindowTitle(', ')', 'string'),
  \ dotnet#method('set_WindowTitle(', 'string value)', 'void'),
  \ dotnet#method('ShouldJournalWindowTitle(', ')', 'bool'),
  \ dotnet#method('get_Height(', ')', 'float64 '),
  \ dotnet#method('set_Height(', 'float64 value)', 'void '),
  \ dotnet#method('get_WindowHeight(', ')', 'float64'),
  \ dotnet#method('set_WindowHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64 '),
  \ dotnet#method('set_Width(', 'float64 value)', 'void '),
  \ dotnet#method('get_WindowWidth(', ')', 'float64'),
  \ dotnet#method('set_WindowWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Title(', ')', 'string'),
  \ dotnet#method('set_Title(', 'string value)', 'void'),
  \ dotnet#method('get_ShowsNavigationUI(', ')', 'bool'),
  \ dotnet#method('set_ShowsNavigationUI(', 'bool value)', 'void'),
  \ dotnet#method('get_KeepAlive(', ')', 'bool'),
  \ dotnet#method('set_KeepAlive(', 'bool value)', 'void'),
  \ dotnet#method('get_NavigationService(', ')', 'NavigationService'),
  \ dotnet#method('get_Foreground(', ')', 'Brush'),
  \ dotnet#method('set_Foreground(', 'class Brush value)', 'void'),
  \ dotnet#method('get_FontFamily(', ')', 'FontFamily'),
  \ dotnet#method('set_FontFamily(', 'class Fontvalue)', 'void'),
  \ dotnet#method('get_FontSize(', ')', 'float64'),
  \ dotnet#method('set_FontSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_Template(', ')', 'ControlTemplate'),
  \ dotnet#method('set_Template(', 'class ControlTemplate value)', 'void'),
  \ dotnet#method('get_TemplateInternal(', ')', 'strict'),
  \ dotnet#method('get_TemplateCache(', ')', 'strict'),
  \ dotnet#method('set_TemplateCache(', 'class FrameworkTemplate value)', 'strict void'),
  \ dotnet#method('OnTemplateChangedInternal(', 'class FrameworkTemplate oldTemplate, FrameworkTemplate newTemplate)', 'strict void'),
  \ dotnet#method('OnTemplateChanged(', 'class ControlTemplate oldTemplate, ControlTemplate newTemplate)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeBounds)', 'Size'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('get_UserResized(', ')', 'bool '),
  \ dotnet#method('ShouldSerializeWindowTitle(', ')', 'bool'),
  \ dotnet#method('ShouldSerializeWindowHeight(', ')', 'bool'),
  \ dotnet#method('ShouldSerializeWindowWidth(', ')', 'bool'),
  \ dotnet#method('ShouldSerializeTitle(', ')', 'bool'),
  \ dotnet#method('ShouldSerializeShowsNavigationUI(', ')', 'bool'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Page(', ')', 'static void .'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('Content', 'object'),
  \ dotnet#prop('Title', 'string'),
  \ dotnet#prop('WindowTitle', 'string'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('WindowHeight', 'float64'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('WindowWidth', 'float64'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('Title', 'string'),
  \ dotnet#prop('ShowsNavigationUI', 'bool'),
  \ dotnet#prop('KeepAlive', 'bool'),
  \ dotnet#prop('NavigationService', 'NavigationService'),
  \ dotnet#prop('Foreground', 'Brush'),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('FontSize', 'float64'),
  \ dotnet#prop('Template', 'ControlTemplate'),
  \ dotnet#prop('TemplateInternal', 'FrameworkTemplate'),
  \ dotnet#prop('TemplateCache', 'FrameworkTemplate'),
  \ dotnet#prop('UserResized', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('PageRange', 'ValueType', [ 
  \ dotnet#field('_pageFrom', 'int32'),
  \ dotnet#field('_pageTo', 'int32'),
  \ dotnet#method('PageRange(', 'int32 page)', 'void'),
  \ dotnet#method('PageRange(', 'int32 pageFrom, int32 pageTo)', 'void'),
  \ dotnet#method('get_PageFrom(', ')', 'int32'),
  \ dotnet#method('set_PageFrom(', 'int32 value)', 'void'),
  \ dotnet#method('get_PageTo(', ')', 'int32'),
  \ dotnet#method('set_PageTo(', 'int32 value)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('Equals(', 'PageRange pageRange)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('op_Equality(', 'PageRange pr1, PageRange pr2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'PageRange pr1, PageRange pr2)', 'static bool'),
  \ dotnet#prop('PageFrom', 'int32'),
  \ dotnet#prop('PageTo', 'int32'),
  \ ])

call dotnet#class('PasswordBox', 'Control', [ 
  \ dotnet#method('PasswordBox(', ')', 'void'),
  \ dotnet#method('Paste(', ')', 'void'),
  \ dotnet#method('SelectAll(', ')', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('get_Password(', ')', 'string'),
  \ dotnet#method('set_Password(', 'string value)', 'void'),
  \ dotnet#method('get_SecurePassword(', ')', 'SecureString'),
  \ dotnet#method('get_PasswordChar(', ')', 'char'),
  \ dotnet#method('set_PasswordChar(', 'char value)', 'void'),
  \ dotnet#method('get_MaxLength(', ')', 'int32'),
  \ dotnet#method('set_MaxLength(', 'int32 value)', 'void'),
  \ dotnet#method('get_SelectionBrush(', ')', 'Brush'),
  \ dotnet#method('set_SelectionBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_SelectionOpacity(', ')', 'float64'),
  \ dotnet#method('set_SelectionOpacity(', 'float64 value)', 'void'),
  \ dotnet#method('get_CaretBrush(', ')', 'Brush'),
  \ dotnet#method('set_CaretBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('add_PasswordChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_PasswordChanged(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('OnTemplateChanged(', 'class ControlTemplate oldTemplate, ControlTemplate newTemplate)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnKeyUp(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnTextInput(', 'class TextCompositionEventArgs e)', 'void'),
  \ dotnet#method('OnMouseDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnMouseMove(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('OnMouseUp(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnQueryCursor(', 'class QueryCursorEventArgs e)', 'void'),
  \ dotnet#method('OnQueryContinueDrag(', 'class QueryContinueDragEventArgs e)', 'void'),
  \ dotnet#method('OnGiveFeedback(', 'class GiveFeedbackEventArgs e)', 'void'),
  \ dotnet#method('OnDragEnter(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('OnDragOver(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('OnDragLeave(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('OnDrop(', 'class DragEventArgs e)', 'void'),
  \ dotnet#method('OnContextMenuOpening(', 'class ContextMenuEventArgs e)', 'void'),
  \ dotnet#method('OnGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('OnLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('OnLostFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_TextContainer(', ')', '.method'),
  \ dotnet#method('get_RenderScope(', ')', '.method'),
  \ dotnet#method('get_ScrollViewer(', ')', '.method'),
  \ dotnet#method('get_TextContainer(', ')', ''),
  \ dotnet#method('get_IsTypographyDefaultValue(', ')', 'bool '),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('PasswordBox(', ')', 'static void .'),
  \ dotnet#event('PasswordChanged', 'RoutedEventHandler'),
  \ dotnet#prop('Password', 'string'),
  \ dotnet#prop('SecurePassword', 'SecureString'),
  \ dotnet#prop('PasswordChar', 'char'),
  \ dotnet#prop('MaxLength', 'int32'),
  \ dotnet#prop('SelectionBrush', 'Brush'),
  \ dotnet#prop('SelectionOpacity', 'float64'),
  \ dotnet#prop('CaretBrush', 'Brush'),
  \ dotnet#prop('TextContainer', 'PasswordTextContainer'),
  \ dotnet#prop('RenderScope', 'FrameworkElement'),
  \ dotnet#prop('ScrollViewer', 'ScrollViewer'),
  \ dotnet#prop('TextContainer', 'ITextContainer'),
  \ dotnet#prop('IsTypographyDefaultValue', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('VirtualizingStackPanel', 'VirtualizingPanel', [ 
  \ dotnet#method('HeaderSize(', 'bool isHorizontal)', 'abstract float64'),
  \ dotnet#method('EstimatedContainerSize(', 'bool isHorizontal)', 'abstract float64'),
  \ dotnet#method('VirtualizingStackPanel(', ')', 'void'),
  \ dotnet#method('LineUp(', ')', 'void'),
  \ dotnet#method('LineDown(', ')', 'void'),
  \ dotnet#method('LineLeft(', ')', 'void'),
  \ dotnet#method('LineRight(', ')', 'void'),
  \ dotnet#method('PageUp(', ')', 'void'),
  \ dotnet#method('PageDown(', ')', 'void'),
  \ dotnet#method('PageLeft(', ')', 'void'),
  \ dotnet#method('PageRight(', ')', 'void'),
  \ dotnet#method('MouseWheelUp(', ')', 'void'),
  \ dotnet#method('MouseWheelDown(', ')', 'void'),
  \ dotnet#method('MouseWheelLeft(', ')', 'void'),
  \ dotnet#method('MouseWheelRight(', ')', 'void'),
  \ dotnet#method('SetHorizontalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('SetVerticalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('MakeVisible(', 'class Visual visual, Rect rectangle)', ''),
  \ dotnet#method('BringIndexIntoView(', 'int32 index)', 'famorassem void'),
  \ dotnet#method('get_Orientation(', ')', 'Orientation'),
  \ dotnet#method('set_Orientation(', 'Orientation value)', 'void'),
  \ dotnet#method('get_HasLogicalOrientation(', ')', 'famorassem bool'),
  \ dotnet#method('get_LogicalOrientation(', ')', 'famorassem'),
  \ dotnet#method('GetIsVirtualizing(', 'class DependencyObject o)', 'static bool'),
  \ dotnet#method('SetIsVirtualizing(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetVirtualizationMode(', 'class DependencyObject element)', 'static VirtualizationMode'),
  \ dotnet#method('SetVirtualizationMode(', 'class DependencyObject element, VirtualizationMode value)', 'static void'),
  \ dotnet#method('get_CanHorizontallyScroll(', ')', 'bool'),
  \ dotnet#method('set_CanHorizontallyScroll(', 'bool value)', 'void'),
  \ dotnet#method('get_CanVerticallyScroll(', ')', 'bool'),
  \ dotnet#method('set_CanVerticallyScroll(', 'bool value)', 'void'),
  \ dotnet#method('get_ExtentWidth(', ')', 'float64'),
  \ dotnet#method('get_ExtentHeight(', ')', 'float64'),
  \ dotnet#method('get_ViewportWidth(', ')', 'float64'),
  \ dotnet#method('get_ViewportHeight(', ')', 'float64'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('get_ScrollOwner(', ')', ''),
  \ dotnet#method('set_ScrollOwner(', 'class ScrollViewer value)', 'void'),
  \ dotnet#method('AddCleanUpVirtualizedItemHandler(', 'class DependencyObject element, CleanUpVirtualizedItemEventHandler handler)', 'static void'),
  \ dotnet#method('RemoveCleanUpVirtualizedItemHandler(', 'class DependencyObject element, CleanUpVirtualizedItemEventHandler handler)', 'static void'),
  \ dotnet#method('OnCleanUpVirtualizedItem(', 'class CleanUpVirtualizedItemEventArgs e)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('OnItemsChanged(', 'object sender, ItemsChangedEventArgs args)', 'void'),
  \ dotnet#method('OnClearChildren(', ')', 'void'),
  \ dotnet#method('OnGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('OnLostKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('ClearAllContainers(', 'class ItemsControl itemsControl)', 'void'),
  \ dotnet#method('OnViewportSizeChanged(', 'Size oldViewportSize, Size newViewportSize)', 'void'),
  \ dotnet#method('OnViewportOffsetChanged(', 'VVirtualizingStackPanel oldViewportOffset, VVirtualizingStackPanel newViewportOffset)', 'void'),
  \ dotnet#method('get_IsScrolling(', ')', 'bool'),
  \ dotnet#method('get_IsPixelBased(', ')', 'bool'),
  \ dotnet#method('set_IsPixelBased(', 'bool value)', 'void'),
  \ dotnet#method('VirtualizingStackPanel(', ')', 'static void .'),
  \ dotnet#prop('Orientation', 'Orientation'),
  \ dotnet#prop('HasLogicalOrientation', 'bool'),
  \ dotnet#prop('LogicalOrientation', 'Orientation'),
  \ dotnet#prop('CanHorizontallyScroll', 'bool'),
  \ dotnet#prop('CanVerticallyScroll', 'bool'),
  \ dotnet#prop('ExtentWidth', 'float64'),
  \ dotnet#prop('ExtentHeight', 'float64'),
  \ dotnet#prop('ViewportWidth', 'float64'),
  \ dotnet#prop('ViewportHeight', 'float64'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('ScrollOwner', 'ScrollViewer'),
  \ dotnet#prop('IsScrolling', 'bool'),
  \ dotnet#prop('IsPixelBased', 'bool'),
  \ ])

call dotnet#class('TextBox', 'TextBoxBase', [ 
  \ dotnet#method('TextBox(', ')', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('Select(', 'int32 start, int32 length)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('GetCharacterIndexFromPoint(', 'Point point, bool snapToText)', 'int32'),
  \ dotnet#method('GetCharacterIndexFromLineIndex(', 'int32 lineIndex)', 'int32'),
  \ dotnet#method('GetLineIndexFromCharacterIndex(', 'int32 charIndex)', 'int32'),
  \ dotnet#method('GetLineLength(', 'int32 lineIndex)', 'int32'),
  \ dotnet#method('GetFirstVisibleLineIndex(', ')', 'int32'),
  \ dotnet#method('GetLastVisibleLineIndex(', ')', 'int32'),
  \ dotnet#method('ScrollToLine(', 'int32 lineIndex)', 'void'),
  \ dotnet#method('GetLineText(', 'int32 lineIndex)', 'string'),
  \ dotnet#method('GetRectFromCharacterIndex(', 'int32 charIndex)', 'Rect'),
  \ dotnet#method('GetRectFromCharacterIndex(', 'int32 charIndex, bool trailingEdge)', 'Rect'),
  \ dotnet#method('GetSpellingError(', 'int32 charIndex)', 'SpellingError'),
  \ dotnet#method('GetSpellingErrorStart(', 'int32 charIndex)', 'int32'),
  \ dotnet#method('GetSpellingErrorLength(', 'int32 charIndex)', 'int32'),
  \ dotnet#method('GetNextSpellingErrorCharacterIndex(', 'int32 charIndex, LogicalDirection direction)', 'int32'),
  \ dotnet#method('get_TextWrapping(', ')', 'TextWrapping'),
  \ dotnet#method('set_TextWrapping(', 'TextWrapping value)', 'void'),
  \ dotnet#method('get_MinLines(', ')', 'int32'),
  \ dotnet#method('set_MinLines(', 'int32 value)', 'void'),
  \ dotnet#method('get_MaxLines(', ')', 'int32'),
  \ dotnet#method('set_MaxLines(', 'int32 value)', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('get_CharacterCasing(', ')', 'CharacterCasing'),
  \ dotnet#method('set_CharacterCasing(', 'CharacterCasing value)', 'void'),
  \ dotnet#method('get_MaxLength(', ')', 'int32'),
  \ dotnet#method('set_MaxLength(', 'int32 value)', 'void'),
  \ dotnet#method('get_TextAlignment(', ')', 'TextAlignment'),
  \ dotnet#method('set_TextAlignment(', 'TextAlignment value)', 'void'),
  \ dotnet#method('get_SelectedText(', ')', 'string'),
  \ dotnet#method('set_SelectedText(', 'string value)', 'void'),
  \ dotnet#method('get_SelectionLength(', ')', 'int32'),
  \ dotnet#method('set_SelectionLength(', 'int32 value)', 'void'),
  \ dotnet#method('get_SelectionStart(', ')', 'int32'),
  \ dotnet#method('set_SelectionStart(', 'int32 value)', 'void'),
  \ dotnet#method('get_CaretIndex(', ')', 'int32'),
  \ dotnet#method('set_CaretIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_LineCount(', ')', 'int32'),
  \ dotnet#method('get_TextDecorations(', ')', 'TextDecorationCollection'),
  \ dotnet#method('set_TextDecorations(', 'class TextDecorationCollection value)', 'void'),
  \ dotnet#method('get_Typography(', ')', 'Typography'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('OnTextWrappingChanged(', ')', 'void'),
  \ dotnet#method('CreateRenderScope(', ')', 'strict'),
  \ dotnet#method('AttachToVisualTree(', ')', 'strict void'),
  \ dotnet#method('GetPlainText(', ')', 'strict string'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('DoLineUp(', ')', 'strict void'),
  \ dotnet#method('DoLineDown(', ')', 'strict void'),
  \ dotnet#method('OnTextContainerChanged(', 'object sender, TextContainerChangedEventArgs e)', 'strict void'),
  \ dotnet#method('OnDeferredTextReferenceResolved(', 'class DeferredTextReference dtr, string s)', 'void'),
  \ dotnet#method('OnScrollChanged(', 'object sender, ScrollChangedEventArgs e)', 'strict void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_Selection(', ')', '.method'),
  \ dotnet#method('get_StartPosition(', ')', '.method'),
  \ dotnet#method('get_EndPosition(', ')', '.method'),
  \ dotnet#method('get_IsTypographyDefaultValue(', ')', 'bool'),
  \ dotnet#method('get_TextContainer(', ')', ''),
  \ dotnet#method('get_IsTypographyDefaultValue(', ')', 'bool '),
  \ dotnet#method('ShouldSerializeText(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#method('TextBox(', ')', 'static void .'),
  \ dotnet#prop('TextWrapping', 'TextWrapping'),
  \ dotnet#prop('MinLines', 'int32'),
  \ dotnet#prop('MaxLines', 'int32'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('CharacterCasing', 'CharacterCasing'),
  \ dotnet#prop('MaxLength', 'int32'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('SelectedText', 'string'),
  \ dotnet#prop('SelectionLength', 'int32'),
  \ dotnet#prop('SelectionStart', 'int32'),
  \ dotnet#prop('CaretIndex', 'int32'),
  \ dotnet#prop('LineCount', 'int32'),
  \ dotnet#prop('TextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('Typography', 'Typography'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Selection', 'TextSelection'),
  \ dotnet#prop('StartPosition', 'TextPointer'),
  \ dotnet#prop('EndPosition', 'TextPointer'),
  \ dotnet#prop('IsTypographyDefaultValue', 'bool'),
  \ dotnet#prop('TextContainer', 'ITextContainer'),
  \ dotnet#prop('IsTypographyDefaultValue', 'bool'),
  \ ])

call dotnet#class('ScrollContentPresenter', 'ContentPresenter', [ 
  \ dotnet#method('ScrollContentPresenter(', ')', 'void'),
  \ dotnet#method('LineUp(', ')', 'void'),
  \ dotnet#method('LineDown(', ')', 'void'),
  \ dotnet#method('LineLeft(', ')', 'void'),
  \ dotnet#method('LineRight(', ')', 'void'),
  \ dotnet#method('PageUp(', ')', 'void'),
  \ dotnet#method('PageDown(', ')', 'void'),
  \ dotnet#method('PageLeft(', ')', 'void'),
  \ dotnet#method('PageRight(', ')', 'void'),
  \ dotnet#method('MouseWheelUp(', ')', 'void'),
  \ dotnet#method('MouseWheelDown(', ')', 'void'),
  \ dotnet#method('MouseWheelLeft(', ')', 'void'),
  \ dotnet#method('MouseWheelRight(', ')', 'void'),
  \ dotnet#method('SetHorizontalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('SetVerticalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('MakeVisible(', 'class Visual visual, Rect rectangle)', ''),
  \ dotnet#method('get_AdornerLayer(', ')', 'AdornerLayer'),
  \ dotnet#method('get_CanContentScroll(', ')', 'bool'),
  \ dotnet#method('set_CanContentScroll(', 'bool value)', 'void'),
  \ dotnet#method('get_CanHorizontallyScroll(', ')', 'bool'),
  \ dotnet#method('set_CanHorizontallyScroll(', 'bool value)', 'void'),
  \ dotnet#method('get_CanVerticallyScroll(', ')', 'bool'),
  \ dotnet#method('set_CanVerticallyScroll(', 'bool value)', 'void'),
  \ dotnet#method('get_ExtentWidth(', ')', 'float64'),
  \ dotnet#method('get_ExtentHeight(', ')', 'float64'),
  \ dotnet#method('get_ViewportWidth(', ')', 'float64'),
  \ dotnet#method('get_ViewportHeight(', ')', 'float64'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('get_ScrollOwner(', ')', ''),
  \ dotnet#method('set_ScrollOwner(', 'class ScrollViewer value)', 'void'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_TemplateChild(', ')', 'strict'),
  \ dotnet#method('set_TemplateChild(', 'class UIElement value)', 'strict void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('GetLayoutClip(', 'Size layoutSlotSize)', 'Geometry'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('MakeVisible(', 'class Visual visual, Rect rectangle, bool throwOnError)', 'Rect'),
  \ dotnet#method('ComputeScrollOffsetWithMinimalScroll(', 'float64 topView, float64 bottomView, float64 topChild, float64 bottomChild)', 'static float64'),
  \ dotnet#method('ValidateInputOffset(', 'float64 offset, string parameterName)', 'static float64'),
  \ dotnet#method('HookupScrollingComponents(', ')', 'void'),
  \ dotnet#method('CoerceOffset(', 'float64 offset, float64 extent, float64 viewport)', 'static float64'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('ScrollContentPresenter(', ')', 'static void .'),
  \ dotnet#prop('AdornerLayer', 'AdornerLayer'),
  \ dotnet#prop('CanContentScroll', 'bool'),
  \ dotnet#prop('CanHorizontallyScroll', 'bool'),
  \ dotnet#prop('CanVerticallyScroll', 'bool'),
  \ dotnet#prop('ExtentWidth', 'float64'),
  \ dotnet#prop('ExtentHeight', 'float64'),
  \ dotnet#prop('ViewportWidth', 'float64'),
  \ dotnet#prop('ViewportHeight', 'float64'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('ScrollOwner', 'ScrollViewer'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('TemplateChild', 'UIElement'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('StackPanel', 'Panel', [ 
  \ dotnet#method('StackPanel(', ')', 'void'),
  \ dotnet#method('LineUp(', ')', 'void'),
  \ dotnet#method('LineDown(', ')', 'void'),
  \ dotnet#method('LineLeft(', ')', 'void'),
  \ dotnet#method('LineRight(', ')', 'void'),
  \ dotnet#method('PageUp(', ')', 'void'),
  \ dotnet#method('PageDown(', ')', 'void'),
  \ dotnet#method('PageLeft(', ')', 'void'),
  \ dotnet#method('PageRight(', ')', 'void'),
  \ dotnet#method('MouseWheelUp(', ')', 'void'),
  \ dotnet#method('MouseWheelDown(', ')', 'void'),
  \ dotnet#method('MouseWheelLeft(', ')', 'void'),
  \ dotnet#method('MouseWheelRight(', ')', 'void'),
  \ dotnet#method('SetHorizontalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('SetVerticalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('MakeVisible(', 'class Visual visual, Rect rectangle)', ''),
  \ dotnet#method('get_Orientation(', ')', 'Orientation'),
  \ dotnet#method('set_Orientation(', 'Orientation value)', 'void'),
  \ dotnet#method('get_HasLogicalOrientation(', ')', 'famorassem bool'),
  \ dotnet#method('get_LogicalOrientation(', ')', 'famorassem'),
  \ dotnet#method('get_CanHorizontallyScroll(', ')', 'bool'),
  \ dotnet#method('set_CanHorizontallyScroll(', 'bool value)', 'void'),
  \ dotnet#method('get_CanVerticallyScroll(', ')', 'bool'),
  \ dotnet#method('set_CanVerticallyScroll(', 'bool value)', 'void'),
  \ dotnet#method('get_ExtentWidth(', ')', 'float64'),
  \ dotnet#method('get_ExtentHeight(', ')', 'float64'),
  \ dotnet#method('get_ViewportWidth(', ')', 'float64'),
  \ dotnet#method('get_ViewportHeight(', ')', 'float64'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('get_ScrollOwner(', ')', ''),
  \ dotnet#method('set_ScrollOwner(', 'class ScrollViewer value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('StackPanel(', ')', 'static void .'),
  \ dotnet#prop('Orientation', 'Orientation'),
  \ dotnet#prop('HasLogicalOrientation', 'bool'),
  \ dotnet#prop('LogicalOrientation', 'Orientation'),
  \ dotnet#prop('CanHorizontallyScroll', 'bool'),
  \ dotnet#prop('CanVerticallyScroll', 'bool'),
  \ dotnet#prop('ExtentWidth', 'float64'),
  \ dotnet#prop('ExtentHeight', 'float64'),
  \ dotnet#prop('ViewportWidth', 'float64'),
  \ dotnet#prop('ViewportHeight', 'float64'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('ScrollOwner', 'ScrollViewer'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('PrintDialog', 'Object', [ 
  \ dotnet#method('PrintDialog(', 'class PrintTicket printTicket)', 'void'),
  \ dotnet#method('SetPrintTicket(', 'object sender, WritingPrintTicketRequiredEventArgs args)', 'void'),
  \ dotnet#method('PrintDialog(', ')', 'void'),
  \ dotnet#method('get_PageRangeSelection(', ')', 'PageRangeSelection'),
  \ dotnet#method('set_PageRangeSelection(', 'PageRangeSelection value)', 'void'),
  \ dotnet#method('get_PageRange(', ')', 'PageRange'),
  \ dotnet#method('set_PageRange(', 'PageRange value)', 'void'),
  \ dotnet#method('get_UserPageRangeEnabled(', ')', 'bool'),
  \ dotnet#method('set_UserPageRangeEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_MinPage(', ')', 'uint32'),
  \ dotnet#method('set_MinPage(', 'uint32 value)', 'void'),
  \ dotnet#method('get_MaxPage(', ')', 'uint32'),
  \ dotnet#method('set_MaxPage(', 'uint32 value)', 'void'),
  \ dotnet#method('get_PrintQueue(', ')', 'PrintQueue'),
  \ dotnet#method('set_PrintQueue(', 'class PrintQueue value)', 'void'),
  \ dotnet#method('get_PrintTicket(', ')', 'PrintTicket'),
  \ dotnet#method('set_PrintTicket(', 'class PrintTicket value)', 'void'),
  \ dotnet#method('get_PrintableAreaWidth(', ')', 'float64'),
  \ dotnet#method('get_PrintableAreaHeight(', ')', 'float64'),
  \ dotnet#method('ShowDialog(', ')', 'Nullable'),
  \ dotnet#method('PrintVisual(', 'class Visual visual, string description)', 'void'),
  \ dotnet#method('PrintDocument(', 'class DocumentPaginator documentPaginator, string description)', 'void'),
  \ dotnet#prop('PageRangeSelection', 'PageRangeSelection'),
  \ dotnet#prop('PageRange', 'PageRange'),
  \ dotnet#prop('UserPageRangeEnabled', 'bool'),
  \ dotnet#prop('MinPage', 'uint32'),
  \ dotnet#prop('MaxPage', 'uint32'),
  \ dotnet#prop('PrintQueue', 'PrintQueue'),
  \ dotnet#prop('PrintTicket', 'PrintTicket'),
  \ dotnet#prop('PrintableAreaWidth', 'float64'),
  \ dotnet#prop('PrintableAreaHeight', 'float64'),
  \ ])

call dotnet#class('PrintDialogException', 'Exception', [ 
  \ dotnet#method('PrintDialogException(', ')', 'void'),
  \ dotnet#method('PrintDialogException(', 'string message)', 'void'),
  \ dotnet#method('PrintDialogException(', 'string message, Exception innerException)', 'void'),
  \ dotnet#method('PrintDialogException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ ])

call dotnet#class('ProgressBar', 'RangeBase', [ 
  \ dotnet#method('ProgressBar(', ')', 'void'),
  \ dotnet#method('get_IsIndeterminate(', ')', 'bool'),
  \ dotnet#method('set_IsIndeterminate(', 'bool value)', 'void'),
  \ dotnet#method('get_Orientation(', ')', 'Orientation'),
  \ dotnet#method('set_Orientation(', 'Orientation value)', 'void'),
  \ dotnet#method('IsValidOrientation(', 'object o)', 'static bool'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnMinimumChanged(', 'float64 oldMinimum, float64 newMinimum)', 'void'),
  \ dotnet#method('OnMaximumChanged(', 'float64 oldMaximum, float64 newMaximum)', 'void'),
  \ dotnet#method('OnValueChanged(', 'float64 oldValue, float64 newValue)', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ProgressBar(', ')', 'static void .'),
  \ dotnet#prop('IsIndeterminate', 'bool'),
  \ dotnet#prop('Orientation', 'Orientation'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('RadioButton', 'ToggleButton', [ 
  \ dotnet#method('RadioButton(', ')', 'void'),
  \ dotnet#method('get_GroupName(', ')', 'string'),
  \ dotnet#method('set_GroupName(', 'string value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnChecked(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnToggle(', ')', 'famorassem void'),
  \ dotnet#method('OnAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('RadioButton(', ')', 'static void .'),
  \ dotnet#prop('GroupName', 'string'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('RichTextBox', 'TextBoxBase', [ 
  \ dotnet#method('RichTextBox(', ')', 'void'),
  \ dotnet#method('RichTextBox(', 'class FlowDocument document)', 'void'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('GetPositionFromPoint(', 'Point point, bool snapToText)', 'TextPointer'),
  \ dotnet#method('GetSpellingError(', 'class TextPointer position)', 'SpellingError'),
  \ dotnet#method('GetSpellingErrorRange(', 'class TextPointer position)', 'TextRange'),
  \ dotnet#method('GetNextSpellingErrorPosition(', 'class TextPointer position, LogicalDirection direction)', 'TextPointer'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('CreateRenderScope(', ')', 'strict'),
  \ dotnet#method('get_Document(', ')', 'FlowDocument'),
  \ dotnet#method('set_Document(', 'class FlowDocument value)', 'void'),
  \ dotnet#method('ShouldSerializeDocument(', ')', 'bool'),
  \ dotnet#method('get_IsDocumentEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsDocumentEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_Selection(', ')', 'TextSelection'),
  \ dotnet#method('get_CaretPosition(', ')', 'TextPointer'),
  \ dotnet#method('set_CaretPosition(', 'class TextPointer value)', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('RichTextBox(', ')', 'static void .'),
  \ dotnet#prop('Document', 'FlowDocument'),
  \ dotnet#prop('IsDocumentEnabled', 'bool'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('Selection', 'TextSelection'),
  \ dotnet#prop('CaretPosition', 'TextPointer'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ScrollChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ScrollChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ScrollChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ScrollChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ScrollChangedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('ScrollChangedEventArgs(', 'VScrollChangedEventArgs offset, VScrollChangedEventArgs offsetChange, Size extent, VScrollChangedEventArgs extentChange, Size viewport, VScrollChangedEventArgs viewportChange)', 'void'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('get_HorizontalChange(', ')', 'float64'),
  \ dotnet#method('get_VerticalChange(', ')', 'float64'),
  \ dotnet#method('get_ViewportWidth(', ')', 'float64'),
  \ dotnet#method('get_ViewportHeight(', ')', 'float64'),
  \ dotnet#method('get_ViewportWidthChange(', ')', 'float64'),
  \ dotnet#method('get_ViewportHeightChange(', ')', 'float64'),
  \ dotnet#method('get_ExtentWidth(', ')', 'float64'),
  \ dotnet#method('get_ExtentHeight(', ')', 'float64'),
  \ dotnet#method('get_ExtentWidthChange(', ')', 'float64'),
  \ dotnet#method('get_ExtentHeightChange(', ')', 'float64'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('HorizontalChange', 'float64'),
  \ dotnet#prop('VerticalChange', 'float64'),
  \ dotnet#prop('ViewportWidth', 'float64'),
  \ dotnet#prop('ViewportHeight', 'float64'),
  \ dotnet#prop('ViewportWidthChange', 'float64'),
  \ dotnet#prop('ViewportHeightChange', 'float64'),
  \ dotnet#prop('ExtentWidth', 'float64'),
  \ dotnet#prop('ExtentHeight', 'float64'),
  \ dotnet#prop('ExtentWidthChange', 'float64'),
  \ dotnet#prop('ExtentHeightChange', 'float64'),
  \ ])

call dotnet#class('ScrollViewer', 'ContentControl', [ 
  \ dotnet#method('LineUp(', ')', 'void'),
  \ dotnet#method('LineDown(', ')', 'void'),
  \ dotnet#method('LineLeft(', ')', 'void'),
  \ dotnet#method('LineRight(', ')', 'void'),
  \ dotnet#method('PageUp(', ')', 'void'),
  \ dotnet#method('PageDown(', ')', 'void'),
  \ dotnet#method('PageLeft(', ')', 'void'),
  \ dotnet#method('PageRight(', ')', 'void'),
  \ dotnet#method('ScrollToLeftEnd(', ')', 'void'),
  \ dotnet#method('ScrollToRightEnd(', ')', 'void'),
  \ dotnet#method('ScrollToHome(', ')', 'void'),
  \ dotnet#method('ScrollToEnd(', ')', 'void'),
  \ dotnet#method('ScrollToTop(', ')', 'void'),
  \ dotnet#method('ScrollToBottom(', ')', 'void'),
  \ dotnet#method('ScrollToHorizontalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('ScrollToVerticalOffset(', 'float64 offset)', 'void'),
  \ dotnet#method('MakeVisible(', 'class Visual child, Rect rect)', 'void'),
  \ dotnet#method('InvalidateScrollInfo(', ')', 'void'),
  \ dotnet#method('get_CanContentScroll(', ')', 'bool'),
  \ dotnet#method('set_CanContentScroll(', 'bool value)', 'void'),
  \ dotnet#method('get_HorizontalScrollBarVisibility(', ')', 'ScrollBarVisibility'),
  \ dotnet#method('set_HorizontalScrollBarVisibility(', 'ScrollBarVisibility value)', 'void'),
  \ dotnet#method('get_VerticalScrollBarVisibility(', ')', 'ScrollBarVisibility'),
  \ dotnet#method('set_VerticalScrollBarVisibility(', 'ScrollBarVisibility value)', 'void'),
  \ dotnet#method('get_ComputedHorizontalScrollBarVisibility(', ')', 'Visibility'),
  \ dotnet#method('get_ComputedVerticalScrollBarVisibility(', ')', 'Visibility'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('get_ExtentWidth(', ')', 'float64'),
  \ dotnet#method('get_ExtentHeight(', ')', 'float64'),
  \ dotnet#method('get_ScrollableWidth(', ')', 'float64'),
  \ dotnet#method('get_ScrollableHeight(', ')', 'float64'),
  \ dotnet#method('get_ViewportWidth(', ')', 'float64'),
  \ dotnet#method('get_ViewportHeight(', ')', 'float64'),
  \ dotnet#method('SetCanContentScroll(', 'class DependencyObject element, bool canContentScroll)', 'static void'),
  \ dotnet#method('GetCanContentScroll(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetHorizontalScrollBarVisibility(', 'class DependencyObject element, ScrollBarVisibility horizontalScrollBarVisibility)', 'static void'),
  \ dotnet#method('GetHorizontalScrollBarVisibility(', 'class DependencyObject element)', 'static ScrollBarVisibility'),
  \ dotnet#method('SetVerticalScrollBarVisibility(', 'class DependencyObject element, ScrollBarVisibility verticalScrollBarVisibility)', 'static void'),
  \ dotnet#method('GetVerticalScrollBarVisibility(', 'class DependencyObject element)', 'static ScrollBarVisibility'),
  \ dotnet#method('get_ContentVerticalOffset(', ')', 'float64'),
  \ dotnet#method('get_ContentHorizontalOffset(', ')', 'float64'),
  \ dotnet#method('GetIsDeferredScrollingEnabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetIsDeferredScrollingEnabled(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('get_IsDeferredScrollingEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsDeferredScrollingEnabled(', 'bool value)', 'void'),
  \ dotnet#method('add_ScrollChanged(', 'class ScrollChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_ScrollChanged(', 'class ScrollChangedEventHandler value)', 'void'),
  \ dotnet#method('OnScrollChanged(', 'class ScrollChangedEventArgs e)', 'void'),
  \ dotnet#method('HitTestCore(', 'class PointHitTestParameters hitTestParameters)', 'HitTestResult'),
  \ dotnet#method('get_HandlesScrolling(', ')', 'famorassem bool'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('ScrollInDirection(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnMouseWheel(', 'class MouseWheelEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('OnPreApplyTemplate(', ')', 'strict void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('get_ScrollInfo(', ')', 'famorassem'),
  \ dotnet#method('set_ScrollInfo(', 'class IScrollInfo value)', 'famorassem void'),
  \ dotnet#method('get_PanningMode(', ')', 'PanningMode'),
  \ dotnet#method('set_PanningMode(', 'PanningMode value)', 'void'),
  \ dotnet#method('SetPanningMode(', 'class DependencyObject element, PanningMode panningMode)', 'static void'),
  \ dotnet#method('GetPanningMode(', 'class DependencyObject element)', 'static PanningMode'),
  \ dotnet#method('get_PanningDeceleration(', ')', 'float64'),
  \ dotnet#method('set_PanningDeceleration(', 'float64 value)', 'void'),
  \ dotnet#method('SetPanningDeceleration(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetPanningDeceleration(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('get_PanningRatio(', ')', 'float64'),
  \ dotnet#method('set_PanningRatio(', 'float64 value)', 'void'),
  \ dotnet#method('SetPanningRatio(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetPanningRatio(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('OnManipulationStarting(', 'class ManipulationStartingEventArgs e)', 'void'),
  \ dotnet#method('OnManipulationDelta(', 'class ManipulationDeltaEventArgs e)', 'void'),
  \ dotnet#method('OnManipulationInertiaStarting(', 'class ManipulationInertiaStartingEventArgs e)', 'void'),
  \ dotnet#method('OnManipulationCompleted(', 'class ManipulationCompletedEventArgs e)', 'void'),
  \ dotnet#method('get_HandlesMouseWheelScrolling(', ')', 'bool'),
  \ dotnet#method('set_HandlesMouseWheelScrolling(', 'bool value)', 'void'),
  \ dotnet#method('get_InChildInvalidateMeasure(', ')', 'bool'),
  \ dotnet#method('set_InChildInvalidateMeasure(', 'bool value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ScrollViewer(', ')', 'void'),
  \ dotnet#method('set_HorizontalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('set_VerticalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('set_ContentVerticalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('set_ContentHorizontalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('ScrollViewer(', ')', 'static void .'),
  \ dotnet#event('ScrollChanged', 'ScrollChangedEventHandler'),
  \ dotnet#prop('CanContentScroll', 'bool'),
  \ dotnet#prop('HorizontalScrollBarVisibility', 'ScrollBarVisibility'),
  \ dotnet#prop('VerticalScrollBarVisibility', 'ScrollBarVisibility'),
  \ dotnet#prop('ComputedHorizontalScrollBarVisibility', 'Visibility'),
  \ dotnet#prop('ComputedVerticalScrollBarVisibility', 'Visibility'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('ExtentWidth', 'float64'),
  \ dotnet#prop('ExtentHeight', 'float64'),
  \ dotnet#prop('ScrollableWidth', 'float64'),
  \ dotnet#prop('ScrollableHeight', 'float64'),
  \ dotnet#prop('ViewportWidth', 'float64'),
  \ dotnet#prop('ViewportHeight', 'float64'),
  \ dotnet#prop('ContentVerticalOffset', 'float64'),
  \ dotnet#prop('ContentHorizontalOffset', 'float64'),
  \ dotnet#prop('IsDeferredScrollingEnabled', 'bool'),
  \ dotnet#prop('HandlesScrolling', 'bool'),
  \ dotnet#prop('ScrollInfo', 'IScrollInfo'),
  \ dotnet#prop('PanningMode', 'PanningMode'),
  \ dotnet#prop('PanningDeceleration', 'float64'),
  \ dotnet#prop('PanningRatio', 'float64'),
  \ dotnet#prop('HandlesMouseWheelScrolling', 'bool'),
  \ dotnet#prop('InChildInvalidateMeasure', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('StyleSelStyleSelector', 'Object', [ 
  \ dotnet#method('SelectStyle(', 'object item, DependencyObject container)', ''),
  \ dotnet#method('StyleSelector(', ')', 'void'),
  \ ])

call dotnet#class('SelectedCellsChangedEventArgs', 'EventArgs', [ 
  \ dotnet#method('SelectedCellsChangedEventArgs(', 'class List addedCells, List removedCells)', 'void'),
  \ dotnet#method('SelectedCellsChangedEventArgs(', 'class ReadOnlyCollection addedCells, ReadOnlyCollection removedCells)', 'void'),
  \ dotnet#method('SelectedCellsChangedEventArgs(', 'class DataGrid owner, VirtualizedCellInfoCollection addedCells, VirtualizedCellInfoCollection removedCells)', 'void'),
  \ dotnet#method('get_AddedCells(', ')', 'IList'),
  \ dotnet#method('get_RemovedCells(', ')', 'IList'),
  \ dotnet#prop('AddedCells', 'IList'),
  \ dotnet#prop('RemovedCells', 'IList'),
  \ ])

call dotnet#class('SelectedCellsChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('SelectedCellsChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, SelectedCellsChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, SelectedCellsChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('SelectedDatesCollection', 'ObservableCollection', [ 
  \ dotnet#method('SelectedDatesCollection(', 'class Calendar owner)', 'void'),
  \ dotnet#method('get_MinimumDate(', ')', '.method'),
  \ dotnet#method('get_MaximumDate(', ')', '.method'),
  \ dotnet#method('AddRange(', 'DateTime start, DateTime end)', 'void'),
  \ dotnet#method('ClearItems(', ')', 'void'),
  \ dotnet#method('InsertItem(', 'int32 index, DateTime item)', 'void'),
  \ dotnet#method('RemoveItem(', 'int32 index)', 'void'),
  \ dotnet#method('SetItem(', 'int32 index, DateTime item)', 'void'),
  \ dotnet#method('AddRangeInternal(', 'DateTime start, DateTime end)', 'void'),
  \ dotnet#method('ClearInternal(', ')', 'void'),
  \ dotnet#method('ClearInternal(', 'bool fireChangeNotification)', 'void'),
  \ dotnet#method('Toggle(', 'DateTime date)', 'void'),
  \ dotnet#prop('MinimumDate', 'Nullable'),
  \ dotnet#prop('MaximumDate', 'Nullable'),
  \ ])

call dotnet#class('SelectionChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('SelectionChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, SelectionChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, SelectionChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('Slider', 'RangeBase', [ 
  \ dotnet#method('Slider(', ')', 'void'),
  \ dotnet#method('get_IncreaseLarge(', ')', 'static'),
  \ dotnet#method('get_DecreaseLarge(', ')', 'static'),
  \ dotnet#method('get_IncreaseSmall(', ')', 'static'),
  \ dotnet#method('get_DecreaseSmall(', ')', 'static'),
  \ dotnet#method('get_MinimizeValue(', ')', 'static'),
  \ dotnet#method('get_MaximizeValue(', ')', 'static'),
  \ dotnet#method('get_Orientation(', ')', 'Orientation'),
  \ dotnet#method('set_Orientation(', 'Orientation value)', 'void'),
  \ dotnet#method('get_IsDirectionReversed(', ')', 'bool'),
  \ dotnet#method('set_IsDirectionReversed(', 'bool value)', 'void'),
  \ dotnet#method('get_Delay(', ')', 'int32'),
  \ dotnet#method('set_Delay(', 'int32 value)', 'void'),
  \ dotnet#method('get_Interval(', ')', 'int32'),
  \ dotnet#method('set_Interval(', 'int32 value)', 'void'),
  \ dotnet#method('get_AutoToolTipPlacement(', ')', 'AutoToolTipPlacement'),
  \ dotnet#method('set_AutoToolTipPlacement(', 'AutoToolTipPlacement value)', 'void'),
  \ dotnet#method('get_AutoToolTipPrecision(', ')', 'int32'),
  \ dotnet#method('set_AutoToolTipPrecision(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsSnapToTickEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsSnapToTickEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_TickPlacement(', ')', 'TickPlacement'),
  \ dotnet#method('set_TickPlacement(', 'TickPlacement value)', 'void'),
  \ dotnet#method('get_TickFrequency(', ')', 'float64'),
  \ dotnet#method('set_TickFrequency(', 'float64 value)', 'void'),
  \ dotnet#method('get_Ticks(', ')', 'DoubleCollection'),
  \ dotnet#method('set_Ticks(', 'class DoubleCollection value)', 'void'),
  \ dotnet#method('get_IsSelectionRangeEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsSelectionRangeEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_SelectionStart(', ')', 'float64'),
  \ dotnet#method('set_SelectionStart(', 'float64 value)', 'void'),
  \ dotnet#method('get_SelectionEnd(', ')', 'float64'),
  \ dotnet#method('set_SelectionEnd(', 'float64 value)', 'void'),
  \ dotnet#method('OnMinimumChanged(', 'float64 oldMinimum, float64 newMinimum)', 'void'),
  \ dotnet#method('OnMaximumChanged(', 'float64 oldMaximum, float64 newMaximum)', 'void'),
  \ dotnet#method('get_IsMoveToPointEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsMoveToPointEnabled(', 'bool value)', 'void'),
  \ dotnet#method('OnPreviewMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnThumbDragStarted(', 'class DragStartedEventArgs e)', 'void'),
  \ dotnet#method('OnThumbDragDelta(', 'class DragDeltaEventArgs e)', 'void'),
  \ dotnet#method('OnThumbDragCompleted(', 'class DragCompletedEventArgs e)', 'void'),
  \ dotnet#method('get_Track(', ')', '.method'),
  \ dotnet#method('set_Track(', 'class Track value)', 'void'),
  \ dotnet#method('get_SelectionRangeElement(', ')', '.method'),
  \ dotnet#method('set_SelectionRangeElement(', 'class FrameworkElement value)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('OnValueChanged(', 'float64 oldValue, float64 newValue)', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('OnIncreaseLarge(', ')', 'void'),
  \ dotnet#method('OnDecreaseLarge(', ')', 'void'),
  \ dotnet#method('OnIncreaseSmall(', ')', 'void'),
  \ dotnet#method('OnDecreaseSmall(', ')', 'void'),
  \ dotnet#method('OnMaximizeValue(', ')', 'void'),
  \ dotnet#method('OnMinimizeValue(', ')', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('Slider(', ')', 'static void .'),
  \ dotnet#prop('IncreaseLarge', 'RoutedCommand'),
  \ dotnet#prop('DecreaseLarge', 'RoutedCommand'),
  \ dotnet#prop('IncreaseSmall', 'RoutedCommand'),
  \ dotnet#prop('DecreaseSmall', 'RoutedCommand'),
  \ dotnet#prop('MinimizeValue', 'RoutedCommand'),
  \ dotnet#prop('MaximizeValue', 'RoutedCommand'),
  \ dotnet#prop('Orientation', 'Orientation'),
  \ dotnet#prop('IsDirectionReversed', 'bool'),
  \ dotnet#prop('Delay', 'int32'),
  \ dotnet#prop('Interval', 'int32'),
  \ dotnet#prop('AutoToolTipPlacement', 'AutoToolTipPlacement'),
  \ dotnet#prop('AutoToolTipPrecision', 'int32'),
  \ dotnet#prop('IsSnapToTickEnabled', 'bool'),
  \ dotnet#prop('TickPlacement', 'TickPlacement'),
  \ dotnet#prop('TickFrequency', 'float64'),
  \ dotnet#prop('Ticks', 'DoubleCollection'),
  \ dotnet#prop('IsSelectionRangeEnabled', 'bool'),
  \ dotnet#prop('SelectionStart', 'float64'),
  \ dotnet#prop('SelectionEnd', 'float64'),
  \ dotnet#prop('IsMoveToPointEnabled', 'bool'),
  \ dotnet#prop('Track', 'Track'),
  \ dotnet#prop('SelectionRangeElement', 'FrameworkElement'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('SoundPlayerAction', 'TriggerAction', [ 
  \ dotnet#method('SoundPlayerAction(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement el, FrameworkContentElement ctntEl, Style targetStyle, FrameworkTemplate targetTemplate, int64 layer)', 'void'),
  \ dotnet#method('Invoke(', 'class FrameworkElement el)', 'void'),
  \ dotnet#method('SoundPlayerAction(', ')', 'static void .'),
  \ dotnet#prop('Source', 'Uri'),
  \ ])

call dotnet#class('SpellCheck', 'Object', [ 
  \ dotnet#method('SpellCheck(', ')', 'void'),
  \ dotnet#method('get_DefaultValue(', ')', 'strict object'),
  \ dotnet#method('CreateDefaultValue(', 'class DependencyObject owner, DependencyProperty property)', 'strict object'),
  \ dotnet#prop('DefaultValue', 'object'),
  \ dotnet#method('SpellCheck(', 'class TextBoxBase owner)', 'void'),
  \ dotnet#method('get_IsEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsEnabled(', 'bool value)', 'void'),
  \ dotnet#method('SetIsEnabled(', 'class TextBoxBase textBoxBase, bool value)', 'static void'),
  \ dotnet#method('GetIsEnabled(', 'class TextBoxBase textBoxBase)', 'static bool'),
  \ dotnet#method('get_SpellingReform(', ')', 'SpellingReform'),
  \ dotnet#method('set_SpellingReform(', 'SpellingReform value)', 'void'),
  \ dotnet#method('SetSpellingReform(', 'class TextBoxBase textBoxBase, SpellingReform value)', 'static void'),
  \ dotnet#method('get_CustomDictionaries(', ')', 'IList'),
  \ dotnet#method('GetCustomDictionaries(', 'class TextBoxBase textBoxBase)', 'static IList'),
  \ dotnet#method('SpellCheck(', ')', 'static void .'),
  \ dotnet#prop('IsEnabled', 'bool'),
  \ dotnet#prop('SpellingReform', 'SpellingReform'),
  \ dotnet#prop('CustomDictionaries', 'IList'),
  \ ])

call dotnet#class('TabControl', 'SelTabControl', [ 
  \ dotnet#method('TabControl(', ')', 'void'),
  \ dotnet#method('get_TabStripPlacement(', ')', 'Dock'),
  \ dotnet#method('set_TabStripPlacement(', 'Dock value)', 'void'),
  \ dotnet#method('get_SelectedContent(', ')', 'object'),
  \ dotnet#method('set_SelectedContent(', 'object value)', 'void'),
  \ dotnet#method('get_SelectedContentTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_SelectedContentTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_SelectedContentTemplateSelTabControl(', ')', 'DataTemplateSelTabControl'),
  \ dotnet#method('set_SelectedContentTemplateSelTabControl(', 'class DataTemplateSelTabControl value)', 'void'),
  \ dotnet#method('get_SelectedContentStringFormat(', ')', 'string'),
  \ dotnet#method('set_SelectedContentStringFormat(', 'string value)', 'void'),
  \ dotnet#method('get_ContentTemplate(', ')', 'DataTemplate'),
  \ dotnet#method('set_ContentTemplate(', 'class DataTemplate value)', 'void'),
  \ dotnet#method('get_ContentTemplateSelTabControl(', ')', 'DataTemplateSelTabControl'),
  \ dotnet#method('set_ContentTemplateSelTabControl(', 'class DataTemplateSelTabControl value)', 'void'),
  \ dotnet#method('get_ContentStringFormat(', ')', 'string'),
  \ dotnet#method('set_ContentStringFormat(', 'string value)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnInitialized(', 'class EventArgs e)', 'void'),
  \ dotnet#method('OnApplyTemplate(', ')', 'void'),
  \ dotnet#method('OnSelectionChanged(', 'class SelectionChangedEventArgs e)', 'void'),
  \ dotnet#method('OnItemsChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('get_SelectedContentPresenter(', ')', '.method'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('TabControl(', ')', 'static void .'),
  \ dotnet#prop('TabStripPlacement', 'Dock'),
  \ dotnet#prop('SelectedContent', 'object'),
  \ dotnet#prop('SelectedContentTemplate', 'DataTemplate'),
  \ dotnet#prop('SelectedContentTemplateSelTabControl', 'DataTemplateSelTabControl'),
  \ dotnet#prop('SelectedContentStringFormat', 'string'),
  \ dotnet#prop('ContentTemplate', 'DataTemplate'),
  \ dotnet#prop('ContentTemplateSelTabControl', 'DataTemplateSelTabControl'),
  \ dotnet#prop('ContentStringFormat', 'string'),
  \ dotnet#prop('SelectedContentPresenter', 'ContentPresenter'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('TabItem', 'HeaderedContentControl', [ 
  \ dotnet#method('TabItem(', ')', 'void'),
  \ dotnet#method('get_IsSelected(', ')', 'bool'),
  \ dotnet#method('set_IsSelected(', 'bool value)', 'void'),
  \ dotnet#method('OnSelected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnUnselected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('get_TabStripPlacement(', ')', 'Dock'),
  \ dotnet#method('OnAncestorChanged(', ')', 'strict void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnPreviewGotKeyboardFocus(', 'class KeyboardFocusChangedEventArgs e)', 'void'),
  \ dotnet#method('OnAccessKey(', 'class AccessKeyEventArgs e)', 'void'),
  \ dotnet#method('OnContentChanged(', 'object oldContent, object newContent)', 'void'),
  \ dotnet#method('OnContentTemplateChanged(', 'class DataTemplate oldContentTemplate, DataTemplate newContentTemplate)', 'void'),
  \ dotnet#method('OnContentTemplateSelTabItemChanged(', 'class DataTemplateSelTabItem oldContentTemplateSelTabItem, DataTemplateSelTabItem newContentTemplateSelTabItem)', 'void'),
  \ dotnet#method('SetFocus(', ')', 'bool'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('TabItem(', ')', 'static void .'),
  \ dotnet#prop('IsSelected', 'bool'),
  \ dotnet#prop('TabStripPlacement', 'Dock'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('TextBlock', 'FrameworkElement', [ 
  \ dotnet#method('InputHitTest(', 'Point point)', ''),
  \ dotnet#method('GetRectangles(', 'class ContentElement child)', ''),
  \ dotnet#method('get_HostedElements(', ')', ''),
  \ dotnet#method('OnChildDesiredSizeChanged(', 'class UIElement child)', 'void '),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('GetService(', 'class Type serviceType)', 'object '),
  \ dotnet#method('TextBlock(', ')', 'void'),
  \ dotnet#method('TextBlock(', 'class Inline inline)', 'void'),
  \ dotnet#method('GetPositionFromPoint(', 'Point point, bool snapToText)', 'TextPointer'),
  \ dotnet#method('get_Inlines(', ')', 'InlineCollection'),
  \ dotnet#method('get_ContentStart(', ')', 'TextPointer'),
  \ dotnet#method('get_ContentEnd(', ')', 'TextPointer'),
  \ dotnet#method('get_TextRange(', ')', '.method'),
  \ dotnet#method('get_BreakBefore(', ')', 'LineBreakCondition'),
  \ dotnet#method('get_BreakAfter(', ')', 'LineBreakCondition'),
  \ dotnet#method('get_Typography(', ')', 'Typography'),
  \ dotnet#method('get_BaselineOffset(', ')', 'float64'),
  \ dotnet#method('set_BaselineOffset(', 'float64 value)', 'void'),
  \ dotnet#method('SetBaselineOffset(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetBaselineOffset(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('set_Text(', 'string value)', 'void'),
  \ dotnet#method('get_FontFamily(', ')', 'FontFamily'),
  \ dotnet#method('set_FontFamily(', 'class Fontvalue)', 'void'),
  \ dotnet#method('SetFontFamily(', 'class DependencyObject element, Fontvalue)', 'static void'),
  \ dotnet#method('GetFontFamily(', 'class DependencyObject element)', 'static FontFamily'),
  \ dotnet#method('get_FontStyle(', ')', 'FontStyle'),
  \ dotnet#method('set_FontStyle(', 'FontStyle value)', 'void'),
  \ dotnet#method('SetFontStyle(', 'class DependencyObject element, FontStyle value)', 'static void'),
  \ dotnet#method('GetFontStyle(', 'class DependencyObject element)', 'static FontStyle'),
  \ dotnet#method('get_FontWeight(', ')', 'FontWeight'),
  \ dotnet#method('set_FontWeight(', 'FontWeight value)', 'void'),
  \ dotnet#method('SetFontWeight(', 'class DependencyObject element, FontWeight value)', 'static void'),
  \ dotnet#method('GetFontWeight(', 'class DependencyObject element)', 'static FontWeight'),
  \ dotnet#method('get_FontStretch(', ')', 'FontStretch'),
  \ dotnet#method('set_FontStretch(', 'FontStretch value)', 'void'),
  \ dotnet#method('SetFontStretch(', 'class DependencyObject element, FontStretch value)', 'static void'),
  \ dotnet#method('GetFontStretch(', 'class DependencyObject element)', 'static FontStretch'),
  \ dotnet#method('get_FontSize(', ')', 'float64'),
  \ dotnet#method('set_FontSize(', 'float64 value)', 'void'),
  \ dotnet#method('SetFontSize(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetFontSize(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('get_Foreground(', ')', 'Brush'),
  \ dotnet#method('set_Foreground(', 'class Brush value)', 'void'),
  \ dotnet#method('SetForeground(', 'class DependencyObject element, Brush value)', 'static void'),
  \ dotnet#method('GetForeground(', 'class DependencyObject element)', 'static Brush'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_TextDecorations(', ')', 'TextDecorationCollection'),
  \ dotnet#method('set_TextDecorations(', 'class TextDecorationCollection value)', 'void'),
  \ dotnet#method('get_TextEffects(', ')', 'TextEffectCollection'),
  \ dotnet#method('set_TextEffects(', 'class TextEffectCollection value)', 'void'),
  \ dotnet#method('get_LineHeight(', ')', 'float64'),
  \ dotnet#method('set_LineHeight(', 'float64 value)', 'void'),
  \ dotnet#method('SetLineHeight(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetLineHeight(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('get_LineStackingStrategy(', ')', 'LineStackingStrategy'),
  \ dotnet#method('set_LineStackingStrategy(', 'LineStackingStrategy value)', 'void'),
  \ dotnet#method('SetLineStackingStrategy(', 'class DependencyObject element, LineStackingStrategy value)', 'static void'),
  \ dotnet#method('GetLineStackingStrategy(', 'class DependencyObject element)', 'static LineStackingStrategy'),
  \ dotnet#method('get_Padding(', ')', 'Thickness'),
  \ dotnet#method('set_Padding(', 'Thickness value)', 'void'),
  \ dotnet#method('get_TextAlignment(', ')', 'TextAlignment'),
  \ dotnet#method('set_TextAlignment(', 'TextAlignment value)', 'void'),
  \ dotnet#method('SetTextAlignment(', 'class DependencyObject element, TextAlignment value)', 'static void'),
  \ dotnet#method('GetTextAlignment(', 'class DependencyObject element)', 'static TextAlignment'),
  \ dotnet#method('get_TextTrimming(', ')', 'TextTrimming'),
  \ dotnet#method('set_TextTrimming(', 'TextTrimming value)', 'void'),
  \ dotnet#method('get_TextWrapping(', ')', 'TextWrapping'),
  \ dotnet#method('set_TextWrapping(', 'TextWrapping value)', 'void'),
  \ dotnet#method('get_IsHyphenationEnabled(', ')', 'bool'),
  \ dotnet#method('set_IsHyphenationEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'family'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'family'),
  \ dotnet#method('OnRender(', 'class DrawingContext ctx)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('HitTestCore(', 'class PointHitTestParameters hitTestParameters)', 'family'),
  \ dotnet#method('InputHitTestCore(', 'Point point)', 'family'),
  \ dotnet#method('GetRectanglesCore(', 'class ContentElement child)', 'family'),
  \ dotnet#method('get_HostedElementsCore(', ')', 'family'),
  \ dotnet#method('OnChildDesiredSizeChangedCore(', 'class UIElement child)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('RemoveChild(', 'class Visual child)', 'void'),
  \ dotnet#method('SetTextContainer(', 'class ITextContainer textContainer)', 'void'),
  \ dotnet#method('MeasureChild(', 'class InlineObject inlineObject)', 'Size'),
  \ dotnet#method('GetPlainText(', ')', 'strict string'),
  \ dotnet#method('GetLineResults(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('GetLineDetails(', 'int32 dcp, int32 index, float64 lineVOffset, [out] int32& cchContent, [out] int32& cchEllipses)', 'void'),
  \ dotnet#method('GetTextPositionFromDistance(', 'int32 dcp, float64 distance, float64 lineVOffset, int32 index)', 'ITextPointer'),
  \ dotnet#method('GetRectangleFromTextPosition(', 'class ITextPointer orientedPosition)', 'Rect'),
  \ dotnet#method('GetTightBoundingGeometryFromTextPositions(', 'class ITextPointer startPosition, ITextPointer endPosition)', 'Geometry'),
  \ dotnet#method('IsAtCaretUnitBoundary(', 'class ITextPointer position, int32 dcp, int32 lineIndex)', 'bool'),
  \ dotnet#method('GetNextCaretUnitPosition(', 'class ITextPointer position, LogicalDirection direction, int32 dcp, int32 lineIndex)', 'ITextPointer'),
  \ dotnet#method('GetBackspaceCaretUnitPosition(', 'class ITextPointer position, int32 dcp, int32 lineIndex)', 'ITextPointer'),
  \ dotnet#method('get_TextFormatter(', ')', '.method'),
  \ dotnet#method('get_TextContainer(', ')', '.method'),
  \ dotnet#method('get_TextView(', ')', '.method'),
  \ dotnet#method('get_Highlights(', ')', '.method'),
  \ dotnet#method('get_ParagraphProperties(', ')', '.method'),
  \ dotnet#method('get_IsLayoutDataValid(', ')', 'bool'),
  \ dotnet#method('get_HasComplexContent(', ')', 'bool'),
  \ dotnet#method('get_IsTypographyDefaultValue(', ')', 'bool'),
  \ dotnet#method('get_IsContentPresenterContainer(', ')', 'bool'),
  \ dotnet#method('set_IsContentPresenterContainer(', 'bool value)', 'void'),
  \ dotnet#method('ShouldSerializeText(', ')', 'bool'),
  \ dotnet#method('ShouldSerializeInlines(', 'class XamlDesignerSerializationManager manager)', 'bool'),
  \ dotnet#method('OnChildBaselineOffsetChanged(', 'class DependencyObject source)', 'void'),
  \ dotnet#method('ShouldSerializeBaselineOffset(', ')', 'bool'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('TextBlock(', ')', 'static void .'),
  \ dotnet#prop('HostedElements', 'IEnumerator'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('Inlines', 'InlineCollection'),
  \ dotnet#prop('ContentStart', 'TextPointer'),
  \ dotnet#prop('ContentEnd', 'TextPointer'),
  \ dotnet#prop('TextRange', 'TextRange'),
  \ dotnet#prop('BreakBefore', 'LineBreakCondition'),
  \ dotnet#prop('BreakAfter', 'LineBreakCondition'),
  \ dotnet#prop('Typography', 'Typography'),
  \ dotnet#prop('BaselineOffset', 'float64'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('FontStyle', 'FontStyle'),
  \ dotnet#prop('FontWeight', 'FontWeight'),
  \ dotnet#prop('FontStretch', 'FontStretch'),
  \ dotnet#prop('FontSize', 'float64'),
  \ dotnet#prop('Foreground', 'Brush'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('TextDecorations', 'TextDecorationCollection'),
  \ dotnet#prop('TextEffects', 'TextEffectCollection'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('LineStackingStrategy', 'LineStackingStrategy'),
  \ dotnet#prop('Padding', 'Thickness'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('TextTrimming', 'TextTrimming'),
  \ dotnet#prop('TextWrapping', 'TextWrapping'),
  \ dotnet#prop('IsHyphenationEnabled', 'bool'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('HostedElementsCore', 'IEnumerator'),
  \ dotnet#prop('TextFormatter', 'TextFormatter'),
  \ dotnet#prop('TextContainer', 'ITextContainer'),
  \ dotnet#prop('TextView', 'ITextView'),
  \ dotnet#prop('Highlights', 'Highlights'),
  \ dotnet#prop('ParagraphProperties', 'LineProperties'),
  \ dotnet#prop('IsLayoutDataValid', 'bool'),
  \ dotnet#prop('HasComplexContent', 'bool'),
  \ dotnet#prop('IsTypographyDefaultValue', 'bool'),
  \ dotnet#prop('IsContentPresenterContainer', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('TextChange', 'Object', [ 
  \ dotnet#method('TextChange(', ')', 'void'),
  \ dotnet#method('get_Offset(', ')', 'int32'),
  \ dotnet#method('set_Offset(', 'int32 value)', 'void'),
  \ dotnet#method('get_AddedLength(', ')', 'int32'),
  \ dotnet#method('set_AddedLength(', 'int32 value)', 'void'),
  \ dotnet#method('get_RemovedLength(', ')', 'int32'),
  \ dotnet#method('set_RemovedLength(', 'int32 value)', 'void'),
  \ dotnet#prop('Offset', 'int32'),
  \ dotnet#prop('AddedLength', 'int32'),
  \ dotnet#prop('RemovedLength', 'int32'),
  \ ])

call dotnet#class('TextChangedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('TextChangedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, TextChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, TextChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('TextChangedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('TextChangedEventArgs(', 'class RoutedEvent id, UndoAction action, ICollection changes)', 'void'),
  \ dotnet#method('TextChangedEventArgs(', 'class RoutedEvent id, UndoAction action)', 'void'),
  \ dotnet#method('get_UndoAction(', ')', 'UndoAction'),
  \ dotnet#method('get_Changes(', ')', 'ICollection'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('UndoAction', 'UndoAction'),
  \ dotnet#prop('Changes', 'ICollection'),
  \ ])

call dotnet#class('TextSearch', 'DependencyObject', [ 
  \ dotnet#method('EnsureInstance(', 'class ItemsControl itemsControl)', 'static TextSearch'),
  \ dotnet#method('SetTextPath(', 'class DependencyObject element, string path)', 'static void'),
  \ dotnet#method('GetTextPath(', 'class DependencyObject element)', 'static string'),
  \ dotnet#method('SetText(', 'class DependencyObject element, string text)', 'static void'),
  \ dotnet#method('GetText(', 'class DependencyObject element)', 'static string'),
  \ dotnet#method('DoSearch(', 'string nextChar)', 'bool'),
  \ dotnet#method('DeleteLastCharacter(', ')', 'bool'),
  \ dotnet#method('FindMatchingPrefix(', 'class ItemsControl itemsControl, string prefix)', 'static int32'),
  \ dotnet#method('GetPrimaryTextFromItem(', 'class ItemsControl itemsControl, object item)', 'static string'),
  \ dotnet#method('GetCurrentPrefix(', ')', 'string'),
  \ dotnet#method('GetPrimaryText(', 'class FrameworkElement element)', 'static string'),
  \ dotnet#method('TextSearch(', ')', 'static void .'),
  \ ])

call dotnet#class('ToolBar', 'HeaderedItemsControl', [ 
  \ dotnet#method('ToolBar(', ')', 'void'),
  \ dotnet#method('get_Orientation(', ')', 'Orientation'),
  \ dotnet#method('get_Band(', ')', 'int32'),
  \ dotnet#method('set_Band(', 'int32 value)', 'void'),
  \ dotnet#method('get_BandIndex(', ')', 'int32'),
  \ dotnet#method('set_BandIndex(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsOverflowOpen(', ')', 'bool'),
  \ dotnet#method('set_IsOverflowOpen(', 'bool value)', 'void'),
  \ dotnet#method('get_HasOverflowItems(', ')', 'bool'),
  \ dotnet#method('SetIsOverflowItem(', 'class DependencyObject element, object value)', 'static void'),
  \ dotnet#method('GetIsOverflowItem(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetOverflowMode(', 'class DependencyObject element, OverflowMode mode)', 'static void'),
  \ dotnet#method('GetOverflowMode(', 'class DependencyObject element)', 'static OverflowMode'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('OnTemplateChangedInternal(', 'class FrameworkTemplate oldTemplate, FrameworkTemplate newTemplate)', 'strict void'),
  \ dotnet#method('OnItemsChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('OnLostMouseCapture(', 'class MouseEventArgs e)', 'void'),
  \ dotnet#method('get_ToolBarPanel(', ')', '.method'),
  \ dotnet#method('get_ToolBarOverflowPanel(', ')', '.method'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('OnAncestorChanged(', ')', 'strict void'),
  \ dotnet#method('get_MinLength(', ')', 'float64'),
  \ dotnet#method('get_MaxLength(', ')', 'float64'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('get_ButtonStyleKey(', ')', 'static'),
  \ dotnet#method('get_ToggleButtonStyleKey(', ')', 'static'),
  \ dotnet#method('get_SeparatorStyleKey(', ')', 'static'),
  \ dotnet#method('get_CheckBoxStyleKey(', ')', 'static'),
  \ dotnet#method('get_RadioButtonStyleKey(', ')', 'static'),
  \ dotnet#method('get_ComboBoxStyleKey(', ')', 'static'),
  \ dotnet#method('get_TextBoxStyleKey(', ')', 'static'),
  \ dotnet#method('get_MenuStyleKey(', ')', 'static'),
  \ dotnet#method('ToolBar(', ')', 'static void .'),
  \ dotnet#prop('Orientation', 'Orientation'),
  \ dotnet#prop('Band', 'int32'),
  \ dotnet#prop('BandIndex', 'int32'),
  \ dotnet#prop('IsOverflowOpen', 'bool'),
  \ dotnet#prop('HasOverflowItems', 'bool'),
  \ dotnet#prop('ToolBarPanel', 'ToolBarPanel'),
  \ dotnet#prop('ToolBarOverflowPanel', 'ToolBarOverflowPanel'),
  \ dotnet#prop('MinLength', 'float64'),
  \ dotnet#prop('MaxLength', 'float64'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('ButtonStyleKey', 'ResourceKey'),
  \ dotnet#prop('ToggleButtonStyleKey', 'ResourceKey'),
  \ dotnet#prop('SeparatorStyleKey', 'ResourceKey'),
  \ dotnet#prop('CheckBoxStyleKey', 'ResourceKey'),
  \ dotnet#prop('RadioButtonStyleKey', 'ResourceKey'),
  \ dotnet#prop('ComboBoxStyleKey', 'ResourceKey'),
  \ dotnet#prop('TextBoxStyleKey', 'ResourceKey'),
  \ dotnet#prop('MenuStyleKey', 'ResourceKey'),
  \ ])

call dotnet#class('ToolBarTray', 'FrameworkElement', [ 
  \ dotnet#method('ToolBarTray(', ')', 'void'),
  \ dotnet#method('get_Background(', ')', 'Brush'),
  \ dotnet#method('set_Background(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Orientation(', ')', 'Orientation'),
  \ dotnet#method('set_Orientation(', 'Orientation value)', 'void'),
  \ dotnet#method('get_IsLocked(', ')', 'bool'),
  \ dotnet#method('set_IsLocked(', 'bool value)', 'void'),
  \ dotnet#method('SetIsLocked(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetIsLocked(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('get_ToolBars(', ')', 'Collection'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('OnRender(', 'class DrawingContext dc)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ToolBarTray(', ')', 'static void .'),
  \ dotnet#prop('Background', 'Brush'),
  \ dotnet#prop('Orientation', 'Orientation'),
  \ dotnet#prop('IsLocked', 'bool'),
  \ dotnet#prop('ToolBars', 'Collection'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ToolTip', 'ContentControl', [ 
  \ dotnet#method('ToolTip(', ')', 'void'),
  \ dotnet#method('get_HorizontalOffset(', ')', 'float64'),
  \ dotnet#method('set_HorizontalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_VerticalOffset(', ')', 'float64'),
  \ dotnet#method('set_VerticalOffset(', 'float64 value)', 'void'),
  \ dotnet#method('get_IsOpen(', ')', 'bool'),
  \ dotnet#method('set_IsOpen(', 'bool value)', 'void'),
  \ dotnet#method('get_HasDropShadow(', ')', 'bool'),
  \ dotnet#method('set_HasDropShadow(', 'bool value)', 'void'),
  \ dotnet#method('get_PlacementTarget(', ')', 'UIElement'),
  \ dotnet#method('set_PlacementTarget(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_PlacementRectangle(', ')', 'Rect'),
  \ dotnet#method('set_PlacementRectangle(', 'Rect value)', 'void'),
  \ dotnet#method('get_Placement(', ')', 'PlacementMode'),
  \ dotnet#method('set_Placement(', 'PlacementMode value)', 'void'),
  \ dotnet#method('get_CustomPopupPlacementCallback(', ')', 'CustomPopupPlacementCallback'),
  \ dotnet#method('set_CustomPopupPlacementCallback(', 'class CustomPopupPlacementCallback value)', 'void'),
  \ dotnet#method('get_StaysOpen(', ')', 'bool'),
  \ dotnet#method('set_StaysOpen(', 'bool value)', 'void'),
  \ dotnet#method('add_Opened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Opened(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnOpened(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_Closed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Closed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnClosed(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('OnAncestorChanged(', ')', 'strict void'),
  \ dotnet#method('ForceClose(', ')', 'void'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ToolTip(', ')', 'static void .'),
  \ dotnet#event('Opened', 'RoutedEventHandler'),
  \ dotnet#event('Closed', 'RoutedEventHandler'),
  \ dotnet#prop('HorizontalOffset', 'float64'),
  \ dotnet#prop('VerticalOffset', 'float64'),
  \ dotnet#prop('IsOpen', 'bool'),
  \ dotnet#prop('HasDropShadow', 'bool'),
  \ dotnet#prop('PlacementTarget', 'UIElement'),
  \ dotnet#prop('PlacementRectangle', 'Rect'),
  \ dotnet#prop('Placement', 'PlacementMode'),
  \ dotnet#prop('CustomPopupPlacementCallback', 'CustomPopupPlacementCallback'),
  \ dotnet#prop('StaysOpen', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('ToolTipService', 'Object', [ 
  \ dotnet#method('GetToolTip(', 'class DependencyObject element)', 'static object'),
  \ dotnet#method('SetToolTip(', 'class DependencyObject element, object value)', 'static void'),
  \ dotnet#method('GetHorizontalOffset(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('SetHorizontalOffset(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetVerticalOffset(', 'class DependencyObject element)', 'static float64'),
  \ dotnet#method('SetVerticalOffset(', 'class DependencyObject element, float64 value)', 'static void'),
  \ dotnet#method('GetHasDropShadow(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetHasDropShadow(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetPlacementTarget(', 'class DependencyObject element)', 'static UIElement'),
  \ dotnet#method('SetPlacementTarget(', 'class DependencyObject element, UIElement value)', 'static void'),
  \ dotnet#method('GetPlacementRectangle(', 'class DependencyObject element)', 'static Rect'),
  \ dotnet#method('SetPlacementRectangle(', 'class DependencyObject element, Rect value)', 'static void'),
  \ dotnet#method('GetPlacement(', 'class DependencyObject element)', 'static PlacementMode'),
  \ dotnet#method('SetPlacement(', 'class DependencyObject element, PlacementMode value)', 'static void'),
  \ dotnet#method('GetShowOnDisabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetShowOnDisabled(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetIsOpen(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('GetIsEnabled(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('SetIsEnabled(', 'class DependencyObject element, bool value)', 'static void'),
  \ dotnet#method('GetShowDuration(', 'class DependencyObject element)', 'static int32'),
  \ dotnet#method('SetShowDuration(', 'class DependencyObject element, int32 value)', 'static void'),
  \ dotnet#method('GetInitialShowDelay(', 'class DependencyObject element)', 'static int32'),
  \ dotnet#method('SetInitialShowDelay(', 'class DependencyObject element, int32 value)', 'static void'),
  \ dotnet#method('GetBetweenShowDelay(', 'class DependencyObject element)', 'static int32'),
  \ dotnet#method('SetBetweenShowDelay(', 'class DependencyObject element, int32 value)', 'static void'),
  \ dotnet#method('ToolTipService(', ')', 'static void .'),
  \ ])

call dotnet#class('ToolTipEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('ToolTipEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, ToolTipEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, ToolTipEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('ToolTipEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('ToolTipEventArgs(', 'bool opening)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ ])

call dotnet#class('TreeView', 'ItemsControl', [ 
  \ dotnet#method('TreeView(', ')', 'void'),
  \ dotnet#method('get_SelectedItem(', ')', 'object'),
  \ dotnet#method('get_SelectedValue(', ')', 'object'),
  \ dotnet#method('get_SelectedValuePath(', ')', 'string'),
  \ dotnet#method('set_SelectedValuePath(', 'string value)', 'void'),
  \ dotnet#method('add_SelectedItemChanged(', 'class RoutedPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_SelectedItemChanged(', 'class RoutedPropertyChangedEventHandler value)', 'void'),
  \ dotnet#method('OnSelectedItemChanged(', 'class RoutedPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('ChangeSelection(', 'object data, TreeViewItem container, bool selected)', 'void'),
  \ dotnet#method('get_IsSelectionChangeActive(', ')', 'bool'),
  \ dotnet#method('set_IsSelectionChangeActive(', 'bool value)', 'void'),
  \ dotnet#method('HandleSelectionAndCollapsed(', 'class TreeViewItem collapsed)', 'void'),
  \ dotnet#method('HandleMouseButtonDown(', ')', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('OnItemsChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('get_IsSelectedContainerHookedUp(', ')', 'bool'),
  \ dotnet#method('get_SelectedContainer(', ')', '.method'),
  \ dotnet#method('get_HandlesScrolling(', ')', 'famorassem bool'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('ExpandSubtree(', 'class TreeViewItem container)', 'bool'),
  \ dotnet#method('OnIsKeyboardFocusWithinChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('OnGotFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('get_CurrentContainerSizeEstimate(', ')', '.method'),
  \ dotnet#method('RegisterContainerSize(', 'float64 containerSize)', 'void'),
  \ dotnet#method('TreeView(', ')', 'static void .'),
  \ dotnet#event('SelectedItemChanged', 'RoutedPropertyChangedEventHandler'),
  \ dotnet#prop('SelectedItem', 'object'),
  \ dotnet#prop('SelectedValue', 'object'),
  \ dotnet#prop('SelectedValuePath', 'string'),
  \ dotnet#prop('IsSelectionChangeActive', 'bool'),
  \ dotnet#prop('IsSelectedContainerHookedUp', 'bool'),
  \ dotnet#prop('SelectedContainer', 'TreeViewItem'),
  \ dotnet#prop('HandlesScrolling', 'bool'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ dotnet#prop('CurrentContainerSizeEstimate', 'Size'),
  \ ])

call dotnet#class('TreeViewItem', 'HeaderedItemsControl', [ 
  \ dotnet#method('TreeViewItem(', ')', 'void'),
  \ dotnet#method('get_IsExpanded(', ')', 'bool'),
  \ dotnet#method('set_IsExpanded(', 'bool value)', 'void'),
  \ dotnet#method('get_IsSelected(', ')', 'bool'),
  \ dotnet#method('set_IsSelected(', 'bool value)', 'void'),
  \ dotnet#method('get_IsSelectionActive(', ')', 'bool'),
  \ dotnet#method('add_Expanded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Expanded(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnExpanded(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_Collapsed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Collapsed(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnCollapsed(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_Selected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Selected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnSelected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('add_Unselected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('remove_Unselected(', 'class RoutedEventHandler value)', 'void'),
  \ dotnet#method('OnUnselected(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('ExpandSubtree(', ')', 'void'),
  \ dotnet#method('EstimatedContainerSize(', 'bool isHorizontal)', 'float64 '),
  \ dotnet#method('HeaderSize(', 'bool isHorizontal)', 'float64 '),
  \ dotnet#method('get_ParentTreeView(', ')', '.method'),
  \ dotnet#method('get_ParentTreeViewItem(', ')', '.method'),
  \ dotnet#method('get_ParentItemsControl(', ')', '.method'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('UpdateContainsSelection(', 'bool selected)', 'void'),
  \ dotnet#method('OnGotFocus(', 'class RoutedEventArgs e)', 'void'),
  \ dotnet#method('OnMouseLeftButtonDown(', 'class MouseButtonEventArgs e)', 'void'),
  \ dotnet#method('OnKeyDown(', 'class KeyEventArgs e)', 'void'),
  \ dotnet#method('HandleUpKey(', ')', 'bool'),
  \ dotnet#method('HandleDownKey(', ')', 'bool'),
  \ dotnet#method('FocusIntoItem(', 'class TreeViewItem item)', 'static bool'),
  \ dotnet#method('FocusDown(', ')', 'bool'),
  \ dotnet#method('InternalPredictFocus(', 'FocusNavigationDirection direction)', 'DependencyObject'),
  \ dotnet#method('HandleScrollByPage(', 'bool up, ScrollViewer scroller, float64 viewportHeight, float64 startTop, float64 startBottom, [out] float64& currentDelta)', 'bool'),
  \ dotnet#method('GetTopAndBottom(', 'class Visual parent, [out] float64& top, [out] float64& bottom)', 'void'),
  \ dotnet#method('IsItemItsOwnContainerOverride(', 'object item)', 'bool'),
  \ dotnet#method('GetContainerForItemOverride(', ')', 'DependencyObject'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('PrepareContainerForItemOverride(', 'class DependencyObject element, object item)', 'void'),
  \ dotnet#method('IsVirtualizingPropagationHelper(', 'class DependencyObject parent, DependencyObject element)', 'static void'),
  \ dotnet#method('OnItemsChanged(', 'class NotifyCollectionChangedEventArgs e)', 'void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('ChangeVisualState(', 'bool useTransitions)', 'strict void'),
  \ dotnet#method('TreeViewItem(', ')', 'static void .'),
  \ dotnet#event('Expanded', 'RoutedEventHandler'),
  \ dotnet#event('Collapsed', 'RoutedEventHandler'),
  \ dotnet#event('Selected', 'RoutedEventHandler'),
  \ dotnet#event('Unselected', 'RoutedEventHandler'),
  \ dotnet#prop('IsExpanded', 'bool'),
  \ dotnet#prop('IsSelected', 'bool'),
  \ dotnet#prop('IsSelectionActive', 'bool'),
  \ dotnet#prop('ParentTreeView', 'TreeView'),
  \ dotnet#prop('ParentTreeViewItem', 'TreeViewItem'),
  \ dotnet#prop('ParentItemsControl', 'ItemsControl'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('UIElementCollection', 'Object', [ 
  \ dotnet#method('UIElementCollection(', 'class UIElement visualParent, FrameworkElement logicalParent)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class UIElement[] array, int32 index)', 'void'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, UIElement value)', 'void'),
  \ dotnet#method('SetInternal(', 'int32 index, UIElement item)', 'void'),
  \ dotnet#method('Add(', 'class UIElement element)', 'int32'),
  \ dotnet#method('AddInternal(', 'class UIElement element)', 'int32'),
  \ dotnet#method('IndexOf(', 'class UIElement element)', 'int32'),
  \ dotnet#method('Remove(', 'class UIElement element)', 'void'),
  \ dotnet#method('RemoveInternal(', 'class UIElement element)', 'void'),
  \ dotnet#method('RemoveNoVerify(', 'class UIElement element)', 'strict void'),
  \ dotnet#method('Contains(', 'class UIElement element)', 'bool'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('ClearInternal(', ')', 'void'),
  \ dotnet#method('Insert(', 'int32 index, UIElement element)', 'void'),
  \ dotnet#method('InsertInternal(', 'int32 index, UIElement element)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('RemoveRangeInternal(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('MoveVisualChild(', 'class Visual visual, Visual destination)', 'void'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('SetLogicalParent(', 'class UIElement element)', 'void'),
  \ dotnet#method('ClearLogicalParent(', 'class UIElement element)', 'void'),
  \ dotnet#method('get_VisualParent(', ')', '.method'),
  \ dotnet#method('get_LogicalParent(', ')', '.method'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Item(int32)', 'UIElement'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('VisualParent', 'UIElement'),
  \ dotnet#prop('LogicalParent', 'FrameworkElement'),
  \ ])

call dotnet#class('UserControl', 'ContentControl', [ 
  \ dotnet#method('UserControl(', ')', 'void'),
  \ dotnet#method('AdjustBranchSource(', 'class RoutedEventArgs e)', 'strict void'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('get_StateGroupsRoot(', ')', 'strict'),
  \ dotnet#method('get_DTypeThemeStyleKey(', ')', 'strict'),
  \ dotnet#method('UserControl(', ')', 'static void .'),
  \ dotnet#prop('StateGroupsRoot', 'FrameworkElement'),
  \ dotnet#prop('DTypeThemeStyleKey', 'DependencyObjectType'),
  \ ])

call dotnet#class('Validation', 'Object', [ 
  \ dotnet#method('AddErrorHandler(', 'class DependencyObject element, EventHandler handler)', 'static void'),
  \ dotnet#method('RemoveErrorHandler(', 'class DependencyObject element, EventHandler handler)', 'static void'),
  \ dotnet#method('GetErrors(', 'class DependencyObject element)', 'static ReadOnlyObservableCollection'),
  \ dotnet#method('GetErrorsInternal(', 'class DependencyObject target)', 'static ValidationErrorCollection'),
  \ dotnet#method('GetHasError(', 'class DependencyObject element)', 'static bool'),
  \ dotnet#method('GetErrorTemplate(', 'class DependencyObject element)', 'static ControlTemplate'),
  \ dotnet#method('SetErrorTemplate(', 'class DependencyObject element, ControlTemplate value)', 'static void'),
  \ dotnet#method('GetValidationAdornerSite(', 'class DependencyObject element)', 'static DependencyObject'),
  \ dotnet#method('SetValidationAdornerSite(', 'class DependencyObject element, DependencyObject value)', 'static void'),
  \ dotnet#method('GetValidationAdornerSiteFor(', 'class DependencyObject element)', 'static DependencyObject'),
  \ dotnet#method('SetValidationAdornerSiteFor(', 'class DependencyObject element, DependencyObject value)', 'static void'),
  \ dotnet#method('ShowValidationAdorner(', 'class DependencyObject targetElement, bool show)', 'static void'),
  \ dotnet#method('MarkInvalid(', 'class BindingExpressionBase bindingExpression, ValidationError validationError)', 'static void'),
  \ dotnet#method('ClearInvalid(', 'class BindingExpressionBase bindingExpression)', 'static void'),
  \ dotnet#method('AddValidationError(', 'class ValidationError validationError, DependencyObject targetElement, bool shouldRaiseEvent)', 'static void'),
  \ dotnet#method('RemoveValidationError(', 'class ValidationError validationError, DependencyObject targetElement, bool shouldRaiseEvent)', 'static void'),
  \ dotnet#method('Validation(', ')', 'static void .'),
  \ ])

call dotnet#class('ValidationError', 'Object', [ 
  \ dotnet#method('ValidationError(', 'class ValidationRule ruleInError, object bindingInError, object errorContent, Exception exception)', 'void'),
  \ dotnet#method('ValidationError(', 'class ValidationRule ruleInError, object bindingInError)', 'void'),
  \ dotnet#method('get_RuleInError(', ')', 'ValidationRule'),
  \ dotnet#method('set_RuleInError(', 'class ValidationRule value)', 'void'),
  \ dotnet#method('get_ErrorContent(', ')', 'object'),
  \ dotnet#method('set_ErrorContent(', 'object value)', 'void'),
  \ dotnet#method('get_Exception(', ')', 'Exception'),
  \ dotnet#method('set_Exception(', 'class Exception value)', 'void'),
  \ dotnet#method('get_BindingInError(', ')', 'object'),
  \ dotnet#prop('RuleInError', 'ValidationRule'),
  \ dotnet#prop('ErrorContent', 'object'),
  \ dotnet#prop('Exception', 'Exception'),
  \ dotnet#prop('BindingInError', 'object'),
  \ ])

call dotnet#class('ValidationErrorEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('ValidationErrorEventArgs(', 'class ValidationError validationError, ValidationErrorEventAction action)', 'void'),
  \ dotnet#method('get_Error(', ')', 'ValidationError'),
  \ dotnet#method('get_Action(', ')', 'ValidationErrorEventAction'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Error', 'ValidationError'),
  \ dotnet#prop('Action', 'ValidationErrorEventAction'),
  \ ])

call dotnet#class('ValidationResult', 'Object', [ 
  \ dotnet#method('ValidationResult(', 'bool isValid, object errorContent)', 'void'),
  \ dotnet#method('get_IsValid(', ')', 'bool'),
  \ dotnet#method('get_ErrorContent(', ')', 'object'),
  \ dotnet#method('get_ValidResult(', ')', 'static'),
  \ dotnet#method('op_Equality(', 'class ValidationResult left, ValidationResult right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class ValidationResult left, ValidationResult right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ValidationResult(', ')', 'static void .'),
  \ dotnet#prop('IsValid', 'bool'),
  \ dotnet#prop('ErrorContent', 'object'),
  \ dotnet#prop('ValidResult', 'ValidationResult'),
  \ ])

call dotnet#class('Viewbox', 'Decorator', [ 
  \ dotnet#method('Viewbox(', ')', 'void'),
  \ dotnet#method('get_Child(', ')', ''),
  \ dotnet#method('set_Child(', 'class UIElement value)', 'void'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_LogicalChildren(', ')', 'famorassem'),
  \ dotnet#method('get_Stretch(', ')', 'Stretch'),
  \ dotnet#method('set_Stretch(', 'Stretch value)', 'void'),
  \ dotnet#method('get_StretchDirection(', ')', 'StretchDirection'),
  \ dotnet#method('set_StretchDirection(', 'StretchDirection value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size arrangeSize)', 'Size'),
  \ dotnet#method('ComputeScaleFViewbox(', 'Size availableSize, Size contentSize, Stretch stretch, StretchDirection stretchDirection)', 'static Size'),
  \ dotnet#method('Viewbox(', ')', 'static void .'),
  \ dotnet#prop('Child', 'UIElement'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('LogicalChildren', 'IEnumerator'),
  \ dotnet#prop('Stretch', 'Stretch'),
  \ dotnet#prop('StretchDirection', 'StretchDirection'),
  \ ])

call dotnet#class('Viewport3D', 'FrameworkElement', [ 
  \ dotnet#method('Viewport3D(', ')', 'void'),
  \ dotnet#method('get_Camera(', ')', 'Camera'),
  \ dotnet#method('set_Camera(', 'class Camera value)', 'void'),
  \ dotnet#method('get_Children(', ')', 'Visual3DCollection'),
  \ dotnet#method('OnCreateAutomationPeer(', ')', 'AutomationPeer'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('AddChild(', 'object value)', 'void '),
  \ dotnet#method('AddText(', 'string text)', 'void '),
  \ dotnet#method('Viewport3D(', ')', 'static void .'),
  \ dotnet#prop('Camera', 'Camera'),
  \ dotnet#prop('Children', 'Visual3DCollection'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ ])

call dotnet#class('WebBrowser', 'ActiveXHost', [ 
  \ dotnet#field('_webBrowser', 'WebBrowser'),
  \ dotnet#method('WebBrowser(', 'class WebBrowser webBrowser)', 'void'),
  \ dotnet#method('get_ObjectForScripting(', ')', 'strict object'),
  \ dotnet#method('set_ObjectForScripting(', 'object value)', 'strict void'),
  \ dotnet#method('CreateWebOC(', ')', 'strict object'),
  \ dotnet#method('CreateEventSink(', ')', 'strict object'),
  \ dotnet#prop('ObjectForScripting', 'object'),
  \ dotnet#field('_canGoBack', 'bool'),
  \ dotnet#field('_canGoForward', 'bool'),
  \ dotnet#method('WebBrowser(', ')', 'void'),
  \ dotnet#method('Navigate(', 'class Uri source)', 'void'),
  \ dotnet#method('Navigate(', 'string source)', 'void'),
  \ dotnet#method('Navigate(', 'class Uri source, string targetFrameName, uint8[] postData, string additionalHeaders)', 'void'),
  \ dotnet#method('Navigate(', 'string source, string targetFrameName, uint8[] postData, string additionalHeaders)', 'void'),
  \ dotnet#method('NavigateToStream(', 'class Stream stream)', 'void'),
  \ dotnet#method('NavigateToString(', 'string text)', 'void'),
  \ dotnet#method('GoBack(', ')', 'void'),
  \ dotnet#method('GoForward(', ')', 'void'),
  \ dotnet#method('Refresh(', ')', 'void'),
  \ dotnet#method('Refresh(', 'bool noCache)', 'void'),
  \ dotnet#method('InvokeScript(', 'string scriptName)', 'object'),
  \ dotnet#method('InvokeScript(', 'string scriptName, object[] args)', 'object'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('get_CanGoBack(', ')', 'bool'),
  \ dotnet#method('get_CanGoForward(', ')', 'bool'),
  \ dotnet#method('get_ObjectForScripting(', ')', 'object'),
  \ dotnet#method('set_ObjectForScripting(', 'object value)', 'void'),
  \ dotnet#method('get_Document(', ')', 'object'),
  \ dotnet#method('add_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigating(', 'class NavigatingCancelEventHandler value)', 'void'),
  \ dotnet#method('add_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('remove_Navigated(', 'class NavigatedEventHandler value)', 'void'),
  \ dotnet#method('add_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('remove_LoadCompleted(', 'class LoadCompletedEventHandler value)', 'void'),
  \ dotnet#method('OnNavigating(', 'class NavigatingCancelEventArgs e)', 'void'),
  \ dotnet#method('OnNavigated(', 'class NavigationEventArgs e)', 'void'),
  \ dotnet#method('OnLoadCompleted(', 'class NavigationEventArgs e)', 'void'),
  \ dotnet#method('CreateActiveXObject(', 'Guid clsid)', 'strict object'),
  \ dotnet#method('AttachInterfaces(', 'object nativeActiveXObject)', 'strict void'),
  \ dotnet#method('DetachInterfaces(', ')', 'strict void'),
  \ dotnet#method('CreateSink(', ')', 'strict void'),
  \ dotnet#method('DetachSink(', ')', 'strict void'),
  \ dotnet#method('CreateActiveXSite(', ')', 'strict'),
  \ dotnet#method('GetDrawing(', ')', 'strict'),
  \ dotnet#method('CleanInternalState(', ')', 'void'),
  \ dotnet#method('get_NativeHTMLDocument(', ')', '.method'),
  \ dotnet#method('get_AxIWebBrowser2(', ')', '.method'),
  \ dotnet#method('get_HostingAdaptor(', ')', '.method'),
  \ dotnet#method('get_DocumentStream(', ')', '.method'),
  \ dotnet#method('set_DocumentStream(', 'class Stream value)', 'void'),
  \ dotnet#method('get_NavigatingToAboutBlank(', ')', 'bool'),
  \ dotnet#method('set_NavigatingToAboutBlank(', 'bool value)', 'void'),
  \ dotnet#method('get_LastNavigation(', ')', '.method'),
  \ dotnet#method('set_LastNavigation(', 'Guid value)', 'void'),
  \ dotnet#method('get_IsWebOCHostedInBrowserProcess(', ')', 'static bool'),
  \ dotnet#method('TranslateAcceleratorCore(', 'MSG& msg, ModifierKeys modifiers)', 'bool'),
  \ dotnet#method('TabIntoCore(', 'class TraversalRequest request)', 'bool'),
  \ dotnet#method('WebBrowser(', ')', 'static void .'),
  \ dotnet#event('Navigating', 'NavigatingCancelEventHandler'),
  \ dotnet#event('Navigated', 'NavigatedEventHandler'),
  \ dotnet#event('LoadCompleted', 'LoadCompletedEventHandler'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('CanGoBack', 'bool'),
  \ dotnet#prop('CanGoForward', 'bool'),
  \ dotnet#prop('ObjectForScripting', 'object'),
  \ dotnet#prop('Document', 'object'),
  \ dotnet#prop('NativeHTMLDocument', 'UnsafeNativeMethods/IHTMLDocument2'),
  \ dotnet#prop('AxIWebBrowser2', 'UnsafeNativeMethods/IWebBrowser2'),
  \ dotnet#prop('HostingAdaptor', 'WebBrowser/WebOCHostingAdaptor'),
  \ dotnet#prop('DocumentStream', 'Stream'),
  \ dotnet#prop('NavigatingToAboutBlank', 'bool'),
  \ dotnet#prop('LastNavigation', 'Guid'),
  \ dotnet#prop('IsWebOCHostedInBrowserProcess', 'bool'),
  \ ])

call dotnet#class('WrapPanel', 'Panel', [ 
  \ dotnet#method('WrapPanel(', ')', 'void'),
  \ dotnet#method('get_ItemWidth(', ')', 'float64'),
  \ dotnet#method('set_ItemWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_ItemHeight(', ')', 'float64'),
  \ dotnet#method('set_ItemHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_Orientation(', ')', 'Orientation'),
  \ dotnet#method('set_Orientation(', 'Orientation value)', 'void'),
  \ dotnet#method('MeasureOverride(', 'Size constraint)', 'Size'),
  \ dotnet#method('ArrangeOverride(', 'Size finalSize)', 'Size'),
  \ dotnet#method('WrapPanel(', ')', 'static void .'),
  \ dotnet#prop('ItemWidth', 'float64'),
  \ dotnet#prop('ItemHeight', 'float64'),
  \ dotnet#prop('Orientation', 'Orientation'),
  \ ])

call dotnet#class('SpellingError', 'Object', [ 
  \ dotnet#method('SpellingError(', 'class Speller speller, ITextPointer start, ITextPointer end)', 'void'),
  \ dotnet#method('Correct(', 'string correctedText)', 'void'),
  \ dotnet#method('IgnoreAll(', ')', 'void'),
  \ dotnet#method('get_Suggestions(', ')', 'IEnumerable'),
  \ dotnet#method('get_Start(', ')', '.method'),
  \ dotnet#method('get_End(', ')', '.method'),
  \ dotnet#prop('Suggestions', 'IEnumerable'),
  \ dotnet#prop('Start', 'ITextPointer'),
  \ dotnet#prop('End', 'ITextPointer'),
  \ ])

call dotnet#class('InkCanvasStrokeCollectedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InkCanvasStrokeCollectedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InkCanvasStrokeCollectedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InkCanvasStrokeCollectedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InkCanvasStrokeCollectedEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('InkCanvasStrokeCollectedEventArgs(', 'class Stroke stroke)', 'void'),
  \ dotnet#method('get_Stroke(', ')', 'Stroke'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Stroke', 'Stroke'),
  \ ])

call dotnet#class('InkCanvasStrokesReplacedEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InkCanvasStrokesReplacedEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InkCanvasStrokesReplacedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InkCanvasStrokesReplacedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InkCanvasStrokesReplacedEventArgs', 'EventArgs', [ 
  \ dotnet#method('InkCanvasStrokesReplacedEventArgs(', 'class StrokeCollection newStrokes, StrokeCollection previousStrokes)', 'void'),
  \ dotnet#method('get_NewStrokes(', ')', 'StrokeCollection'),
  \ dotnet#method('get_PreviousStrokes(', ')', 'StrokeCollection'),
  \ dotnet#prop('NewStrokes', 'StrokeCollection'),
  \ dotnet#prop('PreviousStrokes', 'StrokeCollection'),
  \ ])

call dotnet#class('InkCanvasSelectionChangingEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InkCanvasSelectionChangingEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InkCanvasSelectionChangingEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InkCanvasSelectionChangingEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InkCanvasSelectionChangingEventArgs', 'CancelEventArgs', [ 
  \ dotnet#method('InkCanvasSelectionChangingEventArgs(', 'class StrokeCollection selectedStrokes, IEnumerable selectedElements)', 'void'),
  \ dotnet#method('get_StrokesChanged(', ')', 'bool'),
  \ dotnet#method('get_ElementsChanged(', ')', 'bool'),
  \ dotnet#method('SetSelectedElements(', 'class IEnumerable selectedElements)', 'void'),
  \ dotnet#method('GetSelectedElements(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('SetSelectedStrokes(', 'class StrokeCollection selectedStrokes)', 'void'),
  \ dotnet#method('GetSelectedStrokes(', ')', 'StrokeCollection'),
  \ dotnet#prop('StrokesChanged', 'bool'),
  \ dotnet#prop('ElementsChanged', 'bool'),
  \ ])

call dotnet#class('InkCanvasSelectionEditingEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InkCanvasSelectionEditingEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InkCanvasSelectionEditingEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InkCanvasSelectionEditingEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InkCanvasSelectionEditingEventArgs', 'CancelEventArgs', [ 
  \ dotnet#method('InkCanvasSelectionEditingEventArgs(', 'Rect oldRectangle, Rect newRectangle)', 'void'),
  \ dotnet#method('get_OldRectangle(', ')', 'Rect'),
  \ dotnet#method('get_NewRectangle(', ')', 'Rect'),
  \ dotnet#method('set_NewRectangle(', 'Rect value)', 'void'),
  \ dotnet#prop('OldRectangle', 'Rect'),
  \ dotnet#prop('NewRectangle', 'Rect'),
  \ ])

call dotnet#class('InkCanvasStrokeErasingEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InkCanvasStrokeErasingEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InkCanvasStrokeErasingEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InkCanvasStrokeErasingEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InkCanvasStrokeErasingEventArgs', 'CancelEventArgs', [ 
  \ dotnet#method('InkCanvasStrokeErasingEventArgs(', 'class Stroke stroke)', 'void'),
  \ dotnet#method('get_Stroke(', ')', 'Stroke'),
  \ dotnet#prop('Stroke', 'Stroke'),
  \ ])

call dotnet#class('InkCanvasGestureEventHandler', 'MulticastDelegate', [ 
  \ dotnet#method('InkCanvasGestureEventHandler(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, InkCanvasGestureEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, InkCanvasGestureEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ ])

call dotnet#class('InkCanvasGestureEventArgs', 'RoutedEventArgs', [ 
  \ dotnet#method('InkCanvasGestureEventArgs(', 'class StrokeCollection strokes, IEnumerable gestureRecognitionResults)', 'void'),
  \ dotnet#method('get_Strokes(', ')', 'StrokeCollection'),
  \ dotnet#method('GetGestureRecognitionResults(', ')', 'ReadOnlyCollection'),
  \ dotnet#method('get_Cancel(', ')', 'bool'),
  \ dotnet#method('set_Cancel(', 'bool value)', 'void'),
  \ dotnet#method('InvokeEventHandler(', 'class Delegate genericHandler, object genericTarget)', 'void'),
  \ dotnet#prop('Strokes', 'StrokeCollection'),
  \ dotnet#prop('Cancel', 'bool'),
  \ ])

call dotnet#class('ColumnDefinitionCollection', 'Object', [ 
  \ dotnet#field('_collection', 'ColumnDefinitionCollection'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#field('_version', 'int32'),
  \ dotnet#field('_currentElement', 'object'),
  \ dotnet#method('ColumnDefinitionCollection(', 'class ColumnDefinitionCollection collection)', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'ColumnDefinition'),
  \ dotnet#method('ColumnDefinitionCollection(', 'class Grid owner)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class ColumnDefinition[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Add(', 'class ColumnDefinition value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('Contains(', 'class ColumnDefinition value)', 'bool'),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class ColumnDefinition value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, ColumnDefinition value)', 'void'),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('Remove(', 'class ColumnDefinition value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, ColumnDefinition value)', 'void'),
  \ dotnet#method('InternalTrimToSize(', ')', 'void'),
  \ dotnet#method('get_InternalCount(', ')', 'int32'),
  \ dotnet#method('get_InternalItems(', ')', '.method'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'ColumnDefinition'),
  \ dotnet#prop('InternalCount', 'int32'),
  \ dotnet#prop('InternalItems', 'DefinitionBase[]'),
  \ ])

call dotnet#class('ColumnDefinition', 'DefinitionBase', [ 
  \ dotnet#method('ColumnDefinition(', ')', 'void'),
  \ dotnet#method('get_Width(', ')', 'GridLength'),
  \ dotnet#method('set_Width(', 'GridLength value)', 'void'),
  \ dotnet#method('get_MinWidth(', ')', 'float64'),
  \ dotnet#method('set_MinWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxWidth(', ')', 'float64'),
  \ dotnet#method('set_MaxWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_ActualWidth(', ')', 'float64'),
  \ dotnet#method('get_Offset(', ')', 'float64'),
  \ dotnet#method('ColumnDefinition(', ')', 'static void .'),
  \ dotnet#prop('Width', 'GridLength'),
  \ dotnet#prop('MinWidth', 'float64'),
  \ dotnet#prop('MaxWidth', 'float64'),
  \ dotnet#prop('ActualWidth', 'float64'),
  \ dotnet#prop('Offset', 'float64'),
  \ ])

call dotnet#class('RowDefinitionCollection', 'Object', [ 
  \ dotnet#field('_collection', 'RowDefinitionCollection'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#field('_version', 'int32'),
  \ dotnet#field('_currentElement', 'object'),
  \ dotnet#method('RowDefinitionCollection(', 'class RowDefinitionCollection collection)', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'RowDefinition'),
  \ dotnet#method('RowDefinitionCollection(', 'class Grid owner)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('CopyTo(', 'class RowDefinition[] array, int32 index)', 'void'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Add(', 'class RowDefinition value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('Contains(', 'class RowDefinition value)', 'bool'),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('IndexOf(', 'class RowDefinition value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Insert(', 'int32 index, RowDefinition value)', 'void'),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('Remove(', 'class RowDefinition value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, RowDefinition value)', 'void'),
  \ dotnet#method('InternalTrimToSize(', ')', 'void'),
  \ dotnet#method('get_InternalCount(', ')', 'int32'),
  \ dotnet#method('get_InternalItems(', ')', '.method'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('Item(int32)', 'RowDefinition'),
  \ dotnet#prop('InternalCount', 'int32'),
  \ dotnet#prop('InternalItems', 'DefinitionBase[]'),
  \ ])

call dotnet#class('RowDefinition', 'DefinitionBase', [ 
  \ dotnet#method('RowDefinition(', ')', 'void'),
  \ dotnet#method('get_Height(', ')', 'GridLength'),
  \ dotnet#method('set_Height(', 'GridLength value)', 'void'),
  \ dotnet#method('get_MinHeight(', ')', 'float64'),
  \ dotnet#method('set_MinHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxHeight(', ')', 'float64'),
  \ dotnet#method('set_MaxHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_ActualHeight(', ')', 'float64'),
  \ dotnet#method('get_Offset(', ')', 'float64'),
  \ dotnet#method('RowDefinition(', ')', 'static void .'),
  \ dotnet#prop('Height', 'GridLength'),
  \ dotnet#prop('MinHeight', 'float64'),
  \ dotnet#prop('MaxHeight', 'float64'),
  \ dotnet#prop('ActualHeight', 'float64'),
  \ dotnet#prop('Offset', 'float64'),
  \ ])

