
call dotnet#class('DisableDpiAwarenessAttribute', 'Attribute', [ 
  \ dotnet#method('DisableDpiAwarenessAttribute(', ''),
  \ ])

call dotnet#class('Matrix', 'ValueType', [ 
  \ dotnet#field('_m11', 'float64'),
  \ dotnet#field('_m12', 'float64'),
  \ dotnet#field('_m21', 'float64'),
  \ dotnet#field('_m22', 'float64'),
  \ dotnet#field('_offsetX', 'float64'),
  \ dotnet#field('_offsetY', 'float64'),
  \ dotnet#field('_type', 'MatrixTypes'),
  \ dotnet#field('_padding', 'int32'),
  \ dotnet#method('Matrix(', ''),
  \ dotnet#method('SetIdentity(', ''),
  \ dotnet#method('get_IsIdentity(', ''),
  \ dotnet#method('Multiply(', ''),
  \ dotnet#method('Append(', ''),
  \ dotnet#method('Prepend(', ''),
  \ dotnet#method('Rotate(', ''),
  \ dotnet#method('RotatePrepend(', ''),
  \ dotnet#method('RotateAt(', ''),
  \ dotnet#method('RotateAtPrepend(', ''),
  \ dotnet#method('Scale(', ''),
  \ dotnet#method('ScalePrepend(', ''),
  \ dotnet#method('ScaleAt(', ''),
  \ dotnet#method('ScaleAtPrepend(', ''),
  \ dotnet#method('Skew(', ''),
  \ dotnet#method('SkewPrepend(', ''),
  \ dotnet#method('Translate(', ''),
  \ dotnet#method('TranslatePrepend(', ''),
  \ dotnet#method('Transform(', ''),
  \ dotnet#method('get_Determinant(', ''),
  \ dotnet#method('get_HasInverse(', ''),
  \ dotnet#method('Invert(', ''),
  \ dotnet#method('get_M11(', ''),
  \ dotnet#method('set_M11(', ''),
  \ dotnet#method('get_M12(', ''),
  \ dotnet#method('set_M12(', ''),
  \ dotnet#method('get_M21(', ''),
  \ dotnet#method('set_M21(', ''),
  \ dotnet#method('get_M22(', ''),
  \ dotnet#method('set_M22(', ''),
  \ dotnet#method('get_OffsetX(', ''),
  \ dotnet#method('set_OffsetX(', ''),
  \ dotnet#method('get_OffsetY(', ''),
  \ dotnet#method('set_OffsetY(', ''),
  \ dotnet#method('MultiplyVMatrix(', ''),
  \ dotnet#method('MultiplyPoint(', ''),
  \ dotnet#method('CreateRotationRadians(', ''),
  \ dotnet#method('CreateScaling(', ''),
  \ dotnet#method('CreateSkewRadians(', ''),
  \ dotnet#method('CreateTranslation(', ''),
  \ dotnet#method('op_Equality(', ''),
  \ dotnet#method('op_Inequality(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#prop('Identity', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ dotnet#prop('Determinant', 'float64'),
  \ dotnet#prop('HasInverse', 'bool'),
  \ dotnet#prop('M11', 'float64'),
  \ dotnet#prop('M12', 'float64'),
  \ dotnet#prop('M21', 'float64'),
  \ dotnet#prop('M22', 'float64'),
  \ dotnet#prop('OffsetX', 'float64'),
  \ dotnet#prop('OffsetY', 'float64'),
  \ ])

call dotnet#class('MatrixConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('MatrixConverter(', ''),
  \ ])

call dotnet#class('Visual', 'DependencyObject', [ 
  \ dotnet#field('_hitResult', 'HitTestResult'),
  \ dotnet#method('HitTestResult(', ''),
  \ dotnet#method('NoNested2DFilter(', ''),
  \ dotnet#method('Visual(', ''),
  \ dotnet#method('Invoke(', ''),
  \ dotnet#method('EndInvoke(', ''),
  \ dotnet#field('_parentIndex', 'int32'),
  \ dotnet#field('_parent', 'DependencyObject'),
  \ dotnet#field('_proxy', 'VisualProxy'),
  \ dotnet#method('IsOnChannel(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('RemoveChildFromParent(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('get_IsVisualChildrenIterationInProgress(', ''),
  \ dotnet#method('set_IsVisualChildrenIterationInProgress(', ''),
  \ dotnet#method('get_IsRootElement(', ''),
  \ dotnet#method('set_IsRootElement(', ''),
  \ dotnet#method('RenderContent(', ''),
  \ dotnet#method('RenderClose(', ''),
  \ dotnet#method('CalculateSubgraphBoundsInnerSpace(', ''),
  \ dotnet#method('CalculateSubgraphRenderBoundsInnerSpace(', ''),
  \ dotnet#method('CalculateSubgraphBoundsOuterSpace(', ''),
  \ dotnet#method('CalculateSubgraphRenderBoundsOuterSpace(', ''),
  \ dotnet#method('FreeContent(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('AddRefOnChannelForCyclicBrush(', ''),
  \ dotnet#method('ReleaseOnChannelForCyclicBrush(', ''),
  \ dotnet#method('VerifyAPIReadOnly(', ''),
  \ dotnet#method('VerifyAPIReadWrite(', ''),
  \ dotnet#method('Precompute(', ''),
  \ dotnet#method('PrecomputeContent(', ''),
  \ dotnet#method('PrecomputeRecursive(', ''),
  \ dotnet#method('Render(', ''),
  \ dotnet#method('RenderRecursive(', ''),
  \ dotnet#method('Enter(', ''),
  \ dotnet#method('Exit(', ''),
  \ dotnet#method('InvalidateHitTestBounds(', ''),
  \ dotnet#method('HitTest(', ''),
  \ dotnet#method('HitTestPoint(', ''),
  \ dotnet#method('TransformToOuterSpace(', ''),
  \ dotnet#method('HitTestGeometry(', ''),
  \ dotnet#method('get_VisualChildrenCount(', ''),
  \ dotnet#method('get_InternalVisualChildrenCount(', ''),
  \ dotnet#method('get_InternalVisual2DOr3DChildrenCount(', ''),
  \ dotnet#method('get_HasVisualChildren(', ''),
  \ dotnet#method('InternalGetVisualChild(', ''),
  \ dotnet#method('InternalAddVisualChild(', ''),
  \ dotnet#method('InternalRemoveVisualChild(', ''),
  \ dotnet#method('AddVisualChild(', ''),
  \ dotnet#method('RemoveVisualChild(', ''),
  \ dotnet#method('InvalidateZOrder(', ''),
  \ dotnet#method('get_TreeLevel(', ''),
  \ dotnet#method('set_TreeLevel(', ''),
  \ dotnet#method('get_VisualParent(', ''),
  \ dotnet#method('InternalSetOffsetWorkaround(', ''),
  \ dotnet#method('InternalSetTransformWorkaround(', ''),
  \ dotnet#method('set_VisualTransform(', ''),
  \ dotnet#method('set_VisualEffect(', ''),
  \ dotnet#method('set_VisualEffectInternal(', ''),
  \ dotnet#method('set_VisualBitmapEffect(', ''),
  \ dotnet#method('set_VisualBitmapEffectInput(', ''),
  \ dotnet#method('BitmapEffectEmulationChanged(', ''),
  \ dotnet#method('get_BitmapEffectEmulationDisabled(', ''),
  \ dotnet#method('set_BitmapEffectEmulationDisabled(', ''),
  \ dotnet#method('set_VisualBitmapEffectInternal(', ''),
  \ dotnet#method('set_VisualBitmapEffectInputInternal(', ''),
  \ dotnet#method('set_VisualCacheMode(', ''),
  \ dotnet#method('set_VisualScrollableAreaClip(', ''),
  \ dotnet#method('set_VisualClip(', ''),
  \ dotnet#method('ChangeVisualClip(', ''),
  \ dotnet#method('set_VisualOffset(', ''),
  \ dotnet#method('get_VisualOpacity(', ''),
  \ dotnet#method('set_VisualOpacity(', ''),
  \ dotnet#method('set_VisualEdgeMode(', ''),
  \ dotnet#method('set_VisualBitmapScalingMode(', ''),
  \ dotnet#method('set_VisualClearTypeHint(', ''),
  \ dotnet#method('set_VisualTextRenderingMode(', ''),
  \ dotnet#method('set_VisualTextHintingMode(', ''),
  \ dotnet#method('set_VisualOpacityMask(', ''),
  \ dotnet#method('set_VisualXSnappingGuidelines(', ''),
  \ dotnet#method('set_VisualYSnappingGuidelines(', ''),
  \ dotnet#method('DisconnectAttachedResource(', ''),
  \ dotnet#method('FireOnVisualParentChanged(', ''),
  \ dotnet#method('OnVisualParentChanged(', ''),
  \ dotnet#method('OnVisualChildrenChanged(', ''),
  \ dotnet#method('add_VisualAncestorChanged(', ''),
  \ dotnet#method('remove_VisualAncestorChanged(', ''),
  \ dotnet#method('ProcessAncestorChangedNotificationRecursive(', ''),
  \ dotnet#method('IsAncestorOf(', ''),
  \ dotnet#method('IsDescendantOf(', ''),
  \ dotnet#method('SetFlagsToRoot(', ''),
  \ dotnet#method('FindFirstAncestorWithFlagsAnd(', ''),
  \ dotnet#method('FindCommonVisualAncestor(', ''),
  \ dotnet#method('TransformToAncestor(', ''),
  \ dotnet#method('TransformToDescendant(', ''),
  \ dotnet#method('TransformToVisual(', ''),
  \ dotnet#method('TrySimpleTransformToAncestor(', ''),
  \ dotnet#method('PointToScreen(', ''),
  \ dotnet#method('PointFromScreen(', ''),
  \ dotnet#method('ClipChanged(', ''),
  \ dotnet#method('ScrollableAreaClipChanged(', ''),
  \ dotnet#method('TransformChanged(', ''),
  \ dotnet#method('EffectChanged(', ''),
  \ dotnet#method('CacheModeChanged(', ''),
  \ dotnet#method('GuidelinesChanged(', ''),
  \ dotnet#method('OpacityMaskChanged(', ''),
  \ dotnet#method('ContentsChanged(', ''),
  \ dotnet#method('SetFlagsOnAllChannels(', ''),
  \ dotnet#method('SetFlags(', ''),
  \ dotnet#method('CheckFlagsOnAllChannels(', ''),
  \ dotnet#method('CheckFlagsAnd(', ''),
  \ dotnet#method('CheckFlagsOr(', ''),
  \ dotnet#method('SetTreeBits(', ''),
  \ dotnet#method('ClearTreeBits(', ''),
  \ dotnet#method('PropagateFlags(', ''),
  \ dotnet#method('PropagateChangedFlags(', ''),
  \ dotnet#event('VisualAncestorChanged', 'Visual/AncestorChangedEventHandler'),
  \ dotnet#prop('IsVisualChildrenIterationInProgress', 'bool'),
  \ dotnet#prop('IsRootElement', 'bool'),
  \ dotnet#prop('VisualContentBounds', 'Rect'),
  \ dotnet#prop('VisualDescendantBounds', 'Rect'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('InternalVisualChildrenCount', 'int32'),
  \ dotnet#prop('InternalVisual2DOr3DChildrenCount', 'int32'),
  \ dotnet#prop('HasVisualChildren', 'bool'),
  \ dotnet#prop('TreeLevel', 'uint32'),
  \ dotnet#prop('VisualParent', 'DependencyObject'),
  \ dotnet#prop('InternalVisualParent', 'DependencyObject'),
  \ dotnet#prop('VisualTransform', 'Transform'),
  \ dotnet#prop('VisualEffect', 'Effect'),
  \ dotnet#prop('VisualEffectInternal', 'Effect'),
  \ dotnet#prop('VisualBitmapEffect', 'BitmapEffect'),
  \ dotnet#prop('VisualBitmapEffectInput', 'BitmapEffectInput'),
  \ dotnet#prop('BitmapEffectEmulationDisabled', 'bool'),
  \ dotnet#prop('VisualBitmapEffectInternal', 'BitmapEffect'),
  \ dotnet#prop('VisualBitmapEffectInputInternal', 'BitmapEffectInput'),
  \ dotnet#prop('VisualCacheMode', 'CacheMode'),
  \ dotnet#prop('VisualScrollableAreaClip', 'Nullable'),
  \ dotnet#prop('VisualClip', 'Geometry'),
  \ dotnet#prop('VisualOffset', 'VVisual'),
  \ dotnet#prop('VisualOpacity', 'float64'),
  \ dotnet#prop('VisualEdgeMode', 'EdgeMode'),
  \ dotnet#prop('VisualBitmapScalingMode', 'BitmapScalingMode'),
  \ dotnet#prop('VisualClearTypeHint', 'ClearTypeHint'),
  \ dotnet#prop('VisualTextRenderingMode', 'TextRenderingMode'),
  \ dotnet#prop('VisualTextHintingMode', 'TextHintingMode'),
  \ dotnet#prop('VisualOpacityMask', 'Brush'),
  \ dotnet#prop('VisualXSnappingGuidelines', 'DoubleCollection'),
  \ dotnet#prop('VisualYSnappingGuidelines', 'DoubleCollection'),
  \ dotnet#prop('ClipChangedHandler', 'EventHandler'),
  \ dotnet#prop('ScrollableAreaClipChangedHandler', 'EventHandler'),
  \ dotnet#prop('TransformChangedHandler', 'EventHandler'),
  \ dotnet#prop('EffectChangedHandler', 'EventHandler'),
  \ dotnet#prop('CacheModeChangedHandler', 'EventHandler'),
  \ dotnet#prop('GuidelinesChangedHandler', 'EventHandler'),
  \ dotnet#prop('OpacityMaskChangedHandler', 'EventHandler'),
  \ dotnet#prop('ContentsChangedHandler', 'EventHandler'),
  \ ])

call dotnet#class('ContainerVisual', 'Visual', [ 
  \ dotnet#method('ContainerVisual(', ''),
  \ dotnet#method('get_Children(', ''),
  \ dotnet#method('get_Parent(', ''),
  \ dotnet#method('get_Clip(', ''),
  \ dotnet#method('set_Clip(', ''),
  \ dotnet#method('get_Opacity(', ''),
  \ dotnet#method('set_Opacity(', ''),
  \ dotnet#method('get_OpacityMask(', ''),
  \ dotnet#method('set_OpacityMask(', ''),
  \ dotnet#method('get_CacheMode(', ''),
  \ dotnet#method('set_CacheMode(', ''),
  \ dotnet#method('get_BitmapEffect(', ''),
  \ dotnet#method('set_BitmapEffect(', ''),
  \ dotnet#method('get_BitmapEffectInput(', ''),
  \ dotnet#method('set_BitmapEffectInput(', ''),
  \ dotnet#method('get_Effect(', ''),
  \ dotnet#method('set_Effect(', ''),
  \ dotnet#method('get_XSnappingGuidelines(', ''),
  \ dotnet#method('set_XSnappingGuidelines(', ''),
  \ dotnet#method('get_YSnappingGuidelines(', ''),
  \ dotnet#method('set_YSnappingGuidelines(', ''),
  \ dotnet#method('HitTest(', ''),
  \ dotnet#method('get_ContentBounds(', ''),
  \ dotnet#method('get_Transform(', ''),
  \ dotnet#method('set_Transform(', ''),
  \ dotnet#method('get_Offset(', ''),
  \ dotnet#method('set_Offset(', ''),
  \ dotnet#method('get_DescendantBounds(', ''),
  \ dotnet#method('get_VisualChildrenCount(', ''),
  \ dotnet#prop('Children', 'VisualCollection'),
  \ dotnet#prop('Parent', 'DependencyObject'),
  \ dotnet#prop('Clip', 'Geometry'),
  \ dotnet#prop('Opacity', 'float64'),
  \ dotnet#prop('OpacityMask', 'Brush'),
  \ dotnet#prop('CacheMode', 'CacheMode'),
  \ dotnet#prop('BitmapEffect', 'BitmapEffect'),
  \ dotnet#prop('BitmapEffectInput', 'BitmapEffectInput'),
  \ dotnet#prop('Effect', 'Effect'),
  \ dotnet#prop('XSnappingGuidelines', 'DoubleCollection'),
  \ dotnet#prop('YSnappingGuidelines', 'DoubleCollection'),
  \ dotnet#prop('ContentBounds', 'Rect'),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('Offset', 'VContainerVisual'),
  \ dotnet#prop('DescendantBounds', 'Rect'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ ])

call dotnet#class('DrawingVisual', 'ContainerVisual', [ 
  \ dotnet#method('HitTestCore(', ''),
  \ dotnet#method('RenderOpen(', ''),
  \ dotnet#method('RenderClose(', ''),
  \ dotnet#method('FreeContent(', ''),
  \ dotnet#method('WalkContent(', ''),
  \ dotnet#method('RenderContent(', ''),
  \ dotnet#method('get_Drawing(', ''),
  \ dotnet#method('DrawingVisual(', ''),
  \ dotnet#prop('Drawing', 'DrawingGroup'),
  \ ])

call dotnet#class('StreamGeometryContext', 'DispatcherObject', [ 
  \ dotnet#method('StreamGeometryContext(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('BeginFigure(', ''),
  \ dotnet#method('LineTo(', ''),
  \ dotnet#method('QuadraticBezierTo(', ''),
  \ dotnet#method('BezierTo(', ''),
  \ dotnet#method('PolyLineTo(', ''),
  \ dotnet#method('PolyQuadraticBezierTo(', ''),
  \ dotnet#method('PolyBezierTo(', ''),
  \ dotnet#method('ArcTo(', ''),
  \ dotnet#method('DisposeCore(', ''),
  \ dotnet#method('SetClosedState(', ''),
  \ ])

call dotnet#class('GeneralTransform', 'Animatable', [ 
  \ dotnet#method('TryTransform(', ''),
  \ dotnet#method('Transform(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('GeneralTransform(', ''),
  \ dotnet#prop('Inverse', 'GeneralTransform'),
  \ dotnet#prop('AffineTransform', 'Transform'),
  \ ])

call dotnet#class('HostVisual', 'ContainerVisual', [ 
  \ dotnet#method('HostVisual(', ''),
  \ dotnet#method('HitTestCore(', ''),
  \ dotnet#method('RenderContent(', ''),
  \ dotnet#method('FreeContent(', ''),
  \ dotnet#method('BeginHosting(', ''),
  \ dotnet#method('EndHosting(', ''),
  \ dotnet#method('DoHandleDuplication(', ''),
  \ ])

call dotnet#class('ImageSource', 'Animatable', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('ImageSource(', ''),
  \ dotnet#method('get_Width(', ''),
  \ dotnet#method('get_Height(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('PixelsToDIPs(', ''),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Metadata', 'ImageMetadata'),
  \ dotnet#prop('Size', 'Size'),
  \ ])

call dotnet#class('CompositionTarget', 'DispatcherObject', [ 
  \ dotnet#field('value__', 'uint32'),
  \ dotnet#field('_contentRoot', 'DUCE/MultiChannelResource'),
  \ dotnet#method('CompositionTarget(', ''),
  \ dotnet#method('CreateUCEResources(', ''),
  \ dotnet#method('ReleaseUCEResources(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('get_IsDisposed(', ''),
  \ dotnet#method('set_RootVisual(', ''),
  \ dotnet#method('StateChangedCallback(', ''),
  \ dotnet#method('AddRefOnChannel(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('Render(', ''),
  \ dotnet#method('VerifyAPIReadOnly(', ''),
  \ dotnet#method('VerifyAPIReadWrite(', ''),
  \ dotnet#method('add_Rendering(', ''),
  \ dotnet#method('remove_Rendering(', ''),
  \ dotnet#event('Rendering', 'EventHandler'),
  \ dotnet#prop('IsDisposed', 'bool'),
  \ dotnet#prop('RootVisual', 'Visual'),
  \ dotnet#prop('TransformToDevice', 'Matrix'),
  \ dotnet#prop('TransformFromDevice', 'Matrix'),
  \ dotnet#prop('WorldTransform', 'Matrix'),
  \ dotnet#prop('WorldClipBounds', 'Rect'),
  \ ])

call dotnet#class('PathSegment', 'Animatable', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_IsStroked(', ''),
  \ dotnet#method('set_IsStroked(', ''),
  \ dotnet#method('get_IsSmoothJoin(', ''),
  \ dotnet#method('set_IsSmoothJoin(', ''),
  \ dotnet#method('PathSegment(', ''),
  \ dotnet#method('AddToFigure(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('IsCurved(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('SerializeData(', ''),
  \ dotnet#prop('IsStroked', 'bool'),
  \ dotnet#prop('IsSmoothJoin', 'bool'),
  \ ])

call dotnet#class('ArcSegment', 'PathSegment', [ 
  \ dotnet#method('ArcSegment(', ''),
  \ dotnet#method('AddToFigure(', ''),
  \ dotnet#method('SerializeData(', ''),
  \ dotnet#method('IsCurved(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Point(', ''),
  \ dotnet#method('set_Point(', ''),
  \ dotnet#method('get_Size(', ''),
  \ dotnet#method('set_Size(', ''),
  \ dotnet#method('get_RotationAngle(', ''),
  \ dotnet#method('set_RotationAngle(', ''),
  \ dotnet#method('get_IsLargeArc(', ''),
  \ dotnet#method('set_IsLargeArc(', ''),
  \ dotnet#method('get_SweepDirection(', ''),
  \ dotnet#method('set_SweepDirection(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Point', 'Point'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('RotationAngle', 'float64'),
  \ dotnet#prop('IsLargeArc', 'bool'),
  \ dotnet#prop('SweepDirection', 'SweepDirection'),
  \ ])

call dotnet#class('BezierSegment', 'PathSegment', [ 
  \ dotnet#method('BezierSegment(', ''),
  \ dotnet#method('AddToFigure(', ''),
  \ dotnet#method('SerializeData(', ''),
  \ dotnet#method('IsCurved(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Point1(', ''),
  \ dotnet#method('set_Point1(', ''),
  \ dotnet#method('get_Point2(', ''),
  \ dotnet#method('set_Point2(', ''),
  \ dotnet#method('get_Point3(', ''),
  \ dotnet#method('set_Point3(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#prop('Point1', 'Point'),
  \ dotnet#prop('Point2', 'Point'),
  \ dotnet#prop('Point3', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('CacheMode', 'Animatable', [ 
  \ dotnet#method('CacheMode(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ ])

call dotnet#class('BitmapCache', 'CacheMode', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('BitmapCache(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_RenderAtScale(', ''),
  \ dotnet#method('set_RenderAtScale(', ''),
  \ dotnet#method('get_SnapsToDevicePixels(', ''),
  \ dotnet#method('set_SnapsToDevicePixels(', ''),
  \ dotnet#method('get_EnableClearType(', ''),
  \ dotnet#method('set_EnableClearType(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#prop('RenderAtScale', 'float64'),
  \ dotnet#prop('SnapsToDevicePixels', 'bool'),
  \ dotnet#prop('EnableClearType', 'bool'),
  \ ])

call dotnet#class('Brush', 'Animatable', [ 
  \ dotnet#method('Brush(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Opacity(', ''),
  \ dotnet#method('set_Opacity(', ''),
  \ dotnet#method('get_Transform(', ''),
  \ dotnet#method('set_Transform(', ''),
  \ dotnet#method('get_RelativeTransform(', ''),
  \ dotnet#method('set_RelativeTransform(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#prop('Opacity', 'float64'),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('RelativeTransform', 'Transform'),
  \ ])

call dotnet#class('BitmapCacheBrush', 'Brush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('BitmapCacheBrush(', ''),
  \ dotnet#method('FireOnChanged(', ''),
  \ dotnet#method('RenderForCyclicBrush(', ''),
  \ dotnet#method('AddRefResource(', ''),
  \ dotnet#method('ReleaseResource(', ''),
  \ dotnet#method('OnPropertyChanged(', ''),
  \ dotnet#method('Enter(', ''),
  \ dotnet#method('Exit(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Target(', ''),
  \ dotnet#method('set_Target(', ''),
  \ dotnet#method('get_BitmapCache(', ''),
  \ dotnet#method('set_BitmapCache(', ''),
  \ dotnet#method('get_AutoLayoutContent(', ''),
  \ dotnet#method('set_AutoLayoutContent(', ''),
  \ dotnet#method('set_InternalTarget(', ''),
  \ dotnet#method('get_AutoWrapTarget(', ''),
  \ dotnet#method('set_AutoWrapTarget(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#prop('Target', 'Visual'),
  \ dotnet#prop('BitmapCache', 'BitmapCache'),
  \ dotnet#prop('AutoLayoutContent', 'bool'),
  \ dotnet#prop('InternalTarget', 'Visual'),
  \ dotnet#prop('AutoWrapTarget', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('DrawingContext', 'DispatcherObject', [ 
  \ dotnet#method('DrawingContext(', ''),
  \ dotnet#method('DrawText(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('DisposeCore(', ''),
  \ dotnet#method('VerifyApiNonstructuralChange(', ''),
  \ dotnet#method('DrawLine(', ''),
  \ dotnet#method('DrawRectangle(', ''),
  \ dotnet#method('DrawRoundedRectangle(', ''),
  \ dotnet#method('DrawEllipse(', ''),
  \ dotnet#method('DrawGeometry(', ''),
  \ dotnet#method('DrawImage(', ''),
  \ dotnet#method('DrawGlyphRun(', ''),
  \ dotnet#method('DrawDrawing(', ''),
  \ dotnet#method('DrawVideo(', ''),
  \ dotnet#method('PushClip(', ''),
  \ dotnet#method('PushOpacityMask(', ''),
  \ dotnet#method('PushOpacity(', ''),
  \ dotnet#method('PushTransform(', ''),
  \ dotnet#method('PushGuidelineSet(', ''),
  \ dotnet#method('PushGuidelineY1(', ''),
  \ dotnet#method('PushGuidelineY2(', ''),
  \ dotnet#method('PushEffect(', ''),
  \ dotnet#method('Pop(', ''),
  \ ])

call dotnet#class('Brushes', 'Object', [ 
  \ dotnet#method('Brushes(', ''),
  \ dotnet#prop('AliceBlue', 'SolidColorBrush'),
  \ dotnet#prop('AntiqueWhite', 'SolidColorBrush'),
  \ dotnet#prop('Aqua', 'SolidColorBrush'),
  \ dotnet#prop('Aquamarine', 'SolidColorBrush'),
  \ dotnet#prop('Azure', 'SolidColorBrush'),
  \ dotnet#prop('Beige', 'SolidColorBrush'),
  \ dotnet#prop('Bisque', 'SolidColorBrush'),
  \ dotnet#prop('Black', 'SolidColorBrush'),
  \ dotnet#prop('BlanchedAlmond', 'SolidColorBrush'),
  \ dotnet#prop('Blue', 'SolidColorBrush'),
  \ dotnet#prop('BlueViolet', 'SolidColorBrush'),
  \ dotnet#prop('Brown', 'SolidColorBrush'),
  \ dotnet#prop('BurlyWood', 'SolidColorBrush'),
  \ dotnet#prop('CadetBlue', 'SolidColorBrush'),
  \ dotnet#prop('Chartreuse', 'SolidColorBrush'),
  \ dotnet#prop('Chocolate', 'SolidColorBrush'),
  \ dotnet#prop('Coral', 'SolidColorBrush'),
  \ dotnet#prop('CornflowerBlue', 'SolidColorBrush'),
  \ dotnet#prop('Cornsilk', 'SolidColorBrush'),
  \ dotnet#prop('Crimson', 'SolidColorBrush'),
  \ dotnet#prop('Cyan', 'SolidColorBrush'),
  \ dotnet#prop('DarkBlue', 'SolidColorBrush'),
  \ dotnet#prop('DarkCyan', 'SolidColorBrush'),
  \ dotnet#prop('DarkGoldenrod', 'SolidColorBrush'),
  \ dotnet#prop('DarkGray', 'SolidColorBrush'),
  \ dotnet#prop('DarkGreen', 'SolidColorBrush'),
  \ dotnet#prop('DarkKhaki', 'SolidColorBrush'),
  \ dotnet#prop('DarkMagenta', 'SolidColorBrush'),
  \ dotnet#prop('DarkOliveGreen', 'SolidColorBrush'),
  \ dotnet#prop('DarkOrange', 'SolidColorBrush'),
  \ dotnet#prop('DarkOrchid', 'SolidColorBrush'),
  \ dotnet#prop('DarkRed', 'SolidColorBrush'),
  \ dotnet#prop('DarkSalmon', 'SolidColorBrush'),
  \ dotnet#prop('DarkSeaGreen', 'SolidColorBrush'),
  \ dotnet#prop('DarkSlateBlue', 'SolidColorBrush'),
  \ dotnet#prop('DarkSlateGray', 'SolidColorBrush'),
  \ dotnet#prop('DarkTurquoise', 'SolidColorBrush'),
  \ dotnet#prop('DarkViolet', 'SolidColorBrush'),
  \ dotnet#prop('DeepPink', 'SolidColorBrush'),
  \ dotnet#prop('DeepSkyBlue', 'SolidColorBrush'),
  \ dotnet#prop('DimGray', 'SolidColorBrush'),
  \ dotnet#prop('DodgerBlue', 'SolidColorBrush'),
  \ dotnet#prop('Firebrick', 'SolidColorBrush'),
  \ dotnet#prop('FloralWhite', 'SolidColorBrush'),
  \ dotnet#prop('ForestGreen', 'SolidColorBrush'),
  \ dotnet#prop('Fuchsia', 'SolidColorBrush'),
  \ dotnet#prop('Gainsboro', 'SolidColorBrush'),
  \ dotnet#prop('GhostWhite', 'SolidColorBrush'),
  \ dotnet#prop('Gold', 'SolidColorBrush'),
  \ dotnet#prop('Goldenrod', 'SolidColorBrush'),
  \ dotnet#prop('Gray', 'SolidColorBrush'),
  \ dotnet#prop('Green', 'SolidColorBrush'),
  \ dotnet#prop('GreenYellow', 'SolidColorBrush'),
  \ dotnet#prop('Honeydew', 'SolidColorBrush'),
  \ dotnet#prop('HotPink', 'SolidColorBrush'),
  \ dotnet#prop('IndianRed', 'SolidColorBrush'),
  \ dotnet#prop('Indigo', 'SolidColorBrush'),
  \ dotnet#prop('Ivory', 'SolidColorBrush'),
  \ dotnet#prop('Khaki', 'SolidColorBrush'),
  \ dotnet#prop('Lavender', 'SolidColorBrush'),
  \ dotnet#prop('LavenderBlush', 'SolidColorBrush'),
  \ dotnet#prop('LawnGreen', 'SolidColorBrush'),
  \ dotnet#prop('LemonChiffon', 'SolidColorBrush'),
  \ dotnet#prop('LightBlue', 'SolidColorBrush'),
  \ dotnet#prop('LightCoral', 'SolidColorBrush'),
  \ dotnet#prop('LightCyan', 'SolidColorBrush'),
  \ dotnet#prop('LightGoldenrodYellow', 'SolidColorBrush'),
  \ dotnet#prop('LightGray', 'SolidColorBrush'),
  \ dotnet#prop('LightGreen', 'SolidColorBrush'),
  \ dotnet#prop('LightPink', 'SolidColorBrush'),
  \ dotnet#prop('LightSalmon', 'SolidColorBrush'),
  \ dotnet#prop('LightSeaGreen', 'SolidColorBrush'),
  \ dotnet#prop('LightSkyBlue', 'SolidColorBrush'),
  \ dotnet#prop('LightSlateGray', 'SolidColorBrush'),
  \ dotnet#prop('LightSteelBlue', 'SolidColorBrush'),
  \ dotnet#prop('LightYellow', 'SolidColorBrush'),
  \ dotnet#prop('Lime', 'SolidColorBrush'),
  \ dotnet#prop('LimeGreen', 'SolidColorBrush'),
  \ dotnet#prop('Linen', 'SolidColorBrush'),
  \ dotnet#prop('Magenta', 'SolidColorBrush'),
  \ dotnet#prop('Maroon', 'SolidColorBrush'),
  \ dotnet#prop('MediumAquamarine', 'SolidColorBrush'),
  \ dotnet#prop('MediumBlue', 'SolidColorBrush'),
  \ dotnet#prop('MediumOrchid', 'SolidColorBrush'),
  \ dotnet#prop('MediumPurple', 'SolidColorBrush'),
  \ dotnet#prop('MediumSeaGreen', 'SolidColorBrush'),
  \ dotnet#prop('MediumSlateBlue', 'SolidColorBrush'),
  \ dotnet#prop('MediumSpringGreen', 'SolidColorBrush'),
  \ dotnet#prop('MediumTurquoise', 'SolidColorBrush'),
  \ dotnet#prop('MediumVioletRed', 'SolidColorBrush'),
  \ dotnet#prop('MidnightBlue', 'SolidColorBrush'),
  \ dotnet#prop('MintCream', 'SolidColorBrush'),
  \ dotnet#prop('MistyRose', 'SolidColorBrush'),
  \ dotnet#prop('Moccasin', 'SolidColorBrush'),
  \ dotnet#prop('NavajoWhite', 'SolidColorBrush'),
  \ dotnet#prop('Navy', 'SolidColorBrush'),
  \ dotnet#prop('OldLace', 'SolidColorBrush'),
  \ dotnet#prop('Olive', 'SolidColorBrush'),
  \ dotnet#prop('OliveDrab', 'SolidColorBrush'),
  \ dotnet#prop('Orange', 'SolidColorBrush'),
  \ dotnet#prop('OrangeRed', 'SolidColorBrush'),
  \ dotnet#prop('Orchid', 'SolidColorBrush'),
  \ dotnet#prop('PaleGoldenrod', 'SolidColorBrush'),
  \ dotnet#prop('PaleGreen', 'SolidColorBrush'),
  \ dotnet#prop('PaleTurquoise', 'SolidColorBrush'),
  \ dotnet#prop('PaleVioletRed', 'SolidColorBrush'),
  \ dotnet#prop('PapayaWhip', 'SolidColorBrush'),
  \ dotnet#prop('PeachPuff', 'SolidColorBrush'),
  \ dotnet#prop('Peru', 'SolidColorBrush'),
  \ dotnet#prop('Pink', 'SolidColorBrush'),
  \ dotnet#prop('Plum', 'SolidColorBrush'),
  \ dotnet#prop('PowderBlue', 'SolidColorBrush'),
  \ dotnet#prop('Purple', 'SolidColorBrush'),
  \ dotnet#prop('Red', 'SolidColorBrush'),
  \ dotnet#prop('RosyBrown', 'SolidColorBrush'),
  \ dotnet#prop('RoyalBlue', 'SolidColorBrush'),
  \ dotnet#prop('SaddleBrown', 'SolidColorBrush'),
  \ dotnet#prop('Salmon', 'SolidColorBrush'),
  \ dotnet#prop('SandyBrown', 'SolidColorBrush'),
  \ dotnet#prop('SeaGreen', 'SolidColorBrush'),
  \ dotnet#prop('SeaShell', 'SolidColorBrush'),
  \ dotnet#prop('Sienna', 'SolidColorBrush'),
  \ dotnet#prop('Silver', 'SolidColorBrush'),
  \ dotnet#prop('SkyBlue', 'SolidColorBrush'),
  \ dotnet#prop('SlateBlue', 'SolidColorBrush'),
  \ dotnet#prop('SlateGray', 'SolidColorBrush'),
  \ dotnet#prop('Snow', 'SolidColorBrush'),
  \ dotnet#prop('SpringGreen', 'SolidColorBrush'),
  \ dotnet#prop('SteelBlue', 'SolidColorBrush'),
  \ dotnet#prop('Tan', 'SolidColorBrush'),
  \ dotnet#prop('Teal', 'SolidColorBrush'),
  \ dotnet#prop('Thistle', 'SolidColorBrush'),
  \ dotnet#prop('Tomato', 'SolidColorBrush'),
  \ dotnet#prop('Transparent', 'SolidColorBrush'),
  \ dotnet#prop('Turquoise', 'SolidColorBrush'),
  \ dotnet#prop('Violet', 'SolidColorBrush'),
  \ dotnet#prop('Wheat', 'SolidColorBrush'),
  \ dotnet#prop('White', 'SolidColorBrush'),
  \ dotnet#prop('WhiteSmoke', 'SolidColorBrush'),
  \ dotnet#prop('Yellow', 'SolidColorBrush'),
  \ dotnet#prop('YellowGreen', 'SolidColorBrush'),
  \ ])

call dotnet#class('Color', 'ValueType', [ 
  \ dotnet#field('a', 'float32'),
  \ dotnet#field('r', 'float32'),
  \ dotnet#field('g', 'float32'),
  \ dotnet#field('b', 'float32'),
  \ dotnet#field('a', 'uint8'),
  \ dotnet#field('r', 'uint8'),
  \ dotnet#field('g', 'uint8'),
  \ dotnet#field('b', 'uint8'),
  \ dotnet#field('context', 'ColorContext'),
  \ dotnet#field('scRgbColor', 'Color/MILColorF'),
  \ dotnet#field('sRgbColor', 'Color/MILColor'),
  \ dotnet#field('nativeColorValue', 'float32[]'),
  \ dotnet#field('isFromScRgb', 'bool'),
  \ dotnet#method('FromAValues(', ''),
  \ dotnet#method('FromValues(', ''),
  \ dotnet#method('FromUInt32(', ''),
  \ dotnet#method('FromScRgb(', ''),
  \ dotnet#method('FromArgb(', ''),
  \ dotnet#method('FromRgb(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('AreClose(', ''),
  \ dotnet#method('Clamp(', ''),
  \ dotnet#method('GetNativeColorValues(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Subtract(', ''),
  \ dotnet#method('Multiply(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('op_Equality(', ''),
  \ dotnet#method('op_Inequality(', ''),
  \ dotnet#method('get_ColorContext(', ''),
  \ dotnet#method('get_A(', ''),
  \ dotnet#method('set_A(', ''),
  \ dotnet#method('get_R(', ''),
  \ dotnet#method('set_R(', ''),
  \ dotnet#method('get_G(', ''),
  \ dotnet#method('set_G(', ''),
  \ dotnet#method('get_B(', ''),
  \ dotnet#method('set_B(', ''),
  \ dotnet#method('get_ScA(', ''),
  \ dotnet#method('set_ScA(', ''),
  \ dotnet#method('get_ScR(', ''),
  \ dotnet#method('set_ScR(', ''),
  \ dotnet#method('get_ScG(', ''),
  \ dotnet#method('set_ScG(', ''),
  \ dotnet#method('get_ScB(', ''),
  \ dotnet#method('set_ScB(', ''),
  \ dotnet#prop('ColorContext', 'ColorContext'),
  \ dotnet#prop('A', 'uint8'),
  \ dotnet#prop('R', 'uint8'),
  \ dotnet#prop('G', 'uint8'),
  \ dotnet#prop('B', 'uint8'),
  \ dotnet#prop('ScA', 'float32'),
  \ dotnet#prop('ScR', 'float32'),
  \ dotnet#prop('ScG', 'float32'),
  \ dotnet#prop('ScB', 'float32'),
  \ ])

call dotnet#class('ColorContext', 'Object', [ 
  \ dotnet#method('ColorContext(', ''),
  \ dotnet#method('Invoke(', ''),
  \ dotnet#method('EndInvoke(', ''),
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('OpenProfileStream(', ''),
  \ dotnet#method('get_ProfileUri(', ''),
  \ dotnet#method('get_NumChannels(', ''),
  \ dotnet#method('get_ColorType(', ''),
  \ dotnet#method('get_IsValid(', ''),
  \ dotnet#method('GetColorContextsHelper(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('op_Equality(', ''),
  \ dotnet#method('op_Inequality(', ''),
  \ dotnet#prop('ProfileUri', 'Uri'),
  \ dotnet#prop('ProfileHandle', 'SafeProfileHandle'),
  \ dotnet#prop('ColorContextHandle', 'SafeMILHandle'),
  \ dotnet#prop('NumChannels', 'int32'),
  \ dotnet#prop('ColorType', 'uint32'),
  \ dotnet#prop('ColorSpaceFamily', 'ColorContext/StandardColorSpace'),
  \ dotnet#prop('IsValid', 'bool'),
  \ ])

call dotnet#class('ColorConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFromString(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('ColorConverter(', ''),
  \ ])

call dotnet#class('Geometry', 'Animatable', [ 
  \ dotnet#field('FillRule', 'FillRule'),
  \ dotnet#field('Matrix', 'MilMatrix3x2D'),
  \ dotnet#field('SerializedData', 'uint8[]'),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('get_Size(', ''),
  \ dotnet#prop('Size', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Transform(', ''),
  \ dotnet#method('set_Transform(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#method('Geometry(', ''),
  \ dotnet#method('get_StandardFlatteningTolerance(', ''),
  \ dotnet#method('GetRenderBounds(', ''),
  \ dotnet#method('AreClose(', ''),
  \ dotnet#method('GetBoundsInternal(', ''),
  \ dotnet#method('GetBoundsHelper(', ''),
  \ dotnet#method('TransformPropertyChangedHook(', ''),
  \ dotnet#method('GetTransformedCopy(', ''),
  \ dotnet#method('ShouldSerializeTransform(', ''),
  \ dotnet#method('GetArea(', ''),
  \ dotnet#method('MayHaveCurves(', ''),
  \ dotnet#method('FillContains(', ''),
  \ dotnet#method('StrokeContains(', ''),
  \ dotnet#method('ContainsInternal(', ''),
  \ dotnet#method('FillContainsWithDetail(', ''),
  \ dotnet#method('StrokeContainsWithDetail(', ''),
  \ dotnet#method('GetFlattenedPathGeometry(', ''),
  \ dotnet#method('GetWidenedPathGeometry(', ''),
  \ dotnet#method('Combine(', ''),
  \ dotnet#method('GetOutlinedPathGeometry(', ''),
  \ dotnet#method('GetPathFigureCollection(', ''),
  \ dotnet#method('GetCombinedMatrix(', ''),
  \ dotnet#method('IsObviouslyEmpty(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('GetEmptyPathGeometryData(', ''),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('Empty', 'Geometry'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ dotnet#prop('StandardFlatteningTolerance', 'float64'),
  \ ])

call dotnet#class('CombinedGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('CombinedGeometry(', ''),
  \ dotnet#method('ContainsInternal(', ''),
  \ dotnet#method('GetArea(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('IsObviouslyEmpty(', ''),
  \ dotnet#method('MayHaveCurves(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_GeometryCombineMode(', ''),
  \ dotnet#method('set_GeometryCombineMode(', ''),
  \ dotnet#method('get_Geometry1(', ''),
  \ dotnet#method('set_Geometry1(', ''),
  \ dotnet#method('get_Geometry2(', ''),
  \ dotnet#method('set_Geometry2(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#prop('Bounds', 'Rect'),
  \ dotnet#prop('GeometryCombineMode', 'GeometryCombineMode'),
  \ dotnet#prop('Geometry1', 'Geometry'),
  \ dotnet#prop('Geometry2', 'Geometry'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('LanguageSpecificStringDictionary', 'Object', [ 
  \ dotnet#method('LanguageSpecificStringDictionary(', ''),
  \ dotnet#method('TryGetValue(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('ContainsKey(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(class', 'string'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('DashStyle', 'Animatable', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DashStyle(', ''),
  \ dotnet#method('GetDashData(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Offset(', ''),
  \ dotnet#method('set_Offset(', ''),
  \ dotnet#method('get_Dashes(', ''),
  \ dotnet#method('set_Dashes(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#prop('Offset', 'float64'),
  \ dotnet#prop('Dashes', 'DoubleCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('DashStyles', 'Object', [ 
  \ dotnet#prop('Solid', 'DashStyle'),
  \ dotnet#prop('Dash', 'DashStyle'),
  \ dotnet#prop('Dot', 'DashStyle'),
  \ dotnet#prop('DashDot', 'DashStyle'),
  \ dotnet#prop('DashDotDot', 'DashStyle'),
  \ ])

call dotnet#class('CharacterMetrics', 'Object', [ 
  \ dotnet#method('CharacterMetrics(', ''),
  \ dotnet#method('get_Metrics(', ''),
  \ dotnet#method('set_Metrics(', ''),
  \ dotnet#method('get_BlackBoxWidth(', ''),
  \ dotnet#method('get_BlackBoxHeight(', ''),
  \ dotnet#method('get_Baseline(', ''),
  \ dotnet#method('get_LeftSideBearing(', ''),
  \ dotnet#method('get_RightSideBearing(', ''),
  \ dotnet#method('get_TopSideBearing(', ''),
  \ dotnet#method('get_BottomSideBearing(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#prop('Metrics', 'string'),
  \ dotnet#prop('BlackBoxWidth', 'float64'),
  \ dotnet#prop('BlackBoxHeight', 'float64'),
  \ dotnet#prop('Baseline', 'float64'),
  \ dotnet#prop('LeftSideBearing', 'float64'),
  \ dotnet#prop('RightSideBearing', 'float64'),
  \ dotnet#prop('TopSideBearing', 'float64'),
  \ dotnet#prop('BottomSideBearing', 'float64'),
  \ ])

call dotnet#class('CharacterMetricsDictionary', 'Object', [ 
  \ dotnet#method('CharacterMetricsDictionary(', ''),
  \ dotnet#method('TryGetValue(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('ContainsKey(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('GetPage(', ''),
  \ dotnet#method('GetValue(', ''),
  \ dotnet#method('ConvertKey(', ''),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(int32)', 'CharacterMetrics'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('Drawing', 'Animatable', [ 
  \ dotnet#method('Drawing(', ''),
  \ dotnet#method('get_Bounds(', ''),
  \ dotnet#method('WalkCurrentValue(', ''),
  \ dotnet#method('WalkContent(', ''),
  \ dotnet#method('HitTestPoint(', ''),
  \ dotnet#method('PropagateChangedHandler(', ''),
  \ dotnet#method('GetBounds(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('TileBrush', 'Brush', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_ViewportUnits(', ''),
  \ dotnet#method('set_ViewportUnits(', ''),
  \ dotnet#method('get_ViewboxUnits(', ''),
  \ dotnet#method('set_ViewboxUnits(', ''),
  \ dotnet#method('get_Viewport(', ''),
  \ dotnet#method('set_Viewport(', ''),
  \ dotnet#method('get_Viewbox(', ''),
  \ dotnet#method('set_Viewbox(', ''),
  \ dotnet#method('get_Stretch(', ''),
  \ dotnet#method('set_Stretch(', ''),
  \ dotnet#method('get_TileMode(', ''),
  \ dotnet#method('set_TileMode(', ''),
  \ dotnet#method('get_AlignmentX(', ''),
  \ dotnet#method('set_AlignmentX(', ''),
  \ dotnet#method('get_AlignmentY(', ''),
  \ dotnet#method('set_AlignmentY(', ''),
  \ dotnet#method('TileBrush(', ''),
  \ dotnet#method('GetContentBounds(', ''),
  \ dotnet#method('GetTileBrushMapping(', ''),
  \ dotnet#prop('ViewportUnits', 'BrushMappingMode'),
  \ dotnet#prop('ViewboxUnits', 'BrushMappingMode'),
  \ dotnet#prop('Viewport', 'Rect'),
  \ dotnet#prop('Viewbox', 'Rect'),
  \ dotnet#prop('Stretch', 'Stretch'),
  \ dotnet#prop('TileMode', 'TileMode'),
  \ dotnet#prop('AlignmentX', 'AlignmentX'),
  \ dotnet#prop('AlignmentY', 'AlignmentY'),
  \ ])

call dotnet#class('DrawingBrush', 'TileBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DrawingBrush(', ''),
  \ dotnet#method('GetContentBounds(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Drawing(', ''),
  \ dotnet#method('set_Drawing(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#prop('Drawing', 'Drawing'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('DrawingCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Drawing'),
  \ dotnet#field('_list', 'DrawingCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('DrawingCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Drawing'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('TransactionalAppend(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('OnInheritanceContextChangedCore(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('add_ItemInserted(', ''),
  \ dotnet#method('remove_ItemInserted(', ''),
  \ dotnet#method('add_ItemRemoved(', ''),
  \ dotnet#method('remove_ItemRemoved(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('FreezeCore(', ''),
  \ dotnet#event('ItemInserted', 'ItemInsertedHandler'),
  \ dotnet#event('ItemRemoved', 'ItemRemovedHandler'),
  \ dotnet#prop('Item(int32)', 'Drawing'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'DrawingCollection'),
  \ ])

call dotnet#class('DrawingGroup', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DrawingGroup(', ''),
  \ dotnet#method('Open(', ''),
  \ dotnet#method('Append(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('WalkCurrentValue(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Children(', ''),
  \ dotnet#method('set_Children(', ''),
  \ dotnet#method('get_ClipGeometry(', ''),
  \ dotnet#method('set_ClipGeometry(', ''),
  \ dotnet#method('get_Opacity(', ''),
  \ dotnet#method('set_Opacity(', ''),
  \ dotnet#method('get_OpacityMask(', ''),
  \ dotnet#method('set_OpacityMask(', ''),
  \ dotnet#method('get_Transform(', ''),
  \ dotnet#method('set_Transform(', ''),
  \ dotnet#method('get_GuidelineSet(', ''),
  \ dotnet#method('set_GuidelineSet(', ''),
  \ dotnet#method('get_BitmapEffect(', ''),
  \ dotnet#method('set_BitmapEffect(', ''),
  \ dotnet#method('get_BitmapEffectInput(', ''),
  \ dotnet#method('set_BitmapEffectInput(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#prop('Children', 'DrawingCollection'),
  \ dotnet#prop('ClipGeometry', 'Geometry'),
  \ dotnet#prop('Opacity', 'float64'),
  \ dotnet#prop('OpacityMask', 'Brush'),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('GuidelineSet', 'GuidelineSet'),
  \ dotnet#prop('BitmapEffect', 'BitmapEffect'),
  \ dotnet#prop('BitmapEffectInput', 'BitmapEffectInput'),
  \ ])

call dotnet#class('DrawingImage', 'ImageSource', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DrawingImage(', ''),
  \ dotnet#method('get_Width(', ''),
  \ dotnet#method('get_Height(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Drawing(', ''),
  \ dotnet#method('set_Drawing(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Metadata', 'ImageMetadata'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('Drawing', 'Drawing'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('EllipseGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('EllipseGeometry(', ''),
  \ dotnet#method('GetBoundsHelper(', ''),
  \ dotnet#method('ContainsInternal(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('MayHaveCurves(', ''),
  \ dotnet#method('GetArea(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_RadiusX(', ''),
  \ dotnet#method('set_RadiusX(', ''),
  \ dotnet#method('get_RadiusY(', ''),
  \ dotnet#method('set_RadiusY(', ''),
  \ dotnet#method('get_Center(', ''),
  \ dotnet#method('set_Center(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#prop('Bounds', 'Rect'),
  \ dotnet#prop('RadiusX', 'float64'),
  \ dotnet#prop('RadiusY', 'float64'),
  \ dotnet#prop('Center', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('FontFamilyMap', 'Object', [ 
  \ dotnet#method('FontFamilyMap(', ''),
  \ dotnet#method('InRange(', ''),
  \ dotnet#method('get_First(', ''),
  \ dotnet#method('get_Last(', ''),
  \ dotnet#method('get_Delta(', ''),
  \ dotnet#prop('First', 'int32'),
  \ dotnet#prop('Last', 'int32'),
  \ dotnet#prop('Delta', 'uint32'),
  \ dotnet#method('set_Unicode(', ''),
  \ dotnet#method('get_Unicode(', ''),
  \ dotnet#method('get_Target(', ''),
  \ dotnet#method('set_Target(', ''),
  \ dotnet#method('get_Scale(', ''),
  \ dotnet#method('set_Scale(', ''),
  \ dotnet#method('get_Language(', ''),
  \ dotnet#method('set_Language(', ''),
  \ dotnet#method('get_IsSimpleFamilyMap(', ''),
  \ dotnet#method('MatchLanguage(', ''),
  \ dotnet#method('MatchCulture(', ''),
  \ dotnet#method('ParseHexNumber(', ''),
  \ dotnet#prop('Unicode', 'string'),
  \ dotnet#prop('Target', 'string'),
  \ dotnet#prop('Scale', 'float64'),
  \ dotnet#prop('Language', 'XmlLanguage'),
  \ dotnet#prop('IsSimpleFamilyMap', 'bool'),
  \ dotnet#prop('Ranges', 'FontFamilyMap/Range[]'),
  \ ])

call dotnet#class('FontFamilyMapCollection', 'Object', [ 
  \ dotnet#method('FontFamilyMapCollection(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'FontFamilyMap'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ ])

call dotnet#class('FamilyTypeface', 'Object', [ 
  \ dotnet#method('FamilyTypeface(', ''),
  \ dotnet#method('get_Style(', ''),
  \ dotnet#method('set_Style(', ''),
  \ dotnet#method('get_Weight(', ''),
  \ dotnet#method('set_Weight(', ''),
  \ dotnet#method('get_Stretch(', ''),
  \ dotnet#method('set_Stretch(', ''),
  \ dotnet#method('get_UnderlinePosition(', ''),
  \ dotnet#method('set_UnderlinePosition(', ''),
  \ dotnet#method('get_UnderlineThickness(', ''),
  \ dotnet#method('set_UnderlineThickness(', ''),
  \ dotnet#method('get_StrikethroughPosition(', ''),
  \ dotnet#method('set_StrikethroughPosition(', ''),
  \ dotnet#method('get_StrikethroughThickness(', ''),
  \ dotnet#method('set_StrikethroughThickness(', ''),
  \ dotnet#method('get_CapsHeight(', ''),
  \ dotnet#method('set_CapsHeight(', ''),
  \ dotnet#method('get_XHeight(', ''),
  \ dotnet#method('set_XHeight(', ''),
  \ dotnet#method('get_Symbol(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('get_DeviceFontName(', ''),
  \ dotnet#method('set_DeviceFontName(', ''),
  \ dotnet#method('get_DeviceFontCharacterMetrics(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('get_Name(', ''),
  \ dotnet#method('ContainsCharacter(', ''),
  \ dotnet#method('GetAdvanceWidths(', ''),
  \ dotnet#prop('Style', 'FontStyle'),
  \ dotnet#prop('Weight', 'FontWeight'),
  \ dotnet#prop('Stretch', 'FontStretch'),
  \ dotnet#prop('UnderlinePosition', 'float64'),
  \ dotnet#prop('UnderlineThickness', 'float64'),
  \ dotnet#prop('StrikethroughPosition', 'float64'),
  \ dotnet#prop('StrikethroughThickness', 'float64'),
  \ dotnet#prop('CapsHeight', 'float64'),
  \ dotnet#prop('XHeight', 'float64'),
  \ dotnet#prop('Symbol', 'bool'),
  \ dotnet#prop('StyleSimulations', 'StyleSimulations'),
  \ dotnet#prop('AdjustedFaceNames', 'IDictionary'),
  \ dotnet#prop('DeviceFontName', 'string'),
  \ dotnet#prop('DeviceFontCharacterMetrics', 'CharacterMetricsDictionary'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('FamilyTypefaceCollection', 'Object', [ 
  \ dotnet#method('FamilyTypefaceCollection(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'FamilyTypeface'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ ])

call dotnet#class('FontEmbeddingManager', 'Object', [ 
  \ dotnet#method('FontEmbeddingManager(', ''),
  \ dotnet#method('RecordUsage(', ''),
  \ dotnet#method('get_GlyphTypefaceUris(', ''),
  \ dotnet#method('GetUsedGlyphs(', ''),
  \ dotnet#prop('GlyphTypefaceUris', 'ICollection'),
  \ ])

call dotnet#class('FontFamily', 'Object', [ 
  \ dotnet#method('FontFamily(', ''),
  \ dotnet#method('get_FamilyNames(', ''),
  \ dotnet#method('get_FamilyTypefaces(', ''),
  \ dotnet#method('get_FamilyMaps(', ''),
  \ dotnet#method('get_Source(', ''),
  \ dotnet#method('get_BaseUri(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('get_Baseline(', ''),
  \ dotnet#method('set_Baseline(', ''),
  \ dotnet#method('get_LineSpacing(', ''),
  \ dotnet#method('set_LineSpacing(', ''),
  \ dotnet#method('GetLineSpacingForDisplayMode(', ''),
  \ dotnet#method('GetTypefaces(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('FindFontFamilyFromFriendlyNameList(', ''),
  \ dotnet#method('SafeLookupFontFamily(', ''),
  \ dotnet#method('LookupFontFamily(', ''),
  \ dotnet#method('FindFirstFontFamilyAndFace(', ''),
  \ dotnet#method('LookupFontFamilyAndFace(', ''),
  \ dotnet#prop('FamilyNames', 'LanguageSpecificStringDictionary'),
  \ dotnet#prop('FamilyTypefaces', 'FamilyTypefaceCollection'),
  \ dotnet#prop('FamilyMaps', 'FontFamilyMapCollection'),
  \ dotnet#prop('Source', 'string'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('FamilyIdentifier', 'FontFamilyIdentifier'),
  \ dotnet#prop('Baseline', 'float64'),
  \ dotnet#prop('LineSpacing', 'float64'),
  \ dotnet#prop('FirstFontFamily', 'IFontFamily'),
  \ ])

call dotnet#class('FontFamilyConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('FontFamilyConverter(', ''),
  \ ])

call dotnet#class('FontFamilyValueSerializer', 'ValueSerializer', [ 
  \ dotnet#method('CanConvertFromString(', ''),
  \ dotnet#method('ConvertFromString(', ''),
  \ dotnet#method('CanConvertToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('FontFamilyValueSerializer(', ''),
  \ ])

call dotnet#class('Fonts', 'Object', [ 
  \ dotnet#method('GetFontFamilies(', ''),
  \ dotnet#method('GetTypefaces(', ''),
  \ dotnet#method('Fonts(', ''),
  \ dotnet#prop('SystemFontFamilies', 'ICollection'),
  \ dotnet#prop('SystemTypefaces', 'ICollection'),
  \ ])

call dotnet#class('FormattedText', 'Object', [ 
  \ dotnet#method('FormattedText(', ''),
  \ dotnet#method('get_Text(', ''),
  \ dotnet#method('SetForegroundBrush(', ''),
  \ dotnet#method('SetFontFamily(', ''),
  \ dotnet#method('SetFontSize(', ''),
  \ dotnet#method('SetCulture(', ''),
  \ dotnet#method('SetNumberSubstitution(', ''),
  \ dotnet#method('SetFontWeight(', ''),
  \ dotnet#method('SetFontStyle(', ''),
  \ dotnet#method('SetFontStretch(', ''),
  \ dotnet#method('SetFontTypeface(', ''),
  \ dotnet#method('SetTextDecorations(', ''),
  \ dotnet#method('set_FlowDirection(', ''),
  \ dotnet#method('get_FlowDirection(', ''),
  \ dotnet#method('set_TextAlignment(', ''),
  \ dotnet#method('get_TextAlignment(', ''),
  \ dotnet#method('set_LineHeight(', ''),
  \ dotnet#method('get_LineHeight(', ''),
  \ dotnet#method('set_MaxTextWidth(', ''),
  \ dotnet#method('get_MaxTextWidth(', ''),
  \ dotnet#method('SetMaxTextWidths(', ''),
  \ dotnet#method('GetMaxTextWidths(', ''),
  \ dotnet#method('set_MaxTextHeight(', ''),
  \ dotnet#method('get_MaxTextHeight(', ''),
  \ dotnet#method('set_MaxLineCount(', ''),
  \ dotnet#method('get_MaxLineCount(', ''),
  \ dotnet#method('set_Trimming(', ''),
  \ dotnet#method('get_Trimming(', ''),
  \ dotnet#method('get_Height(', ''),
  \ dotnet#method('get_Extent(', ''),
  \ dotnet#method('get_Baseline(', ''),
  \ dotnet#method('get_OverhangAfter(', ''),
  \ dotnet#method('get_OverhangLeading(', ''),
  \ dotnet#method('get_OverhangTrailing(', ''),
  \ dotnet#method('get_Width(', ''),
  \ dotnet#method('get_WidthIncludingTrailingWhitespace(', ''),
  \ dotnet#method('get_MinWidth(', ''),
  \ dotnet#method('BuildHighlightGeometry(', ''),
  \ dotnet#method('BuildGeometry(', ''),
  \ dotnet#method('Draw(', ''),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('MaxTextWidth', 'float64'),
  \ dotnet#prop('MaxTextHeight', 'float64'),
  \ dotnet#prop('MaxLineCount', 'int32'),
  \ dotnet#prop('Trimming', 'TextTrimming'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Extent', 'float64'),
  \ dotnet#prop('Baseline', 'float64'),
  \ dotnet#prop('OverhangAfter', 'float64'),
  \ dotnet#prop('OverhangLeading', 'float64'),
  \ dotnet#prop('OverhangTrailing', 'float64'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('WidthIncludingTrailingWhitespace', 'float64'),
  \ dotnet#prop('MinWidth', 'float64'),
  \ ])

call dotnet#class('GeneralTransformGroup', 'GeneralTransform', [ 
  \ dotnet#method('GeneralTransformGroup(', ''),
  \ dotnet#method('TryTransform(', ''),
  \ dotnet#method('TransformBounds(', ''),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Children(', ''),
  \ dotnet#method('set_Children(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#prop('Inverse', 'GeneralTransform'),
  \ dotnet#prop('AffineTransform', 'Transform'),
  \ dotnet#prop('Children', 'GeneralTransformCollection'),
  \ ])

call dotnet#class('BrushConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('BrushConverter(', ''),
  \ ])

call dotnet#class('CacheModeConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('CacheModeConverter(', ''),
  \ ])

call dotnet#class('DoubleCollection', 'Freezable', [ 
  \ dotnet#field('_current', 'float64'),
  \ dotnet#field('_list', 'DoubleCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('DoubleCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'float64'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#prop('Item(int32)', 'float64'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'DoubleCollection'),
  \ ])

call dotnet#class('DoubleCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('DoubleCollectionConverter(', ''),
  \ ])

call dotnet#class('GeneralTransformCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'GeneralTransform'),
  \ dotnet#field('_list', 'GeneralTransformCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('GeneralTransformCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'GeneralTransform'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('OnInheritanceContextChangedCore(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('FreezeCore(', ''),
  \ dotnet#prop('Item(int32)', 'GeneralTransform'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'GeneralTransformCollection'),
  \ ])

call dotnet#class('GeometryCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Geometry'),
  \ dotnet#field('_list', 'GeometryCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('GeometryCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Geometry'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('OnInheritanceContextChangedCore(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('add_ItemInserted(', ''),
  \ dotnet#method('remove_ItemInserted(', ''),
  \ dotnet#method('add_ItemRemoved(', ''),
  \ dotnet#method('remove_ItemRemoved(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('FreezeCore(', ''),
  \ dotnet#event('ItemInserted', 'ItemInsertedHandler'),
  \ dotnet#event('ItemRemoved', 'ItemRemovedHandler'),
  \ dotnet#prop('Item(int32)', 'Geometry'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'GeometryCollection'),
  \ ])

call dotnet#class('GeometryConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('GeometryConverter(', ''),
  \ ])

call dotnet#class('GeometryDrawing', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Brush(', ''),
  \ dotnet#method('set_Brush(', ''),
  \ dotnet#method('get_Pen(', ''),
  \ dotnet#method('set_Pen(', ''),
  \ dotnet#method('get_Geometry(', ''),
  \ dotnet#method('set_Geometry(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('GeometryDrawing(', ''),
  \ dotnet#method('WalkCurrentValue(', ''),
  \ dotnet#prop('Brush', 'Brush'),
  \ dotnet#prop('Pen', 'Pen'),
  \ dotnet#prop('Geometry', 'Geometry'),
  \ ])

call dotnet#class('GeometryGroup', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_FillRule(', ''),
  \ dotnet#method('set_FillRule(', ''),
  \ dotnet#method('get_Children(', ''),
  \ dotnet#method('set_Children(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('GeometryGroup(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('IsObviouslyEmpty(', ''),
  \ dotnet#method('MayHaveCurves(', ''),
  \ dotnet#prop('FillRule', 'FillRule'),
  \ dotnet#prop('Children', 'GeometryCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('GlyphRunDrawing', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_GlyphRun(', ''),
  \ dotnet#method('set_GlyphRun(', ''),
  \ dotnet#method('get_ForegroundBrush(', ''),
  \ dotnet#method('set_ForegroundBrush(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('GlyphRunDrawing(', ''),
  \ dotnet#method('WalkCurrentValue(', ''),
  \ dotnet#prop('GlyphRun', 'GlyphRun'),
  \ dotnet#prop('ForegroundBrush', 'Brush'),
  \ ])

call dotnet#class('GradientBrush', 'Brush', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_ColorInterpolationMode(', ''),
  \ dotnet#method('set_ColorInterpolationMode(', ''),
  \ dotnet#method('get_MappingMode(', ''),
  \ dotnet#method('set_MappingMode(', ''),
  \ dotnet#method('get_SpreadMethod(', ''),
  \ dotnet#method('set_SpreadMethod(', ''),
  \ dotnet#method('get_GradientStops(', ''),
  \ dotnet#method('set_GradientStops(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('GradientBrush(', ''),
  \ dotnet#prop('ColorInterpolationMode', 'ColorInterpolationMode'),
  \ dotnet#prop('MappingMode', 'BrushMappingMode'),
  \ dotnet#prop('SpreadMethod', 'GradientSpreadMethod'),
  \ dotnet#prop('GradientStops', 'GradientStopCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('GradientStop', 'Animatable', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Color(', ''),
  \ dotnet#method('set_Color(', ''),
  \ dotnet#method('get_Offset(', ''),
  \ dotnet#method('set_Offset(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('GradientStop(', ''),
  \ dotnet#prop('Color', 'Color'),
  \ dotnet#prop('Offset', 'float64'),
  \ ])

call dotnet#class('GradientStopCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'GradientStop'),
  \ dotnet#field('_list', 'GradientStopCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('GradientStopCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'GradientStop'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('OnInheritanceContextChangedCore(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('FreezeCore(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#prop('Item(int32)', 'GradientStop'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'GradientStopCollection'),
  \ ])

call dotnet#class('ImageBrush', 'TileBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_ImageSource(', ''),
  \ dotnet#method('set_ImageSource(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('ImageBrush(', ''),
  \ dotnet#method('GetContentBounds(', ''),
  \ dotnet#prop('ImageSource', 'ImageSource'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('ImageDrawing', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_ImageSource(', ''),
  \ dotnet#method('set_ImageSource(', ''),
  \ dotnet#method('get_Rect(', ''),
  \ dotnet#method('set_Rect(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('ImageDrawing(', ''),
  \ dotnet#method('WalkCurrentValue(', ''),
  \ dotnet#prop('ImageSource', 'ImageSource'),
  \ dotnet#prop('Rect', 'Rect'),
  \ ])

call dotnet#class('Int32Collection', 'Freezable', [ 
  \ dotnet#field('_current', 'int32'),
  \ dotnet#field('_list', 'Int32Collection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('Int32Collection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'int32'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#prop('Item(int32)', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'Int32Collection'),
  \ ])

call dotnet#class('Int32CollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('Int32CollectionConverter(', ''),
  \ ])

call dotnet#class('LinearGradientBrush', 'GradientBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_StartPoint(', ''),
  \ dotnet#method('set_StartPoint(', ''),
  \ dotnet#method('get_EndPoint(', ''),
  \ dotnet#method('set_EndPoint(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('LinearGradientBrush(', ''),
  \ dotnet#prop('StartPoint', 'Point'),
  \ dotnet#prop('EndPoint', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('LineGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_StartPoint(', ''),
  \ dotnet#method('set_StartPoint(', ''),
  \ dotnet#method('get_EndPoint(', ''),
  \ dotnet#method('set_EndPoint(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('LineGeometry(', ''),
  \ dotnet#method('GetBoundsHelper(', ''),
  \ dotnet#method('ContainsInternal(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('MayHaveCurves(', ''),
  \ dotnet#method('GetArea(', ''),
  \ dotnet#prop('StartPoint', 'Point'),
  \ dotnet#prop('EndPoint', 'Point'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('LineSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Point(', ''),
  \ dotnet#method('set_Point(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('LineSegment(', ''),
  \ dotnet#method('AddToFigure(', ''),
  \ dotnet#method('SerializeData(', ''),
  \ dotnet#method('IsCurved(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#prop('Point', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('Transform', 'GeneralTransform', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#method('Transform(', ''),
  \ dotnet#method('get_IsIdentity(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('TransformRect(', ''),
  \ dotnet#method('MultiplyValueByMatrix(', ''),
  \ dotnet#method('ConvertToD3DMATRIX(', ''),
  \ dotnet#method('GetTransformValue(', ''),
  \ dotnet#method('TryTransform(', ''),
  \ dotnet#method('TransformBounds(', ''),
  \ dotnet#prop('Identity', 'Transform'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ dotnet#prop('Inverse', 'GeneralTransform'),
  \ dotnet#prop('AffineTransform', 'Transform'),
  \ ])

call dotnet#class('MatrixTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Matrix(', ''),
  \ dotnet#method('set_Matrix(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('MatrixTransform(', ''),
  \ dotnet#method('get_IsIdentity(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('TransformRect(', ''),
  \ dotnet#method('MultiplyValueByMatrix(', ''),
  \ dotnet#prop('Matrix', 'Matrix'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('MediaTimeline', 'Timeline', [ 
  \ dotnet#field('_context', 'ITypeDescriptorContext'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Source(', ''),
  \ dotnet#method('set_Source(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('MediaTimeline(', ''),
  \ dotnet#method('set_BaseUri(', ''),
  \ dotnet#method('AllocateClock(', ''),
  \ dotnet#method('FreezeCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('CreateClock(', ''),
  \ dotnet#method('GetNaturalDurationCore(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ ])

call dotnet#class('PathFigure', 'Animatable', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_StartPoint(', ''),
  \ dotnet#method('set_StartPoint(', ''),
  \ dotnet#method('get_IsFilled(', ''),
  \ dotnet#method('set_IsFilled(', ''),
  \ dotnet#method('get_Segments(', ''),
  \ dotnet#method('set_Segments(', ''),
  \ dotnet#method('get_IsClosed(', ''),
  \ dotnet#method('set_IsClosed(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('PathFigure(', ''),
  \ dotnet#method('GetFlattenedPathFigure(', ''),
  \ dotnet#method('MayHaveCurves(', ''),
  \ dotnet#method('GetTransformedCopy(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('SerializeData(', ''),
  \ dotnet#prop('StartPoint', 'Point'),
  \ dotnet#prop('IsFilled', 'bool'),
  \ dotnet#prop('Segments', 'PathSegmentCollection'),
  \ dotnet#prop('IsClosed', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('PathFigureCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'PathFigure'),
  \ dotnet#field('_list', 'PathFigureCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('PathFigureCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'PathFigure'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('OnInheritanceContextChangedCore(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('FreezeCore(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#prop('Item(int32)', 'PathFigure'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'PathFigureCollection'),
  \ ])

call dotnet#class('PathFigureCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('PathFigureCollectionConverter(', ''),
  \ ])

call dotnet#class('PathGeometry', 'Geometry', [ 
  \ dotnet#field('_figures', 'PathFigureCollection'),
  \ dotnet#method('PathGeometry(', ''),
  \ dotnet#method('AddFigureToList(', ''),
  \ dotnet#prop('Figures', 'PathFigureCollection'),
  \ dotnet#method('Invoke(', ''),
  \ dotnet#method('EndInvoke(', ''),
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#field('_flags', 'PathGeometryInternalFlags'),
  \ dotnet#field('_bounds', 'MilRectD'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_FillRule(', ''),
  \ dotnet#method('set_FillRule(', ''),
  \ dotnet#method('get_Figures(', ''),
  \ dotnet#method('set_Figures(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('CreateFromGeometry(', ''),
  \ dotnet#method('ParsePathGeometryData(', ''),
  \ dotnet#method('OnChanged(', ''),
  \ dotnet#method('AddGeometry(', ''),
  \ dotnet#method('GetPointAtFractionLength(', ''),
  \ dotnet#method('InternalCombine(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('GetPathBounds(', ''),
  \ dotnet#method('GetPathBoundsAsRB(', ''),
  \ dotnet#method('HitTestWithPathGeometry(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('MayHaveCurves(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('SetDirty(', ''),
  \ dotnet#method('TransformPropertyChangedHook(', ''),
  \ dotnet#method('FiguresPropertyChangedHook(', ''),
  \ dotnet#prop('FillRule', 'FillRule'),
  \ dotnet#prop('Figures', 'PathFigureCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('PathSegmentCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'PathSegment'),
  \ dotnet#field('_list', 'PathSegmentCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('PathSegmentCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'PathSegment'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('OnInheritanceContextChangedCore(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('FreezeCore(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#prop('Item(int32)', 'PathSegment'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'PathSegmentCollection'),
  \ ])

call dotnet#class('Pen', 'Animatable', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Brush(', ''),
  \ dotnet#method('set_Brush(', ''),
  \ dotnet#method('get_Thickness(', ''),
  \ dotnet#method('set_Thickness(', ''),
  \ dotnet#method('get_StartLineCap(', ''),
  \ dotnet#method('set_StartLineCap(', ''),
  \ dotnet#method('get_EndLineCap(', ''),
  \ dotnet#method('set_EndLineCap(', ''),
  \ dotnet#method('get_DashCap(', ''),
  \ dotnet#method('set_DashCap(', ''),
  \ dotnet#method('get_LineJoin(', ''),
  \ dotnet#method('set_LineJoin(', ''),
  \ dotnet#method('get_MiterLimit(', ''),
  \ dotnet#method('set_MiterLimit(', ''),
  \ dotnet#method('get_DashStyle(', ''),
  \ dotnet#method('set_DashStyle(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('Pen(', ''),
  \ dotnet#method('GetBasicPenData(', ''),
  \ dotnet#method('get_DoesNotContainGaps(', ''),
  \ dotnet#method('ContributesToBounds(', ''),
  \ dotnet#prop('Brush', 'Brush'),
  \ dotnet#prop('Thickness', 'float64'),
  \ dotnet#prop('StartLineCap', 'PenLineCap'),
  \ dotnet#prop('EndLineCap', 'PenLineCap'),
  \ dotnet#prop('DashCap', 'PenLineCap'),
  \ dotnet#prop('LineJoin', 'PenLineJoin'),
  \ dotnet#prop('MiterLimit', 'float64'),
  \ dotnet#prop('DashStyle', 'DashStyle'),
  \ dotnet#prop('DoesNotContainGaps', 'bool'),
  \ ])

call dotnet#class('PointCollection', 'Freezable', [ 
  \ dotnet#field('_current', 'Point'),
  \ dotnet#field('_list', 'PointCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('PointCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Point'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#method('DeserializeFrom(', ''),
  \ dotnet#prop('Item(int32)', 'Point'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'PointCollection'),
  \ ])

call dotnet#class('PointCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('PointCollectionConverter(', ''),
  \ ])

call dotnet#class('PolyBezierSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Points(', ''),
  \ dotnet#method('set_Points(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('PolyBezierSegment(', ''),
  \ dotnet#method('AddToFigure(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('IsCurved(', ''),
  \ dotnet#method('SerializeData(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#prop('Points', 'PointCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('PolyLineSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Points(', ''),
  \ dotnet#method('set_Points(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('PolyLineSegment(', ''),
  \ dotnet#method('AddToFigure(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('IsCurved(', ''),
  \ dotnet#method('SerializeData(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#prop('Points', 'PointCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('PolyQuadraticBezierSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Points(', ''),
  \ dotnet#method('set_Points(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('PolyQuadraticBezierSegment(', ''),
  \ dotnet#method('AddToFigure(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('IsCurved(', ''),
  \ dotnet#method('SerializeData(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#prop('Points', 'PointCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('QuadraticBezierSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Point1(', ''),
  \ dotnet#method('set_Point1(', ''),
  \ dotnet#method('get_Point2(', ''),
  \ dotnet#method('set_Point2(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('QuadraticBezierSegment(', ''),
  \ dotnet#method('AddToFigure(', ''),
  \ dotnet#method('SerializeData(', ''),
  \ dotnet#method('IsCurved(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#prop('Point1', 'Point'),
  \ dotnet#prop('Point2', 'Point'),
  \ ])

call dotnet#class('RadialGradientBrush', 'GradientBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Center(', ''),
  \ dotnet#method('set_Center(', ''),
  \ dotnet#method('get_RadiusX(', ''),
  \ dotnet#method('set_RadiusX(', ''),
  \ dotnet#method('get_RadiusY(', ''),
  \ dotnet#method('set_RadiusY(', ''),
  \ dotnet#method('get_GradientOrigin(', ''),
  \ dotnet#method('set_GradientOrigin(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('RadialGradientBrush(', ''),
  \ dotnet#prop('Center', 'Point'),
  \ dotnet#prop('RadiusX', 'float64'),
  \ dotnet#prop('RadiusY', 'float64'),
  \ dotnet#prop('GradientOrigin', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('RectangleGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_RadiusX(', ''),
  \ dotnet#method('set_RadiusX(', ''),
  \ dotnet#method('get_RadiusY(', ''),
  \ dotnet#method('set_RadiusY(', ''),
  \ dotnet#method('get_Rect(', ''),
  \ dotnet#method('set_Rect(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('RectangleGeometry(', ''),
  \ dotnet#method('AreClose(', ''),
  \ dotnet#method('GetBoundsHelper(', ''),
  \ dotnet#method('ContainsInternal(', ''),
  \ dotnet#method('GetArea(', ''),
  \ dotnet#method('IsRounded(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('MayHaveCurves(', ''),
  \ dotnet#prop('RadiusX', 'float64'),
  \ dotnet#prop('RadiusY', 'float64'),
  \ dotnet#prop('Rect', 'Rect'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('RotateTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Angle(', ''),
  \ dotnet#method('set_Angle(', ''),
  \ dotnet#method('get_CenterX(', ''),
  \ dotnet#method('set_CenterX(', ''),
  \ dotnet#method('get_CenterY(', ''),
  \ dotnet#method('set_CenterY(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('RotateTransform(', ''),
  \ dotnet#method('get_IsIdentity(', ''),
  \ dotnet#prop('Angle', 'float64'),
  \ dotnet#prop('CenterX', 'float64'),
  \ dotnet#prop('CenterY', 'float64'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('ScaleTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_ScaleX(', ''),
  \ dotnet#method('set_ScaleX(', ''),
  \ dotnet#method('get_ScaleY(', ''),
  \ dotnet#method('set_ScaleY(', ''),
  \ dotnet#method('get_CenterX(', ''),
  \ dotnet#method('set_CenterX(', ''),
  \ dotnet#method('get_CenterY(', ''),
  \ dotnet#method('set_CenterY(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('ScaleTransform(', ''),
  \ dotnet#method('get_IsIdentity(', ''),
  \ dotnet#method('TransformRect(', ''),
  \ dotnet#method('MultiplyValueByMatrix(', ''),
  \ dotnet#prop('ScaleX', 'float64'),
  \ dotnet#prop('ScaleY', 'float64'),
  \ dotnet#prop('CenterX', 'float64'),
  \ dotnet#prop('CenterY', 'float64'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('SkewTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_AngleX(', ''),
  \ dotnet#method('set_AngleX(', ''),
  \ dotnet#method('get_AngleY(', ''),
  \ dotnet#method('set_AngleY(', ''),
  \ dotnet#method('get_CenterX(', ''),
  \ dotnet#method('set_CenterX(', ''),
  \ dotnet#method('get_CenterY(', ''),
  \ dotnet#method('set_CenterY(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('SkewTransform(', ''),
  \ dotnet#method('get_IsIdentity(', ''),
  \ dotnet#prop('AngleX', 'float64'),
  \ dotnet#prop('AngleY', 'float64'),
  \ dotnet#prop('CenterX', 'float64'),
  \ dotnet#prop('CenterY', 'float64'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('SolidColorBrush', 'Brush', [ 
  \ dotnet#field('value__', 'uint8'),
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Color(', ''),
  \ dotnet#method('set_Color(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('SolidColorBrush(', ''),
  \ dotnet#method('SerializeOn(', ''),
  \ dotnet#method('DeserializeFrom(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#prop('Color', 'Color'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('StreamGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_FillRule(', ''),
  \ dotnet#method('set_FillRule(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('StreamGeometry(', ''),
  \ dotnet#method('Open(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('IsEmpty(', ''),
  \ dotnet#method('SetDirty(', ''),
  \ dotnet#method('MayHaveCurves(', ''),
  \ dotnet#method('HasHollows(', ''),
  \ dotnet#method('HasGaps(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('OnChanged(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('TransformPropertyChangedHook(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#prop('FillRule', 'FillRule'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('TextEffect', 'Animatable', [ 
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Transform(', ''),
  \ dotnet#method('set_Transform(', ''),
  \ dotnet#method('get_Clip(', ''),
  \ dotnet#method('set_Clip(', ''),
  \ dotnet#method('get_Foreground(', ''),
  \ dotnet#method('set_Foreground(', ''),
  \ dotnet#method('get_PositionStart(', ''),
  \ dotnet#method('set_PositionStart(', ''),
  \ dotnet#method('get_PositionCount(', ''),
  \ dotnet#method('set_PositionCount(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('TextEffect(', ''),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('Clip', 'Geometry'),
  \ dotnet#prop('Foreground', 'Brush'),
  \ dotnet#prop('PositionStart', 'int32'),
  \ dotnet#prop('PositionCount', 'int32'),
  \ ])

call dotnet#class('TextEffectCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'TextEffect'),
  \ dotnet#field('_list', 'TextEffectCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('TextEffectCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'TextEffect'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('OnInheritanceContextChangedCore(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('FreezeCore(', ''),
  \ dotnet#prop('Item(int32)', 'TextEffect'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'TextEffectCollection'),
  \ ])

call dotnet#class('TransformCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Transform'),
  \ dotnet#field('_list', 'TransformCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('TransformCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Transform'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('OnInheritanceContextChangedCore(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('add_ItemInserted(', ''),
  \ dotnet#method('remove_ItemInserted(', ''),
  \ dotnet#method('add_ItemRemoved(', ''),
  \ dotnet#method('remove_ItemRemoved(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('FreezeCore(', ''),
  \ dotnet#event('ItemInserted', 'ItemInsertedHandler'),
  \ dotnet#event('ItemRemoved', 'ItemRemovedHandler'),
  \ dotnet#prop('Item(int32)', 'Transform'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'TransformCollection'),
  \ ])

call dotnet#class('TransformConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('TransformConverter(', ''),
  \ ])

call dotnet#class('TransformGroup', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Children(', ''),
  \ dotnet#method('set_Children(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('TransformGroup(', ''),
  \ dotnet#method('get_IsIdentity(', ''),
  \ dotnet#method('CanSerializeToString(', ''),
  \ dotnet#prop('Children', 'TransformCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('TranslateTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_X(', ''),
  \ dotnet#method('set_X(', ''),
  \ dotnet#method('get_Y(', ''),
  \ dotnet#method('set_Y(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('TranslateTransform(', ''),
  \ dotnet#method('get_IsIdentity(', ''),
  \ dotnet#method('TransformRect(', ''),
  \ dotnet#method('MultiplyValueByMatrix(', ''),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('VVectorCollectionCollection', 'Freezable', [ 
  \ dotnet#field('_current', 'VVectorCollection'),
  \ dotnet#field('_list', 'VVectorCollectionCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('VectorCollection(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'VVectorCollection'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsFixedSize(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('Internal_GetItem(', ''),
  \ dotnet#method('AddWithoutFiringPublicEvents(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('Parse(', ''),
  \ dotnet#prop('Item(int32)', 'VVectorCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'VVectorCollectionCollection'),
  \ ])

call dotnet#class('VVectorCollectionConverterCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('VectorCollectionConverter(', ''),
  \ ])

call dotnet#class('VisualBrush', 'TileBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Visual(', ''),
  \ dotnet#method('set_Visual(', ''),
  \ dotnet#method('get_AutoLayoutContent(', ''),
  \ dotnet#method('set_AutoLayoutContent(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ''),
  \ dotnet#method('VisualBrush(', ''),
  \ dotnet#method('FireOnChanged(', ''),
  \ dotnet#method('RenderForCyclicBrush(', ''),
  \ dotnet#method('AddRefResource(', ''),
  \ dotnet#method('ReleaseResource(', ''),
  \ dotnet#method('OnPropertyChanged(', ''),
  \ dotnet#method('Enter(', ''),
  \ dotnet#method('Exit(', ''),
  \ dotnet#method('GetContentBounds(', ''),
  \ dotnet#prop('Visual', 'Visual'),
  \ dotnet#prop('AutoLayoutContent', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('VideoDrawing', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_Player(', ''),
  \ dotnet#method('set_Player(', ''),
  \ dotnet#method('get_Rect(', ''),
  \ dotnet#method('set_Rect(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetChannelCountCore(', ''),
  \ dotnet#method('VideoDrawing(', ''),
  \ dotnet#method('WalkCurrentValue(', ''),
  \ dotnet#prop('Player', 'MediaPlayer'),
  \ dotnet#prop('Rect', 'Rect'),
  \ ])

call dotnet#class('GuidelineSet', 'Animatable', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ''),
  \ dotnet#method('CloneCurrentValue(', ''),
  \ dotnet#method('get_GuidelinesX(', ''),
  \ dotnet#method('set_GuidelinesX(', ''),
  \ dotnet#method('get_GuidelinesY(', ''),
  \ dotnet#method('set_GuidelinesY(', ''),
  \ dotnet#method('get_IsDynamic(', ''),
  \ dotnet#method('set_IsDynamic(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('GuidelineSet(', ''),
  \ dotnet#prop('GuidelinesX', 'DoubleCollection'),
  \ dotnet#prop('GuidelinesY', 'DoubleCollection'),
  \ dotnet#prop('IsDynamic', 'bool'),
  \ ])

call dotnet#class('HitTestParameters', 'Object', [ 
  \ dotnet#method('HitTestParameters(', ''),
  \ ])

call dotnet#class('GeometryHitTestParameters', 'HitTestParameters', [ 
  \ dotnet#method('GeometryHitTestParameters(', ''),
  \ dotnet#method('get_HitGeometry(', ''),
  \ dotnet#method('PushMatrix(', ''),
  \ dotnet#method('PopMatrix(', ''),
  \ dotnet#method('EmergencyRestoreOriginalTransform(', ''),
  \ dotnet#prop('HitGeometry', 'Geometry'),
  \ dotnet#prop('InternalHitGeometry', 'PathGeometry'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('HitTestResult', 'Object', [ 
  \ dotnet#method('HitTestResult(', ''),
  \ dotnet#method('get_VisualHit(', ''),
  \ dotnet#prop('VisualHit', 'DependencyObject'),
  \ ])

call dotnet#class('GeometryHitTestResult', 'HitTestResult', [ 
  \ dotnet#method('GeometryHitTestResult(', ''),
  \ dotnet#method('get_IntersectionDetail(', ''),
  \ dotnet#method('get_VisualHit(', ''),
  \ dotnet#prop('IntersectionDetail', 'IntersectionDetail'),
  \ dotnet#prop('VisualHit', 'Visual'),
  \ ])

call dotnet#class('GlyphRun', 'Object', [ 
  \ dotnet#field('_baseVGlyphRunX', 'float64'),
  \ dotnet#field('_baseVGlyphRunY', 'float64'),
  \ dotnet#method('GlyphRun(', ''),
  \ dotnet#method('get_IsValid(', ''),
  \ dotnet#method('IsSame(', ''),
  \ dotnet#prop('IsValid', 'bool'),
  \ dotnet#method('TryCreate(', ''),
  \ dotnet#method('GetDistanceFromCaretCharacterHit(', ''),
  \ dotnet#method('GetCaretCharacterHitFromDistance(', ''),
  \ dotnet#method('GetNextCaretCharacterHit(', ''),
  \ dotnet#method('GetPreviousCaretCharacterHit(', ''),
  \ dotnet#method('get_BaselineOrigin(', ''),
  \ dotnet#method('set_BaselineOrigin(', ''),
  \ dotnet#method('get_FontRenderingEmSize(', ''),
  \ dotnet#method('set_FontRenderingEmSize(', ''),
  \ dotnet#method('get_GlyphTypeface(', ''),
  \ dotnet#method('set_GlyphTypeface(', ''),
  \ dotnet#method('get_BidiLevel(', ''),
  \ dotnet#method('set_BidiLevel(', ''),
  \ dotnet#method('get_IsSideways(', ''),
  \ dotnet#method('set_IsSideways(', ''),
  \ dotnet#method('get_CaretStops(', ''),
  \ dotnet#method('set_CaretStops(', ''),
  \ dotnet#method('get_IsHitTestable(', ''),
  \ dotnet#method('get_ClusterMap(', ''),
  \ dotnet#method('set_ClusterMap(', ''),
  \ dotnet#method('get_Characters(', ''),
  \ dotnet#method('set_Characters(', ''),
  \ dotnet#method('get_GlyphIndices(', ''),
  \ dotnet#method('set_GlyphIndices(', ''),
  \ dotnet#method('get_AdvanceWidths(', ''),
  \ dotnet#method('set_AdvanceWidths(', ''),
  \ dotnet#method('get_GlyphOffsets(', ''),
  \ dotnet#method('set_GlyphOffsets(', ''),
  \ dotnet#method('get_Language(', ''),
  \ dotnet#method('set_Language(', ''),
  \ dotnet#method('get_DeviceFontName(', ''),
  \ dotnet#method('set_DeviceFontName(', ''),
  \ dotnet#method('GetGlyphOffset(', ''),
  \ dotnet#method('get_GlyphCount(', ''),
  \ dotnet#method('get_CodepointCount(', ''),
  \ dotnet#method('ComputeInkBoundingBox(', ''),
  \ dotnet#method('BuildGeometry(', ''),
  \ dotnet#method('ComputeAlignmentBox(', ''),
  \ dotnet#method('EmitBackground(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('RemoveChildFromParent(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('BeginInit(', ''),
  \ dotnet#method('EndInit(', ''),
  \ dotnet#prop('BaselineOrigin', 'Point'),
  \ dotnet#prop('FontRenderingEmSize', 'float64'),
  \ dotnet#prop('GlyphTypeface', 'GlyphTypeface'),
  \ dotnet#prop('BidiLevel', 'int32'),
  \ dotnet#prop('IsSideways', 'bool'),
  \ dotnet#prop('CaretStops', 'IList'),
  \ dotnet#prop('IsHitTestable', 'bool'),
  \ dotnet#prop('ClusterMap', 'IList'),
  \ dotnet#prop('Characters', 'IList'),
  \ dotnet#prop('GlyphIndices', 'IList'),
  \ dotnet#prop('AdvanceWidths', 'IList'),
  \ dotnet#prop('GlyphOffsets', 'IList'),
  \ dotnet#prop('Language', 'XmlLanguage'),
  \ dotnet#prop('DeviceFontName', 'string'),
  \ dotnet#prop('GlyphCount', 'int32'),
  \ dotnet#prop('CodepointCount', 'int32'),
  \ ])

call dotnet#class('GlyphTypeface', 'Object', [ 
  \ dotnet#method('GlyphTypeface(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetGlyphOutline(', ''),
  \ dotnet#method('ComputeSubset(', ''),
  \ dotnet#method('GetFontStream(', ''),
  \ dotnet#method('get_FontUri(', ''),
  \ dotnet#method('set_FontUri(', ''),
  \ dotnet#method('get_FamilyNames(', ''),
  \ dotnet#method('get_FaceNames(', ''),
  \ dotnet#method('get_Win32FamilyNames(', ''),
  \ dotnet#method('get_Win32FaceNames(', ''),
  \ dotnet#method('get_VersionStrings(', ''),
  \ dotnet#method('get_Copyrights(', ''),
  \ dotnet#method('get_ManufacturerNames(', ''),
  \ dotnet#method('get_Trademarks(', ''),
  \ dotnet#method('get_DesignerNames(', ''),
  \ dotnet#method('get_Descriptions(', ''),
  \ dotnet#method('get_VendorUrls(', ''),
  \ dotnet#method('get_DesignerUrls(', ''),
  \ dotnet#method('get_LicenseDescriptions(', ''),
  \ dotnet#method('get_SampleTexts(', ''),
  \ dotnet#method('get_Style(', ''),
  \ dotnet#method('get_Weight(', ''),
  \ dotnet#method('get_Stretch(', ''),
  \ dotnet#method('get_Version(', ''),
  \ dotnet#method('get_Height(', ''),
  \ dotnet#method('get_Baseline(', ''),
  \ dotnet#method('get_CapsHeight(', ''),
  \ dotnet#method('get_XHeight(', ''),
  \ dotnet#method('get_Symbol(', ''),
  \ dotnet#method('get_UnderlinePosition(', ''),
  \ dotnet#method('get_UnderlineThickness(', ''),
  \ dotnet#method('get_StrikethroughPosition(', ''),
  \ dotnet#method('get_StrikethroughThickness(', ''),
  \ dotnet#method('get_EmbeddingRights(', ''),
  \ dotnet#method('get_AdvanceWidths(', ''),
  \ dotnet#method('get_AdvanceHeights(', ''),
  \ dotnet#method('get_LeftSideBearings(', ''),
  \ dotnet#method('get_RightSideBearings(', ''),
  \ dotnet#method('get_TopSideBearings(', ''),
  \ dotnet#method('get_BottomSideBearings(', ''),
  \ dotnet#method('get_DistancesFromHorizontalBaselineToBlackBoxBottom(', ''),
  \ dotnet#method('get_CharacterToGlyphMap(', ''),
  \ dotnet#method('set_StyleSimulations(', ''),
  \ dotnet#method('get_GlyphCount(', ''),
  \ dotnet#method('GetAdvanceWidth(', ''),
  \ dotnet#method('DemandPermissionsForFontInformation(', ''),
  \ dotnet#method('BaselineHelper(', ''),
  \ dotnet#method('GetGlyphMetrics(', ''),
  \ dotnet#method('ComputeGlyphOutline(', ''),
  \ dotnet#method('GetAdvanceWidthsUnshaped(', ''),
  \ dotnet#method('ComputeUnshapedGlyphRun(', ''),
  \ dotnet#method('GetGlyphIndicesOptimized(', ''),
  \ dotnet#method('GetGlyphMetricsOptimized(', ''),
  \ dotnet#method('get_FaceIndex(', ''),
  \ dotnet#method('get_BlankGlyphIndex(', ''),
  \ dotnet#method('get_DesignEmHeight(', ''),
  \ dotnet#method('get_GetDWriteFontAddRef(', ''),
  \ dotnet#method('BeginInit(', ''),
  \ dotnet#method('EndInit(', ''),
  \ dotnet#prop('CriticalFileReadPermission', 'CodeAccessPermission'),
  \ dotnet#prop('CriticalUriDiscoveryPermission', 'CodeAccessPermission'),
  \ dotnet#prop('FontUri', 'Uri'),
  \ dotnet#prop('FamilyNames', 'IDictionary'),
  \ dotnet#prop('FaceNames', 'IDictionary'),
  \ dotnet#prop('Win32FamilyNames', 'IDictionary'),
  \ dotnet#prop('AdjustedFaceNames', 'IDictionary'),
  \ dotnet#prop('Win32FaceNames', 'IDictionary'),
  \ dotnet#prop('VersionStrings', 'IDictionary'),
  \ dotnet#prop('Copyrights', 'IDictionary'),
  \ dotnet#prop('ManufacturerNames', 'IDictionary'),
  \ dotnet#prop('Trademarks', 'IDictionary'),
  \ dotnet#prop('DesignerNames', 'IDictionary'),
  \ dotnet#prop('Descriptions', 'IDictionary'),
  \ dotnet#prop('VendorUrls', 'IDictionary'),
  \ dotnet#prop('DesignerUrls', 'IDictionary'),
  \ dotnet#prop('LicenseDescriptions', 'IDictionary'),
  \ dotnet#prop('SampleTexts', 'IDictionary'),
  \ dotnet#prop('Style', 'FontStyle'),
  \ dotnet#prop('Weight', 'FontWeight'),
  \ dotnet#prop('Stretch', 'FontStretch'),
  \ dotnet#prop('Version', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Baseline', 'float64'),
  \ dotnet#prop('CapsHeight', 'float64'),
  \ dotnet#prop('XHeight', 'float64'),
  \ dotnet#prop('Symbol', 'bool'),
  \ dotnet#prop('UnderlinePosition', 'float64'),
  \ dotnet#prop('UnderlineThickness', 'float64'),
  \ dotnet#prop('StrikethroughPosition', 'float64'),
  \ dotnet#prop('StrikethroughThickness', 'float64'),
  \ dotnet#prop('EmbeddingRights', 'FontEmbeddingRight'),
  \ dotnet#prop('CapsHeight', 'float64'),
  \ dotnet#prop('XHeight', 'float64'),
  \ dotnet#prop('Symbol', 'bool'),
  \ dotnet#prop('UnderlinePosition', 'float64'),
  \ dotnet#prop('UnderlineThickness', 'float64'),
  \ dotnet#prop('StrikethroughPosition', 'float64'),
  \ dotnet#prop('StrikethroughThickness', 'float64'),
  \ dotnet#prop('AdvanceWidths', 'IDictionary'),
  \ dotnet#prop('AdvanceHeights', 'IDictionary'),
  \ dotnet#prop('LeftSideBearings', 'IDictionary'),
  \ dotnet#prop('RightSideBearings', 'IDictionary'),
  \ dotnet#prop('TopSideBearings', 'IDictionary'),
  \ dotnet#prop('BottomSideBearings', 'IDictionary'),
  \ dotnet#prop('DistancesFromHorizontalBaselineToBlackBoxBottom', 'IDictionary'),
  \ dotnet#prop('CharacterToGlyphMap', 'IDictionary'),
  \ dotnet#prop('StyleSimulations', 'StyleSimulations'),
  \ dotnet#prop('GlyphCount', 'int32'),
  \ dotnet#prop('FontDWrite', 'Font'),
  \ dotnet#prop('FontSource', 'FontSource'),
  \ dotnet#prop('FaceIndex', 'int32'),
  \ dotnet#prop('FontFaceLayoutInfo', 'FontFaceLayoutInfo'),
  \ dotnet#prop('BlankGlyphIndex', 'uint16'),
  \ dotnet#prop('FontTechnology', 'FontTechnology'),
  \ dotnet#prop('DesignEmHeight', 'uint16'),
  \ dotnet#prop('GetDWriteFontAddRef', 'int'),
  \ ])

call dotnet#class('HitTestFilterCallback', 'MulticastDelegate', [ 
  \ dotnet#method('HitTestFilterCallback(', ''),
  \ ])

call dotnet#class('HitTestResultCallback', 'MulticastDelegate', [ 
  \ dotnet#method('HitTestResultCallback(', ''),
  \ ])

call dotnet#class('ImageMetadata', 'Freezable', [ 
  \ dotnet#method('ImageMetadata(', ''),
  \ dotnet#method('Clone(', ''),
  \ ])

call dotnet#class('ImageSourceConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('ImageSourceConverter(', ''),
  \ ])

call dotnet#class('ImageSourceValueSerializer', 'ValueSerializer', [ 
  \ dotnet#method('CanConvertFromString(', ''),
  \ dotnet#method('CanConvertToString(', ''),
  \ dotnet#method('ConvertFromString(', ''),
  \ dotnet#method('ConvertToString(', ''),
  \ dotnet#method('ImageSourceValueSerializer(', ''),
  \ ])

call dotnet#class('InvalidWmpVersionException', 'SystemException', [ 
  \ dotnet#method('InvalidWmpVersionException(', ''),
  \ ])

call dotnet#class('Colors', 'Object', [ 
  \ dotnet#method('Colors(', ''),
  \ dotnet#prop('AliceBlue', 'Color'),
  \ dotnet#prop('AntiqueWhite', 'Color'),
  \ dotnet#prop('Aqua', 'Color'),
  \ dotnet#prop('Aquamarine', 'Color'),
  \ dotnet#prop('Azure', 'Color'),
  \ dotnet#prop('Beige', 'Color'),
  \ dotnet#prop('Bisque', 'Color'),
  \ dotnet#prop('Black', 'Color'),
  \ dotnet#prop('BlanchedAlmond', 'Color'),
  \ dotnet#prop('Blue', 'Color'),
  \ dotnet#prop('BlueViolet', 'Color'),
  \ dotnet#prop('Brown', 'Color'),
  \ dotnet#prop('BurlyWood', 'Color'),
  \ dotnet#prop('CadetBlue', 'Color'),
  \ dotnet#prop('Chartreuse', 'Color'),
  \ dotnet#prop('Chocolate', 'Color'),
  \ dotnet#prop('Coral', 'Color'),
  \ dotnet#prop('CornflowerBlue', 'Color'),
  \ dotnet#prop('Cornsilk', 'Color'),
  \ dotnet#prop('Crimson', 'Color'),
  \ dotnet#prop('Cyan', 'Color'),
  \ dotnet#prop('DarkBlue', 'Color'),
  \ dotnet#prop('DarkCyan', 'Color'),
  \ dotnet#prop('DarkGoldenrod', 'Color'),
  \ dotnet#prop('DarkGray', 'Color'),
  \ dotnet#prop('DarkGreen', 'Color'),
  \ dotnet#prop('DarkKhaki', 'Color'),
  \ dotnet#prop('DarkMagenta', 'Color'),
  \ dotnet#prop('DarkOliveGreen', 'Color'),
  \ dotnet#prop('DarkOrange', 'Color'),
  \ dotnet#prop('DarkOrchid', 'Color'),
  \ dotnet#prop('DarkRed', 'Color'),
  \ dotnet#prop('DarkSalmon', 'Color'),
  \ dotnet#prop('DarkSeaGreen', 'Color'),
  \ dotnet#prop('DarkSlateBlue', 'Color'),
  \ dotnet#prop('DarkSlateGray', 'Color'),
  \ dotnet#prop('DarkTurquoise', 'Color'),
  \ dotnet#prop('DarkViolet', 'Color'),
  \ dotnet#prop('DeepPink', 'Color'),
  \ dotnet#prop('DeepSkyBlue', 'Color'),
  \ dotnet#prop('DimGray', 'Color'),
  \ dotnet#prop('DodgerBlue', 'Color'),
  \ dotnet#prop('Firebrick', 'Color'),
  \ dotnet#prop('FloralWhite', 'Color'),
  \ dotnet#prop('ForestGreen', 'Color'),
  \ dotnet#prop('Fuchsia', 'Color'),
  \ dotnet#prop('Gainsboro', 'Color'),
  \ dotnet#prop('GhostWhite', 'Color'),
  \ dotnet#prop('Gold', 'Color'),
  \ dotnet#prop('Goldenrod', 'Color'),
  \ dotnet#prop('Gray', 'Color'),
  \ dotnet#prop('Green', 'Color'),
  \ dotnet#prop('GreenYellow', 'Color'),
  \ dotnet#prop('Honeydew', 'Color'),
  \ dotnet#prop('HotPink', 'Color'),
  \ dotnet#prop('IndianRed', 'Color'),
  \ dotnet#prop('Indigo', 'Color'),
  \ dotnet#prop('Ivory', 'Color'),
  \ dotnet#prop('Khaki', 'Color'),
  \ dotnet#prop('Lavender', 'Color'),
  \ dotnet#prop('LavenderBlush', 'Color'),
  \ dotnet#prop('LawnGreen', 'Color'),
  \ dotnet#prop('LemonChiffon', 'Color'),
  \ dotnet#prop('LightBlue', 'Color'),
  \ dotnet#prop('LightCoral', 'Color'),
  \ dotnet#prop('LightCyan', 'Color'),
  \ dotnet#prop('LightGoldenrodYellow', 'Color'),
  \ dotnet#prop('LightGray', 'Color'),
  \ dotnet#prop('LightGreen', 'Color'),
  \ dotnet#prop('LightPink', 'Color'),
  \ dotnet#prop('LightSalmon', 'Color'),
  \ dotnet#prop('LightSeaGreen', 'Color'),
  \ dotnet#prop('LightSkyBlue', 'Color'),
  \ dotnet#prop('LightSlateGray', 'Color'),
  \ dotnet#prop('LightSteelBlue', 'Color'),
  \ dotnet#prop('LightYellow', 'Color'),
  \ dotnet#prop('Lime', 'Color'),
  \ dotnet#prop('LimeGreen', 'Color'),
  \ dotnet#prop('Linen', 'Color'),
  \ dotnet#prop('Magenta', 'Color'),
  \ dotnet#prop('Maroon', 'Color'),
  \ dotnet#prop('MediumAquamarine', 'Color'),
  \ dotnet#prop('MediumBlue', 'Color'),
  \ dotnet#prop('MediumOrchid', 'Color'),
  \ dotnet#prop('MediumPurple', 'Color'),
  \ dotnet#prop('MediumSeaGreen', 'Color'),
  \ dotnet#prop('MediumSlateBlue', 'Color'),
  \ dotnet#prop('MediumSpringGreen', 'Color'),
  \ dotnet#prop('MediumTurquoise', 'Color'),
  \ dotnet#prop('MediumVioletRed', 'Color'),
  \ dotnet#prop('MidnightBlue', 'Color'),
  \ dotnet#prop('MintCream', 'Color'),
  \ dotnet#prop('MistyRose', 'Color'),
  \ dotnet#prop('Moccasin', 'Color'),
  \ dotnet#prop('NavajoWhite', 'Color'),
  \ dotnet#prop('Navy', 'Color'),
  \ dotnet#prop('OldLace', 'Color'),
  \ dotnet#prop('Olive', 'Color'),
  \ dotnet#prop('OliveDrab', 'Color'),
  \ dotnet#prop('Orange', 'Color'),
  \ dotnet#prop('OrangeRed', 'Color'),
  \ dotnet#prop('Orchid', 'Color'),
  \ dotnet#prop('PaleGoldenrod', 'Color'),
  \ dotnet#prop('PaleGreen', 'Color'),
  \ dotnet#prop('PaleTurquoise', 'Color'),
  \ dotnet#prop('PaleVioletRed', 'Color'),
  \ dotnet#prop('PapayaWhip', 'Color'),
  \ dotnet#prop('PeachPuff', 'Color'),
  \ dotnet#prop('Peru', 'Color'),
  \ dotnet#prop('Pink', 'Color'),
  \ dotnet#prop('Plum', 'Color'),
  \ dotnet#prop('PowderBlue', 'Color'),
  \ dotnet#prop('Purple', 'Color'),
  \ dotnet#prop('Red', 'Color'),
  \ dotnet#prop('RosyBrown', 'Color'),
  \ dotnet#prop('RoyalBlue', 'Color'),
  \ dotnet#prop('SaddleBrown', 'Color'),
  \ dotnet#prop('Salmon', 'Color'),
  \ dotnet#prop('SandyBrown', 'Color'),
  \ dotnet#prop('SeaGreen', 'Color'),
  \ dotnet#prop('SeaShell', 'Color'),
  \ dotnet#prop('Sienna', 'Color'),
  \ dotnet#prop('Silver', 'Color'),
  \ dotnet#prop('SkyBlue', 'Color'),
  \ dotnet#prop('SlateBlue', 'Color'),
  \ dotnet#prop('SlateGray', 'Color'),
  \ dotnet#prop('Snow', 'Color'),
  \ dotnet#prop('SpringGreen', 'Color'),
  \ dotnet#prop('SteelBlue', 'Color'),
  \ dotnet#prop('Tan', 'Color'),
  \ dotnet#prop('Teal', 'Color'),
  \ dotnet#prop('Thistle', 'Color'),
  \ dotnet#prop('Tomato', 'Color'),
  \ dotnet#prop('Transparent', 'Color'),
  \ dotnet#prop('Turquoise', 'Color'),
  \ dotnet#prop('Violet', 'Color'),
  \ dotnet#prop('Wheat', 'Color'),
  \ dotnet#prop('White', 'Color'),
  \ dotnet#prop('WhiteSmoke', 'Color'),
  \ dotnet#prop('Yellow', 'Color'),
  \ dotnet#prop('YellowGreen', 'Color'),
  \ ])

call dotnet#class('MediaClock', 'Clock', [ 
  \ dotnet#method('MediaClock(', ''),
  \ dotnet#method('get_Timeline(', ''),
  \ dotnet#method('GetCanSlip(', ''),
  \ dotnet#method('GetCurrentTimeCore(', ''),
  \ dotnet#method('Stopped(', ''),
  \ dotnet#method('SpeedChanged(', ''),
  \ dotnet#method('DiscontinuousTimeMovement(', ''),
  \ dotnet#method('get_NeedsTicksWhenActive(', ''),
  \ dotnet#method('set_Player(', ''),
  \ dotnet#prop('Timeline', 'MediaTimeline'),
  \ dotnet#prop('NeedsTicksWhenActive', 'bool'),
  \ dotnet#prop('Player', 'MediaPlayer'),
  \ ])

call dotnet#class('ExceptionEventArgs', 'EventArgs', [ 
  \ dotnet#method('ExceptionEventArgs(', ''),
  \ dotnet#method('get_ErrorException(', ''),
  \ dotnet#prop('ErrorException', 'Exception'),
  \ ])

call dotnet#class('MediaScriptCommandEventArgs', 'EventArgs', [ 
  \ dotnet#method('MediaScriptCommandEventArgs(', ''),
  \ dotnet#method('get_ParameterType(', ''),
  \ dotnet#method('get_ParameterValue(', ''),
  \ dotnet#prop('ParameterType', 'string'),
  \ dotnet#prop('ParameterValue', 'string'),
  \ ])

call dotnet#class('MediaPlayer', 'Animatable', [ 
  \ dotnet#field('_duceResource', 'DUCE/ShareableDUCEMultiChannelResource'),
  \ dotnet#method('MediaPlayer(', ''),
  \ dotnet#method('get_IsBuffering(', ''),
  \ dotnet#method('get_CanPause(', ''),
  \ dotnet#method('get_DownloadProgress(', ''),
  \ dotnet#method('get_BufferingProgress(', ''),
  \ dotnet#method('get_NaturalVideoHeight(', ''),
  \ dotnet#method('get_NaturalVideoWidth(', ''),
  \ dotnet#method('get_HasAudio(', ''),
  \ dotnet#method('get_HasVideo(', ''),
  \ dotnet#method('get_Source(', ''),
  \ dotnet#method('get_Volume(', ''),
  \ dotnet#method('set_Volume(', ''),
  \ dotnet#method('get_Balance(', ''),
  \ dotnet#method('set_Balance(', ''),
  \ dotnet#method('get_ScrubbingEnabled(', ''),
  \ dotnet#method('set_ScrubbingEnabled(', ''),
  \ dotnet#method('get_IsMuted(', ''),
  \ dotnet#method('set_IsMuted(', ''),
  \ dotnet#method('get_NaturalDuration(', ''),
  \ dotnet#method('set_Position(', ''),
  \ dotnet#method('get_Position(', ''),
  \ dotnet#method('get_SpeedRatio(', ''),
  \ dotnet#method('set_SpeedRatio(', ''),
  \ dotnet#method('add_MediaFailed(', ''),
  \ dotnet#method('remove_MediaFailed(', ''),
  \ dotnet#method('add_MediaOpened(', ''),
  \ dotnet#method('remove_MediaOpened(', ''),
  \ dotnet#method('add_MediaEnded(', ''),
  \ dotnet#method('remove_MediaEnded(', ''),
  \ dotnet#method('add_BufferingStarted(', ''),
  \ dotnet#method('remove_BufferingStarted(', ''),
  \ dotnet#method('add_BufferingEnded(', ''),
  \ dotnet#method('remove_BufferingEnded(', ''),
  \ dotnet#method('add_ScriptCommand(', ''),
  \ dotnet#method('remove_ScriptCommand(', ''),
  \ dotnet#method('get_Clock(', ''),
  \ dotnet#method('set_Clock(', ''),
  \ dotnet#method('Open(', ''),
  \ dotnet#method('Play(', ''),
  \ dotnet#method('Pause(', ''),
  \ dotnet#method('Stop(', ''),
  \ dotnet#method('Close(', ''),
  \ dotnet#method('AddRefOnChannelCore(', ''),
  \ dotnet#method('ReleaseOnChannel(', ''),
  \ dotnet#method('ReleaseOnChannelCore(', ''),
  \ dotnet#method('GetHandleCore(', ''),
  \ dotnet#method('GetChannelCount(', ''),
  \ dotnet#method('UpdateResource(', ''),
  \ dotnet#method('CreateInstanceCore(', ''),
  \ dotnet#method('CloneCore(', ''),
  \ dotnet#method('CloneCurrentValueCore(', ''),
  \ dotnet#method('GetAsFrozenCore(', ''),
  \ dotnet#method('ReadPreamble(', ''),
  \ dotnet#method('WritePreamble(', ''),
  \ dotnet#method('SetSpeedRatio(', ''),
  \ dotnet#method('SetSource(', ''),
  \ dotnet#method('SetPosition(', ''),
  \ dotnet#event('MediaFailed', 'EventHandler'),
  \ dotnet#event('MediaOpened', 'EventHandler'),
  \ dotnet#event('MediaEnded', 'EventHandler'),
  \ dotnet#event('BufferingStarted', 'EventHandler'),
  \ dotnet#event('BufferingEnded', 'EventHandler'),
  \ dotnet#event('ScriptCommand', 'EventHandler'),
  \ dotnet#prop('IsBuffering', 'bool'),
  \ dotnet#prop('CanPause', 'bool'),
  \ dotnet#prop('DownloadProgress', 'float64'),
  \ dotnet#prop('BufferingProgress', 'float64'),
  \ dotnet#prop('NaturalVideoHeight', 'int32'),
  \ dotnet#prop('NaturalVideoWidth', 'int32'),
  \ dotnet#prop('HasAudio', 'bool'),
  \ dotnet#prop('HasVideo', 'bool'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('Volume', 'float64'),
  \ dotnet#prop('Balance', 'float64'),
  \ dotnet#prop('ScrubbingEnabled', 'bool'),
  \ dotnet#prop('IsMuted', 'bool'),
  \ dotnet#prop('NaturalDuration', 'Duration'),
  \ dotnet#prop('Position', 'TimeSpan'),
  \ dotnet#prop('SpeedRatio', 'float64'),
  \ dotnet#prop('Clock', 'MediaClock'),
  \ ])

call dotnet#class('PixelFormatChannelMask', 'ValueType', [ 
  \ dotnet#field('_mask', 'uint8[]'),
  \ dotnet#method('PixelFormatChannelMask(', ''),
  \ dotnet#method('get_Mask(', ''),
  \ dotnet#method('op_Equality(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('op_Inequality(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#prop('Mask', 'IList'),
  \ ])

call dotnet#class('PixelFormat', 'ValueType', [ 
  \ dotnet#field('_flags', 'PixelFormatFlags'),
  \ dotnet#field('_format', 'PixelFormatEnum'),
  \ dotnet#field('_bitsPerPixel', 'uint32'),
  \ dotnet#field('_guidFormat', 'SecurityCriticalDataForSet'),
  \ dotnet#method('PixelFormat(', ''),
  \ dotnet#method('op_Equality(', ''),
  \ dotnet#method('op_Inequality(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('get_BitsPerPixel(', ''),
  \ dotnet#method('get_Masks(', ''),
  \ dotnet#method('CreatePixelFormatInfo(', ''),
  \ dotnet#method('get_InternalBitsPerPixel(', ''),
  \ dotnet#method('get_HasAlpha(', ''),
  \ dotnet#method('get_Palettized(', ''),
  \ dotnet#method('ToString(', ''),
  \ dotnet#method('GetPixelFormat(', ''),
  \ dotnet#prop('BitsPerPixel', 'int32'),
  \ dotnet#prop('Masks', 'IList'),
  \ dotnet#prop('InternalBitsPerPixel', 'int32'),
  \ dotnet#prop('HasAlpha', 'bool'),
  \ dotnet#prop('Palettized', 'bool'),
  \ dotnet#prop('Format', 'PixelFormatEnum'),
  \ dotnet#prop('Guid', 'Guid'),
  \ ])

call dotnet#class('PixelFormatConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFromString(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('PixelFormatConverter(', ''),
  \ ])

call dotnet#class('PixelFormats', 'Object', [ 
  \ dotnet#prop('Default', 'PixelFormat'),
  \ dotnet#prop('Indexed1', 'PixelFormat'),
  \ dotnet#prop('Indexed2', 'PixelFormat'),
  \ dotnet#prop('Indexed4', 'PixelFormat'),
  \ dotnet#prop('Indexed8', 'PixelFormat'),
  \ dotnet#prop('BlackWhite', 'PixelFormat'),
  \ dotnet#prop('Gray2', 'PixelFormat'),
  \ dotnet#prop('Gray4', 'PixelFormat'),
  \ dotnet#prop('Gray8', 'PixelFormat'),
  \ dotnet#prop('Bgr555', 'PixelFormat'),
  \ dotnet#prop('Bgr565', 'PixelFormat'),
  \ dotnet#prop('Rgb128Float', 'PixelFormat'),
  \ dotnet#prop('Bgr24', 'PixelFormat'),
  \ dotnet#prop('Rgb24', 'PixelFormat'),
  \ dotnet#prop('Bgr101010', 'PixelFormat'),
  \ dotnet#prop('Bgr32', 'PixelFormat'),
  \ dotnet#prop('Bgra32', 'PixelFormat'),
  \ dotnet#prop('Pbgra32', 'PixelFormat'),
  \ dotnet#prop('Rgb48', 'PixelFormat'),
  \ dotnet#prop('Rgba64', 'PixelFormat'),
  \ dotnet#prop('Prgba64', 'PixelFormat'),
  \ dotnet#prop('Gray16', 'PixelFormat'),
  \ dotnet#prop('Gray32Float', 'PixelFormat'),
  \ dotnet#prop('Rgba128Float', 'PixelFormat'),
  \ dotnet#prop('Prgba128Float', 'PixelFormat'),
  \ dotnet#prop('Cmyk32', 'PixelFormat'),
  \ ])

call dotnet#class('PointHitTestResult', 'HitTestResult', [ 
  \ dotnet#method('PointHitTestResult(', ''),
  \ dotnet#method('get_PointHit(', ''),
  \ dotnet#method('get_VisualHit(', ''),
  \ dotnet#prop('PointHit', 'Point'),
  \ dotnet#prop('VisualHit', 'Visual'),
  \ ])

call dotnet#class('PointHitTestParameters', 'HitTestParameters', [ 
  \ dotnet#method('PointHitTestParameters(', ''),
  \ dotnet#method('get_HitPoint(', ''),
  \ dotnet#method('SetHitPoint(', ''),
  \ dotnet#prop('HitPoint', 'Point'),
  \ ])

call dotnet#class('RenderCapability', 'Object', [ 
  \ dotnet#method('get_Tier(', ''),
  \ dotnet#method('IsPixelShaderVersionSupported(', ''),
  \ dotnet#method('IsPixelShaderVersionSupportedInSoftware(', ''),
  \ dotnet#method('get_IsShaderEffectSoftwareRenderingSupported(', ''),
  \ dotnet#method('MaxPixelShaderInstructionSlots(', ''),
  \ dotnet#method('add_TierChanged(', ''),
  \ dotnet#method('remove_TierChanged(', ''),
  \ dotnet#event('TierChanged', 'EventHandler'),
  \ dotnet#prop('Tier', 'int32'),
  \ dotnet#prop('IsShaderEffectSoftwareRenderingSupported', 'bool'),
  \ dotnet#prop('MaxHardwareTextureSize', 'Size'),
  \ ])

call dotnet#class('RenderingEventArgs', 'EventArgs', [ 
  \ dotnet#method('RenderingEventArgs(', ''),
  \ dotnet#method('get_RenderingTime(', ''),
  \ dotnet#prop('RenderingTime', 'TimeSpan'),
  \ ])

call dotnet#class('RenderOptions', 'Object', [ 
  \ dotnet#method('GetEdgeMode(', ''),
  \ dotnet#method('SetEdgeMode(', ''),
  \ dotnet#method('GetBitmapScalingMode(', ''),
  \ dotnet#method('SetBitmapScalingMode(', ''),
  \ dotnet#method('GetClearTypeHint(', ''),
  \ dotnet#method('SetClearTypeHint(', ''),
  \ dotnet#method('GetCachingHint(', ''),
  \ dotnet#method('SetCachingHint(', ''),
  \ dotnet#method('GetCacheInvalidationThresholdMinimum(', ''),
  \ dotnet#method('SetCacheInvalidationThresholdMinimum(', ''),
  \ dotnet#method('GetCacheInvalidationThresholdMaximum(', ''),
  \ dotnet#method('SetCacheInvalidationThresholdMaximum(', ''),
  \ dotnet#method('set_ProcessRenderMode(', ''),
  \ dotnet#method('RenderOptions(', ''),
  \ dotnet#prop('ProcessRenderMode', 'RenderMode'),
  \ ])

call dotnet#class('RequestCachePolicyConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', ''),
  \ dotnet#method('CanConvertTo(', ''),
  \ dotnet#method('ConvertFrom(', ''),
  \ dotnet#method('ConvertTo(', ''),
  \ dotnet#method('RequestCachePolicyConverter(', ''),
  \ ])

call dotnet#class('NumberSubstitution', 'Object', [ 
  \ dotnet#method('NumberSubstitution(', ''),
  \ dotnet#method('get_CultureSource(', ''),
  \ dotnet#method('set_CultureSource(', ''),
  \ dotnet#method('get_CultureOverride(', ''),
  \ dotnet#method('set_CultureOverride(', ''),
  \ dotnet#method('get_Substitution(', ''),
  \ dotnet#method('set_Substitution(', ''),
  \ dotnet#method('SetCultureSource(', ''),
  \ dotnet#method('GetCultureSource(', ''),
  \ dotnet#method('SetCultureOverride(', ''),
  \ dotnet#method('GetCultureOverride(', ''),
  \ dotnet#method('SetSubstitution(', ''),
  \ dotnet#method('GetSubstitution(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#prop('CultureSource', 'NumberCultureSource'),
  \ dotnet#prop('CultureOverride', 'CultureInfo'),
  \ dotnet#prop('Substitution', 'NumberSubstitutionMethod'),
  \ ])

call dotnet#class('Typeface', 'Object', [ 
  \ dotnet#method('Typeface(', ''),
  \ dotnet#method('get_FontFamily(', ''),
  \ dotnet#method('get_Weight(', ''),
  \ dotnet#method('get_Style(', ''),
  \ dotnet#method('get_Stretch(', ''),
  \ dotnet#method('get_IsObliqueSimulated(', ''),
  \ dotnet#method('get_IsBoldSimulated(', ''),
  \ dotnet#method('TryGetGlyphTypeface(', ''),
  \ dotnet#method('get_XHeight(', ''),
  \ dotnet#method('get_CapsHeight(', ''),
  \ dotnet#method('get_UnderlinePosition(', ''),
  \ dotnet#method('get_UnderlineThickness(', ''),
  \ dotnet#method('get_StrikethroughPosition(', ''),
  \ dotnet#method('get_StrikethroughThickness(', ''),
  \ dotnet#method('get_FaceNames(', ''),
  \ dotnet#method('Baseline(', ''),
  \ dotnet#method('LineSpacing(', ''),
  \ dotnet#method('get_Symbol(', ''),
  \ dotnet#method('get_NullFont(', ''),
  \ dotnet#method('CheckFastPathNominalGlyphs(', ''),
  \ dotnet#method('GetCharacterNominalWidthsAndIdealWidth(', ''),
  \ dotnet#method('GetHashCode(', ''),
  \ dotnet#method('Equals(', ''),
  \ dotnet#method('CompareFallbackFontFamily(', ''),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('Weight', 'FontWeight'),
  \ dotnet#prop('Style', 'FontStyle'),
  \ dotnet#prop('Stretch', 'FontStretch'),
  \ dotnet#prop('IsObliqueSimulated', 'bool'),
  \ dotnet#prop('IsBoldSimulated', 'bool'),
  \ dotnet#prop('FallbackFontFamily', 'FontFamily'),
  \ dotnet#prop('XHeight', 'float64'),
  \ dotnet#prop('CapsHeight', 'float64'),
  \ dotnet#prop('UnderlinePosition', 'float64'),
  \ dotnet#prop('UnderlineThickness', 'float64'),
  \ dotnet#prop('StrikethroughPosition', 'float64'),
  \ dotnet#prop('StrikethroughThickness', 'float64'),
  \ dotnet#prop('FaceNames', 'LanguageSpecificStringDictionary'),
  \ dotnet#prop('Symbol', 'bool'),
  \ dotnet#prop('NullFont', 'bool'),
  \ dotnet#prop('CanonicalStyle', 'FontStyle'),
  \ dotnet#prop('CanonicalWeight', 'FontWeight'),
  \ dotnet#prop('CanonicalStretch', 'FontStretch'),
  \ ])

call dotnet#class('VisualCollection', 'Object', [ 
  \ dotnet#field('_collection', 'VisualCollection'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_currentElement', 'Visual'),
  \ dotnet#method('VisualCollection(', ''),
  \ dotnet#method('MoveNext(', ''),
  \ dotnet#method('get_Current(', ''),
  \ dotnet#method('Reset(', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Visual'),
  \ dotnet#method('get_InternalCount(', ''),
  \ dotnet#method('VerifyAPIReadOnly(', ''),
  \ dotnet#method('VerifyAPIReadWrite(', ''),
  \ dotnet#method('VerifyNotReadOnly(', ''),
  \ dotnet#method('get_Count(', ''),
  \ dotnet#method('get_IsReadOnly(', ''),
  \ dotnet#method('get_IsSynchronized(', ''),
  \ dotnet#method('get_SyncRoot(', ''),
  \ dotnet#method('CopyTo(', ''),
  \ dotnet#method('get_InternalCapacity(', ''),
  \ dotnet#method('set_InternalCapacity(', ''),
  \ dotnet#method('get_Capacity(', ''),
  \ dotnet#method('set_Capacity(', ''),
  \ dotnet#method('get_Item(', ''),
  \ dotnet#method('set_Item(', ''),
  \ dotnet#method('Add(', ''),
  \ dotnet#method('IndexOf(', ''),
  \ dotnet#method('Remove(', ''),
  \ dotnet#method('SetReadOnly(', ''),
  \ dotnet#method('Contains(', ''),
  \ dotnet#method('Clear(', ''),
  \ dotnet#method('Insert(', ''),
  \ dotnet#method('RemoveAt(', ''),
  \ dotnet#method('RemoveRange(', ''),
  \ dotnet#method('Move(', ''),
  \ dotnet#method('GetEnumerator(', ''),
  \ dotnet#prop('InternalCount', 'int32'),
  \ dotnet#prop('InternalArray', 'Visual[]'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('InternalCapacity', 'int32'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Item(int32)', 'Visual'),
  \ ])

call dotnet#class('VisualTreeHelper', 'Object', [ 
  \ dotnet#method('IsVisualType(', ''),
  \ dotnet#method('GetChildrenCount(', ''),
  \ dotnet#method('GetChild(', ''),
  \ dotnet#method('GetParent(', ''),
  \ dotnet#method('GetParentInternal(', ''),
  \ dotnet#method('GetContainingVisual2D(', ''),
  \ dotnet#method('GetContainingVisual3D(', ''),
  \ dotnet#method('IsAncestorOf(', ''),
  \ dotnet#method('FindCommonAncestor(', ''),
  \ dotnet#method('GetClip(', ''),
  \ dotnet#method('GetOpacity(', ''),
  \ dotnet#method('GetOpacityMask(', ''),
  \ dotnet#method('GetOffset(', ''),
  \ dotnet#method('GetTransform(', ''),
  \ dotnet#method('GetXSnappingGuidelines(', ''),
  \ dotnet#method('GetYSnappingGuidelines(', ''),
  \ dotnet#method('GetDrawing(', ''),
  \ dotnet#method('GetContentBounds(', ''),
  \ dotnet#method('GetDescendantBounds(', ''),
  \ dotnet#method('GetBitmapEffect(', ''),
  \ dotnet#method('GetBitmapEffectInput(', ''),
  \ dotnet#method('GetEffect(', ''),
  \ dotnet#method('GetCacheMode(', ''),
  \ dotnet#method('GetEdgeMode(', ''),
  \ dotnet#method('HitTest(', ''),
  \ ])

call dotnet#class('VisualTarget', 'CompositionTarget', [ 
  \ dotnet#method('VisualTarget(', ''),
  \ dotnet#method('CreateUCEResources(', ''),
  \ dotnet#method('Dispose(', ''),
  \ dotnet#method('ReleaseUCEResources(', ''),
  \ dotnet#prop('TransformToDevice', 'Matrix'),
  \ dotnet#prop('TransformFromDevice', 'Matrix'),
  \ dotnet#prop('OutOfBandChannel', 'DUCE/Channel'),
  \ ])

call dotnet#class('AdornerHitTestResult', 'PointHitTestResult', [ 
  \ dotnet#method('AdornerHitTestResult(', ''),
  \ dotnet#method('get_Adorner(', ''),
  \ dotnet#prop('Adorner', 'Adorner'),
  \ ])

call dotnet#class('TextOptions', 'Object', [ 
  \ dotnet#method('IsTextFormattingModeValid(', ''),
  \ dotnet#method('SetTextFormattingMode(', ''),
  \ dotnet#method('GetTextFormattingMode(', ''),
  \ dotnet#method('SetTextRenderingMode(', ''),
  \ dotnet#method('GetTextRenderingMode(', ''),
  \ dotnet#method('SetTextHintingMode(', ''),
  \ dotnet#method('GetTextHintingMode(', ''),
  \ dotnet#method('TextOptions(', ''),
  \ ])

