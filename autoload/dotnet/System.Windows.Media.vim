call dotnet#namespace('System.Windows.Media')

call dotnet#class('DisableDpiAwarenessAttribute', 'Attribute', [ 
  \ dotnet#method('DisableDpiAwarenessAttribute(', ')', 'void'),
  \ ])

call dotnet#class('Matrix', 'ValueType', [ 
  \ dotnet#field('_m11', 'float64'),
  \ dotnet#field('_m12', 'float64'),
  \ dotnet#field('_m21', 'float64'),
  \ dotnet#field('_m22', 'float64'),
  \ dotnet#field('_offsetX', 'float64'),
  \ dotnet#field('_offsetY', 'float64'),
  \ dotnet#field('_type', 'MatrixTypes'),
  \ dotnet#field('_padding', 'int32'),
  \ dotnet#method('Matrix(', 'float64 m11, float64 m12, float64 m21, float64 m22, float64 offsetX, float64 offsetY)', 'void'),
  \ dotnet#method('get_Identity(', ')', 'static'),
  \ dotnet#method('SetIdentity(', ')', 'void'),
  \ dotnet#method('get_IsIdentity(', ')', 'bool'),
  \ dotnet#method('op_Multiply(', 'Matrix trans1, Matrix trans2)', 'static'),
  \ dotnet#method('Multiply(', 'Matrix trans1, Matrix trans2)', 'static Matrix'),
  \ dotnet#method('Append(', 'Matrix matrix)', 'void'),
  \ dotnet#method('Prepend(', 'Matrix matrix)', 'void'),
  \ dotnet#method('Rotate(', 'float64 angle)', 'void'),
  \ dotnet#method('RotatePrepend(', 'float64 angle)', 'void'),
  \ dotnet#method('RotateAt(', 'float64 angle, float64 centerX, float64 centerY)', 'void'),
  \ dotnet#method('RotateAtPrepend(', 'float64 angle, float64 centerX, float64 centerY)', 'void'),
  \ dotnet#method('Scale(', 'float64 scaleX, float64 scaleY)', 'void'),
  \ dotnet#method('ScalePrepend(', 'float64 scaleX, float64 scaleY)', 'void'),
  \ dotnet#method('ScaleAt(', 'float64 scaleX, float64 scaleY, float64 centerX, float64 centerY)', 'void'),
  \ dotnet#method('ScaleAtPrepend(', 'float64 scaleX, float64 scaleY, float64 centerX, float64 centerY)', 'void'),
  \ dotnet#method('Skew(', 'float64 skewX, float64 skewY)', 'void'),
  \ dotnet#method('SkewPrepend(', 'float64 skewX, float64 skewY)', 'void'),
  \ dotnet#method('Translate(', 'float64 offsetX, float64 offsetY)', 'void'),
  \ dotnet#method('TranslatePrepend(', 'float64 offsetX, float64 offsetY)', 'void'),
  \ dotnet#method('Transform(', 'Point point)', 'Point'),
  \ dotnet#method('Transform(', 'Point[] points)', 'void'),
  \ dotnet#method('Transform(', 'VMatrix vMatrix)', 'VMatrix'),
  \ dotnet#method('Transform(', 'VMatrix[] vMatrixs)', 'void'),
  \ dotnet#method('get_Determinant(', ')', 'float64'),
  \ dotnet#method('get_HasInverse(', ')', 'bool'),
  \ dotnet#method('Invert(', ')', 'void'),
  \ dotnet#method('get_M11(', ')', 'float64'),
  \ dotnet#method('set_M11(', 'float64 value)', 'void'),
  \ dotnet#method('get_M12(', ')', 'float64'),
  \ dotnet#method('set_M12(', 'float64 value)', 'void'),
  \ dotnet#method('get_M21(', ')', 'float64'),
  \ dotnet#method('set_M21(', 'float64 value)', 'void'),
  \ dotnet#method('get_M22(', ')', 'float64'),
  \ dotnet#method('set_M22(', 'float64 value)', 'void'),
  \ dotnet#method('get_OffsetX(', ')', 'float64'),
  \ dotnet#method('set_OffsetX(', 'float64 value)', 'void'),
  \ dotnet#method('get_OffsetY(', ')', 'float64'),
  \ dotnet#method('set_OffsetY(', 'float64 value)', 'void'),
  \ dotnet#method('MultiplyVMatrix(', 'float64& x, float64& y)', 'void'),
  \ dotnet#method('MultiplyPoint(', 'float64& x, float64& y)', 'void'),
  \ dotnet#method('CreateRotationRadians(', 'float64 angle)', 'static Matrix'),
  \ dotnet#method('CreateRotationRadians(', 'float64 angle, float64 centerX, float64 centerY)', 'static Matrix'),
  \ dotnet#method('CreateScaling(', 'float64 scaleX, float64 scaleY, float64 centerX, float64 centerY)', 'static Matrix'),
  \ dotnet#method('CreateScaling(', 'float64 scaleX, float64 scaleY)', 'static Matrix'),
  \ dotnet#method('CreateSkewRadians(', 'float64 skewX, float64 skewY)', 'static Matrix'),
  \ dotnet#method('CreateTranslation(', 'float64 offsetX, float64 offsetY)', 'static Matrix'),
  \ dotnet#method('op_Equality(', 'Matrix matrix1, Matrix matrix2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Matrix matrix1, Matrix matrix2)', 'static bool'),
  \ dotnet#method('Equals(', 'Matrix matrix1, Matrix matrix2)', 'static bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('Equals(', 'Matrix value)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Parse(', 'string source)', 'static Matrix'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Matrix(', ')', 'static void .'),
  \ dotnet#prop('Identity', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ dotnet#prop('Determinant', 'float64'),
  \ dotnet#prop('HasInverse', 'bool'),
  \ dotnet#prop('M11', 'float64'),
  \ dotnet#prop('M12', 'float64'),
  \ dotnet#prop('M21', 'float64'),
  \ dotnet#prop('M22', 'float64'),
  \ dotnet#prop('OffsetX', 'float64'),
  \ dotnet#prop('OffsetY', 'float64'),
  \ ])

call dotnet#class('MatrixConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('MatrixConverter(', ')', 'void'),
  \ ])

call dotnet#class('Visual', 'DependencyObject', [ 
  \ dotnet#field('_hitResult', 'HitTestResult'),
  \ dotnet#method('HitTestResult(', 'class HitTestResult result)', 'HitTestResultBehavior'),
  \ dotnet#method('NoNested2DFilter(', 'class DependencyObject potentialHitTestTarget)', 'HitTestFilterBehavior'),
  \ dotnet#method('Visual(', ')', 'void'),
  \ dotnet#method('Visual(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'object sender, AncestorChangedEventArgs e)', 'void'),
  \ dotnet#method('BeginInvoke(', 'object sender, AncestorChangedEventArgs e, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ dotnet#field('_parentIndex', 'int32'),
  \ dotnet#field('_parent', 'DependencyObject'),
  \ dotnet#field('_proxy', 'VisualProxy'),
  \ dotnet#method('Visual(', 'DUCE/ResourceType resourceType)', 'void'),
  \ dotnet#method('Visual(', ')', 'void'),
  \ dotnet#method('IsOnChannel(', 'class DUCE/Channel channel)', 'bool'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('Get3DHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('RemoveChildFromParent(', 'class DUCE/IResource parent, DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('get_IsVisualChildrenIterationInProgress(', ')', 'bool'),
  \ dotnet#method('set_IsVisualChildrenIterationInProgress(', 'bool value)', 'void'),
  \ dotnet#method('get_IsRootElement(', ')', 'bool'),
  \ dotnet#method('set_IsRootElement(', 'bool value)', 'void'),
  \ dotnet#method('GetContentBounds(', ')', 'strict'),
  \ dotnet#method('RenderContent(', 'class RenderContext ctx, bool isOnChannel)', 'strict void'),
  \ dotnet#method('RenderClose(', 'class IDrawingContent newContent)', 'strict void'),
  \ dotnet#method('get_VisualContentBounds(', ')', '.method'),
  \ dotnet#method('get_VisualDescendantBounds(', ')', '.method'),
  \ dotnet#method('CalculateSubgraphBoundsInnerSpace(', ')', 'Rect'),
  \ dotnet#method('CalculateSubgraphRenderBoundsInnerSpace(', ')', 'Rect'),
  \ dotnet#method('CalculateSubgraphBoundsInnerSpace(', 'bool renderBounds)', 'strict'),
  \ dotnet#method('CalculateSubgraphBoundsOuterSpace(', ')', 'Rect'),
  \ dotnet#method('CalculateSubgraphRenderBoundsOuterSpace(', ')', 'Rect'),
  \ dotnet#method('FreeContent(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('AddRefOnChannelForCyclicBrush(', 'class ICyclicBrush cyclicBrush, DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('ReleaseOnChannelForCyclicBrush(', 'class ICyclicBrush cyclicBrush, DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('VerifyAPIReadOnly(', ')', 'void'),
  \ dotnet#method('VerifyAPIReadOnly(', 'class DependencyObject value)', 'void'),
  \ dotnet#method('VerifyAPIReadWrite(', ')', 'void'),
  \ dotnet#method('VerifyAPIReadWrite(', 'class DependencyObject value)', 'void'),
  \ dotnet#method('Precompute(', ')', 'void'),
  \ dotnet#method('PrecomputeContent(', ')', 'strict void'),
  \ dotnet#method('PrecomputeRecursive(', '[out] Rect& bboxSubgraph)', 'void'),
  \ dotnet#method('Render(', 'class RenderContext ctx, uint32 childIndex)', 'void'),
  \ dotnet#method('RenderRecursive(', 'class RenderContext ctx)', 'strict void'),
  \ dotnet#method('Enter(', ')', 'bool'),
  \ dotnet#method('Exit(', ')', 'void'),
  \ dotnet#method('InvalidateHitTestBounds(', ')', 'void'),
  \ dotnet#method('GetHitTestBounds(', ')', 'strict'),
  \ dotnet#method('HitTest(', 'Point point)', 'HitTestResult'),
  \ dotnet#method('HitTest(', 'Point point, bool include2DOn3D)', 'HitTestResult'),
  \ dotnet#method('HitTest(', 'class HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, HitTestParameters hitTestParameters)', 'void'),
  \ dotnet#method('HitTestPoint(', 'class HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, PointHitTestParameters pointParams)', 'HitTestResultBehavior'),
  \ dotnet#method('TransformToOuterSpace(', ')', 'GeneralTransform'),
  \ dotnet#method('HitTestGeometry(', 'class HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, GeometryHitTestParameters geometryParams)', 'HitTestResultBehavior'),
  \ dotnet#method('HitTestPointInternal(', 'class HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, PointHitTestParameters hitTestParameters)', 'strict'),
  \ dotnet#method('HitTestCore(', 'class PointHitTestParameters hitTestParameters)', 'family'),
  \ dotnet#method('HitTestCore(', 'class GeometryHitTestParameters hitTestParameters)', 'family'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('get_InternalVisualChildrenCount(', ')', 'int32'),
  \ dotnet#method('get_InternalVisual2DOr3DChildrenCount(', ')', 'strict int32'),
  \ dotnet#method('get_HasVisualChildren(', ')', 'bool'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'family'),
  \ dotnet#method('InternalGetVisualChild(', 'int32 index)', 'Visual'),
  \ dotnet#method('InternalGet2DOr3DVisualChild(', 'int32 index)', 'strict'),
  \ dotnet#method('InternalAddVisualChild(', 'class Visual child)', 'void'),
  \ dotnet#method('InternalRemoveVisualChild(', 'class Visual child)', 'void'),
  \ dotnet#method('AddVisualChild(', 'class Visual child)', 'void'),
  \ dotnet#method('RemoveVisualChild(', 'class Visual child)', 'void'),
  \ dotnet#method('InvalidateZOrder(', ')', 'void'),
  \ dotnet#method('get_TreeLevel(', ')', 'uint32'),
  \ dotnet#method('set_TreeLevel(', 'uint32 value)', 'void'),
  \ dotnet#method('get_VisualParent(', ')', 'DependencyObject'),
  \ dotnet#method('get_InternalVisualParent(', ')', '.method'),
  \ dotnet#method('InternalSetOffsetWorkaround(', 'VVisual offset)', 'void'),
  \ dotnet#method('InternalSetTransformWorkaround(', 'class Transform transform)', 'void'),
  \ dotnet#method('get_VisualTransform(', ')', 'famorassem'),
  \ dotnet#method('set_VisualTransform(', 'class Transform value)', 'void'),
  \ dotnet#method('get_VisualEffect(', ')', 'famorassem'),
  \ dotnet#method('set_VisualEffect(', 'class Effect value)', 'void'),
  \ dotnet#method('get_VisualEffectInternal(', ')', '.method'),
  \ dotnet#method('set_VisualEffectInternal(', 'class Effect value)', 'void'),
  \ dotnet#method('get_VisualBitmapEffect(', ')', 'famorassem'),
  \ dotnet#method('set_VisualBitmapEffect(', 'class BitmapEffect value)', 'void'),
  \ dotnet#method('get_VisualBitmapEffectInput(', ')', 'famorassem'),
  \ dotnet#method('set_VisualBitmapEffectInput(', 'class BitmapEffectInput value)', 'void'),
  \ dotnet#method('BitmapEffectEmulationChanged(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('get_BitmapEffectEmulationDisabled(', ')', 'bool'),
  \ dotnet#method('set_BitmapEffectEmulationDisabled(', 'bool value)', 'void'),
  \ dotnet#method('get_VisualBitmapEffectInternal(', ')', '.method'),
  \ dotnet#method('set_VisualBitmapEffectInternal(', 'class BitmapEffect value)', 'void'),
  \ dotnet#method('get_VisualBitmapEffectInputInternal(', ')', '.method'),
  \ dotnet#method('set_VisualBitmapEffectInputInternal(', 'class BitmapEffectInput value)', 'void'),
  \ dotnet#method('get_VisualCacheMode(', ')', 'famorassem'),
  \ dotnet#method('set_VisualCacheMode(', 'class CacheMode value)', 'void'),
  \ dotnet#method('get_VisualScrollableAreaClip(', ')', 'famorassem'),
  \ dotnet#method('set_VisualScrollableAreaClip(', 'Nullable value)', 'void'),
  \ dotnet#method('get_VisualClip(', ')', 'famorassem'),
  \ dotnet#method('set_VisualClip(', 'class Geometry value)', 'void'),
  \ dotnet#method('ChangeVisualClip(', 'class Geometry newClip, bool dontSetWhenClose)', 'void'),
  \ dotnet#method('get_VisualOffset(', ')', 'famorassem'),
  \ dotnet#method('set_VisualOffset(', 'VVisual value)', 'void'),
  \ dotnet#method('get_VisualOpacity(', ')', 'famorassem float64'),
  \ dotnet#method('set_VisualOpacity(', 'float64 value)', 'void'),
  \ dotnet#method('get_VisualEdgeMode(', ')', 'famorassem'),
  \ dotnet#method('set_VisualEdgeMode(', 'EdgeMode value)', 'void'),
  \ dotnet#method('get_VisualBitmapScalingMode(', ')', 'famorassem'),
  \ dotnet#method('set_VisualBitmapScalingMode(', 'BitmapScalingMode value)', 'void'),
  \ dotnet#method('get_VisualClearTypeHint(', ')', 'famorassem'),
  \ dotnet#method('set_VisualClearTypeHint(', 'ClearTypeHint value)', 'famorassem void'),
  \ dotnet#method('get_VisualTextRenderingMode(', ')', 'famorassem'),
  \ dotnet#method('set_VisualTextRenderingMode(', 'TextRenderingMode value)', 'famorassem void'),
  \ dotnet#method('get_VisualTextHintingMode(', ')', 'famorassem'),
  \ dotnet#method('set_VisualTextHintingMode(', 'TextHintingMode value)', 'famorassem void'),
  \ dotnet#method('get_VisualOpacityMask(', ')', 'famorassem'),
  \ dotnet#method('set_VisualOpacityMask(', 'class Brush value)', 'void'),
  \ dotnet#method('get_VisualXSnappingGuidelines(', ')', 'famorassem'),
  \ dotnet#method('set_VisualXSnappingGuidelines(', 'class DoubleCollection value)', 'void'),
  \ dotnet#method('get_VisualYSnappingGuidelines(', ')', 'famorassem'),
  \ dotnet#method('set_VisualYSnappingGuidelines(', 'class DoubleCollection value)', 'void'),
  \ dotnet#method('DisconnectAttachedResource(', 'VisualProxyFlags correspondingFlag, DUCE/IResource attachedResource)', 'void'),
  \ dotnet#method('GetDrawing(', ')', 'strict'),
  \ dotnet#method('FireOnVisualParentChanged(', 'class DependencyObject oldParent)', 'strict void'),
  \ dotnet#method('OnVisualParentChanged(', 'class DependencyObject oldParent)', 'famorassem void'),
  \ dotnet#method('OnVisualChildrenChanged(', 'class DependencyObject visualAdded, DependencyObject visualRemoved)', 'famorassem void'),
  \ dotnet#method('add_VisualAncestorChanged(', 'class Visual/AncestorChangedEventHandler value)', 'void'),
  \ dotnet#method('remove_VisualAncestorChanged(', 'class Visual/AncestorChangedEventHandler value)', 'void'),
  \ dotnet#method('ProcessAncestorChangedNotificationRecursive(', 'class DependencyObject e, AncestorChangedEventArgs args)', 'static void'),
  \ dotnet#method('IsAncestorOf(', 'class DependencyObject descendant)', 'bool'),
  \ dotnet#method('IsDescendantOf(', 'class DependencyObject ancestor)', 'bool'),
  \ dotnet#method('SetFlagsToRoot(', 'bool value, VisualFlags flag)', 'void'),
  \ dotnet#method('FindFirstAncestorWithFlagsAnd(', 'VisualFlags flag)', 'DependencyObject'),
  \ dotnet#method('FindCommonVisualAncestor(', 'class DependencyObject otherVisual)', 'DependencyObject'),
  \ dotnet#method('TransformToAncestor(', 'class Visual ancestor)', 'GeneralTransform'),
  \ dotnet#method('TransformToAncestor(', 'class Visual3D ancestor)', 'GeneralTransform2DTo3D'),
  \ dotnet#method('TransformToDescendant(', 'class Visual descendant)', 'GeneralTransform'),
  \ dotnet#method('TransformToVisual(', 'class Visual visual)', 'GeneralTransform'),
  \ dotnet#method('TrySimpleTransformToAncestor(', 'class Visual ancestor, bool inverse, [out] GeneralTransform& generalTransform, [out] Matrix& simpleTransform)', 'bool'),
  \ dotnet#method('TrySimpleTransformToAncestor(', 'class Visual3D ancestor, [out] GeneralTransform2DTo3D& transformTo3D)', 'bool'),
  \ dotnet#method('PointToScreen(', 'Point point)', 'Point'),
  \ dotnet#method('PointFromScreen(', 'Point point)', 'Point'),
  \ dotnet#method('get_ClipChangedHandler(', ')', '.method'),
  \ dotnet#method('ClipChanged(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('get_ScrollableAreaClipChangedHandler(', ')', '.method'),
  \ dotnet#method('ScrollableAreaClipChanged(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('get_TransformChangedHandler(', ')', '.method'),
  \ dotnet#method('TransformChanged(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('get_EffectChangedHandler(', ')', '.method'),
  \ dotnet#method('EffectChanged(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('get_CacheModeChangedHandler(', ')', '.method'),
  \ dotnet#method('CacheModeChanged(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('get_GuidelinesChangedHandler(', ')', '.method'),
  \ dotnet#method('GuidelinesChanged(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('get_OpacityMaskChangedHandler(', ')', '.method'),
  \ dotnet#method('OpacityMaskChanged(', 'object sender, EventArgs e)', 'void'),
  \ dotnet#method('get_ContentsChangedHandler(', ')', '.method'),
  \ dotnet#method('ContentsChanged(', 'object sender, EventArgs e)', 'strict void'),
  \ dotnet#method('SetFlagsOnAllChannels(', 'bool value, VisualProxyFlags flagsToChange)', 'void'),
  \ dotnet#method('SetFlags(', 'class DUCE/Channel channel, bool value, VisualProxyFlags flagsToChange)', 'void'),
  \ dotnet#method('SetFlags(', 'bool value, VisualFlags flags)', 'void'),
  \ dotnet#method('CheckFlagsOnAllChannels(', 'VisualProxyFlags flagsToCheck)', 'bool'),
  \ dotnet#method('CheckFlagsAnd(', 'class DUCE/Channel channel, VisualProxyFlags flagsToCheck)', 'bool'),
  \ dotnet#method('CheckFlagsAnd(', 'VisualFlags flags)', 'bool'),
  \ dotnet#method('CheckFlagsOr(', 'class DUCE/Channel channel, VisualProxyFlags flagsToCheck)', 'bool'),
  \ dotnet#method('CheckFlagsOr(', 'VisualFlags flags)', 'bool'),
  \ dotnet#method('SetTreeBits(', 'class DependencyObject e, VisualFlags treeFlag, VisualFlags nodeFlag)', 'static void'),
  \ dotnet#method('ClearTreeBits(', 'class DependencyObject e, VisualFlags treeFlag, VisualFlags nodeFlag)', 'static void'),
  \ dotnet#method('PropagateFlags(', 'class Visual e, VisualFlags flags, VisualProxyFlags proxyFlags)', 'static void'),
  \ dotnet#method('PropagateChangedFlags(', ')', 'void'),
  \ dotnet#method('Visual(', ')', 'static void .'),
  \ dotnet#event('VisualAncestorChanged', 'Visual/AncestorChangedEventHandler'),
  \ dotnet#prop('IsVisualChildrenIterationInProgress', 'bool'),
  \ dotnet#prop('IsRootElement', 'bool'),
  \ dotnet#prop('VisualContentBounds', 'Rect'),
  \ dotnet#prop('VisualDescendantBounds', 'Rect'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ dotnet#prop('InternalVisualChildrenCount', 'int32'),
  \ dotnet#prop('InternalVisual2DOr3DChildrenCount', 'int32'),
  \ dotnet#prop('HasVisualChildren', 'bool'),
  \ dotnet#prop('TreeLevel', 'uint32'),
  \ dotnet#prop('VisualParent', 'DependencyObject'),
  \ dotnet#prop('InternalVisualParent', 'DependencyObject'),
  \ dotnet#prop('VisualTransform', 'Transform'),
  \ dotnet#prop('VisualEffect', 'Effect'),
  \ dotnet#prop('VisualEffectInternal', 'Effect'),
  \ dotnet#prop('VisualBitmapEffect', 'BitmapEffect'),
  \ dotnet#prop('VisualBitmapEffectInput', 'BitmapEffectInput'),
  \ dotnet#prop('BitmapEffectEmulationDisabled', 'bool'),
  \ dotnet#prop('VisualBitmapEffectInternal', 'BitmapEffect'),
  \ dotnet#prop('VisualBitmapEffectInputInternal', 'BitmapEffectInput'),
  \ dotnet#prop('VisualCacheMode', 'CacheMode'),
  \ dotnet#prop('VisualScrollableAreaClip', 'Nullable'),
  \ dotnet#prop('VisualClip', 'Geometry'),
  \ dotnet#prop('VisualOffset', 'VVisual'),
  \ dotnet#prop('VisualOpacity', 'float64'),
  \ dotnet#prop('VisualEdgeMode', 'EdgeMode'),
  \ dotnet#prop('VisualBitmapScalingMode', 'BitmapScalingMode'),
  \ dotnet#prop('VisualClearTypeHint', 'ClearTypeHint'),
  \ dotnet#prop('VisualTextRenderingMode', 'TextRenderingMode'),
  \ dotnet#prop('VisualTextHintingMode', 'TextHintingMode'),
  \ dotnet#prop('VisualOpacityMask', 'Brush'),
  \ dotnet#prop('VisualXSnappingGuidelines', 'DoubleCollection'),
  \ dotnet#prop('VisualYSnappingGuidelines', 'DoubleCollection'),
  \ dotnet#prop('ClipChangedHandler', 'EventHandler'),
  \ dotnet#prop('ScrollableAreaClipChangedHandler', 'EventHandler'),
  \ dotnet#prop('TransformChangedHandler', 'EventHandler'),
  \ dotnet#prop('EffectChangedHandler', 'EventHandler'),
  \ dotnet#prop('CacheModeChangedHandler', 'EventHandler'),
  \ dotnet#prop('GuidelinesChangedHandler', 'EventHandler'),
  \ dotnet#prop('OpacityMaskChangedHandler', 'EventHandler'),
  \ dotnet#prop('ContentsChangedHandler', 'EventHandler'),
  \ ])

call dotnet#class('ContainerVisual', 'Visual', [ 
  \ dotnet#method('ContainerVisual(', ')', 'void'),
  \ dotnet#method('get_Children(', ')', 'VisualCollection'),
  \ dotnet#method('get_Parent(', ')', 'DependencyObject'),
  \ dotnet#method('get_Clip(', ')', 'Geometry'),
  \ dotnet#method('set_Clip(', 'class Geometry value)', 'void'),
  \ dotnet#method('get_Opacity(', ')', 'float64'),
  \ dotnet#method('set_Opacity(', 'float64 value)', 'void'),
  \ dotnet#method('get_OpacityMask(', ')', 'Brush'),
  \ dotnet#method('set_OpacityMask(', 'class Brush value)', 'void'),
  \ dotnet#method('get_CacheMode(', ')', 'CacheMode'),
  \ dotnet#method('set_CacheMode(', 'class CacheMode value)', 'void'),
  \ dotnet#method('get_BitmapEffect(', ')', 'BitmapEffect'),
  \ dotnet#method('set_BitmapEffect(', 'class BitmapEffect value)', 'void'),
  \ dotnet#method('get_BitmapEffectInput(', ')', 'BitmapEffectInput'),
  \ dotnet#method('set_BitmapEffectInput(', 'class BitmapEffectInput value)', 'void'),
  \ dotnet#method('get_Effect(', ')', 'Effect'),
  \ dotnet#method('set_Effect(', 'class Effect value)', 'void'),
  \ dotnet#method('get_XSnappingGuidelines(', ')', 'DoubleCollection'),
  \ dotnet#method('set_XSnappingGuidelines(', 'class DoubleCollection value)', 'void'),
  \ dotnet#method('get_YSnappingGuidelines(', ')', 'DoubleCollection'),
  \ dotnet#method('set_YSnappingGuidelines(', 'class DoubleCollection value)', 'void'),
  \ dotnet#method('HitTest(', 'Point point)', 'HitTestResult'),
  \ dotnet#method('HitTest(', 'class HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, HitTestParameters hitTestParameters)', 'void'),
  \ dotnet#method('get_ContentBounds(', ')', 'Rect'),
  \ dotnet#method('get_Transform(', ')', 'Transform'),
  \ dotnet#method('set_Transform(', 'class Transform value)', 'void'),
  \ dotnet#method('get_Offset(', ')', 'VContainerVisual'),
  \ dotnet#method('set_Offset(', 'VContainerVisual value)', 'void'),
  \ dotnet#method('get_DescendantBounds(', ')', 'Rect'),
  \ dotnet#method('GetVisualChild(', 'int32 index)', 'family'),
  \ dotnet#method('get_VisualChildrenCount(', ')', 'int32'),
  \ dotnet#prop('Children', 'VisualCollection'),
  \ dotnet#prop('Parent', 'DependencyObject'),
  \ dotnet#prop('Clip', 'Geometry'),
  \ dotnet#prop('Opacity', 'float64'),
  \ dotnet#prop('OpacityMask', 'Brush'),
  \ dotnet#prop('CacheMode', 'CacheMode'),
  \ dotnet#prop('BitmapEffect', 'BitmapEffect'),
  \ dotnet#prop('BitmapEffectInput', 'BitmapEffectInput'),
  \ dotnet#prop('Effect', 'Effect'),
  \ dotnet#prop('XSnappingGuidelines', 'DoubleCollection'),
  \ dotnet#prop('YSnappingGuidelines', 'DoubleCollection'),
  \ dotnet#prop('ContentBounds', 'Rect'),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('Offset', 'VContainerVisual'),
  \ dotnet#prop('DescendantBounds', 'Rect'),
  \ dotnet#prop('VisualChildrenCount', 'int32'),
  \ ])

call dotnet#class('DrawingVisual', 'ContainerVisual', [ 
  \ dotnet#method('HitTestCore(', 'class PointHitTestParameters hitTestParameters)', 'HitTestResult'),
  \ dotnet#method('HitTestCore(', 'class GeometryHitTestParameters hitTestParameters)', 'GeometryHitTestResult'),
  \ dotnet#method('RenderOpen(', ')', 'DrawingContext'),
  \ dotnet#method('RenderClose(', 'class IDrawingContent newContent)', 'strict void'),
  \ dotnet#method('FreeContent(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetContentBounds(', ')', 'strict'),
  \ dotnet#method('WalkContent(', 'class DrawingContextWalker walker)', 'void'),
  \ dotnet#method('RenderContent(', 'class RenderContext ctx, bool isOnChannel)', 'strict void'),
  \ dotnet#method('GetDrawing(', ')', 'strict'),
  \ dotnet#method('get_Drawing(', ')', 'DrawingGroup'),
  \ dotnet#method('DrawingVisual(', ')', 'void'),
  \ dotnet#prop('Drawing', 'DrawingGroup'),
  \ ])

call dotnet#class('StreamGeometryContext', 'DispatcherObject', [ 
  \ dotnet#method('StreamGeometryContext(', ')', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('BeginFigure(', 'Point startPoint, bool isFilled, bool isClosed)', 'abstract void'),
  \ dotnet#method('LineTo(', 'Point point, bool isStroked, bool isSmoothJoin)', 'abstract void'),
  \ dotnet#method('QuadraticBezierTo(', 'Point point1, Point point2, bool isStroked, bool isSmoothJoin)', 'abstract void'),
  \ dotnet#method('BezierTo(', 'Point point1, Point point2, Point point3, bool isStroked, bool isSmoothJoin)', 'abstract void'),
  \ dotnet#method('PolyLineTo(', 'class IList points, bool isStroked, bool isSmoothJoin)', 'abstract void'),
  \ dotnet#method('PolyQuadraticBezierTo(', 'class IList points, bool isStroked, bool isSmoothJoin)', 'abstract void'),
  \ dotnet#method('PolyBezierTo(', 'class IList points, bool isStroked, bool isSmoothJoin)', 'abstract void'),
  \ dotnet#method('ArcTo(', 'Point point, Size size, float64 rotationAngle, bool isLargeArc, SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin)', 'abstract void'),
  \ dotnet#method('DisposeCore(', ')', 'strict void'),
  \ dotnet#method('SetClosedState(', 'bool closed)', 'abstract strict void'),
  \ ])

call dotnet#class('GeneralTransform', 'Animatable', [ 
  \ dotnet#method('TryTransform(', 'Point inPoint, [out] Point& result)', 'abstract bool'),
  \ dotnet#method('Transform(', 'Point point)', 'Point'),
  \ dotnet#method('TransformBounds(', 'Rect rect)', 'abstract'),
  \ dotnet#method('get_Inverse(', ')', 'abstract'),
  \ dotnet#method('get_AffineTransform(', ')', 'strict'),
  \ dotnet#method('Clone(', ')', 'GeneralTransform'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeneralTransform'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('GeneralTransform(', ')', 'void'),
  \ dotnet#prop('Inverse', 'GeneralTransform'),
  \ dotnet#prop('AffineTransform', 'Transform'),
  \ ])

call dotnet#class('HostVisual', 'ContainerVisual', [ 
  \ dotnet#method('HostVisual(', ')', 'void'),
  \ dotnet#method('HitTestCore(', 'class PointHitTestParameters hitTestParameters)', 'HitTestResult'),
  \ dotnet#method('HitTestCore(', 'class GeometryHitTestParameters hitTestParameters)', 'GeometryHitTestResult'),
  \ dotnet#method('GetContentBounds(', ')', 'strict'),
  \ dotnet#method('RenderContent(', 'class RenderContext ctx, bool isOnChannel)', 'strict void'),
  \ dotnet#method('FreeContent(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('BeginHosting(', 'class VisualTarget target)', 'void'),
  \ dotnet#method('EndHosting(', ')', 'void'),
  \ dotnet#method('DoHandleDuplication(', 'object channel)', 'object'),
  \ ])

call dotnet#class('ImageSource', 'Animatable', [ 
  \ dotnet#method('Clone(', ')', 'ImageSource'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ImageSource'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('ImageSource(', ')', 'void'),
  \ dotnet#method('get_Width(', ')', 'abstract float64'),
  \ dotnet#method('get_Height(', ')', 'abstract float64'),
  \ dotnet#method('get_Metadata(', ')', 'abstract'),
  \ dotnet#method('get_Size(', ')', 'strict'),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('PixelsToDIPs(', 'float64 dpi, int32 pixels)', 'static float64'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Metadata', 'ImageMetadata'),
  \ dotnet#prop('Size', 'Size'),
  \ ])

call dotnet#class('CompositionTarget', 'DispatcherObject', [ 
  \ dotnet#field('value__', 'uint32'),
  \ dotnet#field('_contentRoot', 'DUCE/MultiChannelResource'),
  \ dotnet#method('CompositionTarget(', ')', 'void'),
  \ dotnet#method('CreateUCEResources(', 'class DUCE/Channel channel, DUCE/Channel outOfBandChannel)', 'strict void'),
  \ dotnet#method('ReleaseUCEResources(', 'class DUCE/Channel channel, DUCE/Channel outOfBandChannel)', 'strict void'),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('get_IsDisposed(', ')', 'bool'),
  \ dotnet#method('get_RootVisual(', ')', ''),
  \ dotnet#method('set_RootVisual(', 'class Visual value)', 'void'),
  \ dotnet#method('get_TransformToDevice(', ')', 'abstract'),
  \ dotnet#method('get_TransformFromDevice(', ')', 'abstract'),
  \ dotnet#method('StateChangedCallback(', 'object arg)', 'object'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel, DUCE/Channel outOfBandChannel)', 'void '),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel, DUCE/Channel outOfBandChannel)', 'void '),
  \ dotnet#method('Render(', 'bool inResize, DUCE/Channel channel)', 'void '),
  \ dotnet#method('get_WorldTransform(', ')', '.method'),
  \ dotnet#method('get_WorldClipBounds(', ')', '.method'),
  \ dotnet#method('VerifyAPIReadOnly(', ')', 'void'),
  \ dotnet#method('VerifyAPIReadWrite(', ')', 'void'),
  \ dotnet#method('add_Rendering(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_Rendering(', 'class EventHandler value)', 'static void'),
  \ dotnet#event('Rendering', 'EventHandler'),
  \ dotnet#prop('IsDisposed', 'bool'),
  \ dotnet#prop('RootVisual', 'Visual'),
  \ dotnet#prop('TransformToDevice', 'Matrix'),
  \ dotnet#prop('TransformFromDevice', 'Matrix'),
  \ dotnet#prop('WorldTransform', 'Matrix'),
  \ dotnet#prop('WorldClipBounds', 'Rect'),
  \ ])

call dotnet#class('PathSegment', 'Animatable', [ 
  \ dotnet#method('Clone(', ')', 'PathSegment'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PathSegment'),
  \ dotnet#method('get_IsStroked(', ')', 'bool'),
  \ dotnet#method('set_IsStroked(', 'bool value)', 'void'),
  \ dotnet#method('get_IsSmoothJoin(', ')', 'bool'),
  \ dotnet#method('set_IsSmoothJoin(', 'bool value)', 'void'),
  \ dotnet#method('PathSegment(', ')', 'void'),
  \ dotnet#method('AddToFigure(', 'Matrix matrix, PathFigure figure, Point& current)', 'abstract strict void'),
  \ dotnet#method('IsEmpty(', ')', 'strict bool'),
  \ dotnet#method('IsCurved(', ')', 'abstract strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'abstract strict string'),
  \ dotnet#method('SerializeData(', 'class StreamGeometryContext ctx)', 'abstract strict void'),
  \ dotnet#method('PathSegment(', ')', 'static void .'),
  \ dotnet#prop('IsStroked', 'bool'),
  \ dotnet#prop('IsSmoothJoin', 'bool'),
  \ ])

call dotnet#class('ArcSegment', 'PathSegment', [ 
  \ dotnet#method('ArcSegment(', ')', 'void'),
  \ dotnet#method('ArcSegment(', 'Point point, Size size, float64 rotationAngle, bool isLargeArc, SweepDirection sweepDirection, bool isStroked)', 'void'),
  \ dotnet#method('AddToFigure(', 'Matrix matrix, PathFigure figure, Point& current)', 'strict void'),
  \ dotnet#method('SerializeData(', 'class StreamGeometryContext ctx)', 'strict void'),
  \ dotnet#method('IsCurved(', ')', 'strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('Clone(', ')', 'ArcSegment'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ArcSegment'),
  \ dotnet#method('get_Point(', ')', 'Point'),
  \ dotnet#method('set_Point(', 'Point value)', 'void'),
  \ dotnet#method('get_Size(', ')', 'Size'),
  \ dotnet#method('set_Size(', 'Size value)', 'void'),
  \ dotnet#method('get_RotationAngle(', ')', 'float64'),
  \ dotnet#method('set_RotationAngle(', 'float64 value)', 'void'),
  \ dotnet#method('get_IsLargeArc(', ')', 'bool'),
  \ dotnet#method('set_IsLargeArc(', 'bool value)', 'void'),
  \ dotnet#method('get_SweepDirection(', ')', 'SweepDirection'),
  \ dotnet#method('set_SweepDirection(', 'SweepDirection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('ArcSegment(', ')', 'static void .'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Point', 'Point'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('RotationAngle', 'float64'),
  \ dotnet#prop('IsLargeArc', 'bool'),
  \ dotnet#prop('SweepDirection', 'SweepDirection'),
  \ ])

call dotnet#class('BezierSegment', 'PathSegment', [ 
  \ dotnet#method('BezierSegment(', ')', 'void'),
  \ dotnet#method('BezierSegment(', 'Point point1, Point point2, Point point3, bool isStroked)', 'void'),
  \ dotnet#method('BezierSegment(', 'Point point1, Point point2, Point point3, bool isStroked, bool isSmoothJoin)', 'void'),
  \ dotnet#method('AddToFigure(', 'Matrix matrix, PathFigure figure, Point& current)', 'strict void'),
  \ dotnet#method('SerializeData(', 'class StreamGeometryContext ctx)', 'strict void'),
  \ dotnet#method('IsCurved(', ')', 'strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('Clone(', ')', 'BezierSegment'),
  \ dotnet#method('CloneCurrentValue(', ')', 'BezierSegment'),
  \ dotnet#method('get_Point1(', ')', 'Point'),
  \ dotnet#method('set_Point1(', 'Point value)', 'void'),
  \ dotnet#method('get_Point2(', ')', 'Point'),
  \ dotnet#method('set_Point2(', 'Point value)', 'void'),
  \ dotnet#method('get_Point3(', ')', 'Point'),
  \ dotnet#method('set_Point3(', 'Point value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('BezierSegment(', ')', 'static void .'),
  \ dotnet#prop('Point1', 'Point'),
  \ dotnet#prop('Point2', 'Point'),
  \ dotnet#prop('Point3', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('CacheMode', 'Animatable', [ 
  \ dotnet#method('CacheMode(', ')', 'void'),
  \ dotnet#method('Parse(', 'string value)', 'static CacheMode'),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('Clone(', ')', 'CacheMode'),
  \ dotnet#method('CloneCurrentValue(', ')', 'CacheMode'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ ])

call dotnet#class('BitmapCache', 'CacheMode', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('BitmapCache(', ')', 'void'),
  \ dotnet#method('BitmapCache(', 'float64 renderAtScale)', 'void'),
  \ dotnet#method('Clone(', ')', 'BitmapCache'),
  \ dotnet#method('CloneCurrentValue(', ')', 'BitmapCache'),
  \ dotnet#method('get_RenderAtScale(', ')', 'float64'),
  \ dotnet#method('set_RenderAtScale(', 'float64 value)', 'void'),
  \ dotnet#method('get_SnapsToDevicePixels(', ')', 'bool'),
  \ dotnet#method('set_SnapsToDevicePixels(', 'bool value)', 'void'),
  \ dotnet#method('get_EnableClearType(', ')', 'bool'),
  \ dotnet#method('set_EnableClearType(', 'bool value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('BitmapCache(', ')', 'static void .'),
  \ dotnet#prop('RenderAtScale', 'float64'),
  \ dotnet#prop('SnapsToDevicePixels', 'bool'),
  \ dotnet#prop('EnableClearType', 'bool'),
  \ ])

call dotnet#class('Brush', 'Animatable', [ 
  \ dotnet#method('Brush(', ')', 'void'),
  \ dotnet#method('Parse(', 'string value, ITypeDescriptorContext context)', 'static Brush'),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('Clone(', ')', 'Brush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Brush'),
  \ dotnet#method('get_Opacity(', ')', 'float64'),
  \ dotnet#method('set_Opacity(', 'float64 value)', 'void'),
  \ dotnet#method('get_Transform(', ')', 'Transform'),
  \ dotnet#method('set_Transform(', 'class Transform value)', 'void'),
  \ dotnet#method('get_RelativeTransform(', ')', 'Transform'),
  \ dotnet#method('set_RelativeTransform(', 'class Transform value)', 'void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('Brush(', ')', 'static void .'),
  \ dotnet#prop('Opacity', 'float64'),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('RelativeTransform', 'Transform'),
  \ ])

call dotnet#class('BitmapCacheBrush', 'Brush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('BitmapCacheBrush(', ')', 'void'),
  \ dotnet#method('BitmapCacheBrush(', 'class Visual visual)', 'void'),
  \ dotnet#method('FireOnChanged(', ')', 'void '),
  \ dotnet#method('RenderForCyclicBrush(', 'class DUCE/Channel channel, bool skipChannelCheck)', 'void '),
  \ dotnet#method('AddRefResource(', 'class Visual visual, DUCE/Channel channel)', 'void'),
  \ dotnet#method('ReleaseResource(', 'class Visual visual, DUCE/Channel channel)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('Enter(', ')', 'bool'),
  \ dotnet#method('Exit(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'BitmapCacheBrush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'BitmapCacheBrush'),
  \ dotnet#method('get_Target(', ')', 'Visual'),
  \ dotnet#method('set_Target(', 'class Visual value)', 'void'),
  \ dotnet#method('get_BitmapCache(', ')', 'BitmapCache'),
  \ dotnet#method('set_BitmapCache(', 'class BitmapCache value)', 'void'),
  \ dotnet#method('get_AutoLayoutContent(', ')', 'bool'),
  \ dotnet#method('set_AutoLayoutContent(', 'bool value)', 'void'),
  \ dotnet#method('get_InternalTarget(', ')', '.method'),
  \ dotnet#method('set_InternalTarget(', 'class Visual value)', 'void'),
  \ dotnet#method('get_AutoWrapTarget(', ')', 'bool'),
  \ dotnet#method('set_AutoWrapTarget(', 'bool value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('BitmapCacheBrush(', ')', 'static void .'),
  \ dotnet#prop('Target', 'Visual'),
  \ dotnet#prop('BitmapCache', 'BitmapCache'),
  \ dotnet#prop('AutoLayoutContent', 'bool'),
  \ dotnet#prop('InternalTarget', 'Visual'),
  \ dotnet#prop('AutoWrapTarget', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('DrawingContext', 'DispatcherObject', [ 
  \ dotnet#method('DrawingContext(', ')', 'void'),
  \ dotnet#method('DrawText(', 'class FormattedText formattedText, Point origin)', 'void'),
  \ dotnet#method('Close(', ')', 'abstract void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('DisposeCore(', ')', 'abstract void'),
  \ dotnet#method('VerifyApiNonstructuralChange(', ')', 'void'),
  \ dotnet#method('DrawLine(', 'class Pen pen, Point point0, Point point1)', 'abstract void'),
  \ dotnet#method('DrawLine(', 'class Pen pen, Point point0, AnimationClock point0Animations, Point point1, AnimationClock point1Animations)', 'abstract void'),
  \ dotnet#method('DrawRectangle(', 'class Brush brush, Pen pen, Rect rectangle)', 'abstract void'),
  \ dotnet#method('DrawRectangle(', 'class Brush brush, Pen pen, Rect rectangle, AnimationClock rectangleAnimations)', 'abstract void'),
  \ dotnet#method('DrawRoundedRectangle(', 'class Brush brush, Pen pen, Rect rectangle, float64 radiusX, float64 radiusY)', 'abstract void'),
  \ dotnet#method('DrawRoundedRectangle(', 'class Brush brush, Pen pen, Rect rectangle, AnimationClock rectangleAnimations, float64 radiusX, AnimationClock radiusXAnimations, float64 radiusY, AnimationClock radiusYAnimations)', 'abstract void'),
  \ dotnet#method('DrawEllipse(', 'class Brush brush, Pen pen, Point center, float64 radiusX, float64 radiusY)', 'abstract void'),
  \ dotnet#method('DrawEllipse(', 'class Brush brush, Pen pen, Point center, AnimationClock centerAnimations, float64 radiusX, AnimationClock radiusXAnimations, float64 radiusY, AnimationClock radiusYAnimations)', 'abstract void'),
  \ dotnet#method('DrawGeometry(', 'class Brush brush, Pen pen, Geometry geometry)', 'abstract void'),
  \ dotnet#method('DrawImage(', 'class ImageSource imageSource, Rect rectangle)', 'abstract void'),
  \ dotnet#method('DrawImage(', 'class ImageSource imageSource, Rect rectangle, AnimationClock rectangleAnimations)', 'abstract void'),
  \ dotnet#method('DrawGlyphRun(', 'class Brush foregroundBrush, GlyphRun glyphRun)', 'abstract void'),
  \ dotnet#method('DrawDrawing(', 'class Drawing drawing)', 'abstract void'),
  \ dotnet#method('DrawVideo(', 'class MediaPlayer player, Rect rectangle)', 'abstract void'),
  \ dotnet#method('DrawVideo(', 'class MediaPlayer player, Rect rectangle, AnimationClock rectangleAnimations)', 'abstract void'),
  \ dotnet#method('PushClip(', 'class Geometry clipGeometry)', 'abstract void'),
  \ dotnet#method('PushOpacityMask(', 'class Brush opacityMask)', 'abstract void'),
  \ dotnet#method('PushOpacity(', 'float64 opacity)', 'abstract void'),
  \ dotnet#method('PushOpacity(', 'float64 opacity, AnimationClock opacityAnimations)', 'abstract void'),
  \ dotnet#method('PushTransform(', 'class Transform transform)', 'abstract void'),
  \ dotnet#method('PushGuidelineSet(', 'class GuidelineSet guidelines)', 'abstract void'),
  \ dotnet#method('PushGuidelineY1(', 'float64 coordinate)', 'abstract strict void'),
  \ dotnet#method('PushGuidelineY2(', 'float64 leadingCoordinate, float64 offsetToDrivenCoordinate)', 'abstract strict void'),
  \ dotnet#method('PushEffect(', 'class BitmapEffect effect, BitmapEffectInput effectInput)', 'abstract void'),
  \ dotnet#method('Pop(', ')', 'abstract void'),
  \ ])

call dotnet#class('Brushes', 'Object', [ 
  \ dotnet#method('get_AliceBlue(', ')', 'static'),
  \ dotnet#method('get_AntiqueWhite(', ')', 'static'),
  \ dotnet#method('get_Aqua(', ')', 'static'),
  \ dotnet#method('get_Aquamarine(', ')', 'static'),
  \ dotnet#method('get_Azure(', ')', 'static'),
  \ dotnet#method('get_Beige(', ')', 'static'),
  \ dotnet#method('get_Bisque(', ')', 'static'),
  \ dotnet#method('get_Black(', ')', 'static'),
  \ dotnet#method('get_BlanchedAlmond(', ')', 'static'),
  \ dotnet#method('get_Blue(', ')', 'static'),
  \ dotnet#method('get_BlueViolet(', ')', 'static'),
  \ dotnet#method('get_Brown(', ')', 'static'),
  \ dotnet#method('get_BurlyWood(', ')', 'static'),
  \ dotnet#method('get_CadetBlue(', ')', 'static'),
  \ dotnet#method('get_Chartreuse(', ')', 'static'),
  \ dotnet#method('get_Chocolate(', ')', 'static'),
  \ dotnet#method('get_Coral(', ')', 'static'),
  \ dotnet#method('get_CornflowerBlue(', ')', 'static'),
  \ dotnet#method('get_Cornsilk(', ')', 'static'),
  \ dotnet#method('get_Crimson(', ')', 'static'),
  \ dotnet#method('get_Cyan(', ')', 'static'),
  \ dotnet#method('get_DarkBlue(', ')', 'static'),
  \ dotnet#method('get_DarkCyan(', ')', 'static'),
  \ dotnet#method('get_DarkGoldenrod(', ')', 'static'),
  \ dotnet#method('get_DarkGray(', ')', 'static'),
  \ dotnet#method('get_DarkGreen(', ')', 'static'),
  \ dotnet#method('get_DarkKhaki(', ')', 'static'),
  \ dotnet#method('get_DarkMagenta(', ')', 'static'),
  \ dotnet#method('get_DarkOliveGreen(', ')', 'static'),
  \ dotnet#method('get_DarkOrange(', ')', 'static'),
  \ dotnet#method('get_DarkOrchid(', ')', 'static'),
  \ dotnet#method('get_DarkRed(', ')', 'static'),
  \ dotnet#method('get_DarkSalmon(', ')', 'static'),
  \ dotnet#method('get_DarkSeaGreen(', ')', 'static'),
  \ dotnet#method('get_DarkSlateBlue(', ')', 'static'),
  \ dotnet#method('get_DarkSlateGray(', ')', 'static'),
  \ dotnet#method('get_DarkTurquoise(', ')', 'static'),
  \ dotnet#method('get_DarkViolet(', ')', 'static'),
  \ dotnet#method('get_DeepPink(', ')', 'static'),
  \ dotnet#method('get_DeepSkyBlue(', ')', 'static'),
  \ dotnet#method('get_DimGray(', ')', 'static'),
  \ dotnet#method('get_DodgerBlue(', ')', 'static'),
  \ dotnet#method('get_Firebrick(', ')', 'static'),
  \ dotnet#method('get_FloralWhite(', ')', 'static'),
  \ dotnet#method('get_ForestGreen(', ')', 'static'),
  \ dotnet#method('get_Fuchsia(', ')', 'static'),
  \ dotnet#method('get_Gainsboro(', ')', 'static'),
  \ dotnet#method('get_GhostWhite(', ')', 'static'),
  \ dotnet#method('get_Gold(', ')', 'static'),
  \ dotnet#method('get_Goldenrod(', ')', 'static'),
  \ dotnet#method('get_Gray(', ')', 'static'),
  \ dotnet#method('get_Green(', ')', 'static'),
  \ dotnet#method('get_GreenYellow(', ')', 'static'),
  \ dotnet#method('get_Honeydew(', ')', 'static'),
  \ dotnet#method('get_HotPink(', ')', 'static'),
  \ dotnet#method('get_IndianRed(', ')', 'static'),
  \ dotnet#method('get_Indigo(', ')', 'static'),
  \ dotnet#method('get_Ivory(', ')', 'static'),
  \ dotnet#method('get_Khaki(', ')', 'static'),
  \ dotnet#method('get_Lavender(', ')', 'static'),
  \ dotnet#method('get_LavenderBlush(', ')', 'static'),
  \ dotnet#method('get_LawnGreen(', ')', 'static'),
  \ dotnet#method('get_LemonChiffon(', ')', 'static'),
  \ dotnet#method('get_LightBlue(', ')', 'static'),
  \ dotnet#method('get_LightCoral(', ')', 'static'),
  \ dotnet#method('get_LightCyan(', ')', 'static'),
  \ dotnet#method('get_LightGoldenrodYellow(', ')', 'static'),
  \ dotnet#method('get_LightGray(', ')', 'static'),
  \ dotnet#method('get_LightGreen(', ')', 'static'),
  \ dotnet#method('get_LightPink(', ')', 'static'),
  \ dotnet#method('get_LightSalmon(', ')', 'static'),
  \ dotnet#method('get_LightSeaGreen(', ')', 'static'),
  \ dotnet#method('get_LightSkyBlue(', ')', 'static'),
  \ dotnet#method('get_LightSlateGray(', ')', 'static'),
  \ dotnet#method('get_LightSteelBlue(', ')', 'static'),
  \ dotnet#method('get_LightYellow(', ')', 'static'),
  \ dotnet#method('get_Lime(', ')', 'static'),
  \ dotnet#method('get_LimeGreen(', ')', 'static'),
  \ dotnet#method('get_Linen(', ')', 'static'),
  \ dotnet#method('get_Magenta(', ')', 'static'),
  \ dotnet#method('get_Maroon(', ')', 'static'),
  \ dotnet#method('get_MediumAquamarine(', ')', 'static'),
  \ dotnet#method('get_MediumBlue(', ')', 'static'),
  \ dotnet#method('get_MediumOrchid(', ')', 'static'),
  \ dotnet#method('get_MediumPurple(', ')', 'static'),
  \ dotnet#method('get_MediumSeaGreen(', ')', 'static'),
  \ dotnet#method('get_MediumSlateBlue(', ')', 'static'),
  \ dotnet#method('get_MediumSpringGreen(', ')', 'static'),
  \ dotnet#method('get_MediumTurquoise(', ')', 'static'),
  \ dotnet#method('get_MediumVioletRed(', ')', 'static'),
  \ dotnet#method('get_MidnightBlue(', ')', 'static'),
  \ dotnet#method('get_MintCream(', ')', 'static'),
  \ dotnet#method('get_MistyRose(', ')', 'static'),
  \ dotnet#method('get_Moccasin(', ')', 'static'),
  \ dotnet#method('get_NavajoWhite(', ')', 'static'),
  \ dotnet#method('get_Navy(', ')', 'static'),
  \ dotnet#method('get_OldLace(', ')', 'static'),
  \ dotnet#method('get_Olive(', ')', 'static'),
  \ dotnet#method('get_OliveDrab(', ')', 'static'),
  \ dotnet#method('get_Orange(', ')', 'static'),
  \ dotnet#method('get_OrangeRed(', ')', 'static'),
  \ dotnet#method('get_Orchid(', ')', 'static'),
  \ dotnet#method('get_PaleGoldenrod(', ')', 'static'),
  \ dotnet#method('get_PaleGreen(', ')', 'static'),
  \ dotnet#method('get_PaleTurquoise(', ')', 'static'),
  \ dotnet#method('get_PaleVioletRed(', ')', 'static'),
  \ dotnet#method('get_PapayaWhip(', ')', 'static'),
  \ dotnet#method('get_PeachPuff(', ')', 'static'),
  \ dotnet#method('get_Peru(', ')', 'static'),
  \ dotnet#method('get_Pink(', ')', 'static'),
  \ dotnet#method('get_Plum(', ')', 'static'),
  \ dotnet#method('get_PowderBlue(', ')', 'static'),
  \ dotnet#method('get_Purple(', ')', 'static'),
  \ dotnet#method('get_Red(', ')', 'static'),
  \ dotnet#method('get_RosyBrown(', ')', 'static'),
  \ dotnet#method('get_RoyalBlue(', ')', 'static'),
  \ dotnet#method('get_SaddleBrown(', ')', 'static'),
  \ dotnet#method('get_Salmon(', ')', 'static'),
  \ dotnet#method('get_SandyBrown(', ')', 'static'),
  \ dotnet#method('get_SeaGreen(', ')', 'static'),
  \ dotnet#method('get_SeaShell(', ')', 'static'),
  \ dotnet#method('get_Sienna(', ')', 'static'),
  \ dotnet#method('get_Silver(', ')', 'static'),
  \ dotnet#method('get_SkyBlue(', ')', 'static'),
  \ dotnet#method('get_SlateBlue(', ')', 'static'),
  \ dotnet#method('get_SlateGray(', ')', 'static'),
  \ dotnet#method('get_Snow(', ')', 'static'),
  \ dotnet#method('get_SpringGreen(', ')', 'static'),
  \ dotnet#method('get_SteelBlue(', ')', 'static'),
  \ dotnet#method('get_Tan(', ')', 'static'),
  \ dotnet#method('get_Teal(', ')', 'static'),
  \ dotnet#method('get_Thistle(', ')', 'static'),
  \ dotnet#method('get_Tomato(', ')', 'static'),
  \ dotnet#method('get_Transparent(', ')', 'static'),
  \ dotnet#method('get_Turquoise(', ')', 'static'),
  \ dotnet#method('get_Violet(', ')', 'static'),
  \ dotnet#method('get_Wheat(', ')', 'static'),
  \ dotnet#method('get_White(', ')', 'static'),
  \ dotnet#method('get_WhiteSmoke(', ')', 'static'),
  \ dotnet#method('get_Yellow(', ')', 'static'),
  \ dotnet#method('get_YellowGreen(', ')', 'static'),
  \ dotnet#method('Brushes(', ')', 'void'),
  \ dotnet#prop('AliceBlue', 'SolidColorBrush'),
  \ dotnet#prop('AntiqueWhite', 'SolidColorBrush'),
  \ dotnet#prop('Aqua', 'SolidColorBrush'),
  \ dotnet#prop('Aquamarine', 'SolidColorBrush'),
  \ dotnet#prop('Azure', 'SolidColorBrush'),
  \ dotnet#prop('Beige', 'SolidColorBrush'),
  \ dotnet#prop('Bisque', 'SolidColorBrush'),
  \ dotnet#prop('Black', 'SolidColorBrush'),
  \ dotnet#prop('BlanchedAlmond', 'SolidColorBrush'),
  \ dotnet#prop('Blue', 'SolidColorBrush'),
  \ dotnet#prop('BlueViolet', 'SolidColorBrush'),
  \ dotnet#prop('Brown', 'SolidColorBrush'),
  \ dotnet#prop('BurlyWood', 'SolidColorBrush'),
  \ dotnet#prop('CadetBlue', 'SolidColorBrush'),
  \ dotnet#prop('Chartreuse', 'SolidColorBrush'),
  \ dotnet#prop('Chocolate', 'SolidColorBrush'),
  \ dotnet#prop('Coral', 'SolidColorBrush'),
  \ dotnet#prop('CornflowerBlue', 'SolidColorBrush'),
  \ dotnet#prop('Cornsilk', 'SolidColorBrush'),
  \ dotnet#prop('Crimson', 'SolidColorBrush'),
  \ dotnet#prop('Cyan', 'SolidColorBrush'),
  \ dotnet#prop('DarkBlue', 'SolidColorBrush'),
  \ dotnet#prop('DarkCyan', 'SolidColorBrush'),
  \ dotnet#prop('DarkGoldenrod', 'SolidColorBrush'),
  \ dotnet#prop('DarkGray', 'SolidColorBrush'),
  \ dotnet#prop('DarkGreen', 'SolidColorBrush'),
  \ dotnet#prop('DarkKhaki', 'SolidColorBrush'),
  \ dotnet#prop('DarkMagenta', 'SolidColorBrush'),
  \ dotnet#prop('DarkOliveGreen', 'SolidColorBrush'),
  \ dotnet#prop('DarkOrange', 'SolidColorBrush'),
  \ dotnet#prop('DarkOrchid', 'SolidColorBrush'),
  \ dotnet#prop('DarkRed', 'SolidColorBrush'),
  \ dotnet#prop('DarkSalmon', 'SolidColorBrush'),
  \ dotnet#prop('DarkSeaGreen', 'SolidColorBrush'),
  \ dotnet#prop('DarkSlateBlue', 'SolidColorBrush'),
  \ dotnet#prop('DarkSlateGray', 'SolidColorBrush'),
  \ dotnet#prop('DarkTurquoise', 'SolidColorBrush'),
  \ dotnet#prop('DarkViolet', 'SolidColorBrush'),
  \ dotnet#prop('DeepPink', 'SolidColorBrush'),
  \ dotnet#prop('DeepSkyBlue', 'SolidColorBrush'),
  \ dotnet#prop('DimGray', 'SolidColorBrush'),
  \ dotnet#prop('DodgerBlue', 'SolidColorBrush'),
  \ dotnet#prop('Firebrick', 'SolidColorBrush'),
  \ dotnet#prop('FloralWhite', 'SolidColorBrush'),
  \ dotnet#prop('ForestGreen', 'SolidColorBrush'),
  \ dotnet#prop('Fuchsia', 'SolidColorBrush'),
  \ dotnet#prop('Gainsboro', 'SolidColorBrush'),
  \ dotnet#prop('GhostWhite', 'SolidColorBrush'),
  \ dotnet#prop('Gold', 'SolidColorBrush'),
  \ dotnet#prop('Goldenrod', 'SolidColorBrush'),
  \ dotnet#prop('Gray', 'SolidColorBrush'),
  \ dotnet#prop('Green', 'SolidColorBrush'),
  \ dotnet#prop('GreenYellow', 'SolidColorBrush'),
  \ dotnet#prop('Honeydew', 'SolidColorBrush'),
  \ dotnet#prop('HotPink', 'SolidColorBrush'),
  \ dotnet#prop('IndianRed', 'SolidColorBrush'),
  \ dotnet#prop('Indigo', 'SolidColorBrush'),
  \ dotnet#prop('Ivory', 'SolidColorBrush'),
  \ dotnet#prop('Khaki', 'SolidColorBrush'),
  \ dotnet#prop('Lavender', 'SolidColorBrush'),
  \ dotnet#prop('LavenderBlush', 'SolidColorBrush'),
  \ dotnet#prop('LawnGreen', 'SolidColorBrush'),
  \ dotnet#prop('LemonChiffon', 'SolidColorBrush'),
  \ dotnet#prop('LightBlue', 'SolidColorBrush'),
  \ dotnet#prop('LightCoral', 'SolidColorBrush'),
  \ dotnet#prop('LightCyan', 'SolidColorBrush'),
  \ dotnet#prop('LightGoldenrodYellow', 'SolidColorBrush'),
  \ dotnet#prop('LightGray', 'SolidColorBrush'),
  \ dotnet#prop('LightGreen', 'SolidColorBrush'),
  \ dotnet#prop('LightPink', 'SolidColorBrush'),
  \ dotnet#prop('LightSalmon', 'SolidColorBrush'),
  \ dotnet#prop('LightSeaGreen', 'SolidColorBrush'),
  \ dotnet#prop('LightSkyBlue', 'SolidColorBrush'),
  \ dotnet#prop('LightSlateGray', 'SolidColorBrush'),
  \ dotnet#prop('LightSteelBlue', 'SolidColorBrush'),
  \ dotnet#prop('LightYellow', 'SolidColorBrush'),
  \ dotnet#prop('Lime', 'SolidColorBrush'),
  \ dotnet#prop('LimeGreen', 'SolidColorBrush'),
  \ dotnet#prop('Linen', 'SolidColorBrush'),
  \ dotnet#prop('Magenta', 'SolidColorBrush'),
  \ dotnet#prop('Maroon', 'SolidColorBrush'),
  \ dotnet#prop('MediumAquamarine', 'SolidColorBrush'),
  \ dotnet#prop('MediumBlue', 'SolidColorBrush'),
  \ dotnet#prop('MediumOrchid', 'SolidColorBrush'),
  \ dotnet#prop('MediumPurple', 'SolidColorBrush'),
  \ dotnet#prop('MediumSeaGreen', 'SolidColorBrush'),
  \ dotnet#prop('MediumSlateBlue', 'SolidColorBrush'),
  \ dotnet#prop('MediumSpringGreen', 'SolidColorBrush'),
  \ dotnet#prop('MediumTurquoise', 'SolidColorBrush'),
  \ dotnet#prop('MediumVioletRed', 'SolidColorBrush'),
  \ dotnet#prop('MidnightBlue', 'SolidColorBrush'),
  \ dotnet#prop('MintCream', 'SolidColorBrush'),
  \ dotnet#prop('MistyRose', 'SolidColorBrush'),
  \ dotnet#prop('Moccasin', 'SolidColorBrush'),
  \ dotnet#prop('NavajoWhite', 'SolidColorBrush'),
  \ dotnet#prop('Navy', 'SolidColorBrush'),
  \ dotnet#prop('OldLace', 'SolidColorBrush'),
  \ dotnet#prop('Olive', 'SolidColorBrush'),
  \ dotnet#prop('OliveDrab', 'SolidColorBrush'),
  \ dotnet#prop('Orange', 'SolidColorBrush'),
  \ dotnet#prop('OrangeRed', 'SolidColorBrush'),
  \ dotnet#prop('Orchid', 'SolidColorBrush'),
  \ dotnet#prop('PaleGoldenrod', 'SolidColorBrush'),
  \ dotnet#prop('PaleGreen', 'SolidColorBrush'),
  \ dotnet#prop('PaleTurquoise', 'SolidColorBrush'),
  \ dotnet#prop('PaleVioletRed', 'SolidColorBrush'),
  \ dotnet#prop('PapayaWhip', 'SolidColorBrush'),
  \ dotnet#prop('PeachPuff', 'SolidColorBrush'),
  \ dotnet#prop('Peru', 'SolidColorBrush'),
  \ dotnet#prop('Pink', 'SolidColorBrush'),
  \ dotnet#prop('Plum', 'SolidColorBrush'),
  \ dotnet#prop('PowderBlue', 'SolidColorBrush'),
  \ dotnet#prop('Purple', 'SolidColorBrush'),
  \ dotnet#prop('Red', 'SolidColorBrush'),
  \ dotnet#prop('RosyBrown', 'SolidColorBrush'),
  \ dotnet#prop('RoyalBlue', 'SolidColorBrush'),
  \ dotnet#prop('SaddleBrown', 'SolidColorBrush'),
  \ dotnet#prop('Salmon', 'SolidColorBrush'),
  \ dotnet#prop('SandyBrown', 'SolidColorBrush'),
  \ dotnet#prop('SeaGreen', 'SolidColorBrush'),
  \ dotnet#prop('SeaShell', 'SolidColorBrush'),
  \ dotnet#prop('Sienna', 'SolidColorBrush'),
  \ dotnet#prop('Silver', 'SolidColorBrush'),
  \ dotnet#prop('SkyBlue', 'SolidColorBrush'),
  \ dotnet#prop('SlateBlue', 'SolidColorBrush'),
  \ dotnet#prop('SlateGray', 'SolidColorBrush'),
  \ dotnet#prop('Snow', 'SolidColorBrush'),
  \ dotnet#prop('SpringGreen', 'SolidColorBrush'),
  \ dotnet#prop('SteelBlue', 'SolidColorBrush'),
  \ dotnet#prop('Tan', 'SolidColorBrush'),
  \ dotnet#prop('Teal', 'SolidColorBrush'),
  \ dotnet#prop('Thistle', 'SolidColorBrush'),
  \ dotnet#prop('Tomato', 'SolidColorBrush'),
  \ dotnet#prop('Transparent', 'SolidColorBrush'),
  \ dotnet#prop('Turquoise', 'SolidColorBrush'),
  \ dotnet#prop('Violet', 'SolidColorBrush'),
  \ dotnet#prop('Wheat', 'SolidColorBrush'),
  \ dotnet#prop('White', 'SolidColorBrush'),
  \ dotnet#prop('WhiteSmoke', 'SolidColorBrush'),
  \ dotnet#prop('Yellow', 'SolidColorBrush'),
  \ dotnet#prop('YellowGreen', 'SolidColorBrush'),
  \ ])

call dotnet#class('Color', 'ValueType', [ 
  \ dotnet#field('a', 'float32'),
  \ dotnet#field('r', 'float32'),
  \ dotnet#field('g', 'float32'),
  \ dotnet#field('b', 'float32'),
  \ dotnet#field('a', 'uint8'),
  \ dotnet#field('r', 'uint8'),
  \ dotnet#field('g', 'uint8'),
  \ dotnet#field('b', 'uint8'),
  \ dotnet#field('context', 'ColorContext'),
  \ dotnet#field('scRgbColor', 'Color/MILColorF'),
  \ dotnet#field('sRgbColor', 'Color/MILColor'),
  \ dotnet#field('nativeColorValue', 'float32[]'),
  \ dotnet#field('isFromScRgb', 'bool'),
  \ dotnet#method('FromAValues(', 'float32 a, float32[] values, Uri profileUri)', 'static Color'),
  \ dotnet#method('FromValues(', 'float32[] values, Uri profileUri)', 'static Color'),
  \ dotnet#method('FromUInt32(', 'uint32 argb)', 'static Color'),
  \ dotnet#method('FromScRgb(', 'float32 a, float32 r, float32 g, float32 b)', 'static Color'),
  \ dotnet#method('FromArgb(', 'uint8 a, uint8 r, uint8 g, uint8 b)', 'static Color'),
  \ dotnet#method('FromRgb(', 'uint8 r, uint8 g, uint8 b)', 'static Color'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('AreClose(', 'Color color1, Color color2)', 'static bool'),
  \ dotnet#method('Clamp(', ')', 'void'),
  \ dotnet#method('GetNativeColorValues(', ')', 'float32[]'),
  \ dotnet#method('op_Addition(', 'Color color1, Color color2)', 'static'),
  \ dotnet#method('Add(', 'Color color1, Color color2)', 'static Color'),
  \ dotnet#method('op_Subtraction(', 'Color color1, Color color2)', 'static'),
  \ dotnet#method('Subtract(', 'Color color1, Color color2)', 'static Color'),
  \ dotnet#method('op_Multiply(', 'Color color, float32 coefficient)', 'static'),
  \ dotnet#method('Multiply(', 'Color color, float32 coefficient)', 'static Color'),
  \ dotnet#method('Equals(', 'Color color1, Color color2)', 'static bool'),
  \ dotnet#method('Equals(', 'Color color)', 'bool'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('op_Equality(', 'Color color1, Color color2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'Color color1, Color color2)', 'static bool'),
  \ dotnet#method('get_ColorContext(', ')', 'ColorContext'),
  \ dotnet#method('get_A(', ')', 'uint8'),
  \ dotnet#method('set_A(', 'uint8 value)', 'void'),
  \ dotnet#method('get_R(', ')', 'uint8'),
  \ dotnet#method('set_R(', 'uint8 value)', 'void'),
  \ dotnet#method('get_G(', ')', 'uint8'),
  \ dotnet#method('set_G(', 'uint8 value)', 'void'),
  \ dotnet#method('get_B(', ')', 'uint8'),
  \ dotnet#method('set_B(', 'uint8 value)', 'void'),
  \ dotnet#method('get_ScA(', ')', 'float32'),
  \ dotnet#method('set_ScA(', 'float32 value)', 'void'),
  \ dotnet#method('get_ScR(', ')', 'float32'),
  \ dotnet#method('set_ScR(', 'float32 value)', 'void'),
  \ dotnet#method('get_ScG(', ')', 'float32'),
  \ dotnet#method('set_ScG(', 'float32 value)', 'void'),
  \ dotnet#method('get_ScB(', ')', 'float32'),
  \ dotnet#method('set_ScB(', 'float32 value)', 'void'),
  \ dotnet#prop('ColorContext', 'ColorContext'),
  \ dotnet#prop('A', 'uint8'),
  \ dotnet#prop('R', 'uint8'),
  \ dotnet#prop('G', 'uint8'),
  \ dotnet#prop('B', 'uint8'),
  \ dotnet#prop('ScA', 'float32'),
  \ dotnet#prop('ScR', 'float32'),
  \ dotnet#prop('ScG', 'float32'),
  \ dotnet#prop('ScB', 'float32'),
  \ ])

call dotnet#class('ColorContext', 'Object', [ 
  \ dotnet#method('ColorContext(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'uint32& numContexts, int[] colorContextPtrs)', 'int32'),
  \ dotnet#method('BeginInvoke(', 'uint32& numContexts, int[] colorContextPtrs, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'uint32& numContexts, IAsyncResult result)', 'int32'),
  \ dotnet#field('value__', 'int32'),
  \ dotnet#method('ColorContext(', 'class Uri profileUri)', 'void'),
  \ dotnet#method('ColorContext(', 'PixelFormat pixelFormat)', 'void'),
  \ dotnet#method('OpenProfileStream(', ')', 'Stream'),
  \ dotnet#method('get_ProfileUri(', ')', 'Uri'),
  \ dotnet#method('get_ProfileHandle(', ')', '.method'),
  \ dotnet#method('get_ColorContextHandle(', ')', '.method'),
  \ dotnet#method('get_NumChannels(', ')', 'int32'),
  \ dotnet#method('get_ColorType(', ')', 'uint32'),
  \ dotnet#method('get_ColorSpaceFamily(', ')', '.method'),
  \ dotnet#method('get_IsValid(', ')', 'bool'),
  \ dotnet#method('GetColorContextsHelper(', 'class ColorContext/GetColorContextsDelegate getColorContexts)', 'static IList'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('op_Equality(', 'class ColorContext context1, ColorContext context2)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'class ColorContext context1, ColorContext context2)', 'static bool'),
  \ dotnet#method('ColorContext(', ')', 'static void .'),
  \ dotnet#prop('ProfileUri', 'Uri'),
  \ dotnet#prop('ProfileHandle', 'SafeProfileHandle'),
  \ dotnet#prop('ColorContextHandle', 'SafeMILHandle'),
  \ dotnet#prop('NumChannels', 'int32'),
  \ dotnet#prop('ColorType', 'uint32'),
  \ dotnet#prop('ColorSpaceFamily', 'ColorContext/StandardColorSpace'),
  \ dotnet#prop('IsValid', 'bool'),
  \ ])

call dotnet#class('ColorConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext td, Type t)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFromString(', 'string value)', 'static object'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext td, CultureInfo ci, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('ColorConverter(', ')', 'void'),
  \ ])

call dotnet#class('Geometry', 'Animatable', [ 
  \ dotnet#field('FillRule', 'FillRule'),
  \ dotnet#field('Matrix', 'MilMatrix3x2D'),
  \ dotnet#field('SerializedData', 'uint8[]'),
  \ dotnet#method('IsEmpty(', ')', 'bool'),
  \ dotnet#method('get_Size(', ')', 'uint32'),
  \ dotnet#prop('Size', 'uint32'),
  \ dotnet#method('Clone(', ')', 'Geometry'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Geometry'),
  \ dotnet#method('get_Transform(', ')', 'Transform'),
  \ dotnet#method('set_Transform(', 'class Transform value)', 'void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('Parse(', 'string source)', 'static Geometry'),
  \ dotnet#method('Geometry(', ')', 'void'),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('get_Bounds(', ')', ''),
  \ dotnet#method('get_StandardFlatteningTolerance(', ')', 'static float64'),
  \ dotnet#method('GetRenderBounds(', 'class Pen pen, float64 tolerance, ToleranceType type)', ''),
  \ dotnet#method('GetRenderBounds(', 'class Pen pen)', 'Rect'),
  \ dotnet#method('AreClose(', 'class Geometry geometry)', 'strict bool'),
  \ dotnet#method('GetBoundsInternal(', 'class Pen pen, Matrix matrix, float64 tolerance, ToleranceType type)', 'strict'),
  \ dotnet#method('GetBoundsInternal(', 'class Pen pen, Matrix matrix)', 'Rect'),
  \ dotnet#method('GetBoundsHelper(', 'class Pen pen, Matrix* pWorldMatrix, Point* pPoints, uint8* pTypes, uint32 pointCount, uint32 segmentCount, Matrix* pGeometryMatrix, float64 tolerance, ToleranceType type, bool fSkipHollows)', 'static Rect'),
  \ dotnet#method('TransformPropertyChangedHook(', 'DependencyPropertyChangedEventArgs e)', 'strict void'),
  \ dotnet#method('GetTransformedCopy(', 'class Transform transform)', 'Geometry'),
  \ dotnet#method('ShouldSerializeTransform(', ')', 'bool'),
  \ dotnet#method('GetArea(', 'float64 tolerance, ToleranceType type)', 'float64'),
  \ dotnet#method('GetArea(', ')', 'float64'),
  \ dotnet#method('IsEmpty(', ')', 'abstract bool'),
  \ dotnet#method('MayHaveCurves(', ')', 'abstract bool'),
  \ dotnet#method('FillContains(', 'Point hitPoint, float64 tolerance, ToleranceType type)', 'bool'),
  \ dotnet#method('FillContains(', 'Point hitPoint)', 'bool'),
  \ dotnet#method('StrokeContains(', 'class Pen pen, Point hitPoint, float64 tolerance, ToleranceType type)', 'bool'),
  \ dotnet#method('ContainsInternal(', 'class Pen pen, Point hitPoint, float64 tolerance, ToleranceType type)', 'strict bool'),
  \ dotnet#method('ContainsInternal(', 'class Pen pen, Point hitPoint, float64 tolerance, ToleranceType type, Point* pPoints, uint32 pointCount, uint8* pTypes, uint32 typeCount)', 'bool'),
  \ dotnet#method('StrokeContains(', 'class Pen pen, Point hitPoint)', 'bool'),
  \ dotnet#method('FillContains(', 'class Geometry geometry, float64 tolerance, ToleranceType type)', 'bool'),
  \ dotnet#method('FillContains(', 'class Geometry geometry)', 'bool'),
  \ dotnet#method('FillContainsWithDetail(', 'class Geometry geometry, float64 tolerance, ToleranceType type)', ''),
  \ dotnet#method('FillContainsWithDetail(', 'class Geometry geometry)', 'IntersectionDetail'),
  \ dotnet#method('StrokeContainsWithDetail(', 'class Pen pen, Geometry geometry, float64 tolerance, ToleranceType type)', 'IntersectionDetail'),
  \ dotnet#method('StrokeContainsWithDetail(', 'class Pen pen, Geometry geometry)', 'IntersectionDetail'),
  \ dotnet#method('GetFlattenedPathGeometry(', 'float64 tolerance, ToleranceType type)', ''),
  \ dotnet#method('GetFlattenedPathGeometry(', ')', 'PathGeometry'),
  \ dotnet#method('GetWidenedPathGeometry(', 'class Pen pen, float64 tolerance, ToleranceType type)', ''),
  \ dotnet#method('GetWidenedPathGeometry(', 'class Pen pen)', 'PathGeometry'),
  \ dotnet#method('Combine(', 'class Geometry geometry1, Geometry geometry2, GeometryCombineMode mode, Transform transform, float64 tolerance, ToleranceType type)', 'static PathGeometry'),
  \ dotnet#method('Combine(', 'class Geometry geometry1, Geometry geometry2, GeometryCombineMode mode, Transform transform)', 'static PathGeometry'),
  \ dotnet#method('GetOutlinedPathGeometry(', 'float64 tolerance, ToleranceType type)', ''),
  \ dotnet#method('GetOutlinedPathGeometry(', ')', 'PathGeometry'),
  \ dotnet#method('GetAsPathGeometry(', ')', 'abstract strict'),
  \ dotnet#method('GetPathGeometryData(', ')', 'abstract strict'),
  \ dotnet#method('GetPathFigureCollection(', ')', 'PathFigureCollection'),
  \ dotnet#method('GetCombinedMatrix(', 'class Transform transform)', 'Matrix'),
  \ dotnet#method('GetTransformedFigureCollection(', 'class Transform transform)', 'abstract strict'),
  \ dotnet#method('IsObviouslyEmpty(', ')', 'strict bool'),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('GetEmptyPathGeometryData(', ')', 'static Geometry/PathGeometryData'),
  \ dotnet#method('Geometry(', ')', 'static void .'),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('Empty', 'Geometry'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ dotnet#prop('StandardFlatteningTolerance', 'float64'),
  \ ])

call dotnet#class('CombinedGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('CombinedGeometry(', ')', 'void'),
  \ dotnet#method('CombinedGeometry(', 'class Geometry geometry1, Geometry geometry2)', 'void'),
  \ dotnet#method('CombinedGeometry(', 'GeometryCombineMode geometryCombineMode, Geometry geometry1, Geometry geometry2)', 'void'),
  \ dotnet#method('CombinedGeometry(', 'GeometryCombineMode geometryCombineMode, Geometry geometry1, Geometry geometry2, Transform transform)', 'void'),
  \ dotnet#method('get_Bounds(', ')', ''),
  \ dotnet#method('GetBoundsInternal(', 'class Pen pen, Matrix matrix, float64 tolerance, ToleranceType type)', 'strict'),
  \ dotnet#method('ContainsInternal(', 'class Pen pen, Point hitPoint, float64 tolerance, ToleranceType type)', 'strict bool'),
  \ dotnet#method('GetArea(', 'float64 tolerance, ToleranceType type)', 'float64'),
  \ dotnet#method('GetTransformedFigureCollection(', 'class Transform transform)', 'strict'),
  \ dotnet#method('GetPathGeometryData(', ')', 'strict'),
  \ dotnet#method('GetAsPathGeometry(', ')', 'strict'),
  \ dotnet#method('IsEmpty(', ')', 'bool'),
  \ dotnet#method('IsObviouslyEmpty(', ')', 'strict bool'),
  \ dotnet#method('MayHaveCurves(', ')', 'bool'),
  \ dotnet#method('Clone(', ')', 'CombinedGeometry'),
  \ dotnet#method('CloneCurrentValue(', ')', 'CombinedGeometry'),
  \ dotnet#method('get_GeometryCombineMode(', ')', 'GeometryCombineMode'),
  \ dotnet#method('set_GeometryCombineMode(', 'GeometryCombineMode value)', 'void'),
  \ dotnet#method('get_Geometry1(', ')', 'Geometry'),
  \ dotnet#method('set_Geometry1(', 'class Geometry value)', 'void'),
  \ dotnet#method('get_Geometry2(', ')', 'Geometry'),
  \ dotnet#method('set_Geometry2(', 'class Geometry value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('CombinedGeometry(', ')', 'static void .'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ dotnet#prop('GeometryCombineMode', 'GeometryCombineMode'),
  \ dotnet#prop('Geometry1', 'Geometry'),
  \ dotnet#prop('Geometry2', 'Geometry'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('LanguageSpecificStringDictionary', 'Object', [ 
  \ dotnet#method('LanguageSpecificStringDictionary(', 'class IDictionary innerDictionary)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('TryGetValue(', 'class XmlLanguage key, [out] string& value)', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Add(', 'KeyValuePair item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'KeyValuePair item)', 'bool'),
  \ dotnet#method('CopyTo(', 'KeyValuePair[] array, int32 index)', 'void'),
  \ dotnet#method('Remove(', 'KeyValuePair item)', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('Add(', 'class XmlLanguage key, string value)', 'void'),
  \ dotnet#method('ContainsKey(', 'class XmlLanguage key)', 'bool'),
  \ dotnet#method('Remove(', 'class XmlLanguage key)', 'bool'),
  \ dotnet#method('get_Item(', 'class XmlLanguage key)', 'string'),
  \ dotnet#method('set_Item(', 'class XmlLanguage key, string value)', 'void'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'object key)', 'object '),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void '),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('Add(', 'object key, object value)', 'void '),
  \ dotnet#method('Contains(', 'object key)', 'bool '),
  \ dotnet#method('Remove(', 'object key)', 'void '),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(class', 'string'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('DashStyle', 'Animatable', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DashStyle(', ')', 'void'),
  \ dotnet#method('DashStyle(', 'class IEnumerable dashes, float64 offset)', 'void'),
  \ dotnet#method('GetDashData(', 'MIL_PEN_DATA* pData, [out] float64[]& dashArray)', 'void'),
  \ dotnet#method('Clone(', ')', 'DashStyle'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DashStyle'),
  \ dotnet#method('get_Offset(', ')', 'float64'),
  \ dotnet#method('set_Offset(', 'float64 value)', 'void'),
  \ dotnet#method('get_Dashes(', ')', 'DoubleCollection'),
  \ dotnet#method('set_Dashes(', 'class DoubleCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('DashStyle(', ')', 'static void .'),
  \ dotnet#prop('Offset', 'float64'),
  \ dotnet#prop('Dashes', 'DoubleCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('DashStyles', 'Object', [ 
  \ dotnet#method('get_Solid(', ')', 'static'),
  \ dotnet#method('get_Dash(', ')', 'static'),
  \ dotnet#method('get_Dot(', ')', 'static'),
  \ dotnet#method('get_DashDot(', ')', 'static'),
  \ dotnet#method('get_DashDotDot(', ')', 'static'),
  \ dotnet#prop('Solid', 'DashStyle'),
  \ dotnet#prop('Dash', 'DashStyle'),
  \ dotnet#prop('Dot', 'DashStyle'),
  \ dotnet#prop('DashDot', 'DashStyle'),
  \ dotnet#prop('DashDotDot', 'DashStyle'),
  \ ])

call dotnet#class('CharacterMetrics', 'Object', [ 
  \ dotnet#method('CharacterMetrics(', ')', 'void'),
  \ dotnet#method('CharacterMetrics(', 'string metrics)', 'void'),
  \ dotnet#method('get_Metrics(', ')', 'string'),
  \ dotnet#method('set_Metrics(', 'string value)', 'void'),
  \ dotnet#method('get_BlackBoxWidth(', ')', 'float64'),
  \ dotnet#method('get_BlackBoxHeight(', ')', 'float64'),
  \ dotnet#method('get_Baseline(', ')', 'float64'),
  \ dotnet#method('get_LeftSideBearing(', ')', 'float64'),
  \ dotnet#method('get_RightSideBearing(', ')', 'float64'),
  \ dotnet#method('get_TopSideBearing(', ')', 'float64'),
  \ dotnet#method('get_BottomSideBearing(', ')', 'float64'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Metrics', 'string'),
  \ dotnet#prop('BlackBoxWidth', 'float64'),
  \ dotnet#prop('BlackBoxHeight', 'float64'),
  \ dotnet#prop('Baseline', 'float64'),
  \ dotnet#prop('LeftSideBearing', 'float64'),
  \ dotnet#prop('RightSideBearing', 'float64'),
  \ dotnet#prop('TopSideBearing', 'float64'),
  \ dotnet#prop('BottomSideBearing', 'float64'),
  \ ])

call dotnet#class('CharacterMetricsDictionary', 'Object', [ 
  \ dotnet#method('CharacterMetricsDictionary(', ')', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('TryGetValue(', 'int32 key, [out] CharacterMetrics& value)', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('Add(', 'KeyValuePair item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'KeyValuePair item)', 'bool'),
  \ dotnet#method('CopyTo(', 'KeyValuePair[] array, int32 index)', 'void'),
  \ dotnet#method('Remove(', 'KeyValuePair item)', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('Add(', 'int32 key, CharacterMetrics value)', 'void'),
  \ dotnet#method('ContainsKey(', 'int32 key)', 'bool'),
  \ dotnet#method('Remove(', 'int32 key)', 'bool'),
  \ dotnet#method('get_Item(', 'int32 key)', ''),
  \ dotnet#method('set_Item(', 'int32 key, CharacterMetrics value)', 'void'),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'object key)', 'object '),
  \ dotnet#method('set_Item(', 'object key, object value)', 'void '),
  \ dotnet#method('get_Keys(', ')', ''),
  \ dotnet#method('get_Values(', ')', ''),
  \ dotnet#method('Add(', 'object key, object value)', 'void '),
  \ dotnet#method('Contains(', 'object key)', 'bool '),
  \ dotnet#method('Remove(', 'object key)', 'void '),
  \ dotnet#method('GetPage(', 'int32 i)', 'CharacterMetrics[]'),
  \ dotnet#method('GetValue(', 'int32 key)', 'CharacterMetrics'),
  \ dotnet#method('ConvertKey(', 'object key)', 'static int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Item(int32)', 'CharacterMetrics'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(object)', 'object'),
  \ dotnet#prop('Keys', 'ICollection'),
  \ dotnet#prop('Values', 'ICollection'),
  \ ])

call dotnet#class('Drawing', 'Animatable', [ 
  \ dotnet#method('Drawing(', ')', 'void'),
  \ dotnet#method('get_Bounds(', ')', 'Rect'),
  \ dotnet#method('WalkCurrentValue(', 'class DrawingContextWalker ctx)', 'abstract strict void'),
  \ dotnet#method('GetContentBounds(', 'class BoundsDrawingContextWalker ctx)', ''),
  \ dotnet#method('WalkContent(', 'class DrawingContextWalker ctx)', 'void '),
  \ dotnet#method('HitTestPoint(', 'Point point)', 'bool '),
  \ dotnet#method('HitTestGeometry(', 'class PathGeometry geometry)', ''),
  \ dotnet#method('PropagateChangedHandler(', 'class EventHandler handler, bool adding)', 'void '),
  \ dotnet#method('GetBounds(', ')', 'Rect'),
  \ dotnet#method('Clone(', ')', 'Drawing'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Drawing'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('TileBrush', 'Brush', [ 
  \ dotnet#method('Clone(', ')', 'TileBrush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TileBrush'),
  \ dotnet#method('get_ViewportUnits(', ')', 'BrushMappingMode'),
  \ dotnet#method('set_ViewportUnits(', 'BrushMappingMode value)', 'void'),
  \ dotnet#method('get_ViewboxUnits(', ')', 'BrushMappingMode'),
  \ dotnet#method('set_ViewboxUnits(', 'BrushMappingMode value)', 'void'),
  \ dotnet#method('get_Viewport(', ')', 'Rect'),
  \ dotnet#method('set_Viewport(', 'Rect value)', 'void'),
  \ dotnet#method('get_Viewbox(', ')', 'Rect'),
  \ dotnet#method('set_Viewbox(', 'Rect value)', 'void'),
  \ dotnet#method('get_Stretch(', ')', 'Stretch'),
  \ dotnet#method('set_Stretch(', 'Stretch value)', 'void'),
  \ dotnet#method('get_TileMode(', ')', 'TileMode'),
  \ dotnet#method('set_TileMode(', 'TileMode value)', 'void'),
  \ dotnet#method('get_AlignmentX(', ')', 'AlignmentX'),
  \ dotnet#method('set_AlignmentX(', 'AlignmentX value)', 'void'),
  \ dotnet#method('get_AlignmentY(', ')', 'AlignmentY'),
  \ dotnet#method('set_AlignmentY(', 'AlignmentY value)', 'void'),
  \ dotnet#method('TileBrush(', ')', 'void'),
  \ dotnet#method('GetContentBounds(', '[out] Rect& contentBounds)', 'abstract void'),
  \ dotnet#method('GetTileBrushMapping(', 'Rect shapeFillBounds, [out] Matrix& tileBrushMapping)', 'void'),
  \ dotnet#method('TileBrush(', ')', 'static void .'),
  \ dotnet#prop('ViewportUnits', 'BrushMappingMode'),
  \ dotnet#prop('ViewboxUnits', 'BrushMappingMode'),
  \ dotnet#prop('Viewport', 'Rect'),
  \ dotnet#prop('Viewbox', 'Rect'),
  \ dotnet#prop('Stretch', 'Stretch'),
  \ dotnet#prop('TileMode', 'TileMode'),
  \ dotnet#prop('AlignmentX', 'AlignmentX'),
  \ dotnet#prop('AlignmentY', 'AlignmentY'),
  \ ])

call dotnet#class('DrawingBrush', 'TileBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DrawingBrush(', ')', 'void'),
  \ dotnet#method('DrawingBrush(', 'class Drawing drawing)', 'void'),
  \ dotnet#method('GetContentBounds(', '[out] Rect& contentBounds)', 'void'),
  \ dotnet#method('Clone(', ')', 'DrawingBrush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DrawingBrush'),
  \ dotnet#method('get_Drawing(', ')', 'Drawing'),
  \ dotnet#method('set_Drawing(', 'class Drawing value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('DrawingBrush(', ')', 'static void .'),
  \ dotnet#prop('Drawing', 'Drawing'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('DrawingCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Drawing'),
  \ dotnet#field('_list', 'DrawingCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('DrawingCollection(', 'class DrawingCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Drawing'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('TransactionalAppend(', 'class DrawingCollection collectionToAppend)', 'void'),
  \ dotnet#method('Clone(', ')', 'DrawingCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DrawingCollection'),
  \ dotnet#method('Add(', 'class Drawing value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class Drawing value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class Drawing value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, Drawing value)', 'void'),
  \ dotnet#method('Remove(', 'class Drawing value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Drawing value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Drawing[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'DrawingCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'Drawing'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class Drawing value)', 'int32'),
  \ dotnet#method('add_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('remove_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('add_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('remove_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('DrawingCollection(', ')', 'void'),
  \ dotnet#method('DrawingCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('DrawingCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#event('ItemInserted', 'ItemInsertedHandler'),
  \ dotnet#event('ItemRemoved', 'ItemRemovedHandler'),
  \ dotnet#prop('Item(int32)', 'Drawing'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'DrawingCollection'),
  \ ])

call dotnet#class('DrawingGroup', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DrawingGroup(', ')', 'void'),
  \ dotnet#method('Open(', ')', 'DrawingContext'),
  \ dotnet#method('Append(', ')', 'DrawingContext'),
  \ dotnet#method('Close(', 'class DrawingCollection rootDrawingGroupChildren)', 'void'),
  \ dotnet#method('WalkCurrentValue(', 'class DrawingContextWalker ctx)', 'strict void'),
  \ dotnet#method('Clone(', ')', 'DrawingGroup'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DrawingGroup'),
  \ dotnet#method('get_Children(', ')', 'DrawingCollection'),
  \ dotnet#method('set_Children(', 'class DrawingCollection value)', 'void'),
  \ dotnet#method('get_ClipGeometry(', ')', 'Geometry'),
  \ dotnet#method('set_ClipGeometry(', 'class Geometry value)', 'void'),
  \ dotnet#method('get_Opacity(', ')', 'float64'),
  \ dotnet#method('set_Opacity(', 'float64 value)', 'void'),
  \ dotnet#method('get_OpacityMask(', ')', 'Brush'),
  \ dotnet#method('set_OpacityMask(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Transform(', ')', 'Transform'),
  \ dotnet#method('set_Transform(', 'class Transform value)', 'void'),
  \ dotnet#method('get_GuidelineSet(', ')', 'GuidelineSet'),
  \ dotnet#method('set_GuidelineSet(', 'class GuidelineSet value)', 'void'),
  \ dotnet#method('get_BitmapEffect(', ')', 'BitmapEffect'),
  \ dotnet#method('set_BitmapEffect(', 'class BitmapEffect value)', 'void'),
  \ dotnet#method('get_BitmapEffectInput(', ')', 'BitmapEffectInput'),
  \ dotnet#method('set_BitmapEffectInput(', 'class BitmapEffectInput value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('DrawingGroup(', ')', 'static void .'),
  \ dotnet#prop('Children', 'DrawingCollection'),
  \ dotnet#prop('ClipGeometry', 'Geometry'),
  \ dotnet#prop('Opacity', 'float64'),
  \ dotnet#prop('OpacityMask', 'Brush'),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('GuidelineSet', 'GuidelineSet'),
  \ dotnet#prop('BitmapEffect', 'BitmapEffect'),
  \ dotnet#prop('BitmapEffectInput', 'BitmapEffectInput'),
  \ ])

call dotnet#class('DrawingImage', 'ImageSource', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('DrawingImage(', ')', 'void'),
  \ dotnet#method('DrawingImage(', 'class Drawing drawing)', 'void'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('get_Height(', ')', 'float64'),
  \ dotnet#method('get_Metadata(', ')', ''),
  \ dotnet#method('get_Size(', ')', 'strict'),
  \ dotnet#method('Clone(', ')', 'DrawingImage'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DrawingImage'),
  \ dotnet#method('get_Drawing(', ')', 'Drawing'),
  \ dotnet#method('set_Drawing(', 'class Drawing value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('DrawingImage(', ')', 'static void .'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Metadata', 'ImageMetadata'),
  \ dotnet#prop('Size', 'Size'),
  \ dotnet#prop('Drawing', 'Drawing'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('EllipseGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('EllipseGeometry(', ')', 'void'),
  \ dotnet#method('EllipseGeometry(', 'Rect rect)', 'void'),
  \ dotnet#method('EllipseGeometry(', 'Point center, float64 radiusX, float64 radiusY)', 'void'),
  \ dotnet#method('EllipseGeometry(', 'Point center, float64 radiusX, float64 radiusY, Transform transform)', 'void'),
  \ dotnet#method('get_Bounds(', ')', ''),
  \ dotnet#method('GetBoundsInternal(', 'class Pen pen, Matrix matrix, float64 tolerance, ToleranceType type)', 'strict'),
  \ dotnet#method('GetBoundsHelper(', 'class Pen pen, Matrix worldMatrix, Point center, float64 radiusX, float64 radiusY, Matrix geometryMatrix, float64 tolerance, ToleranceType type)', 'static Rect'),
  \ dotnet#method('ContainsInternal(', 'class Pen pen, Point hitPoint, float64 tolerance, ToleranceType type)', 'strict bool'),
  \ dotnet#method('IsEmpty(', ')', 'bool'),
  \ dotnet#method('MayHaveCurves(', ')', 'bool'),
  \ dotnet#method('GetArea(', 'float64 tolerance, ToleranceType type)', 'float64'),
  \ dotnet#method('GetTransformedFigureCollection(', 'class Transform transform)', 'strict'),
  \ dotnet#method('GetAsPathGeometry(', ')', 'strict'),
  \ dotnet#method('GetPathGeometryData(', ')', 'strict'),
  \ dotnet#method('Clone(', ')', 'EllipseGeometry'),
  \ dotnet#method('CloneCurrentValue(', ')', 'EllipseGeometry'),
  \ dotnet#method('get_RadiusX(', ')', 'float64'),
  \ dotnet#method('set_RadiusX(', 'float64 value)', 'void'),
  \ dotnet#method('get_RadiusY(', ')', 'float64'),
  \ dotnet#method('set_RadiusY(', 'float64 value)', 'void'),
  \ dotnet#method('get_Center(', ')', 'Point'),
  \ dotnet#method('set_Center(', 'Point value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('EllipseGeometry(', ')', 'static void .'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ dotnet#prop('RadiusX', 'float64'),
  \ dotnet#prop('RadiusY', 'float64'),
  \ dotnet#prop('Center', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('FontFamilyMap', 'Object', [ 
  \ dotnet#method('FontFamilyMap(', 'int32 first, int32 last)', 'void'),
  \ dotnet#method('InRange(', 'int32 ch)', 'bool'),
  \ dotnet#method('get_First(', ')', 'int32'),
  \ dotnet#method('get_Last(', ')', 'int32'),
  \ dotnet#method('get_Delta(', ')', 'uint32'),
  \ dotnet#prop('First', 'int32'),
  \ dotnet#prop('Last', 'int32'),
  \ dotnet#prop('Delta', 'uint32'),
  \ dotnet#method('FontFamilyMap(', ')', 'void'),
  \ dotnet#method('FontFamilyMap(', 'int32 firstChar, int32 lastChar, XmlLanguage language, string targetFamilyName, float64 scaleInEm)', 'void'),
  \ dotnet#method('set_Unicode(', 'string value)', 'void'),
  \ dotnet#method('get_Unicode(', ')', 'string'),
  \ dotnet#method('get_Target(', ')', 'string'),
  \ dotnet#method('set_Target(', 'string value)', 'void'),
  \ dotnet#method('get_Scale(', ')', 'float64'),
  \ dotnet#method('set_Scale(', 'float64 value)', 'void'),
  \ dotnet#method('get_Language(', ')', 'XmlLanguage'),
  \ dotnet#method('set_Language(', 'class XmlLanguage value)', 'void'),
  \ dotnet#method('get_IsSimpleFamilyMap(', ')', 'bool'),
  \ dotnet#method('MatchLanguage(', 'class XmlLanguage familyMapLanguage, XmlLanguage language)', 'static bool'),
  \ dotnet#method('MatchCulture(', 'class XmlLanguage familyMapLanguage, CultureInfo culture)', 'static bool'),
  \ dotnet#method('get_Ranges(', ')', '.method'),
  \ dotnet#method('ParseHexNumber(', 'string numString, int32& index, [out] int32& number)', 'static bool'),
  \ dotnet#method('InRange(', 'int32 ch)', 'bool'),
  \ dotnet#method('FontFamilyMap(', ')', 'static void .'),
  \ dotnet#prop('Unicode', 'string'),
  \ dotnet#prop('Target', 'string'),
  \ dotnet#prop('Scale', 'float64'),
  \ dotnet#prop('Language', 'XmlLanguage'),
  \ dotnet#prop('IsSimpleFamilyMap', 'bool'),
  \ dotnet#prop('Ranges', 'FontFamilyMap/Range[]'),
  \ ])

call dotnet#class('FontFamilyMapCollection', 'Object', [ 
  \ dotnet#method('FontFamilyMapCollection(', 'class CompositeFontInfo fontInfo)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Add(', 'class FontFamilyMap item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class FontFamilyMap item)', 'bool'),
  \ dotnet#method('CopyTo(', 'class FontFamilyMap[] array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('Remove(', 'class FontFamilyMap item)', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('IndexOf(', 'class FontFamilyMap item)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, FontFamilyMap item)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, FontFamilyMap value)', 'void'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object item)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'FontFamilyMap'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ ])

call dotnet#class('FamilyTypeface', 'Object', [ 
  \ dotnet#method('FamilyTypeface(', ')', 'void'),
  \ dotnet#method('FamilyTypeface(', 'class Typeface face)', 'void'),
  \ dotnet#method('get_Style(', ')', 'FontStyle'),
  \ dotnet#method('set_Style(', 'FontStyle value)', 'void'),
  \ dotnet#method('get_Weight(', ')', 'FontWeight'),
  \ dotnet#method('set_Weight(', 'FontWeight value)', 'void'),
  \ dotnet#method('get_Stretch(', ')', 'FontStretch'),
  \ dotnet#method('set_Stretch(', 'FontStretch value)', 'void'),
  \ dotnet#method('get_UnderlinePosition(', ')', 'float64'),
  \ dotnet#method('set_UnderlinePosition(', 'float64 value)', 'void'),
  \ dotnet#method('get_UnderlineThickness(', ')', 'float64'),
  \ dotnet#method('set_UnderlineThickness(', 'float64 value)', 'void'),
  \ dotnet#method('get_StrikethroughPosition(', ')', 'float64'),
  \ dotnet#method('set_StrikethroughPosition(', 'float64 value)', 'void'),
  \ dotnet#method('get_StrikethroughThickness(', ')', 'float64'),
  \ dotnet#method('set_StrikethroughThickness(', 'float64 value)', 'void'),
  \ dotnet#method('get_CapsHeight(', ')', 'float64'),
  \ dotnet#method('set_CapsHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_XHeight(', ')', 'float64'),
  \ dotnet#method('set_XHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_Symbol(', ')', 'bool '),
  \ dotnet#method('get_StyleSimulations(', ')', ''),
  \ dotnet#method('get_AdjustedFaceNames(', ')', ''),
  \ dotnet#method('Equals(', 'class FamilyTypeface typeface)', 'bool'),
  \ dotnet#method('get_DeviceFontName(', ')', 'string'),
  \ dotnet#method('set_DeviceFontName(', 'string value)', 'void'),
  \ dotnet#method('get_DeviceFontCharacterMetrics(', ')', 'CharacterMetricsDictionary'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_Name(', ')', 'string '),
  \ dotnet#method('ContainsCharacter(', 'int32 unicodeScalar)', 'bool '),
  \ dotnet#method('GetAdvanceWidths(', 'char* characterString, int32 characterLength, float64 emSize, int32* pAdvances)', 'void '),
  \ dotnet#prop('Style', 'FontStyle'),
  \ dotnet#prop('Weight', 'FontWeight'),
  \ dotnet#prop('Stretch', 'FontStretch'),
  \ dotnet#prop('UnderlinePosition', 'float64'),
  \ dotnet#prop('UnderlineThickness', 'float64'),
  \ dotnet#prop('StrikethroughPosition', 'float64'),
  \ dotnet#prop('StrikethroughThickness', 'float64'),
  \ dotnet#prop('CapsHeight', 'float64'),
  \ dotnet#prop('XHeight', 'float64'),
  \ dotnet#prop('Symbol', 'bool'),
  \ dotnet#prop('StyleSimulations', 'StyleSimulations'),
  \ dotnet#prop('AdjustedFaceNames', 'IDictionary'),
  \ dotnet#prop('DeviceFontName', 'string'),
  \ dotnet#prop('DeviceFontCharacterMetrics', 'CharacterMetricsDictionary'),
  \ dotnet#prop('Name', 'string'),
  \ ])

call dotnet#class('FamilyTypefaceCollection', 'Object', [ 
  \ dotnet#method('FamilyTypefaceCollection(', ')', 'void'),
  \ dotnet#method('FamilyTypefaceCollection(', 'class ICollection innerList)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('Add(', 'class FamilyTypeface item)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class FamilyTypeface item)', 'bool'),
  \ dotnet#method('CopyTo(', 'class FamilyTypeface[] array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('Remove(', 'class FamilyTypeface item)', 'bool'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('IndexOf(', 'class FamilyTypeface item)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, FamilyTypeface item)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, FamilyTypeface value)', 'void'),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object item)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('Item(int32)', 'FamilyTypeface'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ ])

call dotnet#class('FontEmbeddingManager', 'Object', [ 
  \ dotnet#method('FontEmbeddingManager(', ')', 'void'),
  \ dotnet#method('RecordUsage(', 'class GlyphRun glyphRun)', 'void'),
  \ dotnet#method('get_GlyphTypefaceUris(', ')', 'ICollection'),
  \ dotnet#method('GetUsedGlyphs(', 'class Uri glyphTypeface)', 'ICollection'),
  \ dotnet#method('FontEmbeddingManager(', ')', 'static void .'),
  \ dotnet#prop('GlyphTypefaceUris', 'ICollection'),
  \ ])

call dotnet#class('FontFamily', 'Object', [ 
  \ dotnet#method('FontFamily(', 'string familyName)', 'void'),
  \ dotnet#method('FontFamily(', 'class Uri baseUri, string familyName)', 'void'),
  \ dotnet#method('FontFamily(', 'FontFamilyIdentifier familyIdentifier)', 'void'),
  \ dotnet#method('FontFamily(', ')', 'void'),
  \ dotnet#method('get_FamilyNames(', ')', 'LanguageSpecificStringDictionary'),
  \ dotnet#method('get_FamilyTypefaces(', ')', 'FamilyTypefaceCollection'),
  \ dotnet#method('get_FamilyMaps(', ')', 'FontFamilyMapCollection'),
  \ dotnet#method('get_Source(', ')', 'string'),
  \ dotnet#method('get_BaseUri(', ')', 'Uri'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('get_FamilyIdentifier(', ')', '.method'),
  \ dotnet#method('get_Baseline(', ')', 'float64'),
  \ dotnet#method('set_Baseline(', 'float64 value)', 'void'),
  \ dotnet#method('get_LineSpacing(', ')', 'float64'),
  \ dotnet#method('set_LineSpacing(', 'float64 value)', 'void'),
  \ dotnet#method('GetLineSpacingForDisplayMode(', 'float64 emSize)', 'float64'),
  \ dotnet#method('GetTypefaces(', ')', 'ICollection'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('get_FirstFontFamily(', ')', '.method'),
  \ dotnet#method('FindFontFamilyFromFriendlyNameList(', 'string friendlyNameList)', 'static IFontFamily'),
  \ dotnet#method('SafeLookupFontFamily(', 'class CanonicalFontFamilyReference canonicalName, [out] bool& nullFont)', 'static IFontFamily'),
  \ dotnet#method('LookupFontFamily(', 'class CanonicalFontFamilyReference canonicalName)', 'static IFontFamily'),
  \ dotnet#method('FindFirstFontFamilyAndFace(', 'FontStyle& style, FontWeight& weight, FontStretch& stretch)', 'IFontFamily'),
  \ dotnet#method('LookupFontFamilyAndFace(', 'class CanonicalFontFamilyReference canonicalFamilyReference, FontStyle& style, FontWeight& weight, FontStretch& stretch)', 'static IFontFamily'),
  \ dotnet#method('FontFamily(', ')', 'static void .'),
  \ dotnet#prop('FamilyNames', 'LanguageSpecificStringDictionary'),
  \ dotnet#prop('FamilyTypefaces', 'FamilyTypefaceCollection'),
  \ dotnet#prop('FamilyMaps', 'FontFamilyMapCollection'),
  \ dotnet#prop('Source', 'string'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ dotnet#prop('FamilyIdentifier', 'FontFamilyIdentifier'),
  \ dotnet#prop('Baseline', 'float64'),
  \ dotnet#prop('LineSpacing', 'float64'),
  \ dotnet#prop('FirstFontFamily', 'IFontFamily'),
  \ ])

call dotnet#class('FontFamilyConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext td, Type t)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo cultureInfo, object o)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('FontFamilyConverter(', ')', 'void'),
  \ ])

call dotnet#class('FontFamilyValueSerializer', 'ValueSerializer', [ 
  \ dotnet#method('CanConvertFromString(', 'string value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('ConvertFromString(', 'string value, IValueSerializerContext context)', 'object'),
  \ dotnet#method('CanConvertToString(', 'object value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('ConvertToString(', 'object value, IValueSerializerContext context)', 'string'),
  \ dotnet#method('FontFamilyValueSerializer(', ')', 'void'),
  \ ])

call dotnet#class('Fonts', 'Object', [ 
  \ dotnet#method('GetFontFamilies(', 'string location)', 'static ICollection'),
  \ dotnet#method('GetFontFamilies(', 'class Uri baseUri)', 'static ICollection'),
  \ dotnet#method('GetFontFamilies(', 'class Uri baseUri, string location)', 'static ICollection'),
  \ dotnet#method('GetTypefaces(', 'string location)', 'static ICollection'),
  \ dotnet#method('GetTypefaces(', 'class Uri baseUri)', 'static ICollection'),
  \ dotnet#method('GetTypefaces(', 'class Uri baseUri, string location)', 'static ICollection'),
  \ dotnet#method('get_SystemFontFamilies(', ')', 'static'),
  \ dotnet#method('get_SystemTypefaces(', ')', 'static'),
  \ dotnet#method('Fonts(', ')', 'static void .'),
  \ dotnet#prop('SystemFontFamilies', 'ICollection'),
  \ dotnet#prop('SystemTypefaces', 'ICollection'),
  \ ])

call dotnet#class('FormattedText', 'Object', [ 
  \ dotnet#method('FormattedText(', 'string textToFormat, CultureInfo culture, FlowDirection flowDirection, Typeface typeface, float64 emSize, Brush foreground)', 'void'),
  \ dotnet#method('FormattedText(', 'string textToFormat, CultureInfo culture, FlowDirection flowDirection, Typeface typeface, float64 emSize, Brush foreground, NumberSubstitution numberSubstitution)', 'void'),
  \ dotnet#method('FormattedText(', 'string textToFormat, CultureInfo culture, FlowDirection flowDirection, Typeface typeface, float64 emSize, Brush foreground, NumberSubstitution numberSubstitution, TextFormattingMode textFormattingMode)', 'void'),
  \ dotnet#method('get_Text(', ')', 'string'),
  \ dotnet#method('SetForegroundBrush(', 'class Brush foregroundBrush)', 'void'),
  \ dotnet#method('SetForegroundBrush(', 'class Brush foregroundBrush, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetFontFamily(', 'string fontFamily)', 'void'),
  \ dotnet#method('SetFontFamily(', 'string fontFamily, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetFontFamily(', 'class FontfontFamily)', 'void'),
  \ dotnet#method('SetFontFamily(', 'class FontfontFamily, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetFontSize(', 'float64 emSize)', 'void'),
  \ dotnet#method('SetFontSize(', 'float64 emSize, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetCulture(', 'class CultureInfo culture)', 'void'),
  \ dotnet#method('SetCulture(', 'class CultureInfo culture, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetNumberSubstitution(', 'class NumberSubstitution numberSubstitution)', 'void'),
  \ dotnet#method('SetNumberSubstitution(', 'class NumberSubstitution numberSubstitution, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetFontWeight(', 'FontWeight weight)', 'void'),
  \ dotnet#method('SetFontWeight(', 'FontWeight weight, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetFontStyle(', 'FontStyle style)', 'void'),
  \ dotnet#method('SetFontStyle(', 'FontStyle style, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetFontStretch(', 'FontStretch stretch)', 'void'),
  \ dotnet#method('SetFontStretch(', 'FontStretch stretch, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetFontTypeface(', 'class Typeface typeface)', 'void'),
  \ dotnet#method('SetFontTypeface(', 'class Typeface typeface, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('SetTextDecorations(', 'class TextDecorationCollection textDecorations)', 'void'),
  \ dotnet#method('SetTextDecorations(', 'class TextDecorationCollection textDecorations, int32 startIndex, int32 count)', 'void'),
  \ dotnet#method('set_FlowDirection(', 'FlowDirection value)', 'void'),
  \ dotnet#method('get_FlowDirection(', ')', 'FlowDirection'),
  \ dotnet#method('set_TextAlignment(', 'TextAlignment value)', 'void'),
  \ dotnet#method('get_TextAlignment(', ')', 'TextAlignment'),
  \ dotnet#method('set_LineHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_LineHeight(', ')', 'float64'),
  \ dotnet#method('set_MaxTextWidth(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxTextWidth(', ')', 'float64'),
  \ dotnet#method('SetMaxTextWidths(', 'float64[] maxTextWidths)', 'void'),
  \ dotnet#method('GetMaxTextWidths(', ')', 'float64[]'),
  \ dotnet#method('set_MaxTextHeight(', 'float64 value)', 'void'),
  \ dotnet#method('get_MaxTextHeight(', ')', 'float64'),
  \ dotnet#method('set_MaxLineCount(', 'int32 value)', 'void'),
  \ dotnet#method('get_MaxLineCount(', ')', 'int32'),
  \ dotnet#method('set_Trimming(', 'TextTrimming value)', 'void'),
  \ dotnet#method('get_Trimming(', ')', 'TextTrimming'),
  \ dotnet#method('get_Height(', ')', 'float64'),
  \ dotnet#method('get_Extent(', ')', 'float64'),
  \ dotnet#method('get_Baseline(', ')', 'float64'),
  \ dotnet#method('get_OverhangAfter(', ')', 'float64'),
  \ dotnet#method('get_OverhangLeading(', ')', 'float64'),
  \ dotnet#method('get_OverhangTrailing(', ')', 'float64'),
  \ dotnet#method('get_Width(', ')', 'float64'),
  \ dotnet#method('get_WidthIncludingTrailingWhitespace(', ')', 'float64'),
  \ dotnet#method('get_MinWidth(', ')', 'float64'),
  \ dotnet#method('BuildHighlightGeometry(', 'Point origin)', 'Geometry'),
  \ dotnet#method('BuildGeometry(', 'Point origin)', 'Geometry'),
  \ dotnet#method('BuildHighlightGeometry(', 'Point origin, int32 startIndex, int32 count)', 'Geometry'),
  \ dotnet#method('Draw(', 'class DrawingContext dc, Point origin)', 'void'),
  \ dotnet#prop('Text', 'string'),
  \ dotnet#prop('FlowDirection', 'FlowDirection'),
  \ dotnet#prop('TextAlignment', 'TextAlignment'),
  \ dotnet#prop('LineHeight', 'float64'),
  \ dotnet#prop('MaxTextWidth', 'float64'),
  \ dotnet#prop('MaxTextHeight', 'float64'),
  \ dotnet#prop('MaxLineCount', 'int32'),
  \ dotnet#prop('Trimming', 'TextTrimming'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Extent', 'float64'),
  \ dotnet#prop('Baseline', 'float64'),
  \ dotnet#prop('OverhangAfter', 'float64'),
  \ dotnet#prop('OverhangLeading', 'float64'),
  \ dotnet#prop('OverhangTrailing', 'float64'),
  \ dotnet#prop('Width', 'float64'),
  \ dotnet#prop('WidthIncludingTrailingWhitespace', 'float64'),
  \ dotnet#prop('MinWidth', 'float64'),
  \ ])

call dotnet#class('GeneralTransformGroup', 'GeneralTransform', [ 
  \ dotnet#method('GeneralTransformGroup(', ')', 'void'),
  \ dotnet#method('TryTransform(', 'Point inPoint, [out] Point& result)', 'bool'),
  \ dotnet#method('TransformBounds(', 'Rect rect)', 'Rect'),
  \ dotnet#method('get_Inverse(', ')', ''),
  \ dotnet#method('get_AffineTransform(', ')', 'strict'),
  \ dotnet#method('Clone(', ')', 'GeneralTransformGroup'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeneralTransformGroup'),
  \ dotnet#method('get_Children(', ')', 'GeneralTransformCollection'),
  \ dotnet#method('set_Children(', 'class GeneralTransformCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('GeneralTransformGroup(', ')', 'static void .'),
  \ dotnet#prop('Inverse', 'GeneralTransform'),
  \ dotnet#prop('AffineTransform', 'Transform'),
  \ dotnet#prop('Children', 'GeneralTransformCollection'),
  \ ])

call dotnet#class('BrushConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('BrushConverter(', ')', 'void'),
  \ ])

call dotnet#class('CacheModeConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('CacheModeConverter(', ')', 'void'),
  \ ])

call dotnet#class('DoubleCollection', 'Freezable', [ 
  \ dotnet#field('_current', 'float64'),
  \ dotnet#field('_list', 'DoubleCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('DoubleCollection(', 'class DoubleCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', 'float64'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'float64'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'DoubleCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'DoubleCollection'),
  \ dotnet#method('Add(', 'float64 value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'float64 value)', 'bool'),
  \ dotnet#method('IndexOf(', 'float64 value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, float64 value)', 'void'),
  \ dotnet#method('Remove(', 'float64 value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'float64'),
  \ dotnet#method('set_Item(', 'int32 index, float64 value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'float64[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'DoubleCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'float64'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'float64 value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string source)', 'static DoubleCollection'),
  \ dotnet#method('DoubleCollection(', ')', 'void'),
  \ dotnet#method('DoubleCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('DoubleCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'float64'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'DoubleCollection'),
  \ ])

call dotnet#class('DoubleCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('DoubleCollectionConverter(', ')', 'void'),
  \ ])

call dotnet#class('GeneralTransformCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'GeneralTransform'),
  \ dotnet#field('_list', 'GeneralTransformCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('GeneralTransformCollection(', 'class GeneralTransformCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'GeneralTransform'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'GeneralTransformCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeneralTransformCollection'),
  \ dotnet#method('Add(', 'class GeneralTransform value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class GeneralTransform value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class GeneralTransform value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, GeneralTransform value)', 'void'),
  \ dotnet#method('Remove(', 'class GeneralTransform value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, GeneralTransform value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class GeneralTransform[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'GeneralTransformCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'GeneralTransform'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class GeneralTransform value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GeneralTransformCollection(', ')', 'void'),
  \ dotnet#method('GeneralTransformCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('GeneralTransformCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'GeneralTransform'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'GeneralTransformCollection'),
  \ ])

call dotnet#class('GeometryCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Geometry'),
  \ dotnet#field('_list', 'GeometryCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('GeometryCollection(', 'class GeometryCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Geometry'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'GeometryCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeometryCollection'),
  \ dotnet#method('Add(', 'class Geometry value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class Geometry value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class Geometry value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, Geometry value)', 'void'),
  \ dotnet#method('Remove(', 'class Geometry value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Geometry value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Geometry[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'GeometryCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'Geometry'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class Geometry value)', 'int32'),
  \ dotnet#method('add_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('remove_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('add_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('remove_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('GeometryCollection(', ')', 'void'),
  \ dotnet#method('GeometryCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('GeometryCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#event('ItemInserted', 'ItemInsertedHandler'),
  \ dotnet#event('ItemRemoved', 'ItemRemovedHandler'),
  \ dotnet#prop('Item(int32)', 'Geometry'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'GeometryCollection'),
  \ ])

call dotnet#class('GeometryConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('GeometryConverter(', ')', 'void'),
  \ ])

call dotnet#class('GeometryDrawing', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'GeometryDrawing'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeometryDrawing'),
  \ dotnet#method('get_Brush(', ')', 'Brush'),
  \ dotnet#method('set_Brush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Pen(', ')', 'Pen'),
  \ dotnet#method('set_Pen(', 'class Pen value)', 'void'),
  \ dotnet#method('get_Geometry(', ')', 'Geometry'),
  \ dotnet#method('set_Geometry(', 'class Geometry value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('GeometryDrawing(', ')', 'void'),
  \ dotnet#method('GeometryDrawing(', 'class Brush brush, Pen pen, Geometry geometry)', 'void'),
  \ dotnet#method('WalkCurrentValue(', 'class DrawingContextWalker ctx)', 'strict void'),
  \ dotnet#method('GeometryDrawing(', ')', 'static void .'),
  \ dotnet#prop('Brush', 'Brush'),
  \ dotnet#prop('Pen', 'Pen'),
  \ dotnet#prop('Geometry', 'Geometry'),
  \ ])

call dotnet#class('GeometryGroup', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'GeometryGroup'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GeometryGroup'),
  \ dotnet#method('get_FillRule(', ')', 'FillRule'),
  \ dotnet#method('set_FillRule(', 'FillRule value)', 'void'),
  \ dotnet#method('get_Children(', ')', 'GeometryCollection'),
  \ dotnet#method('set_Children(', 'class GeometryCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('GeometryGroup(', ')', 'void'),
  \ dotnet#method('GetPathGeometryData(', ')', 'strict'),
  \ dotnet#method('GetAsPathGeometry(', ')', 'strict'),
  \ dotnet#method('GetTransformedFigureCollection(', 'class Transform transform)', 'strict'),
  \ dotnet#method('IsEmpty(', ')', 'bool'),
  \ dotnet#method('IsObviouslyEmpty(', ')', 'strict bool'),
  \ dotnet#method('MayHaveCurves(', ')', 'bool'),
  \ dotnet#method('GeometryGroup(', ')', 'static void .'),
  \ dotnet#prop('FillRule', 'FillRule'),
  \ dotnet#prop('Children', 'GeometryCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('GlyphRunDrawing', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'GlyphRunDrawing'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GlyphRunDrawing'),
  \ dotnet#method('get_GlyphRun(', ')', 'GlyphRun'),
  \ dotnet#method('set_GlyphRun(', 'class GlyphRun value)', 'void'),
  \ dotnet#method('get_ForegroundBrush(', ')', 'Brush'),
  \ dotnet#method('set_ForegroundBrush(', 'class Brush value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('GlyphRunDrawing(', ')', 'void'),
  \ dotnet#method('GlyphRunDrawing(', 'class Brush foregroundBrush, GlyphRun glyphRun)', 'void'),
  \ dotnet#method('WalkCurrentValue(', 'class DrawingContextWalker ctx)', 'strict void'),
  \ dotnet#method('GlyphRunDrawing(', ')', 'static void .'),
  \ dotnet#prop('GlyphRun', 'GlyphRun'),
  \ dotnet#prop('ForegroundBrush', 'Brush'),
  \ ])

call dotnet#class('GradientBrush', 'Brush', [ 
  \ dotnet#method('Clone(', ')', 'GradientBrush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GradientBrush'),
  \ dotnet#method('get_ColorInterpolationMode(', ')', 'ColorInterpolationMode'),
  \ dotnet#method('set_ColorInterpolationMode(', 'ColorInterpolationMode value)', 'void'),
  \ dotnet#method('get_MappingMode(', ')', 'BrushMappingMode'),
  \ dotnet#method('set_MappingMode(', 'BrushMappingMode value)', 'void'),
  \ dotnet#method('get_SpreadMethod(', ')', 'GradientSpreadMethod'),
  \ dotnet#method('set_SpreadMethod(', 'GradientSpreadMethod value)', 'void'),
  \ dotnet#method('get_GradientStops(', ')', 'GradientStopCollection'),
  \ dotnet#method('set_GradientStops(', 'class GradientStopCollection value)', 'void'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('GradientBrush(', ')', 'void'),
  \ dotnet#method('GradientBrush(', 'class GradientStopCollection gradientStopCollection)', 'void'),
  \ dotnet#method('GradientBrush(', ')', 'static void .'),
  \ dotnet#prop('ColorInterpolationMode', 'ColorInterpolationMode'),
  \ dotnet#prop('MappingMode', 'BrushMappingMode'),
  \ dotnet#prop('SpreadMethod', 'GradientSpreadMethod'),
  \ dotnet#prop('GradientStops', 'GradientStopCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('GradientStop', 'Animatable', [ 
  \ dotnet#method('Clone(', ')', 'GradientStop'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GradientStop'),
  \ dotnet#method('get_Color(', ')', 'Color'),
  \ dotnet#method('set_Color(', 'Color value)', 'void'),
  \ dotnet#method('get_Offset(', ')', 'float64'),
  \ dotnet#method('set_Offset(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('GradientStop(', ')', 'void'),
  \ dotnet#method('GradientStop(', 'Color color, float64 offset)', 'void'),
  \ dotnet#method('GradientStop(', ')', 'static void .'),
  \ dotnet#prop('Color', 'Color'),
  \ dotnet#prop('Offset', 'float64'),
  \ ])

call dotnet#class('GradientStopCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'GradientStop'),
  \ dotnet#field('_list', 'GradientStopCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('GradientStopCollection(', 'class GradientStopCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'GradientStop'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'GradientStopCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GradientStopCollection'),
  \ dotnet#method('Add(', 'class GradientStop value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class GradientStop value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class GradientStop value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, GradientStop value)', 'void'),
  \ dotnet#method('Remove(', 'class GradientStop value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, GradientStop value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class GradientStop[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'GradientStopCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'GradientStop'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class GradientStop value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string source)', 'static GradientStopCollection'),
  \ dotnet#method('GradientStopCollection(', ')', 'void'),
  \ dotnet#method('GradientStopCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('GradientStopCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'GradientStop'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'GradientStopCollection'),
  \ ])

call dotnet#class('ImageBrush', 'TileBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'ImageBrush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ImageBrush'),
  \ dotnet#method('get_ImageSource(', ')', 'ImageSource'),
  \ dotnet#method('set_ImageSource(', 'class ImageSource value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('ImageBrush(', ')', 'void'),
  \ dotnet#method('ImageBrush(', 'class ImageSource image)', 'void'),
  \ dotnet#method('GetContentBounds(', '[out] Rect& contentBounds)', 'void'),
  \ dotnet#method('ImageBrush(', ')', 'static void .'),
  \ dotnet#prop('ImageSource', 'ImageSource'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('ImageDrawing', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'ImageDrawing'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ImageDrawing'),
  \ dotnet#method('get_ImageSource(', ')', 'ImageSource'),
  \ dotnet#method('set_ImageSource(', 'class ImageSource value)', 'void'),
  \ dotnet#method('get_Rect(', ')', 'Rect'),
  \ dotnet#method('set_Rect(', 'Rect value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('ImageDrawing(', ')', 'void'),
  \ dotnet#method('ImageDrawing(', 'class ImageSource imageSource, Rect rect)', 'void'),
  \ dotnet#method('WalkCurrentValue(', 'class DrawingContextWalker ctx)', 'strict void'),
  \ dotnet#method('ImageDrawing(', ')', 'static void .'),
  \ dotnet#prop('ImageSource', 'ImageSource'),
  \ dotnet#prop('Rect', 'Rect'),
  \ ])

call dotnet#class('Int32Collection', 'Freezable', [ 
  \ dotnet#field('_current', 'int32'),
  \ dotnet#field('_list', 'Int32Collection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('Int32Collection(', 'class Int32Collection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', 'int32'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'int32'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'Int32Collection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Int32Collection'),
  \ dotnet#method('Add(', 'int32 value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'int32 value)', 'bool'),
  \ dotnet#method('IndexOf(', 'int32 value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, int32 value)', 'void'),
  \ dotnet#method('Remove(', 'int32 value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'int32'),
  \ dotnet#method('set_Item(', 'int32 index, int32 value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'int32[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'Int32Collection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'int32'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'int32 value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string source)', 'static Int32Collection'),
  \ dotnet#method('Int32Collection(', ')', 'void'),
  \ dotnet#method('Int32Collection(', 'int32 capacity)', 'void'),
  \ dotnet#method('Int32Collection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'int32'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'Int32Collection'),
  \ ])

call dotnet#class('Int32CollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('Int32CollectionConverter(', ')', 'void'),
  \ ])

call dotnet#class('LinearGradientBrush', 'GradientBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'LinearGradientBrush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'LinearGradientBrush'),
  \ dotnet#method('get_StartPoint(', ')', 'Point'),
  \ dotnet#method('set_StartPoint(', 'Point value)', 'void'),
  \ dotnet#method('get_EndPoint(', ')', 'Point'),
  \ dotnet#method('set_EndPoint(', 'Point value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('LinearGradientBrush(', ')', 'void'),
  \ dotnet#method('LinearGradientBrush(', 'Color startColor, Color endColor, float64 angle)', 'void'),
  \ dotnet#method('LinearGradientBrush(', 'Color startColor, Color endColor, Point startPoint, Point endPoint)', 'void'),
  \ dotnet#method('LinearGradientBrush(', 'class GradientStopCollection gradientStopCollection)', 'void'),
  \ dotnet#method('LinearGradientBrush(', 'class GradientStopCollection gradientStopCollection, float64 angle)', 'void'),
  \ dotnet#method('LinearGradientBrush(', 'class GradientStopCollection gradientStopCollection, Point startPoint, Point endPoint)', 'void'),
  \ dotnet#method('LinearGradientBrush(', ')', 'static void .'),
  \ dotnet#prop('StartPoint', 'Point'),
  \ dotnet#prop('EndPoint', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('LineGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'LineGeometry'),
  \ dotnet#method('CloneCurrentValue(', ')', 'LineGeometry'),
  \ dotnet#method('get_StartPoint(', ')', 'Point'),
  \ dotnet#method('set_StartPoint(', 'Point value)', 'void'),
  \ dotnet#method('get_EndPoint(', ')', 'Point'),
  \ dotnet#method('set_EndPoint(', 'Point value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('LineGeometry(', ')', 'void'),
  \ dotnet#method('LineGeometry(', 'Point startPoint, Point endPoint)', 'void'),
  \ dotnet#method('LineGeometry(', 'Point startPoint, Point endPoint, Transform transform)', 'void'),
  \ dotnet#method('get_Bounds(', ')', ''),
  \ dotnet#method('GetBoundsInternal(', 'class Pen pen, Matrix worldMatrix, float64 tolerance, ToleranceType type)', 'strict'),
  \ dotnet#method('GetBoundsHelper(', 'class Pen pen, Matrix worldMatrix, Point pt1, Point pt2, Matrix geometryMatrix, float64 tolerance, ToleranceType type)', 'static Rect'),
  \ dotnet#method('ContainsInternal(', 'class Pen pen, Point hitPoint, float64 tolerance, ToleranceType type)', 'strict bool'),
  \ dotnet#method('IsEmpty(', ')', 'bool'),
  \ dotnet#method('MayHaveCurves(', ')', 'bool'),
  \ dotnet#method('GetArea(', 'float64 tolerance, ToleranceType type)', 'float64'),
  \ dotnet#method('GetAsPathGeometry(', ')', 'strict'),
  \ dotnet#method('GetTransformedFigureCollection(', 'class Transform transform)', 'strict'),
  \ dotnet#method('GetPathGeometryData(', ')', 'strict'),
  \ dotnet#method('LineGeometry(', ')', 'static void .'),
  \ dotnet#prop('StartPoint', 'Point'),
  \ dotnet#prop('EndPoint', 'Point'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('LineSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ')', 'LineSegment'),
  \ dotnet#method('CloneCurrentValue(', ')', 'LineSegment'),
  \ dotnet#method('get_Point(', ')', 'Point'),
  \ dotnet#method('set_Point(', 'Point value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('LineSegment(', ')', 'void'),
  \ dotnet#method('LineSegment(', 'Point point, bool isStroked)', 'void'),
  \ dotnet#method('LineSegment(', 'Point point, bool isStroked, bool isSmoothJoin)', 'void'),
  \ dotnet#method('AddToFigure(', 'Matrix matrix, PathFigure figure, Point& current)', 'strict void'),
  \ dotnet#method('SerializeData(', 'class StreamGeometryContext ctx)', 'strict void'),
  \ dotnet#method('IsCurved(', ')', 'strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('LineSegment(', ')', 'static void .'),
  \ dotnet#prop('Point', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('Transform', 'GeneralTransform', [ 
  \ dotnet#method('Clone(', ')', 'Transform'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Transform'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'abstract strict void'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'abstract strict'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCountCore(', ')', 'abstract strict int32'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'abstract strict'),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('Parse(', 'string source)', 'static Transform'),
  \ dotnet#method('Transform(', ')', 'void'),
  \ dotnet#method('get_Identity(', ')', 'static'),
  \ dotnet#method('get_Value(', ')', 'abstract'),
  \ dotnet#method('get_IsIdentity(', ')', 'abstract strict bool'),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('TransformRect(', 'Rect& rect)', 'strict void'),
  \ dotnet#method('MultiplyValueByMatrix(', 'Matrix& result, Matrix& matrixToMultiplyBy)', 'strict void'),
  \ dotnet#method('ConvertToD3DMATRIX(', 'D3DMATRIX* milMatrix)', 'strict void'),
  \ dotnet#method('GetTransformValue(', 'class Transform transform, [out] Matrix& currentTransformValue)', 'static void'),
  \ dotnet#method('TryTransform(', 'Point inPoint, [out] Point& result)', 'bool'),
  \ dotnet#method('TransformBounds(', 'Rect rect)', 'Rect'),
  \ dotnet#method('get_Inverse(', ')', ''),
  \ dotnet#method('get_AffineTransform(', ')', 'strict'),
  \ dotnet#method('Transform(', ')', 'static void .'),
  \ dotnet#prop('Identity', 'Transform'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ dotnet#prop('Inverse', 'GeneralTransform'),
  \ dotnet#prop('AffineTransform', 'Transform'),
  \ ])

call dotnet#class('MatrixTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'MatrixTransform'),
  \ dotnet#method('CloneCurrentValue(', ')', 'MatrixTransform'),
  \ dotnet#method('get_Matrix(', ')', 'Matrix'),
  \ dotnet#method('set_Matrix(', 'Matrix value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('MatrixTransform(', ')', 'void'),
  \ dotnet#method('MatrixTransform(', 'float64 m11, float64 m12, float64 m21, float64 m22, float64 offsetX, float64 offsetY)', 'void'),
  \ dotnet#method('MatrixTransform(', 'Matrix matrix)', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('get_IsIdentity(', ')', 'strict bool'),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('TransformRect(', 'Rect& rect)', 'strict void'),
  \ dotnet#method('MultiplyValueByMatrix(', 'Matrix& result, Matrix& matrixToMultiplyBy)', 'strict void'),
  \ dotnet#method('MatrixTransform(', ')', 'static void .'),
  \ dotnet#prop('Matrix', 'Matrix'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('MediaTimeline', 'Timeline', [ 
  \ dotnet#field('_context', 'ITypeDescriptorContext'),
  \ dotnet#method('Clone(', ')', 'MediaTimeline'),
  \ dotnet#method('CloneCurrentValue(', ')', 'MediaTimeline'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('set_Source(', 'class Uri value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('MediaTimeline(', 'class Uri source)', 'void'),
  \ dotnet#method('MediaTimeline(', 'class ITypeDescriptorContext context, Uri source)', 'void'),
  \ dotnet#method('MediaTimeline(', ')', 'void'),
  \ dotnet#method('MediaTimeline(', 'Nullable beginTime)', 'void'),
  \ dotnet#method('MediaTimeline(', 'Nullable beginTime, Duration duration)', 'void'),
  \ dotnet#method('MediaTimeline(', 'Nullable beginTime, Duration duration, RepeatBehavior repeatBehavior)', 'void'),
  \ dotnet#method('get_BaseUri(', ')', ''),
  \ dotnet#method('set_BaseUri(', 'class Uri value)', 'void '),
  \ dotnet#method('AllocateClock(', ')', 'famorassem Clock'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CreateClock(', ')', 'MediaClock'),
  \ dotnet#method('GetNaturalDurationCore(', 'class Clock clock)', 'Duration'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('MediaTimeline(', ')', 'static void .'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('BaseUri', 'Uri'),
  \ ])

call dotnet#class('PathFigure', 'Animatable', [ 
  \ dotnet#method('Clone(', ')', 'PathFigure'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PathFigure'),
  \ dotnet#method('get_StartPoint(', ')', 'Point'),
  \ dotnet#method('set_StartPoint(', 'Point value)', 'void'),
  \ dotnet#method('get_IsFilled(', ')', 'bool'),
  \ dotnet#method('set_IsFilled(', 'bool value)', 'void'),
  \ dotnet#method('get_Segments(', ')', 'PathSegmentCollection'),
  \ dotnet#method('set_Segments(', 'class PathSegmentCollection value)', 'void'),
  \ dotnet#method('get_IsClosed(', ')', 'bool'),
  \ dotnet#method('set_IsClosed(', 'bool value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('PathFigure(', ')', 'void'),
  \ dotnet#method('PathFigure(', 'Point start, IEnumerable segments, bool closed)', 'void'),
  \ dotnet#method('GetFlattenedPathFigure(', 'float64 tolerance, ToleranceType type)', 'PathFigure'),
  \ dotnet#method('GetFlattenedPathFigure(', ')', 'PathFigure'),
  \ dotnet#method('MayHaveCurves(', ')', 'bool'),
  \ dotnet#method('GetTransformedCopy(', 'Matrix matrix)', 'PathFigure'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('CanSerializeToString(', ')', 'bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('SerializeData(', 'class StreamGeometryContext ctx)', 'void'),
  \ dotnet#method('PathFigure(', ')', 'static void .'),
  \ dotnet#prop('StartPoint', 'Point'),
  \ dotnet#prop('IsFilled', 'bool'),
  \ dotnet#prop('Segments', 'PathSegmentCollection'),
  \ dotnet#prop('IsClosed', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('PathFigureCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'PathFigure'),
  \ dotnet#field('_list', 'PathFigureCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('PathFigureCollection(', 'class PathFigureCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'PathFigure'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'PathFigureCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PathFigureCollection'),
  \ dotnet#method('Add(', 'class PathFigure value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class PathFigure value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class PathFigure value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, PathFigure value)', 'void'),
  \ dotnet#method('Remove(', 'class PathFigure value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, PathFigure value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class PathFigure[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'PathFigureCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'PathFigure'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class PathFigure value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string source)', 'static PathFigureCollection'),
  \ dotnet#method('PathFigureCollection(', ')', 'void'),
  \ dotnet#method('PathFigureCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('PathFigureCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#method('CanSerializeToString(', ')', 'bool'),
  \ dotnet#prop('Item(int32)', 'PathFigure'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'PathFigureCollection'),
  \ ])

call dotnet#class('PathFigureCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('PathFigureCollectionConverter(', ')', 'void'),
  \ ])

call dotnet#class('PathGeometry', 'Geometry', [ 
  \ dotnet#field('_figures', 'PathFigureCollection'),
  \ dotnet#method('PathGeometry(', ')', 'void'),
  \ dotnet#method('get_Figures(', ')', '.method'),
  \ dotnet#method('AddFigureToList(', 'bool isFilled, bool isClosed, MilPoint2F* pPoints, uint32 pointCount, uint8* pSegTypes, uint32 segmentCount)', 'void'),
  \ dotnet#prop('Figures', 'PathFigureCollection'),
  \ dotnet#method('PathGeometry(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'bool isFilled, bool isClosed, MilPoint2F* pPoints, uint32 pointCount, uint8* pTypes, uint32 typeCount)', 'void'),
  \ dotnet#method('BeginInvoke(', 'bool isFilled, bool isClosed, MilPoint2F* pPoints, uint32 pointCount, uint8* pTypes, uint32 typeCount, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', 'void'),
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#field('_flags', 'PathGeometryInternalFlags'),
  \ dotnet#field('_bounds', 'MilRectD'),
  \ dotnet#method('Clone(', ')', 'PathGeometry'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PathGeometry'),
  \ dotnet#method('get_FillRule(', ')', 'FillRule'),
  \ dotnet#method('set_FillRule(', 'FillRule value)', 'void'),
  \ dotnet#method('get_Figures(', ')', 'PathFigureCollection'),
  \ dotnet#method('set_Figures(', 'class PathFigureCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('PathGeometry(', ')', 'void'),
  \ dotnet#method('PathGeometry(', 'class IEnumerable figures)', 'void'),
  \ dotnet#method('PathGeometry(', 'class IEnumerable figures, FillRule fillRule, Transform transform)', 'void'),
  \ dotnet#method('CreateFromGeometry(', 'class Geometry geometry)', 'static PathGeometry'),
  \ dotnet#method('ParsePathGeometryData(', 'Geometry/PathGeometryData pathData, CapacityStreamGeometryContext ctx)', 'static void'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('GetTransformedFigureCollection(', 'class Transform transform)', 'strict'),
  \ dotnet#method('AddGeometry(', 'class Geometry geometry)', 'void'),
  \ dotnet#method('GetPointAtFractionLength(', 'float64 progress, [out] Point& point, [out] Point& tangent)', 'void'),
  \ dotnet#method('InternalCombine(', 'class Geometry geometry1, Geometry geometry2, GeometryCombineMode mode, Transform transform, float64 tolerance, ToleranceType type)', 'static PathGeometry'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('get_Bounds(', ')', ''),
  \ dotnet#method('GetPathBounds(', 'Geometry/PathGeometryData pathData, Pen pen, Matrix worldMatrix, float64 tolerance, ToleranceType type, bool skipHollows)', 'static Rect'),
  \ dotnet#method('GetPathBoundsAsRB(', 'Geometry/PathGeometryData pathData, Pen pen, Matrix worldMatrix, float64 tolerance, ToleranceType type, bool skipHollows)', 'static MilRectD'),
  \ dotnet#method('HitTestWithPathGeometry(', 'class Geometry geometry1, Geometry geometry2, float64 tolerance, ToleranceType type)', 'static IntersectionDetail'),
  \ dotnet#method('IsEmpty(', ')', 'bool'),
  \ dotnet#method('MayHaveCurves(', ')', 'bool'),
  \ dotnet#method('GetAsPathGeometry(', ')', 'strict'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('SetDirty(', ')', 'void'),
  \ dotnet#method('GetPathGeometryData(', ')', 'strict'),
  \ dotnet#method('TransformPropertyChangedHook(', 'DependencyPropertyChangedEventArgs e)', 'strict void'),
  \ dotnet#method('FiguresPropertyChangedHook(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('PathGeometry(', ')', 'static void .'),
  \ dotnet#prop('FillRule', 'FillRule'),
  \ dotnet#prop('Figures', 'PathFigureCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('PathSegmentCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'PathSegment'),
  \ dotnet#field('_list', 'PathSegmentCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('PathSegmentCollection(', 'class PathSegmentCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'PathSegment'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'PathSegmentCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PathSegmentCollection'),
  \ dotnet#method('Add(', 'class PathSegment value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class PathSegment value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class PathSegment value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, PathSegment value)', 'void'),
  \ dotnet#method('Remove(', 'class PathSegment value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, PathSegment value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class PathSegment[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'PathSegmentCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'PathSegment'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class PathSegment value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('PathSegmentCollection(', ')', 'void'),
  \ dotnet#method('PathSegmentCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('PathSegmentCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#method('CanSerializeToString(', ')', 'bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#prop('Item(int32)', 'PathSegment'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'PathSegmentCollection'),
  \ ])

call dotnet#class('Pen', 'Animatable', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'Pen'),
  \ dotnet#method('CloneCurrentValue(', ')', 'Pen'),
  \ dotnet#method('get_Brush(', ')', 'Brush'),
  \ dotnet#method('set_Brush(', 'class Brush value)', 'void'),
  \ dotnet#method('get_Thickness(', ')', 'float64'),
  \ dotnet#method('set_Thickness(', 'float64 value)', 'void'),
  \ dotnet#method('get_StartLineCap(', ')', 'PenLineCap'),
  \ dotnet#method('set_StartLineCap(', 'PenLineCap value)', 'void'),
  \ dotnet#method('get_EndLineCap(', ')', 'PenLineCap'),
  \ dotnet#method('set_EndLineCap(', 'PenLineCap value)', 'void'),
  \ dotnet#method('get_DashCap(', ')', 'PenLineCap'),
  \ dotnet#method('set_DashCap(', 'PenLineCap value)', 'void'),
  \ dotnet#method('get_LineJoin(', ')', 'PenLineJoin'),
  \ dotnet#method('set_LineJoin(', 'PenLineJoin value)', 'void'),
  \ dotnet#method('get_MiterLimit(', ')', 'float64'),
  \ dotnet#method('set_MiterLimit(', 'float64 value)', 'void'),
  \ dotnet#method('get_DashStyle(', ')', 'DashStyle'),
  \ dotnet#method('set_DashStyle(', 'class DashStyle value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('Pen(', ')', 'void'),
  \ dotnet#method('Pen(', 'class Brush brush, float64 thickness)', 'void'),
  \ dotnet#method('Pen(', 'class Brush brush, float64 thickness, PenLineCap startLineCap, PenLineCap endLineCap, PenLineCap dashCap, PenLineJoin lineJoin, float64 miterLimit, DashStyle dashStyle)', 'void'),
  \ dotnet#method('GetBasicPenData(', 'MIL_PEN_DATA* pData, [out] float64[]& dashArray)', 'void'),
  \ dotnet#method('get_DoesNotContainGaps(', ')', 'bool'),
  \ dotnet#method('ContributesToBounds(', 'class Pen pen)', 'static bool'),
  \ dotnet#method('Pen(', ')', 'static void .'),
  \ dotnet#prop('Brush', 'Brush'),
  \ dotnet#prop('Thickness', 'float64'),
  \ dotnet#prop('StartLineCap', 'PenLineCap'),
  \ dotnet#prop('EndLineCap', 'PenLineCap'),
  \ dotnet#prop('DashCap', 'PenLineCap'),
  \ dotnet#prop('LineJoin', 'PenLineJoin'),
  \ dotnet#prop('MiterLimit', 'float64'),
  \ dotnet#prop('DashStyle', 'DashStyle'),
  \ dotnet#prop('DoesNotContainGaps', 'bool'),
  \ ])

call dotnet#class('PointCollection', 'Freezable', [ 
  \ dotnet#field('_current', 'Point'),
  \ dotnet#field('_list', 'PointCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('PointCollection(', 'class PointCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Point'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'PointCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PointCollection'),
  \ dotnet#method('Add(', 'Point value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'Point value)', 'bool'),
  \ dotnet#method('IndexOf(', 'Point value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, Point value)', 'void'),
  \ dotnet#method('Remove(', 'Point value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Point value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'Point[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'PointCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'Point'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'Point value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string source)', 'static PointCollection'),
  \ dotnet#method('PointCollection(', ')', 'void'),
  \ dotnet#method('PointCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('PointCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#method('DeserializeFrom(', 'class BinaryReader reader)', 'static object'),
  \ dotnet#prop('Item(int32)', 'Point'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'PointCollection'),
  \ ])

call dotnet#class('PointCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('PointCollectionConverter(', ')', 'void'),
  \ ])

call dotnet#class('PolyBezierSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ')', 'PolyBezierSegment'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PolyBezierSegment'),
  \ dotnet#method('get_Points(', ')', 'PointCollection'),
  \ dotnet#method('set_Points(', 'class PointCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('PolyBezierSegment(', ')', 'void'),
  \ dotnet#method('PolyBezierSegment(', 'class IEnumerable points, bool isStroked)', 'void'),
  \ dotnet#method('PolyBezierSegment(', 'class IEnumerable points, bool isStroked, bool isSmoothJoin)', 'void'),
  \ dotnet#method('AddToFigure(', 'Matrix matrix, PathFigure figure, Point& current)', 'strict void'),
  \ dotnet#method('IsEmpty(', ')', 'strict bool'),
  \ dotnet#method('IsCurved(', ')', 'strict bool'),
  \ dotnet#method('SerializeData(', 'class StreamGeometryContext ctx)', 'strict void'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('PolyBezierSegment(', ')', 'static void .'),
  \ dotnet#prop('Points', 'PointCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('PolyLineSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ')', 'PolyLineSegment'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PolyLineSegment'),
  \ dotnet#method('get_Points(', ')', 'PointCollection'),
  \ dotnet#method('set_Points(', 'class PointCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('PolyLineSegment(', ')', 'void'),
  \ dotnet#method('PolyLineSegment(', 'class IEnumerable points, bool isStroked)', 'void'),
  \ dotnet#method('PolyLineSegment(', 'class IEnumerable points, bool isStroked, bool isSmoothJoin)', 'void'),
  \ dotnet#method('AddToFigure(', 'Matrix matrix, PathFigure figure, Point& current)', 'strict void'),
  \ dotnet#method('IsEmpty(', ')', 'strict bool'),
  \ dotnet#method('IsCurved(', ')', 'strict bool'),
  \ dotnet#method('SerializeData(', 'class StreamGeometryContext ctx)', 'strict void'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('PolyLineSegment(', ')', 'static void .'),
  \ dotnet#prop('Points', 'PointCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('PolyQuadraticBezierSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ')', 'PolyQuadraticBezierSegment'),
  \ dotnet#method('CloneCurrentValue(', ')', 'PolyQuadraticBezierSegment'),
  \ dotnet#method('get_Points(', ')', 'PointCollection'),
  \ dotnet#method('set_Points(', 'class PointCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('PolyQuadraticBezierSegment(', ')', 'void'),
  \ dotnet#method('PolyQuadraticBezierSegment(', 'class IEnumerable points, bool isStroked)', 'void'),
  \ dotnet#method('PolyQuadraticBezierSegment(', 'class IEnumerable points, bool isStroked, bool isSmoothJoin)', 'void'),
  \ dotnet#method('AddToFigure(', 'Matrix matrix, PathFigure figure, Point& current)', 'strict void'),
  \ dotnet#method('IsEmpty(', ')', 'strict bool'),
  \ dotnet#method('IsCurved(', ')', 'strict bool'),
  \ dotnet#method('SerializeData(', 'class StreamGeometryContext ctx)', 'strict void'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('PolyQuadraticBezierSegment(', ')', 'static void .'),
  \ dotnet#prop('Points', 'PointCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('QuadraticBezierSegment', 'PathSegment', [ 
  \ dotnet#method('Clone(', ')', 'QuadraticBezierSegment'),
  \ dotnet#method('CloneCurrentValue(', ')', 'QuadraticBezierSegment'),
  \ dotnet#method('get_Point1(', ')', 'Point'),
  \ dotnet#method('set_Point1(', 'Point value)', 'void'),
  \ dotnet#method('get_Point2(', ')', 'Point'),
  \ dotnet#method('set_Point2(', 'Point value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('QuadraticBezierSegment(', ')', 'void'),
  \ dotnet#method('QuadraticBezierSegment(', 'Point point1, Point point2, bool isStroked)', 'void'),
  \ dotnet#method('QuadraticBezierSegment(', 'Point point1, Point point2, bool isStroked, bool isSmoothJoin)', 'void'),
  \ dotnet#method('AddToFigure(', 'Matrix matrix, PathFigure figure, Point& current)', 'strict void'),
  \ dotnet#method('SerializeData(', 'class StreamGeometryContext ctx)', 'strict void'),
  \ dotnet#method('IsCurved(', ')', 'strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('QuadraticBezierSegment(', ')', 'static void .'),
  \ dotnet#prop('Point1', 'Point'),
  \ dotnet#prop('Point2', 'Point'),
  \ ])

call dotnet#class('RadialGradientBrush', 'GradientBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'RadialGradientBrush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'RadialGradientBrush'),
  \ dotnet#method('get_Center(', ')', 'Point'),
  \ dotnet#method('set_Center(', 'Point value)', 'void'),
  \ dotnet#method('get_RadiusX(', ')', 'float64'),
  \ dotnet#method('set_RadiusX(', 'float64 value)', 'void'),
  \ dotnet#method('get_RadiusY(', ')', 'float64'),
  \ dotnet#method('set_RadiusY(', 'float64 value)', 'void'),
  \ dotnet#method('get_GradientOrigin(', ')', 'Point'),
  \ dotnet#method('set_GradientOrigin(', 'Point value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('RadialGradientBrush(', ')', 'void'),
  \ dotnet#method('RadialGradientBrush(', 'Color startColor, Color endColor)', 'void'),
  \ dotnet#method('RadialGradientBrush(', 'class GradientStopCollection gradientStopCollection)', 'void'),
  \ dotnet#method('RadialGradientBrush(', ')', 'static void .'),
  \ dotnet#prop('Center', 'Point'),
  \ dotnet#prop('RadiusX', 'float64'),
  \ dotnet#prop('RadiusY', 'float64'),
  \ dotnet#prop('GradientOrigin', 'Point'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('RectangleGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'RectangleGeometry'),
  \ dotnet#method('CloneCurrentValue(', ')', 'RectangleGeometry'),
  \ dotnet#method('get_RadiusX(', ')', 'float64'),
  \ dotnet#method('set_RadiusX(', 'float64 value)', 'void'),
  \ dotnet#method('get_RadiusY(', ')', 'float64'),
  \ dotnet#method('set_RadiusY(', 'float64 value)', 'void'),
  \ dotnet#method('get_Rect(', ')', 'Rect'),
  \ dotnet#method('set_Rect(', 'Rect value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('RectangleGeometry(', ')', 'void'),
  \ dotnet#method('RectangleGeometry(', 'Rect rect)', 'void'),
  \ dotnet#method('RectangleGeometry(', 'Rect rect, float64 radiusX, float64 radiusY)', 'void'),
  \ dotnet#method('RectangleGeometry(', 'Rect rect, float64 radiusX, float64 radiusY, Transform transform)', 'void'),
  \ dotnet#method('get_Bounds(', ')', ''),
  \ dotnet#method('AreClose(', 'class Geometry geometry)', 'strict bool'),
  \ dotnet#method('GetBoundsInternal(', 'class Pen pen, Matrix worldMatrix, float64 tolerance, ToleranceType type)', 'strict'),
  \ dotnet#method('GetBoundsHelper(', 'class Pen pen, Matrix worldMatrix, Rect rect, float64 radiusX, float64 radiusY, Matrix geometryMatrix, float64 tolerance, ToleranceType type)', 'static Rect'),
  \ dotnet#method('ContainsInternal(', 'class Pen pen, Point hitPoint, float64 tolerance, ToleranceType type)', 'strict bool'),
  \ dotnet#method('GetArea(', 'float64 tolerance, ToleranceType type)', 'float64'),
  \ dotnet#method('GetTransformedFigureCollection(', 'class Transform transform)', 'strict'),
  \ dotnet#method('IsRounded(', 'float64 radiusX, float64 radiusY)', 'static bool'),
  \ dotnet#method('IsRounded(', ')', 'bool'),
  \ dotnet#method('GetAsPathGeometry(', ')', 'strict'),
  \ dotnet#method('GetPathGeometryData(', ')', 'strict'),
  \ dotnet#method('IsEmpty(', ')', 'bool'),
  \ dotnet#method('MayHaveCurves(', ')', 'bool'),
  \ dotnet#method('RectangleGeometry(', ')', 'static void .'),
  \ dotnet#prop('RadiusX', 'float64'),
  \ dotnet#prop('RadiusY', 'float64'),
  \ dotnet#prop('Rect', 'Rect'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('RotateTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'RotateTransform'),
  \ dotnet#method('CloneCurrentValue(', ')', 'RotateTransform'),
  \ dotnet#method('get_Angle(', ')', 'float64'),
  \ dotnet#method('set_Angle(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterX(', ')', 'float64'),
  \ dotnet#method('set_CenterX(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterY(', ')', 'float64'),
  \ dotnet#method('set_CenterY(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('RotateTransform(', ')', 'void'),
  \ dotnet#method('RotateTransform(', 'float64 angle)', 'void'),
  \ dotnet#method('RotateTransform(', 'float64 angle, float64 centerX, float64 centerY)', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('get_IsIdentity(', ')', 'strict bool'),
  \ dotnet#method('RotateTransform(', ')', 'static void .'),
  \ dotnet#prop('Angle', 'float64'),
  \ dotnet#prop('CenterX', 'float64'),
  \ dotnet#prop('CenterY', 'float64'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('ScaleTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'ScaleTransform'),
  \ dotnet#method('CloneCurrentValue(', ')', 'ScaleTransform'),
  \ dotnet#method('get_ScaleX(', ')', 'float64'),
  \ dotnet#method('set_ScaleX(', 'float64 value)', 'void'),
  \ dotnet#method('get_ScaleY(', ')', 'float64'),
  \ dotnet#method('set_ScaleY(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterX(', ')', 'float64'),
  \ dotnet#method('set_CenterX(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterY(', ')', 'float64'),
  \ dotnet#method('set_CenterY(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('ScaleTransform(', ')', 'void'),
  \ dotnet#method('ScaleTransform(', 'float64 scaleX, float64 scaleY)', 'void'),
  \ dotnet#method('ScaleTransform(', 'float64 scaleX, float64 scaleY, float64 centerX, float64 centerY)', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('get_IsIdentity(', ')', 'strict bool'),
  \ dotnet#method('TransformRect(', 'Rect& rect)', 'strict void'),
  \ dotnet#method('MultiplyValueByMatrix(', 'Matrix& result, Matrix& matrixToMultiplyBy)', 'strict void'),
  \ dotnet#method('ScaleTransform(', ')', 'static void .'),
  \ dotnet#prop('ScaleX', 'float64'),
  \ dotnet#prop('ScaleY', 'float64'),
  \ dotnet#prop('CenterX', 'float64'),
  \ dotnet#prop('CenterY', 'float64'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('SkewTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'SkewTransform'),
  \ dotnet#method('CloneCurrentValue(', ')', 'SkewTransform'),
  \ dotnet#method('get_AngleX(', ')', 'float64'),
  \ dotnet#method('set_AngleX(', 'float64 value)', 'void'),
  \ dotnet#method('get_AngleY(', ')', 'float64'),
  \ dotnet#method('set_AngleY(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterX(', ')', 'float64'),
  \ dotnet#method('set_CenterX(', 'float64 value)', 'void'),
  \ dotnet#method('get_CenterY(', ')', 'float64'),
  \ dotnet#method('set_CenterY(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('SkewTransform(', ')', 'void'),
  \ dotnet#method('SkewTransform(', 'float64 angleX, float64 angleY)', 'void'),
  \ dotnet#method('SkewTransform(', 'float64 angleX, float64 angleY, float64 centerX, float64 centerY)', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('get_IsIdentity(', ')', 'strict bool'),
  \ dotnet#method('SkewTransform(', ')', 'static void .'),
  \ dotnet#prop('AngleX', 'float64'),
  \ dotnet#prop('AngleY', 'float64'),
  \ dotnet#prop('CenterX', 'float64'),
  \ dotnet#prop('CenterY', 'float64'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('SolidColorBrush', 'Brush', [ 
  \ dotnet#field('value__', 'uint8'),
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'SolidColorBrush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'SolidColorBrush'),
  \ dotnet#method('get_Color(', ')', 'Color'),
  \ dotnet#method('set_Color(', 'Color value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('SolidColorBrush(', ')', 'void'),
  \ dotnet#method('SolidColorBrush(', 'Color color)', 'void'),
  \ dotnet#method('SerializeOn(', 'class BinaryWriter writer, string stringValue)', 'static bool'),
  \ dotnet#method('DeserializeFrom(', 'class BinaryReader reader)', 'static object'),
  \ dotnet#method('DeserializeFrom(', 'class BinaryReader reader, ITypeDescriptorContext context)', 'static object'),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('SolidColorBrush(', ')', 'static void .'),
  \ dotnet#prop('Color', 'Color'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('StreamGeometry', 'Geometry', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'StreamGeometry'),
  \ dotnet#method('CloneCurrentValue(', ')', 'StreamGeometry'),
  \ dotnet#method('get_FillRule(', ')', 'FillRule'),
  \ dotnet#method('set_FillRule(', 'FillRule value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('StreamGeometry(', ')', 'void'),
  \ dotnet#method('Open(', ')', 'StreamGeometryContext'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('IsEmpty(', ')', 'bool'),
  \ dotnet#method('SetDirty(', ')', 'void'),
  \ dotnet#method('get_Bounds(', ')', ''),
  \ dotnet#method('MayHaveCurves(', ')', 'bool'),
  \ dotnet#method('HasHollows(', ')', 'bool'),
  \ dotnet#method('HasGaps(', ')', 'bool'),
  \ dotnet#method('Close(', 'uint8[] _buffer)', 'void'),
  \ dotnet#method('OnChanged(', ')', 'void'),
  \ dotnet#method('GetAsPathGeometry(', ')', 'strict'),
  \ dotnet#method('GetTransformedFigureCollection(', 'class Transform transform)', 'strict'),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'strict string'),
  \ dotnet#method('GetPathGeometryData(', ')', 'strict'),
  \ dotnet#method('TransformPropertyChangedHook(', 'DependencyPropertyChangedEventArgs e)', 'strict void'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('StreamGeometry(', ')', 'static void .'),
  \ dotnet#prop('FillRule', 'FillRule'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('TextEffect', 'Animatable', [ 
  \ dotnet#method('Clone(', ')', 'TextEffect'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TextEffect'),
  \ dotnet#method('get_Transform(', ')', 'Transform'),
  \ dotnet#method('set_Transform(', 'class Transform value)', 'void'),
  \ dotnet#method('get_Clip(', ')', 'Geometry'),
  \ dotnet#method('set_Clip(', 'class Geometry value)', 'void'),
  \ dotnet#method('get_Foreground(', ')', 'Brush'),
  \ dotnet#method('set_Foreground(', 'class Brush value)', 'void'),
  \ dotnet#method('get_PositionStart(', ')', 'int32'),
  \ dotnet#method('set_PositionStart(', 'int32 value)', 'void'),
  \ dotnet#method('get_PositionCount(', ')', 'int32'),
  \ dotnet#method('set_PositionCount(', 'int32 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('TextEffect(', 'class Transform transform, Brush foreground, Geometry clip, int32 positionStart, int32 positionCount)', 'void'),
  \ dotnet#method('TextEffect(', ')', 'void'),
  \ dotnet#method('TextEffect(', ')', 'static void .'),
  \ dotnet#prop('Transform', 'Transform'),
  \ dotnet#prop('Clip', 'Geometry'),
  \ dotnet#prop('Foreground', 'Brush'),
  \ dotnet#prop('PositionStart', 'int32'),
  \ dotnet#prop('PositionCount', 'int32'),
  \ ])

call dotnet#class('TextEffectCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'TextEffect'),
  \ dotnet#field('_list', 'TextEffectCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('TextEffectCollection(', 'class TextEffectCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'TextEffect'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'TextEffectCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TextEffectCollection'),
  \ dotnet#method('Add(', 'class TextEffect value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class TextEffect value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class TextEffect value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, TextEffect value)', 'void'),
  \ dotnet#method('Remove(', 'class TextEffect value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, TextEffect value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class TextEffect[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'TextEffectCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'TextEffect'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class TextEffect value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('TextEffectCollection(', ')', 'void'),
  \ dotnet#method('TextEffectCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('TextEffectCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'TextEffect'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'TextEffectCollection'),
  \ ])

call dotnet#class('TransformCollection', 'Animatable', [ 
  \ dotnet#field('_current', 'Transform'),
  \ dotnet#field('_list', 'TransformCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('TransformCollection(', 'class TransformCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Transform'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'TransformCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TransformCollection'),
  \ dotnet#method('Add(', 'class Transform value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'class Transform value)', 'bool'),
  \ dotnet#method('IndexOf(', 'class Transform value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, Transform value)', 'void'),
  \ dotnet#method('Remove(', 'class Transform value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, Transform value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'class Transform[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'TransformCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'Transform'),
  \ dotnet#method('OnInheritanceContextChangedCore(', 'class EventArgs args)', 'strict void'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'class Transform value)', 'int32'),
  \ dotnet#method('add_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('remove_ItemInserted(', 'class ItemInsertedHandler value)', 'void'),
  \ dotnet#method('add_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('remove_ItemRemoved(', 'class ItemRemovedHandler value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('FreezeCore(', 'bool isChecking)', 'bool'),
  \ dotnet#method('TransformCollection(', ')', 'void'),
  \ dotnet#method('TransformCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('TransformCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#event('ItemInserted', 'ItemInsertedHandler'),
  \ dotnet#event('ItemRemoved', 'ItemRemovedHandler'),
  \ dotnet#prop('Item(int32)', 'Transform'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'TransformCollection'),
  \ ])

call dotnet#class('TransformConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('TransformConverter(', ')', 'void'),
  \ ])

call dotnet#class('TransformGroup', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'TransformGroup'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TransformGroup'),
  \ dotnet#method('get_Children(', ')', 'TransformCollection'),
  \ dotnet#method('set_Children(', 'class TransformCollection value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('TransformGroup(', ')', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('get_IsIdentity(', ')', 'strict bool'),
  \ dotnet#method('CanSerializeToString(', ')', 'strict bool'),
  \ dotnet#method('TransformGroup(', ')', 'static void .'),
  \ dotnet#prop('Children', 'TransformCollection'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('TranslateTransform', 'Transform', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'TranslateTransform'),
  \ dotnet#method('CloneCurrentValue(', ')', 'TranslateTransform'),
  \ dotnet#method('get_X(', ')', 'float64'),
  \ dotnet#method('set_X(', 'float64 value)', 'void'),
  \ dotnet#method('get_Y(', ')', 'float64'),
  \ dotnet#method('set_Y(', 'float64 value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('TranslateTransform(', ')', 'void'),
  \ dotnet#method('TranslateTransform(', 'float64 offsetX, float64 offsetY)', 'void'),
  \ dotnet#method('get_Value(', ')', ''),
  \ dotnet#method('get_IsIdentity(', ')', 'strict bool'),
  \ dotnet#method('TransformRect(', 'Rect& rect)', 'strict void'),
  \ dotnet#method('MultiplyValueByMatrix(', 'Matrix& result, Matrix& matrixToMultiplyBy)', 'strict void'),
  \ dotnet#method('TranslateTransform(', ')', 'static void .'),
  \ dotnet#prop('X', 'float64'),
  \ dotnet#prop('Y', 'float64'),
  \ dotnet#prop('Value', 'Matrix'),
  \ dotnet#prop('IsIdentity', 'bool'),
  \ ])

call dotnet#class('VVectorCollectionCollection', 'Freezable', [ 
  \ dotnet#field('_current', 'VVectorCollection'),
  \ dotnet#field('_list', 'VVectorCollectionCollection'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#method('VectorCollection(', 'class VVectorCollectionCollection list)', 'void'),
  \ dotnet#method('Dispose(', ')', 'void '),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'VVectorCollection'),
  \ dotnet#field('_collection', 'FrugalStructList'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#method('Clone(', ')', 'VVectorCollectionCollection'),
  \ dotnet#method('CloneCurrentValue(', ')', 'VVectorCollectionCollection'),
  \ dotnet#method('Add(', 'VVectorCollection value)', 'void'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Contains(', 'VVectorCollection value)', 'bool'),
  \ dotnet#method('IndexOf(', 'VVectorCollection value)', 'int32'),
  \ dotnet#method('Insert(', 'int32 index, VVectorCollection value)', 'void'),
  \ dotnet#method('Remove(', 'VVectorCollection value)', 'bool'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveAtWithoutFiringPublicEvents(', 'int32 index)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', ''),
  \ dotnet#method('set_Item(', 'int32 index, VVectorCollection value)', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('CopyTo(', 'VVectorCollection[] array, int32 index)', 'void'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool get_IsReadOnly()'),
  \ dotnet#method('GetEnumerator(', ')', 'VVectorCollectionCollection/Enumerator'),
  \ dotnet#method('GetEnumerator(', ')', 'GetEnumerator()'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool '),
  \ dotnet#method('get_IsFixedSize(', ')', 'bool '),
  \ dotnet#method('get_Item(', 'int32 index)', 'object '),
  \ dotnet#method('set_Item(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Add(', 'object value)', 'int32 '),
  \ dotnet#method('Contains(', 'object value)', 'bool '),
  \ dotnet#method('IndexOf(', 'object value)', 'int32 '),
  \ dotnet#method('Insert(', 'int32 index, object value)', 'void '),
  \ dotnet#method('Remove(', 'object value)', 'void '),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void '),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool '),
  \ dotnet#method('get_SyncRoot(', ')', 'object '),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('get_Empty(', ')', 'static'),
  \ dotnet#method('Internal_GetItem(', 'int32 i)', 'VVectorCollection'),
  \ dotnet#method('AddWithoutFiringPublicEvents(', 'VVectorCollection value)', 'int32'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('GetCurrentValueAsFrozenCore(', 'class Freezable source)', 'void'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('ToString(', 'class IFormatProvider provider)', 'string'),
  \ dotnet#method('ToString(', 'string format, IFormatProvider provider)', 'string '),
  \ dotnet#method('ConvertToString(', 'string format, IFormatProvider provider)', 'string'),
  \ dotnet#method('Parse(', 'string source)', 'static VVectorCollectionCollection'),
  \ dotnet#method('VectorCollection(', ')', 'void'),
  \ dotnet#method('VectorCollection(', 'int32 capacity)', 'void'),
  \ dotnet#method('VectorCollection(', 'class IEnumerable collection)', 'void'),
  \ dotnet#prop('Item(int32)', 'VVectorCollection'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsFixedSize', 'bool'),
  \ dotnet#prop('Item(int32)', 'object'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('Empty', 'VVectorCollectionCollection'),
  \ ])

call dotnet#class('VVectorCollectionConverterCollectionConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('VectorCollectionConverter(', ')', 'void'),
  \ ])

call dotnet#class('VisualBrush', 'TileBrush', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'VisualBrush'),
  \ dotnet#method('CloneCurrentValue(', ')', 'VisualBrush'),
  \ dotnet#method('get_Visual(', ')', 'Visual'),
  \ dotnet#method('set_Visual(', 'class Visual value)', 'void'),
  \ dotnet#method('get_AutoLayoutContent(', ')', 'bool'),
  \ dotnet#method('set_AutoLayoutContent(', 'bool value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('get_EffectiveValuesInitialSize(', ')', 'strict int32'),
  \ dotnet#method('VisualBrush(', ')', 'void'),
  \ dotnet#method('VisualBrush(', 'class Visual visual)', 'void'),
  \ dotnet#method('FireOnChanged(', ')', 'void '),
  \ dotnet#method('RenderForCyclicBrush(', 'class DUCE/Channel channel, bool skipChannelCheck)', 'void '),
  \ dotnet#method('AddRefResource(', 'class Visual visual, DUCE/Channel channel)', 'void'),
  \ dotnet#method('ReleaseResource(', 'class Visual visual, DUCE/Channel channel)', 'void'),
  \ dotnet#method('OnPropertyChanged(', 'DependencyPropertyChangedEventArgs e)', 'void'),
  \ dotnet#method('Enter(', ')', 'bool'),
  \ dotnet#method('Exit(', ')', 'void'),
  \ dotnet#method('GetContentBounds(', '[out] Rect& contentBounds)', 'void'),
  \ dotnet#method('VisualBrush(', ')', 'static void .'),
  \ dotnet#prop('Visual', 'Visual'),
  \ dotnet#prop('AutoLayoutContent', 'bool'),
  \ dotnet#prop('EffectiveValuesInitialSize', 'int32'),
  \ ])

call dotnet#class('VideoDrawing', 'Drawing', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'VideoDrawing'),
  \ dotnet#method('CloneCurrentValue(', ')', 'VideoDrawing'),
  \ dotnet#method('get_Player(', ')', 'MediaPlayer'),
  \ dotnet#method('set_Player(', 'class MediaPlayer value)', 'void'),
  \ dotnet#method('get_Rect(', ')', 'Rect'),
  \ dotnet#method('set_Rect(', 'Rect value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'strict void'),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'strict'),
  \ dotnet#method('GetChannelCountCore(', ')', 'strict int32'),
  \ dotnet#method('GetChannelCore(', 'int32 index)', 'strict'),
  \ dotnet#method('VideoDrawing(', ')', 'void'),
  \ dotnet#method('WalkCurrentValue(', 'class DrawingContextWalker ctx)', 'strict void'),
  \ dotnet#method('VideoDrawing(', ')', 'static void .'),
  \ dotnet#prop('Player', 'MediaPlayer'),
  \ dotnet#prop('Rect', 'Rect'),
  \ ])

call dotnet#class('GuidelineSet', 'Animatable', [ 
  \ dotnet#field('_duceResource', 'DUCE/MultiChannelResource'),
  \ dotnet#method('Clone(', ')', 'GuidelineSet'),
  \ dotnet#method('CloneCurrentValue(', ')', 'GuidelineSet'),
  \ dotnet#method('get_GuidelinesX(', ')', 'DoubleCollection'),
  \ dotnet#method('set_GuidelinesX(', 'class DoubleCollection value)', 'void'),
  \ dotnet#method('get_GuidelinesY(', ')', 'DoubleCollection'),
  \ dotnet#method('set_GuidelinesY(', 'class DoubleCollection value)', 'void'),
  \ dotnet#method('get_IsDynamic(', ')', 'bool'),
  \ dotnet#method('set_IsDynamic(', 'bool value)', 'void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('GuidelineSet(', ')', 'void'),
  \ dotnet#method('GuidelineSet(', 'float64[] guidelinesX, float64[] guidelinesY, bool isDynamic)', 'void'),
  \ dotnet#method('GuidelineSet(', 'float64[] guidelinesX, float64[] guidelinesY)', 'void'),
  \ dotnet#method('GuidelineSet(', ')', 'static void .'),
  \ dotnet#prop('GuidelinesX', 'DoubleCollection'),
  \ dotnet#prop('GuidelinesY', 'DoubleCollection'),
  \ dotnet#prop('IsDynamic', 'bool'),
  \ ])

call dotnet#class('HitTestParameters', 'Object', [ 
  \ dotnet#method('HitTestParameters(', ')', 'void'),
  \ ])

call dotnet#class('GeometryHitTestParameters', 'HitTestParameters', [ 
  \ dotnet#method('GeometryHitTestParameters(', 'class Geometry geometry)', 'void'),
  \ dotnet#method('get_HitGeometry(', ')', 'Geometry'),
  \ dotnet#method('get_InternalHitGeometry(', ')', '.method'),
  \ dotnet#method('get_Bounds(', ')', '.method'),
  \ dotnet#method('PushMatrix(', 'Matrix& newMatrix)', 'void'),
  \ dotnet#method('PopMatrix(', ')', 'void'),
  \ dotnet#method('EmergencyRestoreOriginalTransform(', ')', 'void'),
  \ dotnet#prop('HitGeometry', 'Geometry'),
  \ dotnet#prop('InternalHitGeometry', 'PathGeometry'),
  \ dotnet#prop('Bounds', 'Rect'),
  \ ])

call dotnet#class('HitTestResult', 'Object', [ 
  \ dotnet#method('HitTestResult(', 'class DependencyObject visualHit)', 'void'),
  \ dotnet#method('get_VisualHit(', ')', 'DependencyObject'),
  \ dotnet#prop('VisualHit', 'DependencyObject'),
  \ ])

call dotnet#class('GeometryHitTestResult', 'HitTestResult', [ 
  \ dotnet#method('GeometryHitTestResult(', 'class Visual visualHit, IntersectionDetail intersectionDetail)', 'void'),
  \ dotnet#method('get_IntersectionDetail(', ')', 'IntersectionDetail'),
  \ dotnet#method('get_VisualHit(', ')', 'Visual'),
  \ dotnet#prop('IntersectionDetail', 'IntersectionDetail'),
  \ dotnet#prop('VisualHit', 'Visual'),
  \ ])

call dotnet#class('GlyphRun', 'Object', [ 
  \ dotnet#field('_baseVGlyphRunX', 'float64'),
  \ dotnet#field('_baseVGlyphRunY', 'float64'),
  \ dotnet#method('GlyphRun(', 'Matrix& matrix)', 'void'),
  \ dotnet#method('get_IsValid(', ')', 'bool'),
  \ dotnet#method('IsSame(', 'GlyphRun/Scale& scale)', 'bool'),
  \ dotnet#prop('IsValid', 'bool'),
  \ dotnet#method('GlyphRun(', ')', 'void'),
  \ dotnet#method('GlyphRun(', 'class GlyphTypeface glyphTypeface, int32 bidiLevel, bool isSideways, float64 renderingEmSize, IList glyphIndices, Point baselineOrigin, IList advanceWidths, IList glyphOffsets, IList characters, string deviceFontName, IList clusterMap, IList caretStops, XmlLanguage language)', 'void'),
  \ dotnet#method('TryCreate(', 'class GlyphTypeface glyphTypeface, int32 bidiLevel, bool isSideways, float64 renderingEmSize, IList glyphIndices, Point baselineOrigin, IList advanceWidths, IList glyphOffsets, IList characters, string deviceFontName, IList clusterMap, IList caretStops, XmlLanguage language, TextFormattingMode textLayout)', 'static GlyphRun'),
  \ dotnet#method('GetDistanceFromCaretCharacterHit(', 'CharacterHit characterHit)', 'float64'),
  \ dotnet#method('GetCaretCharacterHitFromDistance(', 'float64 distance, [out] bool& isInside)', 'CharacterHit'),
  \ dotnet#method('GetNextCaretCharacterHit(', 'CharacterHit characterHit)', 'CharacterHit'),
  \ dotnet#method('GetPreviousCaretCharacterHit(', 'CharacterHit characterHit)', 'CharacterHit'),
  \ dotnet#method('get_BaselineOrigin(', ')', 'Point'),
  \ dotnet#method('set_BaselineOrigin(', 'Point value)', 'void'),
  \ dotnet#method('get_FontRenderingEmSize(', ')', 'float64'),
  \ dotnet#method('set_FontRenderingEmSize(', 'float64 value)', 'void'),
  \ dotnet#method('get_GlyphTypeface(', ')', 'GlyphTypeface'),
  \ dotnet#method('set_GlyphTypeface(', 'class GlyphTypeface value)', 'void'),
  \ dotnet#method('get_BidiLevel(', ')', 'int32'),
  \ dotnet#method('set_BidiLevel(', 'int32 value)', 'void'),
  \ dotnet#method('get_IsSideways(', ')', 'bool'),
  \ dotnet#method('set_IsSideways(', 'bool value)', 'void'),
  \ dotnet#method('get_CaretStops(', ')', 'IList'),
  \ dotnet#method('set_CaretStops(', 'class IList value)', 'void'),
  \ dotnet#method('get_IsHitTestable(', ')', 'bool'),
  \ dotnet#method('get_ClusterMap(', ')', 'IList'),
  \ dotnet#method('set_ClusterMap(', 'class IList value)', 'void'),
  \ dotnet#method('get_Characters(', ')', 'IList'),
  \ dotnet#method('set_Characters(', 'class IList value)', 'void'),
  \ dotnet#method('get_GlyphIndices(', ')', 'IList'),
  \ dotnet#method('set_GlyphIndices(', 'class IList value)', 'void'),
  \ dotnet#method('get_AdvanceWidths(', ')', 'IList'),
  \ dotnet#method('set_AdvanceWidths(', 'class IList value)', 'void'),
  \ dotnet#method('get_GlyphOffsets(', ')', 'IList'),
  \ dotnet#method('set_GlyphOffsets(', 'class IList value)', 'void'),
  \ dotnet#method('get_Language(', ')', 'XmlLanguage'),
  \ dotnet#method('set_Language(', 'class XmlLanguage value)', 'void'),
  \ dotnet#method('get_DeviceFontName(', ')', 'string'),
  \ dotnet#method('set_DeviceFontName(', 'string value)', 'void'),
  \ dotnet#method('GetGlyphOffset(', 'int32 i)', 'Point'),
  \ dotnet#method('get_GlyphCount(', ')', 'int32'),
  \ dotnet#method('get_CodepointCount(', ')', 'int32'),
  \ dotnet#method('ComputeInkBoundingBox(', ')', 'Rect'),
  \ dotnet#method('BuildGeometry(', ')', 'Geometry'),
  \ dotnet#method('ComputeAlignmentBox(', ')', 'Rect'),
  \ dotnet#method('EmitBackground(', 'class DrawingContext dc, Brush backgroundBrush)', 'void'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('RemoveChildFromParent(', 'class DUCE/IResource parent, DUCE/Channel channel)', 'void '),
  \ dotnet#method('Get3DHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#method('GlyphRun(', ')', 'static void .'),
  \ dotnet#prop('BaselineOrigin', 'Point'),
  \ dotnet#prop('FontRenderingEmSize', 'float64'),
  \ dotnet#prop('GlyphTypeface', 'GlyphTypeface'),
  \ dotnet#prop('BidiLevel', 'int32'),
  \ dotnet#prop('IsSideways', 'bool'),
  \ dotnet#prop('CaretStops', 'IList'),
  \ dotnet#prop('IsHitTestable', 'bool'),
  \ dotnet#prop('ClusterMap', 'IList'),
  \ dotnet#prop('Characters', 'IList'),
  \ dotnet#prop('GlyphIndices', 'IList'),
  \ dotnet#prop('AdvanceWidths', 'IList'),
  \ dotnet#prop('GlyphOffsets', 'IList'),
  \ dotnet#prop('Language', 'XmlLanguage'),
  \ dotnet#prop('DeviceFontName', 'string'),
  \ dotnet#prop('GlyphCount', 'int32'),
  \ dotnet#prop('CodepointCount', 'int32'),
  \ ])

call dotnet#class('GlyphTypeface', 'Object', [ 
  \ dotnet#method('GlyphTypeface(', ')', 'void'),
  \ dotnet#method('GlyphTypeface(', 'class Uri typefaceSource)', 'void'),
  \ dotnet#method('GlyphTypeface(', 'class Uri typefaceSource, StyleSimulations styleSimulations)', 'void'),
  \ dotnet#method('GlyphTypeface(', 'class Font font)', 'void'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('GetGlyphOutline(', 'uint16 glyphIndex, float64 renderingEmSize, float64 hintingEmSize)', 'Geometry'),
  \ dotnet#method('ComputeSubset(', 'class ICollection glyphs)', 'uint8[]'),
  \ dotnet#method('GetFontStream(', ')', 'Stream'),
  \ dotnet#method('get_CriticalFileReadPermission(', ')', '.method'),
  \ dotnet#method('get_CriticalUriDiscoveryPermission(', ')', '.method'),
  \ dotnet#method('get_FontUri(', ')', 'Uri'),
  \ dotnet#method('set_FontUri(', 'class Uri value)', 'void'),
  \ dotnet#method('get_FamilyNames(', ')', 'IDictionary'),
  \ dotnet#method('get_FaceNames(', ')', 'IDictionary'),
  \ dotnet#method('get_Win32FamilyNames(', ')', 'IDictionary'),
  \ dotnet#method('get_AdjustedFaceNames(', ')', ''),
  \ dotnet#method('get_Win32FaceNames(', ')', 'IDictionary'),
  \ dotnet#method('get_VersionStrings(', ')', 'IDictionary'),
  \ dotnet#method('get_Copyrights(', ')', 'IDictionary'),
  \ dotnet#method('get_ManufacturerNames(', ')', 'IDictionary'),
  \ dotnet#method('get_Trademarks(', ')', 'IDictionary'),
  \ dotnet#method('get_DesignerNames(', ')', 'IDictionary'),
  \ dotnet#method('get_Descriptions(', ')', 'IDictionary'),
  \ dotnet#method('get_VendorUrls(', ')', 'IDictionary'),
  \ dotnet#method('get_DesignerUrls(', ')', 'IDictionary'),
  \ dotnet#method('get_LicenseDescriptions(', ')', 'IDictionary'),
  \ dotnet#method('get_SampleTexts(', ')', 'IDictionary'),
  \ dotnet#method('get_Style(', ')', 'FontStyle'),
  \ dotnet#method('get_Weight(', ')', 'FontWeight'),
  \ dotnet#method('get_Stretch(', ')', 'FontStretch'),
  \ dotnet#method('get_Version(', ')', 'float64'),
  \ dotnet#method('get_Height(', ')', 'float64'),
  \ dotnet#method('get_Baseline(', ')', 'float64'),
  \ dotnet#method('get_CapsHeight(', ')', 'float64'),
  \ dotnet#method('get_XHeight(', ')', 'float64'),
  \ dotnet#method('get_Symbol(', ')', 'bool'),
  \ dotnet#method('get_UnderlinePosition(', ')', 'float64'),
  \ dotnet#method('get_UnderlineThickness(', ')', 'float64'),
  \ dotnet#method('get_StrikethroughPosition(', ')', 'float64'),
  \ dotnet#method('get_StrikethroughThickness(', ')', 'float64'),
  \ dotnet#method('get_EmbeddingRights(', ')', 'FontEmbeddingRight'),
  \ dotnet#method('get_CapsHeight(', ')', 'float64 '),
  \ dotnet#method('get_XHeight(', ')', 'float64 '),
  \ dotnet#method('get_Symbol(', ')', 'bool '),
  \ dotnet#method('get_UnderlinePosition(', ')', 'float64 '),
  \ dotnet#method('get_UnderlineThickness(', ')', 'float64 '),
  \ dotnet#method('get_StrikethroughPosition(', ')', 'float64 '),
  \ dotnet#method('get_StrikethroughThickness(', ')', 'float64 '),
  \ dotnet#method('get_AdvanceWidths(', ')', 'IDictionary'),
  \ dotnet#method('get_AdvanceHeights(', ')', 'IDictionary'),
  \ dotnet#method('get_LeftSideBearings(', ')', 'IDictionary'),
  \ dotnet#method('get_RightSideBearings(', ')', 'IDictionary'),
  \ dotnet#method('get_TopSideBearings(', ')', 'IDictionary'),
  \ dotnet#method('get_BottomSideBearings(', ')', 'IDictionary'),
  \ dotnet#method('get_DistancesFromHorizontalBaselineToBlackBoxBottom(', ')', 'IDictionary'),
  \ dotnet#method('get_CharacterToGlyphMap(', ')', 'IDictionary'),
  \ dotnet#method('get_StyleSimulations(', ')', ''),
  \ dotnet#method('set_StyleSimulations(', 'StyleSimulations value)', 'void'),
  \ dotnet#method('get_GlyphCount(', ')', 'int32'),
  \ dotnet#method('get_FontDWrite(', ')', '.method'),
  \ dotnet#method('GetAdvanceWidth(', 'uint16 glyph, TextFormattingMode textFormattingMode, bool isSideways)', 'float64'),
  \ dotnet#method('DemandPermissionsForFontInformation(', ')', 'void'),
  \ dotnet#method('BaselineHelper(', 'GlyphMetrics metrics)', 'static float64'),
  \ dotnet#method('GetGlyphMetrics(', 'uint16 glyph, float64 renderingEmSize, float64 scalingFGlyphTypeface, TextFormattingMode textFormattingMode, bool isSideways, [out] float64& aw, [out] float64& ah, [out] float64& lsb, [out] float64& rsb, [out] float64& tsb, [out] float64& bsb, [out] float64& baseline)', 'void'),
  \ dotnet#method('GetGlyphMetrics(', 'uint16[] glyphs, int32 glyphsLength, float64 renderingEmSize, TextFormattingMode textFormattingMode, bool isSideways, GlyphMetrics[] glyphMetrics)', 'void'),
  \ dotnet#method('ComputeGlyphOutline(', 'uint16 glyphIndex, bool sideways, float64 renderingEmSize)', 'Geometry'),
  \ dotnet#method('GetAdvanceWidthsUnshaped(', 'char* unsafeCharString, int32 stringLength, float64 emSize, float64 scalingFGlyphTypeface, int32* advanceWidthsUnshaped, bool nullFont, TextFormattingMode textFormattingMode, bool isSideways)', 'void'),
  \ dotnet#method('ComputeUnshapedGlyphRun(', 'Point origin, CharacterBufferRange charBufferRange, IList charWidths, float64 emSize, float64 emHintingSize, bool nullGlyph, CultureInfo cultureInfo, string deviceFontName, TextFormattingMode textFormattingMode)', 'GlyphRun'),
  \ dotnet#method('GetGlyphIndicesOptimized(', 'CharacterBufferRange characters, uint16[] glyphIndices)', 'void'),
  \ dotnet#method('GetGlyphMetricsOptimized(', 'CharacterBufferRange characters, float64 emSize, TextFormattingMode textFormattingMode, bool isSideways, GlyphMetrics[] glyphMetrics)', 'void'),
  \ dotnet#method('GetGlyphMetricsOptimized(', 'CharacterBufferRange characters, float64 emSize, uint16[] glyphIndices, GlyphMetrics[] glyphMetrics, TextFormattingMode textFormattingMode, bool isSideways)', 'void'),
  \ dotnet#method('get_FontSource(', ')', '.method'),
  \ dotnet#method('get_FaceIndex(', ')', 'int32'),
  \ dotnet#method('get_FontFaceLayoutInfo(', ')', '.method'),
  \ dotnet#method('get_BlankGlyphIndex(', ')', 'uint16'),
  \ dotnet#method('get_FontTechnology(', ')', '.method'),
  \ dotnet#method('get_DesignEmHeight(', ')', 'uint16'),
  \ dotnet#method('get_GetDWriteFontAddRef(', ')', 'int'),
  \ dotnet#method('BeginInit(', ')', 'void '),
  \ dotnet#method('EndInit(', ')', 'void '),
  \ dotnet#prop('CriticalFileReadPermission', 'CodeAccessPermission'),
  \ dotnet#prop('CriticalUriDiscoveryPermission', 'CodeAccessPermission'),
  \ dotnet#prop('FontUri', 'Uri'),
  \ dotnet#prop('FamilyNames', 'IDictionary'),
  \ dotnet#prop('FaceNames', 'IDictionary'),
  \ dotnet#prop('Win32FamilyNames', 'IDictionary'),
  \ dotnet#prop('AdjustedFaceNames', 'IDictionary'),
  \ dotnet#prop('Win32FaceNames', 'IDictionary'),
  \ dotnet#prop('VersionStrings', 'IDictionary'),
  \ dotnet#prop('Copyrights', 'IDictionary'),
  \ dotnet#prop('ManufacturerNames', 'IDictionary'),
  \ dotnet#prop('Trademarks', 'IDictionary'),
  \ dotnet#prop('DesignerNames', 'IDictionary'),
  \ dotnet#prop('Descriptions', 'IDictionary'),
  \ dotnet#prop('VendorUrls', 'IDictionary'),
  \ dotnet#prop('DesignerUrls', 'IDictionary'),
  \ dotnet#prop('LicenseDescriptions', 'IDictionary'),
  \ dotnet#prop('SampleTexts', 'IDictionary'),
  \ dotnet#prop('Style', 'FontStyle'),
  \ dotnet#prop('Weight', 'FontWeight'),
  \ dotnet#prop('Stretch', 'FontStretch'),
  \ dotnet#prop('Version', 'float64'),
  \ dotnet#prop('Height', 'float64'),
  \ dotnet#prop('Baseline', 'float64'),
  \ dotnet#prop('CapsHeight', 'float64'),
  \ dotnet#prop('XHeight', 'float64'),
  \ dotnet#prop('Symbol', 'bool'),
  \ dotnet#prop('UnderlinePosition', 'float64'),
  \ dotnet#prop('UnderlineThickness', 'float64'),
  \ dotnet#prop('StrikethroughPosition', 'float64'),
  \ dotnet#prop('StrikethroughThickness', 'float64'),
  \ dotnet#prop('EmbeddingRights', 'FontEmbeddingRight'),
  \ dotnet#prop('CapsHeight', 'float64'),
  \ dotnet#prop('XHeight', 'float64'),
  \ dotnet#prop('Symbol', 'bool'),
  \ dotnet#prop('UnderlinePosition', 'float64'),
  \ dotnet#prop('UnderlineThickness', 'float64'),
  \ dotnet#prop('StrikethroughPosition', 'float64'),
  \ dotnet#prop('StrikethroughThickness', 'float64'),
  \ dotnet#prop('AdvanceWidths', 'IDictionary'),
  \ dotnet#prop('AdvanceHeights', 'IDictionary'),
  \ dotnet#prop('LeftSideBearings', 'IDictionary'),
  \ dotnet#prop('RightSideBearings', 'IDictionary'),
  \ dotnet#prop('TopSideBearings', 'IDictionary'),
  \ dotnet#prop('BottomSideBearings', 'IDictionary'),
  \ dotnet#prop('DistancesFromHorizontalBaselineToBlackBoxBottom', 'IDictionary'),
  \ dotnet#prop('CharacterToGlyphMap', 'IDictionary'),
  \ dotnet#prop('StyleSimulations', 'StyleSimulations'),
  \ dotnet#prop('GlyphCount', 'int32'),
  \ dotnet#prop('FontDWrite', 'Font'),
  \ dotnet#prop('FontSource', 'FontSource'),
  \ dotnet#prop('FaceIndex', 'int32'),
  \ dotnet#prop('FontFaceLayoutInfo', 'FontFaceLayoutInfo'),
  \ dotnet#prop('BlankGlyphIndex', 'uint16'),
  \ dotnet#prop('FontTechnology', 'FontTechnology'),
  \ dotnet#prop('DesignEmHeight', 'uint16'),
  \ dotnet#prop('GetDWriteFontAddRef', 'int'),
  \ ])

call dotnet#class('HitTestFilterCallback', 'MulticastDelegate', [ 
  \ dotnet#method('HitTestFilterCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class DependencyObject potentialHitTestTarget)', ''),
  \ dotnet#method('BeginInvoke(', 'class DependencyObject potentialHitTestTarget, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('HitTestResultCallback', 'MulticastDelegate', [ 
  \ dotnet#method('HitTestResultCallback(', 'object object, int method)', 'void'),
  \ dotnet#method('Invoke(', 'class HitTestResult result)', ''),
  \ dotnet#method('BeginInvoke(', 'class HitTestResult result, AsyncCallback callback, object object)', ''),
  \ dotnet#method('EndInvoke(', 'class IAsyncResult result)', ''),
  \ ])

call dotnet#class('ImageMetadata', 'Freezable', [ 
  \ dotnet#method('ImageMetadata(', ')', 'void'),
  \ dotnet#method('Clone(', ')', 'ImageMetadata'),
  \ ])

call dotnet#class('ImageSourceConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext context, Type sourceType)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext context, CultureInfo culture, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('ImageSourceConverter(', ')', 'void'),
  \ ])

call dotnet#class('ImageSourceValueSerializer', 'ValueSerializer', [ 
  \ dotnet#method('CanConvertFromString(', 'string value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('CanConvertToString(', 'object value, IValueSerializerContext context)', 'bool'),
  \ dotnet#method('ConvertFromString(', 'string value, IValueSerializerContext context)', 'object'),
  \ dotnet#method('ConvertToString(', 'object value, IValueSerializerContext context)', 'string'),
  \ dotnet#method('ImageSourceValueSerializer(', ')', 'void'),
  \ ])

call dotnet#class('InvalidWmpVersionException', 'SystemException', [ 
  \ dotnet#method('InvalidWmpVersionException(', ')', 'void'),
  \ dotnet#method('InvalidWmpVersionException(', 'string message)', 'void'),
  \ dotnet#method('InvalidWmpVersionException(', 'class SerializationInfo info, StreamingContext context)', 'void'),
  \ dotnet#method('InvalidWmpVersionException(', 'string message, Exception innerException)', 'void'),
  \ ])

call dotnet#class('Colors', 'Object', [ 
  \ dotnet#method('get_AliceBlue(', ')', 'static'),
  \ dotnet#method('get_AntiqueWhite(', ')', 'static'),
  \ dotnet#method('get_Aqua(', ')', 'static'),
  \ dotnet#method('get_Aquamarine(', ')', 'static'),
  \ dotnet#method('get_Azure(', ')', 'static'),
  \ dotnet#method('get_Beige(', ')', 'static'),
  \ dotnet#method('get_Bisque(', ')', 'static'),
  \ dotnet#method('get_Black(', ')', 'static'),
  \ dotnet#method('get_BlanchedAlmond(', ')', 'static'),
  \ dotnet#method('get_Blue(', ')', 'static'),
  \ dotnet#method('get_BlueViolet(', ')', 'static'),
  \ dotnet#method('get_Brown(', ')', 'static'),
  \ dotnet#method('get_BurlyWood(', ')', 'static'),
  \ dotnet#method('get_CadetBlue(', ')', 'static'),
  \ dotnet#method('get_Chartreuse(', ')', 'static'),
  \ dotnet#method('get_Chocolate(', ')', 'static'),
  \ dotnet#method('get_Coral(', ')', 'static'),
  \ dotnet#method('get_CornflowerBlue(', ')', 'static'),
  \ dotnet#method('get_Cornsilk(', ')', 'static'),
  \ dotnet#method('get_Crimson(', ')', 'static'),
  \ dotnet#method('get_Cyan(', ')', 'static'),
  \ dotnet#method('get_DarkBlue(', ')', 'static'),
  \ dotnet#method('get_DarkCyan(', ')', 'static'),
  \ dotnet#method('get_DarkGoldenrod(', ')', 'static'),
  \ dotnet#method('get_DarkGray(', ')', 'static'),
  \ dotnet#method('get_DarkGreen(', ')', 'static'),
  \ dotnet#method('get_DarkKhaki(', ')', 'static'),
  \ dotnet#method('get_DarkMagenta(', ')', 'static'),
  \ dotnet#method('get_DarkOliveGreen(', ')', 'static'),
  \ dotnet#method('get_DarkOrange(', ')', 'static'),
  \ dotnet#method('get_DarkOrchid(', ')', 'static'),
  \ dotnet#method('get_DarkRed(', ')', 'static'),
  \ dotnet#method('get_DarkSalmon(', ')', 'static'),
  \ dotnet#method('get_DarkSeaGreen(', ')', 'static'),
  \ dotnet#method('get_DarkSlateBlue(', ')', 'static'),
  \ dotnet#method('get_DarkSlateGray(', ')', 'static'),
  \ dotnet#method('get_DarkTurquoise(', ')', 'static'),
  \ dotnet#method('get_DarkViolet(', ')', 'static'),
  \ dotnet#method('get_DeepPink(', ')', 'static'),
  \ dotnet#method('get_DeepSkyBlue(', ')', 'static'),
  \ dotnet#method('get_DimGray(', ')', 'static'),
  \ dotnet#method('get_DodgerBlue(', ')', 'static'),
  \ dotnet#method('get_Firebrick(', ')', 'static'),
  \ dotnet#method('get_FloralWhite(', ')', 'static'),
  \ dotnet#method('get_ForestGreen(', ')', 'static'),
  \ dotnet#method('get_Fuchsia(', ')', 'static'),
  \ dotnet#method('get_Gainsboro(', ')', 'static'),
  \ dotnet#method('get_GhostWhite(', ')', 'static'),
  \ dotnet#method('get_Gold(', ')', 'static'),
  \ dotnet#method('get_Goldenrod(', ')', 'static'),
  \ dotnet#method('get_Gray(', ')', 'static'),
  \ dotnet#method('get_Green(', ')', 'static'),
  \ dotnet#method('get_GreenYellow(', ')', 'static'),
  \ dotnet#method('get_Honeydew(', ')', 'static'),
  \ dotnet#method('get_HotPink(', ')', 'static'),
  \ dotnet#method('get_IndianRed(', ')', 'static'),
  \ dotnet#method('get_Indigo(', ')', 'static'),
  \ dotnet#method('get_Ivory(', ')', 'static'),
  \ dotnet#method('get_Khaki(', ')', 'static'),
  \ dotnet#method('get_Lavender(', ')', 'static'),
  \ dotnet#method('get_LavenderBlush(', ')', 'static'),
  \ dotnet#method('get_LawnGreen(', ')', 'static'),
  \ dotnet#method('get_LemonChiffon(', ')', 'static'),
  \ dotnet#method('get_LightBlue(', ')', 'static'),
  \ dotnet#method('get_LightCoral(', ')', 'static'),
  \ dotnet#method('get_LightCyan(', ')', 'static'),
  \ dotnet#method('get_LightGoldenrodYellow(', ')', 'static'),
  \ dotnet#method('get_LightGray(', ')', 'static'),
  \ dotnet#method('get_LightGreen(', ')', 'static'),
  \ dotnet#method('get_LightPink(', ')', 'static'),
  \ dotnet#method('get_LightSalmon(', ')', 'static'),
  \ dotnet#method('get_LightSeaGreen(', ')', 'static'),
  \ dotnet#method('get_LightSkyBlue(', ')', 'static'),
  \ dotnet#method('get_LightSlateGray(', ')', 'static'),
  \ dotnet#method('get_LightSteelBlue(', ')', 'static'),
  \ dotnet#method('get_LightYellow(', ')', 'static'),
  \ dotnet#method('get_Lime(', ')', 'static'),
  \ dotnet#method('get_LimeGreen(', ')', 'static'),
  \ dotnet#method('get_Linen(', ')', 'static'),
  \ dotnet#method('get_Magenta(', ')', 'static'),
  \ dotnet#method('get_Maroon(', ')', 'static'),
  \ dotnet#method('get_MediumAquamarine(', ')', 'static'),
  \ dotnet#method('get_MediumBlue(', ')', 'static'),
  \ dotnet#method('get_MediumOrchid(', ')', 'static'),
  \ dotnet#method('get_MediumPurple(', ')', 'static'),
  \ dotnet#method('get_MediumSeaGreen(', ')', 'static'),
  \ dotnet#method('get_MediumSlateBlue(', ')', 'static'),
  \ dotnet#method('get_MediumSpringGreen(', ')', 'static'),
  \ dotnet#method('get_MediumTurquoise(', ')', 'static'),
  \ dotnet#method('get_MediumVioletRed(', ')', 'static'),
  \ dotnet#method('get_MidnightBlue(', ')', 'static'),
  \ dotnet#method('get_MintCream(', ')', 'static'),
  \ dotnet#method('get_MistyRose(', ')', 'static'),
  \ dotnet#method('get_Moccasin(', ')', 'static'),
  \ dotnet#method('get_NavajoWhite(', ')', 'static'),
  \ dotnet#method('get_Navy(', ')', 'static'),
  \ dotnet#method('get_OldLace(', ')', 'static'),
  \ dotnet#method('get_Olive(', ')', 'static'),
  \ dotnet#method('get_OliveDrab(', ')', 'static'),
  \ dotnet#method('get_Orange(', ')', 'static'),
  \ dotnet#method('get_OrangeRed(', ')', 'static'),
  \ dotnet#method('get_Orchid(', ')', 'static'),
  \ dotnet#method('get_PaleGoldenrod(', ')', 'static'),
  \ dotnet#method('get_PaleGreen(', ')', 'static'),
  \ dotnet#method('get_PaleTurquoise(', ')', 'static'),
  \ dotnet#method('get_PaleVioletRed(', ')', 'static'),
  \ dotnet#method('get_PapayaWhip(', ')', 'static'),
  \ dotnet#method('get_PeachPuff(', ')', 'static'),
  \ dotnet#method('get_Peru(', ')', 'static'),
  \ dotnet#method('get_Pink(', ')', 'static'),
  \ dotnet#method('get_Plum(', ')', 'static'),
  \ dotnet#method('get_PowderBlue(', ')', 'static'),
  \ dotnet#method('get_Purple(', ')', 'static'),
  \ dotnet#method('get_Red(', ')', 'static'),
  \ dotnet#method('get_RosyBrown(', ')', 'static'),
  \ dotnet#method('get_RoyalBlue(', ')', 'static'),
  \ dotnet#method('get_SaddleBrown(', ')', 'static'),
  \ dotnet#method('get_Salmon(', ')', 'static'),
  \ dotnet#method('get_SandyBrown(', ')', 'static'),
  \ dotnet#method('get_SeaGreen(', ')', 'static'),
  \ dotnet#method('get_SeaShell(', ')', 'static'),
  \ dotnet#method('get_Sienna(', ')', 'static'),
  \ dotnet#method('get_Silver(', ')', 'static'),
  \ dotnet#method('get_SkyBlue(', ')', 'static'),
  \ dotnet#method('get_SlateBlue(', ')', 'static'),
  \ dotnet#method('get_SlateGray(', ')', 'static'),
  \ dotnet#method('get_Snow(', ')', 'static'),
  \ dotnet#method('get_SpringGreen(', ')', 'static'),
  \ dotnet#method('get_SteelBlue(', ')', 'static'),
  \ dotnet#method('get_Tan(', ')', 'static'),
  \ dotnet#method('get_Teal(', ')', 'static'),
  \ dotnet#method('get_Thistle(', ')', 'static'),
  \ dotnet#method('get_Tomato(', ')', 'static'),
  \ dotnet#method('get_Transparent(', ')', 'static'),
  \ dotnet#method('get_Turquoise(', ')', 'static'),
  \ dotnet#method('get_Violet(', ')', 'static'),
  \ dotnet#method('get_Wheat(', ')', 'static'),
  \ dotnet#method('get_White(', ')', 'static'),
  \ dotnet#method('get_WhiteSmoke(', ')', 'static'),
  \ dotnet#method('get_Yellow(', ')', 'static'),
  \ dotnet#method('get_YellowGreen(', ')', 'static'),
  \ dotnet#method('Colors(', ')', 'void'),
  \ dotnet#prop('AliceBlue', 'Color'),
  \ dotnet#prop('AntiqueWhite', 'Color'),
  \ dotnet#prop('Aqua', 'Color'),
  \ dotnet#prop('Aquamarine', 'Color'),
  \ dotnet#prop('Azure', 'Color'),
  \ dotnet#prop('Beige', 'Color'),
  \ dotnet#prop('Bisque', 'Color'),
  \ dotnet#prop('Black', 'Color'),
  \ dotnet#prop('BlanchedAlmond', 'Color'),
  \ dotnet#prop('Blue', 'Color'),
  \ dotnet#prop('BlueViolet', 'Color'),
  \ dotnet#prop('Brown', 'Color'),
  \ dotnet#prop('BurlyWood', 'Color'),
  \ dotnet#prop('CadetBlue', 'Color'),
  \ dotnet#prop('Chartreuse', 'Color'),
  \ dotnet#prop('Chocolate', 'Color'),
  \ dotnet#prop('Coral', 'Color'),
  \ dotnet#prop('CornflowerBlue', 'Color'),
  \ dotnet#prop('Cornsilk', 'Color'),
  \ dotnet#prop('Crimson', 'Color'),
  \ dotnet#prop('Cyan', 'Color'),
  \ dotnet#prop('DarkBlue', 'Color'),
  \ dotnet#prop('DarkCyan', 'Color'),
  \ dotnet#prop('DarkGoldenrod', 'Color'),
  \ dotnet#prop('DarkGray', 'Color'),
  \ dotnet#prop('DarkGreen', 'Color'),
  \ dotnet#prop('DarkKhaki', 'Color'),
  \ dotnet#prop('DarkMagenta', 'Color'),
  \ dotnet#prop('DarkOliveGreen', 'Color'),
  \ dotnet#prop('DarkOrange', 'Color'),
  \ dotnet#prop('DarkOrchid', 'Color'),
  \ dotnet#prop('DarkRed', 'Color'),
  \ dotnet#prop('DarkSalmon', 'Color'),
  \ dotnet#prop('DarkSeaGreen', 'Color'),
  \ dotnet#prop('DarkSlateBlue', 'Color'),
  \ dotnet#prop('DarkSlateGray', 'Color'),
  \ dotnet#prop('DarkTurquoise', 'Color'),
  \ dotnet#prop('DarkViolet', 'Color'),
  \ dotnet#prop('DeepPink', 'Color'),
  \ dotnet#prop('DeepSkyBlue', 'Color'),
  \ dotnet#prop('DimGray', 'Color'),
  \ dotnet#prop('DodgerBlue', 'Color'),
  \ dotnet#prop('Firebrick', 'Color'),
  \ dotnet#prop('FloralWhite', 'Color'),
  \ dotnet#prop('ForestGreen', 'Color'),
  \ dotnet#prop('Fuchsia', 'Color'),
  \ dotnet#prop('Gainsboro', 'Color'),
  \ dotnet#prop('GhostWhite', 'Color'),
  \ dotnet#prop('Gold', 'Color'),
  \ dotnet#prop('Goldenrod', 'Color'),
  \ dotnet#prop('Gray', 'Color'),
  \ dotnet#prop('Green', 'Color'),
  \ dotnet#prop('GreenYellow', 'Color'),
  \ dotnet#prop('Honeydew', 'Color'),
  \ dotnet#prop('HotPink', 'Color'),
  \ dotnet#prop('IndianRed', 'Color'),
  \ dotnet#prop('Indigo', 'Color'),
  \ dotnet#prop('Ivory', 'Color'),
  \ dotnet#prop('Khaki', 'Color'),
  \ dotnet#prop('Lavender', 'Color'),
  \ dotnet#prop('LavenderBlush', 'Color'),
  \ dotnet#prop('LawnGreen', 'Color'),
  \ dotnet#prop('LemonChiffon', 'Color'),
  \ dotnet#prop('LightBlue', 'Color'),
  \ dotnet#prop('LightCoral', 'Color'),
  \ dotnet#prop('LightCyan', 'Color'),
  \ dotnet#prop('LightGoldenrodYellow', 'Color'),
  \ dotnet#prop('LightGray', 'Color'),
  \ dotnet#prop('LightGreen', 'Color'),
  \ dotnet#prop('LightPink', 'Color'),
  \ dotnet#prop('LightSalmon', 'Color'),
  \ dotnet#prop('LightSeaGreen', 'Color'),
  \ dotnet#prop('LightSkyBlue', 'Color'),
  \ dotnet#prop('LightSlateGray', 'Color'),
  \ dotnet#prop('LightSteelBlue', 'Color'),
  \ dotnet#prop('LightYellow', 'Color'),
  \ dotnet#prop('Lime', 'Color'),
  \ dotnet#prop('LimeGreen', 'Color'),
  \ dotnet#prop('Linen', 'Color'),
  \ dotnet#prop('Magenta', 'Color'),
  \ dotnet#prop('Maroon', 'Color'),
  \ dotnet#prop('MediumAquamarine', 'Color'),
  \ dotnet#prop('MediumBlue', 'Color'),
  \ dotnet#prop('MediumOrchid', 'Color'),
  \ dotnet#prop('MediumPurple', 'Color'),
  \ dotnet#prop('MediumSeaGreen', 'Color'),
  \ dotnet#prop('MediumSlateBlue', 'Color'),
  \ dotnet#prop('MediumSpringGreen', 'Color'),
  \ dotnet#prop('MediumTurquoise', 'Color'),
  \ dotnet#prop('MediumVioletRed', 'Color'),
  \ dotnet#prop('MidnightBlue', 'Color'),
  \ dotnet#prop('MintCream', 'Color'),
  \ dotnet#prop('MistyRose', 'Color'),
  \ dotnet#prop('Moccasin', 'Color'),
  \ dotnet#prop('NavajoWhite', 'Color'),
  \ dotnet#prop('Navy', 'Color'),
  \ dotnet#prop('OldLace', 'Color'),
  \ dotnet#prop('Olive', 'Color'),
  \ dotnet#prop('OliveDrab', 'Color'),
  \ dotnet#prop('Orange', 'Color'),
  \ dotnet#prop('OrangeRed', 'Color'),
  \ dotnet#prop('Orchid', 'Color'),
  \ dotnet#prop('PaleGoldenrod', 'Color'),
  \ dotnet#prop('PaleGreen', 'Color'),
  \ dotnet#prop('PaleTurquoise', 'Color'),
  \ dotnet#prop('PaleVioletRed', 'Color'),
  \ dotnet#prop('PapayaWhip', 'Color'),
  \ dotnet#prop('PeachPuff', 'Color'),
  \ dotnet#prop('Peru', 'Color'),
  \ dotnet#prop('Pink', 'Color'),
  \ dotnet#prop('Plum', 'Color'),
  \ dotnet#prop('PowderBlue', 'Color'),
  \ dotnet#prop('Purple', 'Color'),
  \ dotnet#prop('Red', 'Color'),
  \ dotnet#prop('RosyBrown', 'Color'),
  \ dotnet#prop('RoyalBlue', 'Color'),
  \ dotnet#prop('SaddleBrown', 'Color'),
  \ dotnet#prop('Salmon', 'Color'),
  \ dotnet#prop('SandyBrown', 'Color'),
  \ dotnet#prop('SeaGreen', 'Color'),
  \ dotnet#prop('SeaShell', 'Color'),
  \ dotnet#prop('Sienna', 'Color'),
  \ dotnet#prop('Silver', 'Color'),
  \ dotnet#prop('SkyBlue', 'Color'),
  \ dotnet#prop('SlateBlue', 'Color'),
  \ dotnet#prop('SlateGray', 'Color'),
  \ dotnet#prop('Snow', 'Color'),
  \ dotnet#prop('SpringGreen', 'Color'),
  \ dotnet#prop('SteelBlue', 'Color'),
  \ dotnet#prop('Tan', 'Color'),
  \ dotnet#prop('Teal', 'Color'),
  \ dotnet#prop('Thistle', 'Color'),
  \ dotnet#prop('Tomato', 'Color'),
  \ dotnet#prop('Transparent', 'Color'),
  \ dotnet#prop('Turquoise', 'Color'),
  \ dotnet#prop('Violet', 'Color'),
  \ dotnet#prop('Wheat', 'Color'),
  \ dotnet#prop('White', 'Color'),
  \ dotnet#prop('WhiteSmoke', 'Color'),
  \ dotnet#prop('Yellow', 'Color'),
  \ dotnet#prop('YellowGreen', 'Color'),
  \ ])

call dotnet#class('MediaClock', 'Clock', [ 
  \ dotnet#method('MediaClock(', 'class MediaTimeline media)', 'famorassem void'),
  \ dotnet#method('get_Timeline(', ')', 'MediaTimeline'),
  \ dotnet#method('GetCanSlip(', ')', 'bool'),
  \ dotnet#method('GetCurrentTimeCore(', ')', 'TimeSpan'),
  \ dotnet#method('Stopped(', ')', 'void'),
  \ dotnet#method('SpeedChanged(', ')', 'void'),
  \ dotnet#method('DiscontinuousTimeMovement(', ')', 'void'),
  \ dotnet#method('get_NeedsTicksWhenActive(', ')', 'strict bool'),
  \ dotnet#method('get_Player(', ')', '.method'),
  \ dotnet#method('set_Player(', 'class MediaPlayer value)', 'void'),
  \ dotnet#prop('Timeline', 'MediaTimeline'),
  \ dotnet#prop('NeedsTicksWhenActive', 'bool'),
  \ dotnet#prop('Player', 'MediaPlayer'),
  \ ])

call dotnet#class('ExceptionEventArgs', 'EventArgs', [ 
  \ dotnet#method('ExceptionEventArgs(', 'class Exception errorException)', 'void'),
  \ dotnet#method('get_ErrorException(', ')', 'Exception'),
  \ dotnet#prop('ErrorException', 'Exception'),
  \ ])

call dotnet#class('MediaScriptCommandEventArgs', 'EventArgs', [ 
  \ dotnet#method('MediaScriptCommandEventArgs(', 'string parameterType, string parameterValue)', 'void'),
  \ dotnet#method('get_ParameterType(', ')', 'string'),
  \ dotnet#method('get_ParameterValue(', ')', 'string'),
  \ dotnet#prop('ParameterType', 'string'),
  \ dotnet#prop('ParameterValue', 'string'),
  \ ])

call dotnet#class('MediaPlayer', 'Animatable', [ 
  \ dotnet#field('_duceResource', 'DUCE/ShareableDUCEMultiChannelResource'),
  \ dotnet#method('MediaPlayer(', ')', 'void'),
  \ dotnet#method('get_IsBuffering(', ')', 'bool'),
  \ dotnet#method('get_CanPause(', ')', 'bool'),
  \ dotnet#method('get_DownloadProgress(', ')', 'float64'),
  \ dotnet#method('get_BufferingProgress(', ')', 'float64'),
  \ dotnet#method('get_NaturalVideoHeight(', ')', 'int32'),
  \ dotnet#method('get_NaturalVideoWidth(', ')', 'int32'),
  \ dotnet#method('get_HasAudio(', ')', 'bool'),
  \ dotnet#method('get_HasVideo(', ')', 'bool'),
  \ dotnet#method('get_Source(', ')', 'Uri'),
  \ dotnet#method('get_Volume(', ')', 'float64'),
  \ dotnet#method('set_Volume(', 'float64 value)', 'void'),
  \ dotnet#method('get_Balance(', ')', 'float64'),
  \ dotnet#method('set_Balance(', 'float64 value)', 'void'),
  \ dotnet#method('get_ScrubbingEnabled(', ')', 'bool'),
  \ dotnet#method('set_ScrubbingEnabled(', 'bool value)', 'void'),
  \ dotnet#method('get_IsMuted(', ')', 'bool'),
  \ dotnet#method('set_IsMuted(', 'bool value)', 'void'),
  \ dotnet#method('get_NaturalDuration(', ')', 'Duration'),
  \ dotnet#method('set_Position(', 'TimeSpan value)', 'void'),
  \ dotnet#method('get_Position(', ')', 'TimeSpan'),
  \ dotnet#method('get_SpeedRatio(', ')', 'float64'),
  \ dotnet#method('set_SpeedRatio(', 'float64 value)', 'void'),
  \ dotnet#method('add_MediaFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_MediaFailed(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_MediaOpened(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_MediaOpened(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_MediaEnded(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_MediaEnded(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_BufferingStarted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_BufferingStarted(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_BufferingEnded(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_BufferingEnded(', 'class EventHandler value)', 'void'),
  \ dotnet#method('add_ScriptCommand(', 'class EventHandler value)', 'void'),
  \ dotnet#method('remove_ScriptCommand(', 'class EventHandler value)', 'void'),
  \ dotnet#method('get_Clock(', ')', 'MediaClock'),
  \ dotnet#method('set_Clock(', 'class MediaClock value)', 'void'),
  \ dotnet#method('Open(', 'class Uri source)', 'void'),
  \ dotnet#method('Play(', ')', 'void'),
  \ dotnet#method('Pause(', ')', 'void'),
  \ dotnet#method('Stop(', ')', 'void'),
  \ dotnet#method('Close(', ')', 'void'),
  \ dotnet#method('AddRefOnChannel(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('AddRefOnChannelCore(', 'class DUCE/Channel channel)', 'DUCE/ResourceHandle'),
  \ dotnet#method('ReleaseOnChannel(', 'class DUCE/Channel channel)', 'void '),
  \ dotnet#method('ReleaseOnChannelCore(', 'class DUCE/Channel channel)', 'void'),
  \ dotnet#method('GetHandle(', 'class DUCE/Channel channel)', ''),
  \ dotnet#method('GetHandleCore(', 'class DUCE/Channel channel)', 'DUCE/ResourceHandle'),
  \ dotnet#method('GetChannelCount(', ')', 'int32 '),
  \ dotnet#method('GetChannel(', 'int32 index)', ''),
  \ dotnet#method('UpdateResource(', 'class DUCE/Channel channel, bool skipOnChannelCheck)', 'strict void'),
  \ dotnet#method('CreateInstanceCore(', ')', 'Freezable'),
  \ dotnet#method('CloneCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('CloneCurrentValueCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('GetAsFrozenCore(', 'class Freezable sourceFreezable)', 'void'),
  \ dotnet#method('ReadPreamble(', ')', 'void'),
  \ dotnet#method('WritePreamble(', ')', 'void'),
  \ dotnet#method('SetSpeedRatio(', 'float64 value)', 'void'),
  \ dotnet#method('SetSource(', 'class Uri source)', 'void'),
  \ dotnet#method('SetPosition(', 'TimeSpan value)', 'void'),
  \ dotnet#event('MediaFailed', 'EventHandler'),
  \ dotnet#event('MediaOpened', 'EventHandler'),
  \ dotnet#event('MediaEnded', 'EventHandler'),
  \ dotnet#event('BufferingStarted', 'EventHandler'),
  \ dotnet#event('BufferingEnded', 'EventHandler'),
  \ dotnet#event('ScriptCommand', 'EventHandler'),
  \ dotnet#prop('IsBuffering', 'bool'),
  \ dotnet#prop('CanPause', 'bool'),
  \ dotnet#prop('DownloadProgress', 'float64'),
  \ dotnet#prop('BufferingProgress', 'float64'),
  \ dotnet#prop('NaturalVideoHeight', 'int32'),
  \ dotnet#prop('NaturalVideoWidth', 'int32'),
  \ dotnet#prop('HasAudio', 'bool'),
  \ dotnet#prop('HasVideo', 'bool'),
  \ dotnet#prop('Source', 'Uri'),
  \ dotnet#prop('Volume', 'float64'),
  \ dotnet#prop('Balance', 'float64'),
  \ dotnet#prop('ScrubbingEnabled', 'bool'),
  \ dotnet#prop('IsMuted', 'bool'),
  \ dotnet#prop('NaturalDuration', 'Duration'),
  \ dotnet#prop('Position', 'TimeSpan'),
  \ dotnet#prop('SpeedRatio', 'float64'),
  \ dotnet#prop('Clock', 'MediaClock'),
  \ ])

call dotnet#class('PixelFormatChannelMask', 'ValueType', [ 
  \ dotnet#field('_mask', 'uint8[]'),
  \ dotnet#method('PixelFormatChannelMask(', 'uint8[] mask)', 'void'),
  \ dotnet#method('get_Mask(', ')', 'IList'),
  \ dotnet#method('op_Equality(', 'PixelFormatChannelMask left, PixelFormatChannelMask right)', 'static bool'),
  \ dotnet#method('Equals(', 'PixelFormatChannelMask left, PixelFormatChannelMask right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'PixelFormatChannelMask left, PixelFormatChannelMask right)', 'static bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#prop('Mask', 'IList'),
  \ ])

call dotnet#class('PixelFormat', 'ValueType', [ 
  \ dotnet#field('_flags', 'PixelFormatFlags'),
  \ dotnet#field('_format', 'PixelFormatEnum'),
  \ dotnet#field('_bitsPerPixel', 'uint32'),
  \ dotnet#field('_guidFormat', 'SecurityCriticalDataForSet'),
  \ dotnet#method('PixelFormat(', 'Guid guidPixelFormat)', 'void'),
  \ dotnet#method('PixelFormat(', 'PixelFormatEnum format)', 'void'),
  \ dotnet#method('PixelFormat(', 'string pixelFormatString)', 'void'),
  \ dotnet#method('op_Equality(', 'PixelFormat left, PixelFormat right)', 'static bool'),
  \ dotnet#method('op_Inequality(', 'PixelFormat left, PixelFormat right)', 'static bool'),
  \ dotnet#method('Equals(', 'PixelFormat left, PixelFormat right)', 'static bool'),
  \ dotnet#method('Equals(', 'PixelFormat pixelFormat)', 'bool'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('get_BitsPerPixel(', ')', 'int32'),
  \ dotnet#method('get_Masks(', ')', 'IList'),
  \ dotnet#method('CreatePixelFormatInfo(', ')', 'int'),
  \ dotnet#method('get_InternalBitsPerPixel(', ')', 'int32'),
  \ dotnet#method('get_HasAlpha(', ')', 'bool'),
  \ dotnet#method('get_Palettized(', ')', 'bool'),
  \ dotnet#method('get_Format(', ')', '.method'),
  \ dotnet#method('get_Guid(', ')', '.method'),
  \ dotnet#method('ToString(', ')', 'string'),
  \ dotnet#method('GetPixelFormat(', 'class SafeMILHandle bitmapSource)', 'static PixelFormat'),
  \ dotnet#method('GetPixelFormat(', 'Guid pixelFormatGuid)', 'static PixelFormat'),
  \ dotnet#method('GetPixelFormat(', 'PixelFormatEnum pixelFormatEnum)', 'static PixelFormat'),
  \ dotnet#method('PixelFormat(', ')', 'static void .'),
  \ dotnet#prop('BitsPerPixel', 'int32'),
  \ dotnet#prop('Masks', 'IList'),
  \ dotnet#prop('InternalBitsPerPixel', 'int32'),
  \ dotnet#prop('HasAlpha', 'bool'),
  \ dotnet#prop('Palettized', 'bool'),
  \ dotnet#prop('Format', 'PixelFormatEnum'),
  \ dotnet#prop('Guid', 'Guid'),
  \ ])

call dotnet#class('PixelFormatConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext td, Type t)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext context, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFromString(', 'string value)', 'object'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext td, CultureInfo ci, object o)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)', 'object'),
  \ dotnet#method('PixelFormatConverter(', ')', 'void'),
  \ ])

call dotnet#class('PixelFormats', 'Object', [ 
  \ dotnet#method('get_Default(', ')', 'static'),
  \ dotnet#method('get_Indexed1(', ')', 'static'),
  \ dotnet#method('get_Indexed2(', ')', 'static'),
  \ dotnet#method('get_Indexed4(', ')', 'static'),
  \ dotnet#method('get_Indexed8(', ')', 'static'),
  \ dotnet#method('get_BlackWhite(', ')', 'static'),
  \ dotnet#method('get_Gray2(', ')', 'static'),
  \ dotnet#method('get_Gray4(', ')', 'static'),
  \ dotnet#method('get_Gray8(', ')', 'static'),
  \ dotnet#method('get_Bgr555(', ')', 'static'),
  \ dotnet#method('get_Bgr565(', ')', 'static'),
  \ dotnet#method('get_Rgb128Float(', ')', 'static'),
  \ dotnet#method('get_Bgr24(', ')', 'static'),
  \ dotnet#method('get_Rgb24(', ')', 'static'),
  \ dotnet#method('get_Bgr101010(', ')', 'static'),
  \ dotnet#method('get_Bgr32(', ')', 'static'),
  \ dotnet#method('get_Bgra32(', ')', 'static'),
  \ dotnet#method('get_Pbgra32(', ')', 'static'),
  \ dotnet#method('get_Rgb48(', ')', 'static'),
  \ dotnet#method('get_Rgba64(', ')', 'static'),
  \ dotnet#method('get_Prgba64(', ')', 'static'),
  \ dotnet#method('get_Gray16(', ')', 'static'),
  \ dotnet#method('get_Gray32Float(', ')', 'static'),
  \ dotnet#method('get_Rgba128Float(', ')', 'static'),
  \ dotnet#method('get_Prgba128Float(', ')', 'static'),
  \ dotnet#method('get_Cmyk32(', ')', 'static'),
  \ dotnet#prop('Default', 'PixelFormat'),
  \ dotnet#prop('Indexed1', 'PixelFormat'),
  \ dotnet#prop('Indexed2', 'PixelFormat'),
  \ dotnet#prop('Indexed4', 'PixelFormat'),
  \ dotnet#prop('Indexed8', 'PixelFormat'),
  \ dotnet#prop('BlackWhite', 'PixelFormat'),
  \ dotnet#prop('Gray2', 'PixelFormat'),
  \ dotnet#prop('Gray4', 'PixelFormat'),
  \ dotnet#prop('Gray8', 'PixelFormat'),
  \ dotnet#prop('Bgr555', 'PixelFormat'),
  \ dotnet#prop('Bgr565', 'PixelFormat'),
  \ dotnet#prop('Rgb128Float', 'PixelFormat'),
  \ dotnet#prop('Bgr24', 'PixelFormat'),
  \ dotnet#prop('Rgb24', 'PixelFormat'),
  \ dotnet#prop('Bgr101010', 'PixelFormat'),
  \ dotnet#prop('Bgr32', 'PixelFormat'),
  \ dotnet#prop('Bgra32', 'PixelFormat'),
  \ dotnet#prop('Pbgra32', 'PixelFormat'),
  \ dotnet#prop('Rgb48', 'PixelFormat'),
  \ dotnet#prop('Rgba64', 'PixelFormat'),
  \ dotnet#prop('Prgba64', 'PixelFormat'),
  \ dotnet#prop('Gray16', 'PixelFormat'),
  \ dotnet#prop('Gray32Float', 'PixelFormat'),
  \ dotnet#prop('Rgba128Float', 'PixelFormat'),
  \ dotnet#prop('Prgba128Float', 'PixelFormat'),
  \ dotnet#prop('Cmyk32', 'PixelFormat'),
  \ ])

call dotnet#class('PointHitTestResult', 'HitTestResult', [ 
  \ dotnet#method('PointHitTestResult(', 'class Visual visualHit, Point pointHit)', 'void'),
  \ dotnet#method('get_PointHit(', ')', 'Point'),
  \ dotnet#method('get_VisualHit(', ')', 'Visual'),
  \ dotnet#prop('PointHit', 'Point'),
  \ dotnet#prop('VisualHit', 'Visual'),
  \ ])

call dotnet#class('PointHitTestParameters', 'HitTestParameters', [ 
  \ dotnet#method('PointHitTestParameters(', 'Point point)', 'void'),
  \ dotnet#method('get_HitPoint(', ')', 'Point'),
  \ dotnet#method('SetHitPoint(', 'Point hitPoint)', 'void'),
  \ dotnet#prop('HitPoint', 'Point'),
  \ ])

call dotnet#class('RenderCapability', 'Object', [ 
  \ dotnet#method('get_Tier(', ')', 'static int32'),
  \ dotnet#method('IsPixelShaderVersionSupported(', 'int16 majorVersionRequested, int16 minorVersionRequested)', 'static bool'),
  \ dotnet#method('IsPixelShaderVersionSupportedInSoftware(', 'int16 majorVersionRequested, int16 minorVersionRequested)', 'static bool'),
  \ dotnet#method('get_IsShaderEffectSoftwareRenderingSupported(', ')', 'static bool'),
  \ dotnet#method('MaxPixelShaderInstructionSlots(', 'int16 majorVersionRequested, int16 minorVersionRequested)', 'static int32'),
  \ dotnet#method('get_MaxHardwareTextureSize(', ')', 'static'),
  \ dotnet#method('add_TierChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#method('remove_TierChanged(', 'class EventHandler value)', 'static void'),
  \ dotnet#event('TierChanged', 'EventHandler'),
  \ dotnet#prop('Tier', 'int32'),
  \ dotnet#prop('IsShaderEffectSoftwareRenderingSupported', 'bool'),
  \ dotnet#prop('MaxHardwareTextureSize', 'Size'),
  \ ])

call dotnet#class('RenderingEventArgs', 'EventArgs', [ 
  \ dotnet#method('RenderingEventArgs(', 'TimeSpan renderingTime)', 'void'),
  \ dotnet#method('get_RenderingTime(', ')', 'TimeSpan'),
  \ dotnet#prop('RenderingTime', 'TimeSpan'),
  \ ])

call dotnet#class('RenderOptions', 'Object', [ 
  \ dotnet#method('GetEdgeMode(', 'class DependencyObject target)', 'static EdgeMode'),
  \ dotnet#method('SetEdgeMode(', 'class DependencyObject target, EdgeMode edgeMode)', 'static void'),
  \ dotnet#method('GetBitmapScalingMode(', 'class DependencyObject target)', 'static BitmapScalingMode'),
  \ dotnet#method('SetBitmapScalingMode(', 'class DependencyObject target, BitmapScalingMode bitmapScalingMode)', 'static void'),
  \ dotnet#method('GetClearTypeHint(', 'class DependencyObject target)', 'static ClearTypeHint'),
  \ dotnet#method('SetClearTypeHint(', 'class DependencyObject target, ClearTypeHint clearTypeHint)', 'static void'),
  \ dotnet#method('GetCachingHint(', 'class DependencyObject target)', 'static CachingHint'),
  \ dotnet#method('SetCachingHint(', 'class DependencyObject target, CachingHint cachingHint)', 'static void'),
  \ dotnet#method('GetCacheInvalidationThresholdMinimum(', 'class DependencyObject target)', 'static float64'),
  \ dotnet#method('SetCacheInvalidationThresholdMinimum(', 'class DependencyObject target, float64 cacheInvalidationThresholdMinimum)', 'static void'),
  \ dotnet#method('GetCacheInvalidationThresholdMaximum(', 'class DependencyObject target)', 'static float64'),
  \ dotnet#method('SetCacheInvalidationThresholdMaximum(', 'class DependencyObject target, float64 cacheInvalidationThresholdMaximum)', 'static void'),
  \ dotnet#method('get_ProcessRenderMode(', ')', 'static'),
  \ dotnet#method('set_ProcessRenderMode(', 'RenderMode value)', 'static void'),
  \ dotnet#method('RenderOptions(', ')', 'static void .'),
  \ dotnet#prop('ProcessRenderMode', 'RenderMode'),
  \ ])

call dotnet#class('RequestCachePolicyConverter', 'TypeConverter', [ 
  \ dotnet#method('CanConvertFrom(', 'class ITypeDescriptorContext td, Type t)', 'bool'),
  \ dotnet#method('CanConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, Type destinationType)', 'bool'),
  \ dotnet#method('ConvertFrom(', 'class ITypeDescriptorContext td, CultureInfo ci, object value)', 'object'),
  \ dotnet#method('ConvertTo(', 'class ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType)', 'object'),
  \ dotnet#method('RequestCachePolicyConverter(', ')', 'void'),
  \ ])

call dotnet#class('NumberSubstitution', 'Object', [ 
  \ dotnet#method('NumberSubstitution(', ')', 'void'),
  \ dotnet#method('NumberSubstitution(', 'NumberCultureSource source, CultureInfo cultureOverride, NumberSubstitutionMethod substitution)', 'void'),
  \ dotnet#method('get_CultureSource(', ')', 'NumberCultureSource'),
  \ dotnet#method('set_CultureSource(', 'NumberCultureSource value)', 'void'),
  \ dotnet#method('get_CultureOverride(', ')', 'CultureInfo'),
  \ dotnet#method('set_CultureOverride(', 'class CultureInfo value)', 'void'),
  \ dotnet#method('get_Substitution(', ')', 'NumberSubstitutionMethod'),
  \ dotnet#method('set_Substitution(', 'NumberSubstitutionMethod value)', 'void'),
  \ dotnet#method('SetCultureSource(', 'class DependencyObject target, NumberCultureSource value)', 'static void'),
  \ dotnet#method('GetCultureSource(', 'class DependencyObject target)', 'static NumberCultureSource'),
  \ dotnet#method('SetCultureOverride(', 'class DependencyObject target, CultureInfo value)', 'static void'),
  \ dotnet#method('GetCultureOverride(', 'class DependencyObject target)', 'static CultureInfo'),
  \ dotnet#method('SetSubstitution(', 'class DependencyObject target, NumberSubstitutionMethod value)', 'static void'),
  \ dotnet#method('GetSubstitution(', 'class DependencyObject target)', 'static NumberSubstitutionMethod'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object obj)', 'bool'),
  \ dotnet#method('NumberSubstitution(', ')', 'static void .'),
  \ dotnet#prop('CultureSource', 'NumberCultureSource'),
  \ dotnet#prop('CultureOverride', 'CultureInfo'),
  \ dotnet#prop('Substitution', 'NumberSubstitutionMethod'),
  \ ])

call dotnet#class('Typeface', 'Object', [ 
  \ dotnet#method('Typeface(', 'string typefaceName)', 'void'),
  \ dotnet#method('Typeface(', 'class FontfontFamily, FontStyle style, FontWeight weight, FontStretch stretch)', 'void'),
  \ dotnet#method('Typeface(', 'class FontfontFamily, FontStyle style, FontWeight weight, FontStretch stretch, FontfallbackFontFamily)', 'void'),
  \ dotnet#method('get_FontFamily(', ')', 'FontFamily'),
  \ dotnet#method('get_Weight(', ')', 'FontWeight'),
  \ dotnet#method('get_Style(', ')', 'FontStyle'),
  \ dotnet#method('get_Stretch(', ')', 'FontStretch'),
  \ dotnet#method('get_IsObliqueSimulated(', ')', 'bool'),
  \ dotnet#method('get_IsBoldSimulated(', ')', 'bool'),
  \ dotnet#method('TryGetGlyphTypeface(', '[out] GlyphTypeface& glyphTypeface)', 'bool'),
  \ dotnet#method('get_FallbackFontFamily(', ')', '.method'),
  \ dotnet#method('get_XHeight(', ')', 'float64'),
  \ dotnet#method('get_CapsHeight(', ')', 'float64'),
  \ dotnet#method('get_UnderlinePosition(', ')', 'float64'),
  \ dotnet#method('get_UnderlineThickness(', ')', 'float64'),
  \ dotnet#method('get_StrikethroughPosition(', ')', 'float64'),
  \ dotnet#method('get_StrikethroughThickness(', ')', 'float64'),
  \ dotnet#method('get_FaceNames(', ')', 'LanguageSpecificStringDictionary'),
  \ dotnet#method('Baseline(', 'float64 emSize, float64 toReal, float64 pixelsPerDip, TextFormattingMode textFormattingMode)', 'float64'),
  \ dotnet#method('LineSpacing(', 'float64 emSize, float64 toReal, float64 pixelsPerDip, TextFormattingMode textFormattingMode)', 'float64'),
  \ dotnet#method('get_Symbol(', ')', 'bool'),
  \ dotnet#method('get_NullFont(', ')', 'bool'),
  \ dotnet#method('TryGetGlyphTypeface(', ')', 'GlyphTypeface'),
  \ dotnet#method('get_CanonicalStyle(', ')', '.method'),
  \ dotnet#method('get_CanonicalWeight(', ')', '.method'),
  \ dotnet#method('get_CanonicalStretch(', ')', '.method'),
  \ dotnet#method('CheckFastPathNominalGlyphs(', 'CharacterBufferRange charBufferRange, float64 emSize, float64 scalingFTypeface, float64 widthMax, bool keepAWord, bool numberSubstitution, CultureInfo cultureInfo, TextFormattingMode textFormattingMode, bool isSideways, [out] int32& stringLengthFit)', 'bool'),
  \ dotnet#method('GetCharacterNominalWidthsAndIdealWidth(', 'CharacterBufferRange charBufferRange, float64 emSize, float64 toIdeal, TextFormattingMode textFormattingMode, bool isSideways, [out] int32[]& nominalWidths, [out] int32& idealWidth)', 'void'),
  \ dotnet#method('GetHashCode(', ')', 'int32'),
  \ dotnet#method('Equals(', 'object o)', 'bool'),
  \ dotnet#method('CompareFallbackFontFamily(', 'class FontfallbackFontFamily)', 'bool'),
  \ dotnet#prop('FontFamily', 'FontFamily'),
  \ dotnet#prop('Weight', 'FontWeight'),
  \ dotnet#prop('Style', 'FontStyle'),
  \ dotnet#prop('Stretch', 'FontStretch'),
  \ dotnet#prop('IsObliqueSimulated', 'bool'),
  \ dotnet#prop('IsBoldSimulated', 'bool'),
  \ dotnet#prop('FallbackFontFamily', 'FontFamily'),
  \ dotnet#prop('XHeight', 'float64'),
  \ dotnet#prop('CapsHeight', 'float64'),
  \ dotnet#prop('UnderlinePosition', 'float64'),
  \ dotnet#prop('UnderlineThickness', 'float64'),
  \ dotnet#prop('StrikethroughPosition', 'float64'),
  \ dotnet#prop('StrikethroughThickness', 'float64'),
  \ dotnet#prop('FaceNames', 'LanguageSpecificStringDictionary'),
  \ dotnet#prop('Symbol', 'bool'),
  \ dotnet#prop('NullFont', 'bool'),
  \ dotnet#prop('CanonicalStyle', 'FontStyle'),
  \ dotnet#prop('CanonicalWeight', 'FontWeight'),
  \ dotnet#prop('CanonicalStretch', 'FontStretch'),
  \ ])

call dotnet#class('VisualCollection', 'Object', [ 
  \ dotnet#field('_collection', 'VisualCollection'),
  \ dotnet#field('_index', 'int32'),
  \ dotnet#field('_version', 'uint32'),
  \ dotnet#field('_currentElement', 'Visual'),
  \ dotnet#method('VisualCollection(', 'class VisualCollection collection)', 'void'),
  \ dotnet#method('MoveNext(', ')', 'bool'),
  \ dotnet#method('get_Current(', ')', 'object '),
  \ dotnet#method('get_Current(', ')', ''),
  \ dotnet#method('Reset(', ')', 'void'),
  \ dotnet#prop('Current', 'object'),
  \ dotnet#prop('Current', 'Visual'),
  \ dotnet#method('get_InternalCount(', ')', 'int32'),
  \ dotnet#method('get_InternalArray(', ')', '.method'),
  \ dotnet#method('VisualCollection(', 'class Visual parent)', 'void'),
  \ dotnet#method('VerifyAPIReadOnly(', ')', 'void'),
  \ dotnet#method('VerifyAPIReadOnly(', 'class Visual other)', 'void'),
  \ dotnet#method('VerifyAPIReadWrite(', ')', 'void'),
  \ dotnet#method('VerifyAPIReadWrite(', 'class Visual other)', 'void'),
  \ dotnet#method('VerifyNotReadOnly(', ')', 'void'),
  \ dotnet#method('get_Count(', ')', 'int32'),
  \ dotnet#method('get_IsReadOnly(', ')', 'bool'),
  \ dotnet#method('get_IsSynchronized(', ')', 'bool'),
  \ dotnet#method('get_SyncRoot(', ')', 'object'),
  \ dotnet#method('CopyTo(', 'class Array array, int32 index)', 'void'),
  \ dotnet#method('CopyTo(', 'class Visual[] array, int32 index)', 'void'),
  \ dotnet#method('get_InternalCapacity(', ')', 'int32'),
  \ dotnet#method('set_InternalCapacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Capacity(', ')', 'int32'),
  \ dotnet#method('set_Capacity(', 'int32 value)', 'void'),
  \ dotnet#method('get_Item(', 'int32 index)', 'Visual'),
  \ dotnet#method('set_Item(', 'int32 index, Visual value)', 'void'),
  \ dotnet#method('Add(', 'class Visual visual)', 'int32'),
  \ dotnet#method('IndexOf(', 'class Visual visual)', 'int32'),
  \ dotnet#method('Remove(', 'class Visual visual)', 'void'),
  \ dotnet#method('SetReadOnly(', ')', 'void'),
  \ dotnet#method('Contains(', 'class Visual visual)', 'bool'),
  \ dotnet#method('Clear(', ')', 'void'),
  \ dotnet#method('Insert(', 'int32 index, Visual visual)', 'void'),
  \ dotnet#method('RemoveAt(', 'int32 index)', 'void'),
  \ dotnet#method('RemoveRange(', 'int32 index, int32 count)', 'void'),
  \ dotnet#method('Move(', 'class Visual visual, Visual destination)', 'void'),
  \ dotnet#method('GetEnumerator(', ')', ''),
  \ dotnet#method('GetEnumerator(', ')', 'VisualCollection/Enumerator'),
  \ dotnet#prop('InternalCount', 'int32'),
  \ dotnet#prop('InternalArray', 'Visual[]'),
  \ dotnet#prop('Count', 'int32'),
  \ dotnet#prop('IsReadOnly', 'bool'),
  \ dotnet#prop('IsSynchronized', 'bool'),
  \ dotnet#prop('SyncRoot', 'object'),
  \ dotnet#prop('InternalCapacity', 'int32'),
  \ dotnet#prop('Capacity', 'int32'),
  \ dotnet#prop('Item(int32)', 'Visual'),
  \ ])

call dotnet#class('VisualTreeHelper', 'Object', [ 
  \ dotnet#method('IsVisualType(', 'class DependencyObject reference)', 'static bool'),
  \ dotnet#method('GetChildrenCount(', 'class DependencyObject reference)', 'static int32'),
  \ dotnet#method('GetChild(', 'class DependencyObject reference, int32 childIndex)', 'static DependencyObject'),
  \ dotnet#method('GetParent(', 'class DependencyObject reference)', 'static DependencyObject'),
  \ dotnet#method('GetParentInternal(', 'class DependencyObject reference)', 'static DependencyObject'),
  \ dotnet#method('GetContainingVisual2D(', 'class DependencyObject reference)', 'static Visual'),
  \ dotnet#method('GetContainingVisual3D(', 'class DependencyObject reference)', 'static Visual3D'),
  \ dotnet#method('IsAncestorOf(', 'class DependencyObject reference, DependencyObject descendant)', 'static bool'),
  \ dotnet#method('IsAncestorOf(', 'class DependencyObject ancestor, DependencyObject descendant, Type stopType)', 'static bool'),
  \ dotnet#method('FindCommonAncestor(', 'class DependencyObject reference, DependencyObject otherVisual)', 'static DependencyObject'),
  \ dotnet#method('GetClip(', 'class Visual reference)', 'static Geometry'),
  \ dotnet#method('GetOpacity(', 'class Visual reference)', 'static float64'),
  \ dotnet#method('GetOpacityMask(', 'class Visual reference)', 'static Brush'),
  \ dotnet#method('GetOffset(', 'class Visual reference)', 'static VVisualTreeHelper'),
  \ dotnet#method('GetTransform(', 'class Visual reference)', 'static Transform'),
  \ dotnet#method('GetXSnappingGuidelines(', 'class Visual reference)', 'static DoubleCollection'),
  \ dotnet#method('GetYSnappingGuidelines(', 'class Visual reference)', 'static DoubleCollection'),
  \ dotnet#method('GetDrawing(', 'class Visual reference)', 'static DrawingGroup'),
  \ dotnet#method('GetContentBounds(', 'class Visual reference)', 'static Rect'),
  \ dotnet#method('GetContentBounds(', 'class Visual3D reference)', 'static Rect3D'),
  \ dotnet#method('GetDescendantBounds(', 'class Visual reference)', 'static Rect'),
  \ dotnet#method('GetDescendantBounds(', 'class Visual3D reference)', 'static Rect3D'),
  \ dotnet#method('GetBitmapEffect(', 'class Visual reference)', 'static BitmapEffect'),
  \ dotnet#method('GetBitmapEffectInput(', 'class Visual reference)', 'static BitmapEffectInput'),
  \ dotnet#method('GetEffect(', 'class Visual reference)', 'static Effect'),
  \ dotnet#method('GetCacheMode(', 'class Visual reference)', 'static CacheMode'),
  \ dotnet#method('GetEdgeMode(', 'class Visual reference)', 'static EdgeMode'),
  \ dotnet#method('HitTest(', 'class Visual reference, Point point)', 'static HitTestResult'),
  \ dotnet#method('HitTest(', 'class Visual reference, Point point, bool include2DOn3D)', 'static HitTestResult'),
  \ dotnet#method('HitTest(', 'class Visual reference, HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, HitTestParameters hitTestParameters)', 'static void'),
  \ dotnet#method('HitTest(', 'class Visual3D reference, HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, HitTestParameters3D hitTestParameters)', 'static void'),
  \ ])

call dotnet#class('VisualTarget', 'CompositionTarget', [ 
  \ dotnet#method('VisualTarget(', 'class HostVisual hostVisual)', 'void'),
  \ dotnet#method('CreateUCEResources(', 'class DUCE/Channel channel, DUCE/Channel outOfBandChannel)', 'strict void'),
  \ dotnet#method('get_TransformToDevice(', ')', ''),
  \ dotnet#method('get_TransformFromDevice(', ')', ''),
  \ dotnet#method('Dispose(', ')', 'void'),
  \ dotnet#method('ReleaseUCEResources(', 'class DUCE/Channel channel, DUCE/Channel outOfBandChannel)', 'strict void'),
  \ dotnet#method('get_OutOfBandChannel(', ')', '.method'),
  \ dotnet#prop('TransformToDevice', 'Matrix'),
  \ dotnet#prop('TransformFromDevice', 'Matrix'),
  \ dotnet#prop('OutOfBandChannel', 'DUCE/Channel'),
  \ ])

call dotnet#class('AdornerHitTestResult', 'PointHitTestResult', [ 
  \ dotnet#method('AdornerHitTestResult(', 'class Visual visual, Point pt, Adorner adorner)', 'void'),
  \ dotnet#method('get_Adorner(', ')', 'Adorner'),
  \ dotnet#prop('Adorner', 'Adorner'),
  \ ])

call dotnet#class('TextOptions', 'Object', [ 
  \ dotnet#method('IsTextFormattingModeValid(', 'object valueObject)', 'static bool'),
  \ dotnet#method('SetTextFormattingMode(', 'class DependencyObject element, TextFormattingMode value)', 'static void'),
  \ dotnet#method('GetTextFormattingMode(', 'class DependencyObject element)', 'static TextFormattingMode'),
  \ dotnet#method('SetTextRenderingMode(', 'class DependencyObject element, TextRenderingMode value)', 'static void'),
  \ dotnet#method('GetTextRenderingMode(', 'class DependencyObject element)', 'static TextRenderingMode'),
  \ dotnet#method('SetTextHintingMode(', 'class DependencyObject element, TextHintingMode value)', 'static void'),
  \ dotnet#method('GetTextHintingMode(', 'class DependencyObject element)', 'static TextHintingMode'),
  \ dotnet#method('TextOptions(', ')', 'static void .'),
  \ ])

